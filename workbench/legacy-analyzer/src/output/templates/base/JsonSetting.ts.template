import { Setting } from '../settings/types';

/**
 * Base class for JSON-structured settings that provides type-safe JSON handling,
 * validation, and error management.
 */
export abstract class JsonSetting<T> {
    protected abstract settingKey: string;
    protected abstract defaultValue: T;
    protected abstract validate(value: T): void;
    protected abstract servicePrefix?: string;
    private _value: T;

    constructor() {
        this._value = this.defaultValue;
    }

    get value(): T {
        return this._value;
    }

    set value(val: T) {
        this.validate(val);
        this._value = val;
    }

    protected getFullKey(): string {
        return this.servicePrefix ? `${this.servicePrefix}.${this.settingKey}` : this.settingKey;
    }

    toSetting(): Setting {
        try {
            return {
                key: this.getFullKey(),
                value: JSON.stringify(this._value),
                dataType: 'json',
                validation: this.getValidationRules()
            };
        } catch (e) {
            throw new SettingsError(
                `Failed to serialize setting ${this.getFullKey()}`,
                this.getFullKey(),
                'serialize',
                e
            );
        }
    }

    fromSetting(setting: Setting): void {
        if (setting.key !== this.getFullKey()) {
            throw new SettingsError(
                `Invalid setting key. Expected ${this.getFullKey()}, got ${setting.key}`,
                setting.key,
                'key'
            );
        }
        try {
            const parsed = JSON.parse(setting.value);
            this.validate(parsed);
            this._value = parsed;
        } catch (e) {
            if (e instanceof SyntaxError) {
                throw new SettingsError(
                    `Failed to parse JSON for setting ${this.getFullKey()}`,
                    this.getFullKey(),
                    'parse',
                    e
                );
            }
            throw e; // Re-throw validation errors
        }
    }

    protected getValidationRules(): Record<string, any> {
        return {};
    }
}

/**
 * Custom error class for settings-related errors
 */
export class SettingsError extends Error {
    constructor(
        message: string,
        public readonly settingKey: string,
        public readonly errorType: 'parse' | 'serialize' | 'validation' | 'key',
        public readonly originalError?: Error
    ) {
        super(message);
        this.name = 'SettingsError';
    }
}
