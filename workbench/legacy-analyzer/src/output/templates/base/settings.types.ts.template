/**
 * API Types
 * These types define the shape of data sent to and received from the API.
 * They are used for type information only, not implementation.
 */
export interface Setting {
    key: string;
    value: string;
    description?: string;
    dataType: 'string' | 'number' | 'boolean' | 'json';
    validation?: Record<string, any>;
}

export interface SettingGroup {
    settings: Setting[];
    metadata: {
        __metadata?: Record<string, string>;
        __validations?: Record<string, any>;
        __display?: Record<string, any>;
    };
}

/**
 * Service prefix configuration for settings
 */
export interface ServicePrefixConfig {
    prefix: string;            // e.g., 'PsiServices'
    separator: string;         // e.g., '.'
    includeGroupName: boolean; // Whether to include group name in key
}

/**
 * Settings pattern configuration
 */
export interface SettingsPattern {
    type: 'json' | 'primitive';
    validation: 'strict' | 'lenient';
    errorHandling: 'throw' | 'log';
    prefixing: ServicePrefixConfig;
}

/**
 * Settings dependency tracking
 */
export interface SettingsDependency {
    source: string;           // Source setting
    target: string;          // Target setting
    type: 'requires' | 'configures' | 'validates';
    validation?: string[];   // Validation rules
}

/**
 * Model Types
 * These types define the contract for our generated settings classes.
 * ISettingsGroup is implemented by the class, while ISettingsMetadata
 * is used for the static metadata property.
 */

/**
 * Interface that all settings classes must implement to provide
 * conversion between the model and API formats
 */
export interface ISettingsGroup {
    /**
     * Convert this settings object to an array of API Setting objects
     */
    toSettings(): Setting[];

    /**
     * Update this settings object from an array of API Setting objects
     */
    fromSettings(settings: Setting[]): void;
}

/**
 * Type for the static metadata property on settings classes
 */
export interface ISettingsMetadata {
    /**
     * The group name for this settings class
     */
    groupName: string;

    /**
     * Service prefix configuration
     */
    servicePrefix?: ServicePrefixConfig;

    /**
     * Settings pattern to follow
     */
    pattern?: SettingsPattern;

    /**
     * Dependencies between settings
     */
    dependencies?: SettingsDependency[];

    /**
     * Validation rules for settings
     */
    validation?: Record<string, any>;

    /**
     * Display configuration for UI
     */
    display?: Record<string, any>;
}
