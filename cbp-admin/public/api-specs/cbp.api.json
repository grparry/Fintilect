{
  "openapi": "3.0.0",
  "info": {
    "title": "Connect Bill Pay API",
    "description": "API for managing bill payments, payees, and related operations",
    "version": "1.0.0",
    "contact": {
      "name": "Fintilect Support",
      "email": "support@fintilect.com"
    }
  },
  "servers": [
    {
      "url": "/api/v1",
      "description": "API v1"
    }
  ],
  "paths": {
    "/payment/one-time": {
      "post": {
        "summary": "Add a new one-time payment",
        "operationId": "addOneTimePayment",
        "tags": ["Payments"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OneTimePaymentAddRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Payment created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request received"
          },
          "409": {
            "description": "A one-time payment already exists at the given UserPayeeListId and MemberId"
          },
          "500": {
            "description": "Something went wrong"
          }
        }
      }
    },
    "/payment/recurring": {
      "post": {
        "summary": "Add a new recurring payment",
        "operationId": "addRecurringPayment",
        "tags": ["Payments"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RecurringPaymentAddRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Payment created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request received"
          },
          "409": {
            "description": "A recurring payment already exists at the given UserPayeeListId and MemberId"
          },
          "500": {
            "description": "Something went wrong"
          }
        }
      }
    },
    "/payee": {
      "post": {
        "summary": "Add a new payee",
        "description": "Adds a Payee that the user has selected from the list in the UI",
        "operationId": "addPayee",
        "tags": ["Payees"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PayeeAddRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Payee added successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddPayeeResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request syntax"
          },
          "409": {
            "description": "A payee already existed for the given request"
          },
          "500": {
            "description": "Something went wrong"
          }
        }
      }
    },
    "/payee/global-close": {
      "post": {
        "summary": "Close a global payee",
        "description": "Closes an FIS global payee",
        "operationId": "closeGlobalPayee",
        "tags": ["Payees"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PayeeCloseGlobalRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Global payee closed successfully"
          },
          "400": {
            "description": "Invalid request syntax"
          },
          "404": {
            "description": "No global payee found at the given FisPayeeId"
          },
          "500": {
            "description": "Something went wrong"
          }
        }
      }
    },
    "/payee/global-payee/name/{partialName}": {
      "get": {
        "summary": "Get global payees by name",
        "description": "Brings back a list of payees based on a partial name or full name. The payees global database will be searched and the data returned will be rows where the PayeeName starts with the partialName parameter",
        "operationId": "getGlobalPayeesByName",
        "tags": ["Payees"],
        "parameters": [
          {
            "name": "partialName",
            "in": "path",
            "required": true,
            "description": "A partial name or full name to be used for search",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Global payees retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayeeListResponse"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong"
          }
        }
      }
    },
    "/payee/global-payee/zip/{partialZip}": {
      "get": {
        "summary": "Get global payees by zip",
        "description": "Brings back a list of payees based on a partial zip or full zip. The payees global database will be searched and the data returned will be rows where the Zip starts with the partial Zip parameter",
        "operationId": "getGlobalPayeesByZip",
        "tags": ["Payees"],
        "parameters": [
          {
            "name": "partialZip",
            "in": "path",
            "required": true,
            "description": "A partial zip or full zip to be used for search",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Global payees retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayeeListResponse"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong"
          }
        }
      }
    },
    "/payee/global-payee/name/{partialName}/zip/{partialZip}": {
      "get": {
        "summary": "Get global payees by name and zip",
        "description": "Brings back a list of payees based on a (partial name or full name) and (a partial zip or full zip). The payees global database will be searched and the data returned will be rows where the PayeeName starts with the partial Name parameter and Zip starts with the partial Zip parameter",
        "operationId": "getGlobalPayeesByNameZip",
        "tags": ["Payees"],
        "parameters": [
          {
            "name": "partialName",
            "in": "path",
            "required": true,
            "description": "A partial name or full name to be used for search",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partialZip",
            "in": "path",
            "required": true,
            "description": "A partial zip or full zip to be used for search (no url encoding needed)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Global payees retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayeeListResponse"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong"
          }
        }
      }
    },
    "/payee/global-payee/{internalPayeeId}": {
      "get": {
        "summary": "Get global payee by ID",
        "description": "Gets a global payee from the given Internal Payee Id",
        "operationId": "getGlobalPayee",
        "tags": ["Payees"],
        "parameters": [
          {
            "name": "internalPayeeId",
            "in": "path",
            "required": true,
            "description": "The Internal Payee Id of the global payee",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Global payee retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalPayeeResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Internal Payee Id"
          },
          "404": {
            "description": "Unable to find global payee at the given Internal Payee Id"
          },
          "500": {
            "description": "Something went wrong"
          }
        }
      }
    },
    "/payee/global-payee": {
      "put": {
        "summary": "Edit global payee",
        "description": "Edit select details on a Managed Payee. The payees Nickname, Account Number, Account Name, Active Flag and Favorite Flag can be edited",
        "operationId": "editGlobalPayee",
        "tags": ["Payees"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GlobalPayeeEditRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Global payee updated successfully"
          },
          "400": {
            "description": "Invalid request syntax"
          },
          "404": {
            "description": "No user payee found at the given UserPayeeId"
          },
          "500": {
            "description": "Something went wrong"
          }
        }
      }
    },
    "/payee/personal-payee": {
      "put": {
        "summary": "Edit personal payee",
        "description": "Edits a user's personal payee information",
        "operationId": "editPersonalPayee",
        "tags": ["Payees"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonalPayeeEditRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Personal payee updated successfully"
          },
          "400": {
            "description": "Invalid request syntax"
          },
          "404": {
            "description": "No personal payee found at the given PayeeId"
          },
          "500": {
            "description": "Something went wrong"
          }
        }
      }
    },
    "/payee/user-payee/{userPayeeListId}/member/{memberId}": {
      "delete": {
        "summary": "Delete a user's personal payee",
        "description": "Deletes a user's personal payee record. If no payments are pending record gets marked delete. If pending marks record inactive for user payee.",
        "operationId": "deleteUserPayee",
        "tags": ["Payees"],
        "parameters": [
          {
            "name": "userPayeeListId",
            "in": "path",
            "required": true,
            "description": "The user's payee ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "memberId",
            "in": "path",
            "required": true,
            "description": "The user's membership ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User payee deleted successfully"
          },
          "400": {
            "description": "Invalid request syntax"
          },
          "404": {
            "description": "No User payee found at the given UserPayeeId and MemberId"
          },
          "409": {
            "description": "Existing payments exists for the given UserPayee"
          },
          "500": {
            "description": "Something went wrong"
          }
        }
      }
    },
    "/payee/user-payee/{payeeId}/member/{memberId}": {
      "get": {
        "summary": "Get user payee",
        "description": "Gets a user's active personal payee information",
        "operationId": "getUserPayee",
        "tags": ["Payees"],
        "parameters": [
          {
            "name": "payeeId",
            "in": "path",
            "required": true,
            "description": "The user's payee ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "memberId",
            "in": "path",
            "required": true,
            "description": "The user's membership ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User payee retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPayeeResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request syntax"
          },
          "404": {
            "description": "No user payee found at the given PayeeId"
          },
          "500": {
            "description": "Something went wrong"
          }
        }
      }
    },
    "/payee/user-payee-all/{payeeId}/member/{memberId}": {
      "get": {
        "summary": "Get user payee (all status)",
        "description": "Gets a user's personal payee information - active or inactive",
        "operationId": "getUserPayeeAllStatus",
        "tags": ["Payees"],
        "parameters": [
          {
            "name": "payeeId",
            "in": "path",
            "required": true,
            "description": "The user's payee ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "memberId",
            "in": "path",
            "required": true,
            "description": "The user's membership ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User payee retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPayeeResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request syntax"
          },
          "404": {
            "description": "No user payee found at the given PayeeId"
          },
          "500": {
            "description": "Something went wrong"
          }
        }
      }
    },
    "/payee/payees/{memberId}": {
      "get": {
        "summary": "Get user payees",
        "description": "Gets all payees for a user found at the given memberId",
        "operationId": "getUserPayees",
        "tags": ["Payees"],
        "parameters": [
          {
            "name": "memberId",
            "in": "path",
            "required": true,
            "description": "The user's membership ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User payees retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPayeeListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request syntax"
          },
          "500": {
            "description": "Something went wrong"
          }
        }
      }
    },
    "/payee/payees-payments/{memberId}": {
      "get": {
        "summary": "Get user payees with payments",
        "description": "Gets all payees with their payments for a user found at the given memberId",
        "operationId": "getUserPayeesWithPayments",
        "tags": ["Payees"],
        "parameters": [
          {
            "name": "memberId",
            "in": "path",
            "required": true,
            "description": "The user's membership ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User payees with payments retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPayeeWithPaymentsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request syntax"
          },
          "500": {
            "description": "Something went wrong"
          }
        }
      }
    },
    "/payee/user/account-number": {
      "post": {
        "summary": "Update user payee account number",
        "description": "Updates the UsersAccountAtPayee for a UserPayeeList",
        "operationId": "updateUserPayeeAccountNumber",
        "tags": ["Payees"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserPayeeUpdateAccountNumberRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Account number updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPayeeUpdateAccountNumberResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request syntax"
          },
          "404": {
            "description": "A user payee was not found at the given ID"
          },
          "500": {
            "description": "Something went wrong"
          }
        }
      }
    },
    "/payee/user/fis-payee-id": {
      "post": {
        "summary": "Update user payee FIS payee ID",
        "description": "Updates the FisPayeeId for a UserPayeeList",
        "operationId": "updateUserPayeeFisPayeeId",
        "tags": ["Payees"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserPayeeUpdateFisPayeeIdRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "FIS payee ID updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPayeeUpdateFisPayeeIdResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request syntax"
          },
          "404": {
            "description": "A user payee was not found at the given ID"
          },
          "500": {
            "description": "Something went wrong"
          }
        }
      }
    },
    "/payment-history/member/{memberId}/fromDate/{fromDate}": {
      "get": {
        "summary": "Get payment history from date",
        "description": "Gets a user's payment history from a given search date",
        "operationId": "getHistoryFromDate",
        "tags": ["Payment History"],
        "parameters": [
          {
            "name": "memberId",
            "in": "path",
            "required": true,
            "description": "The user's membership ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fromDate",
            "in": "path",
            "required": true,
            "description": "The date to retrieve history for",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Payment history retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentHistoryListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request received"
          },
          "500": {
            "description": "Something went wrong"
          }
        }
      }
    },
    "/payment-history/member/{memberId}/payee/{payeeId}": {
      "get": {
        "summary": "Get payee payment history",
        "description": "Gets a user's payment history with a payee",
        "operationId": "getPayeeHistory",
        "tags": ["Payment History"],
        "parameters": [
          {
            "name": "memberId",
            "in": "path",
            "required": true,
            "description": "The user's membership ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "payeeId",
            "in": "path",
            "required": true,
            "description": "The user's payee ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Payee history retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PayeeHistoryResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request received"
          },
          "500": {
            "description": "Something went wrong"
          }
        }
      }
    },
    "/payment-history/member/{memberId}/payment/{paymentId}": {
      "get": {
        "summary": "Get payment history by ID",
        "description": "Gets a payment history by ID for a given member",
        "operationId": "getPaymentHistory",
        "tags": ["Payment History"],
        "parameters": [
          {
            "name": "memberId",
            "in": "path",
            "required": true,
            "description": "The ID of the member to get the payment from",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentId",
            "in": "path",
            "required": true,
            "description": "The ID of the payment to get",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Payment history retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentInquiryResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request received"
          },
          "404": {
            "description": "No resource found at the given memberId and paymentId"
          },
          "500": {
            "description": "Something went wrong"
          }
        }
      }
    },
    "/notification/send/support": {
      "post": {
        "summary": "Send support notification",
        "description": "Sends a support notification",
        "operationId": "sendSupport",
        "tags": ["Notifications"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NotificationSendSupportRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Support notification sent successfully"
          },
          "500": {
            "description": "Something went wrong"
          }
        }
      }
    },
    "/configuration/{id}": {
      "get": {
        "summary": "Get configuration by ID",
        "description": "Brings back a configuration entry from the configuration table",
        "operationId": "getConfiguration",
        "tags": ["Configuration"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of configuration to look for",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Configuration retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Config was null"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Something went wrong"
          }
        }
      }
    },
    "/configuration/all": {
      "get": {
        "summary": "Get all configurations",
        "description": "Brings back all configurations from the configuration table",
        "operationId": "getAllConfigurations",
        "tags": ["Configuration"],
        "responses": {
          "200": {
            "description": "Configurations retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurationListResponse"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong"
          }
        }
      }
    },
    "/configuration": {
      "post": {
        "summary": "Create configuration",
        "description": "Creates a configuration entry in the configuration table",
        "operationId": "createConfiguration",
        "tags": ["Configuration"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigurationAddRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Configuration created successfully"
          },
          "409": {
            "description": "Config Already Exists"
          },
          "500": {
            "description": "Something went wrong"
          }
        }
      },
      "put": {
        "summary": "Update configuration",
        "description": "Updates a configuration entry in the configuration table",
        "operationId": "updateConfiguration",
        "tags": ["Configuration"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigurationUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Configuration updated successfully"
          },
          "404": {
            "description": "Could not find config to update"
          },
          "500": {
            "description": "Something went wrong"
          }
        }
      }
    },
    "/configuration/{id}": {
      "delete": {
        "summary": "Delete configuration",
        "description": "Deletes a configuration entry from the configuration table",
        "operationId": "deleteConfiguration",
        "tags": ["Configuration"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the configuration to delete",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Configuration deleted successfully"
          },
          "404": {
            "description": "Configuration not found"
          },
          "500": {
            "description": "Something went wrong"
          }
        }
      }
    },
    "/configuration/refresh": {
      "post": {
        "summary": "Refresh configuration",
        "description": "Refreshes stored configuration settings",
        "operationId": "refreshConfiguration",
        "tags": ["Configuration"],
        "responses": {
          "200": {
            "description": "Configuration refreshed successfully"
          },
          "500": {
            "description": "Something went wrong"
          }
        }
      }
    },
    "/calendar/delivery-date/{beginDate}": {
      "get": {
        "summary": "Get delivery dates",
        "description": "Gets the delivery dates for a given begin date",
        "operationId": "getDeliveryDates",
        "tags": ["Calendar"],
        "parameters": [
          {
            "name": "beginDate",
            "in": "path",
            "required": true,
            "description": "The beginning date - 2000-01-01T00:00:00.000 format",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delivery dates retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeliveryDatesResponse"
                }
              }
            }
          },
          "404": {
            "description": "A DeliveryDate at the given beginDate was not found"
          },
          "500": {
            "description": "Something went wrong"
          }
        }
      }
    },
    "/calendar/delivery-date/{beginDate}/{count}": {
      "get": {
        "summary": "Get delivery dates with count",
        "description": "Gets the delivery dates for a given begin date with specified count",
        "operationId": "getDeliveryDatesWithCount",
        "tags": ["Calendar"],
        "parameters": [
          {
            "name": "beginDate",
            "in": "path",
            "required": true,
            "description": "The beginning date - 2000-01-01T00:00:00.000 format",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "count",
            "in": "path",
            "required": true,
            "description": "The number of dates returned",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delivery dates retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeliveryDateRangeListResponse"
                }
              }
            }
          },
          "404": {
            "description": "A DeliveryDate at the given beginDate was not found"
          },
          "500": {
            "description": "Something went wrong"
          }
        }
      }
    },
    "/calendar/holiday/date/{date}": {
      "get": {
        "summary": "Get if date is holiday",
        "description": "Gets if a given date is a holiday",
        "operationId": "getIsHoliday",
        "tags": ["Calendar"],
        "parameters": [
          {
            "name": "date",
            "in": "path",
            "required": true,
            "description": "The date to check - 2000-01-01T00:00:00.000 format",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Holiday check successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IsHolidayResponse"
                }
              }
            }
          },
          "404": {
            "description": "Unable to find current institution info"
          },
          "500": {
            "description": "Something went wrong"
          }
        }
      }
    },
    "/calendar/non-processing": {
      "get": {
        "summary": "Get non-processing dates",
        "description": "Gets all non processing dates for the next 2 years",
        "operationId": "getNonProcessingDates",
        "tags": ["Calendar"],
        "responses": {
          "200": {
            "description": "Non-processing dates retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NonProcessingDatesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Institution Info is missing"
          },
          "500": {
            "description": "Something went wrong"
          }
        }
      }
    },
    "/notification/send/support": {
      "post": {
        "summary": "Send support notification",
        "description": "Sends a support notification",
        "operationId": "sendSupportNotification",
        "tags": ["Notifications"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NotificationSendSupportRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Notification sent successfully"
          },
          "500": {
            "description": "Something went wrong"
          }
        }
      }
    },
    "/exception/send-customer-notification": {
      "post": {
        "summary": "Send customer notification",
        "description": "Sends a notification to the customer",
        "operationId": "sendCustomerNotification",
        "tags": ["Exceptions"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExceptionCustomerNotificationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Notification sent successfully"
          },
          "400": {
            "description": "Bad request received"
          },
          "404": {
            "description": "A bad exceptionId or PaymentId"
          },
          "500": {
            "description": "Something went wrong"
          }
        }
      }
    },
    "/exception/send-notification": {
      "post": {
        "summary": "Send notification",
        "description": "Sends a notification based on status code",
        "operationId": "sendNotification",
        "tags": ["Exceptions"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExceptionNotificationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Notification sent successfully"
          },
          "400": {
            "description": "Bad request received"
          },
          "404": {
            "description": "A bad exceptionId or PaymentId"
          },
          "500": {
            "description": "Something went wrong"
          }
        }
      }
    },
    "/exception/refund": {
      "post": {
        "summary": "Refund payment",
        "description": "Refunds a payment",
        "operationId": "checkForRefundAdjustment",
        "tags": ["Exceptions"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExceptionRefundRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Refund processed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionRefundResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request received"
          },
          "404": {
            "description": "A bad exceptionId or PaymentId"
          },
          "500": {
            "description": "Something went wrong"
          }
        }
      }
    },
    "/run/manual": {
      "post": {
        "summary": "Create manual run",
        "description": "Creates and queues a new manual payment processing run",
        "operationId": "createManualRun",
        "tags": ["Runs"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ManualRunCreateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Manual run created successfully"
          },
          "400": {
            "description": "Invalid process date"
          },
          "500": {
            "description": "Something went wrong"
          }
        }
      }
    },
    "/status": {
      "get": {
        "summary": "Get system status",
        "description": "Gets the current status of the system",
        "operationId": "getStatus",
        "tags": ["Status"],
        "responses": {
          "200": {
            "description": "Status retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponse"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong"
          }
        }
      }
    },
    "/check-image": {
      "post": {
        "summary": "Get check image",
        "description": "Gets a check image for a given member and check number",
        "operationId": "getCheckImage",
        "tags": ["Check Images"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CheckImageGetRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Check image retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckImageResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request received"
          },
          "500": {
            "description": "Something went wrong"
          }
        }
      }
    },
    "/version": {
      "get": {
        "summary": "Get versions",
        "description": "Gets versions of all Global services",
        "operationId": "getVersion",
        "tags": ["Version"],
        "responses": {
          "200": {
            "description": "Versions retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionResponse"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong"
          }
        }
      }
    },
    "/bad-record/from-date/{fromDate}": {
      "get": {
        "summary": "Get bad records from date",
        "description": "Gets all Bad Records on or after the given search date",
        "operationId": "getBadRecordsFromDate",
        "tags": ["Bad Records"],
        "parameters": [
          {
            "name": "fromDate",
            "in": "path",
            "required": true,
            "description": "The date to search from",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Bad records retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRecordListResponse"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong"
          }
        }
      }
    },
    "/payment/member/{memberId}": {
      "get": {
        "summary": "Get member payments",
        "description": "Gets a member's payments",
        "operationId": "getMemberPayments",
        "tags": ["Payments"],
        "parameters": [
          {
            "name": "memberId",
            "in": "path",
            "required": true,
            "description": "The user's membership ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Member payments retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MemberPayment"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request received"
          },
          "500": {
            "description": "Something went wrong"
          }
        }
      }
    },
    "/payment/member-recurring/{memberId}": {
      "get": {
        "summary": "Get member recurring payments",
        "description": "Gets a member's recurring payments",
        "operationId": "getMemberRecurringPayments",
        "tags": ["Payments"],
        "parameters": [
          {
            "name": "memberId",
            "in": "path",
            "required": true,
            "description": "The user's membership ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Member recurring payments retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MemberPayment"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request received"
          },
          "500": {
            "description": "Something went wrong"
          }
        }
      }
    },
    "/payment/member-recurring-date/{memberId}/{endDate}": {
      "get": {
        "summary": "Get member recurring payments to date",
        "description": "Gets a member's recurring payments before a certain date",
        "operationId": "getMemberRecurringPaymentsToDate",
        "tags": ["Payments"],
        "parameters": [
          {
            "name": "memberId",
            "in": "path",
            "required": true,
            "description": "The user's membership ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "path",
            "required": true,
            "description": "Return payments before endDate (format: yyyyMMdd)",
            "schema": {
              "type": "string",
              "pattern": "^\\d{8}$"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Member recurring payments retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MemberPayment"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request received"
          },
          "500": {
            "description": "Something went wrong"
          }
        }
      }
    },
    "/payment/last-payments/{memberId}": {
      "get": {
        "summary": "Get last payments",
        "description": "Gets a user's last payee payments",
        "operationId": "getLastPayments",
        "tags": ["Payments"],
        "parameters": [
          {
            "name": "memberId",
            "in": "path",
            "required": true,
            "description": "The user's membership ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Last payments retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PayeeLastPaymentsResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request received"
          },
          "500": {
            "description": "Something went wrong"
          }
        }
      }
    },
    "/payment/reprocess": {
      "post": {
        "summary": "Reprocess payment",
        "description": "Queues a payment for reprocessing",
        "operationId": "reprocessPayment",
        "tags": ["Payments"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentReprocessRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Payment queued for reprocessing successfully"
          },
          "400": {
            "description": "Bad request received"
          },
          "404": {
            "description": "A payment could not be found at the given ID"
          },
          "500": {
            "description": "Something went wrong"
          }
        }
      }
    },
    "/payment/status": {
      "post": {
        "summary": "Update payment status",
        "description": "Updates the status of a payment",
        "operationId": "updatePaymentStatus",
        "tags": ["Payments"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentUpdateStatusRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Payment status updated successfully"
          },
          "400": {
            "description": "Bad request received"
          },
          "404": {
            "description": "A payment could not be found at the given ID"
          },
          "500": {
            "description": "Something went wrong"
          }
        }
      }
    },
    "/payment/confirmation": {
      "post": {
        "summary": "Send confirmation summary",
        "description": "Sends the payment confirmation notification to CU",
        "operationId": "sendConfirmationSummary",
        "tags": ["Payments"],
        "responses": {
          "200": {
            "description": "Confirmation summary sent successfully"
          },
          "500": {
            "description": "Something went wrong"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "OneTimePaymentAddRequest": {
        "type": "object",
        "required": ["userPayeeListId", "memberId", "fundingAccount"],
        "properties": {
          "userPayeeListId": {
            "type": "string",
            "description": "Id of the UserPayeeList to reference"
          },
          "memberId": {
            "type": "string",
            "description": "The payer's member Id"
          },
          "fundingAccount": {
            "type": "string",
            "description": "The account funding the payment"
          },
          "amount": {
            "type": "number",
            "format": "double",
            "description": "The amount to pay"
          },
          "memo": {
            "type": "string",
            "description": "A short message to store with the payment"
          },
          "billReference": {
            "type": "string",
            "description": "Reference number for the bill"
          },
          "sourceApplication": {
            "type": "string",
            "description": "The application creating the payment"
          },
          "willProcessDate": {
            "type": "string",
            "format": "date-time",
            "description": "The date the payment will process"
          },
          "deliveryDate": {
            "type": "string",
            "format": "date-time",
            "description": "The date the payment will deliver"
          }
        }
      },
      "RecurringPaymentAddRequest": {
        "type": "object",
        "required": ["userPayeeListId", "memberId", "fundingAccount"],
        "allOf": [
          {
            "$ref": "#/components/schemas/OneTimePaymentAddRequest"
          },
          {
            "type": "object",
            "properties": {
              "numPayments": {
                "type": "integer",
                "description": "The number of payments to make"
              },
              "frequency": {
                "type": "string",
                "description": "The frequency to send payments at"
              },
              "processDate": {
                "type": "string",
                "format": "date-time",
                "description": "The process date for payments"
              }
            }
          }
        ]
      },
      "PaymentResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the payment"
          },
          "status": {
            "type": "string",
            "description": "Status of the payment"
          }
        }
      },
      "PayeeAddRequest": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean",
            "description": "Whether the payee is active"
          },
          "address1": {
            "type": "string",
            "description": "Address 1 line used in the Bill Pay system"
          },
          "address2": {
            "type": "string",
            "description": "Address 2 line used in the Bill Pay system"
          },
          "address3": {
            "type": "string",
            "description": "Address 3 line used in the Bill Pay system"
          },
          "city": {
            "type": "string",
            "description": "City used in the Bill Pay system"
          },
          "country": {
            "type": "string",
            "description": "Country used in the Bill Pay system"
          },
          "favorite": {
            "type": "boolean",
            "description": "Whether this payee is a favorite"
          },
          "memberId": {
            "type": "string",
            "description": "User's Id on core"
          },
          "name": {
            "type": "string",
            "description": "Name used in the Bill Pay system"
          },
          "nameOnAccount": {
            "type": "string",
            "description": "The name the user uses at the payee"
          },
          "nickName": {
            "type": "string",
            "description": "The nickname used in the Bill Pay system"
          },
          "payeeId": {
            "type": "string",
            "description": "Id of payee select from list"
          },
          "payeeType": {
            "type": "string",
            "description": "Payee Type ('G' = Global, 'P' = Personal, 'O' = OnUs)",
            "enum": ["G", "P", "O"]
          },
          "phone": {
            "type": "string",
            "description": "Phone used in the Bill Pay system"
          },
          "postalCode": {
            "type": "string",
            "description": "Postal Code used in the Bill Pay system"
          },
          "state": {
            "type": "string",
            "description": "State used in the Bill Pay system"
          },
          "usersAccountAtPayee": {
            "type": "string",
            "description": "The account id used at the payee"
          }
        }
      },
      "PayeeCloseGlobalRequest": {
        "type": "object",
        "required": ["fisPayeeId"],
        "properties": {
          "fisPayeeId": {
            "type": "string",
            "description": "The FIS payee ID to close"
          }
        }
      },
      "AddPayeeResponse": {
        "type": "object",
        "properties": {
          "userPayeeListId": {
            "type": "string",
            "description": "The ID of the newly created user payee"
          }
        }
      },
      "PaymentHistoryListResponse": {
        "type": "object",
        "properties": {
          "paymentHistories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentHistory"
            }
          }
        }
      },
      "PaymentHistory": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the payment history"
          },
          "amount": {
            "type": "number",
            "format": "double",
            "description": "Amount of the payment"
          },
          "status": {
            "type": "string",
            "description": "Status of the payment"
          },
          "processDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date the payment was processed"
          }
        }
      },
      "PayeeHistoryResponse": {
        "type": "object",
        "properties": {
          "paymentId": {
            "type": "string",
            "description": "Unique identifier for the payment"
          },
          "payeeName": {
            "type": "string",
            "description": "Name of the payee"
          },
          "amount": {
            "type": "number",
            "format": "double",
            "description": "Amount of the payment"
          },
          "status": {
            "type": "string",
            "description": "Status of the payment"
          },
          "processDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date the payment was processed"
          }
        }
      },
      "PaymentInquiryResponse": {
        "type": "object",
        "properties": {
          "paymentId": {
            "type": "string",
            "description": "Unique identifier for the payment"
          },
          "payeeName": {
            "type": "string",
            "description": "Name of the payee"
          },
          "amount": {
            "type": "number",
            "format": "double",
            "description": "Amount of the payment"
          },
          "status": {
            "type": "string",
            "description": "Status of the payment"
          },
          "processDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date the payment was processed"
          },
          "memo": {
            "type": "string",
            "description": "Memo associated with the payment"
          }
        }
      },
      "NotificationSendSupportRequest": {
        "type": "object",
        "required": ["subject", "message"],
        "properties": {
          "subject": {
            "type": "string",
            "description": "Subject of the support notification"
          },
          "message": {
            "type": "string",
            "description": "Content of the support notification"
          }
        }
      },
      "ConfigurationAddRequest": {
        "type": "object",
        "required": ["name", "value"],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the configuration"
          },
          "value": {
            "type": "string",
            "description": "Value of the configuration"
          },
          "description": {
            "type": "string",
            "description": "Description of the configuration"
          }
        }
      },
      "ConfigurationResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the configuration"
          },
          "name": {
            "type": "string",
            "description": "Name of the configuration"
          },
          "value": {
            "type": "string",
            "description": "Value of the configuration"
          },
          "description": {
            "type": "string",
            "description": "Description of the configuration"
          }
        }
      },
      "ConfigurationListResponse": {
        "type": "object",
        "properties": {
          "configurations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConfigurationResponse"
            },
            "description": "List of configurations"
          }
        }
      },
      "ConfigurationUpdateRequest": {
        "type": "object",
        "required": ["id", "name", "value"],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the configuration to update"
          },
          "name": {
            "type": "string",
            "description": "Name of the configuration"
          },
          "value": {
            "type": "string",
            "description": "Value of the configuration"
          },
          "description": {
            "type": "string",
            "description": "Description of the configuration"
          }
        }
      },
      "DeliveryDatesResponse": {
        "type": "object",
        "properties": {
          "dates": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "date-time"
            },
            "description": "List of delivery dates"
          }
        }
      },
      "DeliveryDateRangeListResponse": {
        "type": "object",
        "properties": {
          "dates": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "date-time"
            },
            "description": "List of delivery dates within the specified range"
          }
        }
      },
      "IsHolidayResponse": {
        "type": "object",
        "properties": {
          "isHoliday": {
            "type": "boolean",
            "description": "Whether the date is a holiday"
          }
        }
      },
      "NonProcessingDatesResponse": {
        "type": "object",
        "properties": {
          "dates": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "date-time"
            },
            "description": "List of non-processing dates"
          }
        }
      },
      "ExceptionCustomerNotificationRequest": {
        "type": "object",
        "required": ["exceptionId", "paymentId"],
        "properties": {
          "exceptionId": {
            "type": "string",
            "description": "ID of the exception"
          },
          "paymentId": {
            "type": "string",
            "description": "ID of the payment"
          }
        }
      },
      "ExceptionNotificationRequest": {
        "type": "object",
        "required": ["statusCode"],
        "properties": {
          "statusCode": {
            "type": "string",
            "description": "Status code for the notification"
          }
        }
      },
      "ExceptionRefundRequest": {
        "type": "object",
        "required": ["exceptionId", "paymentId"],
        "properties": {
          "exceptionId": {
            "type": "string",
            "description": "ID of the exception"
          },
          "paymentId": {
            "type": "string",
            "description": "ID of the payment"
          }
        }
      },
      "ExceptionRefundResponse": {
        "type": "object",
        "properties": {
          "refundId": {
            "type": "string",
            "description": "ID of the refund"
          },
          "status": {
            "type": "string",
            "description": "Status of the refund"
          },
          "amount": {
            "type": "number",
            "format": "double",
            "description": "Amount refunded"
          }
        }
      },
      "ManualRunCreateRequest": {
        "type": "object",
        "required": ["processDate"],
        "properties": {
          "processDate": {
            "type": "string",
            "format": "date-time",
            "description": "The date to process payments for"
          }
        }
      },
      "StatusResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Current status of the system",
            "enum": ["healthy", "degraded", "down"]
          },
          "version": {
            "type": "string",
            "description": "Current version of the system"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of the status check"
          }
        }
      },
      "CheckImageGetRequest": {
        "type": "object",
        "required": ["memberId", "checkNumber"],
        "properties": {
          "memberId": {
            "type": "string",
            "description": "ID of the member"
          },
          "checkNumber": {
            "type": "string",
            "description": "Check number"
          }
        }
      },
      "CheckImageResponse": {
        "type": "object",
        "properties": {
          "imageData": {
            "type": "string",
            "format": "byte",
            "description": "Base64 encoded check image data"
          },
          "mimeType": {
            "type": "string",
            "description": "MIME type of the image"
          }
        }
      },
      "VersionResponse": {
        "type": "object",
        "properties": {
          "apiVersion": {
            "type": "string",
            "description": "Version of the API"
          },
          "coreVersion": {
            "type": "string",
            "description": "Version of the core service"
          },
          "databaseVersion": {
            "type": "string",
            "description": "Version of the database"
          }
        }
      },
      "BadRecordListResponse": {
        "type": "object",
        "properties": {
          "badRecords": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BadRecord"
            }
          }
        }
      },
      "BadRecord": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the bad record"
          },
          "recordType": {
            "type": "string",
            "description": "Type of the bad record"
          },
          "recordData": {
            "type": "string",
            "description": "Data of the bad record"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the bad record was created"
          },
          "errorMessage": {
            "type": "string",
            "description": "Error message associated with the bad record"
          }
        }
      },
      "MemberPayment": {
        "type": "object",
        "properties": {
          "paymentId": {
            "type": "string",
            "description": "ID of the payment"
          },
          "memberId": {
            "type": "string",
            "description": "ID of the member"
          },
          "amount": {
            "type": "number",
            "format": "double",
            "description": "Payment amount"
          },
          "status": {
            "type": "string",
            "description": "Status of the payment"
          },
          "processDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the payment will be processed"
          },
          "deliveryDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the payment will be delivered"
          },
          "fundingAccount": {
            "type": "string",
            "description": "Account funding the payment"
          },
          "memo": {
            "type": "string",
            "description": "Payment memo"
          },
          "isRecurring": {
            "type": "boolean",
            "description": "Whether this is a recurring payment"
          }
        }
      },
      "PaymentReprocessRequest": {
        "type": "object",
        "required": ["paymentId"],
        "properties": {
          "paymentId": {
            "type": "string",
            "description": "ID of the payment to reprocess"
          }
        }
      },
      "PaymentUpdateStatusRequest": {
        "type": "object",
        "required": ["paymentId", "statusCode"],
        "properties": {
          "paymentId": {
            "type": "string",
            "description": "ID of the payment"
          },
          "statusCode": {
            "type": "integer",
            "description": "New status code for the payment"
          }
        }
      },
      "PayeeListResponse": {
        "type": "object",
        "properties": {
          "payees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Payee"
            }
          }
        }
      },
      "UserPayeeResponse": {
        "type": "object",
        "properties": {
          "userPayee": {
            "$ref": "#/components/schemas/UserPayee"
          }
        }
      },
      "UserPayeeListResponse": {
        "type": "object",
        "properties": {
          "userPayees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserPayee"
            }
          }
        }
      },
      "UserPayeeWithPaymentsResponse": {
        "type": "object",
        "properties": {
          "userPayees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserPayeeWithPayments"
            }
          }
        }
      },
      "UserPayeeWithPayments": {
        "type": "object",
        "properties": {
          "userPayee": {
            "$ref": "#/components/schemas/UserPayee"
          },
          "payments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Payment"
            }
          }
        }
      },
      "UserPayeeUpdateAccountNumberRequest": {
        "type": "object",
        "required": ["userPayeeListId", "accountNumber"],
        "properties": {
          "userPayeeListId": {
            "type": "string",
            "description": "ID of the user payee list"
          },
          "accountNumber": {
            "type": "string",
            "description": "New account number"
          }
        }
      },
      "UserPayeeUpdateAccountNumberResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Whether the update was successful"
          },
          "errorMessage": {
            "type": "string",
            "description": "Error message if update failed"
          }
        }
      },
      "UserPayeeUpdateFisPayeeIdRequest": {
        "type": "object",
        "required": ["userPayeeListId", "fisPayeeId"],
        "properties": {
          "userPayeeListId": {
            "type": "string",
            "description": "ID of the user payee list"
          },
          "fisPayeeId": {
            "type": "string",
            "description": "New FIS payee ID"
          }
        }
      },
      "UserPayeeUpdateFisPayeeIdResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Whether the update was successful"
          },
          "errorMessage": {
            "type": "string",
            "description": "Error message if update failed"
          }
        }
      },
      "GlobalPayeeEditRequest": {
        "type": "object",
        "required": ["userPayeeId"],
        "properties": {
          "userPayeeId": {
            "type": "string",
            "description": "ID of the user payee to edit"
          },
          "accountName": {
            "type": "string",
            "description": "Account Name"
          },
          "accountNumber": {
            "type": "string",
            "description": "Account Number of the Payee"
          },
          "active": {
            "type": "boolean",
            "description": "Determines whether Payee is Active"
          },
          "favorite": {
            "type": "boolean",
            "description": "Determines whether Payee is a Favorite"
          },
          "nickname": {
            "type": "string",
            "description": "Nickname of the Payee"
          }
        }
      },
      "PersonalPayeeEditRequest": {
        "type": "object",
        "required": ["userPayeeListId", "memberId"],
        "properties": {
          "userPayeeListId": {
            "type": "string",
            "description": "ID of the payee to edit"
          },
          "memberId": {
            "type": "string",
            "description": "User's Id on core"
          },
          "name": {
            "type": "string",
            "description": "Name of the payee"
          },
          "address1": {
            "type": "string",
            "description": "Address line 1"
          },
          "address2": {
            "type": "string",
            "description": "Address line 2"
          },
          "address3": {
            "type": "string",
            "description": "Address line 3"
          },
          "city": {
            "type": "string",
            "description": "City"
          },
          "state": {
            "type": "string",
            "description": "State"
          },
          "postalCode": {
            "type": "string",
            "description": "Postal code"
          },
          "country": {
            "type": "string",
            "description": "Country"
          },
          "phone": {
            "type": "string",
            "description": "Phone number"
          },
          "usersAccountAtPayee": {
            "type": "string",
            "description": "The account id used at the payee"
          },
          "nameOnAccount": {
            "type": "string",
            "description": "The name the user uses at the payee"
          },
          "nickname": {
            "type": "string",
            "description": "The nickname used in the Bill Pay system"
          },
          "active": {
            "type": "boolean",
            "description": "Whether the payee is active"
          },
          "favorite": {
            "type": "boolean",
            "description": "Whether this payee is a favorite"
          }
        }
      },
      "GlobalPayeeResponse": {
        "type": "object",
        "properties": {
          "internalPayeeId": {
            "type": "string",
            "description": "Internal ID of the global payee"
          },
          "fisPayeeId": {
            "type": "string",
            "description": "FIS ID of the global payee"
          },
          "name": {
            "type": "string",
            "description": "Name of the payee"
          },
          "address1": {
            "type": "string",
            "description": "Address line 1"
          },
          "address2": {
            "type": "string",
            "description": "Address line 2"
          },
          "city": {
            "type": "string",
            "description": "City"
          },
          "state": {
            "type": "string",
            "description": "State"
          },
          "postalCode": {
            "type": "string",
            "description": "Postal code"
          },
          "phone": {
            "type": "string",
            "description": "Phone number"
          }
        }
      },
      "PayeeLastPaymentsResponse": {
        "type": "object",
        "properties": {
          "payeeId": {
            "type": "string",
            "description": "ID of the payee"
          },
          "payeeName": {
            "type": "string",
            "description": "Name of the payee"
          },
          "lastPaymentAmount": {
            "type": "number",
            "format": "double",
            "description": "Amount of the last payment"
          },
          "lastPaymentDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date of the last payment"
          }
        }
      }
    }
  }
}
