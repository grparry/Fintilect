USE [master]
GO
/****** Object:  Database [NAO]    Script Date: 1/4/2025 10:20:29 AM ******/
CREATE DATABASE [NAO]
 CONTAINMENT = NONE
 ON  PRIMARY 
( NAME = N'IMS', FILENAME = N'E:\SQLDEVDBs\SQLData\NAO\IMS.mdf' , SIZE = 270464KB , MAXSIZE = UNLIMITED, FILEGROWTH = 262144KB )
 LOG ON 
( NAME = N'IMS_log', FILENAME = N'E:\SQLDEVDBs\SQLLog\NAO\IMS_log.ldf' , SIZE = 263168KB , MAXSIZE = 2048GB , FILEGROWTH = 262144KB )
 WITH CATALOG_COLLATION = DATABASE_DEFAULT
GO
ALTER DATABASE [NAO] SET COMPATIBILITY_LEVEL = 120
GO
IF (1 = FULLTEXTSERVICEPROPERTY('IsFullTextInstalled'))
begin
EXEC [NAO].[dbo].[sp_fulltext_database] @action = 'enable'
end
GO
ALTER DATABASE [NAO] SET ANSI_NULL_DEFAULT OFF 
GO
ALTER DATABASE [NAO] SET ANSI_NULLS OFF 
GO
ALTER DATABASE [NAO] SET ANSI_PADDING OFF 
GO
ALTER DATABASE [NAO] SET ANSI_WARNINGS OFF 
GO
ALTER DATABASE [NAO] SET ARITHABORT OFF 
GO
ALTER DATABASE [NAO] SET AUTO_CLOSE OFF 
GO
ALTER DATABASE [NAO] SET AUTO_SHRINK OFF 
GO
ALTER DATABASE [NAO] SET AUTO_UPDATE_STATISTICS ON 
GO
ALTER DATABASE [NAO] SET CURSOR_CLOSE_ON_COMMIT OFF 
GO
ALTER DATABASE [NAO] SET CURSOR_DEFAULT  GLOBAL 
GO
ALTER DATABASE [NAO] SET CONCAT_NULL_YIELDS_NULL OFF 
GO
ALTER DATABASE [NAO] SET NUMERIC_ROUNDABORT OFF 
GO
ALTER DATABASE [NAO] SET QUOTED_IDENTIFIER OFF 
GO
ALTER DATABASE [NAO] SET RECURSIVE_TRIGGERS OFF 
GO
ALTER DATABASE [NAO] SET  DISABLE_BROKER 
GO
ALTER DATABASE [NAO] SET AUTO_UPDATE_STATISTICS_ASYNC OFF 
GO
ALTER DATABASE [NAO] SET DATE_CORRELATION_OPTIMIZATION OFF 
GO
ALTER DATABASE [NAO] SET TRUSTWORTHY OFF 
GO
ALTER DATABASE [NAO] SET ALLOW_SNAPSHOT_ISOLATION OFF 
GO
ALTER DATABASE [NAO] SET PARAMETERIZATION SIMPLE 
GO
ALTER DATABASE [NAO] SET READ_COMMITTED_SNAPSHOT OFF 
GO
ALTER DATABASE [NAO] SET HONOR_BROKER_PRIORITY OFF 
GO
ALTER DATABASE [NAO] SET RECOVERY FULL 
GO
ALTER DATABASE [NAO] SET  MULTI_USER 
GO
ALTER DATABASE [NAO] SET PAGE_VERIFY CHECKSUM  
GO
ALTER DATABASE [NAO] SET DB_CHAINING OFF 
GO
ALTER DATABASE [NAO] SET FILESTREAM( NON_TRANSACTED_ACCESS = OFF ) 
GO
ALTER DATABASE [NAO] SET TARGET_RECOVERY_TIME = 0 SECONDS 
GO
ALTER DATABASE [NAO] SET DELAYED_DURABILITY = DISABLED 
GO
ALTER DATABASE [NAO] SET ACCELERATED_DATABASE_RECOVERY = OFF  
GO
EXEC sys.sp_db_vardecimal_storage_format N'NAO', N'ON'
GO
ALTER DATABASE [NAO] SET QUERY_STORE = OFF
GO
USE [NAO]
GO
/****** Object:  User [WB\gmallo]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE USER [WB\gmallo] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [WB\Developers]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE USER [WB\Developers] WITH DEFAULT_SCHEMA=[IMS]
GO
/****** Object:  User [WB\BTaggart]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE USER [WB\BTaggart] WITH DEFAULT_SCHEMA=[WB\BTaggart]
GO
/****** Object:  User [WB\bmartin]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE USER [WB\bmartin] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [WB\awarnick]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE USER [WB\awarnick] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [ttams]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE USER [ttams] FOR LOGIN [ttams] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [nao]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE USER [nao] FOR LOGIN [nao] WITH DEFAULT_SCHEMA=[IMS]
GO
/****** Object:  User [LSuarez]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE USER [LSuarez] WITHOUT LOGIN WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [KMartinez]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE USER [KMartinez] WITHOUT LOGIN WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [JFaust]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE USER [JFaust] FOR LOGIN [JFaust] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [HMontoya]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE USER [HMontoya] WITHOUT LOGIN WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [dev]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE USER [dev] WITHOUT LOGIN WITH DEFAULT_SCHEMA=[IMS]
GO
/****** Object:  User [CAlcala]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE USER [CAlcala] WITHOUT LOGIN WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [awarnick]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE USER [awarnick] FOR LOGIN [awarnick] WITH DEFAULT_SCHEMA=[dbo]
GO
ALTER ROLE [db_datareader] ADD MEMBER [WB\gmallo]
GO
ALTER ROLE [db_datawriter] ADD MEMBER [WB\gmallo]
GO
ALTER ROLE [db_owner] ADD MEMBER [WB\Developers]
GO
ALTER ROLE [db_owner] ADD MEMBER [WB\bmartin]
GO
ALTER ROLE [db_owner] ADD MEMBER [WB\awarnick]
GO
ALTER ROLE [db_owner] ADD MEMBER [ttams]
GO
ALTER ROLE [db_datareader] ADD MEMBER [nao]
GO
ALTER ROLE [db_datawriter] ADD MEMBER [nao]
GO
ALTER ROLE [db_owner] ADD MEMBER [LSuarez]
GO
ALTER ROLE [db_owner] ADD MEMBER [KMartinez]
GO
ALTER ROLE [db_owner] ADD MEMBER [HMontoya]
GO
ALTER ROLE [db_owner] ADD MEMBER [dev]
GO
ALTER ROLE [db_owner] ADD MEMBER [CAlcala]
GO
ALTER ROLE [db_datareader] ADD MEMBER [awarnick]
GO
/****** Object:  Schema [IMS]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE SCHEMA [IMS]
GO
/****** Object:  Schema [old]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE SCHEMA [old]
GO
/****** Object:  UserDefinedFunction [IMS].[fnAltra_GetUSAePayPaymentStatus]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE FUNCTION [IMS].[fnAltra_GetUSAePayPaymentStatus] 
(
	-- Add the parameters for the function here
	@PaymentID int
)
RETURNS varchar(25)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result varchar(25)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = PaymentStatus FROM IMS.USAePayPaymentStatus where PaymentId = @PaymentID

	-- Return the result of the function
	RETURN @Result
END

GO
/****** Object:  UserDefinedFunction [IMS].[fnAPGFCU_GetJOType]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [IMS].[fnAPGFCU_GetJOType] (@TrackingNum int, @JOType1 char(2), @JOType2 char(2), @JOType3 char(2), @JOType4 char(2)) 
RETURNS @JO TABLE
   (
	[JointSequence] INT identity,
	[TrackingNum] INT,
	[Sequence] INT,
	[JointOwnerType] CHAR(2),
	[FullName] CHAR(200),
	[Fulladdress] CHAR(200),
	[Address] CHAR(200),
	[City] CHAR(30),
	[State] CHAR(2),
	[Zip] CHAR(10),
	[CityStateZip] CHAR(200),
	[Email] CHAR(120),
	[Phone] CHAR(8),
	[HPhoneFull] CHAR(12),
	[WPhoneFull] CHAR(12),
	[CPhoneFull] CHAR(12),
	[Relationship] CHAR(50),
	[DOB] DATETIME,
	[SSN] CHAR(9),
	[DriversLicenseState] CHAR(2),
	[DriversLicenseNum] CHAR(30),
	[IDIssueDate] DATETIME,
	[IDExpirationDate] DATETIME,
	[EmployerName] CHAR(30),
	[JobTitle] CHAR(45),
	[Suffixes] varchar(100),
	[Gender] CHAR(1)
   )
AS
BEGIN
DECLARE @sTemp VARCHAR(1000)
DECLARE @Sequence INT
DECLARE @JointOwnerType VARCHAR(2)
DECLARE @Suffix BigInt
DECLARE @FullName VARCHAR(200)
DECLARE @FullAddress VARCHAR(200)
DECLARE @Address VARCHAR(200)
DECLARE @City VARCHAR(30)
DECLARE @State VARCHAR(2)
DECLARE @Zip VARCHAR(10)
DECLARE @CityStateZip VARCHAR(200)
DECLARE @Email VARCHAR(120)
DECLARE @Phone VARCHAR(8)
DECLARE @HPhoneFull VARCHAR(12)
DECLARE @WPhoneFull VARCHAR(12)
DECLARE @CPhoneFull VARCHAR(12)
DECLARE @Relationship VARCHAR(50)
DECLARE @DOB DATETIME
DECLARE @SSN VARCHAR(9)
DECLARE @DLS VARCHAR(2)
DECLARE @DLN VARCHAR(30)
DECLARE @IDIssueDate VARCHAR(8)
DECLARE @IDExpirationDate DATETIME
DECLARE @EmployerName VARCHAR(30)
DECLARE @JobTitle VARCHAR(45)
DECLARE @Gender CHAR(1)

	
		DECLARE mycur CURSOR
		FOR SELECT	  JO.TrackingNum
				, JO.Sequence AS [Sequence]
				, JO.JointOwnerType
				, RTRIM(RTRIM(JO.FName) + ' ' + JO.MInitial) + ' ' + RTRIM(JO.LName) AS [FullName]
				, RTRIM(JO.Address1 + CASE JO.Address2 WHEN '' THEN ''ELSE', ' END + JO.Address2 + CASE JO.Address3 WHEN '' THEN ''ELSE', ' END + JO.Address3) + ', ' + JO.City + ', ' + JO.State + ' ' + CASE LEN(JO.Zip) WHEN 9 THEN LEFT(JO.Zip, 5) + '-' + RIGHT(JO.Zip, 4) ELSE JO.Zip END AS [FullAddress]
				, JO.Address1 AS [Address]
				, RTRIM(JO.City) AS [City]
				, JO.State AS [State]
				, CASE LEN(JO.Zip) WHEN 9 THEN LEFT(JO.Zip, 5) + '-' + RIGHT(JO.Zip, 4) ELSE JO.Zip END AS [Zip]
				, RTRIM(JO.City) + ', ' + JO.State + ' ' + CASE LEN(JO.Zip) WHEN 9 THEN LEFT(JO.Zip, 5) + '-' + Right(JO.Zip, 4) ELSE JO.Zip END AS [CityStateZip]
				, RTRIM(JO.Email1) AS Email
				, JO.AreaCode + JO.Phone AS Phone
				, JO.AreaCode + '-' + LEFT(JO.Phone, 3) + '-' + RIGHT(RTRIM(JO.Phone), 4) AS HPhoneFull
				, JO.WorkAC + '-' + LEFT(JO.WorkPhone, 3) + '-' + RIGHT(RTRIM(JO.WorkPhone), 4) AS WPhoneFull
				, JO.CellAC + '-' + LEFT(JO.CellPhone, 3) + '-' + RIGHT(RTRIM(JO.CellPhone), 4) AS CPhoneFull
				, JO.RelToPrimary AS [Relationship]
				, CONVERT(char(10), JO.DOB, 101) AS [DOB]
				, JO.SSN AS [SSN]
				, JO.DriversLicenseState AS [DriversLicenseState]
				, JO.DriversLicenseNum AS [DriversLicenseNum]
				, JO.IDIssueDate AS [IDIssueDate]
				, JO.IDExpirationDate AS [IDExpirationDate]
				, JO.EmployerName AS [EmployerName]
				, JO.JobTitle AS [JobTitle]
				, JO.Gender AS [Gender]
		FROM NewMemberJointOwner AS JO
		WHERE JO.TrackingNum = @TrackingNum AND (JO.JointOwnerType = @JOType1 OR JO.JointOwnerType = @JOType2 OR JO.JointOwnerType = @JOType3 OR JO.JointOwnerType = @JOType4)
		ORDER BY JO.Sequence
		
		OPEN mycur
		FETCH NEXT FROM mycur
		INTO @TrackingNum, @Sequence, @JointOwnerType, @FullName, @FullAddress, @Address, @City, @State, @Zip, @CityStateZip, @EMail, @Phone, @HPhoneFull, @WPhoneFull, @CPhoneFull, @Relationship, @DOB, @SSN, @DLS, @DLN, @IDIssueDate, @IDExpirationDate, @EmployerName, @JobTitle, @Gender
		
		WHILE @@FETCH_STATUS = 0
		BEGIN
			DECLARE mycur2 CURSOR
			FOR
				SELECT Suffix
				FROM NewMemberJointOwner JO
				LEFT OUTER JOIN NewMemberJointLink JL ON JL.TrackingNum = JO.TrackingNum AND JL.JointSequence = JO.Sequence
				LEFT OUTER JOIN NewMemberSubAccount SA ON JL.TrackingNum = SA.TrackingNum AND JL.SubAccountSequence = SA.Sequence
				WHERE JL.TrackingNum = @TrackingNum AND (JL.Created = 'Y' OR JL.Created = 'H') AND JO.Sequence = @Sequence AND (JO.JointOwnerType = @JOType1 OR JO.JointOwnerType = @JOType2 OR JO.JointOwnerType = @JOType3 OR JO.JointOwnerType = @JOType4) ORDER BY Suffix
				
			OPEN mycur2
			FETCH NEXT FROM mycur2
			INTO @Suffix
			
			SET @sTemp = ''
			WHILE @@FETCH_STATUS = 0
			BEGIN
				IF @Suffix IS NOT NULL
				BEGIN
					SET @sTemp = @sTemp + CASE WHEN @sTemp <> '' THEN ', ' ELSE '' END
					SET @sTemp = @sTemp + RIGHT('0' + CAST(@Suffix AS varchar(100)), 2)
				END
		
		
				FETCH NEXT FROM mycur2
				INTO @Suffix
			END
			CLOSE mycur2
			DEALLOCATE mycur2
		
			INSERT @JO ([TrackingNum], [Sequence], [JointOwnerType], [FullName], [FullAddress], [Address], [City], [State], [Zip], [CityStateZip], [Email], [Phone], [HPhoneFull], [WPhoneFull], [CPhoneFull], [Relationship], [DOB], [SSN], [DriversLicenseState], [DriversLicenseNum], [IDIssueDate], [IDExpirationDate], [EmployerName], [JobTitle], [Gender], [Suffixes]) VALUES (@TrackingNum, @Sequence, @JointOwnerType, @FullName, @FullAddress, @Address, @City, @State, @Zip, @CityStateZip, @Email, @Phone, @HPhoneFull, @WPhoneFull, @CPhoneFull, @Relationship, @DOB, @SSN, @DLS, @DLN, @IDIssueDate, @IDExpirationDate, @EmployerName, @JobTitle, @Gender, @sTemp)
		
			FETCH NEXT FROM mycur
			INTO @TrackingNum, @Sequence, @JointOwnerType, @FullName, @FullAddress, @Address, @City, @State, @Zip, @CityStateZip, @Email, @Phone, @HPhoneFull, @WPhoneFull, @CPhoneFull, @Relationship, @DOB, @SSN, @DLS, @DLN, @IDIssueDate, @IDExpirationDate, @EmployerName, @JobTitle, @Gender
		END
		CLOSE mycur
		DEALLOCATE mycur
		
--		SELECT * FROM #Temp ORDER BY [Sequence]
	RETURN
END




GO
/****** Object:  UserDefinedFunction [IMS].[fnAPGFCU_GetUSAePayPaymentStatus]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [IMS].[fnAPGFCU_GetUSAePayPaymentStatus] 
(
	-- Add the parameters for the function here
	@PaymentID varchar(25)
)
RETURNS varchar(25)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result varchar(25)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = PaymentStatus FROM IMS.USAePayPaymentStatus where PaymentId = @PaymentID

	-- Return the result of the function
	RETURN @Result
END
GO
/****** Object:  UserDefinedFunction [IMS].[fnCalTech_GetUSAePayPaymentStatus]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [IMS].[fnCalTech_GetUSAePayPaymentStatus] 
(
	-- Add the parameters for the function here
	@PaymentID int
)
RETURNS varchar(25)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result varchar(25)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = PaymentStatus FROM IMS.USAePayPaymentStatus where PaymentId = @PaymentID

	-- Return the result of the function
	RETURN @Result
END

GO
/****** Object:  UserDefinedFunction [IMS].[fnCCCU_GetBEType]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO


CREATE FUNCTION [IMS].[fnCCCU_GetBEType] (@TrackingNum int, @BEType1 char(2), @BEType2 char(2), @BEType3 char(2)) 
RETURNS @JO TABLE
   (
    [BeneficiarySequence]	int identity,
    [TrackingNum]			int,
    [Sequence]				int,
    [FullName]				char(200),
    [FName]					char(100),
    [MInitial]				char(1),
    [LName]					char(100),
    [Title]					char(50),
    [Fulladdress]			char(200),
    [Address]				char(200),
    [CityStateZip]			char(200),
    [City]					char(100),
    [State]					char(2),
    [Zip]					char(10),
    [FullPhone]				char(12),
    [PhoneAC]				char(3),
    [Phone]					char(8),
    [WPhoneAC]				char(3),
    [WPhone]				char(8),
    [Relationship]			char(50),
    [BenePercent]			char(10),
    [DOB]					smalldatetime,
    [SSN]					char(9),
    [DriversLicenseState]	char(2),
    [DriversLicenseNum]		char(30),
    [IDIssueDate]			smalldatetime,
    [IDExpirationDate] 		smalldatetime,
    [Suffixes]				char(100)
   )
AS
BEGIN
DECLARE @sTemp varchar(1000)
DECLARE @Sequence int
DECLARE @Suffix int
DECLARE @FullName varchar(200)
DECLARE @FName varchar(100)
DECLARE @MInitial varchar(1)
DECLARE @LName varchar(100)
DECLARE @Title varchar(50)
DECLARE @FullAddress varchar(200)
DECLARE @Address varchar(200)
DECLARE @CityStateZip varchar(200)
DECLARE @City varchar(100)
DECLARE @State varchar(2)
DECLARE @Zip varchar(10)
DECLARE @FullPhone varchar(12)
DECLARE @PhoneAC varchar(3)
DECLARE @Phone varchar(8)
DECLARE @WPhoneAC varchar(3)
DECLARE @WPhone varchar(8)
DECLARE @Relationship varchar(50)
DECLARE @BenePercent varchar(10)
DECLARE @DOB smalldatetime
DECLARE @SSN varchar(9)
DECLARE @DLS varchar(2)
DECLARE @DLN varchar(30)
DECLARE @IDIssueDate varchar(8)
DECLARE @IDExpirationDate smalldatetime

	
		DECLARE mycur CURSOR
		FOR SELECT	  BE.TrackingNum
				, BE.Sequence AS [Sequence]
				, RTRIM(RTRIM(BE.FName) + ' ' + RTRIM(BE.LName)) AS [FullName]
				, RTRIM(BE.FName) AS [FName]
				, RTRIM(BE.MInitial) AS [MInitial]
				, RTRIM(BE.LName) AS [LName]
				, RTRIM(BE.Title) as [Title]
				, CASE BE.Address1 WHEN '' THEN '' ELSE RTRIM(BE.Address1 + CASE BE.Address2 WHEN '' THEN '' ELSE ', ' END + BE.Address2 + CASE BE.Address3 WHEN '' THEN '' ELSE ', ' END + BE.Address3) + ', ' + BE.City + ', ' + BE.State + ' ' + CASE LEN(BE.Zip) WHEN 9 THEN LEFT(BE.Zip, 5) + '-' + Right(BE.Zip, 4) ELSE BE.Zip END END AS [FullAddress]
				, BE.Address1 AS [Address]
				, CASE BE.City WHEN '' THEN '' ELSE RTRIM(BE.City) + ', ' + BE.State + ' ' + CASE LEN(BE.Zip) WHEN 9 THEN LEFT(BE.Zip, 5) + '-' + Right(BE.Zip, 4) ELSE BE.Zip END END AS [CityStateZip]
				, RTRIM(BE.City) AS [City]
				, RTRIM(BE.State) AS [State]
				, RTRIM(BE.Zip) AS [Zip]
				, BE.AreaCode + BE.Phone AS [FullPhone]
				, BE.AreaCode AS [PhoneAC]
				, BE.Phone AS [Phone]
				, BE.WorkAC AS [WPhoneAC]
				, BE.WorkPhone AS [WPhone]
				, BE.RelToPrimary AS [Relationship]
				, BE.BenePercent AS [BenePercent]
				, CONVERT(CHAR(10), BE.DOB, 101) AS [DOB]
				, BE.SSN AS [SSN]
				, BE.DriversLicenseState AS [DriversLicenseState]
				, BE.DriversLicenseNum AS [DriversLicenseNum]
				, BE.IDIssueDate AS [IDIssueDate]
				, BE.IDExpirationDate AS [IDExpirationDate]
		FROM NewMemberBeneficiary AS BE
		WHERE BE.TrackingNum = @TrackingNum AND (BE.JointOwnerType = @BEType1 OR BE.JointOwnerType = @BEType2 OR BE.JointOwnerType = @BEType3)
		ORDER BY BE.Sequence
		
		OPEN mycur
		FETCH NEXT FROM mycur
		INTO @TrackingNum, @Sequence, @FullName, @FName, @MInitial, @LName, @Title, @FullAddress, @Address, @CityStateZip, @City, @State, @Zip, @FullPhone, @PhoneAC, @Phone, @WPhoneAC, @WPhone, @Relationship, @BenePercent, @DOB, @SSN, @DLS, @DLN, @IDIssueDate, @IDExpirationDate
		
		WHILE @@FETCH_STATUS = 0
		BEGIN
			DECLARE mycur2 CURSOR
			FOR
				SELECT Suffix
				FROM NewMemberBeneficiary BE
				LEFT OUTER JOIN NewMemberBeneficiaryLink BL ON BL.TrackingNum = BE.TrackingNum AND BL.BeneficiarySequence = BE.Sequence
				LEFT OUTER JOIN NewMemberSubAccount SA ON BL.TrackingNum = SA.TrackingNum AND BL.SubAccountSequence = SA.Sequence
				WHERE BL.TrackingNum = @TrackingNum AND BE.Sequence = @Sequence AND (BE.BType = @BEType1 OR BE.JointOwnerType = @BEType2 OR BE.JointOwnerType = @BEType3) ORDER BY Suffix
				
			OPEN mycur2
			FETCH NEXT FROM mycur2
			INTO @Suffix
			
			SET @sTemp = ''
			WHILE @@FETCH_STATUS = 0
			BEGIN
				IF @Suffix IS NOT NULL
				BEGIN
					SET @sTemp = @sTemp + CASE WHEN @sTemp <> '' THEN ', ' ELSE '' END
					SET @sTemp = @sTemp + RIGHT('0' + CAST(@Suffix AS varchar(2)), 2)
				END
		
		
				FETCH NEXT FROM mycur2
				INTO @Suffix
			END
			CLOSE mycur2
			DEALLOCATE mycur2
		
			INSERT @JO ([TrackingNum], [Sequence], [FullName], [FName], [MInitial], [LName], [Title], [FullAddress], [Address], [CityStateZip], [City], [State], [Zip], [FullPhone], [PhoneAC], [Phone], [WPhoneAC], [WPhone], [Relationship], [BenePercent], [DOB], [SSN], [DriversLicenseState], [DriversLicenseNum], [IDIssueDate], [IDExpirationDate], [Suffixes]) VALUES ( @TrackingNum, @Sequence, @FullName, @FName, @MInitial, @LName, @Title, @FullAddress, @Address, @CityStateZip, @City, @State, @Zip, @FullPhone, @PhoneAC, @Phone, @WPhoneAC, @WPhone, @Relationship, @BenePercent, @DOB, @SSN, @DLS, @DLN, @IDIssueDate, @IDExpirationDate, @sTemp)
		
			FETCH NEXT FROM mycur
			INTO @TrackingNum, @Sequence, @FullName, @FName, @MInitial, @LName, @Title, @FullAddress, @Address, @CityStateZip, @City, @State, @Zip, @FullPhone, @PhoneAC, @Phone, @WPhoneAC, @WPhone, @Relationship, @BenePercent, @DOB, @SSN, @DLS, @DLN, @IDIssueDate, @IDExpirationDate
		END
		CLOSE mycur
		DEALLOCATE mycur
		
--		SELECT * FROM #Temp ORDER BY [Sequence]

	RETURN
END




GO
/****** Object:  UserDefinedFunction [IMS].[fnCCCU_GetCartItems]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [IMS].[fnCCCU_GetCartItems] (@TrackingNum int, @SLType1 char(1), @SLType2 char(1), @SLType3 char(1), @SLType4 char(1), @SLType5 char(1), @SLType6 char(1), @Status char(1), @YesNoMaybe char(10)) 
RETURNS @CART TABLE
(
	CartSequence INT identity,
	TrackingNum INT,
	ProductName CHAR(200)
)
AS
BEGIN
INSERT @CART (TrackingNum, ProductName)
SELECT CART.TrackingNum
	, CART.ProductName
FROM NewMemberShoppingCart As CART
WHERE CART.TrackingNum = @TrackingNum
	AND (CART.SLType = (@SLType1) OR CART.SLType = (@SLType2) OR CART.SLType = (@SLType3) OR CART.SLType = (@SLType4) OR CART.SLType = (@SLType5) OR CART.SLType = (@SLType6))
	AND CART.Status = @Status
	AND CART.YesNoMaybe = @YesNoMaybe
	AND CART.Created != 'H'
ORDER BY CART.ProductID

RETURN

END
GO
/****** Object:  UserDefinedFunction [IMS].[fnCCCU_GetJOJL2]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO



CREATE FUNCTION [IMS].[fnCCCU_GetJOJL2] (@TrackingNum int, @joseq int, @saseq int)  
RETURNS @JOJL TABLE
(
	JointSequence INT identity,
	TrackingNum INT,
	FullName CHAR(40),
	JOCHTag CHAR(40),
	FullAddress CHAR(100),
	Address CHAR(40),
	Address12 CHAR(100),
	CityStateZip CHAR(40),
	FullPhone CHAR(12),
	DOB CHAR(10),
	SSN CHAR(12),
	[ID] CHAR(40),
	IDIssueDate CHAR(10),
	IDExpDate CHAR(10),
	IDState CHAR(2),
	Title CHAR(40),
	JointOwnerType CHAR(10),
	[Sequence] INT
)
AS
BEGIN
INSERT @JOJL (TrackingNum, FullName, JOCHTag, FullAddress, Address, Address12, CityStateZip, FullPhone, DOB, SSN, [ID], IDIssueDate, IDExpDate, IDState, Title, JointOwnerType, [Sequence])
SELECT DISTINCT TOP 1
	JO.TrackingNum
	, RTRIM(JO.fname) + ' ' + RTRIM(JO.lname) AS FullName
	, RTRIM(JO.JOCHTag) AS JOCHTag
	, RTRIM(RTRIM(JO.Address1) + CASE JO.Address2 WHEN '' THEN ''ELSE', ' END + RTRIM(JO.Address2) + CASE JO.Address3 WHEN '' THEN '' ELSE', ' END + RTRIM(JO.Address3)) + ', ' + RTRIM(JO.City) + ', ' + JO.State + ' ' + CASE LEN(JO.Zip) WHEN 9 THEN LEFT(JO.Zip, 5) + '-' + Right(JO.Zip, 4) ELSE JO.Zip END AS FullAddress
	, JO.Address1 AS Address
	, RTRIM(RTRIM(JO.Address1) + CASE JO.Address2 WHEN '' THEN ''ELSE', ' END + RTRIM(JO.Address2) + CASE JO.Address3 WHEN '' THEN '' ELSE', ' END + RTRIM(JO.Address3)) AS Address12
	, RTRIM(JO.City) + ', ' + JO.State + ' ' + CASE LEN(JO.Zip) WHEN 9 THEN LEFT(JO.Zip, 5) + '-' + Right(JO.Zip, 4) ELSE JO.Zip END AS CityStateZip
	, JO.AreaCode + '-' + LEFT(JO.Phone, 3) + '-' + RIGHT(RTRIM(JO.Phone), 4) AS FullPhone
	, CONVERT(char(10), JO.DOB, 101) AS DOB
	, CASE JOT.Individual WHEN 'Y' THEN Left(JO.SSN, 3) + '-' + LEFT(RIGHT(JO.SSN, 6), 2) + '-' + RIGHT(JO.SSN, 4) ELSE LEFT(JO.SSN, 2) + '-' + RIGHT(JO.SSN, 7) END AS SSN
	, CASE JO.IDType WHEN 'D' THEN JO.DriversLicenseNum ELSE JO.IDSource + ': ' + JO.IDNumber END AS ID
	, CONVERT(char(10), JO.IDIssueDate, 101) AS IDIssueDate
	, CONVERT(char(10), JO.IDExpirationDate, 101) AS IDExpDate
	, JO.DriversLicenseState AS IDState
	, JO.Title As Title
	, JO.JointOwnerType
	, JO.[Sequence]
FROM NewMemberJointOwner As JO
	INNER JOIN udt_JointOwnerTypes AS JOT On JO.JointOwnerType = JOT.JOType
	INNER JOIN NewMemberJointLink AS JOL On JOL.TrackingNum = JO.TrackingNum AND JOL.JointSequence = JO.Sequence AND JOL.SubAccountSequence = @saseq
WHERE JO.TrackingNum = @TrackingNum AND JO.Sequence > @joseq
ORDER BY JO.Sequence

RETURN

END




GO
/****** Object:  UserDefinedFunction [IMS].[fnCCCU_GetJOType]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO


CREATE FUNCTION [IMS].[fnCCCU_GetJOType] (@TrackingNum int, @JOType1 char(2), @JOType2 char(2), @JOType3 char(2)) 
RETURNS @JO TABLE
   (
    [JointSequence]	int identity,
    [TrackingNum]	int,
    [Sequence]		int,
    [FullName]		char(200),
    [FName]			char(100),
    [MInitial]		char(1),
    [LName]			char(100),
    [Title]			char(50),
    [Fulladdress]	char(200),
    [Address]		char(200),
    [CityStateZip]	char(200),
    [City]			char(100),
    [State]			char(2),
    [Zip]			char(10),
    [FullPhone]		char(12),
    [PhoneAC]		char(3),
    [Phone]			char(8),
    [WPhoneAC]		char(3),
    [WPhone]		char(8),
    [Relationship]	char(50),
    [BenePercent]	char(10),
    [DOB]			smalldatetime,
    [SSN]			char(9),
    [DriversLicenseState]	char(2),
    [DriversLicenseNum]		char(30),
    [IDIssueDate]			smalldatetime,
    [IDExpirationDate] 		smalldatetime,
    [Suffixes]				char(100)
   )
AS
BEGIN
DECLARE @sTemp varchar(1000)
DECLARE @Sequence int
DECLARE @Suffix int
DECLARE @FullName varchar(200)
DECLARE @FName varchar(100)
DECLARE @MInitial varchar(1)
DECLARE @LName varchar(100)
DECLARE @Title varchar(50)
DECLARE @FullAddress varchar(200)
DECLARE @Address varchar(200)
DECLARE @CityStateZip varchar(200)
DECLARE @City varchar(100)
DECLARE @State varchar(2)
DECLARE @Zip varchar(10)
DECLARE @FullPhone varchar(12)
DECLARE @PhoneAC varchar(3)
DECLARE @Phone varchar(8)
DECLARE @WPhoneAC varchar(3)
DECLARE @WPhone varchar(8)
DECLARE @Relationship varchar(50)
DECLARE @BenePercent varchar(10)
DECLARE @DOB smalldatetime
DECLARE @SSN varchar(9)
DECLARE @DLS varchar(2)
DECLARE @DLN varchar(30)
DECLARE @IDIssueDate varchar(8)
DECLARE @IDExpirationDate smalldatetime

	
		DECLARE mycur CURSOR
		FOR SELECT	  JO.TrackingNum
				, JO.Sequence AS [Sequence]
				, RTRIM(RTRIM(JO.FName) + ' ' + RTRIM(JO.LName) + ' ' + JO.JOCHTag) AS [FullName]
				, RTRIM(JO.FName) AS [FName]
				, RTRIM(JO.MInitial) AS [MInitial]
				, RTRIM(JO.LName) AS [LName]
				, RTRIM(JO.Title) as [Title]
				, RTRIM(JO.Address1 + CASE JO.Address2 WHEN '' THEN ''ELSE', ' END + JO.Address2 + CASE JO.Address3 WHEN '' THEN ''ELSE', ' END + JO.Address3) + ', ' + JO.City + ', ' + JO.State + ' ' + CASE LEN(JO.Zip) WHEN 9 THEN LEFT(JO.Zip, 5) + '-' + Right(JO.Zip, 4) ELSE JO.Zip END AS [FullAddress]
				, JO.Address1 AS [Address]
				, RTRIM(JO.City) + ', ' + JO.State + ' ' + CASE LEN(JO.Zip) WHEN 9 THEN LEFT(JO.Zip, 5) + '-' + Right(JO.Zip, 4) ELSE JO.Zip END AS [CityStateZip]
				, RTRIM(JO.City) AS [City]
				, RTRIM(JO.State) AS [State]
				, RTRIM(JO.Zip) AS [Zip]
				, JO.AreaCode + JO.Phone AS [FullPhone]
				, JO.AreaCode AS [PhoneAC]
				, JO.Phone AS [Phone]
				, JO.WorkAC AS [WPhoneAC]
				, JO.WorkPhone AS [WPhone]
				, JO.RelToPrimary AS [Relationship]
				, JO.BenePercent AS [BenePercent]
				, CONVERT(char(10), JO.DOB, 101) AS [DOB]
				, JO.SSN AS [SSN]
				, JO.DriversLicenseState AS [DriversLicenseState]
				, JO.DriversLicenseNum AS [DriversLicenseNum]
				, JO.IDIssueDate AS [IDIssueDate]
				, JO.IDExpirationDate AS [IDExpirationDate]
		FROM NewMemberJointOwner AS JO
		WHERE JO.TrackingNum = @TrackingNum AND (JO.JointOwnerType = @JOType1 OR JO.JointOwnerType = @JOType2 OR JO.JointOwnerType = @JOType3)
		ORDER BY JO.Sequence
		
		OPEN mycur
		FETCH NEXT FROM mycur
		INTO @TrackingNum, @Sequence, @FullName, @FName, @MInitial, @LName, @Title, @FullAddress, @Address, @CityStateZip, @City, @State, @Zip, @FullPhone, @PhoneAC, @Phone, @WPhoneAC, @WPhone, @Relationship, @BenePercent, @DOB, @SSN, @DLS, @DLN, @IDIssueDate, @IDExpirationDate
		
		WHILE @@FETCH_STATUS = 0
		BEGIN
			DECLARE mycur2 CURSOR
			FOR
				SELECT Suffix
				FROM NewMemberJointOwner JO
				LEFT OUTER JOIN NewMemberJointLink JL ON JL.TrackingNum = JO.TrackingNum AND JL.JointSequence = JO.Sequence
				LEFT OUTER JOIN NewMemberSubAccount SA ON JL.TrackingNum = SA.TrackingNum AND JL.SubAccountSequence = SA.Sequence
				WHERE JL.TrackingNum = @TrackingNum AND JO.Sequence = @Sequence AND (JO.JointOwnerType = @JOType1 OR JO.JointOwnerType = @JOType2 OR JO.JointOwnerType = @JOType3) ORDER BY Suffix
				
			OPEN mycur2
			FETCH NEXT FROM mycur2
			INTO @Suffix
			
			SET @sTemp = ''
			WHILE @@FETCH_STATUS = 0
			BEGIN
				IF @Suffix IS NOT NULL
				BEGIN
					SET @sTemp = @sTemp + CASE WHEN @sTemp <> '' THEN ', ' ELSE '' END
					SET @sTemp = @sTemp + RIGHT('0' + CAST(@Suffix AS varchar(2)), 2)
				END
		
		
				FETCH NEXT FROM mycur2
				INTO @Suffix
			END
			CLOSE mycur2
			DEALLOCATE mycur2
		
			INSERT @JO ([TrackingNum], [Sequence], [FullName], [FName], [MInitial], [LName], [Title], [FullAddress], [Address], [CityStateZip], [City], [State], [Zip], [FullPhone], [PhoneAC], [Phone], [WPhoneAC], [WPhone], [Relationship], [BenePercent], [DOB], [SSN], [DriversLicenseState], [DriversLicenseNum], [IDIssueDate], [IDExpirationDate], [Suffixes]) VALUES ( @TrackingNum, @Sequence, @FullName, @FName, @MInitial, @LName, @Title, @FullAddress, @Address, @CityStateZip, @City, @State, @Zip, @FullPhone, @PhoneAC, @Phone, @WPhoneAC, @WPhone, @Relationship, @BenePercent, @DOB, @SSN, @DLS, @DLN, @IDIssueDate, @IDExpirationDate, @sTemp)
		
			FETCH NEXT FROM mycur
			INTO @TrackingNum, @Sequence, @FullName, @FName, @MInitial, @LName, @Title, @FullAddress, @Address, @CityStateZip, @City, @State, @Zip, @FullPhone, @PhoneAC, @Phone, @WPhoneAC, @WPhone, @Relationship, @BenePercent, @DOB, @SSN, @DLS, @DLN, @IDIssueDate, @IDExpirationDate
		END
		CLOSE mycur
		DEALLOCATE mycur
		
--		SELECT * FROM #Temp ORDER BY [Sequence]

	RETURN
END




GO
/****** Object:  UserDefinedFunction [IMS].[fnCCCU_GetUSAePayPaymentStatus]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE FUNCTION [IMS].[fnCCCU_GetUSAePayPaymentStatus] 
(
	-- Add the parameters for the function here
	@PaymentID int
)
RETURNS varchar(25)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result varchar(25)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = PaymentStatus FROM IMS.USAePayPaymentStatus where PaymentId = @PaymentID

	-- Return the result of the function
	RETURN @Result
END

GO
/****** Object:  UserDefinedFunction [IMS].[fnCCCU_NumberToWords]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [IMS].[fnCCCU_NumberToWords] (@n varchar(20))
RETURNS VARCHAR(255)
AS
BEGIN
	DECLARE @i int, @temp char(1),  @s VARCHAR(20), @result VARCHAR(255)
	SET @s=convert(varchar(20), @n)
	SET @i=LEN(@s)
	SET @result=''
	
	WHILE (@i>0)
	BEGIN
		SET @temp=(SUBSTRING(@s,@i,1))
		IF ((LEN(@s)-@i) % 3)=1
		IF @temp='1'
		SET @result=CASE (SUBSTRING(@s,@i+1,1))
			WHEN '0' THEN 'Ten'
			WHEN '1' THEN 'Eleven'
			WHEN '2' THEN 'Twelve'
			WHEN '3' THEN 'Thirteen'
			WHEN '4' THEN 'Fourteen'
			WHEN '5' THEN 'Fifteen'
			WHEN '6' THEN 'Sixteen'
			WHEN '7' THEN 'Seventeen'
			WHEN '8' THEN 'Eighteen'
			WHEN '9' THEN 'Nineteen'
			END+' '+CASE
					WHEN ((LEN(@s)-@i)=4) THEN 'Thousand '
					WHEN ((LEN(@s)-@i)=7) THEN 'Million '
					WHEN ((LEN(@s)-@i)=10) THEN 'Billion '
					WHEN ((LEN(@s)-@i)=13) THEN 'Trillion '
					WHEN ((LEN(@s)-@i)=16) THEN 'Quadrillion '
					ELSE ''
					END+@result
		ELSE
		BEGIN
			SET @result=CASE (SUBSTRING(@s,@i+1,1))
				WHEN '0' THEN ''
				WHEN '1' THEN 'One'
				WHEN '2' THEN 'Two'
				WHEN '3' THEN 'Three'
				WHEN '4' THEN 'Four'
				WHEN '5' THEN 'Five'
				WHEN '6' THEN 'Six'
				WHEN '7' THEN 'Seven'
				WHEN '8' THEN 'Eight'
				WHEN '9' THEN 'Nine'
				END+' '+ CASE
					WHEN ((LEN(@s)-@i)=4) THEN 'Thousand '
					WHEN ((LEN(@s)-@i)=7) THEN 'Million '
					WHEN ((LEN(@s)-@i)=10) THEN 'Billion '
					WHEN ((LEN(@s)-@i)=13) THEN 'Trillion '
					WHEN ((LEN(@s)-@i)=16) THEN 'Quadrillion '
					ELSE ''
					END+@result
			SET @result=CASE @temp
				WHEN '0' THEN ''
				WHEN '1' THEN 'Ten'
				WHEN '2' THEN 'Twenty'
				WHEN '3' THEN 'Thirty'
				WHEN '4' THEN 'Forty'
				WHEN '5' THEN 'Fifty'
				WHEN '6' THEN 'Sixty'
				WHEN '7' THEN 'Seventy'
				WHEN '8' THEN 'Eighty'
				WHEN '9' THEN 'Ninety'
				END+' '+@result
		END
		IF (((LEN(@s)-@i) % 3)=2) OR (((LEN(@s)-@i) % 3)=0) AND (@i=1)
		BEGIN
		SET @result=CASE @temp
			WHEN '0' THEN ''
			WHEN '1' THEN 'One'
			WHEN '2' THEN 'Two'
			WHEN '3' THEN 'Three'
			WHEN '4' THEN 'Four'
			WHEN '5' THEN 'Five'
			WHEN '6' THEN 'Six'
			WHEN '7' THEN 'Seven'
			WHEN '8' THEN 'Eight'
			WHEN '9' THEN 'Nine'
			END +' '+CASE
				WHEN (@s='0') THEN 'Zero'
				WHEN (@temp<>'0')AND( ((LEN(@s)-@i) % 3)=2) THEN 'Hundred '
				ELSE ''
				END + CASE
				WHEN ((LEN(@s)-@i)=3) THEN 'Thousand '
				WHEN ((LEN(@s)-@i)=6) THEN 'Million '
				WHEN ((LEN(@s)-@i)=9) THEN 'Billion '
				WHEN ((LEN(@s)-@i)=12) THEN 'Trillion '
				WHEN ((LEN(@s)-@i)=15) THEN 'Quadrillion '
				ELSE ''
					END+ @result
		END
		SET @i=@i-1
	END
	SET @result = REPLACE(REPLACE(REPLACE(@result,'  ',' '),'  ',' '),'  ',' ')
	RETURN @result
END
GO
/****** Object:  UserDefinedFunction [IMS].[fnCCCU_TitleCase]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [IMS].[fnCCCU_TitleCase] (@x VARCHAR(200))
RETURNS VARCHAR(200) AS  
BEGIN
 	IF @x <> ''
	BEGIN
	 	DECLARE @y INT
		SET @y = 1
	
		SELECT @x = UPPER(SUBSTRING(@x,1,1))+LOWER(SUBSTRING(@x,2,LEN(@x)-1))+' '
	
		WHILE @y < LEN(@x)
		BEGIN
			SELECT @y=CHARINDEX(' ',@x,@y)
			SELECT @x=SUBSTRING(@x,1,@y)+UPPER(SUBSTRING(@x,@y+1,1))+SUBSTRING(@x,@y+2,LEN(@x)-@y+1)   
			SELECT @y=@y+1
		END
	END
	RETURN @x
END
GO
/****** Object:  UserDefinedFunction [IMS].[fnCCCU_WordWrap]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE FUNCTION [IMS].[fnCCCU_WordWrap] (@Text as varchar(8000), @LineLength as int)  
RETURNS varchar(8000) AS  
BEGIN 
	Declare
		@vStr1		Varchar(8000),
		@vStr2		Varchar(8000),
		@vStr3		Varchar(8000),
		@vLengthLimit	Int
	
	Set @vStr1 = @Text
	Set @vLengthLimit = @LineLength
	Set @vStr2 = ''
	Set @vStr3 = ''
	
	While DataLength(@vStr1) > 0
		Begin
			If (Len(@vStr1) + Len(@vStr2)) <= @vLengthLimit
				Begin
					Set @vStr3 = @vStr3 + @vStr2 + @vStr1
					Break;
				End
	
			Set @vStr2 = @vStr2 + SubString(@vStr1, 1, 1)
			Set @vStr1 = SubString(@vStr1, 2, 8000)
			If ASCII(REVERSE(@vStr2)) = 10 Or ASCII(REVERSE(@vStr2)) = 13
				Begin
					Set @vStr3 = @vStr3 + RTRIM(LTRIM(@vStr2))
					Set @vStr2 = ''
				End
			If Len(@vStr2) >= @vLengthLimit AND ASCII(REVERSE(@vStr2)) = 32
				Begin
					Set @vStr3 = @vStr3 + RTRIM(LTRIM(@vStr2)) + CHAR(13) + CHAR(10)
					Set @vStr2 = ''
				End
		End
	
	--Print '|' + @vStr3 + '|'
	Return @vStr3
END
GO
/****** Object:  UserDefinedFunction [IMS].[fnCFCU_GetUSAePayPaymentStatus]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE FUNCTION [IMS].[fnCFCU_GetUSAePayPaymentStatus] 
(
	-- Add the parameters for the function here
	@PaymentID int
)
RETURNS varchar(25)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result varchar(25)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = PaymentStatus FROM IMS.USAePayPaymentStatus where PaymentId = @PaymentID

	-- Return the result of the function
	RETURN @Result
END

GO
/****** Object:  UserDefinedFunction [IMS].[fnCFCU_WordWrap]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE FUNCTION [IMS].[fnCFCU_WordWrap] (@Text as varchar(8000), @LineLength as int)  
RETURNS varchar(8000) AS  
BEGIN 
	Declare
		@vStr1		Varchar(8000),
		@vStr2		Varchar(8000),
		@vStr3		Varchar(8000),
		@vLengthLimit	Int
	
	Set @vStr1 = @Text
	Set @vLengthLimit = @LineLength
	Set @vStr2 = ''
	Set @vStr3 = ''
	
	While DataLength(@vStr1) > 0
		Begin
			If (Len(@vStr1) + Len(@vStr2)) <= @vLengthLimit
				Begin
					Set @vStr3 = @vStr3 + @vStr2 + @vStr1
					Break;
				End
	
			Set @vStr2 = @vStr2 + SubString(@vStr1, 1, 1)
			Set @vStr1 = SubString(@vStr1, 2, 8000)
			If ASCII(REVERSE(@vStr2)) = 10 Or ASCII(REVERSE(@vStr2)) = 13
				Begin
					Set @vStr3 = @vStr3 + RTRIM(LTRIM(@vStr2))
					Set @vStr2 = ''
				End
			If Len(@vStr2) >= @vLengthLimit AND ASCII(REVERSE(@vStr2)) = 32
				Begin
					Set @vStr3 = @vStr3 + RTRIM(LTRIM(@vStr2)) + CHAR(13) + CHAR(10)
					Set @vStr2 = ''
				End
		End
	
	--Print '|' + @vStr3 + '|'
	Return @vStr3
END
GO
/****** Object:  UserDefinedFunction [IMS].[fnFCCU_GetCertRate]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [IMS].[fnFCCU_GetCertRate] (@tn INT, @sq INT)
RETURNS VARCHAR(6) AS  
BEGIN
	DECLARE @SATemp VARCHAR(20)
	DECLARE @SARate VARCHAR(20)
	BEGIN
		SELECT @SATemp = DescAbrv+'-'+ACC FROM NewMemberSubAccount SA WHERE SA.TrackingNum = @tn and SA.Sequence = @sq
		SELECT @SARate = APR FROM NewMemberSubAccount SA WHERE SA.TrackingNum = @tn and SA.Sequence = @sq
	END
	--PRINT @SATemp
	--PRINT @SARate

	DECLARE @output VARCHAR(6)
	SET @output = '000000'

	IF ISNULL(@SARate, '') <> ''
		BEGIN
			SET @output = @SARate
		END
	ELSE
		BEGIN
	
			IF @SATemp = '6MO-60' BEGIN SET @output = '003600' END
			IF @SATemp = '1YC-61' BEGIN SET @output = '006600' END
			IF @SATemp = '2YC-62' BEGIN SET @output = '010500' END
			IF @SATemp = '3YC-63' BEGIN SET @output = '013000' END
			IF @SATemp = '4YC-64' BEGIN SET @output = '016000' END
			IF @SATemp = '5YC-45' BEGIN SET @output = '018000' END

		END

	--PRINT @output
	
	RETURN @output
END
GO
/****** Object:  UserDefinedFunction [IMS].[fnFCCU_GetUSAePayPaymentStatus]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE FUNCTION [IMS].[fnFCCU_GetUSAePayPaymentStatus] 
(
	-- Add the parameters for the function here
	@PaymentID int
)
RETURNS varchar(25)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result varchar(25)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = PaymentStatus FROM IMS.USAePayPaymentStatus where PaymentId = @PaymentID

	-- Return the result of the function
	RETURN @Result
END

GO
/****** Object:  UserDefinedFunction [IMS].[fnGerber_GetJOType]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [IMS].[fnGerber_GetJOType] (@TrackingNum int, @JOType1 char(2), @JOType2 char(2), @JOType3 char(2), @JOType4 char(2)) 
RETURNS @JO TABLE
   (
	[JointSequence] INT identity,
	[TrackingNum] INT,
	[Sequence] INT,
	[JointOwnerType] CHAR(2),
	[FullName] CHAR(200),
	[Fulladdress] CHAR(200),
	[Address] CHAR(200),
	[City] CHAR(30),
	[State] CHAR(2),
	[Zip] CHAR(10),
	[CityStateZip] CHAR(200),
	[Email] CHAR(120),
	[Phone] CHAR(8),
	[HPhoneFull] CHAR(12),
	[WPhoneFull] CHAR(12),
	[CPhoneFull] CHAR(12),
	[Relationship] CHAR(50),
	[DOB] DATETIME,
	[SSN] CHAR(9),
	[DriversLicenseState] CHAR(2),
	[DriversLicenseNum] CHAR(30),
	[IDIssueDate] DATETIME,
	[IDExpirationDate] DATETIME,
	[EmployerName] CHAR(30),
	[JobTitle] CHAR(45),
	[Suffixes] varchar(100),
	[Gender] CHAR(1)
   )
AS
BEGIN
DECLARE @sTemp VARCHAR(1000)
DECLARE @Sequence INT
DECLARE @JointOwnerType VARCHAR(2)
DECLARE @Suffix BigInt
DECLARE @FullName VARCHAR(200)
DECLARE @FullAddress VARCHAR(200)
DECLARE @Address VARCHAR(200)
DECLARE @City VARCHAR(30)
DECLARE @State VARCHAR(2)
DECLARE @Zip VARCHAR(10)
DECLARE @CityStateZip VARCHAR(200)
DECLARE @Email VARCHAR(120)
DECLARE @Phone VARCHAR(8)
DECLARE @HPhoneFull VARCHAR(12)
DECLARE @WPhoneFull VARCHAR(12)
DECLARE @CPhoneFull VARCHAR(12)
DECLARE @Relationship VARCHAR(50)
DECLARE @DOB DATETIME
DECLARE @SSN VARCHAR(9)
DECLARE @DLS VARCHAR(2)
DECLARE @DLN VARCHAR(30)
DECLARE @IDIssueDate VARCHAR(8)
DECLARE @IDExpirationDate DATETIME
DECLARE @EmployerName VARCHAR(30)
DECLARE @JobTitle VARCHAR(45)
DECLARE @Gender CHAR(1)

	
		DECLARE mycur CURSOR
		FOR SELECT	  JO.TrackingNum
				, JO.Sequence AS [Sequence]
				, JO.JointOwnerType
				, RTRIM(RTRIM(JO.FName) + ' ' + JO.MInitial) + ' ' + RTRIM(JO.LName) AS [FullName]
				, RTRIM(JO.Address1 + CASE JO.Address2 WHEN '' THEN ''ELSE', ' END + JO.Address2 + CASE JO.Address3 WHEN '' THEN ''ELSE', ' END + JO.Address3) + ', ' + JO.City + ', ' + JO.State + ' ' + CASE LEN(JO.Zip) WHEN 9 THEN LEFT(JO.Zip, 5) + '-' + RIGHT(JO.Zip, 4) ELSE JO.Zip END AS [FullAddress]
				, JO.Address1 AS [Address]
				, RTRIM(JO.City) AS [City]
				, JO.State AS [State]
				, CASE LEN(JO.Zip) WHEN 9 THEN LEFT(JO.Zip, 5) + '-' + RIGHT(JO.Zip, 4) ELSE JO.Zip END AS [Zip]
				, RTRIM(JO.City) + ', ' + JO.State + ' ' + CASE LEN(JO.Zip) WHEN 9 THEN LEFT(JO.Zip, 5) + '-' + Right(JO.Zip, 4) ELSE JO.Zip END AS [CityStateZip]
				, RTRIM(JO.Email1) AS Email
				, JO.AreaCode + JO.Phone AS Phone
				, JO.AreaCode + '-' + LEFT(JO.Phone, 3) + '-' + RIGHT(RTRIM(JO.Phone), 4) AS HPhoneFull
				, JO.WorkAC + '-' + LEFT(JO.WorkPhone, 3) + '-' + RIGHT(RTRIM(JO.WorkPhone), 4) AS WPhoneFull
				, JO.CellAC + '-' + LEFT(JO.CellPhone, 3) + '-' + RIGHT(RTRIM(JO.CellPhone), 4) AS CPhoneFull
				, JO.RelToPrimary AS [Relationship]
				, CONVERT(char(10), JO.DOB, 101) AS [DOB]
				, JO.SSN AS [SSN]
				, JO.DriversLicenseState AS [DriversLicenseState]
				, JO.DriversLicenseNum AS [DriversLicenseNum]
				, JO.IDIssueDate AS [IDIssueDate]
				, JO.IDExpirationDate AS [IDExpirationDate]
				, JO.EmployerName AS [EmployerName]
				, JO.JobTitle AS [JobTitle]
				, JO.Gender AS [Gender]
		FROM NewMemberJointOwner AS JO
		WHERE JO.TrackingNum = @TrackingNum AND (JO.JointOwnerType = @JOType1 OR JO.JointOwnerType = @JOType2 OR JO.JointOwnerType = @JOType3 OR JO.JointOwnerType = @JOType4)
		ORDER BY JO.Sequence
		
		OPEN mycur
		FETCH NEXT FROM mycur
		INTO @TrackingNum, @Sequence, @JointOwnerType, @FullName, @FullAddress, @Address, @City, @State, @Zip, @CityStateZip, @EMail, @Phone, @HPhoneFull, @WPhoneFull, @CPhoneFull, @Relationship, @DOB, @SSN, @DLS, @DLN, @IDIssueDate, @IDExpirationDate, @EmployerName, @JobTitle, @Gender
		
		WHILE @@FETCH_STATUS = 0
		BEGIN
			DECLARE mycur2 CURSOR
			FOR
				SELECT Suffix
				FROM NewMemberJointOwner JO
				LEFT OUTER JOIN NewMemberJointLink JL ON JL.TrackingNum = JO.TrackingNum AND JL.JointSequence = JO.Sequence
				LEFT OUTER JOIN NewMemberSubAccount SA ON JL.TrackingNum = SA.TrackingNum AND JL.SubAccountSequence = SA.Sequence
				WHERE JL.TrackingNum = @TrackingNum AND (JL.Created = 'Y' OR JL.Created = 'H') AND JO.Sequence = @Sequence AND (JO.JointOwnerType = @JOType1 OR JO.JointOwnerType = @JOType2 OR JO.JointOwnerType = @JOType3 OR JO.JointOwnerType = @JOType4) ORDER BY Suffix
				
			OPEN mycur2
			FETCH NEXT FROM mycur2
			INTO @Suffix
			
			SET @sTemp = ''
			WHILE @@FETCH_STATUS = 0
			BEGIN
				IF @Suffix IS NOT NULL
				BEGIN
					SET @sTemp = @sTemp + CASE WHEN @sTemp <> '' THEN ', ' ELSE '' END
					SET @sTemp = @sTemp + RIGHT('0' + CAST(@Suffix AS varchar(100)), 2)
				END
		
		
				FETCH NEXT FROM mycur2
				INTO @Suffix
			END
			CLOSE mycur2
			DEALLOCATE mycur2
		
			INSERT @JO ([TrackingNum], [Sequence], [JointOwnerType], [FullName], [FullAddress], [Address], [City], [State], [Zip], [CityStateZip], [Email], [Phone], [HPhoneFull], [WPhoneFull], [CPhoneFull], [Relationship], [DOB], [SSN], [DriversLicenseState], [DriversLicenseNum], [IDIssueDate], [IDExpirationDate], [EmployerName], [JobTitle], [Gender], [Suffixes]) VALUES (@TrackingNum, @Sequence, @JointOwnerType, @FullName, @FullAddress, @Address, @City, @State, @Zip, @CityStateZip, @Email, @Phone, @HPhoneFull, @WPhoneFull, @CPhoneFull, @Relationship, @DOB, @SSN, @DLS, @DLN, @IDIssueDate, @IDExpirationDate, @EmployerName, @JobTitle, @Gender, @sTemp)
		
			FETCH NEXT FROM mycur
			INTO @TrackingNum, @Sequence, @JointOwnerType, @FullName, @FullAddress, @Address, @City, @State, @Zip, @CityStateZip, @Email, @Phone, @HPhoneFull, @WPhoneFull, @CPhoneFull, @Relationship, @DOB, @SSN, @DLS, @DLN, @IDIssueDate, @IDExpirationDate, @EmployerName, @JobTitle, @Gender
		END
		CLOSE mycur
		DEALLOCATE mycur
		
--		SELECT * FROM #Temp ORDER BY [Sequence]
	RETURN
END




GO
/****** Object:  UserDefinedFunction [IMS].[fnGerber_GetUSAePayPaymentStatus]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE FUNCTION [IMS].[fnGerber_GetUSAePayPaymentStatus] 
(
	-- Add the parameters for the function here
	@PaymentID int
)
RETURNS varchar(25)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result varchar(25)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = PaymentStatus FROM IMS.USAePayPaymentStatus where PaymentId = @PaymentID

	-- Return the result of the function
	RETURN @Result
END

GO
/****** Object:  UserDefinedFunction [IMS].[fnNGFCU_GetJOType]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [IMS].[fnNGFCU_GetJOType] (@TrackingNum int, @JOType1 char(2), @JOType2 char(2), @JOType3 char(2), @JOType4 char(2)) 
RETURNS @JO TABLE
   (
	[JointSequence] INT identity,
	[TrackingNum] INT,
	[Sequence] INT,
	[FullName] CHAR(200),
	[Fulladdress] CHAR(200),
	[Address] CHAR(200),
	[City] CHAR(30),
	[State] CHAR(2),
	[Zip] CHAR(10),
	[CityStateZip] CHAR(200),
	[Email] CHAR(120),
	[Phone] CHAR(8),
	[HPhoneFull] CHAR(12),
	[WPhoneFull] CHAR(12),
	[CPhoneFull] CHAR(12),
	[Relationship] CHAR(50),
	[MaidenName] CHAR(50),
	[DOB] DATETIME,
	[SSN] CHAR(9),
	[DriversLicenseState] CHAR(2),
	[DriversLicenseNum] CHAR(30),
	[IDIssueDate] DATETIME,
	[IDExpirationDate] DATETIME,
	[EmployerName] CHAR(30),
	[JobTitle] CHAR(45),
	[Suffixes] varchar(100),
	[Gender] CHAR(1)
   )
AS
BEGIN
DECLARE @sTemp VARCHAR(1000)
DECLARE @Sequence INT
DECLARE @Suffix BigInt
DECLARE @FullName VARCHAR(200)
DECLARE @FullAddress VARCHAR(200)
DECLARE @Address VARCHAR(200)
DECLARE @City VARCHAR(30)
DECLARE @State VARCHAR(2)
DECLARE @Zip VARCHAR(10)
DECLARE @CityStateZip VARCHAR(200)
DECLARE @Email VARCHAR(120)
DECLARE @Phone VARCHAR(8)
DECLARE @HPhoneFull VARCHAR(12)
DECLARE @WPhoneFull VARCHAR(12)
DECLARE @CPhoneFull VARCHAR(12)
DECLARE @Relationship VARCHAR(50)
DECLARE @MaidenName VARCHAR(50)
DECLARE @DOB DATETIME
DECLARE @SSN VARCHAR(9)
DECLARE @DLS VARCHAR(2)
DECLARE @DLN VARCHAR(30)
DECLARE @IDIssueDate VARCHAR(8)
DECLARE @IDExpirationDate DATETIME
DECLARE @EmployerName VARCHAR(30)
DECLARE @JobTitle VARCHAR(45)
DECLARE @Gender CHAR(1)

	
		DECLARE mycur CURSOR
		FOR SELECT	  JO.TrackingNum
				, JO.Sequence AS [Sequence]
				, RTRIM(RTRIM(JO.FName) + ' ' + JO.MInitial) + ' ' + RTRIM(JO.LName) AS [FullName]
				, RTRIM(JO.Address1 + CASE JO.Address2 WHEN '' THEN ''ELSE', ' END + JO.Address2 + CASE JO.Address3 WHEN '' THEN ''ELSE', ' END + JO.Address3) + ', ' + JO.City + ', ' + JO.State + ' ' + CASE LEN(JO.Zip) WHEN 9 THEN LEFT(JO.Zip, 5) + '-' + RIGHT(JO.Zip, 4) ELSE JO.Zip END AS [FullAddress]
				, JO.Address1 AS [Address]
				, RTRIM(JO.City) AS [City]
				, JO.State AS [State]
				, CASE LEN(JO.Zip) WHEN 9 THEN LEFT(JO.Zip, 5) + '-' + RIGHT(JO.Zip, 4) ELSE JO.Zip END AS [Zip]
				, RTRIM(JO.City) + ', ' + JO.State + ' ' + CASE LEN(JO.Zip) WHEN 9 THEN LEFT(JO.Zip, 5) + '-' + Right(JO.Zip, 4) ELSE JO.Zip END AS [CityStateZip]
				, RTRIM(JO.Email1) AS Email
				, JO.AreaCode + JO.Phone AS Phone
				, JO.AreaCode + '-' + LEFT(JO.Phone, 3) + '-' + RIGHT(RTRIM(JO.Phone), 4) AS HPhoneFull
				, JO.WorkAC + '-' + LEFT(JO.WorkPhone, 3) + '-' + RIGHT(RTRIM(JO.WorkPhone), 4) AS WPhoneFull
				, JO.CellAC + '-' + LEFT(JO.CellPhone, 3) + '-' + RIGHT(RTRIM(JO.CellPhone), 4) AS CPhoneFull
				, JO.RelToPrimary AS [Relationship]
				, JO.MaidenName AS [MaidenName]
				, CONVERT(char(10), JO.DOB, 101) AS [DOB]
				, JO.SSN AS [SSN]
				, JO.DriversLicenseState AS [DriversLicenseState]
				, JO.DriversLicenseNum AS [DriversLicenseNum]
				, JO.IDIssueDate AS [IDIssueDate]
				, JO.IDExpirationDate AS [IDExpirationDate]
				, JO.EmployerName AS [EmployerName]
				, JO.JobTitle AS [JobTitle]
				, JO.Gender AS [Gender]
		FROM NewMemberJointOwner AS JO
		WHERE JO.TrackingNum = @TrackingNum AND (JO.JointOwnerType = @JOType1 OR JO.JointOwnerType = @JOType2 OR JO.JointOwnerType = @JOType3 OR JO.JointOwnerType = @JOType4)
		ORDER BY JO.Sequence
		
		OPEN mycur
		FETCH NEXT FROM mycur
		INTO @TrackingNum, @Sequence, @FullName, @FullAddress, @Address, @City, @State, @Zip, @CityStateZip, @EMail, @Phone, @HPhoneFull, @WPhoneFull, @CPhoneFull, @Relationship, @MaidenName, @DOB, @SSN, @DLS, @DLN, @IDIssueDate, @IDExpirationDate, @EmployerName, @JobTitle, @Gender
		
		WHILE @@FETCH_STATUS = 0
		BEGIN
			DECLARE mycur2 CURSOR
			FOR
				SELECT Suffix
				FROM NewMemberJointOwner JO
				LEFT OUTER JOIN NewMemberJointLink JL ON JL.TrackingNum = JO.TrackingNum AND JL.JointSequence = JO.Sequence
				LEFT OUTER JOIN NewMemberSubAccount SA ON JL.TrackingNum = SA.TrackingNum AND JL.SubAccountSequence = SA.Sequence
				WHERE JL.TrackingNum = @TrackingNum AND (JL.Created = 'Y' OR JL.Created = 'H') AND JO.Sequence = @Sequence AND (JO.JointOwnerType = @JOType1 OR JO.JointOwnerType = @JOType2 OR JO.JointOwnerType = @JOType3 OR JO.JointOwnerType = @JOType4) ORDER BY Suffix
				
			OPEN mycur2
			FETCH NEXT FROM mycur2
			INTO @Suffix
			
			SET @sTemp = ''
			WHILE @@FETCH_STATUS = 0
			BEGIN
				IF @Suffix IS NOT NULL
				BEGIN
					SET @sTemp = @sTemp + CASE WHEN @sTemp <> '' THEN ', ' ELSE '' END
					SET @sTemp = @sTemp + RIGHT('0' + CAST(@Suffix AS varchar(100)), 2)
				END
		
		
				FETCH NEXT FROM mycur2
				INTO @Suffix
			END
			CLOSE mycur2
			DEALLOCATE mycur2
		
			INSERT @JO ([TrackingNum], [Sequence], [FullName], [FullAddress], [Address], [City], [State], [Zip], [CityStateZip], [Email], [Phone], [HPhoneFull], [WPhoneFull], [CPhoneFull], [Relationship], [MaidenName], [DOB], [SSN], [DriversLicenseState], [DriversLicenseNum], [IDIssueDate], [IDExpirationDate], [EmployerName], [JobTitle], [Gender], [Suffixes]) VALUES (@TrackingNum, @Sequence, @FullName, @FullAddress, @Address, @City, @State, @Zip, @CityStateZip, @Email, @Phone, @HPhoneFull, @WPhoneFull, @CPhoneFull, @Relationship, @MaidenName, @DOB, @SSN, @DLS, @DLN, @IDIssueDate, @IDExpirationDate, @EmployerName, @JobTitle, @Gender, @sTemp)
		
			FETCH NEXT FROM mycur
			INTO @TrackingNum, @Sequence, @FullName, @FullAddress, @Address, @City, @State, @Zip, @CityStateZip, @Email, @Phone, @HPhoneFull, @WPhoneFull, @CPhoneFull, @Relationship, @MaidenName, @DOB, @SSN, @DLS, @DLN, @IDIssueDate, @IDExpirationDate, @EmployerName, @JobTitle, @Gender
		END
		CLOSE mycur
		DEALLOCATE mycur
		
--		SELECT * FROM #Temp ORDER BY [Sequence]
	RETURN
END




GO
/****** Object:  UserDefinedFunction [IMS].[fnNGFCU_GetUSAePayPaymentStatus]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE FUNCTION [IMS].[fnNGFCU_GetUSAePayPaymentStatus] 
(
	-- Add the parameters for the function here
	@PaymentID varchar(25)
)
RETURNS varchar(25)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result varchar(25)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = PaymentStatus FROM IMS.USAePayPaymentStatus where PaymentId = @PaymentID

	-- Return the result of the function
	RETURN @Result
END

GO
/****** Object:  UserDefinedFunction [IMS].[fnOFCU_GetKeyFactor]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE FUNCTION [IMS].[fnOFCU_GetKeyFactor] (@KeyFactors VARCHAR(1000), @Index INTEGER)
RETURNS VARCHAR(300)
AS
BEGIN

DECLARE @KeyFactor VARCHAR(300)
SET @KeyFactor = ''

DECLARE @KeyFactorTable TABLE (Idx INTEGER IDENTITY, KeyFactorCode VARCHAR(10), KeyFactorText VARCHAR(300))
DECLARE @Delimiter1 CHAR(1)
DECLARE @Delimiter2 CHAR(1)
DECLARE @TempKeyFactors VARCHAR(1000)
DECLARE @TempKeyFactor VARCHAR(300)

DECLARE @KeyFactorCode VARCHAR(10)
DECLARE @KeyFactorText VARCHAR(300)

SET @Delimiter1 = '|'
SET @Delimiter2 = ':'
SET @TempKeyFactors = @KeyFactors

WHILE CHARINDEX(@Delimiter1, @TempKeyFactors) > 0
BEGIN
	SET @TempKeyFactor = SUBSTRING(@TempKeyFactors, 1, CHARINDEX(@Delimiter1, @TempKeyFactors)-1)
	SET @TempKeyFactors = SUBSTRING(@TempKeyFactors, CHARINDEX(@Delimiter1, @TempKeyFactors)+1, LEN(@TempKeyFactors))

	SET @KeyFactorCode = SUBSTRING(@TempKeyFactor, 1, CHARINDEX(@Delimiter2, @TempKeyFactor)-1)
	SET @KeyFactorText = SUBSTRING(@TempKeyFactor, CHARINDEX(@Delimiter2, @TempKeyFactor)+1, LEN(@TempKeyFactor))
	INSERT INTO @KeyFactorTable (KeyFactorCode, KeyFactorText) VALUES (@KeyFactorCode, @KeyFactorText)
END
SET @KeyFactorCode = SUBSTRING(@TempKeyFactors, 1, CHARINDEX(@Delimiter2, @TempKeyFactors)-1)
SET @KeyFactorText = SUBSTRING(@TempKeyFactors, CHARINDEX(@Delimiter2, @TempKeyFactors)+1, LEN(@TempKeyFactors))
INSERT INTO @KeyFactorTable (KeyFactorCode, KeyFactorText) VALUES (@KeyFactorCode, @KeyFactorText)

SET @KeyFactor = (SELECT KeyFactorText FROM @KeyFactorTable WHERE Idx = @Index)

RETURN @KeyFactor
END
GO
/****** Object:  UserDefinedFunction [IMS].[fnOFCU_GetUSAePayPaymentStatus]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE FUNCTION [IMS].[fnOFCU_GetUSAePayPaymentStatus] 
(
	-- Add the parameters for the function here
	@PaymentID int
)
RETURNS varchar(25)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result varchar(25)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = PaymentStatus FROM IMS.USAePayPaymentStatus where PaymentId = @PaymentID

	-- Return the result of the function
	RETURN @Result
END

GO
/****** Object:  UserDefinedFunction [IMS].[fnONCU_GetJOJL]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE FUNCTION [IMS].[fnONCU_GetJOJL] (@TrackingNum int, @saseq int, @JOType1 char(2), @JOType2 char(2), @JOType3 char(2), @JOType4 char(2), @JOType5 char(2)) 
RETURNS @JO TABLE
   (
    [JointSequence]	int identity,
    [TrackingNum]	int,
    [Sequence]		int,
	[AssocCode]		char(2),
    [FullName]		char(200),
    [FName]			char(100),
    [MInitial]		char(20),
    [LName]			char(100),
    [Title]			char(50),
    [Fulladdress]	char(200),
    [Address]		char(200),
    [Address2]		char(200),
    [Apartment]		char(10),
    [CityStateZip]	char(200),
    [City]			char(100),
    [State]			char(2),
    [Zip]			char(10),
    [FullPhone]		char(12),
    [PhoneAC]		char(3),
    [Phone]			char(8),
    [WPhoneAC]		char(3),
    [WPhone]		char(8),
    [Email]			char(120),
    [Relationship]	char(50),
    [BenePercent]	char(10),
    [DOB]			char(10),
    [SSN]			char(12),
    [IDSource]		char(30),
    [IDNumber]		char(30),
    [IDIssueDate]	char(10),
    [IDExpireDate]	char(10),
	[IDState]		char(2),
    [Suffixes]		char(100)
   )
AS
BEGIN
DECLARE @sTemp varchar(1000)
DECLARE @Sequence int
DECLARE @AssocCode varchar(2)
DECLARE @Suffix int
DECLARE @FullName varchar(200)
DECLARE @FName varchar(100)
DECLARE @MInitial varchar(20)
DECLARE @LName varchar(100)
DECLARE @Title varchar(50)
DECLARE @FullAddress varchar(200)
DECLARE @Address varchar(200)
DECLARE @Address2 varchar(200)
DECLARE @Apartment varchar(10)
DECLARE @CityStateZip varchar(200)
DECLARE @City varchar(100)
DECLARE @State varchar(2)
DECLARE @Zip varchar(10)
DECLARE @FullPhone varchar(12)
DECLARE @PhoneAC varchar(3)
DECLARE @Phone varchar(8)
DECLARE @WPhoneAC varchar(3)
DECLARE @WPhone varchar(8)
DECLARE @Email varchar(120)
DECLARE @Relationship varchar(50)
DECLARE @BenePercent varchar(10)
DECLARE @DOB varchar(10)
DECLARE @SSN varchar(12)
DECLARE @IDSource varchar(30)
DECLARE @IDNumber varchar(30)
DECLARE @IDIssueDate varchar(10)
DECLARE @IDExpireDate varchar(10)
DECLARE @IDState varchar(2)

	
		DECLARE mycur CURSOR
		FOR SELECT	  JO.TrackingNum
				, JO.Sequence AS [Sequence]
				, JO.AssocCode AS [AssocCode]
				, CASE WHEN JO.FName = '' THEN RTRIM(JO.LName) + ' ' + JO.JOCHTag ELSE RTRIM(RTRIM(JO.FName) + ' ' + RTRIM(JO.LName) + ' ' + JO.JOCHTag) END AS [FullName]
				, RTRIM(JO.FName) AS [FName]
				, RTRIM(JO.MInitial) AS [MInitial]
				, RTRIM(JO.LName) AS [LName]
				, RTRIM(JO.Title) as [Title]
				, RTRIM(JO.Address1 + CASE JO.Address2 WHEN '' THEN '' ELSE ', ' END + JO.Address2 + CASE JO.Address3 WHEN '' THEN '' ELSE ', ' END + JO.Address3) + ', ' + JO.City + ', ' + JO.State + ' ' + CASE LEN(JO.Zip) WHEN 9 THEN LEFT(JO.Zip, 5) + '-' + Right(JO.Zip, 4) ELSE JO.Zip END AS [FullAddress]
				, JO.Address1 AS [Address]
				, JO.Address2 AS [Address2]
				, JO.ApartmentNumber AS [Apartment]
				, RTRIM(JO.City) + ', ' + JO.State + ' ' + CASE LEN(JO.Zip) WHEN 9 THEN LEFT(JO.Zip, 5) + '-' + Right(JO.Zip, 4) ELSE JO.Zip END AS [CityStateZip]
				, RTRIM(JO.City) AS [City]
				, RTRIM(JO.State) AS [State]
				, RTRIM(JO.Zip) AS [Zip]
				, JO.AreaCode + JO.Phone AS [FullPhone]
				, JO.AreaCode AS [PhoneAC]
				, JO.Phone AS [Phone]
				, JO.WorkAC AS [WPhoneAC]
				, JO.WorkPhone AS [WPhone]
				, JO.Email1 AS [Email]
				, JO.RelToPrimary AS [Relationship]
				, JO.BenePercent AS [BenePercent]
				, CONVERT(char(10), JO.DOB, 101) AS [DOB]
				, CASE WHEN JO.SSN <> '' THEN RTRIM(LEFT(JO.SSN, 3) + '-' + LEFT(RIGHT(JO.SSN, 6), 2) + '-' + RIGHT(JO.SSN, 4)) END AS [SSN]
				, CASE JO.IDType WHEN 'D' THEN '' ELSE JO.IDSource END AS [IDSource]
				, CASE JO.IDType WHEN 'D' THEN JO.DriversLicenseNum ELSE JO.IDNumber END AS [IDNumber]
				, CONVERT(char(10), JO.IDIssueDate, 101) AS [IDIssueDate]
				, CONVERT(char(10), JO.IDExpirationDate, 101) AS [IDExpireDate]
				, CASE JO.IDType WHEN 'D' THEN JO.DriversLicenseState ELSE '' END AS [IDState]
		FROM NewMemberJointOwner AS JO
			INNER JOIN NewMemberJointLink AS JOL On JOL.TrackingNum = JO.TrackingNum AND JOL.JointSequence = JO.Sequence AND JOL.SubAccountSequence = @saseq
		WHERE JO.TrackingNum = @TrackingNum AND JO.ChangeCode <> 'D' AND (JO.JointOwnerType LIKE @JOType1 OR JO.JointOwnerType LIKE @JOType2 OR JO.JointOwnerType LIKE @JOType3 OR JO.JointOwnerType LIKE @JOType4 OR JO.JointOwnerType LIKE @JOType5)
		ORDER BY JO.IDType DESC, JO.Sequence
		
		OPEN mycur
		FETCH NEXT FROM mycur
		INTO @TrackingNum, @Sequence, @AssocCode, @FullName, @FName, @MInitial, @LName, @Title, @FullAddress, @Address, @Address2, @Apartment, @CityStateZip, @City, @State, @Zip, @FullPhone, @PhoneAC, @Phone, @WPhoneAC, @WPhone, @Email, @Relationship, @BenePercent, @DOB, @SSN, @IDSource, @IDNumber, @IDIssueDate, @IDExpireDate, @IDState
		
		WHILE @@FETCH_STATUS = 0
		BEGIN
			DECLARE mycur2 CURSOR
			FOR
				SELECT Suffix
				FROM NewMemberJointOwner JO
				LEFT OUTER JOIN NewMemberJointLink JL ON JL.TrackingNum = JO.TrackingNum AND JL.JointSequence = JO.Sequence
				LEFT OUTER JOIN NewMemberSubAccount SA ON JL.TrackingNum = SA.TrackingNum AND JL.SubAccountSequence = SA.Sequence
				WHERE JL.TrackingNum = @TrackingNum AND JO.Sequence = @Sequence AND JO.ChangeCode <> 'D' AND (JO.JointOwnerType LIKE @JOType1 OR JO.JointOwnerType LIKE @JOType2 OR JO.JointOwnerType LIKE @JOType3 OR JO.JointOwnerType LIKE @JOType4 OR JO.JointOwnerType LIKE @JOType5) ORDER BY Suffix
				
			OPEN mycur2
			FETCH NEXT FROM mycur2
			INTO @Suffix
			
			SET @sTemp = ''
			WHILE @@FETCH_STATUS = 0
			BEGIN
				IF @Suffix IS NOT NULL
				BEGIN
					SET @sTemp = @sTemp + CASE WHEN @sTemp <> '' THEN ', ' ELSE '' END
					SET @sTemp = @sTemp + RIGHT('0' + CAST(@Suffix AS varchar(2)), 2)
				END
		
		
				FETCH NEXT FROM mycur2
				INTO @Suffix
			END
			CLOSE mycur2
			DEALLOCATE mycur2
		
			INSERT @JO ([TrackingNum], [Sequence], [AssocCode], [FullName], [FName], [MInitial], [LName], [Title], [FullAddress], [Address], [Address2], [Apartment], [CityStateZip], [City], [State], [Zip], [FullPhone], [PhoneAC], [Phone], [WPhoneAC], [WPhone], [Email], [Relationship], [BenePercent], [DOB], [SSN], [IDSource], [IDNumber], [IDIssueDate], [IDExpireDate], [IDState], [Suffixes]) VALUES ( @TrackingNum, @Sequence, @AssocCode, @FullName, @FName, @MInitial, @LName, @Title, @FullAddress, @Address, @Address2, @Apartment, @CityStateZip, @City, @State, @Zip, @FullPhone, @PhoneAC, @Phone, @WPhoneAC, @WPhone, @Email, @Relationship, @BenePercent, @DOB, @SSN, @IDSource, @IDNumber, @IDIssueDate, @IDExpireDate, @IDState, @sTemp)
		
			FETCH NEXT FROM mycur
			INTO @TrackingNum, @Sequence, @AssocCode, @FullName, @FName, @MInitial, @LName, @Title, @FullAddress, @Address, @Address2, @Apartment, @CityStateZip, @City, @State, @Zip, @FullPhone, @PhoneAC, @Phone, @WPhoneAC, @WPhone, @Email, @Relationship, @BenePercent, @DOB, @SSN, @IDSource, @IDNumber, @IDIssueDate, @IDExpireDate, @IDState
		END
		CLOSE mycur
		DEALLOCATE mycur
		
--		SELECT * FROM #Temp ORDER BY [Sequence]

	RETURN
END
GO
/****** Object:  UserDefinedFunction [IMS].[fnONCU_GetJOJL2]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE FUNCTION [IMS].[fnONCU_GetJOJL2] (@TrackingNum int, @jotype1 varchar(2), @jotype2 varchar(2), @jotype3 varchar(2), @jotype4 varchar(2), @jotype5 varchar(2), @jotype6 varchar(2), @jotype7 varchar(2), @jotype8 varchar(2), @saseq int)  
RETURNS @JOJL TABLE
(
	JointSequence INT identity,
	TrackingNum INT,
	FullName CHAR(40),
	JOCHTag CHAR(40),
	FullAddress CHAR(100),
	Address CHAR(40),
	Address2 CHAR(40),
	Address12 CHAR(100),
	Apartment CHAR(10),
	City CHAR(100),
	State CHAR(2),
	Zip CHAR(10),
	CityStateZip CHAR(40),
	FullPhone CHAR(12),
	Email CHAR(120),
	DOB CHAR(10),
	SSN CHAR(12),
	[ID] CHAR(40),
	IDIssueDate CHAR(10),
	IDExpDate CHAR(10),
	IDState CHAR(2),
	Title CHAR(40),
	JointOwnerType CHAR(10),
	[Sequence] INT
)
AS
BEGIN
INSERT @JOJL (TrackingNum, FullName, JOCHTag, FullAddress, Address, Address2, Address12, Apartment, City, State, Zip, CityStateZip, FullPhone, Email, DOB, SSN, [ID], IDIssueDate, IDExpDate, IDState, Title, JointOwnerType, [Sequence])
SELECT DISTINCT
	JO.TrackingNum
	, RTRIM(JO.fname) + ' ' + RTRIM(JO.lname) AS FullName
	, RTRIM(JO.JOCHTag) AS JOCHTag
	, RTRIM(RTRIM(JO.Address1) + CASE JO.Address2 WHEN '' THEN ''ELSE', ' END + RTRIM(JO.Address2) + CASE JO.Address3 WHEN '' THEN '' ELSE', ' END + RTRIM(JO.Address3)) + ', ' + RTRIM(JO.City) + ', ' + JO.State + ' ' + CASE LEN(JO.Zip) WHEN 9 THEN LEFT(JO.Zip, 5) + '-' + Right(JO.Zip, 4) ELSE JO.Zip END AS FullAddress
	, JO.Address1 AS [Address]
	, JO.Address2 AS [Address2]
	, RTRIM(RTRIM(JO.Address1) + CASE JO.Address2 WHEN '' THEN ''ELSE', ' END + RTRIM(JO.Address2) + CASE JO.Address3 WHEN '' THEN '' ELSE', ' END + RTRIM(JO.Address3)) AS Address12
	, JO.ApartmentNumber AS [Apartment]
	, RTRIM(JO.City) AS [City]
	, RTRIM(JO.State) AS [State]
	, RTRIM(JO.Zip) AS [Zip]
	, RTRIM(JO.City) + ', ' + JO.State + ' ' + CASE LEN(JO.Zip) WHEN 9 THEN LEFT(JO.Zip, 5) + '-' + Right(JO.Zip, 4) ELSE JO.Zip END AS CityStateZip
	, JO.AreaCode + '-' + LEFT(JO.Phone, 3) + '-' + RIGHT(RTRIM(JO.Phone), 4) AS FullPhone
	, JO.Email1 AS [Email]
	, CONVERT(char(10), JO.DOB, 101) AS DOB
	, CASE JOT.Individual WHEN 'Y' THEN Left(JO.SSN, 3) + '-' + LEFT(RIGHT(JO.SSN, 6), 2) + '-' + RIGHT(JO.SSN, 4) ELSE LEFT(JO.SSN, 2) + '-' + RIGHT(JO.SSN, 7) END AS SSN
	, CASE JO.IDType WHEN 'D' THEN JO.DriversLicenseNum ELSE JO.IDSource + ': ' + JO.IDNumber END AS ID
	, CONVERT(char(10), JO.IDIssueDate, 101) AS IDIssueDate
	, CONVERT(char(10), JO.IDExpirationDate, 101) AS IDExpDate
	, JO.DriversLicenseState AS IDState
	, JO.Title As Title
	, JO.JointOwnerType
	, JO.[Sequence]
FROM NewMemberJointOwner As JO
	INNER JOIN udt_JointOwnerTypes AS JOT On JO.JointOwnerType = JOT.JOType
	INNER JOIN NewMemberJointLink AS JOL On JOL.TrackingNum = JO.TrackingNum AND JOL.JointSequence = JO.Sequence AND JOL.SubAccountSequence = @saseq
WHERE JO.TrackingNum = @TrackingNum AND (JO.JointOwnerType = @jotype1 OR JO.JointOwnerType = @jotype2 OR JO.JointOwnerType = @jotype3 OR JO.JointOwnerType = @jotype4 OR JO.JointOwnerType = @jotype5 OR JO.JointOwnerType = @jotype6 OR JO.JointOwnerType = @jotype7 OR JO.JointOwnerType = @jotype8)
ORDER BY JO.Sequence

RETURN

END
GO
/****** Object:  UserDefinedFunction [IMS].[fnONCU_GetJOType]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE FUNCTION [IMS].[fnONCU_GetJOType] (@TrackingNum int, @JOType1 char(2), @JOType2 char(2), @JOType3 char(2), @JOType4 char(2), @JOType5 char(2)) 
RETURNS @JO TABLE
   (
    [JointSequence]	int identity,
    [TrackingNum]	int,
    [Sequence]		int,
	[AssocCode]		char(2),
    [FullName]		char(200),
    [FName]			char(100),
    [MInitial]		char(20),
    [LName]			char(100),
    [Title]			char(50),
    [JobTitle]		char(45),
    [Fulladdress]	char(200),
    [Address]		char(200),
    [Address2]		char(200),
    [Apartment]		char(10),
    [CityStateZip]	char(200),
    [City]			char(100),
    [State]			char(2),
    [Zip]			char(10),
    [FullPhone]		char(12),
    [PhoneAC]		char(3),
    [Phone]			char(8),
    [WPhoneAC]		char(3),
    [WPhone]		char(8),
    [Email]			char(120),
    [Relationship]	char(50),
    [BenePercent]	char(10),
    [DOB]			char(10),
    [SSN]			char(12),
    [IDSource]		char(30),
    [IDNumber]		char(30),
    [IDIssueDate]	char(10),
    [IDExpireDate]	char(10),
	[IDState]		char(2),
    [Suffixes]		char(100)
   )
AS
BEGIN
DECLARE @sTemp varchar(1000)
DECLARE @Sequence int
DECLARE @AssocCode varchar(2)
DECLARE @Suffix int
DECLARE @FullName varchar(200)
DECLARE @FName varchar(100)
DECLARE @MInitial varchar(20)
DECLARE @LName varchar(100)
DECLARE @Title varchar(50)
DECLARE @JobTitle varchar(45)
DECLARE @FullAddress varchar(200)
DECLARE @Address varchar(200)
DECLARE @Address2 varchar(200)
DECLARE @Apartment varchar(10)
DECLARE @CityStateZip varchar(200)
DECLARE @City varchar(100)
DECLARE @State varchar(2)
DECLARE @Zip varchar(10)
DECLARE @FullPhone varchar(12)
DECLARE @PhoneAC varchar(3)
DECLARE @Phone varchar(8)
DECLARE @WPhoneAC varchar(3)
DECLARE @WPhone varchar(8)
DECLARE @Email varchar(120)
DECLARE @Relationship varchar(50)
DECLARE @BenePercent varchar(10)
DECLARE @DOB varchar(10)
DECLARE @SSN varchar(12)
DECLARE @IDSource varchar(30)
DECLARE @IDNumber varchar(30)
DECLARE @IDIssueDate varchar(10)
DECLARE @IDExpireDate varchar(10)
DECLARE @IDState varchar(2)

	
		DECLARE mycur CURSOR
		FOR SELECT	  JO.TrackingNum
				, JO.Sequence AS [Sequence]
				, UPPER(JO.AssocCode) AS [AssocCode]
				, UPPER(CASE WHEN JO.FName = '' THEN RTRIM(JO.LName) + ' ' + JO.JOCHTag ELSE RTRIM(RTRIM(JO.FName) + ' ' + RTRIM(JO.LName) + ' ' + JO.JOCHTag) END) AS [FullName]
				, UPPER(RTRIM(JO.FName)) AS [FName]
				, UPPER(RTRIM(JO.MInitial)) AS [MInitial]
				, UPPER(RTRIM(JO.LName)) AS [LName]
				, UPPER(RTRIM(JO.Title)) AS [Title]
				, UPPER(RTRIM(JO.JobTitle)) AS [JobTitle]
				, UPPER(RTRIM(JO.Address1 + CASE JO.Address2 WHEN '' THEN '' ELSE ', ' END + JO.Address2 + CASE JO.Address3 WHEN '' THEN '' ELSE ', ' END + JO.Address3) + ', ' + JO.City + ', ' + JO.State + ' ' + CASE LEN(JO.Zip) WHEN 9 THEN LEFT(JO.Zip, 5) + '-' + Right(JO.Zip, 4) ELSE JO.Zip END) AS [FullAddress]
				, UPPER(JO.Address1) AS [Address]
				, UPPER(JO.Address2) AS [Address2]
				, UPPER(JO.ApartmentNumber) AS [Apartment]
				, UPPER(RTRIM(JO.City) + ', ' + JO.State + ' ' + CASE LEN(JO.Zip) WHEN 9 THEN LEFT(JO.Zip, 5) + '-' + Right(JO.Zip, 4) ELSE JO.Zip END) AS [CityStateZip]
				, UPPER(RTRIM(JO.City)) AS [City]
				, UPPER(RTRIM(JO.State)) AS [State]
				, UPPER(RTRIM(JO.Zip)) AS [Zip]
				, JO.AreaCode + JO.Phone AS [FullPhone]
				, JO.AreaCode AS [PhoneAC]
				, JO.Phone AS [Phone]
				, JO.WorkAC AS [WPhoneAC]
				, JO.WorkPhone AS [WPhone]
				, UPPER(JO.Email1) AS [Email]
				, UPPER(JO.RelToPrimary) AS [Relationship]
				, JO.BenePercent AS [BenePercent]
				, CONVERT(char(10), JO.DOB, 101) AS [DOB]
				, CASE WHEN JO.SSN <> '' THEN RTRIM(LEFT(JO.SSN, 3) + '-' + LEFT(RIGHT(JO.SSN, 6), 2) + '-' + RIGHT(JO.SSN, 4)) END AS [SSN]
				, UPPER(CASE JO.IDType WHEN 'D' THEN '' ELSE JO.IDSource END) AS [IDSource]
				, UPPER(CASE JO.IDType WHEN 'D' THEN JO.DriversLicenseNum ELSE JO.IDNumber END) AS [IDNumber]
				, CONVERT(char(10), JO.IDIssueDate, 101) AS [IDIssueDate]
				, CONVERT(char(10), JO.IDExpirationDate, 101) AS [IDExpireDate]
				, UPPER(CASE JO.IDType WHEN 'D' THEN JO.DriversLicenseState ELSE '' END) AS [IDState]
		FROM NewMemberJointOwner AS JO
		WHERE JO.TrackingNum = @TrackingNum AND JO.ChangeCode <> 'D' AND (JO.JointOwnerType LIKE @JOType1 OR JO.JointOwnerType LIKE @JOType2 OR JO.JointOwnerType LIKE @JOType3 OR JO.JointOwnerType LIKE @JOType4 OR JO.JointOwnerType LIKE @JOType5)
		ORDER BY JO.IDType DESC, JO.Sequence
		
		OPEN mycur
		FETCH NEXT FROM mycur
		INTO @TrackingNum, @Sequence, @AssocCode, @FullName, @FName, @MInitial, @LName, @Title, @JobTitle, @FullAddress, @Address, @Address2, @Apartment, @CityStateZip, @City, @State, @Zip, @FullPhone, @PhoneAC, @Phone, @WPhoneAC, @WPhone, @Email, @Relationship, @BenePercent, @DOB, @SSN, @IDSource, @IDNumber, @IDIssueDate, @IDExpireDate, @IDState
		
		WHILE @@FETCH_STATUS = 0
		BEGIN
			DECLARE mycur2 CURSOR
			FOR
				SELECT Suffix
				FROM NewMemberJointOwner JO
				LEFT OUTER JOIN NewMemberJointLink JL ON JL.TrackingNum = JO.TrackingNum AND JL.JointSequence = JO.Sequence
				LEFT OUTER JOIN NewMemberSubAccount SA ON JL.TrackingNum = SA.TrackingNum AND JL.SubAccountSequence = SA.Sequence
				WHERE JL.TrackingNum = @TrackingNum AND JO.Sequence = @Sequence AND JO.ChangeCode <> 'D' AND (JO.JointOwnerType LIKE @JOType1 OR JO.JointOwnerType LIKE @JOType2 OR JO.JointOwnerType LIKE @JOType3 OR JO.JointOwnerType LIKE @JOType4 OR JO.JointOwnerType LIKE @JOType5) ORDER BY Suffix
				
			OPEN mycur2
			FETCH NEXT FROM mycur2
			INTO @Suffix
			
			SET @sTemp = ''
			WHILE @@FETCH_STATUS = 0
			BEGIN
				IF @Suffix IS NOT NULL
				BEGIN
					SET @sTemp = @sTemp + CASE WHEN @sTemp <> '' THEN ', ' ELSE '' END
					SET @sTemp = @sTemp + RIGHT('0' + CAST(@Suffix AS varchar(2)), 2)
				END
		
		
				FETCH NEXT FROM mycur2
				INTO @Suffix
			END
			CLOSE mycur2
			DEALLOCATE mycur2
		
			INSERT @JO ([TrackingNum], [Sequence], [AssocCode], [FullName], [FName], [MInitial], [LName], [Title], [JobTitle], [FullAddress], [Address], [Address2], [Apartment], [CityStateZip], [City], [State], [Zip], [FullPhone], [PhoneAC], [Phone], [WPhoneAC], [WPhone], [Email], [Relationship], [BenePercent], [DOB], [SSN], [IDSource], [IDNumber], [IDIssueDate], [IDExpireDate], [IDState], [Suffixes]) VALUES ( @TrackingNum, @Sequence, @AssocCode, @FullName, @FName, @MInitial, @LName, @Title, @JobTitle, @FullAddress, @Address, @Address2, @Apartment, @CityStateZip, @City, @State, @Zip, @FullPhone, @PhoneAC, @Phone, @WPhoneAC, @WPhone, @Email, @Relationship, @BenePercent, @DOB, @SSN, @IDSource, @IDNumber, @IDIssueDate, @IDExpireDate, @IDState, @sTemp)
		
			FETCH NEXT FROM mycur
			INTO @TrackingNum, @Sequence, @AssocCode, @FullName, @FName, @MInitial, @LName, @Title, @JobTitle, @FullAddress, @Address, @Address2, @Apartment, @CityStateZip, @City, @State, @Zip, @FullPhone, @PhoneAC, @Phone, @WPhoneAC, @WPhone, @Email, @Relationship, @BenePercent, @DOB, @SSN, @IDSource, @IDNumber, @IDIssueDate, @IDExpireDate, @IDState
		END
		CLOSE mycur
		DEALLOCATE mycur
		
--		SELECT * FROM #Temp ORDER BY [Sequence]

	RETURN
END




GO
/****** Object:  UserDefinedFunction [IMS].[fnONCU_GetUSAePayPaymentStatus]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE FUNCTION [IMS].[fnONCU_GetUSAePayPaymentStatus] 
(
	-- Add the parameters for the function here
	@PaymentID int
)
RETURNS varchar(25)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result varchar(25)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = PaymentStatus FROM IMS.USAePayPaymentStatus where PaymentId = @PaymentID

	-- Return the result of the function
	RETURN @Result
END

GO
/****** Object:  UserDefinedFunction [IMS].[fnONCU_TitleCase]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE FUNCTION [IMS].[fnONCU_TitleCase] (@x VARCHAR(200))
RETURNS VARCHAR(200) AS  
BEGIN
 	IF @x <> ''
	BEGIN
	 	DECLARE @y INT
		SET @y = 1
	
		SELECT @x = UPPER(SUBSTRING(@x,1,1))+LOWER(SUBSTRING(@x,2,LEN(@x)-1))+' '
	
		WHILE @y < LEN(@x)
		BEGIN
			SELECT @y=CHARINDEX(' ',@x,@y)
			SELECT @x=SUBSTRING(@x,1,@y)+UPPER(SUBSTRING(@x,@y+1,1))+SUBSTRING(@x,@y+2,LEN(@x)-@y+1)   
			SELECT @y=@y+1
		END
	END
	RETURN @x
END
GO
/****** Object:  UserDefinedFunction [IMS].[fnSafe_GetBEType]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [IMS].[fnSafe_GetBEType] (@TrackingNum INT, @BEType1 CHAR(2), @BEType2 CHAR(2), @BEType3 CHAR(2)) 
RETURNS @BE TABLE
   (
    [BeneficiarySequence]	INT identity,
    [TrackingNum]	INT,
    [Sequence]		INT,
    [Type]		CHAR(2),
    [FullName]		CHAR(200),
    [Fulladdress]		CHAR(200),
    [Address]		CHAR(200),
    [CityStateZip]		CHAR(200),
    [Phone]		CHAR(10),
    [Relationship]		CHAR(50),
    [DOB]		SMALLDATETIME,
    [SSN]		CHAR(9),
    [DriversLicenseState]	CHAR(2),
    [DriversLicenseNum]	CHAR(30),
    [IDIssueDate]		SMALLDATETIME,
    [IDExpirationDate] 	SMALLDATETIME,
    [AgeOfDelivery]	CHAR(3),
    [Percent]		CHAR(4),
    [Suffixes]		CHAR(100)
   )
AS
BEGIN
DECLARE @sTemp VARCHAR(1000)
DECLARE @Sequence INT
DECLARE @Suffix INT
DECLARE @Type VARCHAR(2)
DECLARE @FullName VARCHAR(200)
DECLARE @FullAddress VARCHAR(200)
DECLARE @Address VARCHAR(200)
DECLARE @CityStateZip VARCHAR(200)
DECLARE @Phone VARCHAR(10)
DECLARE @Relationship VARCHAR(50)
DECLARE @DOB SMALLDATETIME
DECLARE @SSN VARCHAR(9)
DECLARE @DLS VARCHAR(2)
DECLARE @DLN VARCHAR(30)
DECLARE @IDIssueDate VARCHAR(8)
DECLARE @IDExpirationDate SMALLDATETIME
DECLARE @AgeOfDelivery VARCHAR(3)
DECLARE @Percent VARCHAR(4)
	
		DECLARE mycur CURSOR LOCAL FAST_FORWARD
		FOR SELECT	  BE.TrackingNum
				, BE.[Sequence] AS [Sequence]
				, BE.BType AS [Type]
				, RTRIM(BE.FName) + ' ' + RTRIM(BE.LName) AS [FullName]
				, RTRIM(BE.Address1 + CASE ISNULL(BE.Address2, '') WHEN '' THEN '' ELSE', ' END +RTRIM( BE.Address2) + CASE ISNULL(BE.Address3, '') WHEN '' THEN '' ELSE', ' END + RTRIM(BE.Address3)) + ', ' + RTRIM(BE.City) + ', ' + BE.State + ' ' + CASE LEN(BE.Zip) WHEN 9 THEN LEFT(BE.Zip, 5) + '-' + Right(BE.Zip, 4) ELSE BE.Zip END AS [FullAddress]
				, BE.Address1 AS [Address]
				, BE.City + ', ' + BE.State + ' ' + CASE LEN(BE.Zip) WHEN 9 THEN LEFT(BE.Zip, 5) + '-' + Right(BE.Zip, 4) ELSE BE.Zip END AS [CityStateZip]
				, BE.AreaCode + BE.Phone AS Phone
				, BE.RelToPrimary AS [Relationship]
				, CONVERT(char(10), BE.DOB, 101) AS [DOB]
				, BE.SSN AS [SSN]
				, BE.DriversLicenseState AS [DriversLicenseState]
				, BE.DriversLicenseNum AS [DriversLicenseNum]
				, BE.IDIssueDate AS [IDIssueDate]
				, BE.IDExpirationDate AS [IDExpirationDate]
				, BE.AgeOfDelivery AS [AgeOfDelivery]
				, BE.[BenePercent] AS [Percent]
		FROM NewMemberBeneficiary AS BE
		WHERE BE.TrackingNum = @TrackingNum AND (BE.BType = @BEType1 OR BE.BType = @BEType2 OR BE.JointOwnerType = @BEType3)
		ORDER BY BE.Sequence
		
		OPEN mycur
		FETCH NEXT FROM mycur
		INTO @TrackingNum, @Sequence, @Type, @FullName, @FullAddress, @Address, @CityStateZip, @Phone, @Relationship, @DOB, @SSN, @DLS, @DLN, @IDIssueDate, @IDExpirationDate, @AgeOfDelivery, @Percent
		
		WHILE @@FETCH_STATUS = 0
		BEGIN
			DECLARE mycur2 CURSOR LOCAL FAST_FORWARD
			FOR
				SELECT Suffix
				FROM NewMemberBeneficiary BE
				LEFT OUTER JOIN NewMemberBeneficiaryLink BL ON BL.TrackingNum = BE.TrackingNum AND BL.BeneficiarySequence = BE.Sequence
				LEFT OUTER JOIN NewMemberSubAccount SA ON BL.TrackingNum = SA.TrackingNum AND BL.SubAccountSequence = SA.Sequence
				WHERE BL.TrackingNum = @TrackingNum AND BE.Sequence = @Sequence AND (BE.BType = @BEType1 OR BE.BType = @BEType2 OR BE.BType = @BEType3) ORDER BY Suffix
				
			OPEN mycur2
			FETCH NEXT FROM mycur2
			INTO @Suffix
			
			SET @sTemp = ''
			WHILE @@FETCH_STATUS = 0
			BEGIN
				IF @Suffix IS NOT NULL
				BEGIN
					SET @sTemp = @sTemp + CASE WHEN @sTemp <> '' THEN ', ' ELSE '' END
					SET @sTemp = @sTemp + CAST(@Suffix AS varchar(2))
				END
		
		
				FETCH NEXT FROM mycur2
				INTO @Suffix
			END
			CLOSE mycur2
			DEALLOCATE mycur2
		
			INSERT @BE ([TrackingNum], [Sequence], [Type], [FullName], [FullAddress], [Address], [CityStateZip], [Phone], [Relationship], [DOB], [SSN], [DriversLicenseState], [DriversLicenseNum], [IDIssueDate], [IDExpirationDate], [AgeOfDelivery], [Percent], [Suffixes]) VALUES (@TrackingNum, @Sequence, @Type, @FullName, @FullAddress, @Address, @CityStateZip, @Phone, @Relationship, @DOB, @SSN, @DLS, @DLN, @IDIssueDate, @IDExpirationDate, @AgeOfDelivery, @Percent, @sTemp)
		
			FETCH NEXT FROM mycur
			INTO @TrackingNum, @Sequence, @Type, @FullName, @FullAddress, @Address, @CityStateZip, @Phone, @Relationship, @DOB, @SSN, @DLS, @DLN, @IDIssueDate, @IDExpirationDate, @AgeOfDelivery, @Percent
		END
		CLOSE mycur
		DEALLOCATE mycur
		
	RETURN
END


GO
/****** Object:  UserDefinedFunction [IMS].[fnSafe_GetCartItems]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [IMS].[fnSafe_GetCartItems] (@TrackingNum INT, @SLType1 CHAR(1), @SLType2 CHAR(1), @SLType3 CHAR(1), @SLType4 CHAR(1), @SLType5 CHAR(1), @SLType6 CHAR(1), @Status CHAR(1), @YesNoMaybe CHAR(10)) 
RETURNS @CART TABLE
(
	CartSequence INT identity,
	TrackingNum INT,
	ProductName CHAR(200)
)
AS
BEGIN
INSERT @CART (TrackingNum, ProductName)
SELECT CART.TrackingNum, CASE WHEN ISNULL(CART.ProductName, '') = '' THEN SA.Description ELSE CART.ProductName END AS ProductName
FROM IMS.NewMemberShoppingCart AS CART
LEFT JOIN IMS.NewMemberSubAccount AS SA ON SA.SubAccountType = CART.ProductID AND SA.TrackingNum = CART.TrackingNum AND SA.Created = 'Y'
WHERE CART.TrackingNum = @TrackingNum
	AND (CART.SLType = (@SLType1) OR CART.SLType = (@SLType2) OR CART.SLType = (@SLType3) OR CART.SLType = (@SLType4) OR CART.SLType = (@SLType5) OR CART.SLType = (@SLType6))
	AND (CART.Status = @Status OR @Status = '@')
	AND (CART.YesNoMaybe = @YesNoMaybe OR (@YesNoMaybe = 'YES' AND CART.Created = 'Y' AND ISNULL(CART.ProductName, '') = ''))
	AND CART.Created != 'H'
ORDER BY CART.ProductID

RETURN

END




GO
/****** Object:  UserDefinedFunction [IMS].[fnSafe_GetJOType]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [IMS].[fnSafe_GetJOType] (@TrackingNum INT, @JOType1 CHAR(2), @JOType2 CHAR(2), @JOType3 CHAR(2), @JOType4 CHAR(2), @JOType5 CHAR(2), @JOType6 CHAR(2), @SuffixListMatch CHAR(200))
RETURNS @JO TABLE
   (
    [JointSequence]	INT identity,
    [TrackingNum]	INT,
    [Sequence]		INT,
    [JointOwnerType]	CHAR(2),
    [FullName]		CHAR(200),
    [Fulladdress]		CHAR(200),
    [Address]		CHAR(200),
    [CityStateZip]		CHAR(200),
    [Phone]		CHAR(10),
    [WorkPhone]		CHAR(10),
    [CellPhone]		CHAR(10),
    [Relationship]		CHAR(50),
    [DOB]		DATETIME,
    [SSN]		CHAR(9),
    [DriversLicenseState]	CHAR(2),
    [DriversLicenseNum]	CHAR(30),
    [IDIssueDate]		DATETIME,
    [IDExpirationDate] 	DATETIME,
    [AgeOfDelivery]	CHAR(3),
    [JOCHTag]		CHAR(50),
    [Title]			CHAR(20),
    [JointAccount]	CHAR(10),
    [Qualification1]	CHAR(30),
    [Qualification2]	CHAR(30),
    [Qualification3]	CHAR(30),
    [DepartmentName]	CHAR(80),
    [EmployerName]	CHAR(30),
    [JobTitle]	CHAR(45),
    [Suffixes]		CHAR(100)
   )
AS
BEGIN
DECLARE @sTemp VARCHAR(1000)
DECLARE @Sequence INT
DECLARE @Suffix INT
DECLARE @JointOwnerType VARCHAR(2)
DECLARE @FullName VARCHAR(200)
DECLARE @FullAddress VARCHAR(200)
DECLARE @Address VARCHAR(200)
DECLARE @CityStateZip VARCHAR(200)
DECLARE @Phone VARCHAR(10)
DECLARE @WorkPhone VARCHAR(10)
DECLARE @CellPhone VARCHAR(10)
DECLARE @Relationship VARCHAR(50)
DECLARE @DOB DATETIME
DECLARE @SSN VARCHAR(9)
DECLARE @DLS VARCHAR(2)
DECLARE @DLN VARCHAR(30)
DECLARE @IDIssueDate DATETIME
DECLARE @IDExpirationDate DATETIME
DECLARE @AgeOfDelivery VARCHAR(3)
DECLARE @JOCHTag VARCHAR(50)
DECLARE @Title VARCHAR(20)
DECLARE @JointAccount VARCHAR(10)
DECLARE @Qualification1 VARCHAR(30)
DECLARE @Qualification2 VARCHAR(30)
DECLARE @Qualification3 VARCHAR(30)
DECLARE @DepartmentName VARCHAR(80)
DECLARE @EmployerName VARCHAR(30)
DECLARE @JobTitle VARCHAR(45)
	
		DECLARE mycur CURSOR LOCAL FAST_FORWARD
		FOR SELECT	  JO.TrackingNum
				, JO.Sequence AS [Sequence]
				, JO.JointOwnerType AS [JointOwnerType]
				, RTRIM(JO.FName) + ' ' + RTRIM(JO.LName) AS [FullName]
				, RTRIM(RTRIM(JO.Address1) + CASE ISNULL(JO.ApartmentNumber, '') WHEN '' THEN '' ELSE' #' END + RTRIM(JO.ApartmentNumber) + CASE ISNULL(JO.Address2, '') WHEN '' THEN '' ELSE', ' END + RTRIM(JO.Address2) + CASE ISNULL(JO.Address3, '') WHEN '' THEN '' ELSE', ' END + RTRIM(JO.Address3)) + ', ' + RTRIM(JO.City) + ', ' + JO.State + ' ' + CASE LEN(JO.Zip) WHEN 9 THEN LEFT(JO.Zip, 5) + '-' + Right(JO.Zip, 4) ELSE JO.Zip END AS [FullAddress]
				, RTRIM(JO.Address1) AS [Address]
				, RTRIM(JO.City) + ', ' + JO.State + ' ' + CASE LEN(JO.Zip) WHEN 9 THEN LEFT(JO.Zip, 5) + '-' + Right(JO.Zip, 4) ELSE JO.Zip END AS [CityStateZip]
				, JO.AreaCode + JO.Phone AS Phone
				, JO.WorkAC + JO.WorkPhone AS WorkPhone
				, JO.CellAC + JO.CellPhone AS CellPhone
				, RTRIM(JO.RelToPrimary) AS [Relationship]
				, CONVERT(char(10), JO.DOB, 101) AS [DOB]
				, JO.SSN AS [SSN]
				, JO.DriversLicenseState AS [DriversLicenseState]
				, RTRIM(RTRIM(JO.DriversLicenseNum) + RTRIM(JO.IDSource) + ' ' + RTRIM(JO.IDNumber)) AS [DriversLicenseNum]
				, JO.IDIssueDate AS [IDIssueDate]
				, JO.IDExpirationDate AS [IDExpirationDate]
				, JO.AgeOfDelivery AS [AgeOfDelivery]
				, JO.JOCHTag AS [JOCHTag]
				, RTRIM(JO.Title) AS [Title]
				, RTRIM(JO.JointAccount) AS [JointAccount]
				, RTRIM(JO.Qualification1) AS [Qualification1]
				, RTRIM(JO.Qualification2) AS [Qualification2]
				, RTRIM(JO.Qualification3) AS [Qualification3]
				, RTRIM(DEPT.Description) AS [DepartmentName]
				, RTRIM(JO.EmployerName) AS [EmployerName]
				, RTRIM(JO.JobTitle) AS [JobTitle]
		FROM NewMemberJointOwner AS JO
		LEFT JOIN Departments AS DEPT ON DEPT.Department = JO.Department
		WHERE JO.TrackingNum = @TrackingNum AND (JO.JointOwnerType = @JOType1 OR JO.JointOwnerType = @JOType2 OR JO.JointOwnerType = @JOType3 OR JO.JointOwnerType = @JOType4 OR JO.JointOwnerType = @JOType5 OR JO.JointOwnerType = @JOType6)
		ORDER BY JO.Sequence
		
		OPEN mycur
		FETCH NEXT FROM mycur
		INTO @TrackingNum, @Sequence, @JointOwnerType, @FullName, @FullAddress, @Address, @CityStateZip, @Phone, @WorkPhone, @CellPhone, @Relationship, @DOB, @SSN, @DLS, @DLN, @IDIssueDate, @IDExpirationDate, @AgeOfDelivery, @JOCHTag, @Title, @JointAccount, @Qualification1, @Qualification2, @Qualification3, @DepartmentName, @EmployerName, @JobTitle
		
		WHILE @@FETCH_STATUS = 0
		BEGIN
			DECLARE mycur2 CURSOR LOCAL FAST_FORWARD
			FOR
				SELECT SA.Suffix
				FROM NewMemberJointOwner JO
				LEFT OUTER JOIN NewMemberJointLink JL ON JL.TrackingNum = JO.TrackingNum AND JL.JointSequence = JO.Sequence
				LEFT OUTER JOIN NewMemberSubAccount SA ON JL.TrackingNum = SA.TrackingNum AND JL.SubAccountSequence = SA.Sequence
				WHERE JL.TrackingNum = @TrackingNum AND JO.Sequence = @Sequence AND (JO.JointOwnerType = @JOType1 OR JO.JointOwnerType = @JOType2 OR JO.JointOwnerType = @JOType3 OR JO.JointOwnerType = @JOType4 OR JO.JointOwnerType = @JOType5 OR JO.JointOwnerType = @JOType6)
				ORDER BY SA.Suffix
				
			OPEN mycur2
			FETCH NEXT FROM mycur2
			INTO @Suffix
			
			SET @sTemp = ''
			WHILE @@FETCH_STATUS = 0
			BEGIN
				IF @Suffix IS NOT NULL
				BEGIN
					SET @sTemp = @sTemp + CASE WHEN @sTemp <> '' THEN ', ' ELSE '' END
					SET @sTemp = @sTemp + RIGHT('0' + CAST(@Suffix AS VARCHAR(2)), 2)
				END
		
		
				FETCH NEXT FROM mycur2
				INTO @Suffix
			END
			CLOSE mycur2
			DEALLOCATE mycur2

			IF @SuffixListMatch = '@' OR @SuffixListMatch = @sTemp
			BEGIN
				INSERT @JO
				([TrackingNum], [Sequence], [JointOwnerType], [FullName], [FullAddress], [Address], [CityStateZip], [Phone], [WorkPhone], [CellPhone], [Relationship], [DOB], [SSN], [DriversLicenseState], [DriversLicenseNum], [IDIssueDate], [IDExpirationDate], [AgeOfDelivery], [JOCHTag], [Title], [JointAccount], [Qualification1], [Qualification2], [Qualification3], [DepartmentName], [EmployerName], [JobTitle], [Suffixes])
				VALUES
				(@TrackingNum, @Sequence, @JointOwnerType, @FullName, @FullAddress, @Address, @CityStateZip, @Phone, @WorkPhone, @CellPhone, @Relationship, @DOB, @SSN, @DLS, @DLN, @IDIssueDate, @IDExpirationDate, @AgeOfDelivery, @JOCHTag, @Title, @JointAccount, @Qualification1, @Qualification2, @Qualification3, @DepartmentName, @EmployerName, @JobTitle, @sTemp)
			END

			FETCH NEXT FROM mycur
			INTO @TrackingNum, @Sequence, @JointOwnerType, @FullName, @FullAddress, @Address, @CityStateZip, @Phone, @WorkPhone, @CellPhone, @Relationship, @DOB, @SSN, @DLS, @DLN, @IDIssueDate, @IDExpirationDate, @AgeOfDelivery, @JOCHTag, @Title, @JointAccount, @Qualification1, @Qualification2, @Qualification3, @DepartmentName, @EmployerName, @JobTitle
		END
		CLOSE mycur
		DEALLOCATE mycur
		
	RETURN
END









GO
/****** Object:  UserDefinedFunction [IMS].[fnSafe_GetJOTypes]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE FUNCTION [IMS].[fnSafe_GetJOTypes] (@TrackingNum INT, @JOType CHAR(3))  
RETURNS CHAR(300) AS  
BEGIN 
DECLARE @jos CHAR(100)
DECLARE @jos2 CHAR(300)
DECLARE curs2 CURSOR FOR
	SELECT  RTRIM(RTRIM(JO.FName) + ' ' + RTRIM(JO.MInitial)) + ' ' + JO.LName
	FROM NewMemberJointOwner AS JO
	WHERE JO.TrackingNum = @TrackingNum And JO.JointOwnerType = @JOType 
OPEN curs2
FETCH NEXT FROM curs2 INTO @jos
SET @jos2 = ''
WHILE @@FETCH_STATUS = 0
BEGIN
	SET @jos2 = RTRIM(@jos2) + ' ' + RTRIM(@jos)
	FETCH NEXT FROM curs2 INTO @jos
	IF @@FETCH_STATUS = 0
	BEGIN
		SET @jos2 = RTRIM(@jos2) + ',' 
	END
END
CLOSE curs2
DEALLOCATE curs2
RETURN @jos2
END
GO
/****** Object:  UserDefinedFunction [IMS].[fnSafe_GetProducts]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [IMS].[fnSafe_GetProducts] (@TrackingNum INT, @Col INT, @Filter CHAR(500))
RETURNS CHAR(1000) AS  
BEGIN
DECLARE @Elements INT
DECLARE @BegProduct INT
DECLARE @EndProduct INT
DECLARE @Count INT
DECLARE @Suffix CHAR(2)
DECLARE @Product CHAR(100)
DECLARE @Products CHAR(1000)
DECLARE @CRLF CHAR(2)

DECLARE curs2 CURSOR FOR
--	SELECT SA.Description + ' - Suffix: ' + RIGHT('0' + RTRIM(CONVERT(CHAR(2), SA.Suffix)), 2), RIGHT('0' + RTRIM(CONVERT(CHAR(2), SA.Suffix)), 2) AS Suffix
--	FROM NewMemberSubAccount AS SA
--	WHERE SA.TrackingNum = @TrackingNum AND SA.Created = 'Y' AND SA.ProductType NOT LIKE 'IRA%'
--	ORDER BY Suffix
	SELECT SA.Description + ' - Suffix: ' + RIGHT('0' + RTRIM(CONVERT(CHAR(2), SA.Suffix)), 2), RIGHT('0' + RTRIM(CONVERT(CHAR(2), SA.Suffix)), 2) AS Suffix
	FROM IMS.NewMemberSubAccount AS SA
	WHERE SA.TrackingNum = @TrackingNum AND SA.Created = 'Y' AND SA.ProductType NOT LIKE 'IRA%'
	UNION
	SELECT PC.Description, PC.TypeCode AS Suffix
	FROM IMS.NewMemberPlasticCard AS PC
	WHERE PC.TrackingNum = @TrackingNum AND PC.Created = 'Y' AND PC.TypeCode IN ('C', 'D')
	ORDER BY Suffix
OPEN curs2
FETCH NEXT FROM curs2 INTO @Product, @Suffix

-- Set Number of Products to display in each column in Elements.  Currently set to 4 per SAFE (Eventum #4551)
SET @Elements = 4
SET @BegProduct = (@Col - 1) * @Elements + 1
SET @EndProduct = @BegProduct + @Elements
SET @Count = 0
SET @Products = ''
SET @CRLF = CHAR(13) + CHAR(10)
	WHILE @@FETCH_STATUS = 0
	BEGIN
		IF @Filter = '@' OR CHARINDEX(@Suffix, @Filter) > 0
		BEGIN
			SET @Count = @Count + 1
	
			IF @Count >= @BegProduct AND @Count < @EndProduct
			BEGIN
				SET @Products = RTRIM(@Products) + RTRIM(@Product)
				IF @Count < @EndProduct
				BEGIN
					SET @Products = RTRIM(@Products) + @CRLF
				END
			END
		END

		FETCH NEXT FROM curs2 INTO @Product, @Suffix
	END
CLOSE curs2
DEALLOCATE curs2
-- This makes the font size of the last column the same as the first ones if those first ones are completely filled up.
IF @Col > 1
BEGIN
	WHILE @Count < @EndProduct - 2
	BEGIN
		SET @Count = @Count + 1
		SET @Products = RTRIM(@Products) + @CRLF
	END
END
RETURN RTRIM(REPLACE(@Products, '&reg;', '®'))
END


GO
/****** Object:  UserDefinedFunction [IMS].[fnSafe_GetSABEs]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE FUNCTION [IMS].[fnSafe_GetSABEs] (@TrackingNum INT, @SASeq INT)  
RETURNS char(1000) AS  
BEGIN 
DECLARE @bes CHAR(100)
DECLARE @bes2 CHAR(300)
DECLARE curs2 CURSOR FOR
	SELECT  RTRIM(RTRIM(BE.FName) + ' ' + RTRIM(BE.MInitial)) + ' ' + BE.LName
	FROM IMS.NewMemberBeneficiaryLink AS BL
	LEFT JOIN IMS.NewMemberBeneficiary BE ON BE.TrackingNum = BL.TrackingNum AND BE.Sequence = BL.BeneficiarySequence
	WHERE BL.TrackingNum = @TrackingNum AND BL.SubAccountSequence = @SASeq AND BE.BType = 'IB'
OPEN curs2
FETCH NEXT FROM curs2 INTO @bes
SET @bes2 = ''
WHILE @@FETCH_STATUS = 0
BEGIN
	SET @bes2 = RTRIM(@bes2) + RTRIM(@bes)
	FETCH NEXT FROM curs2 INTO @bes
	IF @@FETCH_STATUS = 0
	BEGIN
		SET @bes2 = RTRIM(@bes2) + ','
	END
END
CLOSE curs2
DEALLOCATE curs2
RETURN UPPER(REPLACE(@bes2, ',', ', '))
END
GO
/****** Object:  UserDefinedFunction [IMS].[fnSafe_GetSAJOs]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE FUNCTION [IMS].[fnSafe_GetSAJOs] (@TrackingNum INT, @SASeq INT)  
RETURNS char(1000) AS  
BEGIN 
DECLARE @jos CHAR(100)
DECLARE @jotag CHAR(20)
DECLARE @jotagbe CHAR(1)
DECLARE @jos2 CHAR(300)
DECLARE curs2 CURSOR FOR
	SELECT  RTRIM(RTRIM(JO.FName) + ' ' + RTRIM(JO.MInitial)) + ' ' + JO.LName, JO.JOCHTag, JO.TagBeginEnd
	FROM IMS.NewMemberJointLink AS JL
	LEFT JOIN IMS.NewMemberJointOwner JO ON JO.TrackingNum = JL.TrackingNum AND JO.Sequence = JL.JointSequence
	WHERE JL.TrackingNum = @TrackingNum And JL.SubAccountSequence = @SASeq AND JO.CreateHost <> 'N' AND JO.JointOwnerType IN ('AE', 'AS', 'JM', 'JP', 'JT', 'MM', 'TE', 'TR', 'TT', 'MI', 'CB', 'EX')
OPEN curs2
FETCH NEXT FROM curs2 INTO @jos, @jotag, @jotagbe
SET @jos2 = ''
WHILE @@FETCH_STATUS = 0
BEGIN
	IF UPPER(@jotagbe) = 'B'
	BEGIN
		SET @jos = RTRIM(@jotag) + ' ' + RTRIM(@jos)
	END
	IF UPPER(@jotagbe) = 'E'
	BEGIN
		SET @jos = RTRIM(@jos) + ' ' + RTRIM(@jotag)
	END

	SET @jos2 = RTRIM(@jos2) + RTRIM(@jos)
	FETCH NEXT FROM curs2 INTO @jos, @jotag, @jotagbe
	IF @@FETCH_STATUS = 0
	BEGIN
		SET @jos2 = RTRIM(@jos2) + ','
	END
END
CLOSE curs2
DEALLOCATE curs2
RETURN UPPER(REPLACE(@jos2, ',', ', '))
END





GO
/****** Object:  UserDefinedFunction [IMS].[fnSafe_GetSAJOSeq]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [IMS].[fnSafe_GetSAJOSeq] (@TrackingNum INT, @BeneLimit INT, @jotype1 CHAR(2), @jotype2 CHAR(2), @jotype3 CHAR(2), @jotype4 CHAR(2), @jotype5 CHAR(2), @jotype6 CHAR(2), @betype1 CHAR(2), @betype2 CHAR(2), @betype3 CHAR(2))
RETURNS @JO TABLE
   (
    [TrackingNum]	INT,
    [Sequence]		INT,
    [Suffix]		CHAR(2),
    [AllSequences]	CHAR(100),
    [JOSequences]	CHAR(100),
    [BESequences]	CHAR(100)
   )
AS
BEGIN
-- Used to generate a Joint Owner Sequence list by Suffix for S333N
DECLARE @bTemp VARCHAR(100)
DECLARE @jTemp VARCHAR(100)
DECLARE @sTemp VARCHAR(100)
DECLARE @Sequence INT
DECLARE @Suffix CHAR(2)
DECLARE @JOSequence CHAR(2)
DECLARE @jcount INT
DECLARE @bcount INT

		DECLARE mycur CURSOR LOCAL FAST_FORWARD
		FOR SELECT	  SA.TrackingNum
				, SA.Sequence AS [Sequence]
				, SA.Suffix AS [Suffix]
		FROM NewMemberSubAccount AS SA
		WHERE SA.TrackingNum = @TrackingNum
		ORDER BY SA.Suffix
		
		OPEN mycur
		FETCH NEXT FROM mycur
		INTO @TrackingNum, @Sequence, @Suffix
		
		WHILE @@FETCH_STATUS = 0
		BEGIN

			DECLARE mycur2 CURSOR LOCAL FAST_FORWARD
			FOR
				SELECT JL.JointSequence
				FROM NewMemberSubAccount SA
				LEFT JOIN NewMemberJointLink JL ON JL.TrackingNum = SA.TrackingNum AND JL.SubAccountSequence = SA.Sequence
				LEFT JOIN NewMemberJointOwner JO ON JO.TrackingNum = SA.TrackingNum AND JO.Sequence = JL.JointSequence
				WHERE SA.TrackingNum = @TrackingNum AND SA.Suffix = @Suffix AND JO.CreateHost <> 'N' AND (JO.JointOwnerType = @betype1 OR JO.JointOwnerType = @betype2 OR JO.JointOwnerType = @betype3)
				ORDER BY JO.Sequence
				
			OPEN mycur2
			FETCH NEXT FROM mycur2
			INTO @JOSequence
			
			SET @bTemp = ''
			SET @bcount = 0
			WHILE @@FETCH_STATUS = 0
			BEGIN
				IF @JOSequence IS NOT NULL
				BEGIN
					SET @bcount = @bcount + 1
					SET @bTemp = @bTemp + CASE WHEN @bTemp <> '' THEN ', ' ELSE '' END
					SET @bTemp = @bTemp + RTRIM(CAST(@JOSequence AS VARCHAR(2)))
--	If there are more that two beneficiaries, then do not add them to the list (for S333N)
					IF @bcount > @BeneLimit
					BEGIN
						SET @bTemp = ''
					END
				END

				FETCH NEXT FROM mycur2
				INTO @JOSequence
			END
			CLOSE mycur2
			DEALLOCATE mycur2

			DECLARE mycur2 CURSOR LOCAL FAST_FORWARD
			FOR
				SELECT JL.JointSequence
				FROM NewMemberSubAccount SA
				LEFT JOIN NewMemberJointLink JL ON JL.TrackingNum = SA.TrackingNum AND JL.SubAccountSequence = SA.Sequence
				LEFT JOIN NewMemberJointOwner JO ON JO.TrackingNum = SA.TrackingNum AND JO.Sequence = JL.JointSequence
				WHERE SA.TrackingNum = @TrackingNum AND SA.Suffix = @Suffix AND JO.CreateHost <> 'N' AND (JO.JointOwnerType = @jotype1 OR JO.JointOwnerType = @jotype2 OR JO.JointOwnerType = @jotype3 OR JO.JointOwnerType = @jotype4 OR JO.JointOwnerType = @jotype5 OR JO.JointOwnerType = @jotype6)
				ORDER BY JO.Sequence
				
			OPEN mycur2
			FETCH NEXT FROM mycur2
			INTO @JOSequence
			
			SET @jTemp = ''
			SET @jcount = 0
			WHILE @@FETCH_STATUS = 0
			BEGIN
				IF @JOSequence IS NOT NULL
				BEGIN
					IF @jcount = 999
					BEGIN
						SET @sTemp = @jTemp
						IF @bTemp <> ''
						BEGIN
							SET @sTemp = @sTemp + ', ' + @bTemp
						END
						INSERT @JO ([TrackingNum], [Sequence], [Suffix], [AllSequences], [JOSequences], [BESequences]) VALUES (@TrackingNum, @Sequence, @Suffix, @sTemp, @jTemp, @bTemp)
						SET @jcount = 0
						SET @jTemp = ''
						IF @bTemp <> ''
						BEGIN
							SET @bTemp = ''
						END
					END
					SET @jcount = @jcount + 1
					SET @jTemp = @jTemp + CASE WHEN @jTemp <> '' THEN ', ' ELSE '' END
					SET @jTemp = @jTemp + RTRIM(CAST(@JOSequence AS VARCHAR(2)))
				END

				FETCH NEXT FROM mycur2
				INTO @JOSequence
			END
			CLOSE mycur2
			DEALLOCATE mycur2

			SET @sTemp = @jTemp
			IF @bTemp <> ''
			BEGIN
				IF @sTemp <> ''
				BEGIN
					SET @sTemp = @sTemp + ', '
				END
				SET @sTemp = @sTemp + @bTemp
			END
			INSERT @JO ([TrackingNum], [Sequence], [Suffix], [AllSequences], [JOSequences], [BESequences]) VALUES (@TrackingNum, @Sequence, @Suffix, @sTemp, @jTemp, @bTemp)
			SET @bTemp = ''

			FETCH NEXT FROM mycur
			INTO @TrackingNum, @Sequence, @Suffix
		END
		CLOSE mycur
		DEALLOCATE mycur
		
	RETURN
END


GO
/****** Object:  UserDefinedFunction [IMS].[fnSafe_GetSuffixList]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [IMS].[fnSafe_GetSuffixList] (@TrackingNum INT) 
RETURNS @Suffixes TABLE
   (
    [SASequence]	INT identity,
    [TrackingNum]	INT,
    [Suffixes]		CHAR(100)
   )
AS
BEGIN
DECLARE @sTemp varchar(1000)
DECLARE @Suffix int


	DECLARE mycur2 CURSOR
	FOR
		SELECT Suffix
		FROM NewMemberSubAccount SA
		WHERE SA.TrackingNum = @TrackingNum ORDER BY Suffix
		
	OPEN mycur2
	FETCH NEXT FROM mycur2
	INTO @Suffix
	
	SET @sTemp = ''
	WHILE @@FETCH_STATUS = 0
	BEGIN
		IF @Suffix IS NOT NULL
		BEGIN
			SET @sTemp = @sTemp + CASE WHEN @sTemp <> '' THEN ', ' ELSE '' END
			SET @sTemp = @sTemp + RIGHT('0' + CAST(@Suffix AS VARCHAR(2)), 2)
		END


		FETCH NEXT FROM mycur2
		INTO @Suffix
	END
	CLOSE mycur2
	DEALLOCATE mycur2

	INSERT @Suffixes ([TrackingNum], [Suffixes]) VALUES (@TrackingNum, @sTemp)

	RETURN
END

GO
/****** Object:  UserDefinedFunction [IMS].[fnSafe_GetUSAePayPaymentStatus]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE FUNCTION [IMS].[fnSafe_GetUSAePayPaymentStatus] 
(
	-- Add the parameters for the function here
	@PaymentID int
)
RETURNS varchar(25)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result varchar(25)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = PaymentStatus FROM IMS.USAePayPaymentStatus where PaymentId = @PaymentID

	-- Return the result of the function
	RETURN @Result
END

GO
/****** Object:  UserDefinedFunction [IMS].[fnSafe_Split]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [IMS].[fnSafe_Split] (@Expression VARCHAR(200), @Delimiter VARCHAR(200), @INDEX INT)
RETURNS VARCHAR(200) AS
BEGIN
    DECLARE @RETURN  VARCHAR(200)
    DECLARE @Pos     INT
    DECLARE @PrevPos INT
    DECLARE @I       INT
    
    -- SELECT dbo.fnSplit('4.55.108.2','.', 2)
    SET @Expression = @Expression + @Delimiter
    IF @Expression IS NULL OR @Delimiter IS NULL OR LEN(@Delimiter) = 0 OR @INDEX < 1
        SET @RETURN = NULL
    ELSE IF @INDEX = 1 BEGIN
        SET @Pos = CHARINDEX(@Delimiter, @Expression, 1)
        IF @Pos > 0 SET @RETURN = LEFT(@Expression, @Pos - 1)
    END ELSE BEGIN
        SET @Pos = 0
        SET @I = 0
        
        WHILE (@Pos > 0 AND @I < @INDEX) OR @I = 0 BEGIN
            SET @PrevPos = @Pos
            SET @Pos = CHARINDEX(@Delimiter, @Expression, @Pos + LEN(@Delimiter))
            
            SET @I = @I + 1
        END
        
        IF @Pos = 0 AND @I = @INDEX
            SET @RETURN = SUBSTRING(@Expression, @PrevPos + LEN(@Delimiter), LEN(@Expression))
        ELSE IF @Pos = 0 AND @I <> @INDEX
            SET @RETURN = NULL
        ELSE
            SET @RETURN = SUBSTRING(@Expression, @PrevPos + LEN(@Delimiter), @Pos - @PrevPos - LEN(@Delimiter))
    END
    
    RETURN RTRIM(LTRIM(@RETURN))
END



GO
/****** Object:  UserDefinedFunction [IMS].[fnSafe_TitleCase]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE FUNCTION [IMS].[fnSafe_TitleCase] (@x VARCHAR(200))
RETURNS VARCHAR(200) AS  
BEGIN
 	IF @x <> ''
	BEGIN
	 	DECLARE @y INT
		SET @y = 1
	
		SELECT @x = UPPER(SUBSTRING(@x,1,1))+LOWER(SUBSTRING(@x,2,LEN(@x)-1))+' '
	
		WHILE @y < LEN(@x)
		BEGIN
			SELECT @y=CHARINDEX(' ',@x,@y)
			SELECT @x=SUBSTRING(@x,1,@y)+UPPER(SUBSTRING(@x,@y+1,1))+SUBSTRING(@x,@y+2,LEN(@x)-@y+1)   
			SELECT @y=@y+1
		END
	END
	RETURN @x
END

GO
/****** Object:  UserDefinedFunction [IMS].[fnSCFed_GetJOType]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [IMS].[fnSCFed_GetJOType] (@TrackingNum int, @JOType1 char(2), @JOType2 char(2), @JOType3 char(2), @JOType4 char(2)) 
RETURNS @JO TABLE
   (
	[JointSequence] INT identity,
	[TrackingNum] INT,
	[Sequence] INT,
	[FullName] CHAR(200),
	[Fulladdress] CHAR(200),
	[Address] CHAR(200),
	[City] CHAR(30),
	[State] CHAR(2),
	[Zip] CHAR(10),
	[CityStateZip] CHAR(200),
	[Email] CHAR(120),
	[Phone] CHAR(8),
	[HPhoneFull] CHAR(12),
	[WPhoneFull] CHAR(12),
	[CPhoneFull] CHAR(12),
	[Relationship] CHAR(50),
	[DOB] DATETIME,
	[SSN] CHAR(9),
	[DriversLicenseState] CHAR(2),
	[DriversLicenseNum] CHAR(30),
	[IDIssueDate] DATETIME,
	[IDExpirationDate] DATETIME,
	[EmployerName] CHAR(30),
	[JobTitle] CHAR(45),
	[Suffixes] varchar(100),
	[Gender] CHAR(1)
   )
AS
BEGIN
DECLARE @sTemp VARCHAR(1000)
DECLARE @Sequence INT
DECLARE @Suffix BigInt
DECLARE @FullName VARCHAR(200)
DECLARE @FullAddress VARCHAR(200)
DECLARE @Address VARCHAR(200)
DECLARE @City VARCHAR(30)
DECLARE @State VARCHAR(2)
DECLARE @Zip VARCHAR(10)
DECLARE @CityStateZip VARCHAR(200)
DECLARE @Email VARCHAR(120)
DECLARE @Phone VARCHAR(8)
DECLARE @HPhoneFull VARCHAR(12)
DECLARE @WPhoneFull VARCHAR(12)
DECLARE @CPhoneFull VARCHAR(12)
DECLARE @Relationship VARCHAR(50)
DECLARE @DOB DATETIME
DECLARE @SSN VARCHAR(9)
DECLARE @DLS VARCHAR(2)
DECLARE @DLN VARCHAR(30)
DECLARE @IDIssueDate VARCHAR(8)
DECLARE @IDExpirationDate DATETIME
DECLARE @EmployerName VARCHAR(30)
DECLARE @JobTitle VARCHAR(45)
DECLARE @Gender CHAR(1)

	
		DECLARE mycur CURSOR
		FOR SELECT	  JO.TrackingNum
				, JO.Sequence AS [Sequence]
				, RTRIM(RTRIM(JO.FName) + ' ' + JO.MInitial) + ' ' + RTRIM(JO.LName) AS [FullName]
				, RTRIM(JO.Address1 + CASE JO.Address2 WHEN '' THEN ''ELSE', ' END + JO.Address2 + CASE JO.Address3 WHEN '' THEN ''ELSE', ' END + JO.Address3) + ', ' + JO.City + ', ' + JO.State + ' ' + CASE LEN(JO.Zip) WHEN 9 THEN LEFT(JO.Zip, 5) + '-' + RIGHT(JO.Zip, 4) ELSE JO.Zip END AS [FullAddress]
				, JO.Address1 AS [Address]
				, RTRIM(JO.City) AS [City]
				, JO.State AS [State]
				, CASE LEN(JO.Zip) WHEN 9 THEN LEFT(JO.Zip, 5) + '-' + RIGHT(JO.Zip, 4) ELSE JO.Zip END AS [Zip]
				, RTRIM(JO.City) + ', ' + JO.State + ' ' + CASE LEN(JO.Zip) WHEN 9 THEN LEFT(JO.Zip, 5) + '-' + Right(JO.Zip, 4) ELSE JO.Zip END AS [CityStateZip]
				, RTRIM(JO.Email1) AS Email
				, JO.AreaCode + JO.Phone AS Phone
				, JO.AreaCode + '-' + LEFT(JO.Phone, 3) + '-' + RIGHT(RTRIM(JO.Phone), 4) AS HPhoneFull
				, JO.WorkAC + '-' + LEFT(JO.WorkPhone, 3) + '-' + RIGHT(RTRIM(JO.WorkPhone), 4) AS WPhoneFull
				, JO.CellAC + '-' + LEFT(JO.CellPhone, 3) + '-' + RIGHT(RTRIM(JO.CellPhone), 4) AS CPhoneFull
				, JO.RelToPrimary AS [Relationship]
				, CONVERT(char(10), JO.DOB, 101) AS [DOB]
				, JO.SSN AS [SSN]
				, JO.DriversLicenseState AS [DriversLicenseState]
				, JO.DriversLicenseNum AS [DriversLicenseNum]
				, JO.IDIssueDate AS [IDIssueDate]
				, JO.IDExpirationDate AS [IDExpirationDate]
				, JO.EmployerName AS [EmployerName]
				, JO.JobTitle AS [JobTitle]
				, JO.Gender AS [Gender]
		FROM NewMemberJointOwner AS JO
		WHERE JO.TrackingNum = @TrackingNum AND (JO.JointOwnerType = @JOType1 OR JO.JointOwnerType = @JOType2 OR JO.JointOwnerType = @JOType3 OR JO.JointOwnerType = @JOType4)
		ORDER BY JO.Sequence
		
		OPEN mycur
		FETCH NEXT FROM mycur
		INTO @TrackingNum, @Sequence, @FullName, @FullAddress, @Address, @City, @State, @Zip, @CityStateZip, @EMail, @Phone, @HPhoneFull, @WPhoneFull, @CPhoneFull, @Relationship, @DOB, @SSN, @DLS, @DLN, @IDIssueDate, @IDExpirationDate, @EmployerName, @JobTitle, @Gender
		
		WHILE @@FETCH_STATUS = 0
		BEGIN
			DECLARE mycur2 CURSOR
			FOR
				SELECT Suffix
				FROM NewMemberJointOwner JO
				LEFT OUTER JOIN NewMemberJointLink JL ON JL.TrackingNum = JO.TrackingNum AND JL.JointSequence = JO.Sequence
				LEFT OUTER JOIN NewMemberSubAccount SA ON JL.TrackingNum = SA.TrackingNum AND JL.SubAccountSequence = SA.Sequence
				WHERE JL.TrackingNum = @TrackingNum AND (JL.Created = 'Y' OR JL.Created = 'H') AND JO.Sequence = @Sequence AND (JO.JointOwnerType = @JOType1 OR JO.JointOwnerType = @JOType2 OR JO.JointOwnerType = @JOType3 OR JO.JointOwnerType = @JOType4) ORDER BY Suffix
				
			OPEN mycur2
			FETCH NEXT FROM mycur2
			INTO @Suffix
			
			SET @sTemp = ''
			WHILE @@FETCH_STATUS = 0
			BEGIN
				IF @Suffix IS NOT NULL
				BEGIN
					SET @sTemp = @sTemp + CASE WHEN @sTemp <> '' THEN ', ' ELSE '' END
					SET @sTemp = @sTemp + RIGHT('0' + CAST(@Suffix AS varchar(100)), 2)
				END
		
		
				FETCH NEXT FROM mycur2
				INTO @Suffix
			END
			CLOSE mycur2
			DEALLOCATE mycur2
		
			INSERT @JO ([TrackingNum], [Sequence], [FullName], [FullAddress], [Address], [City], [State], [Zip], [CityStateZip], [Email], [Phone], [HPhoneFull], [WPhoneFull], [CPhoneFull], [Relationship], [DOB], [SSN], [DriversLicenseState], [DriversLicenseNum], [IDIssueDate], [IDExpirationDate], [EmployerName], [JobTitle], [Gender], [Suffixes]) VALUES (@TrackingNum, @Sequence, @FullName, @FullAddress, @Address, @City, @State, @Zip, @CityStateZip, @Email, @Phone, @HPhoneFull, @WPhoneFull, @CPhoneFull, @Relationship, @DOB, @SSN, @DLS, @DLN, @IDIssueDate, @IDExpirationDate, @EmployerName, @JobTitle, @Gender, @sTemp)
		
			FETCH NEXT FROM mycur
			INTO @TrackingNum, @Sequence, @FullName, @FullAddress, @Address, @City, @State, @Zip, @CityStateZip, @Email, @Phone, @HPhoneFull, @WPhoneFull, @CPhoneFull, @Relationship, @DOB, @SSN, @DLS, @DLN, @IDIssueDate, @IDExpirationDate, @EmployerName, @JobTitle, @Gender
		END
		CLOSE mycur
		DEALLOCATE mycur
		
--		SELECT * FROM #Temp ORDER BY [Sequence]
	RETURN
END




GO
/****** Object:  UserDefinedFunction [IMS].[fnSCFed_GetSuffixList]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [IMS].[fnSCFed_GetSuffixList] (@TrackingNum int) 
RETURNS @Suffixes TABLE
   (
    [SASequence]	int identity,
    [TrackingNum]	int,
    [Suffixes]		char(100)
   )
AS
BEGIN
DECLARE @sTemp varchar(1000)
DECLARE @Suffix int


	DECLARE mycur2 CURSOR
	FOR
		SELECT Suffix
		FROM NewMemberSubAccount SA
		WHERE SA.TrackingNum = @TrackingNum ORDER BY Suffix
		
	OPEN mycur2
	FETCH NEXT FROM mycur2
	INTO @Suffix
	
	SET @sTemp = ''
	WHILE @@FETCH_STATUS = 0
	BEGIN
		IF @Suffix IS NOT NULL
		BEGIN
			SET @sTemp = @sTemp + CASE WHEN @sTemp <> '' THEN ', ' ELSE '' END
			SET @sTemp = @sTemp + RIGHT('0' + CAST(@Suffix AS varchar(2)), 2)
		END


		FETCH NEXT FROM mycur2
		INTO @Suffix
	END
	CLOSE mycur2
	DEALLOCATE mycur2

	INSERT @Suffixes ([TrackingNum], [Suffixes]) VALUES (@TrackingNum, @sTemp)

--		SELECT * FROM #Temp ORDER BY [Sequence]

	RETURN
END
GO
/****** Object:  UserDefinedFunction [IMS].[fnSCFed_GetUSAePayPaymentStatus]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE FUNCTION [IMS].[fnSCFed_GetUSAePayPaymentStatus] 
(
	-- Add the parameters for the function here
	@PaymentID int
)
RETURNS varchar(25)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result varchar(25)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = PaymentStatus FROM IMS.USAePayPaymentStatus where PaymentId = @PaymentID

	-- Return the result of the function
	RETURN @Result
END

GO
/****** Object:  UserDefinedFunction [IMS].[fnSSCU_GetFundingAmount]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [IMS].[fnSSCU_GetFundingAmount] (@TrackingNum INT)  
RETURNS VARCHAR(20) AS  
BEGIN 
	DECLARE @Amount VARCHAR(20)
	SET @Amount = 0

	SET @Amount = @Amount +
	ISNULL(
		(SELECT SUM(Amount)
		FROM NMRFundingTransaction AS FT
		LEFT JOIN NMRFundingBank AS FB ON FB.ID = FT.FundingBankID
		WHERE FT.TrackingNum = @TrackingNum AND FT.FundingType = 'B' AND FB.VerificationStatus <> 'X' AND FB.VerificationStatus <> 'E' GROUP BY FT.TrackingNum)
	, 0)

	SET @Amount = @Amount +
	ISNULL(
		(SELECT SUM(Amount)
		FROM NMRFundingTransaction AS FT
		LEFT JOIN NMRFundingCard AS FC ON FC.ID = FT.FundingCardID
		WHERE FT.TrackingNum = @TrackingNum AND FT.FundingType = 'C' AND FC.AuthenticationCode NOT IN ('DECLINED', 'FAILED', 'FRAUD', 'ERROR', '') GROUP BY FT.TrackingNum)
	, 0)

	RETURN @Amount
END
GO
/****** Object:  UserDefinedFunction [IMS].[fnSSCU_GetJOType]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [IMS].[fnSSCU_GetJOType] (@TrackingNum int, @JOType1 char(2), @JOType2 char(2), @JOType3 char(2), @JOType4 char(2)) 
RETURNS @JO TABLE
   (
	[JointSequence] INT identity,
	[TrackingNum] INT,
	[Sequence] INT,
	[JointOwnerType] CHAR(2),
	[FullName] CHAR(200),
	[Fulladdress] CHAR(200),
	[Address] CHAR(200),
	[City] CHAR(30),
	[State] CHAR(2),
	[Zip] CHAR(10),
	[CityStateZip] CHAR(200),
	[Email] CHAR(120),
	[Phone] CHAR(8),
	[HPhoneFull] CHAR(12),
	[WPhoneFull] CHAR(12),
	[CPhoneFull] CHAR(12),
	[Relationship] CHAR(50),
	[DOB] CHAR(10),
	[SSN] CHAR(9),
	[DriversLicenseState] CHAR(2),
	[DriversLicenseNum] CHAR(30),
	[IDIssueDate] CHAR(10),
	[IDExpirationDate] CHAR(10),
	[EmployerName] CHAR(30),
	[JobTitle] CHAR(45),
	[Suffixes] varchar(100),
	[Gender] CHAR(1)
   )
AS
BEGIN
DECLARE @sTemp VARCHAR(1000)
DECLARE @Sequence INT
DECLARE @JointOwnerType VARCHAR(2)
DECLARE @Suffix BigInt
DECLARE @FullName VARCHAR(200)
DECLARE @FullAddress VARCHAR(200)
DECLARE @Address VARCHAR(200)
DECLARE @City VARCHAR(30)
DECLARE @State VARCHAR(2)
DECLARE @Zip VARCHAR(10)
DECLARE @CityStateZip VARCHAR(200)
DECLARE @Email VARCHAR(120)
DECLARE @Phone VARCHAR(8)
DECLARE @HPhoneFull VARCHAR(12)
DECLARE @WPhoneFull VARCHAR(12)
DECLARE @CPhoneFull VARCHAR(12)
DECLARE @Relationship VARCHAR(50)
DECLARE @DOB VARCHAR(10)
DECLARE @SSN VARCHAR(9)
DECLARE @DLS VARCHAR(2)
DECLARE @DLN VARCHAR(30)
DECLARE @IDIssueDate VARCHAR(10)
DECLARE @IDExpirationDate VARCHAR(10)
DECLARE @EmployerName VARCHAR(30)
DECLARE @JobTitle VARCHAR(45)
DECLARE @Gender CHAR(1)

	
		DECLARE mycur CURSOR
		FOR SELECT	  JO.TrackingNum
				, JO.Sequence AS [Sequence]
				, JO.JointOwnerType
				, RTRIM(RTRIM(JO.FName) + ' ' + JO.MInitial) + ' ' + RTRIM(JO.LName) AS [FullName]
				, RTRIM(RTRIM(JO.Address1) + CASE JO.Address2 WHEN '' THEN ''ELSE', ' END + RTRIM(JO.Address2) + CASE JO.Address3 WHEN '' THEN ''ELSE', ' END + RTRIM(JO.Address3)) + ', ' + RTRIM(JO.City) + ', ' + JO.State + ' ' + CASE LEN(JO.Zip) WHEN 9 THEN LEFT(JO.Zip, 5) + '-' + RIGHT(JO.Zip, 4) ELSE JO.Zip END AS [FullAddress]
				, JO.Address1 AS [Address]
				, RTRIM(JO.City) AS [City]
				, JO.State AS [State]
				, CASE LEN(JO.Zip) WHEN 9 THEN LEFT(JO.Zip, 5) + '-' + RIGHT(JO.Zip, 4) ELSE JO.Zip END AS [Zip]
				, RTRIM(JO.City) + ', ' + JO.State + ' ' + CASE LEN(JO.Zip) WHEN 9 THEN LEFT(JO.Zip, 5) + '-' + Right(JO.Zip, 4) ELSE JO.Zip END AS [CityStateZip]
				, RTRIM(JO.Email1) AS Email
				, JO.AreaCode + JO.Phone AS Phone
				, JO.AreaCode + '-' + LEFT(JO.Phone, 3) + '-' + RIGHT(RTRIM(JO.Phone), 4) AS HPhoneFull
				, JO.WorkAC + '-' + LEFT(JO.WorkPhone, 3) + '-' + RIGHT(RTRIM(JO.WorkPhone), 4) AS WPhoneFull
				, JO.CellAC + '-' + LEFT(JO.CellPhone, 3) + '-' + RIGHT(RTRIM(JO.CellPhone), 4) AS CPhoneFull
				, JO.RelToPrimary AS [Relationship]
				, CONVERT(CHAR(10), JO.DOB, 101) AS [DOB]
				, JO.SSN AS [SSN]
				, JO.DriversLicenseState AS [DriversLicenseState]
				, JO.DriversLicenseNum AS [DriversLicenseNum]
				, CONVERT(CHAR(10), JO.IDIssueDate, 101) AS [IDIssueDate]
				, CONVERT(CHAR(10), JO.IDExpirationDate, 101) AS [IDExpirationDate]
				, JO.EmployerName AS [EmployerName]
				, JO.JobTitle AS [JobTitle]
				, JO.Gender AS [Gender]
		FROM NewMemberJointOwner AS JO
		WHERE JO.TrackingNum = @TrackingNum AND (JO.JointOwnerType = @JOType1 OR JO.JointOwnerType = @JOType2 OR JO.JointOwnerType = @JOType3 OR JO.JointOwnerType = @JOType4)
		ORDER BY JO.Sequence
		
		OPEN mycur
		FETCH NEXT FROM mycur
		INTO @TrackingNum, @Sequence, @JointOwnerType, @FullName, @FullAddress, @Address, @City, @State, @Zip, @CityStateZip, @EMail, @Phone, @HPhoneFull, @WPhoneFull, @CPhoneFull, @Relationship, @DOB, @SSN, @DLS, @DLN, @IDIssueDate, @IDExpirationDate, @EmployerName, @JobTitle, @Gender
		
		WHILE @@FETCH_STATUS = 0
		BEGIN
			DECLARE mycur2 CURSOR
			FOR
				SELECT Suffix
				FROM NewMemberJointOwner JO
				LEFT OUTER JOIN NewMemberJointLink JL ON JL.TrackingNum = JO.TrackingNum AND JL.JointSequence = JO.Sequence
				LEFT OUTER JOIN NewMemberSubAccount SA ON JL.TrackingNum = SA.TrackingNum AND JL.SubAccountSequence = SA.Sequence
				WHERE JL.TrackingNum = @TrackingNum AND (JL.Created = 'Y' OR JL.Created = 'H') AND JO.Sequence = @Sequence AND (JO.JointOwnerType = @JOType1 OR JO.JointOwnerType = @JOType2 OR JO.JointOwnerType = @JOType3 OR JO.JointOwnerType = @JOType4) ORDER BY Suffix
				
			OPEN mycur2
			FETCH NEXT FROM mycur2
			INTO @Suffix
			
			SET @sTemp = ''
			WHILE @@FETCH_STATUS = 0
			BEGIN
				IF @Suffix IS NOT NULL
				BEGIN
					SET @sTemp = @sTemp + CASE WHEN @sTemp <> '' THEN ', ' ELSE '' END
					SET @sTemp = @sTemp + RIGHT('0' + CAST(@Suffix AS varchar(100)), 2)
				END
		
		
				FETCH NEXT FROM mycur2
				INTO @Suffix
			END
			CLOSE mycur2
			DEALLOCATE mycur2
		
			INSERT @JO ([TrackingNum], [Sequence], [JointOwnerType], [FullName], [FullAddress], [Address], [City], [State], [Zip], [CityStateZip], [Email], [Phone], [HPhoneFull], [WPhoneFull], [CPhoneFull], [Relationship], [DOB], [SSN], [DriversLicenseState], [DriversLicenseNum], [IDIssueDate], [IDExpirationDate], [EmployerName], [JobTitle], [Gender], [Suffixes]) VALUES (@TrackingNum, @Sequence, @JointOwnerType, @FullName, @FullAddress, @Address, @City, @State, @Zip, @CityStateZip, @Email, @Phone, @HPhoneFull, @WPhoneFull, @CPhoneFull, @Relationship, @DOB, @SSN, @DLS, @DLN, @IDIssueDate, @IDExpirationDate, @EmployerName, @JobTitle, @Gender, @sTemp)
		
			FETCH NEXT FROM mycur
			INTO @TrackingNum, @Sequence, @JointOwnerType, @FullName, @FullAddress, @Address, @City, @State, @Zip, @CityStateZip, @Email, @Phone, @HPhoneFull, @WPhoneFull, @CPhoneFull, @Relationship, @DOB, @SSN, @DLS, @DLN, @IDIssueDate, @IDExpirationDate, @EmployerName, @JobTitle, @Gender
		END
		CLOSE mycur
		DEALLOCATE mycur
		
--		SELECT * FROM #Temp ORDER BY [Sequence]
	RETURN
END




GO
/****** Object:  UserDefinedFunction [IMS].[fnSSCU_GetQuestion]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO


CREATE FUNCTION [IMS].[fnSSCU_GetQuestion] (@TrackingNum INT, @UniqueID VARCHAR(50))  
RETURNS VARCHAR(200) AS  
BEGIN 

DECLARE @Response VARCHAR(200)
SET @Response = ''

DECLARE curs2 CURSOR FOR
       SELECT Response FROM NewMemberQuestion WHERE TrackingNum = @TrackingNum AND UniqueID = @UniqueID 

OPEN curs2
FETCH NEXT FROM curs2 INTO @Response

CLOSE curs2
DEALLOCATE curs2

RETURN RTRIM(@Response)
END
GO
/****** Object:  UserDefinedFunction [IMS].[fnSSCU_GetSAProduct]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [IMS].[fnSSCU_GetSAProduct] (@TrackingNum INT)
RETURNS @SAProduct TABLE
   (
	[SAID] INT identity,
	[TrackingNum] INT,
	[DescAbrv] VARCHAR(20),
	[Suffix] VARCHAR(20)
   )
AS
BEGIN

DECLARE @DescAbrv VARCHAR(20)
DECLARE @Suffix VARCHAR(20)

	DECLARE mycur CURSOR
	FOR
		SELECT TrackingNum, DescAbrv, Suffix
		FROM NewMemberSubAccount SA
		WHERE SA.TrackingNum = @TrackingNum AND SA.Created = 'Y' AND SLType = 'S'
		ORDER BY Sequence
		
	OPEN mycur
	FETCH NEXT FROM mycur
	INTO @TrackingNum, @DescAbrv, @Suffix
	
	WHILE @@FETCH_STATUS = 0
	BEGIN
		INSERT @SAProduct ([TrackingNum], [DescAbrv], [Suffix]) VALUES (@TrackingNum, @DescAbrv, @Suffix)

		FETCH NEXT FROM mycur
		INTO @TrackingNum, @DescAbrv, @Suffix
	END
	CLOSE mycur
	DEALLOCATE mycur

	RETURN
END
GO
/****** Object:  UserDefinedFunction [IMS].[fnSSCU_GetSuffixList]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [IMS].[fnSSCU_GetSuffixList] (@TrackingNum int) 
RETURNS @Suffixes TABLE
   (
    [SASequence]	int identity,
    [TrackingNum]	int,
    [Suffixes]		char(100)
   )
AS
BEGIN
DECLARE @sTemp varchar(1000)
DECLARE @Suffix int


	DECLARE mycur2 CURSOR
	FOR
		SELECT Suffix
		FROM NewMemberSubAccount SA
		WHERE SA.TrackingNum = @TrackingNum AND SA.Created = 'Y' AND SA.SLType = 'S' ORDER BY Suffix
		
	OPEN mycur2
	FETCH NEXT FROM mycur2
	INTO @Suffix
	
	SET @sTemp = ''
	WHILE @@FETCH_STATUS = 0
	BEGIN
		IF @Suffix IS NOT NULL
		BEGIN
			SET @sTemp = @sTemp + CASE WHEN @sTemp <> '' THEN ', ' ELSE '' END
			SET @sTemp = @sTemp + RIGHT('0' + CAST(@Suffix AS varchar(2)), 2)
		END


		FETCH NEXT FROM mycur2
		INTO @Suffix
	END
	CLOSE mycur2
	DEALLOCATE mycur2

	INSERT @Suffixes ([TrackingNum], [Suffixes]) VALUES (@TrackingNum, @sTemp)

--		SELECT * FROM #Temp ORDER BY [Sequence]

	RETURN
END
GO
/****** Object:  UserDefinedFunction [IMS].[fnSSCU_GetUSAePayPaymentStatus]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [IMS].[fnSSCU_GetUSAePayPaymentStatus] 
(
	-- Add the parameters for the function here
	@PaymentID int
)
RETURNS varchar(25)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result varchar(25)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = PaymentStatus FROM IMS.USAePayPaymentStatus where PaymentId = @PaymentID

	-- Return the result of the function
	RETURN @Result
END

GO
/****** Object:  Table [IMS].[NewMemberCertificateLink]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[NewMemberCertificateLink](
	[TrackingNum] [int] NULL,
	[RelatedSequence] [smallint] NULL,
	[Approval] [char](20) NULL,
	[OverrideBy] [char](20) NULL,
	[Created] [char](1) NULL,
	[CreatedBy] [varchar](20) NULL,
	[CreatedOn] [datetime] NULL,
	[HostTrackingNum] [int] NULL,
	[ErrorString] [char](80) NULL,
	[CrossAccount] [int] NULL,
	[CrossSuffix] [smallint] NULL,
	[CrossSurname] [char](2) NULL,
	[Relationship] [char](1) NULL,
	[TargetSequence] [smallint] NULL,
	[LinkSequence] [smallint] NOT NULL,
	[CrossType] [char](1) NULL,
	[TargetType] [char](1) NULL,
	[ClientIP] [char](15) NULL,
	[WebIP] [char](15) NULL,
	[ClusterID] [char](10) NULL,
	[RolloverTerm] [char](4) NULL,
	[PSIErrorString] [char](80) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[NewMemberCertificateLink]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  UserDefinedFunction [IMS].[fnCCCU_GetCL]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [IMS].[fnCCCU_GetCL] (@TrackingNum int, @certseq int, @type1 char(1), @type2 char(1))  
RETURNS TABLE
AS
RETURN (SELECT Top 1 CL.TrackingNum, CL.RelatedSequence, CL.TargetSequence, CL.TargetType, CL.CrossAccount, CL.CrossSuffix
FROM NewMemberCertificateLink As CL
WHERE CL.TrackingNum = @TrackingNum AND CL.TargetSequence = @certseq AND (CL.TargetType = @type1 OR CL.TargetType = @type2))
GO
/****** Object:  Table [IMS].[NewMemberSubAccount]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[NewMemberSubAccount](
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[TrackingNum] [int] NOT NULL,
	[Sequence] [smallint] NULL,
	[SubAccountType] [varchar](20) NULL,
	[DescAbrv] [varchar](20) NULL,
	[Description] [varchar](1024) NULL,
	[ACC] [varchar](20) NULL,
	[CollateralCode] [char](10) NULL,
	[SLType] [char](1) NULL,
	[Amount] [int] NULL,
	[Suffix] [varchar](50) NULL,
	[Approval] [char](1) NULL,
	[OverrideBy] [char](20) NULL,
	[Created] [char](1) NULL,
	[CreatedBy] [varchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[HostTrackingNum] [int] NULL,
	[PrimaryAccount] [char](1) NULL,
	[DependentOn] [smallint] NULL,
	[MiscField1] [char](30) NULL,
	[MiscField2] [char](30) NULL,
	[MiscField3] [char](30) NULL,
	[ProductType] [char](4) NULL,
	[CreditLimit] [int] NULL,
	[Action] [char](2) NULL,
	[StartSuffix] [char](30) NULL,
	[StopSuffix] [smallint] NULL,
	[ErrorString] [varchar](2000) NULL,
	[Payment] [int] NULL,
	[APR] [char](6) NULL,
	[CashAdvanceAPR] [int] NULL,
	[SkipCode] [char](2) NULL,
	[Coupons] [smallint] NULL,
	[Term] [smallint] NULL,
	[Method] [char](1) NULL,
	[Frequency] [char](1) NULL,
	[InsCode] [char](2) NULL,
	[DisclosureCode] [char](2) NULL,
	[DueDate] [datetime] NULL,
	[ReviewDate] [datetime] NULL,
	[MaturityDate] [datetime] NULL,
	[Seller] [varchar](50) NULL,
	[Officer] [varchar](50) NULL,
	[CurrBranch] [smallint] NULL,
	[OrigBranch] [smallint] NULL,
	[StatementOrder] [smallint] NULL,
	[Transferred] [char](1) NULL,
	[TransferredBy] [varchar](50) NULL,
	[TransferredOn] [datetime] NULL,
	[TransferTrackingNum] [int] NULL,
	[TransferErrorString] [char](255) NULL,
	[MaturityDisp] [char](4) NULL,
	[DividendDisp] [smallint] NULL,
	[LineofCredit] [char](1) NULL,
	[PaymentPercent] [int] NULL,
	[RolloverTransferType] [smallint] NULL,
	[RolloverTransferAccount] [int] NULL,
	[RolloverTransferSuffix] [smallint] NULL,
	[RolloverTransferSurname] [char](2) NULL,
	[RolloverTermType] [char](1) NULL,
	[RolloverTerm] [smallint] NULL,
	[RolloverACC] [smallint] NULL,
	[RolloverSDA] [char](3) NULL,
	[AllowPlastic1] [char](1) NULL,
	[AllowPlastic2] [char](1) NULL,
	[AllowPlastic3] [char](1) NULL,
	[AllowPlastic4] [char](1) NULL,
	[CreateHost] [char](1) NULL,
	[HostCommand] [char](4) NULL,
	[ServiceClass] [char](4) NULL,
	[TaxCode] [char](1) NULL,
	[ApprovedBy] [varchar](50) NULL,
	[ApprovedOn] [datetime] NULL,
	[JointTaxCode] [char](1) NULL,
	[W8TaxCode] [char](1) NULL,
	[KTransferLink] [char](10) NULL,
	[BWProcessed] [char](1) NULL,
	[BWBy] [varchar](50) NULL,
	[BWOverrideBy] [varchar](50) NULL,
	[BWOn] [datetime] NULL,
	[BWTrackingNum] [int] NULL,
	[BWErrorString] [char](80) NULL,
	[LoanDiscounts] [char](20) NULL,
	[PlasticCardLink] [int] NULL,
	[MICRBegin] [char](5) NULL,
	[MICREnd] [char](5) NULL,
	[MICRFormat] [char](30) NULL,
	[MICRNumber] [char](16) NULL,
	[PromptMICR] [char](1) NULL,
	[ClientIP] [char](15) NULL,
	[WebIP] [char](15) NULL,
	[ClusterID] [char](10) NULL,
	[Purpose] [char](3) NULL,
	[ApprovalTier] [char](1) NULL,
	[LoanOfficer] [char](10) NULL,
	[Available] [int] NULL,
	[FundingOrder] [smallint] NULL,
	[VRLIndex] [char](6) NULL,
	[VRLMargin] [char](6) NULL,
	[VRLCode] [char](6) NULL,
	[LOSID] [int] NULL,
	[LOSProductID] [char](5) NULL,
	[VRLFreq] [char](1) NULL,
	[CheckDigit] [smallint] NULL,
	[ContributionCode] [char](1) NULL,
	[ContributionYear] [char](1) NULL,
	[LossFlag] [char](1) NULL,
	[ClosedFlag] [char](1) NULL,
	[ReOpenProcessed] [char](1) NULL,
	[ReOpenBy] [char](20) NULL,
	[ReOpenOverrideBy] [char](20) NULL,
	[ReOpenOn] [datetime] NULL,
	[ReOpenTrackingNum] [int] NULL,
	[ReOpenErrorString] [char](80) NULL,
	[PSIErrorString] [varchar](2000) NULL,
	[PlasticCardLink2] [int] NULL,
	[ShoppingCartID] [bigint] NULL,
	[OptInOptOutOptionID] [int] NULL,
	[MajorAccountType] [varchar](10) NULL,
	[MinorAccountType] [varchar](10) NULL,
	[StatementDeliveryMethod] [varchar](20) NULL,
	[NewMemberFeeProcessed] [varchar](1) NULL,
	[NewMemberFeeProcessedOn] [datetime] NULL,
	[NewMemberFeeProcessedBy] [varchar](50) NULL,
	[FundingProcessed] [varchar](1) NULL,
	[FundingProcessedOn] [datetime] NULL,
	[FundingProcessedBy] [varchar](50) NULL,
 CONSTRAINT [PK_NewMemberSubAccount] PRIMARY KEY NONCLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Index [xTrackingNum]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [xTrackingNum] ON [IMS].[NewMemberSubAccount]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  UserDefinedFunction [IMS].[fnSafe_GetCL]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [IMS].[fnSafe_GetCL] (@TrackingNum INT, @certseq INT, @type1 CHAR(1), @type2 CHAR(1))  
RETURNS TABLE
AS
RETURN (
SELECT Top 1 CL.TrackingNum, CL.RelatedSequence, CL.TargetSequence, CL.TargetType, CL.CrossAccount, CL.CrossSuffix, SA.Suffix AS RelatedSuffix
FROM IMS.NewMemberCertificateLink AS CL
LEFT JOIN IMS.NewMemberSubAccount AS SA ON CL.TrackingNum = SA.TrackingNum AND CL.RelatedSequence = SA.Sequence
WHERE CL.TrackingNum = @TrackingNum AND CL.TargetSequence = @certseq AND (CL.TargetType = @type1 OR CL.TargetType = @type2))
GO
/****** Object:  Table [IMS].[udt_ISubAccounts]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[udt_ISubAccounts](
	[TrackingNum] [int] IDENTITY(1,1) NOT NULL,
	[UniqueID] [char](10) NOT NULL,
	[DescAbrv] [char](3) NULL,
	[ACC] [varchar](10) NULL,
	[PreapproveCode] [char](10) NULL,
	[Description] [char](20) NULL,
	[MinBalance] [char](10) NULL,
	[MinAge] [int] NULL,
	[MaxAge] [int] NULL,
	[ProductType] [char](4) NULL,
	[StartSuffix] [char](10) NULL,
	[StopSuffix] [char](10) NULL,
	[PromptCertNumber] [char](1) NULL,
	[APR] [char](10) NULL,
	[APREditCode] [char](1) NULL,
	[MaturityDays] [smallint] NULL,
	[MaturityDaysEditCode] [char](1) NULL,
	[MaturityDate] [datetime] NULL,
	[AccountTypes] [char](80) NULL,
	[MaturityDisp] [char](4) NULL,
	[TermType] [char](1) NULL,
	[DividendDisp] [char](4) NULL,
	[MaxPrevCont] [char](10) NULL,
	[CurAnnCont] [char](10) NULL,
	[TargetAmount] [char](10) NULL,
	[PenaltyRate] [char](10) NULL,
	[PenaltyAmount] [char](10) NULL,
	[TAIncludeExisting] [char](1) NULL,
	[MaturityDispEditCode] [char](1) NULL,
	[NoticeDays] [smallint] NULL,
	[NoticeDaysEditCode] [char](1) NULL,
	[DividendRateEditCode] [char](1) NULL,
	[DistMethod] [char](1) NULL,
	[DistFrequency] [char](1) NULL,
	[DividendDispEditCode] [char](1) NULL,
	[DistCode] [char](10) NULL,
	[AcceptDisp] [char](1) NULL,
	[StatementOrder] [char](10) NULL,
	[TaxCode] [char](1) NULL,
	[JointTaxCode] [char](1) NULL,
	[PlanNumber] [char](20) NULL,
	[ServiceClass] [char](1) NULL,
	[PlanNumberEditCode] [char](1) NULL,
	[W8TaxCode] [char](1) NULL,
	[CreateHost] [char](1) NULL,
	[MaxPrevContEditCode] [char](1) NULL,
	[HostCommand] [char](4) NULL,
	[TotalAllowed] [int] NULL,
	[CurAnnContEditCode] [char](1) NULL,
	[Requires] [char](30) NULL,
	[Required] [char](1) NULL,
	[TargetAmountEditCode] [char](1) NULL,
	[AutoAdd] [char](1) NULL,
	[Term] [char](10) NULL,
	[UseMaturityTerm] [char](1) NULL,
	[AllowedTerms] [char](80) NULL,
	[TermEditCode] [char](1) NULL,
	[DividendRate] [char](10) NULL,
	[IRAType] [char](1) NULL,
	[IRATypeEditCode] [char](1) NULL,
	[PenaltyEditCode] [char](1) NULL,
	[SetupDist] [char](1) NULL,
	[AcceptDist] [char](1) NULL,
	[AllowJoint] [char](1) NULL,
	[AllowBen] [char](1) NULL,
	[AllowPlastic] [char](1) NULL,
	[AllowODP] [char](1) NULL,
	[AllowIVR] [char](1) NULL,
	[FlagNumber1] [smallint] NULL,
	[FlagLevel1] [char](1) NULL,
	[FlagType1] [char](1) NULL,
	[FlagValue1] [smallint] NULL,
	[FlagNumber2] [smallint] NULL,
	[FlagLevel2] [char](1) NULL,
	[FlagType2] [char](1) NULL,
	[FlagValue2] [smallint] NULL,
	[FlagNumber3] [smallint] NULL,
	[FlagLevel3] [char](1) NULL,
	[FlagType3] [char](1) NULL,
	[FlagValue3] [smallint] NULL,
	[FlagNumber4] [smallint] NULL,
	[FlagLevel4] [char](1) NULL,
	[FlagType4] [char](1) NULL,
	[FlagValue4] [smallint] NULL,
	[AllowDescriptionChange] [char](1) NULL,
	[Exclude] [char](40) NULL,
	[Category] [char](50) NULL,
	[SuffixRange] [char](30) NULL,
	[MemoNumber1] [int] NULL,
	[MemoText1] [char](60) NULL,
	[MemoExpireDays1] [int] NULL,
	[MemoNumber2] [int] NULL,
	[MemoText2] [char](60) NULL,
	[MemoExpireDays2] [int] NULL,
	[MemoNumber3] [int] NULL,
	[MemoText3] [char](60) NULL,
	[MemoExpireDays3] [int] NULL,
	[MemoNumber4] [int] NULL,
	[MemoText4] [char](60) NULL,
	[MemoExpireDays4] [int] NULL,
	[MaturityDispAllowed] [char](30) NULL,
	[DividendDispAllowed] [char](30) NULL,
	[FundingOrder] [smallint] NULL,
	[SortOrder] [smallint] NULL,
	[MaxPrevContCatchUp] [char](10) NULL,
	[MaxPrevContCatchUpAge] [int] NULL,
	[CurAnnContCatchUp] [char](10) NULL,
	[CurAnnContCatchUpAge] [int] NULL,
	[MajorAccountType] [varchar](10) NULL,
	[MinorAccountType] [varchar](10) NULL,
	[SymitarId] [varchar](200) NULL,
	[SymitarType] [varchar](4) NULL,
	[SymitarCode] [varchar](4) NULL,
	[SymitarStatementGroup] [varchar](4) NULL,
	[SymitarIrsCode] [varchar](4) NULL,
	[SymitarDividendType] [varchar](4) NULL,
	[SymitarServiceCode] [varchar](4) NULL,
 CONSTRAINT [PK__udt_ISubAccounts__5832119F] PRIMARY KEY CLUSTERED 
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[udt_LSubAccounts]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[udt_LSubAccounts](
	[TrackingNum] [int] IDENTITY(1,1) NOT NULL,
	[DescAbrv] [char](3) NULL,
	[ACC] [char](3) NULL,
	[PreapproveCode] [char](10) NULL,
	[PreapprovalFlags] [char](250) NULL,
	[CollateralCode] [char](10) NULL,
	[PreapproveLimit] [char](10) NULL,
	[Description] [char](20) NULL,
	[CardAvailable] [char](1) NULL,
	[OverdraftTarget] [char](1) NULL,
	[OverdraftSource] [char](1) NULL,
	[Requires] [char](30) NULL,
	[MinAge] [int] NULL,
	[MaxAge] [int] NULL,
	[ProductType] [char](4) NULL,
	[StartSuffix] [char](10) NULL,
	[StopSuffix] [char](10) NULL,
	[CurrBranch] [char](2) NULL,
	[APR] [char](10) NULL,
	[CashAdvanceAPR] [char](10) NULL,
	[Term] [char](10) NULL,
	[Method] [char](1) NULL,
	[Frequency] [char](1) NULL,
	[InsCode] [char](2) NULL,
	[DisclosureCode] [char](2) NULL,
	[DueDays] [int] NULL,
	[ReviewDays] [int] NULL,
	[Officer] [char](10) NULL,
	[ReviewDate] [datetime] NULL,
	[SCode] [char](2) NULL,
	[Coupons] [char](2) NULL,
	[StatementOrder] [char](2) NULL,
	[TotalAllowed] [int] NULL,
	[AllowPlastic1] [char](1) NULL,
	[TAIncludeExisting] [char](1) NULL,
	[AllowPlastic2] [char](1) NULL,
	[AllowPlastic3] [char](1) NULL,
	[AllowPlastic4] [char](1) NULL,
	[LineofCredit] [char](1) NULL,
	[Action] [char](1) NULL,
	[PaymentPercent] [int] NULL,
	[AccountTypes] [char](80) NULL,
	[PromptMICR] [char](1) NULL,
	[MICRRequired] [char](1) NULL,
	[MinMICRLength] [smallint] NULL,
	[MaxMICRLength] [smallint] NULL,
	[MICRBegin] [char](5) NULL,
	[MICREnd] [char](5) NULL,
	[MICRFormat] [char](30) NULL,
	[CreateHost] [char](1) NULL,
	[HostCommand] [char](4) NULL,
	[ServiceClass] [char](4) NULL,
	[APREditCode] [char](1) NULL,
	[OfficerEditCode] [char](1) NULL,
	[KTransferLink] [char](20) NULL,
	[RoundPayment] [char](1) NULL,
	[MinPayment] [int] NULL,
	[MinPaymentEditCode] [char](1) NULL,
	[PromptIncomeCode] [char](1) NULL,
	[NoJointA] [char](1) NULL,
	[AcceptDeposits] [char](1) NULL,
	[AllowJoint] [char](1) NULL,
	[FlagNumber1] [smallint] NULL,
	[FlagLevel1] [char](1) NULL,
	[FlagType1] [char](1) NULL,
	[FlagValue1] [smallint] NULL,
	[FlagNumber2] [smallint] NULL,
	[FlagLevel2] [char](1) NULL,
	[FlagType2] [char](1) NULL,
	[FlagValue2] [smallint] NULL,
	[FlagNumber3] [smallint] NULL,
	[FlagLevel3] [char](1) NULL,
	[FlagType3] [char](1) NULL,
	[FlagValue3] [smallint] NULL,
	[FlagNumber4] [smallint] NULL,
	[FlagLevel4] [char](1) NULL,
	[FlagType4] [char](1) NULL,
	[FlagValue4] [smallint] NULL,
	[LoanDiscounts] [char](20) NULL,
	[Exclude] [char](40) NULL,
	[TermEditCode] [char](1) NULL,
	[MinTerm] [int] NULL,
	[MaxTerm] [int] NULL,
	[TermIncrement] [int] NULL,
	[PromptCheckOrder] [char](1) NULL,
	[CheckOrderTypes] [char](2) NULL,
	[SortOrder] [smallint] NULL,
	[AllowDescriptionChange] [char](1) NULL,
	[Category] [char](15) NULL,
	[SuffixRange] [char](30) NULL,
	[cycleday] [smallint] NULL,
	[UniqueID] [char](10) NULL,
	[Purpose] [char](3) NULL,
	[VRLIndex] [char](6) NULL,
	[VRLMargin] [char](6) NULL,
	[VRLCode] [char](6) NULL,
	[ReviewCycleDay] [smallint] NULL,
	[FrequencyEditCode] [char](1) NULL,
	[FrequencyPercentage] [char](6) NULL,
	[MethodEditCode] [char](1) NULL,
	[VRLFreq] [char](1) NULL,
	[OverdraftSourceExisting] [char](1) NULL,
	[AllowCoApp] [char](1) NULL,
	[SkipCode] [char](2) NULL,
	[MemoNumber1] [int] NULL,
	[MemoText1] [char](60) NULL,
	[MemoExpireDays1] [int] NULL,
	[MemoNumber2] [int] NULL,
	[MemoText2] [char](60) NULL,
	[MemoExpireDays2] [int] NULL,
	[MemoNumber3] [int] NULL,
	[MemoText3] [char](60) NULL,
	[MemoExpireDays3] [int] NULL,
	[MemoNumber4] [int] NULL,
	[MemoText4] [char](60) NULL,
	[MemoExpireDays4] [int] NULL,
	[MajorAccountType] [varchar](10) NULL,
	[MinorAccountType] [varchar](10) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[udt_SSubAccounts]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[udt_SSubAccounts](
	[TrackingNum] [int] IDENTITY(1,1) NOT NULL,
	[DescAbrv] [char](3) NOT NULL,
	[ACC] [char](3) NULL,
	[PreapproveCode] [char](10) NULL,
	[MinBalance] [char](10) NULL,
	[Description] [varchar](40) NULL,
	[Required] [char](2) NULL,
	[AutoAdd] [char](1) NULL,
	[OverdraftTarget] [char](1) NULL,
	[OverdraftSource] [char](1) NULL,
	[Requires] [char](30) NULL,
	[MinAge] [int] NULL,
	[MaxAge] [int] NULL,
	[ProductType] [char](4) NULL,
	[StartSuffix] [char](15) NULL,
	[StopSuffix] [char](15) NULL,
	[CurrBranch] [char](2) NULL,
	[APR] [char](10) NULL,
	[MaturityDays] [smallint] NULL,
	[StatementOrder] [char](10) NULL,
	[TotalAllowed] [int] NULL,
	[TAIncludeExisting] [char](1) NULL,
	[AllowPlastic1] [char](1) NULL,
	[AllowPlastic2] [char](1) NULL,
	[AllowPlastic3] [char](1) NULL,
	[AllowPlastic4] [char](1) NULL,
	[PromptMICR] [char](1) NULL,
	[MICRRequired] [char](1) NULL,
	[MinMICRLength] [smallint] NULL,
	[MaxMICRLength] [smallint] NULL,
	[AccountTypes] [char](80) NULL,
	[MaturityDisp] [char](4) NULL,
	[DividendDisp] [char](4) NULL,
	[CreateHost] [char](1) NULL,
	[HostCommand] [char](4) NULL,
	[TaxCode] [char](1) NULL,
	[ServiceClass] [char](4) NULL,
	[JointTaxCode] [char](1) NULL,
	[APREditCode] [char](1) NULL,
	[W8TaxCode] [char](1) NULL,
	[AcceptDeposits] [char](1) NULL,
	[AllowJoint] [char](1) NULL,
	[AllowBen] [char](1) NULL,
	[AllowPlastic] [char](1) NULL,
	[AllowODP] [char](1) NULL,
	[AllowIVR] [char](1) NULL,
	[FlagNumber1] [smallint] NULL,
	[FlagLevel1] [char](1) NULL,
	[FlagType1] [char](1) NULL,
	[FlagValue1] [smallint] NULL,
	[FlagNumber2] [smallint] NULL,
	[FlagLevel2] [char](1) NULL,
	[FlagType2] [char](1) NULL,
	[FlagValue2] [smallint] NULL,
	[FlagNumber3] [smallint] NULL,
	[FlagLevel3] [char](1) NULL,
	[FlagType3] [char](1) NULL,
	[FlagValue3] [smallint] NULL,
	[FlagNumber4] [smallint] NULL,
	[FlagLevel4] [char](1) NULL,
	[FlagType4] [char](1) NULL,
	[FlagValue4] [smallint] NULL,
	[MICRBegin] [char](5) NULL,
	[MICREnd] [char](5) NULL,
	[MICRFormat] [char](30) NULL,
	[Exclude] [char](120) NULL,
	[PromptCheckOrder] [char](1) NULL,
	[CheckOrderTypes] [char](2) NULL,
	[PreapprovalFlags] [char](250) NULL,
	[HighPaperGrade] [char](1) NULL,
	[LowPaperGrade] [char](1) NULL,
	[AllowDescriptionChange] [char](1) NULL,
	[Category] [char](15) NULL,
	[SuffixRange] [char](30) NULL,
	[UniqueID] [char](10) NULL,
	[FundingOrder] [smallint] NULL,
	[SortOrder] [smallint] NULL,
	[MICRFields] [char](100) NULL,
	[CKDGBegin] [char](5) NULL,
	[CKDGEnd] [char](5) NULL,
	[CKDGFormat] [char](30) NULL,
	[CKDGFields] [char](100) NULL,
	[ClassCode] [char](2) NULL,
	[OverdraftSourceExisting] [char](1) NULL,
	[Ref1] [char](8) NULL,
	[MemoNumber1] [int] NULL,
	[MemoText1] [char](60) NULL,
	[MemoExpireDays1] [int] NULL,
	[MemoNumber2] [int] NULL,
	[MemoText2] [char](60) NULL,
	[MemoExpireDays2] [int] NULL,
	[MemoNumber3] [int] NULL,
	[MemoText3] [char](60) NULL,
	[MemoExpireDays3] [int] NULL,
	[MemoNumber4] [int] NULL,
	[MemoText4] [char](60) NULL,
	[MemoExpireDays4] [int] NULL,
	[MajorAccountType] [varchar](10) NULL,
	[MinorAccountType] [varchar](10) NULL,
	[SymitarId] [varchar](100) NULL,
	[SymitarType] [varchar](4) NULL,
	[SymitarCode] [varchar](4) NULL,
	[SymitarStatementGroup] [varchar](4) NULL,
	[SymitarIrsCode] [varchar](4) NULL,
	[SymitarDividendType] [varchar](4) NULL,
	[SymitarServiceCode] [varchar](4) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTrackingNum]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [xTrackingNum] ON [IMS].[udt_SSubAccounts]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  View [IMS].[udt_AllSubAccounts]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [IMS].[udt_AllSubAccounts]
AS
SELECT TrackingNum, UniqueID, 'S' AS SLType, ACC, AcceptDeposits, NULL AS AcceptDisp, NULL AS AcceptDist, AccountTypes, NULL AS Action, AllowBen, NULL AS AllowCoApp, 
AllowDescriptionChange, NULL AS AllowedTerms, AllowIVR, AllowJoint, AllowODP, AllowPlastic, AllowPlastic1, 
AllowPlastic2, AllowPlastic3, AllowPlastic4, APR, APREditCode, AutoAdd, NULL AS CardAvailable, NULL AS CashAdvanceAPR, 
Category, CheckOrderTypes, CKDGBegin, CKDGEnd, CKDGFields, CKDGFormat, ClassCode, NULL AS CollateralCode, 
NULL AS Coupons, CreateHost, NULL AS CurAnnCont, NULL AS CurAnnContCatchUp, NULL AS CurAnnContCatchUpAge, NULL AS CurAnnContEditCode, 
CurrBranch, NULL AS CycleDay, DescAbrv, Description, NULL AS DisclosureCode, NULL AS DistCode, NULL AS DistFrequency, NULL AS DistMethod, 
DividendDisp, NULL AS DividendDispAllowed, NULL AS DividendDispEditCode, NULL AS DividendRate, NULL AS DividendRateEditCode, NULL AS DueDays, 
Exclude, FlagLevel1, FlagLevel2, FlagLevel3, FlagLevel4, FlagNumber1, FlagNumber2, FlagNumber3, FlagNumber4, 
FlagType1, FlagType2, FlagType3, FlagType4, FlagValue1, FlagValue2, FlagValue3, FlagValue4, 
NULL AS Frequency, NULL AS FrequencyEditCode, NULL AS FrequencyPercentage, FundingOrder, HighPaperGrade, HostCommand, 
NULL AS InsCode, NULL AS IRAType, NULL AS IRATypeEditCode, JointTaxCode, NULL AS KTransferLink, NULL AS LineofCredit, NULL AS LoanDiscounts, 
LowPaperGrade, NULL AS MaturityDate, MaturityDays, NULL AS MaturityDaysEditCode, MaturityDisp, NULL AS MaturityDispAllowed, 
NULL AS MaturityDispEditCode, MaxAge, MaxMICRLength, NULL AS MaxPrevCont, NULL AS MaxPrevContCatchUp, NULL AS MaxPrevContCatchUpAge, 
NULL AS MaxPrevContEditCode, NULL AS MaxTerm, NULL AS MemoExpireDays1, NULL AS MemoExpireDays2, NULL AS MemoExpireDays3, NULL AS MemoExpireDays4, 
NULL AS MemoNumber1, NULL AS MemoNumber2, NULL AS MemoNumber3, NULL AS MemoNumber4, NULL AS MemoText1, NULL AS MemoText2, NULL AS MemoText3, NULL AS MemoText4, 
NULL AS Method, NULL AS MethodEditCode, MICRBegin, MICREnd, MICRFields, MICRFormat, MICRRequired, MinAge, MinBalance, 
MinMICRLength, NULL AS MinPayment, NULL AS MinPaymentEditCode, NULL AS MinTerm, NULL AS NoJointA, NULL AS NoticeDays, NULL AS NoticeDaysEditCode, 
NULL AS Officer, NULL AS OfficerEditCode, OverdraftSource, OverdraftSourceExisting, OverdraftTarget, NULL AS PaymentPercent, 
NULL AS PenaltyAmount, NULL AS PenaltyEditCode, NULL AS PenaltyRate, NULL AS PlanNumber, NULL AS PlanNumberEditCode, PreapprovalFlags, 
PreapproveCode, NULL AS PreapproveLimit, ProductType, NULL AS PromptCertNumber, PromptCheckOrder, NULL AS PromptIncomeCode, 
PromptMICR, NULL AS Purpose, Required, Requires, NULL AS ReviewCycleDay, NULL AS ReviewDate, NULL AS ReviewDays, NULL AS RoundPayment, NULL AS SCode, 
ServiceClass, NULL AS SetupDist, NULL AS SkipCode, SortOrder, StartSuffix, StatementOrder, StopSuffix, SuffixRange, 
TAIncludeExisting, NULL AS TargetAmount, NULL AS TargetAmountEditCode, TaxCode, NULL AS Term, NULL AS TermEditCode, NULL AS TermIncrement, 
NULL AS TermType, TotalAllowed, NULL AS UseMaturityTerm, NULL AS VRLCode, NULL AS VRLFreq, NULL AS VRLIndex, NULL AS VRLMargin, W8TaxCode
FROM IMS.udt_SSubAccounts UNION ALL

SELECT TrackingNum, UniqueID, 'I' AS SLType, ACC, NULL AS AcceptDeposits, AcceptDisp, AcceptDist, AccountTypes, NULL AS Action, AllowBen, NULL AS AllowCoApp, 
AllowDescriptionChange, AllowedTerms, AllowIVR, AllowJoint, AllowODP, AllowPlastic, NULL AS AllowPlastic1, 
NULL AS AllowPlastic2, NULL AS AllowPlastic3, NULL AS AllowPlastic4, APR, APREditCode, AutoAdd, NULL AS CardAvailable, NULL AS CashAdvanceAPR, 
Category, NULL AS CheckOrderTypes, NULL AS CKDGBegin, NULL AS CKDGEnd, NULL AS CKDGFields, NULL AS CKDGFormat, NULL AS ClassCode, NULL AS CollateralCode, 
NULL AS Coupons, CreateHost, CurAnnCont, CurAnnContCatchUp, CurAnnContCatchUpAge, CurAnnContEditCode, 
NULL AS CurrBranch, NULL AS CycleDay, DescAbrv, Description, NULL AS DisclosureCode, DistCode, DistFrequency, DistMethod, 
DividendDisp, DividendDispAllowed, DividendDispEditCode, DividendRate, DividendRateEditCode, NULL AS DueDays, 
Exclude, FlagLevel1, FlagLevel2, FlagLevel3, FlagLevel4, FlagNumber1, FlagNumber2, FlagNumber3, FlagNumber4, 
FlagType1, FlagType2, FlagType3, FlagType4, FlagValue1, FlagValue2, FlagValue3, FlagValue4, 
NULL AS Frequency, NULL AS FrequencyEditCode, NULL AS FrequencyPercentage, FundingOrder, NULL AS HighPaperGrade, HostCommand, 
NULL AS InsCode, IRAType, IRATypeEditCode, JointTaxCode, NULL AS KTransferLink, NULL AS LineofCredit, NULL AS LoanDiscounts, 
NULL AS LowPaperGrade, MaturityDate, MaturityDays, MaturityDaysEditCode, MaturityDisp, MaturityDispAllowed, 
MaturityDispEditCode, MaxAge, NULL AS MaxMICRLength, MaxPrevCont, MaxPrevContCatchUp, MaxPrevContCatchUpAge, 
MaxPrevContEditCode, NULL AS MaxTerm, MemoExpireDays1, MemoExpireDays2, MemoExpireDays3, MemoExpireDays4, 
MemoNumber1, MemoNumber2, MemoNumber3, MemoNumber4, MemoText1, MemoText2, MemoText3, MemoText4, 
NULL AS Method, NULL AS MethodEditCode, NULL AS MICRBegin, NULL AS MICREnd, NULL AS MICRFields, NULL AS MICRFormat, NULL AS MICRRequired, MinAge, MinBalance, 
NULL AS MinMICRLength, NULL AS MinPayment, NULL AS MinPaymentEditCode, NULL AS MinTerm, NULL AS NoJointA, NoticeDays, NoticeDaysEditCode, 
NULL AS Officer, NULL AS OfficerEditCode, NULL AS OverdraftSource, NULL AS OverdraftSourceExisting, NULL AS OverdraftTarget, NULL AS PaymentPercent, 
PenaltyAmount, PenaltyEditCode, PenaltyRate, PlanNumber, PlanNumberEditCode, NULL AS PreapprovalFlags, 
PreapproveCode, NULL AS PreapproveLimit, ProductType, PromptCertNumber, NULL AS PromptCheckOrder, NULL AS PromptIncomeCode, 
NULL AS PromptMICR, NULL AS Purpose, Required, Requires, NULL AS ReviewCycleDay, NULL AS ReviewDate, NULL AS ReviewDays, NULL AS RoundPayment, NULL AS SCode, 
ServiceClass, SetupDist, NULL AS SkipCode, SortOrder, StartSuffix, StatementOrder, StopSuffix, SuffixRange, 
TAIncludeExisting, TargetAmount, TargetAmountEditCode, TaxCode, Term, TermEditCode, NULL AS TermIncrement, 
TermType, TotalAllowed, UseMaturityTerm, NULL AS VRLCode, NULL AS VRLFreq, NULL AS VRLIndex, NULL AS VRLMargin, W8TaxCode
FROM IMS.udt_ISubAccounts UNION ALL

SELECT TrackingNum, UniqueID, 'L' AS SLType, ACC, AcceptDeposits, NULL AS AcceptDisp, NULL AS AcceptDist, AccountTypes, Action, NULL AS AllowBen, AllowCoApp, 
AllowDescriptionChange, NULL AS AllowedTerms, NULL AS AllowIVR, AllowJoint, NULL AS AllowODP, NULL AS AllowPlastic, AllowPlastic1, 
AllowPlastic2, AllowPlastic3, AllowPlastic4, APR, APREditCode, NULL AS AutoAdd, CardAvailable, CashAdvanceAPR, 
Category, CheckOrderTypes, NULL AS CKDGBegin, NULL AS CKDGEnd, NULL AS CKDGFields, NULL AS CKDGFormat, NULL AS ClassCode, CollateralCode, 
Coupons, CreateHost, NULL AS CurAnnCont, NULL AS CurAnnContCatchUp, NULL AS CurAnnContCatchUpAge, NULL AS CurAnnContEditCode, 
CurrBranch, CycleDay, DescAbrv, Description, DisclosureCode, NULL AS DistCode, NULL AS DistFrequency, NULL AS DistMethod, 
NULL AS DividendDisp, NULL AS DividendDispAllowed, NULL AS DividendDispEditCode, NULL AS DividendRate, NULL AS DividendRateEditCode, DueDays, 
Exclude, FlagLevel1, FlagLevel2, FlagLevel3, FlagLevel4, FlagNumber1, FlagNumber2, FlagNumber3, FlagNumber4, 
FlagType1, FlagType2, FlagType3, FlagType4, FlagValue1, FlagValue2, FlagValue3, FlagValue4, 
Frequency, FrequencyEditCode, FrequencyPercentage, NULL AS FundingOrder, NULL AS HighPaperGrade, HostCommand, 
InsCode, NULL AS IRAType, NULL AS IRATypeEditCode, NULL AS JointTaxCode, KTransferLink, LineofCredit, LoanDiscounts, 
NULL AS LowPaperGrade, NULL AS MaturityDate, NULL AS MaturityDays, NULL AS MaturityDaysEditCode, NULL AS MaturityDisp, NULL AS MaturityDispAllowed, 
NULL AS MaturityDispEditCode, MaxAge, MaxMICRLength, NULL AS MaxPrevCont, NULL AS MaxPrevContCatchUp, NULL AS MaxPrevContCatchUpAge, 
NULL AS MaxPrevContEditCode, MaxTerm, NULL AS MemoExpireDays1, NULL AS MemoExpireDays2, NULL AS MemoExpireDays3, NULL AS MemoExpireDays4, 
NULL AS MemoNumber1, NULL AS MemoNumber2, NULL AS MemoNumber3, NULL AS MemoNumber4, NULL AS MemoText1, NULL AS MemoText2, NULL AS MemoText3, NULL AS MemoText4, 
Method, MethodEditCode, MICRBegin, MICREnd, NULL AS MICRFields, MICRFormat, MICRRequired, MinAge, NULL AS MinBalance, 
MinMICRLength, MinPayment, MinPaymentEditCode, MinTerm, NoJointA, NULL AS NoticeDays, NULL AS NoticeDaysEditCode, 
Officer, OfficerEditCode, OverdraftSource, OverdraftSourceExisting, OverdraftTarget, PaymentPercent, 
NULL AS PenaltyAmount, NULL AS PenaltyEditCode, NULL AS PenaltyRate, NULL AS PlanNumber, NULL AS PlanNumberEditCode, PreapprovalFlags, 
PreapproveCode, PreapproveLimit, ProductType, NULL AS PromptCertNumber, PromptCheckOrder, PromptIncomeCode, 
PromptMICR, Purpose, NULL AS Required, Requires, ReviewCycleDay, ReviewDate, ReviewDays, RoundPayment, SCode, 
ServiceClass, NULL AS SetupDist, SkipCode, SortOrder, StartSuffix, StatementOrder, StopSuffix, SuffixRange, 
TAIncludeExisting, NULL AS TargetAmount, NULL AS TargetAmountEditCode, NULL AS TaxCode, Term, TermEditCode, TermIncrement, 
NULL AS TermType, TotalAllowed, NULL AS UseMaturityTerm, VRLCode, VRLFreq, VRLIndex, VRLMargin, NULL AS W8TaxCode
FROM IMS.udt_LSubAccounts



GO
/****** Object:  View [IMS].[SubAccounts]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [IMS].[SubAccounts]
AS
SELECT     TOP 100 PERCENT *
FROM         IMS.udt_SSubAccounts
ORDER BY ProductType, DescAbrv

GO
/****** Object:  Table [IMS].[NewMemberPlasticCard]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[NewMemberPlasticCard](
	[TrackingNum] [int] NOT NULL,
	[Sequence] [smallint] NULL,
	[TypeCode] [char](1) NULL,
	[MemberNumber] [smallint] NULL,
	[StockCode] [char](1) NULL,
	[PAN] [char](20) NULL,
	[CardStatus] [smallint] NULL,
	[CardOrder] [smallint] NULL,
	[Name] [char](50) NULL,
	[Term] [smallint] NULL,
	[Expiration] [datetime] NULL,
	[AmountOnline] [int] NULL,
	[AmountOffline] [int] NULL,
	[POSOfflineLimit] [int] NULL,
	[POSOnlineLimit] [int] NULL,
	[LastChangeDate] [datetime] NULL,
	[PINOffset] [smallint] NULL,
	[VIPCode] [char](2) NULL,
	[Name2] [char](30) NULL,
	[OldPAN] [char](20) NULL,
	[CardCount] [smallint] NULL,
	[OrderBatch] [smallint] NULL,
	[OrderDate] [datetime] NULL,
	[Activation] [char](2) NULL,
	[TelepinAuth] [char](6) NULL,
	[Seller] [varchar](50) NULL,
	[Description] [char](60) NULL,
	[Approval] [char](1) NULL,
	[OverrideBy] [char](20) NULL,
	[Created] [char](1) NULL,
	[CreatedBy] [varchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[HostTrackingNum] [int] NULL,
	[ProductType] [char](4) NULL,
	[SSN] [char](9) NULL,
	[ErrorString] [char](80) NULL,
	[AutoGen] [char](1) NULL,
	[ApprovedBy] [varchar](50) NULL,
	[ApprovedOn] [datetime] NULL,
	[CollateralCode] [char](10) NULL,
	[ClientIP] [char](15) NULL,
	[Cardgen] [char](1) NULL,
	[WebIP] [char](15) NULL,
	[CardgenBy] [varchar](50) NULL,
	[ClusterID] [char](10) NULL,
	[CardgenOn] [datetime] NULL,
	[CardgenStatus] [char](100) NULL,
	[CardgenID] [char](60) NULL,
	[UniqueID] [char](10) NULL,
	[PSIErrorString] [char](80) NULL,
	[ChangeCode] [char](1) NULL,
	[JointSequence] [smallint] NULL,
	[PlasticType] [varchar](4) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[NewMemberPlasticCard]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  UserDefinedFunction [IMS].[fnFCCU_GetPCPlastic]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [IMS].[fnFCCU_GetPCPlastic] (@TrackingNum int, @CardStatus int, @TypeCode char(1))  
RETURNS TABLE
AS
RETURN (SELECT Top 1 PC.TrackingNum, PC.Sequence, PC.Description, PC.CardStatus, PC.TypeCode, PC.PAN, PC.Created, PC.AutoGen
FROM IMS.NewMemberPlasticCard AS PC
WHERE PC.TrackingNum = @TrackingNum AND (PC.CardStatus = 0 OR PC.CardStatus = 1) AND PC.TypeCode = @TypeCode AND PC.Created = 'Y')
GO
/****** Object:  View [IMS].[SubAccountTypes]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE view [IMS].[SubAccountTypes]
as
select UniqueId, Acc, DescAbrv as DescriptionAbrivation, StartSuffix, StopSuffix, ProductType
,MajorAccountType as DnaMajorAccountType, MinorAccountType as DnaMinorAccountType, SymitarId, SymitarType, SymitarCode, Description,
SymitarStatementGroup, SymitarIrsCode, SymitarDividendType, SymitarServiceCode
from ims.udt_ssubaccounts
GO
/****** Object:  Table [IMS].[ILA_ApplicationInfo]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[ILA_ApplicationInfo](
	[ApplyDate] [datetime] NULL,
	[ApplicationType] [char](1) NULL,
	[AppNumber] [varchar](30) NULL,
	[AppStatus] [varchar](30) NULL,
	[Account] [int] NULL,
	[PrimarySSN] [char](9) NULL,
	[Branch] [smallint] NULL,
	[ClosingBranch] [varchar](30) NULL,
	[Notes] [varchar](2000) NULL,
	[Mode] [varchar](10) NULL,
	[AmountFinanced] [int] NULL,
	[ApprovedRate] [int] NULL,
	[ApprovedTerm] [smallint] NULL,
	[NMRShoppingCartID] [int] NULL,
	[TrackingNum] [int] NOT NULL,
	[BadLoginAttempts] [int] NULL,
	[ThirdPartyIdentifier] [varchar](1000) NULL,
	[OaoIlaOptions] [int] NOT NULL,
 CONSTRAINT [pk_TrackingNum1] PRIMARY KEY CLUSTERED 
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[ILA_Borrower]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[ILA_Borrower](
	[BorrowerTypeCode] [char](1) NULL,
	[BorrowerNum] [smallint] NOT NULL,
	[Association] [varchar](20) NULL,
	[Account] [int] NULL,
	[FName] [varchar](20) NULL,
	[LName] [varchar](20) NULL,
	[MInitial] [varchar](20) NULL,
	[SSN] [char](9) NULL,
	[DriversLicenseNum] [varchar](30) NULL,
	[DriversLicenseState] [char](2) NULL,
	[DriversLicenseIssueDate] [datetime] NULL,
	[DriversLicenseExpirationDate] [datetime] NULL,
	[DOB] [datetime] NULL,
	[MaritalStatus] [char](1) NULL,
	[NumDependents] [char](2) NULL,
	[SelfEmployed] [char](1) NULL,
	[Retired] [char](1) NULL,
	[CashAssets] [int] NULL,
	[Gender] [char](1) NULL,
	[PreferredContactMethod] [char](10) NULL,
	[MortgageBalance] [int] NULL,
	[OtherAssets] [int] NULL,
	[TotalDebts] [int] NULL,
	[LossExists] [char](1) NULL,
	[TrackingNum] [int] NOT NULL,
	[ClientIP] [varchar](15) NULL,
	[WebIP] [varchar](15) NULL,
	[ClusterID] [char](10) NULL,
	[LastModified] [datetime] NULL,
	[ThirdPartyIdentifier] [varchar](1000) NULL,
	[HasMemberAccount] [varchar](20) NULL,
	[CreditScoreType1] [int] NULL,
	[CreditScoreType2] [int] NULL,
	[CreditScoreType3] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[TrackingNum] ASC,
	[BorrowerNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[NewMemberRequest]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[NewMemberRequest](
	[TrackingNum] [int] NOT NULL,
	[Account] [varchar](50) NULL,
	[Surname] [char](2) NULL,
	[Processed] [int] NULL,
	[Password] [varchar](24) NULL,
	[LastPassChange] [datetime] NULL,
	[CBTracking] [int] NULL,
	[BureauSetID] [int] NULL,
	[LOSID] [int] NULL,
	[CBDecision] [varchar](800) NULL,
	[LOSStatus] [varchar](20) NULL,
	[SUMMITDecision] [varchar](250) NULL,
	[PaperGrade] [varchar](10) NULL,
	[Preapproval] [varchar](800) NULL,
	[LOSDecision] [varchar](800) NULL,
	[FName] [varchar](30) NULL,
	[MInitial] [varchar](30) NULL,
	[LName] [varchar](30) NULL,
	[Prequalification] [varchar](800) NULL,
	[Gender] [varchar](20) NULL,
	[SSN] [char](9) NULL,
	[DOB] [datetime] NULL,
	[EMail1] [varchar](200) NULL,
	[OwnerCode] [char](1) NULL,
	[Branch] [varchar](10) NULL,
	[Employee] [varchar](20) NULL,
	[Department] [varchar](50) NULL,
	[CrossAcctCount] [tinyint] NULL,
	[Ref1] [varchar](8) NULL,
	[Ref2] [varchar](8) NULL,
	[Ref3] [varchar](8) NULL,
	[Ref4] [varchar](8) NULL,
	[DescAbrv] [char](3) NULL,
	[Description] [varchar](250) NULL,
	[ACC] [char](3) NULL,
	[JointNam1] [varchar](30) NULL,
	[JointNam2] [varchar](30) NULL,
	[JointNam3] [varchar](30) NULL,
	[EmployerId] [varchar](30) NULL,
	[MaidenName] [varchar](30) NULL,
	[Seller] [varchar](50) NULL,
	[ClassCode] [char](2) NULL,
	[DriversLicenseState] [char](4) NULL,
	[DriversLicenseNum] [varchar](30) NULL,
	[Qualification1] [varchar](100) NULL,
	[Qualification2] [varchar](100) NULL,
	[Relationship] [varchar](30) NULL,
	[NewChecking] [char](1) NULL,
	[DirectDeposit] [char](1) NULL,
	[InitialDeposit] [int] NULL,
	[PIN] [varchar](24) NULL,
	[Approval] [char](1) NULL,
	[OverrideBy] [varchar](20) NULL,
	[Created] [char](1) NULL,
	[AccountType] [char](2) NULL,
	[OrganizationName] [varchar](30) NULL,
	[CreatedBy] [varchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[HostTrackingNum] [int] NULL,
	[Age] [smallint] NULL,
	[ApplyDate] [datetime] NULL,
	[C24Access] [char](1) NULL,
	[Citizenship] [char](2) NULL,
	[BackupWithholding] [char](1) NULL,
	[Notes] [varchar](255) NULL,
	[ApprovalComments] [varchar](255) NULL,
	[CBManual] [char](1) NULL,
	[CBCode] [char](4) NULL,
	[CBScore] [char](4) NULL,
	[CurrBranch] [smallint] NULL,
	[OrigBranch] [smallint] NULL,
	[ErrorString] [varchar](80) NULL,
	[AffinityCode] [char](2) NULL,
	[HouseholdNumber] [int] NULL,
	[HouseholdCode] [char](1) NULL,
	[UserDate] [datetime] NULL,
	[ProxyDate] [datetime] NULL,
	[StatementCycle] [smallint] NULL,
	[AccessClass] [char](2) NULL,
	[EMCHProcessed] [char](1) NULL,
	[EMCHBy] [varchar](50) NULL,
	[EMCHOn] [datetime] NULL,
	[EMCHTrackingNum] [int] NULL,
	[SHNUProcessed] [char](1) NULL,
	[SHNUBy] [varchar](50) NULL,
	[SHNUOn] [datetime] NULL,
	[SHNUTrackingNum] [int] NULL,
	[EMCHErrorString] [varchar](255) NULL,
	[SHNUErrorString] [varchar](255) NULL,
	[ACCTProcessed] [char](1) NULL,
	[ACCTTrackingNum] [int] NULL,
	[ACCTErrorString] [varchar](255) NULL,
	[DocType] [char](2) NULL,
	[NewMemberFee] [int] NULL,
	[Cashback] [int] NULL,
	[W8Required] [char](1) NULL,
	[W8Type] [char](4) NULL,
	[TIDRequired] [char](1) NULL,
	[HostCommand] [char](4) NULL,
	[ServiceClass] [char](4) NULL,
	[TaxCode] [char](1) NULL,
	[AccountClass] [char](2) NULL,
	[EMCHOverrideBy] [varchar](50) NULL,
	[SHNUOverrideBy] [varchar](50) NULL,
	[RegDProcessed] [char](1) NULL,
	[RegDOverrideBy] [varchar](50) NULL,
	[RegDOn] [datetime] NULL,
	[RegDTrackingNum] [int] NULL,
	[RegDErrorString] [varchar](80) NULL,
	[IVRProcessed] [char](1) NULL,
	[IVROverrideBy] [varchar](50) NULL,
	[IVROn] [datetime] NULL,
	[IVRTrackingNum] [int] NULL,
	[IVRErrorString] [varchar](80) NULL,
	[RegDBy] [varchar](50) NULL,
	[IVRBy] [varchar](50) NULL,
	[CheckBack] [int] NULL,
	[CheckNumber] [varchar](20) NULL,
	[CheckPayee1] [varchar](30) NULL,
	[CheckPayee2] [varchar](30) NULL,
	[SourceAccount] [int] NULL,
	[SourceSuffix] [smallint] NULL,
	[SourceSurname] [char](2) NULL,
	[Qualification3] [varchar](100) NULL,
	[TotalFunds] [int] NULL,
	[JointTaxCode] [char](1) NULL,
	[UseTodayForDOB] [char](1) NULL,
	[W8OnFile] [char](2) NULL,
	[W8TaxCode] [char](1) NULL,
	[SameDayAvailable] [char](1) NULL,
	[FundAccount] [char](1) NULL,
	[RevocableTrust] [char](1) NULL,
	[IDType] [char](1) NULL,
	[IDSource] [varchar](12) NULL,
	[IDNumber] [varchar](30) NULL,
	[IDIssueDate] [datetime] NULL,
	[IDExpirationDate] [datetime] NULL,
	[PINNProcessed] [char](1) NULL,
	[PINNBy] [varchar](50) NULL,
	[PINNOverrideBy] [varchar](50) NULL,
	[PINNOn] [datetime] NULL,
	[PINNTrackingNum] [int] NULL,
	[PINNErrorString] [varchar](80) NULL,
	[IVRMProcessed] [char](1) NULL,
	[IVRMBy] [varchar](50) NULL,
	[IVRMOverrideBy] [varchar](50) NULL,
	[IVRMOn] [datetime] NULL,
	[IVRMTrackingNum] [int] NULL,
	[IVRMErrorString] [varchar](80) NULL,
	[C24Memo] [int] NULL,
	[C24Text] [varchar](80) NULL,
	[W8Processed] [char](1) NULL,
	[W8By] [varchar](50) NULL,
	[W8OverrideBy] [varchar](50) NULL,
	[W8On] [datetime] NULL,
	[W8TrackingNum] [int] NULL,
	[W8ErrorString] [varchar](80) NULL,
	[ModifiedDate] [datetime] NULL,
	[W8MemoNumber] [int] NULL,
	[ModifiedBy] [varchar](50) NULL,
	[W8ExpirationDate] [datetime] NULL,
	[Origin] [varchar](20) NULL,
	[Marketing1] [varchar](40) NULL,
	[Marketing2] [varchar](40) NULL,
	[Marketing3] [varchar](40) NULL,
	[Marketing4] [varchar](40) NULL,
	[CourtName] [varchar](60) NULL,
	[CaseNumber] [varchar](30) NULL,
	[AffirmationDate] [datetime] NULL,
	[FundsRequired] [char](10) NULL,
	[ScreenComplete] [char](2) NULL,
	[TrustDated] [datetime] NULL,
	[MECHTag] [varchar](40) NULL,
	[TagBeginEnd] [char](1) NULL,
	[ClientIP] [char](15) NULL,
	[WebIP] [char](15) NULL,
	[ClusterID] [char](10) NULL,
	[ScreenLossComplete] [char](2) NULL,
	[PrimaryJointFlag] [char](1) NULL,
	[ThirdPartyID] [varchar](80) NULL,
	[ResidenceCode] [char](1) NULL,
	[BypassCB] [char](1) NULL,
	[BypassCBBy] [varchar](50) NULL,
	[BypassCBOn] [datetime] NULL,
	[BypassReference] [varchar](200) NULL,
	[ForceCB] [char](1) NULL,
	[ForceCBBy] [varchar](50) NULL,
	[ForceCBOn] [datetime] NULL,
	[TaxIDType] [char](1) NULL,
	[RaceCode] [char](1) NULL,
	[BirthPlace] [varchar](30) NULL,
	[ClosedFlag] [char](1) NULL,
	[LossFlag] [char](1) NULL,
	[PSIErrorString] [varchar](80) NULL,
	[UserSessionXML] [text] NULL,
	[FundingComplete] [char](1) NULL,
	[TNExpireDate] [datetime] NULL,
	[FName2] [varchar](30) NULL,
	[LName2] [varchar](60) NULL,
	[PledgeAmount] [int] NULL,
	[SHWIProcessed] [char](1) NULL,
	[SHWIBy] [varchar](50) NULL,
	[SHWIOn] [datetime] NULL,
	[SHWITrackingNum] [int] NULL,
	[SHWIErrorString] [varchar](255) NULL,
	[SHWIOverrideBy] [varchar](50) NULL,
	[MIDBProcessed] [char](1) NULL,
	[MIDBBy] [varchar](50) NULL,
	[MIDBOn] [datetime] NULL,
	[MIDBTrackingNum] [int] NULL,
	[MIDBErrorString] [varchar](255) NULL,
	[MIDBOverrideBy] [varchar](50) NULL,
	[NewMemberFeeProcessed] [varchar](1) NULL,
	[NewMemberFeeProcessedOn] [datetime] NULL,
	[NewMemberFeeProcessedBy] [varchar](50) NULL,
 CONSTRAINT [PK_NewMemberRequest] PRIMARY KEY NONCLUSTERED 
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Index [TrackingNum]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE UNIQUE CLUSTERED INDEX [TrackingNum] ON [IMS].[NewMemberRequest]
(
	[TrackingNum] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  View [IMS].[vwApplicationSearch]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE view [IMS].[vwApplicationSearch]
as
(
	select
	'ILA' as psiApp, 
	i.TrackingNum as trackingNum,
	cast(i.appStatus as varchar(10)) as Status
	,b.SSN as TIN
	,b.DOB as dob
	,b.FName as firstName
	,b.LName as lastName
	,cast(b.Account as varchar(50)) as memberAccount
	,i.ApplyDate as AppDate

	from ims.ILA_ApplicationInfo i
	join ims.ILA_Borrower b on i.TrackingNum = b.TrackingNum
	where b.BorrowerTypeCode = 'P'

	union 

	select
	'NMR' as psiApp, 
	i.TrackingNum as trackingNum,
	case 
		when i.Processed = 1 then 'In Progress'
		when i.Processed = 999 then 'Completed' 
		when i.Processed = 998 then 'Cancelled'
	else '' 
	end as Status
	--cast(i.processed as varchar(10)) as Status
	,i.SSN as TIN
	,i.DOB as dob
	,i.FName as firstName
	,i.LName as lastName
	,cast(i.Account as varchar(50)) as memberAccount
	,i.ApplyDate as AppDate

	from ims.NewMemberRequest i
	where i.processed <> -1
)

GO
/****** Object:  Table [IMS].[ILA_Application]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[ILA_Application](
	[TrackingNum] [int] NOT NULL,
	[UserSessionXML] [varchar](max) NULL,
	[FullLenderResponse] [varchar](max) NULL,
	[ApplicationStatus] [varchar](500) NULL,
	[ApplicationStatusDetails] [varchar](500) NULL,
	[Password] [varchar](1000) NULL,
	[ApplicationSourceType] [varchar](500) NULL,
	[MemberValidatedSource] [varchar](100) NULL,
 CONSTRAINT [pk_TrackingNum] PRIMARY KEY CLUSTERED 
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  View [IMS].[vwIlaApplication]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE view [IMS].[vwIlaApplication]
As
	select 
	i.TrackingNum, i.ApplyDate, i.ApplicationType, i.AppNumber, i.AppStatus, i.Account, i.PrimarySSN, i.Branch, i.ClosingBranch, i.Notes
	, i.Mode, i.AmountFinanced, i.ApprovedRate, i.ApprovedTerm, i.NMRShoppingCartID, i.BadLoginAttempts
	, a.UserSessionXML, a.FullLenderResponse
	from ims.ILA_ApplicationInfo i
	join ims.ILA_Application a on i.TrackingNum = a.TrackingNum
GO
/****** Object:  Table [IMS].[udt_ManualApprovalAction]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[udt_ManualApprovalAction](
	[TrackingNum] [int] IDENTITY(1,1) NOT NULL,
	[ReasonCode] [char](32) NOT NULL,
	[Description] [char](80) NULL,
	[ActionCode] [char](1) NULL,
	[DataField] [char](20) NULL,
	[ErrorMessage] [char](200) NULL,
	[Category] [char](2) NULL,
	[ReasonDescription] [char](200) NULL,
	[Resolution] [char](200) NULL
) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [xReasonCode]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [xReasonCode] ON [IMS].[udt_ManualApprovalAction]
(
	[ReasonCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  View [IMS].[vwManualApprovals]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create view [IMS].[vwManualApprovals]
AS
Select 
Category, ReasonCode, Description, ActionCode
from ims.udt_ManualApprovalAction
group by Category, ReasonCode, Description, ActionCode
GO
/****** Object:  Table [IMS].[NewMemberLoanPlan]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[NewMemberLoanPlan](
	[TrackingNum] [int] NOT NULL,
	[Sequence] [int] NOT NULL,
	[Account] [int] NULL,
	[RawText] [char](100) NULL,
	[ParsedText] [char](100) NULL,
	[FinalText] [char](100) NULL,
	[ParseConfidence] [int] NULL,
	[LPID] [int] NULL,
	[OpenDisclosure] [char](1) NULL,
	[InsuranceCode] [char](2) NULL,
	[JointName] [char](100) NULL,
	[JointSSN] [char](9) NULL,
	[LPCorrection] [char](1) NULL,
	[LPChange] [char](1) NULL,
	[OpenDate] [datetime] NULL,
	[Approval] [char](1) NULL,
	[OverrideBy] [char](20) NULL,
	[Created] [char](1) NULL,
	[FLAGCreated] [char](1) NULL,
	[FLAGBy] [char](20) NULL,
	[FLAGOn] [datetime] NULL,
	[FLAGTrackingNum] [int] NULL,
	[FLAGErrorString] [char](100) NULL,
	[FLAGProcessed] [char](10) NULL,
	[FLAG2Created] [char](1) NULL,
	[FLAG2By] [char](20) NULL,
	[FLAG2On] [datetime] NULL,
	[FLAG2TrackingNum] [int] NULL,
	[FLAG2ErrorString] [char](100) NULL,
	[FLAG2Processed] [char](10) NULL,
	[MEMOCreated] [char](1) NULL,
	[MEMOBy] [char](20) NULL,
	[MEMOOn] [datetime] NULL,
	[MEMOTrackingNum] [int] NULL,
	[MEMOErrorString] [char](100) NULL,
	[MEMOProcessed] [char](10) NULL,
	[MEMO2Created] [char](1) NULL,
	[MEMO2By] [char](20) NULL,
	[MEMO2On] [datetime] NULL,
	[MEMO2TrackingNum] [int] NULL,
	[MEMO2ErrorString] [char](100) NULL,
	[MEMO2Processed] [char](10) NULL,
	[CreatedBy] [varchar](20) NULL,
	[CreatedOn] [datetime] NULL,
	[HostTrackingNum] [int] NULL,
	[ErrorString] [char](80) NULL,
	[PSIErrorString] [char](80) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[NewMemberLoanPlan]
(
	[TrackingNum] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  UserDefinedFunction [IMS].[fnCCCU_GetLP]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO


CREATE FUNCTION [IMS].[fnCCCU_GetLP] (@TrackingNum int)  
RETURNS TABLE
AS
RETURN (SELECT Top 1 LP.TrackingNum, LP.Sequence, LP.JointName, LP.JointSSN, LP.InsuranceCode
FROM NewMemberLoanPlan AS LP
WHERE LP.TrackingNum = @TrackingNum)


GO
/****** Object:  UserDefinedFunction [IMS].[fnSCFed_GetLP]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE FUNCTION [IMS].[fnSCFed_GetLP] (@TrackingNum int)  
RETURNS TABLE
AS
RETURN (SELECT Top 1 LP.TrackingNum, LP.Sequence, LP.JointName, LP.JointSSN, LP.InsuranceCode
FROM NewMemberLoanPlan AS LP
WHERE LP.TrackingNum = @TrackingNum)

GO
/****** Object:  Table [IMS].[NewMemberQuestion]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[NewMemberQuestion](
	[TrackingNum] [int] NULL,
	[QuestionID] [int] NULL,
	[Response] [varchar](200) NULL,
	[UniqueID] [varchar](50) NULL,
	[SLType] [char](1) NULL,
	[JointSequence] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[NewMemberQuestion]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  UserDefinedFunction [IMS].[fnCCCU_GetQuestion]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE FUNCTION [IMS].[fnCCCU_GetQuestion] (@TrackingNum int, @QuestionID char(3))  
RETURNS TABLE
AS
RETURN (SELECT Top 1 [TrackingNum], [QuestionID], [Response], [SLType]
FROM NewMemberQuestion AS QU
WHERE QU.TrackingNum = @TrackingNum AND QU.QuestionID = @QuestionID)


GO
/****** Object:  Table [IMS].[NewMemberIVRAccess]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[NewMemberIVRAccess](
	[TrackingNum] [int] NOT NULL,
	[Sequence] [smallint] NULL,
	[Account] [int] NULL,
	[Surname] [char](2) NULL,
	[AccessType] [char](2) NULL,
	[Approval] [varchar](50) NULL,
	[OverrideBy] [varchar](50) NULL,
	[Created] [char](1) NULL,
	[CreatedBy] [varchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[HostTrackingNum] [int] NULL,
	[ErrorString] [char](80) NULL,
	[XMTrackingNum] [int] NULL,
	[XMProcessed] [char](1) NULL,
	[XMBy] [varchar](50) NULL,
	[XMOn] [datetime] NULL,
	[XMErrorString] [char](80) NULL,
	[ClientIP] [char](15) NULL,
	[WebIP] [char](15) NULL,
	[ClusterID] [char](10) NULL,
	[ChangeCode] [char](1) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[NewMemberIVRAccess]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  UserDefinedFunction [IMS].[fnCCCU_GetIVR]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE FUNCTION [IMS].[fnCCCU_GetIVR] (@TrackingNum int)  
RETURNS TABLE
AS
RETURN (SELECT Top 1 IVR.TrackingNum, IVR.Sequence, IVR.Account
FROM NewMemberIVRAccess AS IVR
WHERE IVR.TrackingNum = @TrackingNum)
GO
/****** Object:  UserDefinedFunction [IMS].[fnSCFed_GetIVR]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE FUNCTION [IMS].[fnSCFed_GetIVR] (@TrackingNum int)  
RETURNS TABLE
AS
RETURN (SELECT Top 1 IVR.TrackingNum, IVR.Sequence, IVR.Account
FROM NewMemberIVRAccess AS IVR
WHERE IVR.TrackingNum = @TrackingNum)
GO
/****** Object:  Table [IMS].[NewMemberFunds]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[NewMemberFunds](
	[TrackingNum] [int] NOT NULL,
	[Sequence] [smallint] NOT NULL,
	[DocType] [char](2) NULL,
	[SourceAccount] [int] NULL,
	[SourceSuffix] [smallint] NULL,
	[SourceSurname] [char](2) NULL,
	[Amount] [int] NULL,
	[HoldCode] [char](2) NULL,
	[Processed] [char](1) NULL,
	[ProcessedBy] [varchar](50) NULL,
	[OverrideBy] [varchar](50) NULL,
	[ProcessedOn] [datetime] NULL,
	[HostTrackingNum] [int] NULL,
	[HostErrorString] [char](255) NULL,
	[SameDayAvailable] [int] NULL,
	[ReleaseDate] [datetime] NULL,
	[ClientIP] [char](15) NULL,
	[WebIP] [char](15) NULL,
	[ClusterID] [char](10) NULL,
	[EndingBalance] [int] NULL,
	[Available] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[NewMemberFunds]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  UserDefinedFunction [IMS].[fnSafe_GetFund]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [IMS].[fnSafe_GetFund] (@TrackingNum int, @seq int)  
RETURNS TABLE
AS
RETURN (SELECT Top 1 Fund.*, SA.Suffix, SA.Description
FROM NewMemberFunds AS Fund
LEFT JOIN NewMemberSubAccount AS SA ON Fund.TrackingNum = SA.TrackingNum AND Fund.SourceSuffix = SA.Sequence
WHERE Fund.TrackingNum = @TrackingNum AND Fund.Sequence = @seq)


GO
/****** Object:  Table [IMS].[NewMemberOverdraftLink]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[NewMemberOverdraftLink](
	[TrackingNum] [int] NOT NULL,
	[TargetSubAccount] [smallint] NULL,
	[SourceSubAccount] [smallint] NULL,
	[Approval] [char](3) NULL,
	[OverrideBy] [char](20) NULL,
	[Created] [char](1) NULL,
	[CreatedBy] [varchar](20) NULL,
	[CreatedOn] [datetime] NULL,
	[HostTrackingNum] [int] NULL,
	[ErrorString] [char](80) NULL,
	[CrossAccount] [int] NULL,
	[CrossSuffix] [smallint] NULL,
	[CrossSurname] [char](2) NULL,
	[OverdraftSequence] [smallint] NULL,
	[CrossType] [char](1) NULL,
	[ClientIP] [char](15) NULL,
	[WebIP] [char](15) NULL,
	[ClusterID] [char](10) NULL,
	[PSIErrorString] [char](80) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [Tracking]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [Tracking] ON [IMS].[NewMemberOverdraftLink]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  UserDefinedFunction [IMS].[fnSSCU_GetSAODPSeq]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE FUNCTION [IMS].[fnSSCU_GetSAODPSeq] (@TrackingNum INT, @ODSeq INT)
RETURNS TABLE
AS
RETURN (
SELECT Top 1 SA.TrackingNum, SA.Sequence, OL.OverdraftSequence, SA.Description, SA.DescAbrv, RIGHT('00' + SA.Suffix, 2) AS Suffix, TSA.Suffix AS TargetSuffix
FROM NewMemberSubAccount AS SA
INNER JOIN NewMemberOverdraftlink AS OL ON SA.Sequence = OL.SourceSubAccount AND OL.TrackingNum = @TrackingNum
INNER JOIN NewMemberSubAccount AS TSA ON OL.TargetSubAccount = TSA.Sequence AND TSA.TrackingNum = @TrackingNum AND TSA.Created = 'Y'
WHERE	SA.TrackingNum = @TrackingNum AND
		OL.OverdraftSequence = @ODSeq AND
		SA.Created IN ('Y', 'H') AND
		SA.ClosedFlag <> 'Y' AND
		SA.LossFlag <> 'Y' AND
		TSA.ClosedFlag <> 'Y' AND
		TSA.LossFlag <> 'Y')
GO
/****** Object:  UserDefinedFunction [IMS].[fnCCCU_GetSASeq]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [IMS].[fnCCCU_GetSASeq] (@TrackingNum int, @seq int)  
RETURNS TABLE
AS
RETURN (SELECT Top 1 *
FROM NewMemberSubAccount AS SA
WHERE SA.TrackingNum = @TrackingNum AND SA.Sequence = @seq)
GO
/****** Object:  UserDefinedFunction [IMS].[fnSafe_GetSASeq]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [IMS].[fnSafe_GetSASeq] (@TrackingNum INT, @seq INT)  
RETURNS TABLE
AS
RETURN (SELECT TOP 1 *
FROM IMS.NewMemberSubAccount AS SA
WHERE SA.TrackingNum = @TrackingNum AND SA.Sequence = @seq)
GO
/****** Object:  UserDefinedFunction [IMS].[fnONCU_GetSASeq]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE FUNCTION [IMS].[fnONCU_GetSASeq] (@TrackingNum int, @seq int)  
RETURNS TABLE
AS
RETURN (SELECT Top 1 *
FROM NewMemberSubAccount AS SA
WHERE SA.TrackingNum = @TrackingNum AND SA.Sequence = @seq)
GO
/****** Object:  UserDefinedFunction [IMS].[fnSSCU_GetSAType2nd]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [IMS].[fnSSCU_GetSAType2nd] (@TrackingNum int, @ProductType char(3), @SLType char(1))  
RETURNS TABLE
AS
RETURN (SELECT Top 1 [TrackingNum], [Suffix], [Sequence], [InsCode], [MiscField1], [DescAbrv], [OptInOptOutOptionID]
FROM NewMemberSubAccount AS SA
WHERE SA.TrackingNum = @TrackingNum AND SA.ProductType = @ProductType AND SA.Created = 'Y' AND SA.ClosedFlag <> 'Y' AND SA.LossFlag <> 'Y' AND SA.SLType = @SLType --AND SA.Sequence NOT IN (
	--SELECT Top 1 [Sequence]
	--FROM NewMemberSubAccount AS SA2
	--WHERE SA2.TrackingNum = @TrackingNum AND SA2.ProductType = @ProductType AND SA2.SLType = @SLType AND SA2.ClosedFlag <> 'Y' AND SA2.LossFlag <> 'Y')
	)


GO
/****** Object:  UserDefinedFunction [IMS].[fnAPGFCU_GetSA]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [IMS].[fnAPGFCU_GetSA] (@TrackingNum int, @ProductType char(3), @SLType char(1))  
RETURNS TABLE
AS
RETURN (SELECT Top 1 [TrackingNum], [Sequence], [InsCode], [MiscField1]
FROM NewMemberSubAccount AS SA
WHERE SA.TrackingNum = @TrackingNum AND SA.ProductType = @ProductType AND SA.SLType = @SLType AND SA.ClosedFlag <> 'Y' AND SA.LossFlag <> 'Y')

GO
/****** Object:  Table [IMS].[udt_JointOwnerTypes]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[udt_JointOwnerTypes](
	[TrackingNum] [int] IDENTITY(1,1) NOT NULL,
	[JOType] [char](2) NULL,
	[Description] [char](30) NULL,
	[AccountTypes] [char](80) NULL,
	[OwnerCode] [char](1) NULL,
	[AssocCode] [char](2) NULL,
	[C24Access] [char](1) NULL,
	[StmtPrint] [char](1) NULL,
	[JOCHTag] [char](100) NULL,
	[Individual] [char](1) NULL,
	[AutoAssociate] [char](1) NULL,
	[TagBeginEnd] [char](1) NULL,
	[MinRequired] [int] NULL,
	[PromptEligibility] [char](1) NULL,
	[PromptRelationship] [char](1) NULL,
	[StartingNumber] [int] NULL,
	[SortOrder] [int] NULL,
	[RequireID] [char](1) NULL,
	[ScreenLossAccounts] [char](1) NULL,
	[NoScreen] [char](1) NULL,
	[CBScreenNew] [char](1) NULL,
	[CBScreenExisting] [char](1) NULL,
	[RequireSSN] [char](1) NULL,
	[CalcPreapproval] [char](1) NULL,
	[CreateHost] [char](1) NULL,
	[FormPage] [char](20) NULL,
	[AllowPlasticCard] [char](1) NULL,
	[Titles] [char](100) NULL,
	[PromoteCode] [char](50) NULL,
	[TotalAllowed] [smallint] NULL,
	[MinAge] [int] NULL,
	[TotalAllowedExisting] [smallint] NULL,
	[MaxAge] [int] NULL,
	[MaxScreen] [int] NULL,
	[GroupOrder] [smallint] NULL,
	[CBScreenExistingForExisting] [char](1) NULL,
	[CBScreenNewForExisting] [char](1) NULL,
	[MinRequiredExisting] [int] NULL,
	[PromoteCodeExisting] [char](50) NULL,
	[ScreenExcludeProducts] [char](1) NULL,
	[TaxIDTypes] [char](20) NULL,
	[UseJointTaxCode] [char](1) NULL,
	[SendJointName] [char](1) NULL,
	[StartMemo] [int] NULL,
	[MemoFormat] [char](50) NULL,
	[BureauSetID] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[NewMemberJointOwner]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[NewMemberJointOwner](
	[TrackingNum] [int] NOT NULL,
	[Sequence] [smallint] NULL,
	[OwnerCode] [char](1) NULL,
	[FName] [char](30) NULL,
	[MInitial] [char](20) NULL,
	[LName] [char](30) NULL,
	[Address1] [char](40) NULL,
	[Address2] [char](40) NULL,
	[Address3] [char](40) NULL,
	[ApartmentNumber] [char](10) NULL,
	[City] [char](40) NULL,
	[State] [char](2) NULL,
	[Zip] [char](9) NULL,
	[CntryCode] [char](2) NULL,
	[CntryName] [char](40) NULL,
	[AreaCode] [char](3) NULL,
	[Phone] [char](8) NULL,
	[Ext] [char](5) NULL,
	[SSN] [char](9) NULL,
	[DOB] [datetime] NULL,
	[DriversLicenseNum] [char](30) NULL,
	[DriversLicenseState] [char](2) NULL,
	[AssocCode] [char](2) NULL,
	[WorkAC] [char](3) NULL,
	[WorkPhone] [char](7) NULL,
	[Citizenship] [char](2) NULL,
	[C24Access] [char](1) NULL,
	[StmtPrint] [char](1) NULL,
	[EMail1] [char](120) NULL,
	[JointOwnerType] [char](2) NULL,
	[JointAccount] [varchar](50) NULL,
	[Account] [int] NULL,
	[W8Required] [char](1) NULL,
	[W8Type] [char](4) NULL,
	[TIDRequired] [char](1) NULL,
	[HostCommand] [char](4) NULL,
	[CreateHost] [char](1) NULL,
	[Approval] [char](1) NULL,
	[OverrideBy] [char](20) NULL,
	[Created] [char](1) NULL,
	[CreatedBy] [varchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[HostTrackingNum] [int] NULL,
	[Department] [char](30) NULL,
	[Ref1] [char](12) NULL,
	[Ref2] [char](12) NULL,
	[Ref3] [char](12) NULL,
	[Ref4] [char](12) NULL,
	[Qualification1] [char](30) NULL,
	[Qualification2] [char](30) NULL,
	[Qualification3] [char](30) NULL,
	[Relationship] [char](30) NULL,
	[StartingNumber] [smallint] NULL,
	[SortOrder] [smallint] NULL,
	[PrimaryJoint] [char](1) NULL,
	[JOCHTag] [char](50) NULL,
	[TagBeginEnd] [char](1) NULL,
	[W8OnFile] [char](1) NULL,
	[W8MemoNumber] [int] NULL,
	[W8ExpirationDate] [datetime] NULL,
	[RelToPrimary] [char](30) NULL,
	[IDType] [char](1) NULL,
	[IDSource] [char](12) NULL,
	[IDNumber] [char](30) NULL,
	[IDIssueDate] [datetime] NULL,
	[IDExpirationDate] [datetime] NULL,
	[GrossIncome] [int] NULL,
	[BureauSetID] [int] NULL,
	[CBTracking] [int] NULL,
	[CBDecision] [char](1024) NULL,
	[CBCode] [char](20) NULL,
	[CBScore] [char](20) NULL,
	[SUMMITDecision] [char](250) NULL,
	[PaperGrade] [char](10) NULL,
	[Preapproval] [char](1024) NULL,
	[ChangeCode] [char](1) NULL,
	[Prequalification] [char](1024) NULL,
	[ScreenComplete] [char](2) NULL,
	[ErrorString] [char](100) NULL,
	[Title] [char](30) NULL,
	[MaidenName] [char](20) NULL,
	[AgeOfDelivery] [char](3) NULL,
	[ClientIP] [char](15) NULL,
	[WebIP] [char](15) NULL,
	[ClusterID] [char](10) NULL,
	[ScreenLossComplete] [char](1) NULL,
	[TaxIDType] [char](1) NULL,
	[BenePercent] [smallint] NULL,
	[CellAC] [char](3) NULL,
	[CellPhone] [char](7) NULL,
	[BirthPlace] [char](30) NULL,
	[County] [char](30) NULL,
	[PSIErrorString] [char](100) NULL,
	[W8ReceivedDate] [datetime] NULL,
	[TaxCountry] [char](2) NULL,
	[ForeignTIN] [varchar](30) NULL,
	[BypassCB] [char](1) NULL,
	[BypassCBBy] [varchar](50) NULL,
	[BypassCBOn] [datetime] NULL,
	[BypassReference] [varchar](200) NULL,
	[EmployerName] [char](30) NULL,
	[JobTitle] [char](45) NULL,
	[Gender] [char](1) NULL,
	[id] [int] IDENTITY(1,1) NOT NULL,
	[EmployerAddress1] [char](100) NULL,
	[EmployerAddress2] [char](100) NULL,
	[EmployerCity] [char](50) NULL,
	[EmployerState] [char](2) NULL,
	[EmployerZip] [char](10) NULL,
	[EmployerCountry] [char](30) NULL,
	[IncomeFrequency] [char](1) NULL,
	[Disqualified] [bit] NOT NULL,
 CONSTRAINT [PK_NewMemberJointOwner] PRIMARY KEY NONCLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Index [Tracking]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [Tracking] ON [IMS].[NewMemberJointOwner]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  UserDefinedFunction [IMS].[fnCalTech_GetJO]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE FUNCTION [IMS].[fnCalTech_GetJO] (@TrackingNum int, @joseq int)  
RETURNS TABLE
AS
RETURN (
SELECT Top 1
JO.TrackingNum,
JO.Citizenship AS Citizenship,
RTRIM(JO.FName) + ' ' + RTRIM(JO.LName) AS FullName,
RTRIM(JO.FName) AS FName,
RTRIM(JO.MInitial) AS MInitial,
RTRIM(JO.LName) AS LName,
CONVERT(CHAR(10), JO.DOB, 101) AS DOB,
RTRIM(JO.Address1 + CASE JO.Address2 WHEN '' THEN '' ELSE ', ' END + JO.Address2 + CASE JO.Address3 WHEN '' THEN '' ELSE ', ' END + JO.Address3) + ', ' + RTRIM(JO.City) + ', ' + JO.State + ' ' + CASE LEN(JO.Zip) WHEN 9 THEN LEFT(JO.zip, 5) + '-' + RIGHT(JO.Zip, 4) ELSE JO.Zip END AS FullAddress,
CASE WHEN ISNULL(JO.ApartmentNumber, '') = '' THEN RTRIM(RTRIM(JO.Address1) + ' ' + RTRIM(ISNULL(JO.Address2, '')) + ' ' + RTRIM(ISNULL(JO.Address3, ''))) ELSE RTRIM(RTRIM(JO.Address1) + ' ' + RTRIM(ISNULL(JO.Address2, '')) + ' ' + RTRIM(ISNULL(JO.Address3, ''))) + ' APT ' + JO.ApartmentNumber END AS Address,
--RTRIM(JO.Address1) AS Address,
JO.City + ', ' + JO.State + ' ' + CASE LEN(JO.Zip) WHEN 9 THEN LEFT(JO.Zip, 5) + '-' + RIGHT(JO.Zip, 4) ELSE JO.Zip END AS CityStateZip,
RTRIM(JO.City) AS City,
RTRIM(JO.State) AS State,
CASE LEN(JO.Zip) WHEN 9 THEN LEFT(JO.Zip, 5) + '-' + RIGHT(JO.Zip, 4) ELSE JO.Zip END AS Zip,
CASE WHEN JO.Phone <> '' THEN JO.AreaCode + '-' + LEFT(RTRIM(JO.Phone), 3) + '-' + RIGHT(RTRIM(JO.Phone), 4) END AS HFullPhone,
CASE WHEN JO.WorkPhone <> '' THEN JO.WorkAC + '-' + LEFT(RTRIM(JO.WorkPhone), 3) + '-' + RIGHT(RTRIM(JO.WorkPhone), 4) END AS WFullPhone,
CASE WHEN JO.CellPhone <> '' THEN JO.CellAC + '-' + LEFT(RTRIM(JO.CellPhone), 3) + '-' + RIGHT(RTRIM(JO.CellPhone), 4) END AS CFullPhone,
RTRIM(JO.Email1) AS Email,
CASE JOT.Individual WHEN 'Y' THEN LEFT(JO.SSN, 3) + '-' + LEFT(RIGHT(JO.SSN, 6), 2) + '-' + RIGHT(JO.SSN, 4) ELSE LEFT(JO.SSN, 2) + '-' + RIGHT(JO.SSN, 7) END AS SSN,
CASE JO.IDType WHEN 'D' THEN JO.DriversLicenseNum ELSE JO.IDSource + ': ' + JO.IDNumber END AS ID,
CONVERT(CHAR(10), JO.IDIssueDate, 101) AS IDIssueDate,
CONVERT(CHAR(10), JO.IDExpirationDate, 101) AS IDExpDate,
JO.DriversLicenseState AS IDState,
JO.Relationship AS Relationship,
RTRIM(JO.Title) AS Title,
RTRIM(JO.EmployerName) AS EmployerName,
RTRIM(JO.JobTitle) AS JobTitle
FROM IMS.NewMemberJointOwner AS JO
INNER JOIN IMS.udt_JointOwnerTypes AS JOT ON JO.JointOwnerType = JOT.JOType
WHERE JO.TrackingNum = @TrackingNum AND JO.Sequence = @joseq)
GO
/****** Object:  Table [IMS].[NewMemberJointLink]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[NewMemberJointLink](
	[TrackingNum] [int] NOT NULL,
	[Sequence] [smallint] NULL,
	[JointSequence] [smallint] NULL,
	[SubAccountSequence] [smallint] NULL,
	[Approval] [char](1) NULL,
	[OverrideBy] [char](20) NULL,
	[Created] [char](1) NULL,
	[ErrorString] [char](80) NULL,
	[CreatedBy] [varchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[HostTrackingNum] [char](10) NULL,
	[AssocCode] [char](2) NULL,
	[C24Access] [char](1) NULL,
	[StmtPrint] [char](1) NULL,
	[JOCHTag] [char](100) NULL,
	[JOType] [char](2) NULL,
	[StartingNumber] [smallint] NULL,
	[SortOrder] [smallint] NULL,
	[PrimaryJoint] [char](1) NULL,
	[TagBeginEnd] [char](1) NULL,
	[JointOwnerNumber] [smallint] NULL,
	[CurrentJONumber] [char](10) NULL,
	[ChangeCode] [char](1) NULL,
	[ClientIP] [char](15) NULL,
	[WebIP] [char](15) NULL,
	[ClusterID] [char](10) NULL,
	[PSIErrorString] [char](80) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[NewMemberJointLink]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  UserDefinedFunction [IMS].[fnCCCU_GetJO]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE FUNCTION [IMS].[fnCCCU_GetJO] (@TrackingNum int, @joseq int)  
RETURNS TABLE
AS
RETURN (SELECT Top 1
	JO.TrackingNum
	, RTRIM(JO.FName) AS FName
	, RTRIM(JO.MInitial) AS MInitial
	, RTRIM(JO.LName) AS LName
	, RTRIM(JO.FName) + ' ' + RTRIM(JO.LName) AS FullName
	, RTRIM(JO.JOCHTag) AS JOCHTag
	, RTRIM(JO.Address1 + CASE JO.Address2 WHEN '' THEN ''ELSE', ' END + JO.Address2 + CASE JO.Address3 WHEN '' THEN '' ELSE', ' END + JO.Address3) + ', ' + RTRIM(JO.City) + ', ' + JO.State + ' ' + CASE LEN(JO.Zip) WHEN 9 THEN LEFT(JO.Zip, 5) + '-' + Right(JO.Zip, 4) ELSE JO.Zip END AS FullAddress
	, JO.Address1 AS Address
	, JO.City AS City
	, JO.State AS State
	, CASE LEN(JO.Zip) WHEN 9 THEN LEFT(JO.Zip, 5) + '-' + Right(JO.Zip, 4) ELSE JO.Zip END AS Zip
	, RTRIM(JO.City) + ', ' + JO.State + ' ' + CASE LEN(JO.Zip) WHEN 9 THEN LEFT(JO.Zip, 5) + '-' + Right(JO.Zip, 4) ELSE JO.Zip END AS CityStateZip
	, RTRIM(JO.Address1 + CASE JO.Address2 WHEN '' THEN ''ELSE', ' END + JO.Address2 + CASE JO.Address3 WHEN '' THEN '' ELSE', ' END + JO.Address3) AS Address12
	, JO.AreaCode AS HPhoneAC
	, LEFT(JO.Phone, 3) + '-' + RIGHT(RTRIM(JO.Phone), 4) AS HPhone
	, JO.AreaCode + '-' + LEFT(JO.Phone, 3) + '-' + RIGHT(RTRIM(JO.Phone), 4) AS HPhoneFull
	, JO.WorkAC AS WPhoneAC
	, LEFT(JO.WorkPhone, 3) + '-' + RIGHT(RTRIM(JO.WorkPhone), 4) AS WPhone
	, JO.WorkAC + '-' + LEFT(JO.WorkPhone, 3) + '-' + RIGHT(RTRIM(JO.WorkPhone), 4) AS WPhoneFull
	, JO.CellAC + '-' + LEFT(JO.CellPhone, 3) + '-' + RIGHT(RTRIM(JO.CellPhone), 4) AS CPhoneFull
	, CONVERT(char(10), JO.DOB, 101) AS DOB
	, CASE JOT.Individual WHEN 'Y' THEN Left(JO.SSN, 3) + '-' + LEFT(RIGHT(JO.SSN, 6), 2) + '-' + RIGHT(JO.SSN, 4) ELSE LEFT(JO.SSN, 2) + '-' + RIGHT(JO.SSN, 7) END AS SSN
	, CASE JO.IDType WHEN 'D' THEN 'Drivers License' ELSE JO.IDSource END AS IDSource
	, CASE JO.IDType WHEN 'D' THEN JO.DriversLicenseNum ELSE JO.IDNumber END AS IDNumber
	, CONVERT(char(10), JO.IDIssueDate, 101) AS IDIssueDate
	, CONVERT(char(10), JO.IDExpirationDate, 101) AS IDExpireDate
	, JO.DriversLicenseState AS IDState
	, JO.Title As Title
	, JO.JointOwnerType
FROM IMS.NewMemberJointOwner As JO INNER JOIN IMS.udt_JointOwnerTypes AS JOT On JO.JointOwnerType = JOT.JOType
INNER JOIN IMS.NewMemberJointLink AS JL ON JO.Sequence = JL.JointSequence AND JL.TrackingNum = @TrackingNum
INNER JOIN IMS.NewMemberSubAccount AS SA ON JL.SubAccountSequence = SA.Sequence AND SA.TrackingNum = @TrackingNum
WHERE JO.TrackingNum = @TrackingNum AND JO.Sequence = @joseq AND SA.ProductType IN ('CC','CCA','IRA','LOC','MMA','PSA','RSA','SDA') AND SA.ClosedFlag <> 'Y')



GO
/****** Object:  UserDefinedFunction [IMS].[fnCFCU_GetJO]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE FUNCTION [IMS].[fnCFCU_GetJO] (@TrackingNum int, @joseq int)  
RETURNS TABLE
AS
RETURN (SELECT TOP 1
	JO.TrackingNum
	, RTRIM(JO.fname) + ' ' + RTRIM(JO.lname) AS FullName
	, RTRIM(JO.Address1 + CASE JO.Address2 WHEN '' THEN ''ELSE', ' END + JO.Address2 + CASE JO.Address3 WHEN '' THEN '' ELSE', ' END + JO.Address3) + ', ' + RTRIM(JO.City) + ', ' + JO.State + ' ' + CASE LEN(JO.Zip) WHEN 9 THEN LEFT(JO.Zip, 5) + '-' + Right(JO.Zip, 4) ELSE JO.Zip END AS FullAddress
	, JO.Address1 AS Address
	, JO.City AS City
	, JO.State AS State
	, CASE LEN(JO.Zip) WHEN 9 THEN LEFT(JO.Zip, 5) + '-' + Right(JO.Zip, 4) ELSE JO.Zip END AS Zip
	, RTRIM(JO.City) + ', ' + JO.State + ' ' + CASE LEN(JO.Zip) WHEN 9 THEN LEFT(JO.Zip, 5) + '-' + Right(JO.Zip, 4) ELSE JO.Zip END AS CityStateZip
	, RTRIM(JO.Address1 + CASE JO.Address2 WHEN '' THEN ''ELSE', ' END + JO.Address2 + CASE JO.Address3 WHEN '' THEN '' ELSE', ' END + JO.Address3) AS Address12
	, JO.AreaCode AS HPhoneAC
	, LEFT(JO.Phone, 3) + '-' + RIGHT(RTRIM(JO.Phone), 4) AS HPhone
	, JO.AreaCode + '-' + LEFT(JO.Phone, 3) + '-' + RIGHT(RTRIM(JO.Phone), 4) AS HPhoneFull
	, JO.WorkAC AS WPhoneAC
	, LEFT(JO.WorkPhone, 3) + '-' + RIGHT(RTRIM(JO.WorkPhone), 4) AS WPhone
	, JO.WorkAC + '-' + LEFT(JO.WorkPhone, 3) + '-' + RIGHT(RTRIM(JO.WorkPhone), 4) AS WPhoneFull
	, JO.CellAC + '-' + LEFT(JO.CellPhone, 3) + '-' + RIGHT(RTRIM(JO.CellPhone), 4) AS CPhoneFull
	, RTRIM(JO.Email1) AS Email
	, CONVERT(CHAR(10), JO.DOB, 101) AS DOB
	, CASE JOT.Individual WHEN 'Y' THEN Left(JO.SSN, 3) + '-' + LEFT(RIGHT(JO.SSN, 6), 2) + '-' + RIGHT(JO.SSN, 4) ELSE LEFT(JO.SSN, 2) + '-' + RIGHT(JO.SSN, 7) END AS SSN
	, CASE WHEN JO.IDType = 'D' AND JO.DriversLicenseState <> '' AND JO.DriversLicenseNum <> '' THEN 'Drivers License' ELSE JO.IDSource END AS IDSource
	, CASE JO.IDType WHEN 'D' THEN JO.DriversLicenseNum ELSE JO.IDNumber END AS IDNumber
	, CONVERT(CHAR(10), JO.IDIssueDate, 101) AS IDIssueDate
	, CONVERT(CHAR(10), JO.IDExpirationDate, 101) AS IDExpireDate
	, JO.DriversLicenseState AS IDState
	, JO.Title AS Title
	, JO.JointOwnerType
	, JO.CreateHost AS Created
	, JO.EmployerName AS EmployerName
	, JO.JobTitle AS JobTitle
FROM IMS.NewMemberJointOwner AS JO INNER JOIN IMS.udt_JointOwnerTypes AS JOT On JO.JointOwnerType = JOT.JOType
WHERE JO.TrackingNum = @TrackingNum AND JO.Sequence = @joseq)
GO
/****** Object:  UserDefinedFunction [IMS].[fnFCCU_GetSASeq]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE FUNCTION [IMS].[fnFCCU_GetSASeq] (@TrackingNum int, @seq int)  
RETURNS TABLE
AS
RETURN (SELECT Top 1 *
FROM NewMemberSubAccount AS SA
WHERE SA.TrackingNum = @TrackingNum AND SA.Sequence = @seq)
GO
/****** Object:  UserDefinedFunction [IMS].[fnFCCU_GetJO]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE FUNCTION [IMS].[fnFCCU_GetJO] (@TrackingNum int, @joseq int)  
RETURNS TABLE
AS
RETURN (SELECT TOP 1
	JO.TrackingNum
	, JOT.JOType
	, JOT.Description AS JOTypeDescription
	, RTRIM(JO.FName) AS FirstName
	, RTRIM(JO.MInitial) AS MiddleInitial
	, RTRIM(JO.LName) AS LastName
	, RTRIM(JO.FName) + ' ' + RTRIM(JO.LName) AS FullName
	, RTRIM(JO.Address1 + CASE JO.Address2 WHEN '' THEN ''ELSE', ' END + JO.Address2 + CASE JO.Address3 WHEN '' THEN '' ELSE', ' END + JO.Address3) + ', ' + RTRIM(JO.City) + ', ' + JO.State + ' ' + CASE LEN(JO.Zip) WHEN 9 THEN LEFT(JO.Zip, 5) + '-' + Right(JO.Zip, 4) ELSE JO.Zip END AS FullAddress
	, JO.Address1 AS Address
	, JO.City AS City
	, JO.State AS State
	, CASE LEN(JO.Zip) WHEN 9 THEN LEFT(JO.Zip, 5) + '-' + Right(JO.Zip, 4) ELSE JO.Zip END AS Zip
	, RTRIM(JO.City) + ', ' + JO.State + ' ' + CASE LEN(JO.Zip) WHEN 9 THEN LEFT(JO.Zip, 5) + '-' + Right(JO.Zip, 4) ELSE JO.Zip END AS CityStateZip
	, RTRIM(JO.Address1 + CASE JO.Address2 WHEN '' THEN ''ELSE', ' END + JO.Address2 + CASE JO.Address3 WHEN '' THEN '' ELSE', ' END + JO.Address3) AS Address12
	, JO.AreaCode AS HPhoneAC
	, LEFT(JO.Phone, 3) + '-' + RIGHT(RTRIM(JO.Phone), 4) AS HPhone
	, JO.AreaCode + '-' + LEFT(JO.Phone, 3) + '-' + RIGHT(RTRIM(JO.Phone), 4) AS HPhoneFull
	, JO.WorkAC AS WPhoneAC
	, LEFT(JO.WorkPhone, 3) + '-' + RIGHT(RTRIM(JO.WorkPhone), 4) AS WPhone
	, JO.WorkAC + '-' + LEFT(JO.WorkPhone, 3) + '-' + RIGHT(RTRIM(JO.WorkPhone), 4) AS WPhoneFull
	, JO.CellAC + '-' + LEFT(JO.CellPhone, 3) + '-' + RIGHT(RTRIM(JO.CellPhone), 4) AS CPhoneFull
	, CONVERT(CHAR(10), JO.DOB, 101) AS DOB
	, CASE JOT.Individual WHEN 'Y' THEN Left(JO.SSN, 3) + '-' + LEFT(RIGHT(JO.SSN, 6), 2) + '-' + RIGHT(JO.SSN, 4) ELSE LEFT(JO.SSN, 2) + '-' + RIGHT(JO.SSN, 7) END AS SSN
	, CASE WHEN JO.IDType = 'D' AND JO.DriversLicenseState <> '' AND JO.DriversLicenseNum <> '' THEN 'Drivers License' ELSE JO.IDSource END AS IDSource
	, CASE JO.IDType WHEN 'D' THEN JO.DriversLicenseNum ELSE JO.IDNumber END AS IDNumber
	, CONVERT(CHAR(10), JO.IDIssueDate, 101) AS IDIssueDate
	, CONVERT(CHAR(10), JO.IDExpirationDate, 101) AS IDExpireDate
	, JO.DriversLicenseState AS IDState
	, JO.Title AS Title
	, JO.JointOwnerType
	, JO.CreateHost AS Created
	, JO.EmployerName AS EmployerName
	, JO.JobTitle AS JobTitle
	, JO.Relationship AS Relationship
FROM IMS.NewMemberJointOwner AS JO INNER JOIN IMS.udt_JointOwnerTypes AS JOT On JO.JointOwnerType = JOT.JOType
INNER JOIN IMS.NewMemberJointLink AS JL ON JO.Sequence = JL.JointSequence AND JL.TrackingNum = @TrackingNum
INNER JOIN IMS.NewMemberSubAccount AS SA ON JL.SubAccountSequence = SA.Sequence AND SA.TrackingNum = @TrackingNum
WHERE JO.TrackingNum = @TrackingNum AND (JL.Created = 'Y' OR JL.Created = 'H') AND JO.Sequence = @joseq AND SA.ProductType IN ('CC','CCA','IRA','LOC','MMA','PSA','RSA','SDA') AND SA.ClosedFlag <> 'Y')


GO
/****** Object:  UserDefinedFunction [IMS].[fnOFCU_GetJO]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE FUNCTION [IMS].[fnOFCU_GetJO] (@TrackingNum int, @joseq int)  
RETURNS TABLE
AS
RETURN (SELECT TOP 1
	JO.TrackingNum
	, RTRIM(JO.fname) + ' ' + RTRIM(JO.lname) AS FullName
	, RTRIM(JO.Address1 + CASE JO.Address2 WHEN '' THEN ''ELSE', ' END + JO.Address2 + CASE JO.Address3 WHEN '' THEN '' ELSE', ' END + JO.Address3) + ', ' + RTRIM(JO.City) + ', ' + JO.State + ' ' + CASE LEN(JO.Zip) WHEN 9 THEN LEFT(JO.Zip, 5) + '-' + Right(JO.Zip, 4) ELSE JO.Zip END AS FullAddress
	, JO.Address1 AS Address
	, JO.City AS City
	, JO.State AS State
	, CASE LEN(JO.Zip) WHEN 9 THEN LEFT(JO.Zip, 5) + '-' + Right(JO.Zip, 4) ELSE JO.Zip END AS Zip
	, RTRIM(JO.City) + ', ' + JO.State + ' ' + CASE LEN(JO.Zip) WHEN 9 THEN LEFT(JO.Zip, 5) + '-' + Right(JO.Zip, 4) ELSE JO.Zip END AS CityStateZip
	, RTRIM(JO.Address1 + CASE JO.Address2 WHEN '' THEN ''ELSE', ' END + JO.Address2 + CASE JO.Address3 WHEN '' THEN '' ELSE', ' END + JO.Address3) AS Address12
	, JO.AreaCode AS HPhoneAC
	, LEFT(JO.Phone, 3) + '-' + RIGHT(RTRIM(JO.Phone), 4) AS HPhone
	, JO.AreaCode + '-' + LEFT(JO.Phone, 3) + '-' + RIGHT(RTRIM(JO.Phone), 4) AS HPhoneFull
	, JO.WorkAC AS WPhoneAC
	, LEFT(JO.WorkPhone, 3) + '-' + RIGHT(RTRIM(JO.WorkPhone), 4) AS WPhone
	, JO.WorkAC + '-' + LEFT(JO.WorkPhone, 3) + '-' + RIGHT(RTRIM(JO.WorkPhone), 4) AS WPhoneFull
	, JO.CellAC + '-' + LEFT(JO.CellPhone, 3) + '-' + RIGHT(RTRIM(JO.CellPhone), 4) AS CPhoneFull
	, RTRIM(JO.Email1) AS Email
	, CONVERT(CHAR(10), JO.DOB, 101) AS DOB
	, CASE JOT.Individual WHEN 'Y' THEN Left(JO.SSN, 3) + '-' + LEFT(RIGHT(JO.SSN, 6), 2) + '-' + RIGHT(JO.SSN, 4) ELSE LEFT(JO.SSN, 2) + '-' + RIGHT(JO.SSN, 7) END AS SSN
	, CASE WHEN JO.IDType = 'D' AND JO.DriversLicenseState <> '' AND JO.DriversLicenseNum <> '' THEN 'Drivers License' ELSE JO.IDSource END AS IDSource
	, CASE JO.IDType WHEN 'D' THEN JO.DriversLicenseNum ELSE JO.IDNumber END AS IDNumber
	, CONVERT(CHAR(10), JO.IDIssueDate, 101) AS IDIssueDate
	, CONVERT(CHAR(10), JO.IDExpirationDate, 101) AS IDExpireDate
	, JO.DriversLicenseState AS IDState
	, JO.Title AS Title
	, JO.JointOwnerType
	, JO.CreateHost AS Created
	, JO.EmployerName AS EmployerName
	, JO.JobTitle AS JobTitle
FROM IMS.NewMemberJointOwner AS JO INNER JOIN IMS.udt_JointOwnerTypes AS JOT On JO.JointOwnerType = JOT.JOType
WHERE JO.TrackingNum = @TrackingNum AND JO.Sequence = @joseq)
GO
/****** Object:  UserDefinedFunction [IMS].[fnFCCU_GetCL]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [IMS].[fnFCCU_GetCL] (@TrackingNum int, @certseq int, @type1 char(1), @type2 char(1))  
RETURNS TABLE
AS
RETURN (SELECT Top 1 CL.TrackingNum, CL.RelatedSequence, CL.TargetSequence, CL.TargetType, CL.CrossAccount, CL.CrossSuffix
FROM NewMemberCertificateLink As CL
WHERE CL.TrackingNum = @TrackingNum AND CL.TargetSequence = @certseq AND (CL.TargetType = @type1 OR CL.TargetType = @type2))








GO
/****** Object:  UserDefinedFunction [IMS].[fnSCFed_GetJO]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE FUNCTION [IMS].[fnSCFed_GetJO] (@TrackingNum int, @joseq int)  
RETURNS TABLE
AS
RETURN (SELECT TOP 1
	JO.TrackingNum
	, RTRIM(JO.fname) + ' ' + RTRIM(JO.lname) AS FullName
	, RTRIM(JO.Address1 + CASE JO.Address2 WHEN '' THEN ''ELSE', ' END + JO.Address2 + CASE JO.Address3 WHEN '' THEN '' ELSE', ' END + JO.Address3) + ', ' + RTRIM(JO.City) + ', ' + JO.State + ' ' + CASE LEN(JO.Zip) WHEN 9 THEN LEFT(JO.Zip, 5) + '-' + Right(JO.Zip, 4) ELSE JO.Zip END AS FullAddress
	, JO.Address1 AS Address
	, JO.City AS City
	, JO.State AS State
	, CASE LEN(JO.Zip) WHEN 9 THEN LEFT(JO.Zip, 5) + '-' + Right(JO.Zip, 4) ELSE JO.Zip END AS Zip
	, RTRIM(JO.City) + ', ' + JO.State + ' ' + CASE LEN(JO.Zip) WHEN 9 THEN LEFT(JO.Zip, 5) + '-' + Right(JO.Zip, 4) ELSE JO.Zip END AS CityStateZip
	, RTRIM(JO.Address1 + CASE JO.Address2 WHEN '' THEN ''ELSE', ' END + JO.Address2 + CASE JO.Address3 WHEN '' THEN '' ELSE', ' END + JO.Address3) AS Address12
	, JO.AreaCode AS HPhoneAC
	, LEFT(JO.Phone, 3) + '-' + RIGHT(RTRIM(JO.Phone), 4) AS HPhone
	, JO.AreaCode + '-' + LEFT(JO.Phone, 3) + '-' + RIGHT(RTRIM(JO.Phone), 4) AS HPhoneFull
	, JO.WorkAC AS WPhoneAC
	, LEFT(JO.WorkPhone, 3) + '-' + RIGHT(RTRIM(JO.WorkPhone), 4) AS WPhone
	, JO.WorkAC + '-' + LEFT(JO.WorkPhone, 3) + '-' + RIGHT(RTRIM(JO.WorkPhone), 4) AS WPhoneFull
	, JO.CellAC + '-' + LEFT(JO.CellPhone, 3) + '-' + RIGHT(RTRIM(JO.CellPhone), 4) AS CPhoneFull
	, CONVERT(CHAR(10), JO.DOB, 101) AS DOB
	, CASE JOT.Individual WHEN 'Y' THEN Left(JO.SSN, 3) + '-' + LEFT(RIGHT(JO.SSN, 6), 2) + '-' + RIGHT(JO.SSN, 4) ELSE LEFT(JO.SSN, 2) + '-' + RIGHT(JO.SSN, 7) END AS SSN
	, CASE WHEN JO.IDType = 'D' AND JO.DriversLicenseState <> '' AND JO.DriversLicenseNum <> '' THEN 'Drivers License' ELSE JO.IDSource END AS IDSource
	, CASE JO.IDType WHEN 'D' THEN JO.DriversLicenseNum ELSE JO.IDNumber END AS IDNumber
	, CONVERT(CHAR(10), JO.IDIssueDate, 101) AS IDIssueDate
	, CONVERT(CHAR(10), JO.IDExpirationDate, 101) AS IDExpireDate
	, JO.DriversLicenseState AS IDState
	, JO.Title AS Title
	, JO.JointOwnerType
	, JO.CreateHost AS Created
	, JO.EmployerName AS EmployerName
	, JO.JobTitle AS JobTitle
FROM IMS.NewMemberJointOwner AS JO INNER JOIN IMS.udt_JointOwnerTypes AS JOT On JO.JointOwnerType = JOT.JOType
INNER JOIN IMS.NewMemberJointLink AS JL ON JO.Sequence = JL.JointSequence AND JL.TrackingNum = @TrackingNum
INNER JOIN IMS.NewMemberSubAccount AS SA ON JL.SubAccountSequence = SA.Sequence AND SA.TrackingNum = @TrackingNum
WHERE JO.TrackingNum = @TrackingNum AND (JL.Created = 'Y' OR JL.Created = 'H') AND JO.Sequence = @joseq AND SA.ProductType IN ('CC','CCA','IRA','LOC','MMA','PSA','RSA','SDA') AND SA.ClosedFlag <> 'Y')


GO
/****** Object:  UserDefinedFunction [IMS].[fnONCU_GetJO]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [IMS].[fnONCU_GetJO] (@TrackingNum int, @joseq int)  
RETURNS TABLE
AS
RETURN (SELECT Top 1
	JO.TrackingNum
	, RTRIM(JO.FName) AS FName
	, RTRIM(JO.MInitial) AS MInitial
	, RTRIM(JO.LName) AS LName
	, RTRIM(JO.FName) + ' ' + RTRIM(JO.LName) AS FullName
	, RTRIM(JO.JOCHTag) AS JOCHTag
	, RTRIM(JO.Address1 + CASE JO.Address2 WHEN '' THEN ''ELSE', ' END + JO.Address2 + CASE JO.Address3 WHEN '' THEN '' ELSE', ' END + JO.Address3) + ', ' + RTRIM(JO.City) + ', ' + JO.State + ' ' + CASE LEN(JO.Zip) WHEN 9 THEN LEFT(JO.Zip, 5) + '-' + Right(JO.Zip, 4) ELSE JO.Zip END AS FullAddress
	, JO.Address1 AS Address
	, JO.Address2 AS Address2
	, JO.ApartmentNumber AS Apartment
	, JO.City AS City
	, JO.State AS State
	, CASE LEN(JO.Zip) WHEN 9 THEN LEFT(JO.Zip, 5) + '-' + Right(JO.Zip, 4) ELSE JO.Zip END AS Zip
	, RTRIM(JO.City) + ', ' + JO.State + ' ' + CASE LEN(JO.Zip) WHEN 9 THEN LEFT(JO.Zip, 5) + '-' + Right(JO.Zip, 4) ELSE JO.Zip END AS CityStateZip
	, RTRIM(JO.Address1 + CASE JO.Address2 WHEN '' THEN ''ELSE', ' END + JO.Address2 + CASE JO.Address3 WHEN '' THEN '' ELSE', ' END + JO.Address3) AS Address12
	, JO.AreaCode AS HPhoneAC
	, LEFT(JO.Phone, 3) + '-' + RIGHT(RTRIM(JO.Phone), 4) AS HPhone
	, JO.AreaCode + '-' + LEFT(JO.Phone, 3) + '-' + RIGHT(RTRIM(JO.Phone), 4) AS HPhoneFull
	, JO.WorkAC AS WPhoneAC
	, LEFT(JO.WorkPhone, 3) + '-' + RIGHT(RTRIM(JO.WorkPhone), 4) AS WPhone
	, JO.WorkAC + '-' + LEFT(JO.WorkPhone, 3) + '-' + RIGHT(RTRIM(JO.WorkPhone), 4) AS WPhoneFull
	, JO.CellAC + '-' + LEFT(JO.CellPhone, 3) + '-' + RIGHT(RTRIM(JO.CellPhone), 4) AS CPhoneFull
	, JO.IDType
	, CASE JO.IDType WHEN 'D' THEN '' ELSE JO.IDSource END AS IDSource
	, CASE JO.IDType WHEN 'D' THEN JO.DriversLicenseNum ELSE JO.IDNumber END AS IDNumber
	, CONVERT(char(10), JO.IDIssueDate, 101) AS IDIssueDate
	, CONVERT(char(10), JO.IDExpirationDate, 101) AS IDExpireDate
	, CASE JO.IDType WHEN 'D' THEN JO.DriversLicenseState ELSE '' END AS IDState
	, CONVERT(char(10), JO.DOB, 101) AS DOB
	, CASE WHEN JO.SSN <> '' THEN RTRIM(LEFT(JO.SSN, 3) + '-' + LEFT(RIGHT(JO.SSN, 6), 2) + '-' + RIGHT(JO.SSN, 4)) END AS SSN
	, JO.Email1 AS [Email]
	, JO.Title As Title
	, JO.JointOwnerType
	, JO.AssocCode
	, JO.RelToPrimary
FROM IMS.NewMemberJointOwner As JO INNER JOIN IMS.udt_JointOwnerTypes AS JOT On JO.JointOwnerType = JOT.JOType
INNER JOIN IMS.NewMemberJointLink AS JL ON JO.Sequence = JL.JointSequence AND JL.TrackingNum = @TrackingNum
INNER JOIN IMS.NewMemberSubAccount AS SA ON JL.SubAccountSequence = SA.Sequence AND SA.TrackingNum = @TrackingNum
WHERE JO.TrackingNum = @TrackingNum AND JO.Sequence = @joseq AND SA.ProductType IN ('CC','CCA','IRA','LOC','MMA','PSA','RSA','SDA') AND SA.ClosedFlag <> 'Y')

GO
/****** Object:  UserDefinedFunction [IMS].[fnNGFCU_GetPCPlastic]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE FUNCTION [IMS].[fnNGFCU_GetPCPlastic] (@TrackingNum int, @CardStatus int, @TypeCode char(1))  
RETURNS TABLE
AS
RETURN (SELECT Top 1 PC.TrackingNum, PC.Sequence, PC.Description, PC.CardStatus, PC.TypeCode, PC.PAN, PC.Created, PC.AutoGen, PC.StockCode
FROM IMS.NewMemberPlasticCard AS PC
WHERE PC.TrackingNum = @TrackingNum AND (PC.CardStatus = 0 OR PC.CardStatus = 1) AND PC.TypeCode = @TypeCode) -- AND PC.Created = 'Y')
GO
/****** Object:  UserDefinedFunction [IMS].[fnCCCU_GetPCPlastic]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE FUNCTION [IMS].[fnCCCU_GetPCPlastic] (@TrackingNum int, @CardStatus int, @TypeCode char(1))  
RETURNS TABLE
AS
RETURN (SELECT Top 1 PC.TrackingNum, PC.Sequence, PC.Description, PC.CardStatus, PC.TypeCode, PC.PAN, PC.Created, PC.AutoGen
FROM IMS.NewMemberPlasticCard AS PC
WHERE PC.TrackingNum = @TrackingNum AND PC.CardStatus = @CardStatus AND PC.TypeCode = @TypeCode AND PC.Created = 'Y')


GO
/****** Object:  UserDefinedFunction [IMS].[fnSCFed_GetPCPlastic]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [IMS].[fnSCFed_GetPCPlastic] (@TrackingNum int, @CardStatus int, @TypeCode char(1))  
RETURNS TABLE
AS
RETURN (SELECT Top 1 PC.TrackingNum, PC.Sequence, PC.Description, PC.CardStatus, PC.TypeCode, PC.PAN, PC.Created, PC.AutoGen
FROM IMS.NewMemberPlasticCard AS PC
WHERE PC.TrackingNum = @TrackingNum AND (PC.CardStatus = 0 OR PC.CardStatus = 1) AND PC.TypeCode = @TypeCode AND PC.Created = 'Y')
GO
/****** Object:  UserDefinedFunction [IMS].[fnSafe_GetPCPlastic]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE FUNCTION [IMS].[fnSafe_GetPCPlastic] (@TrackingNum INT, @CardStatus INT, @TypeCode CHAR(1))  
RETURNS TABLE
AS
RETURN (SELECT Top 1 PC.TrackingNum, PC.Sequence, PC.Description, PC.CardStatus, PC.TypeCode, PC.PAN, PC.AmountOnline, PC.POSOnlineLimit
FROM IMS.NewMemberPlasticCard AS PC
WHERE PC.TrackingNum = @TrackingNum AND PC.CardStatus = @CardStatus AND PC.TypeCode = @TypeCode)
GO
/****** Object:  UserDefinedFunction [IMS].[fnSSCU_GetPCPlastic]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE FUNCTION [IMS].[fnSSCU_GetPCPlastic] (@TrackingNum int, @CardStatus int, @TypeCode char(1))  
RETURNS TABLE
AS
RETURN (SELECT Top 1 PC.TrackingNum, PC.Sequence, PC.Description, PC.CardStatus, PC.TypeCode, PC.PAN, PC.Created, PC.AutoGen, PC.StockCode
FROM IMS.NewMemberPlasticCard AS PC
WHERE PC.TrackingNum = @TrackingNum AND (PC.CardStatus = 0 OR PC.CardStatus = 1) AND PC.TypeCode = @TypeCode) -- AND PC.Created = 'Y')
GO
/****** Object:  UserDefinedFunction [IMS].[fnCCCU_GetSA]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE FUNCTION [IMS].[fnCCCU_GetSA] (@TrackingNum int, @ProductType char(3), @SLType char(1))  
RETURNS TABLE
AS
RETURN (SELECT Top 1 [TrackingNum], [Sequence], [Description], [Amount], [CreditLimit], [InsCode], [MiscField1], [CreatedOn]
FROM NewMemberSubAccount AS SA
WHERE SA.TrackingNum = @TrackingNum AND SA.ProductType = @ProductType AND SA.SLType = @SLType AND SA.ClosedFlag <> 'Y' AND SA.LossFlag <> 'Y')


GO
/****** Object:  UserDefinedFunction [IMS].[fnSCFed_GetSA]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE FUNCTION [IMS].[fnSCFed_GetSA] (@TrackingNum int, @ProductType char(3), @SLType char(1))  
RETURNS TABLE
AS
RETURN (SELECT Top 1 [TrackingNum], [Sequence], [InsCode], [MiscField1]
FROM NewMemberSubAccount AS SA
WHERE SA.TrackingNum = @TrackingNum AND SA.ProductType = @ProductType AND SA.SLType = @SLType AND SA.ClosedFlag <> 'Y' AND SA.LossFlag <> 'Y')

GO
/****** Object:  UserDefinedFunction [IMS].[fnSafe_GetSA]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE FUNCTION [IMS].[fnSafe_GetSA] (@TrackingNum INT, @SAType1 CHAR(10), @SAType2 CHAR(10))  
RETURNS TABLE
AS
RETURN (SELECT Top 1 [TrackingNum], [Sequence], [Suffix], [InsCode], [MiscField1], [MICRNumber], [APR], [ApprovalTier]
FROM IMS.NewMemberSubAccount AS SA
WHERE SA.TrackingNum = @TrackingNum AND (SA.SubAccountType = @SAType1 OR SA.SubAccountType = @SAType2) AND ISNULL(SA.ClosedFlag, '') <> 'Y' AND ISNULL(SA.LossFlag, '') <> 'Y')
GO
/****** Object:  UserDefinedFunction [IMS].[fnCCCU_GetSAODP]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE FUNCTION [IMS].[fnCCCU_GetSAODP] (@TrackingNum int, @ODSeq int)  
RETURNS TABLE
AS
RETURN (SELECT Top 1 OL.TrackingNum
	, SA.Sequence
	, OL.OverdraftSequence
	, NMR.Account
	, ISNULL(SA.Suffix, '0') AS [Suffix]
	, CASE WHEN OL.SourceSubAccount = '0'
		THEN RTRIM(CONVERT(CHAR(20), OL.CrossAccount)) + '-' + RIGHT('0' + RTRIM(CONVERT(CHAR(2), OL.CrossSuffix)), 2) + ' - CROSS ACCOUNT'
		ELSE RTRIM(CONVERT(CHAR(20), NMR.Account)) + '-' + RIGHT('0' + RTRIM(CONVERT(CHAR(2), ISNULL(SA.Suffix, 0))), 2) + ' - ' + RTRIM(SA.Description)
		END AS [Description]
FROM NewMemberOverdraftlink AS OL
LEFT OUTER JOIN NewMemberSubAccount AS SA ON OL.SourceSubAccount = SA.Sequence AND OL.TrackingNum = SA.TrackingNum
LEFT JOIN NewMemberRequest AS NMR ON OL.TrackingNum = NMR.TrackingNum
WHERE OL.TrackingNum = @TrackingNum AND OL.OverdraftSequence = @ODSeq)

GO
/****** Object:  UserDefinedFunction [IMS].[fnSCFed_GetSAODP]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE FUNCTION [IMS].[fnSCFed_GetSAODP] (@TrackingNum int, @ProductType1 char(3), @ProductType2 char(3), @SLType char(1))  
RETURNS TABLE
AS
RETURN (SELECT Top 1 SA.TrackingNum, SA.Sequence, OL.OverdraftSequence, SA.Description
FROM NewMemberSubAccount AS SA
INNER JOIN NewMemberOverdraftlink AS OL ON SA.Sequence =  OL.SourceSubAccount AND OL.TrackingNum = @TrackingNum
INNER JOIN NewMemberSubAccount AS TSA ON OL.TargetSubAccount = TSA.Sequence AND TSA.TrackingNum = @TrackingNum
WHERE SA.TrackingNum = @TrackingNum AND (((SA.ProductType = @ProductType1 OR SA.ProductType = @ProductType2) OR (@ProductType1 = '' AND @ProductType2 = '')) AND (SA.SLType = @SLType OR @SLType = '')) AND SA.ClosedFlag <> 'Y' AND SA.LossFlag <> 'Y' AND TSA.ClosedFlag <> 'Y' AND TSA.LossFlag <> 'Y')
GO
/****** Object:  UserDefinedFunction [IMS].[fnNGFCU_GetSAType]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE FUNCTION [IMS].[fnNGFCU_GetSAType] (@TrackingNum int, @DescAbrv char(3), @SLType char(1))
RETURNS TABLE
AS
RETURN (SELECT Top 1 [TrackingNum], [Sequence], [Description], [InsCode], [MiscField1], [Created]
FROM IMS.NewMemberSubAccount AS SA
WHERE SA.TrackingNum = @TrackingNum AND SA.DescAbrv = @DescAbrv AND SA.SLType = @SLType AND SA.ClosedFlag <> 'Y' AND SA.LossFlag <> 'Y' AND SA.Created = 'Y')
GO
/****** Object:  UserDefinedFunction [IMS].[fnCCCU_GetSAType]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO


CREATE FUNCTION [IMS].[fnCCCU_GetSAType] (@TrackingNum int, @DescAbrv char(3), @SLType char(1))  
RETURNS TABLE
AS
RETURN (SELECT Top 1 [TrackingNum], [Sequence], [Description], [InsCode], [MiscField1], [Created]
FROM IMS.NewMemberSubAccount AS SA
WHERE SA.TrackingNum = @TrackingNum AND SA.DescAbrv = @DescAbrv AND SA.SLType = @SLType AND SA.ClosedFlag <> 'Y' AND SA.LossFlag <> 'Y' AND SA.Created = 'Y')

GO
/****** Object:  UserDefinedFunction [IMS].[fnFCCU_GetSAType]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE FUNCTION [IMS].[fnFCCU_GetSAType] (@TrackingNum int, @DescAbrv char(3), @SLType char(1))  
RETURNS TABLE
AS
RETURN (SELECT Top 1 [TrackingNum], [Sequence], [Description], [InsCode], [MiscField1], [Created]
FROM IMS.NewMemberSubAccount AS SA
WHERE SA.TrackingNum = @TrackingNum AND SA.DescAbrv = @DescAbrv AND SA.SLType = @SLType AND SA.ClosedFlag <> 'Y' AND SA.LossFlag <> 'Y' AND SA.Created = 'Y')
GO
/****** Object:  UserDefinedFunction [IMS].[fnSCFed_GetSAType]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE FUNCTION [IMS].[fnSCFed_GetSAType] (@TrackingNum int, @DescAbrv char(3), @SLType char(1))
RETURNS TABLE
AS
RETURN (SELECT Top 1 [TrackingNum], [Sequence], [Description], [InsCode], [MiscField1], [Created]
FROM IMS.NewMemberSubAccount AS SA
WHERE SA.TrackingNum = @TrackingNum AND SA.DescAbrv = @DescAbrv AND SA.SLType = @SLType AND SA.ClosedFlag <> 'Y' AND SA.LossFlag <> 'Y' AND SA.Created = 'Y')
GO
/****** Object:  UserDefinedFunction [IMS].[fnSafe_GetSAType]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE FUNCTION [IMS].[fnSafe_GetSAType] (@TrackingNum INT, @ProductType CHAR(3), @SLType CHAR(1))  
RETURNS TABLE
AS
RETURN (SELECT TOP 1 [TrackingNum], [Sequence], [Suffix], [InsCode], [MiscField1], [MICRNumber], [APR], [ApprovalTier]
FROM IMS.NewMemberSubAccount AS SA
WHERE SA.TrackingNum = @TrackingNum AND SA.ProductType = @ProductType AND SA.SLType = @SLType AND SA.ClosedFlag <> 'Y' AND SA.LossFlag <> 'Y')
GO
/****** Object:  UserDefinedFunction [IMS].[fnSSCU_GetSAType]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE FUNCTION [IMS].[fnSSCU_GetSAType] (@TrackingNum int, @DescAbrv char(3), @SLType char(1))
RETURNS TABLE
AS
RETURN (SELECT Top 1 [TrackingNum], [Suffix], [Sequence], [Description], [InsCode], [MiscField1], [DescAbrv], [Created]
FROM IMS.NewMemberSubAccount AS SA
WHERE SA.TrackingNum = @TrackingNum AND SA.DescAbrv = @DescAbrv AND SA.SLType = @SLType AND SA.Created = 'Y' AND SA.ClosedFlag <> 'Y' AND SA.LossFlag <> 'Y' AND SA.Created = 'Y')
GO
/****** Object:  Table [IMS].[AccessFlags]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[AccessFlags](
	[AccessCategory] [char](20) NULL,
	[AccessName] [char](40) NULL,
	[AccessType] [char](10) NULL,
	[AccessValues] [char](500) NULL,
	[DefaultValue] [char](100) NULL,
	[CategoryDesc] [char](50) NULL,
	[NameDesc] [char](255) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[ACCs]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[ACCs](
	[ACC] [smallint] NULL,
	[APR] [int] NULL,
	[StartSuffix] [tinyint] NULL,
	[StopSuffix] [tinyint] NULL,
	[Display] [char](1) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[ACHFileArchive]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[ACHFileArchive](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[ACHFileType] [varchar](10) NULL,
	[DateTimeGenerated] [datetime] NULL,
	[ACHFileText] [text] NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [IMS].[ACHReview]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[ACHReview](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[DateTimeRequest] [datetime] NULL,
	[ACHRecordID] [int] NULL,
	[ACHRecordID2] [int] NULL,
	[MemberNumber] [varchar](200) NULL,
	[AccountOwner] [varchar](10) NULL,
	[FirstName] [varchar](30) NULL,
	[MiddleName] [varchar](30) NULL,
	[LastName] [varchar](30) NULL,
	[TIN] [varchar](200) NULL,
	[DOB] [datetime] NULL,
	[StreetAddress] [varchar](50) NULL,
	[City] [varchar](30) NULL,
	[StateCode] [varchar](2) NULL,
	[ZipCode] [varchar](9) NULL,
	[PrimaryPhoneNumber] [varchar](10) NULL,
	[HomePhoneNumber] [varchar](10) NULL,
	[WorkPhoneNumber] [varchar](10) NULL,
	[DLNumber] [varchar](30) NULL,
	[DLStateCode] [varchar](2) NULL,
	[BankName] [varchar](30) NULL,
	[AccountNickname] [varchar](30) NULL,
	[AccountNumber] [varchar](200) NULL,
	[AccountType] [varchar](10) NULL,
	[RoutingNumber] [varchar](9) NULL,
	[ValidationError] [varchar](8000) NULL,
	[IDVResult] [varchar](10) NULL,
	[OFACResult] [varchar](10) NULL,
	[AOARResult] [varchar](10) NULL,
	[AOARTrackingNum] [int] NULL,
	[AOARApprovedLimit] [int] NULL,
	[Decision] [varchar](10) NULL,
	[Username] [varchar](20) NULL,
	[DateTimeDecisioned] [datetime] NULL,
	[IDVOFACTrackingNum] [int] NULL,
	[FriendlyError] [varchar](2000) NULL,
 CONSTRAINT [PK_ACHReview] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[ActionLog]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[ActionLog](
	[WorkflowType] [char](32) NOT NULL,
	[ActionName] [char](32) NOT NULL,
	[Processed] [smallint] NULL,
	[CompletedBy] [varchar](50) NULL,
	[CompletedDate] [datetime] NULL,
	[UndoBy] [varchar](50) NULL,
	[UndoDate] [datetime] NULL,
	[TrackingNum] [int] NOT NULL,
	[UndoAllowed] [char](1) NULL,
	[OverrideAllowed] [char](1) NULL,
	[OverrideDate] [datetime] NULL,
	[OverrideBy] [varchar](50) NULL,
	[ReviewAllowed] [char](1) NULL,
	[Description] [char](50) NULL,
	[SkippedBy] [varchar](50) NULL,
	[SkippedDate] [datetime] NULL,
	[ClientIP] [char](15) NULL,
	[WebIP] [char](15) NULL,
	[ClusterID] [char](10) NULL
) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [xTrackingAction]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [xTrackingAction] ON [IMS].[ActionLog]
(
	[TrackingNum] ASC,
	[ActionName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[AddressVerificationSettings]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[AddressVerificationSettings](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[AuthId] [varchar](250) NULL,
	[AuthToken] [varchar](250) NULL,
	[Url] [varchar](500) NULL,
	[MaxCandidates] [int] NULL,
	[Vendor] [varchar](50) NULL,
	[GetCensusTract] [varchar](1) NULL,
	[CensusTractURL] [varchar](500) NULL,
	[CensusTractFormat] [varchar](50) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[BlockIp]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[BlockIp](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[ClientIP] [varchar](20) NULL,
	[Note] [varchar](200) NULL,
 CONSTRAINT [PK_IMS.BlockIp] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[BluepointMVSConfig]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[BluepointMVSConfig](
	[ID] [int] NULL,
	[AdminID] [varchar](255) NULL,
	[AdminPassword] [varchar](255) NULL,
	[RTN] [varchar](255) NULL,
	[UIN] [varchar](255) NULL,
	[WebServiceURL] [varchar](255) NULL,
	[WebServiceTimeout] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[Branches]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[Branches](
	[BranchCode] [char](4) NULL,
	[Display] [char](1) NULL,
	[Sequence] [smallint] NULL,
	[Address1] [char](30) NULL,
	[Address2] [char](30) NULL,
	[City] [char](16) NULL,
	[State] [char](2) NULL,
	[Zip] [char](9) NULL,
	[AreaCode] [char](3) NULL,
	[Phone] [char](8) NULL,
	[Description] [char](80) NULL,
	[EMail] [char](60) NULL,
	[TeleCheckSubNum] [char](12) NULL,
	[DefaultsID] [char](5) NULL,
	[BureauSetID] [char](5) NULL,
	[StatementCycle] [smallint] NULL,
	[LOSID] [int] NULL,
	[CallCenter] [bit] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[CheckLog]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[CheckLog](
	[TellerInitials] [char](10) NOT NULL,
	[Account] [char](15) NOT NULL,
	[Suffix] [char](15) NOT NULL,
	[TranDate] [datetime] NOT NULL,
	[StartingChkNum] [int] NOT NULL,
	[NumChecks] [int] NOT NULL,
	[TrackingNum] [int] NULL,
	[TranType] [char](1) NULL,
	[Branch] [char](4) NULL,
	[Line1] [char](30) NULL,
	[Line2] [char](30) NULL,
	[Line3] [char](30) NULL,
	[Line4] [char](30) NULL,
	[City] [char](30) NULL,
	[State] [char](2) NULL,
	[Zip] [char](10) NULL,
	[SecondName] [char](30) NULL,
	[Sequence] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[ClientConfiguration]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[ClientConfiguration](
	[ClientConfigurationId] [int] IDENTITY(1,1) NOT NULL,
	[ClientContextId] [uniqueidentifier] NOT NULL,
	[ParentId] [int] NULL,
	[Key] [varchar](2000) NOT NULL,
	[Value] [varchar](max) NULL,
	[X_Application] [varchar](100) NULL,
	[X_ItemName] [varchar](1000) NULL,
	[X_ItemContext] [varchar](100) NULL,
 CONSTRAINT [PK__ClientConfigurat__1816AFA8] PRIMARY KEY CLUSTERED 
(
	[ClientConfigurationId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [IMS].[ClientStringResource]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[ClientStringResource](
	[Id] [int] IDENTITY(10001,1) NOT NULL,
	[ClientContextPublicId] [uniqueidentifier] NOT NULL,
	[ResourceSet] [varchar](1000) NOT NULL,
	[Key] [varchar](1000) NOT NULL,
	[Culture] [varchar](100) NOT NULL,
	[Value] [varchar](max) NULL,
	[CreatedAt] [datetime] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[StartAt] [datetime] NOT NULL,
	[EndAt] [datetime] NULL,
	[DeletedAt] [datetime] NULL,
	[DeletedBy] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [IMS].[CloverFundingConfig]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[CloverFundingConfig](
	[ID] [int] NOT NULL,
	[MerchantID] [varchar](20) NULL,
	[PublicEcommerceApiToken] [varchar](50) NULL,
	[PrivateEcommerceApiToken] [varchar](50) NULL,
	[EcommerceBaseURL] [varchar](255) NULL,
	[TokenizationBaseURL] [varchar](255) NULL,
	[PublicAccessKeyURI] [varchar](255) NULL,
	[CardIDTokenURI] [varchar](255) NULL,
	[PaymentAuthorizationURI] [varchar](255) NULL,
	[CardChargeURI] [varchar](255) NULL,
 CONSTRAINT [PK_CloverFundingConfig] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[CollateralDesignation]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[CollateralDesignation](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[DesignationName] [nvarchar](50) NOT NULL,
	[DisplayName] [nvarchar](250) NOT NULL,
	[IsActive] [bit] NOT NULL,
 CONSTRAINT [PK_CollateralDesignation] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[CollateralProduct]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[CollateralProduct](
	[Id] [int] NOT NULL,
	[CollateralTypeId] [int] NULL,
	[ProductName] [nvarchar](255) NULL,
	[IsActive] [bit] NULL,
	[DisplayName] [nvarchar](255) NULL,
PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[CollateralProductDesignationMapping]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[CollateralProductDesignationMapping](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[CollateralProductId] [int] NOT NULL,
	[CollateralDesignationId] [int] NOT NULL,
	[IsActive] [bit] NOT NULL,
 CONSTRAINT [PK_CollateralProductDesignationMapping] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[CollateralType]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[CollateralType](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[TypeName] [nvarchar](255) NULL,
	[IsActive] [bit] NULL,
	[DisplayName] [nvarchar](255) NULL,
PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[Config]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[Config](
	[CUID] [char](8) NOT NULL,
	[LoanAppHost] [char](16) NULL,
	[ForceLocalSignon] [char](1) NULL,
	[SignonHost] [char](16) NULL,
	[LoanAppDelay] [smallint] NULL,
	[LoanAppRetry] [smallint] NULL,
	[NewAccountHost] [char](16) NULL,
	[SignonDelay] [smallint] NULL,
	[NewAccountDelay] [smallint] NULL,
	[SignonRetry] [smallint] NULL,
	[LTNHost] [char](16) NULL,
	[LTNDelay] [smallint] NULL,
	[NewAccountRetry] [smallint] NULL,
	[LTNRetry] [smallint] NULL,
	[CheckStatus] [char](1) NULL,
	[StatusDelay] [smallint] NULL,
	[MessageHost] [char](16) NULL,
	[MessageDelay] [smallint] NULL,
	[MessageRetry] [smallint] NULL,
	[StopPaymentHost] [char](16) NULL,
	[StopPaymentDelay] [smallint] NULL,
	[StopPaymentRetry] [smallint] NULL,
	[AccountInquiryHost] [char](16) NULL,
	[AccountHistoryHost] [char](16) NULL,
	[PINChangeHost] [char](16) NULL,
	[PINChangeDelay] [smallint] NULL,
	[PINChangeRetry] [smallint] NULL,
	[TransferHost] [char](16) NULL,
	[TransferDelay] [smallint] NULL,
	[TransferRetry] [smallint] NULL,
	[ChangeAddressHost] [char](16) NULL,
	[ChangeAddressDelay] [smallint] NULL,
	[ChangeAddressRetry] [smallint] NULL,
	[NewLoanHost] [char](16) NULL,
	[NewLoanDelay] [smallint] NULL,
	[NewLoanRetry] [smallint] NULL,
	[NewShareHost] [char](16) NULL,
	[NewShareDelay] [smallint] NULL,
	[NewShareRetry] [smallint] NULL,
	[NewCardHost] [char](16) NULL,
	[NewCardDelay] [smallint] NULL,
	[NewCardRetry] [smallint] NULL,
	[FlagsHost] [char](16) NULL,
	[FlagsDelay] [smallint] NULL,
	[FlagsRetry] [smallint] NULL,
	[NewMemoHost] [char](16) NULL,
	[NewMemoDelay] [smallint] NULL,
	[NewMemoRetry] [smallint] NULL,
	[FlagInquiryHost] [char](16) NULL,
	[LoanAppInquiryHost] [char](16) NULL,
	[MemberChangeRetry] [smallint] NULL,
	[MemberChangeHost] [char](16) NULL,
	[MemberChangeDelay] [smallint] NULL,
	[LoanAppInquiryDays] [smallint] NULL,
	[CardChangeRetry] [smallint] NULL,
	[CardChangeHost] [char](16) NULL,
	[OfflineCardInquiryHost] [char](16) NULL,
	[CardChangeDelay] [smallint] NULL,
	[CardInquiryHost] [char](16) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[Corelation_CreditPull]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[Corelation_CreditPull](
	[TrackingNum] [int] NOT NULL,
	[Sequence] [int] NOT NULL,
	[JointSequence] [int] NOT NULL,
	[CreditPullSerial] [varchar](20) NULL,
	[AccessKey] [varchar](50) NULL,
	[TypeSerial] [varchar](20) NULL,
	[Bureau] [varchar](2) NULL,
	[Product] [varchar](10) NULL,
	[PrimaryPersonSerial] [varchar](20) NULL,
	[PrimaryUnfreezePin] [varchar](20) NULL,
	[SecondaryPersonSerial] [varchar](20) NULL,
	[SecondaryUnfreezePin] [varchar](20) NULL,
	[XBullseyeAccountNumber] [varchar](50) NULL,
	[CreditPullUserSerial] [varchar](20) NULL,
	[UserSerial] [varchar](20) NULL,
	[BranchSerial] [varchar](20) NULL,
	[Status] [varchar](2) NULL,
	[QueuedTime] [datetime] NULL,
	[FinishedTime] [datetime] NULL,
	[RequestDocument] [text] NULL,
	[PrimaryResponseDocument] [text] NULL,
	[SecondaryResponseDocument] [text] NULL,
	[FollowupAction] [varchar](2) NULL,
	[FollowupValue] [varchar](50) NULL,
	[FollowupStatus] [varchar](2) NULL,
	[FollowupTime] [datetime] NULL,
	[ExceptionDescription] [varchar](200) NULL,
	[RetryCount] [int] NULL,
	[ImportRequestDocument] [text] NULL,
	[ImportResponseDocument] [text] NULL,
	[LastFmDate] [datetime] NULL,
	[CreditScore] [varchar](10) NULL,
	[ApprovedProducts] [varchar](200) NULL,
	[Decision] [varchar](20) NULL,
	[KeyFactors] [varchar](1000) NULL,
	[ErrorMessage] [varchar](1000) NULL,
 CONSTRAINT [PK_Corelation_CreditPull_1] PRIMARY KEY CLUSTERED 
(
	[TrackingNum] ASC,
	[Sequence] ASC,
	[JointSequence] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [IMS].[CRCH]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[CRCH](
	[TrackingNum] [int] NOT NULL,
	[Processed] [smallint] NULL,
	[Account] [int] NULL,
	[Surname] [char](2) NULL,
	[Suffix] [char](10) NULL,
	[ChangeMode] [char](1) NULL,
	[Description] [char](60) NULL,
	[DescAbrv] [char](3) NULL,
	[ACC] [char](3) NULL,
	[TermType] [char](1) NULL,
	[Term] [int] NULL,
	[SSN] [char](9) NULL,
	[TaxIDType] [char](1) NULL,
	[CertNum] [char](10) NULL,
	[OrigAmt] [int] NULL,
	[TaxCode] [char](1) NULL,
	[JointNam1] [char](30) NULL,
	[RolloverAmount] [int] NULL,
	[RolloverAccount] [int] NULL,
	[RolloverSuffix] [smallint] NULL,
	[RolloverSurname] [char](2) NULL,
	[RolloverTermType] [char](1) NULL,
	[RolloverTerm] [int] NULL,
	[RolloverACC] [char](3) NULL,
	[RolloverSDA] [char](3) NULL,
	[InternetEnabledFlag] [char](1) NULL,
	[InternetEnabledDate] [datetime] NULL,
	[InternetLastSentDate] [datetime] NULL,
	[DivRate] [int] NULL,
	[MatDate] [datetime] NULL,
	[MatDisp] [char](4) NULL,
	[DivDisp] [char](4) NULL,
	[IssueDate] [datetime] NULL,
	[PTDWDCount] [int] NULL,
	[TargetAmount] [int] NULL,
	[PenaltyAmount] [int] NULL,
	[PenaltyRate] [int] NULL,
	[StatementOrder] [smallint] NULL,
	[OpenDate] [datetime] NULL,
	[RolloverDate] [datetime] NULL,
	[PriorDivRate] [int] NULL,
	[YTDDiv] [int] NULL,
	[DivPTD] [int] NULL,
	[CentsDays] [bigint] NULL,
	[LowBalance] [int] NULL,
	[YTDWithheld] [int] NULL,
	[WithholdDate] [datetime] NULL,
	[CertAdjVal] [int] NULL,
	[CertDiv] [int] NULL,
	[CertForfeit] [int] NULL,
	[Branch] [smallint] NULL,
	[OrigBranch] [smallint] NULL,
	[Seller] [char](3) NULL,
	[Detail] [char](1) NULL,
	[RolloverRelType] [char](1) NULL,
	[ClientIP] [char](15) NULL,
	[WebIP] [char](15) NULL,
	[ClusterID] [char](10) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[CRCH]
(
	[TrackingNum] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[CRCHPledges]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[CRCHPledges](
	[TrackingNum] [int] NOT NULL,
	[Sequence] [smallint] NULL,
	[Account] [int] NULL,
	[Suffix] [smallint] NULL,
	[Surname] [char](2) NULL,
	[Amount] [int] NULL,
	[Reason] [char](60) NULL,
	[ExpirationDate] [datetime] NULL,
	[ClientIP] [char](15) NULL,
	[WebIP] [char](15) NULL,
	[ClusterID] [char](10) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[CRCHPledges]
(
	[TrackingNum] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[CRCHRelatedSuffix]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[CRCHRelatedSuffix](
	[Sequence] [int] NOT NULL,
	[TrackingNum] [int] NOT NULL,
	[Account] [int] NULL,
	[SLType] [char](1) NULL,
	[RelType] [char](1) NULL,
	[Suffix] [int] NULL,
	[Surname] [char](2) NULL,
	[ChangeCode] [char](10) NULL,
	[Status] [char](1) NULL,
	[Description] [char](50) NULL,
	[ClientIP] [char](15) NULL,
	[WebIP] [char](15) NULL,
	[ClusterID] [char](10) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[CRCHRelatedSuffix]
(
	[TrackingNum] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[CRCHSuffix]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[CRCHSuffix](
	[Sequence] [int] NOT NULL,
	[TrackingNum] [int] NOT NULL,
	[Account] [int] NULL,
	[SLType] [char](1) NULL,
	[RelType] [char](1) NULL,
	[Suffix] [int] NULL,
	[Surname] [char](2) NULL,
	[ChangeCode] [char](10) NULL,
	[Status] [char](1) NULL,
	[Description] [char](50) NULL,
	[ClientIP] [char](15) NULL,
	[WebIP] [char](15) NULL,
	[ClusterID] [char](10) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[CRCHSuffix]
(
	[TrackingNum] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[DeluxeAccount]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[DeluxeAccount](
	[ConsumerABANumber] [varchar](9) NULL,
	[AccountNumber] [varchar](30) NULL,
	[ClosureDate] [datetime] NULL,
	[AgeInMonths] [int] NULL,
	[LossType] [char](1) NULL,
	[CACReturnItemCount] [int] NULL,
	[ContributionSource] [varchar](4) NULL,
	[PrincipalLoss] [varchar](9) NULL,
	[FeeReversal] [varchar](9) NULL,
	[CombinedLossAndFeeReversal] [varchar](9) NULL,
	[PaidStatus] [char](1) NULL,
	[PaidDate] [datetime] NULL,
	[SettleDate] [datetime] NULL,
	[TrackingNum] [int] NULL,
	[MatchRecordSequence] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[DeluxeAdditionalVerificationOFACMatch]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[DeluxeAdditionalVerificationOFACMatch](
	[ContributorName] [varchar](50) NULL,
	[Severity] [varchar](3) NULL,
	[PostedDate] [datetime] NULL,
	[EntityType] [char](1) NULL,
	[OrgName] [varchar](100) NULL,
	[FirstName] [varchar](40) NULL,
	[MiddleName] [varchar](40) NULL,
	[LastName] [varchar](40) NULL,
	[SSN] [varchar](9) NULL,
	[DOB] [datetime] NULL,
	[IDType] [varchar](4) NULL,
	[IDIssuer] [varchar](50) NULL,
	[IDCountry] [varchar](3) NULL,
	[IDNumber] [varchar](30) NULL,
	[OriginalListName] [varchar](4) NULL,
	[VesselOwner] [varchar](50) NULL,
	[TrackingNum] [int] NULL,
	[Sequence] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[DeluxeAddress]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[DeluxeAddress](
	[AddressType] [varchar](10) NULL,
	[Address1] [varchar](50) NULL,
	[Address2] [varchar](50) NULL,
	[City] [varchar](28) NULL,
	[State] [varchar](2) NULL,
	[PostalCode] [varchar](14) NULL,
	[CountryCode] [varchar](3) NULL,
	[CountryName] [varchar](50) NULL,
	[TrackingNum] [int] NULL,
	[MatchRecordSequence] [int] NULL,
	[Sequence] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[DeluxeAgentInfo]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[DeluxeAgentInfo](
	[TrackingNum] [int] NOT NULL,
	[FullName] [char](30) NULL,
	[Phone] [char](12) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[DeluxeBankInfo]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[DeluxeBankInfo](
	[TrackingNum] [int] NOT NULL,
	[BankIdType] [char](3) NULL,
	[BankId] [char](9) NULL,
	[BranchId] [char](5) NULL,
	[DepartmentId] [char](5) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[DeluxeConfiguration]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[DeluxeConfiguration](
	[SchemaVersion] [varchar](10) NULL,
	[ClientID] [varchar](9) NULL,
	[ConfigurationID] [int] NULL,
	[DeluxeURL] [varchar](150) NULL,
	[UserId] [varchar](20) NULL,
	[Password] [varchar](40) NULL,
	[Platform] [varchar](20) NULL,
	[OrgReportingUnit] [varchar](10) NULL,
	[Certificate] [varchar](40) NULL,
	[OverallSeverityManualApprovalValue] [int] NULL,
	[ExceptionCausesManualApproval] [char](1) NULL,
	[ProcessingID] [varchar](8) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[DeluxeConsumer]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[DeluxeConsumer](
	[ConsumerType] [varchar](3) NULL,
	[LastName] [varchar](40) NULL,
	[MiddleName] [varchar](20) NULL,
	[FirstName] [varchar](40) NULL,
	[Gender] [char](1) NULL,
	[BirthDate] [datetime] NULL,
	[BusinessName] [varchar](40) NULL,
	[TaxIdNumber] [varchar](9) NULL,
	[IdentificationType] [char](2) NULL,
	[IdentificationNumber] [varchar](28) NULL,
	[IdentificationState] [char](2) NULL,
	[IdentificationCountry] [char](3) NULL,
	[IdentificationExpirationDate] [datetime] NULL,
	[TrackingNum] [int] NULL,
	[MatchRecordSequence] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[DeluxeDepAcctId]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[DeluxeDepAcctId](
	[TrackingNum] [int] NOT NULL,
	[AcctId] [char](20) NULL,
	[AcctType] [char](3) NULL,
	[OpenDt] [char](10) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[DeluxeDetectIDConfiguration]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[DeluxeDetectIDConfiguration](
	[ConfigurationID] [int] NOT NULL,
	[DeluxeURL] [varchar](150) NULL,
	[UserId] [varchar](20) NULL,
	[Password] [varchar](40) NULL,
	[Platform] [varchar](20) NULL,
	[OrgReportingUnit] [varchar](10) NULL,
	[Certificate] [varchar](40) NULL,
	[ClientID] [varchar](9) NULL,
	[SchemaVersion] [varchar](10) NULL,
	[ProcessingID] [varchar](8) NULL,
 CONSTRAINT [PK_DeluxeDetectIDConfiguration] PRIMARY KEY CLUSTERED 
(
	[ConfigurationID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[DeluxeDetectPhone]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[DeluxeDetectPhone](
	[PhoneType] [char](3) NULL,
	[PhoneNumber] [varchar](10) NULL,
	[TrackingNum] [int] NULL,
	[MatchRecordSequence] [int] NULL,
	[Sequence] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[DeluxeDispute]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[DeluxeDispute](
	[DisputeCode] [varchar](2) NULL,
	[DisputeReason] [varchar](700) NULL,
	[DisputeDate] [datetime] NULL,
	[TrackingNum] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[DeluxeIdentityVerificationResultMessage]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[DeluxeIdentityVerificationResultMessage](
	[WarningNumber] [int] NULL,
	[WarningText] [varchar](50) NULL,
	[Severity] [varchar](3) NULL,
	[TrackingNum] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[DeluxeInquiryResponse]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[DeluxeInquiryResponse](
	[ResponseCode] [varchar](10) NULL,
	[ResponseMessage] [varchar](50) NULL,
	[InquirySystemTrackingIdentifier] [varchar](15) NULL,
	[RemarketerSystemTrackingIdentifierField] [varchar](15) NULL,
	[CustomerID] [varchar](9) NULL,
	[AttemptNumber] [int] NULL,
	[InitialMessage] [varchar](50) NULL,
	[DecisionMessage] [varchar](45) NULL,
	[OverallSeverity] [varchar](3) NULL,
	[CumulativeLoss] [bigint] NULL,
	[FCRAFlag] [char](1) NULL,
	[SchemaVersion] [varchar](1) NULL,
	[TrackingNum] [int] NULL,
	[DateOfInquiry] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[DeluxeManualApproval]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[DeluxeManualApproval](
	[Sequence] [int] NULL,
	[ReasonCode] [varchar](32) NULL,
	[Description] [varchar](256) NULL,
	[ErrorFlag] [char](1) NULL,
	[TrackingNum] [int] NULL,
	[CreatreDate] [datetime] NULL,
	[Category] [varchar](2) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[DeluxeMatch]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[DeluxeMatch](
	[MatchType] [varchar](10) NULL,
	[MatchField] [varchar](40) NULL,
	[MatchData] [varchar](150) NULL,
	[TrackingNum] [int] NULL,
	[MatchRecordSequence] [int] NULL,
	[Sequence] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[DeluxeMatchRecord]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[DeluxeMatchRecord](
	[ContributorName] [varchar](50) NULL,
	[Severity] [varchar](3) NULL,
	[TrackingNum] [int] NULL,
	[MatchRecordSequence] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[DeluxeMiscText]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[DeluxeMiscText](
	[TrackingNum] [int] NOT NULL,
	[MiscLine1] [char](45) NULL,
	[MiscLine2] [char](45) NULL,
	[MiscLine3] [char](45) NULL,
	[MiscLine4] [char](45) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[DeluxeOFACAlias]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[DeluxeOFACAlias](
	[AliasName] [varchar](100) NULL,
	[TrackingNum] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[DeluxeOFACSanctions]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[DeluxeOFACSanctions](
	[SanctionType] [varchar](4) NULL,
	[TrackingNum] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[DeluxeOrgInfo]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[DeluxeOrgInfo](
	[TrackingNum] [int] NOT NULL,
	[Name] [char](32) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[DeluxeOutOfWalletError]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[DeluxeOutOfWalletError](
	[ErrorCode] [varchar](20) NULL,
	[ErrorMessage] [varchar](255) NULL,
	[TrackingNum] [int] NULL,
	[JointOwnerSequence] [smallint] NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[DeluxeOutOfWalletIDScoreRequest]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[DeluxeOutOfWalletIDScoreRequest](
	[IdentityMethod] [char](1) NULL,
	[FirstName] [varchar](16) NULL,
	[LastName] [varchar](24) NULL,
	[MiddleName] [varchar](24) NULL,
	[AddressLine1] [varchar](40) NULL,
	[AddressLine2] [varchar](40) NULL,
	[City] [varchar](22) NULL,
	[State] [varchar](2) NULL,
	[PostalCode] [varchar](9) NULL,
	[Phone] [varchar](10) NULL,
	[AltPhone] [varchar](10) NULL,
	[SSN] [varchar](9) NULL,
	[DateOfBirth] [datetime] NULL,
	[TrackingNum] [int] NOT NULL,
	[JointOwnerSequence] [smallint] NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[DeluxeOutOfWalletQuizQuestion]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[DeluxeOutOfWalletQuizQuestion](
	[QuestionID] [int] NULL,
	[QuestionText] [varchar](255) NULL,
	[TrackingNum] [int] NOT NULL,
	[JointOwnerSequence] [smallint] NOT NULL,
	[RequestClientID] [varchar](53) NULL,
	[RequestSequenceID] [varchar](10) NULL,
	[QuizID] [varchar](16) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[DeluxeOutOfWalletQuizQuestionChoice]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[DeluxeOutOfWalletQuizQuestionChoice](
	[Choice] [varchar](255) NULL,
	[IsUserAnswer] [char](1) NULL,
	[TrackingNum] [int] NOT NULL,
	[JointOwnerSequence] [smallint] NOT NULL,
	[RequestClientID] [varchar](53) NULL,
	[RequestSequenceID] [varchar](10) NULL,
	[QuizID] [varchar](16) NULL,
	[QuestionID] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[DeluxeOutOfWalletQuizRequest]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[DeluxeOutOfWalletQuizRequest](
	[RequestClientID] [varchar](53) NULL,
	[RequestAppID] [varchar](3) NULL,
	[ClientID] [varchar](9) NULL,
	[RequestSequenceID] [varchar](10) NULL,
	[IdentityMethod] [char](1) NULL,
	[QuizID] [varchar](16) NULL,
	[TrackingNum] [int] NOT NULL,
	[JointOwnerSequence] [smallint] NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[DeluxeOutOfWalletQuizResponse]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[DeluxeOutOfWalletQuizResponse](
	[QuizID] [varchar](16) NULL,
	[TrackingNum] [int] NOT NULL,
	[JointOwnerSequence] [smallint] NOT NULL,
	[RequestClientID] [varchar](53) NULL,
	[RequestSequenceID] [varchar](10) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[DeluxeOutOfWalletQuizResponseRequest]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[DeluxeOutOfWalletQuizResponseRequest](
	[RequestSequenceID] [varchar](10) NULL,
	[RequestClientID] [varchar](53) NULL,
	[RequestStatusCode] [varchar](3) NULL,
	[RequestResult] [varchar](128) NULL,
	[RequestQuizState] [varchar](255) NULL,
	[RequestNumberWrong] [int] NULL,
	[RequestAppID] [varchar](3) NULL,
	[ClientID] [varchar](9) NULL,
	[RequestProcessDate] [datetime] NULL,
	[TrackingNum] [int] NOT NULL,
	[JointOwnerSequence] [smallint] NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[DeluxePersonInfo]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[DeluxePersonInfo](
	[TrackingNum] [int] NOT NULL,
	[Sequence] [smallint] NOT NULL,
	[NameAddrType] [char](50) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[DeluxePersonName]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[DeluxePersonName](
	[TrackingNum] [int] NOT NULL,
	[Sequence] [smallint] NOT NULL,
	[LastName] [char](30) NULL,
	[FirstName] [char](20) NULL,
	[MiddleName] [char](20) NULL,
	[TitlePrefix] [char](25) NULL,
	[NameSuffix] [char](25) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[DeluxePhoneNum]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[DeluxePhoneNum](
	[TrackingNum] [int] NOT NULL,
	[PhoneType] [char](8) NULL,
	[Phone] [char](12) NULL,
	[Extension] [char](5) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[DeluxePostAddr]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[DeluxePostAddr](
	[TrackingNum] [int] NOT NULL,
	[Addr1] [char](50) NULL,
	[Addr2] [char](50) NULL,
	[City] [char](30) NULL,
	[StateProv] [char](2) NULL,
	[PostalCode] [char](11) NULL,
	[Country] [char](2) NULL,
	[AddrType] [char](9) NULL,
	[StartDt] [char](6) NULL,
	[EndDt] [char](6) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[DeluxeProgram]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[DeluxeProgram](
	[TrackingNum] [int] NOT NULL,
	[ProgramName] [char](25) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[DeluxeReply]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[DeluxeReply](
	[TrackingNum] [int] NOT NULL,
	[SecureURL] [text] NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [IMS].[DeluxeRequest]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[DeluxeRequest](
	[TrackingNum] [int] NOT NULL,
	[RqUID] [char](36) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[Departments]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[Departments](
	[Department] [char](12) NOT NULL,
	[Description] [char](80) NULL,
	[Display] [char](1) NULL,
	[SortOrder] [int] NULL,
	[ParentDepartment] [char](12) NOT NULL,
 CONSTRAINT [PK_Departments] PRIMARY KEY CLUSTERED 
(
	[Department] ASC,
	[ParentDepartment] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[Diagnostic]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[Diagnostic](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[trackingNum] [int] NOT NULL,
	[url] [varchar](50) NULL,
	[focus] [tinyint] NULL,
	[event] [varchar](30) NULL,
	[timerSeconds] [int] NULL,
	[blob] [text] NULL,
	[timestamp] [datetime] NULL,
 CONSTRAINT [PK_Diagnostic] PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [IMS].[DIAL_IDNT]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[DIAL_IDNT](
	[DefaultID] [int] NOT NULL,
	[UserId] [char](50) NULL,
	[Password] [char](50) NULL,
	[AuthorizationURL] [char](50) NULL,
	[ServiceName] [char](50) NULL,
	[CustomerNumber] [char](10) NULL,
	[SecurityCode] [char](3) NULL,
	[ProtocolIndicator] [char](2) NULL,
	[CustomerCode] [char](4) NULL,
	[InputFormat] [char](2) NULL,
	[OutputFormat] [char](2) NULL,
	[MultiFile] [char](1) NULL,
	[FileSelectionLevel] [char](1) NULL,
	[InquiryMonthsCode] [char](1) NULL,
	[DelinquentMOPCode] [char](1) NULL,
	[LanguageFormat] [char](2) NULL,
	[RiskModelCode] [char](1) NULL,
	[ECOAInquiryType] [char](1) NULL,
	[OptionalFeatures] [char](20) NULL,
	[Comment] [char](100) NULL,
	[Client] [char](50) NULL,
	[URL] [char](50) NULL,
	[URI] [char](50) NULL,
	[SendCCGI] [char](10) NULL,
	[SPPreapproval] [char](50) NULL,
	[SPProspectTrades] [char](50) NULL,
	[VendorID] [char](2) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [IX_DefaultID]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE UNIQUE CLUSTERED INDEX [IX_DefaultID] ON [IMS].[DIAL_IDNT]
(
	[DefaultID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[Document]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[Document](
	[TrackingNum] [int] NOT NULL,
	[Sequence] [smallint] NULL,
	[CreateDate] [datetime] NULL,
	[DocumentName] [char](50) NULL,
	[ScanName] [char](50) NULL,
	[Account] [int] NULL,
	[Accounts] [char](50) NULL,
	[SSN] [char](9) NULL,
	[JointOwners] [char](50) NULL,
	[filepath] [char](100) NULL,
	[hexdoc] [text] NULL,
	[IDXDelimiter] [char](10) NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_TrackingNum_Sequence_JointOwners]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE UNIQUE CLUSTERED INDEX [IX_TrackingNum_Sequence_JointOwners] ON [IMS].[Document]
(
	[TrackingNum] ASC,
	[Sequence] ASC,
	[JointOwners] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[DocumentReview]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[DocumentReview](
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[TrackingNum] [int] NOT NULL,
	[Sequence] [smallint] NULL,
	[ThreadID] [varchar](20) NULL,
	[AttachmentID] [varchar](20) NULL,
	[RequiredDocID] [varchar](20) NULL,
	[DocumentName] [varchar](100) NULL,
	[DocumentStatus] [varchar](100) NULL,
	[InternalNotes] [varchar](1024) NULL,
	[MemberMessage] [varchar](1024) NULL,
	[StatusEmailSent] [varchar](50) NULL,
	[OtherDocID] [varchar](20) NULL,
 CONSTRAINT [PK_DocumentReview] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[DocuSignEnvelope]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[DocuSignEnvelope](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[trackingNum] [int] NOT NULL,
	[envelopeId] [varchar](36) NOT NULL,
	[status] [varchar](20) NULL,
	[createdDate] [datetime] NULL,
	[statusDate] [datetime] NULL,
	[createdBy] [varchar](30) NULL,
	[statusSetBy] [varchar](30) NULL,
 CONSTRAINT [PK_DocuSignEnvelope] PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[DocuSignRecipient]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[DocuSignRecipient](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[envelopeId] [int] NOT NULL,
	[jointOwnerSequence] [smallint] NOT NULL,
	[clientUserId] [int] NOT NULL,
	[recipientId] [int] NOT NULL,
	[name] [varchar](70) NOT NULL,
	[email] [varchar](70) NULL,
	[status] [varchar](20) NULL,
	[createdDate] [datetime] NULL,
	[statusDate] [datetime] NULL,
 CONSTRAINT [PK_DocuSignRecipient] PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[EF2_AccountActionInfo]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[EF2_AccountActionInfo](
	[accountacceptancetxt] [varchar](10) NULL,
	[accountactiontxt1] [varchar](30) NULL,
	[accountactiontxt10] [varchar](30) NULL,
	[accountactiontxt2] [varchar](30) NULL,
	[accountactiontxt3] [varchar](30) NULL,
	[accountactiontxt4] [varchar](30) NULL,
	[accountactiontxt5] [varchar](30) NULL,
	[accountactiontxt6] [varchar](30) NULL,
	[accountactiontxt7] [varchar](30) NULL,
	[accountactiontxt8] [varchar](30) NULL,
	[accountactiontxt9] [varchar](30) NULL,
	[TrackingNum] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[EF2_ApprovalMapping]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[EF2_ApprovalMapping](
	[productoffertxt] [varchar](32) NULL,
	[CBDecisionCode] [varchar](80) NULL,
	[DefaultsID] [int] NULL,
	[BranchID] [int] NULL,
	[AccountType] [char](2) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[EF2_BusinessQuery]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[EF2_BusinessQuery](
	[businessfederalidentificationnbr] [char](9) NULL,
	[businessnm] [varchar](32) NULL,
	[citynm] [varchar](20) NULL,
	[compositephonenbr] [varchar](9) NULL,
	[countrynm] [varchar](50) NULL,
	[postalplusfourcd] [varchar](9) NULL,
	[statecd] [char](2) NULL,
	[streetaddresstxt] [varchar](25) NULL,
	[userdefinedrecordtxt] [varchar](256) NULL,
	[TrackingNum] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[EF2_BusinessReportReply]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[EF2_BusinessReportReply](
	[chexid] [varchar](256) NULL,
	[errortxt] [varchar](512) NULL,
	[idvoid] [int] NULL,
	[idvpassed] [char](1) NULL,
	[ofacfailed] [char](1) NULL,
	[ofacoid] [int] NULL,
	[txtreport] [text] NULL,
	[userdefinedtransactiontxt] [text] NULL,
	[TrackingNum] [int] NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [IMS].[EF2_BussIDBActions]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[EF2_BussIDBActions](
	[idboid] [int] NULL,
	[ActionMessage] [varchar](512) NULL,
	[TrackingNum] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[EF2_BussIDBOverride]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[EF2_BussIDBOverride](
	[idboid] [int] NULL,
	[OverrideMessage] [varchar](512) NULL,
	[TrackingNum] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[EF2_BussOFACOverride]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[EF2_BussOFACOverride](
	[ofacoid] [int] NULL,
	[OverrideMessage] [varchar](512) NULL,
	[TrackingNum] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[EF2_ChexIDVActions]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[EF2_ChexIDVActions](
	[idvoid] [int] NULL,
	[ActionMessage] [varchar](512) NULL,
	[TrackingNum] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[EF2_ChexIDVOverride]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[EF2_ChexIDVOverride](
	[idvoid] [int] NULL,
	[OverrideMessage] [varchar](512) NULL,
	[TrackingNum] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[EF2_ChexOFACOverride]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[EF2_ChexOFACOverride](
	[ofacoid] [int] NULL,
	[OverrideMessage] [varchar](512) NULL,
	[TrackingNum] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[EF2_CreditBureauInfo]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[EF2_CreditBureauInfo](
	[creditbureaureasoncd1] [varchar](2) NULL,
	[creditbureaureasoncd2] [varchar](2) NULL,
	[creditbureaureasoncd3] [varchar](2) NULL,
	[creditbureaureasoncd4] [varchar](2) NULL,
	[creditbureaureasoncd5] [varchar](2) NULL,
	[creditbureauscorenbr] [varchar](4) NULL,
	[TrackingNum] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[EF2_CustIdentification]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[EF2_CustIdentification](
	[ChexWebServiceURL] [varchar](256) NULL,
	[acquirerid] [int] NULL,
	[chexsystemsversionnbr] [char](4) NULL,
	[includechexsystems] [char](1) NULL,
	[includeidentitymanager] [char](1) NULL,
	[includeofac] [char](1) NULL,
	[includequalifile] [char](1) NULL,
	[inquiryid] [varchar](15) NULL,
	[qualifileversionnbr] [char](4) NULL,
	[staging] [char](1) NULL,
	[strategytypeid] [varchar](5) NULL,
	[username] [varchar](40) NULL,
	[password] [varchar](40) NULL,
	[DefaultsID] [int] NULL,
	[BranchID] [int] NULL,
	[AccountType] [char](2) NULL,
	[customerid] [char](8) NULL,
	[BusinessWebServiceURL] [varchar](256) NULL,
	[id] [int] IDENTITY(1,1) NOT NULL,
 CONSTRAINT [PK_EF2_CustIdentification] PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[EF2_CustIdLog]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[EF2_CustIdLog](
	[TrackingNum] [int] NULL,
	[HostError] [int] NULL,
	[HostErrorString] [varchar](256) NULL,
	[IMSError] [int] NULL,
	[IMSErrorString] [varchar](256) NULL,
	[locationid] [varchar](30) NULL,
	[userdefinedtransactiontxt] [varchar](256) NULL,
	[CBDecision] [varchar](256) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[EF2_Dictionary]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[EF2_Dictionary](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[Category] [varchar](40) NULL,
	[ErrorText] [varchar](512) NULL,
	[MAReasonCode] [varchar](32) NULL,
	[MADescription] [varchar](256) NULL,
	[ErrorFlag] [varchar](1) NULL,
 CONSTRAINT [PK_EF2_Dictionary] PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[EF2_KBADecision]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[EF2_KBADecision](
	[base] [int] NULL,
	[decision] [varchar](255) NULL,
	[score] [int] NULL,
	[kbaoid] [int] NULL,
	[TrackingNum] [int] NOT NULL,
	[JointOwnerSequence] [smallint] NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Index [TrackingNum]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [TrackingNum] ON [IMS].[EF2_KBADecision]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[EF2_KBAIdentification]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[EF2_KBAIdentification](
	[KBAWebServiceURL] [varchar](256) NULL,
	[acquirerid] [int] NULL,
	[configkey] [varchar](50) NULL,
	[customerid] [char](8) NULL,
	[productcd] [char](2) NULL,
	[productversionnbr] [char](4) NULL,
	[staging] [char](1) NULL,
	[userdefinedtransactiontext1] [varchar](255) NULL,
	[userdefinedtransactiontext2] [varchar](255) NULL,
	[userdefinedtransactiontext3] [varchar](255) NULL,
	[username] [varchar](40) NULL,
	[password] [varchar](40) NULL,
	[DefaultsID] [int] NULL,
	[BranchID] [int] NULL,
	[AccountType] [char](2) NULL,
	[id] [int] IDENTITY(1,1) NOT NULL,
 CONSTRAINT [PK_EF2_KBAIdentification] PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[EF2_KBAPerson]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[EF2_KBAPerson](
	[firstname] [varchar](12) NULL,
	[lastname] [varchar](20) NULL,
	[dob] [datetime] NULL,
	[ssn] [char](9) NULL,
	[address] [varchar](25) NULL,
	[city] [varchar](20) NULL,
	[statecd] [char](2) NULL,
	[zip] [varchar](9) NULL,
	[idvoid] [int] NULL,
	[TrackingNum] [int] NOT NULL,
	[JointOwnerSequence] [smallint] NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Index [TrackingNum]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [TrackingNum] ON [IMS].[EF2_KBAPerson]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[EF2_KBAQuestion]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[EF2_KBAQuestion](
	[id] [int] NULL,
	[questiontext] [varchar](80) NULL,
	[TrackingNum] [int] NOT NULL,
	[JointOwnerSequence] [smallint] NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Index [IX_Tracking_id]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [IX_Tracking_id] ON [IMS].[EF2_KBAQuestion]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[EF2_KBAQuestions]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[EF2_KBAQuestions](
	[quizid] [varchar](25) NULL,
	[quizremain] [varchar](25) NULL,
	[quiztime] [varchar](25) NULL,
	[transid] [varchar](50) NULL,
	[TrackingNum] [int] NOT NULL,
	[JointOwnerSequence] [smallint] NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Index [TrackingNum]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [TrackingNum] ON [IMS].[EF2_KBAQuestions]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[EF2_ManualApproval]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[EF2_ManualApproval](
	[Sequence] [varchar](1) NULL,
	[ReasonCode] [varchar](32) NULL,
	[Description] [varchar](256) NULL,
	[ErrorFlag] [char](1) NULL,
	[TrackingNum] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[EF2_MicrConsumer]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[EF2_MicrConsumer](
	[bankcod] [char](8) NULL,
	[bankcheckdigitcd] [char](1) NULL,
	[accountnbr] [varchar](20) NULL,
	[title] [varchar](15) NULL,
	[firstname] [varchar](20) NULL,
	[middlename] [varchar](20) NULL,
	[lastname] [varchar](20) NULL,
	[generationtxt] [varchar](10) NULL,
	[suffixtxt] [varchar](15) NULL,
	[streetaddresstxt] [varchar](99) NULL,
	[cityname] [varchar](30) NULL,
	[statecd] [char](2) NULL,
	[postalplusfourcd] [varchar](9) NULL,
	[socialsecuritynbr] [char](9) NULL,
	[dlstatecd] [char](2) NULL,
	[dlnb] [char](25) NULL,
	[homephonenbr] [char](10) NULL,
	[workphonenbr] [char](10) NULL,
	[businessname] [char](20) NULL,
	[federaltaxid] [char](9) NULL,
	[TrackingNum] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Index [TrackingNum]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [TrackingNum] ON [IMS].[EF2_MicrConsumer]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[EF2_MicrIdentification]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[EF2_MicrIdentification](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[AOWebServiceURL] [varchar](256) NULL,
	[acquirerid] [int] NULL,
	[customerid] [char](8) NULL,
	[productcd] [char](2) NULL,
	[productversionnbr] [char](4) NULL,
	[staging] [char](1) NULL,
	[userdefinedtransactiontext2] [varchar](40) NULL,
	[userdefinedtransactiontext3] [varchar](40) NULL,
	[username] [varchar](40) NULL,
	[password] [varchar](40) NULL,
	[DefaultsID] [int] NULL,
	[BranchID] [int] NULL,
	[AccountType] [char](2) NULL,
	[userdefinedtransactiontext1] [varchar](40) NULL,
 CONSTRAINT [PK_EF2_MicrIdentification] PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[EF2_MicrMatchData]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[EF2_MicrMatchData](
	[bankcod] [char](8) NULL,
	[bankcheckdigitcd] [char](1) NULL,
	[accountnbr] [varchar](20) NULL,
	[title] [varchar](15) NULL,
	[firstname] [varchar](20) NULL,
	[middlename] [varchar](20) NULL,
	[lastname] [varchar](20) NULL,
	[generationtxt] [varchar](10) NULL,
	[suffixtxt] [varchar](15) NULL,
	[streetaddresstxt] [varchar](99) NULL,
	[cityname] [varchar](30) NULL,
	[statecd] [char](2) NULL,
	[postalplusfourcd] [varchar](9) NULL,
	[socialsecuritynbr] [char](9) NULL,
	[dlstatecd] [char](2) NULL,
	[dlnb] [char](25) NULL,
	[homephonenbr] [char](10) NULL,
	[workphonenbr] [char](10) NULL,
	[businessname] [char](20) NULL,
	[federaltaxid] [char](9) NULL,
	[TrackingNum] [varchar](60) NULL
) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [TrackingNum]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [TrackingNum] ON [IMS].[EF2_MicrMatchData]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[EF2_MicrMatchResponse]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[EF2_MicrMatchResponse](
	[transactiontrackingid] [varchar](60) NULL,
	[receipttm] [char](6) NULL,
	[responsetm] [char](6) NULL,
	[userdefinedtransactiontext1] [varchar](40) NULL,
	[userdefinedtransactiontext2] [varchar](40) NULL,
	[userdefinedtransactiontext3] [varchar](40) NULL,
	[TrackingNum] [varchar](60) NULL
) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [TrackingNum]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [TrackingNum] ON [IMS].[EF2_MicrMatchResponse]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[EF2_MicrRiskConsumer]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[EF2_MicrRiskConsumer](
	[bankcod] [char](8) NULL,
	[bankcheckdigitcd] [char](1) NULL,
	[accountnbr] [varchar](20) NULL,
	[TrackingNum] [varchar](60) NULL
) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [TrackingNum]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [TrackingNum] ON [IMS].[EF2_MicrRiskConsumer]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[EF2_MicrRiskData]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[EF2_MicrRiskData](
	[bankcod] [char](8) NULL,
	[bankcheckdigitcd] [char](1) NULL,
	[accountnbr] [varchar](20) NULL,
	[TrackingNum] [varchar](60) NULL
) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [TrackingNum]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [TrackingNum] ON [IMS].[EF2_MicrRiskData]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[EF2_MicrRiskIdentification]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[EF2_MicrRiskIdentification](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[ARWebServiceURL] [varchar](256) NULL,
	[acquirerid] [int] NULL,
	[customerid] [char](8) NULL,
	[productcd] [char](2) NULL,
	[productversionnbr] [char](4) NULL,
	[staging] [char](1) NULL,
	[username] [varchar](40) NULL,
	[password] [varchar](40) NULL,
	[DefaultsID] [int] NULL,
	[BranchID] [int] NULL,
	[AccountType] [char](2) NULL,
	[userdefinedtransactiontext1] [varchar](40) NULL,
 CONSTRAINT [PK_EF2_MicrRiskIdentification] PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[EF2_MicrRiskResponse]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[EF2_MicrRiskResponse](
	[transactiontrackingid] [varchar](60) NULL,
	[receipttm] [char](6) NULL,
	[responsetm] [char](6) NULL,
	[userdefinedtransactiontext1] [varchar](40) NULL,
	[TrackingNum] [varchar](60) NULL,
	[MappedApprovalType] [char](1) NULL,
	[MappedApprovalAmount] [int] NULL
) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [TrackingNum]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [TrackingNum] ON [IMS].[EF2_MicrRiskResponse]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[EF2_MicrRiskResult]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[EF2_MicrRiskResult](
	[acctaccepttxt] [char](10) NULL,
	[acctclsind] [char](1) NULL,
	[riskmgmtscore] [char](3) NULL,
	[TrackingNum] [varchar](60) NULL
) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [TrackingNum]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [TrackingNum] ON [IMS].[EF2_MicrRiskResult]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[EF2_MicrValidationsresult]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[EF2_MicrValidationsresult](
	[micrmatch] [char](1) NULL,
	[micrnamematch] [char](1) NULL,
	[micraddressmatch] [char](1) NULL,
	[micrgovtnbrmatch] [char](1) NULL,
	[micrdlmatch] [char](1) NULL,
	[micrhomephonematch] [char](1) NULL,
	[micrworkphonematch] [char](1) NULL,
	[TrackingNum] [varchar](60) NULL
) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [TrackingNum]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [TrackingNum] ON [IMS].[EF2_MicrValidationsresult]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[EF2_PersonQuery]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[EF2_PersonQuery](
	[birthdt] [datetime] NULL,
	[citynm] [varchar](20) NULL,
	[compositephonenbr] [varchar](10) NULL,
	[countrynm] [varchar](50) NULL,
	[firstnm] [varchar](12) NULL,
	[governmentnbr] [varchar](9) NULL,
	[identificationstatecd] [char](2) NULL,
	[identificationstatenbr] [varchar](25) NULL,
	[lastnm] [varchar](20) NULL,
	[middlenm] [char](1) NULL,
	[postalplusfourcd] [varchar](9) NULL,
	[statecd] [char](2) NULL,
	[streetaddresstxt] [varchar](25) NULL,
	[userdefinedrecordtxt] [varchar](60) NULL,
	[TrackingNum] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[EF2_ProductOffer]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[EF2_ProductOffer](
	[Sequence] [smallint] NULL,
	[productofferlimitamt] [varchar](11) NULL,
	[productoffertxt] [varchar](32) NULL,
	[productpfferratepct] [varchar](5) NULL,
	[TrackingNum] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[EF2_QualiFileInformation]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[EF2_QualiFileInformation](
	[scorenbr] [varchar](4) NULL,
	[TrackingNum] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[EF2_QualiFileReason]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[EF2_QualiFileReason](
	[Sequence] [smallint] NULL,
	[reasoncd] [varchar](2) NULL,
	[reasontxt] [varchar](60) NULL,
	[TrackingNum] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[EF2_QualifileResponse]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[EF2_QualifileResponse](
	[errorcd] [varchar](4) NULL,
	[errorInformation] [text] NULL,
	[errortxt] [varchar](512) NULL,
	[qualifilenotperformedcd] [char](1) NULL,
	[TrackingNum] [int] NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [IMS].[EF2_ReferenceInformation]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[EF2_ReferenceInformation](
	[consumerdetailreferencenbr] [varchar](12) NULL,
	[creditbureauid] [varchar](3) NULL,
	[creditbureaureferencenbr] [varchar](19) NULL,
	[householdclustercategorycd] [varchar](6) NULL,
	[zipclustercategorycd] [varchar](6) NULL,
	[TrackingNum] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[EF2_ReportReply]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[EF2_ReportReply](
	[addressOK] [char](1) NULL,
	[chexid] [varchar](256) NULL,
	[deceased] [char](1) NULL,
	[dlOK] [char](1) NULL,
	[dobOK] [char](1) NULL,
	[dobafterssndate] [char](1) NULL,
	[errortxt] [varchar](512) NULL,
	[idOK] [char](1) NULL,
	[idcheckhadrecords] [char](1) NULL,
	[idvoid] [int] NULL,
	[idvpassed] [char](1) NULL,
	[nameOK] [char](1) NULL,
	[ofacHIT] [char](1) NULL,
	[ofacfailed] [char](1) NULL,
	[ofacoid] [int] NULL,
	[phoneOK] [char](1) NULL,
	[pleasecallcd] [char](1) NULL,
	[ssnOK] [char](1) NULL,
	[txtreport] [text] NULL,
	[underage] [char](1) NULL,
	[userdefinedtransactiontxt] [char](512) NULL,
	[TrackingNum] [int] NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [IMS].[EF2_RiskMapping]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[EF2_RiskMapping](
	[Sequence] [smallint] NULL,
	[MicrMatchRequired] [char](1) NULL,
	[MinimumOtherMatches] [smallint] NULL,
	[ApprovalType] [char](1) NULL,
	[ApprovalAmount] [int] NULL,
	[DefaultsID] [int] NULL,
	[BranchID] [int] NULL,
	[AccountType] [char](2) NULL,
	[MinRiskScore] [smallint] NULL,
	[MaxRiskScore] [smallint] NULL,
	[AccountClosed] [char](1) NULL,
	[AccountAcceptText] [char](10) NULL
) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_Unique]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE UNIQUE CLUSTERED INDEX [IX_Unique] ON [IMS].[EF2_RiskMapping]
(
	[Sequence] ASC,
	[DefaultsID] ASC,
	[BranchID] ASC,
	[AccountType] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[EmailLog]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[EmailLog](
	[EmailId] [bigint] IDENTITY(1,1) NOT NULL,
	[TrackingNum] [int] NOT NULL,
	[UtcDateSent] [datetime] NOT NULL,
	[FromAddress] [nvarchar](100) NOT NULL,
	[ToAddress] [nvarchar](100) NOT NULL,
	[Subject] [nvarchar](100) NOT NULL,
 CONSTRAINT [PK_EmailLog] PRIMARY KEY CLUSTERED 
(
	[EmailId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[EquifaxAddress]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[EquifaxAddress](
	[TrackingNum] [int] NOT NULL,
	[AddressType] [char](4) NULL,
	[AddressLine1] [char](40) NULL,
	[AddressLine2] [char](40) NULL,
	[City] [char](20) NULL,
	[State] [char](2) NULL,
	[ZipCode] [char](9) NULL,
	[ResidenceSince] [char](6) NULL,
	[ROB] [char](1) NULL,
	[AddressSource] [char](1) NULL,
	[DateReported] [char](8) NULL,
	[Telephone] [char](10) NULL,
	[TelephoneSource] [char](1) NULL,
	[TelephoneDate] [char](10) NULL,
	[CountryCode] [char](3) NULL,
	[AddressVariance] [char](1) NULL,
	[ClientIP] [char](15) NULL,
	[WebIP] [char](15) NULL,
	[ClusterID] [char](10) NULL,
	[HouseNumber] [char](10) NULL,
	[StreetName] [char](26) NULL,
	[StreetType] [char](26) NULL,
	[TelephoneNumber] [char](10) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [TrackingNum]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [TrackingNum] ON [IMS].[EquifaxAddress]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[EquifaxAlertContact]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[EquifaxAlertContact](
	[TrackingNum] [int] NOT NULL,
	[Sequence] [smallint] NULL,
	[AlertType] [char](1) NULL,
	[DateReported] [char](8) NULL,
	[DateEffective] [char](8) NULL,
	[Status] [char](1) NULL,
	[PhoneType1] [char](1) NULL,
	[InternationalCode1] [char](4) NULL,
	[PhoneNumber1] [char](10) NULL,
	[Extension1] [char](5) NULL,
	[PhoneType2] [char](1) NULL,
	[InternationalCode2] [char](4) NULL,
	[PhoneNumber2] [char](10) NULL,
	[Extension2] [char](5) NULL,
	[PhoneType3] [char](1) NULL,
	[InternationalCode3] [char](4) NULL,
	[PhoneNumber3] [char](10) NULL,
	[Extension3] [char](5) NULL,
	[Address1] [char](50) NULL,
	[Address2] [char](25) NULL,
	[City] [char](20) NULL,
	[State] [char](2) NULL,
	[ZIPCode] [char](9) NULL,
	[CountryCode] [char](3) NULL,
	[AdditionalInfo] [char](100) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[EquifaxBankruptcy]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[EquifaxBankruptcy](
	[TrackingNum] [int] NULL,
	[DateFiled] [char](6) NULL,
	[CourtNumber] [char](10) NULL,
	[TypeOfBancruptcy] [char](1) NULL,
	[HowFiled] [char](1) NULL,
	[DispositionCode] [char](1) NULL,
	[AmountOfLiability] [int] NULL,
	[AssetAmount] [int] NULL,
	[ExemptAmount] [int] NULL,
	[NarrativeCode1] [char](2) NULL,
	[NarrativeCode2] [char](2) NULL,
	[CaseNumber] [char](42) NULL,
	[ClientIP] [char](15) NULL,
	[WebIP] [char](15) NULL,
	[ClusterID] [char](10) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [TrackingNum]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [TrackingNum] ON [IMS].[EquifaxBankruptcy]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[EquifaxBeacon]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[EquifaxBeacon](
	[Score] [int] NULL,
	[ReasonCode1] [char](5) NULL,
	[ReasonCode2] [char](5) NULL,
	[ReasonCode3] [char](5) NULL,
	[ReasonCode4] [char](5) NULL,
	[RejectReason] [char](1) NULL,
	[IndicatorCode] [char](1) NULL,
	[InquiriesKeyFactor] [char](1) NULL,
	[TrackingNum] [int] NOT NULL,
	[ScoreRangeLow] [char](3) NULL,
	[ScoreRangeHigh] [char](3) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [TrackingNum]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [TrackingNum] ON [IMS].[EquifaxBeacon]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[EquifaxCCGI]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[EquifaxCCGI](
	[TrackingNum] [int] NOT NULL,
	[DriversLicenseState] [char](50) NULL,
	[DriversLicenseNumber] [char](50) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [TrackingNum]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [TrackingNum] ON [IMS].[EquifaxCCGI]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[EquifaxCDCR]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[EquifaxCDCR](
	[TrackingNum] [int] NOT NULL,
	[MemberCode] [char](4) NULL,
	[AccountNum] [char](16) NULL,
	[TransactionDate] [datetime] NULL,
	[TransactionTime] [char](6) NULL,
	[TransactionType] [char](1) NULL,
	[CDCResponseCode] [char](1) NULL,
	[CDCProblemCode] [char](2) NULL,
	[MatchCodes] [char](6) NULL,
	[ProblemReportDate] [datetime] NULL,
	[IssueSource] [char](20) NULL,
	[IssueID] [char](20) NULL,
	[Comment] [char](100) NULL,
	[OFACFName] [char](13) NULL,
	[OFACMName] [char](1) NULL,
	[OFACLName] [char](19) NULL,
	[OFACAddress] [char](30) NULL,
	[OFACCity] [char](15) NULL,
	[OFACState] [char](2) NULL,
	[OFACZipCode] [char](9) NULL,
	[OFACCountryCode] [char](3) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [TrackingNum]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [TrackingNum] ON [IMS].[EquifaxCDCR]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[EquifaxCollections]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[EquifaxCollections](
	[TrackingNum] [int] NOT NULL,
	[ForeignBureauCode] [char](1) NULL,
	[DateReported] [char](6) NULL,
	[DateAssigned] [char](6) NULL,
	[CustomerNumber] [char](10) NULL,
	[ClientNameNumber] [char](30) NULL,
	[OriginalAmount] [char](7) NULL,
	[StatusDate] [char](6) NULL,
	[CollectionStatusDate] [char](6) NULL,
	[Balance] [char](7) NULL,
	[DateOfBalance] [char](6) NULL,
	[NarrativeCode1] [char](2) NULL,
	[NarrativeCode2] [char](2) NULL,
	[DateOfLastActivity] [char](6) NULL,
	[AccountSerialNum] [char](20) NULL,
	[AccountDesignatorCode] [char](1) NULL,
	[TapeIndicator] [char](1) NULL,
	[CollectionStatusCode] [char](1) NULL,
	[ClientIP] [char](15) NULL,
	[WebIP] [char](15) NULL,
	[ClusterID] [char](10) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [TrackingNum]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [TrackingNum] ON [IMS].[EquifaxCollections]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[EquifaxDataAttribute]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[EquifaxDataAttribute](
	[TrackingNum] [int] NOT NULL,
	[NumAttributes] [char](2) NULL,
	[ModelNumber] [char](5) NULL,
	[DataAttributeNum] [int] NULL,
	[ClientIP] [char](15) NULL,
	[WebIP] [char](15) NULL,
	[ClusterID] [char](10) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [TrackingNum]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [TrackingNum] ON [IMS].[EquifaxDataAttribute]
(
	[TrackingNum] ASC,
	[DataAttributeNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[EquifaxDataAttributes]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[EquifaxDataAttributes](
	[TrackingNum] [int] NOT NULL,
	[DataAttributeNum] [int] NULL,
	[DAttribute] [char](15) NULL,
	[DataAttributeIndex] [int] NULL,
	[ClientIP] [char](15) NULL,
	[WebIP] [char](15) NULL,
	[ClusterID] [char](10) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [TrackingNum]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [TrackingNum] ON [IMS].[EquifaxDataAttributes]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[EquifaxDateOfDeath]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[EquifaxDateOfDeath](
	[TrackingNum] [int] NOT NULL,
	[DateDied] [char](6) NULL,
	[ClientIP] [char](15) NULL,
	[WebIP] [char](15) NULL,
	[ClusterID] [char](10) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [TrackingNum]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [TrackingNum] ON [IMS].[EquifaxDateOfDeath]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[EquifaxDecisionPower]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[EquifaxDecisionPower](
	[TrackingNum] [int] NOT NULL,
	[Decision] [char](72) NULL,
	[ClientIP] [char](15) NULL,
	[WebIP] [char](15) NULL,
	[ClusterID] [char](10) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [TrackingNum]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [TrackingNum] ON [IMS].[EquifaxDecisionPower]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[EquifaxDictionary]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[EquifaxDictionary](
	[Category] [char](30) NULL,
	[Code] [char](5) NULL,
	[Description] [char](255) NULL
) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [xCategoryCode]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE UNIQUE CLUSTERED INDEX [xCategoryCode] ON [IMS].[EquifaxDictionary]
(
	[Category] ASC,
	[Code] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[EquifaxEDAS]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[EquifaxEDAS](
	[TrackingNum] [int] NOT NULL,
	[Score] [int] NULL,
	[ReasonCode1] [char](5) NULL,
	[ReasonCode2] [char](5) NULL,
	[ReasonCode3] [char](5) NULL,
	[ReasonCode4] [char](5) NULL,
	[RejectCode] [char](1) NULL,
	[RegionalIndicator] [char](1) NULL,
	[EnhancedDASIndicator] [char](1) NULL,
	[ClientIP] [char](15) NULL,
	[WebIP] [char](15) NULL,
	[ClusterID] [char](10) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [TrackingNum]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [TrackingNum] ON [IMS].[EquifaxEDAS]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[EquifaxEmployment]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[EquifaxEmployment](
	[TrackingNum] [int] NOT NULL,
	[EmploymentType] [char](2) NULL,
	[Occupation] [char](35) NULL,
	[Employer] [char](35) NULL,
	[City] [char](8) NULL,
	[State] [char](2) NULL,
	[EmploymentDate] [char](6) NULL,
	[VerifiedDate] [char](6) NULL,
	[IndirectVerificationCode] [char](1) NULL,
	[DateLeftEmpolyer] [char](6) NULL,
	[ClientIP] [char](15) NULL,
	[WebIP] [char](15) NULL,
	[ClusterID] [char](10) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [TrackingNum]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [TrackingNum] ON [IMS].[EquifaxEmployment]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[EquifaxFileInquiry]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[EquifaxFileInquiry](
	[TrackingNum] [int] NULL,
	[DateOfInquiry] [datetime] NULL,
	[Abbreviation] [char](8) NULL,
	[CustomerNumber] [char](10) NULL,
	[Text] [char](20) NULL,
	[ClientIP] [char](15) NULL,
	[WebIP] [char](15) NULL,
	[ClusterID] [char](10) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[EquifaxFinanceCounsel]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[EquifaxFinanceCounsel](
	[TrackingNum] [int] NOT NULL,
	[DateReported] [char](6) NULL,
	[CourtCustomerNumber] [char](10) NULL,
	[Amount] [int] NULL,
	[DateChecked] [char](6) NULL,
	[DateSettled] [char](6) NULL,
	[NarrativeCode1] [char](2) NULL,
	[NarrativeCode2] [char](2) NULL,
	[StatusCode] [char](1) NULL,
	[ClientIP] [char](15) NULL,
	[WebIP] [char](15) NULL,
	[ClusterID] [char](10) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [TrackingNum]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [TrackingNum] ON [IMS].[EquifaxFinanceCounsel]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[EquifaxForeclosure]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[EquifaxForeclosure](
	[TrackingNum] [int] NOT NULL,
	[DateReported] [char](6) NULL,
	[DateChecked] [char](6) NULL,
	[NarrativeCode1] [char](2) NULL,
	[NarrativeCode2] [char](2) NULL,
	[CustomerNumber] [char](40) NULL,
	[ClientIP] [char](15) NULL,
	[WebIP] [char](15) NULL,
	[ClusterID] [char](10) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [TrackingNum]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [TrackingNum] ON [IMS].[EquifaxForeclosure]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[EquifaxFraudVictim]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[EquifaxFraudVictim](
	[TrackingNum] [int] NOT NULL,
	[AdvisorIndex] [char](3) NULL,
	[WarningCode1] [char](3) NULL,
	[WarningCode2] [char](3) NULL,
	[WarningCode3] [char](3) NULL,
	[WarningCode4] [char](3) NULL,
	[RejectCode] [char](1) NULL,
	[WarningDesc1] [char](255) NULL,
	[WarningDesc2] [char](255) NULL,
	[WarningDesc3] [char](255) NULL,
	[WarningDesc4] [char](255) NULL,
	[RejectDesc] [char](255) NULL,
	[FnameCount] [char](2) NULL,
	[LnameCount] [char](2) NULL,
	[BusinessCount] [char](2) NULL,
	[AddressCount] [char](2) NULL,
	[SSNCount] [char](2) NULL,
	[HomePhoneCount] [char](2) NULL,
	[WorkPhoneCount] [char](2) NULL,
	[DOBConfirm] [char](2) NULL,
	[DLConfirm] [char](2) NULL,
	[EmailConfirm] [char](2) NULL,
	[SSNVerifyLvl] [char](2) NULL,
	[NumVerifiedFields] [char](2) NULL,
	[SumVerifiedCount] [char](2) NULL,
	[IDAdvisorIndex] [char](3) NULL,
	[IDWarningCode1] [char](3) NULL,
	[IDWarningCode2] [char](3) NULL,
	[IDWarningCode3] [char](3) NULL,
	[IDWarningCode4] [char](3) NULL,
	[IDWarningDesc1] [char](255) NULL,
	[IDWarningDesc2] [char](255) NULL,
	[IDWarningDesc3] [char](255) NULL,
	[IDWarningDesc4] [char](255) NULL,
	[Fname] [char](15) NULL,
	[Lname] [char](20) NULL,
	[Address] [char](50) NULL,
	[City] [char](30) NULL,
	[State] [char](2) NULL,
	[Zip] [char](9) NULL,
	[SSN] [char](9) NULL,
	[DOB] [char](8) NULL,
	[HomePhone] [char](10) NULL,
	[ClientIP] [char](15) NULL,
	[WebIP] [char](15) NULL,
	[ClusterID] [char](10) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [TrackingNum]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [TrackingNum] ON [IMS].[EquifaxFraudVictim]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[EquifaxGarnishment]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[EquifaxGarnishment](
	[TrackingNum] [int] NOT NULL,
	[DateReported] [char](6) NULL,
	[CourtCustomerNumber] [char](10) NULL,
	[Amount] [int] NULL,
	[DateSatisfied] [char](6) NULL,
	[DateChecked] [char](6) NULL,
	[NarrativeCode1] [char](2) NULL,
	[NarrativeCode2] [char](2) NULL,
	[CaseNumber] [char](42) NULL,
	[Plaintiff] [char](35) NULL,
	[Garnishee] [char](35) NULL,
	[Defendant] [char](35) NULL,
	[ClientIP] [char](15) NULL,
	[WebIP] [char](15) NULL,
	[ClusterID] [char](10) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [TrackingNum]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [TrackingNum] ON [IMS].[EquifaxGarnishment]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[EquifaxGEO]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[EquifaxGEO](
	[TrackingNum] [int] NOT NULL,
	[SMSA] [char](4) NULL,
	[StateCode] [char](2) NULL,
	[CountyCode] [char](3) NULL,
	[CensusTrack] [char](4) NULL,
	[Suffix] [char](2) NULL,
	[BlockGroup] [char](1) NULL,
	[StreetNumber] [char](10) NULL,
	[StreetName] [char](26) NULL,
	[StreetTypeDirection] [char](20) NULL,
	[City] [char](26) NULL,
	[State] [char](2) NULL,
	[ZipCode] [char](9) NULL,
	[TypeOfAddress] [char](2) NULL,
	[ReturnCode1] [char](1) NULL,
	[ReturnCode2] [char](1) NULL,
	[ReturnCode3] [char](1) NULL,
	[ReturnCode4] [char](1) NULL,
	[MicroVisionCode] [char](2) NULL,
	[MicroVisionReturnCode] [char](1) NULL,
	[ClientIP] [char](15) NULL,
	[WebIP] [char](15) NULL,
	[ClusterID] [char](10) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [TrackingNum]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [TrackingNum] ON [IMS].[EquifaxGEO]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[EquifaxGuaranteedLoan]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[EquifaxGuaranteedLoan](
	[TrackingNum] [int] NOT NULL,
	[DateFiled] [char](6) NULL,
	[CourtCustomerNumber] [char](10) NULL,
	[ABCCreditorClass] [char](2) NULL,
	[MaturityDate] [char](6) NULL,
	[NarrativeCode1] [char](2) NULL,
	[NarrativeCode2] [char](2) NULL,
	[CaseNumber] [char](42) NULL,
	[ClientIP] [char](15) NULL,
	[WebIP] [char](15) NULL,
	[ClusterID] [char](10) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [TrackingNum]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [TrackingNum] ON [IMS].[EquifaxGuaranteedLoan]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[EquifaxHeader]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[EquifaxHeader](
	[TrackingNum] [int] NOT NULL,
	[SSN] [char](10) NULL,
	[DOB] [char](10) NULL,
	[Age] [int] NULL,
	[HeaderType] [char](5) NULL,
	[PersonalCompanyIndicator] [char](1) NULL,
	[SubscriberNumber] [char](50) NULL,
	[ClientIP] [char](15) NULL,
	[WebIP] [char](15) NULL,
	[ClusterID] [char](10) NULL,
	[DOBorAge] [char](10) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [TrackingNum]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [TrackingNum] ON [IMS].[EquifaxHeader]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[EquifaxInquiry]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[EquifaxInquiry](
	[TrackingNum] [int] NOT NULL,
	[DateOfInquiry] [datetime] NULL,
	[CustomerNumber] [char](10) NULL,
	[CustomerName] [char](20) NULL,
	[ClientIP] [char](15) NULL,
	[WebIP] [char](15) NULL,
	[ClusterID] [char](10) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [TrackingNum]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [TrackingNum] ON [IMS].[EquifaxInquiry]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[EquifaxLegal]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[EquifaxLegal](
	[TrackingNum] [int] NOT NULL,
	[ForeignBureauCode] [char](1) NULL,
	[DateFiled] [char](6) NULL,
	[CourtCustomerNumber] [char](10) NULL,
	[Amount] [int] NULL,
	[TypeCode] [char](1) NULL,
	[DateSatisfied] [char](6) NULL,
	[StatusCode] [char](1) NULL,
	[DateVerified] [char](6) NULL,
	[NarrativeCode1] [char](10) NULL,
	[NarrativeCode2] [char](10) NULL,
	[Defendant] [char](40) NULL,
	[CaseNumber] [char](42) NULL,
	[Plantiff] [char](40) NULL,
	[ClientIP] [char](15) NULL,
	[WebIP] [char](15) NULL,
	[ClusterID] [char](10) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [TrackingNum]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [TrackingNum] ON [IMS].[EquifaxLegal]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[EquifaxLien]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[EquifaxLien](
	[TrackingNum] [int] NOT NULL,
	[DateFiled] [char](6) NULL,
	[CourtCustomerNumber] [char](10) NULL,
	[Amount] [char](7) NULL,
	[ACBCreditorClass] [char](2) NULL,
	[DateReleased] [char](6) NULL,
	[DateVerified] [char](6) NULL,
	[NarrativeCode1] [char](2) NULL,
	[NarrativeCode2] [char](2) NULL,
	[CaseNumber] [char](42) NULL,
	[ClientIP] [char](15) NULL,
	[WebIP] [char](15) NULL,
	[ClusterID] [char](10) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [TrackingNum]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [TrackingNum] ON [IMS].[EquifaxLien]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[EquifaxManualApproval]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[EquifaxManualApproval](
	[TrackingNum] [int] NOT NULL,
	[ReasonCode] [char](32) NULL,
	[Description] [char](255) NULL,
	[ClientIP] [char](15) NULL,
	[WebIP] [char](15) NULL,
	[ClusterID] [char](10) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [TrackingNum]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [TrackingNum] ON [IMS].[EquifaxManualApproval]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[EquifaxModel]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[EquifaxModel](
	[TrackingNum] [int] NOT NULL,
	[FormatType] [char](2) NULL,
	[ModelNumber] [char](5) NULL,
	[ModelId] [char](1) NULL,
	[ScoreNumber] [char](1) NULL,
	[NumericScore] [int] NULL,
	[NumericScoreIndicator] [char](1) NULL,
	[ReasonCode1] [char](5) NULL,
	[ReasonCode2] [char](5) NULL,
	[ReasonCode3] [char](5) NULL,
	[ReasonCode4] [char](5) NULL,
	[SSCreditReject] [char](2) NULL,
	[SSDebitReject] [char](2) NULL,
	[SpouseCreditReject] [char](2) NULL,
	[SpouseDepitReject] [char](2) NULL,
	[JointCreditReject] [char](2) NULL,
	[JointDebitReject] [char](2) NULL,
	[RejectCode] [char](2) NULL,
	[ClientIP] [char](15) NULL,
	[WebIP] [char](15) NULL,
	[ClusterID] [char](10) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [TrackingNum]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [TrackingNum] ON [IMS].[EquifaxModel]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[EquifaxName]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[EquifaxName](
	[TrackingNum] [int] NOT NULL,
	[NameType] [char](4) NULL,
	[First] [char](20) NULL,
	[Middle] [char](20) NULL,
	[Last] [char](30) NULL,
	[Suffix] [char](10) NULL,
	[ClientIP] [char](15) NULL,
	[WebIP] [char](15) NULL,
	[ClusterID] [char](10) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [TrackingNum]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [TrackingNum] ON [IMS].[EquifaxName]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[EquifaxNarrative]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[EquifaxNarrative](
	[TrackingNum] [int] NOT NULL,
	[DateReported] [char](6) NULL,
	[PurgeDate] [char](6) NULL,
	[LengthCounter] [char](3) NULL,
	[ConsumerVerbiage] [char](495) NULL,
	[ClientIP] [char](15) NULL,
	[WebIP] [char](15) NULL,
	[ClusterID] [char](10) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [TrackingNum]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [TrackingNum] ON [IMS].[EquifaxNarrative]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[EquifaxNonCustomerTrade]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[EquifaxNonCustomerTrade](
	[TrackingNum] [int] NOT NULL,
	[DateReported] [char](6) NULL,
	[TypeCode] [char](1) NULL,
	[RateCode0Above] [char](1) NULL,
	[RateCodeBelow0] [char](1) NULL,
	[DateOpened] [char](6) NULL,
	[NarrativeCode1] [char](2) NULL,
	[NarrativeCode2] [char](2) NULL,
	[ConsumerNarrative] [char](40) NULL,
	[HighCreditAmount] [int] NULL,
	[Balance] [int] NULL,
	[PastDueAmount] [int] NULL,
	[DateOfLastActivity] [char](6) NULL,
	[ClientIP] [char](15) NULL,
	[WebIP] [char](15) NULL,
	[ClusterID] [char](10) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [TrackingNum]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [TrackingNum] ON [IMS].[EquifaxNonCustomerTrade]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[EquifaxOFAC]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[EquifaxOFAC](
	[TrackingNum] [int] NOT NULL,
	[MemberFirmCode] [char](4) NULL,
	[CustomerNumber] [char](16) NULL,
	[TransactionDate] [datetime] NULL,
	[TransactionType] [char](1) NULL,
	[CDCResponseCode] [char](1) NULL,
	[CDCProblemCode] [char](2) NULL,
	[MatchCodes] [char](6) NULL,
	[ProblemReportDate] [datetime] NULL,
	[IssueSource] [char](20) NULL,
	[IssueID] [char](20) NULL,
	[Comment] [char](100) NULL,
	[CountryCode] [char](3) NULL,
	[LegalVerbiage] [char](260) NULL,
	[FirstName] [char](13) NULL,
	[MiddleName] [char](1) NULL,
	[LastName] [char](19) NULL,
	[Address] [char](30) NULL,
	[City] [char](15) NULL,
	[State] [char](2) NULL,
	[ZipCode] [char](9) NULL,
	[ClientIP] [char](15) NULL,
	[WebIP] [char](15) NULL,
	[ClusterID] [char](10) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [TrackingNum]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [TrackingNum] ON [IMS].[EquifaxOFAC]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[EquifaxOnlineDirectory]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[EquifaxOnlineDirectory](
	[TrackingNum] [int] NOT NULL,
	[CustomerNumber] [char](10) NULL,
	[CustomerName] [char](20) NULL,
	[CustomerPhone] [char](10) NULL,
	[AddressLine1] [char](30) NULL,
	[AddressLine2] [char](30) NULL,
	[City] [char](21) NULL,
	[State] [char](2) NULL,
	[ZipCode] [char](10) NULL,
	[ClientIP] [char](15) NULL,
	[WebIP] [char](15) NULL,
	[ClusterID] [char](10) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [TrackingNum]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [TrackingNum] ON [IMS].[EquifaxOnlineDirectory]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[EquifaxReferralLocation]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[EquifaxReferralLocation](
	[TrackingNum] [int] NOT NULL,
	[BureauCode] [char](3) NULL,
	[Name] [char](50) NULL,
	[Address1] [char](50) NULL,
	[Address2] [char](50) NULL,
	[City] [char](20) NULL,
	[State] [char](2) NULL,
	[ZipCode] [char](9) NULL,
	[Phone] [char](10) NULL,
	[ClientIP] [char](15) NULL,
	[WebIP] [char](15) NULL,
	[ClusterID] [char](10) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [TrackingNum]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [TrackingNum] ON [IMS].[EquifaxReferralLocation]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[EquifaxReply]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[EquifaxReply](
	[TrackingNum] [int] NOT NULL,
	[HitNoHit] [char](2) NULL,
	[FileSinceDate] [datetime] NULL,
	[DateOfLastActivity] [datetime] NULL,
	[DateOfThisReport] [datetime] NULL,
	[AddressDiscrepancyIndicator] [char](1) NULL,
	[FraudVictimIndicator] [char](1) NULL,
	[SafeScanCode] [char](1) NULL,
	[SSN] [char](9) NULL,
	[ClientIP] [char](15) NULL,
	[WebIP] [char](15) NULL,
	[ClusterID] [char](10) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [TrackingNum]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [TrackingNum] ON [IMS].[EquifaxReply]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[EquifaxSSN]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[EquifaxSSN](
	[TrackingNum] [int] NOT NULL,
	[SubjectAge] [char](2) NULL,
	[SubjectSSN] [char](9) NULL,
	[SSNVerified] [char](1) NULL,
	[INQRSSN] [char](9) NULL,
	[INQRDateIssued] [char](4) NULL,
	[INQRStateIssued] [char](2) NULL,
	[INQRDeathDate] [char](4) NULL,
	[INQRStateOfDeath] [char](2) NULL,
	[ClientIP] [char](15) NULL,
	[WebIP] [char](15) NULL,
	[ClusterID] [char](10) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [TrackingNum]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [TrackingNum] ON [IMS].[EquifaxSSN]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[EquifaxTLCK]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[EquifaxTLCK](
	[TrackingNum] [int] NOT NULL,
	[ResponseType] [char](2) NULL,
	[EquifaxMemberNum] [char](10) NULL,
	[TLCKSubscriberNum] [char](8) NULL,
	[ResponseCode] [char](2) NULL,
	[ApprovalCode] [char](4) NULL,
	[Name] [char](30) NULL,
	[SSInfo] [char](30) NULL,
	[TLCKNum] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Index [TrackingNum]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [TrackingNum] ON [IMS].[EquifaxTLCK]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[EquifaxTLCKHistory]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[EquifaxTLCKHistory](
	[TrackingNum] [int] NOT NULL,
	[Code] [char](2) NULL,
	[Description] [char](30) NULL,
	[TLCKNum] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Index [TrackingNum]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [TrackingNum] ON [IMS].[EquifaxTLCKHistory]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[EquifaxTradeHistory]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[EquifaxTradeHistory](
	[TrackingNum] [int] NOT NULL,
	[CustomerName] [char](20) NULL,
	[CustomerNumber] [char](10) NULL,
	[DateReported] [char](6) NOT NULL,
	[DateOpened] [char](6) NULL,
	[HighCredit] [int] NULL,
	[Terms] [char](7) NULL,
	[Balance] [int] NULL,
	[PastDue] [int] NULL,
	[TypeCode] [char](1) NULL,
	[RateStatusCode] [char](1) NULL,
	[TapeIndicator] [char](1) NULL,
	[MonthsReviewed] [char](2) NULL,
	[AccountDesignatorCode] [char](1) NULL,
	[AccountNumber] [char](20) NULL,
	[Counter30Day] [int] NULL,
	[Counter60Day] [int] NULL,
	[Counter90Day] [int] NULL,
	[PreviousRate1] [char](1) NULL,
	[PreviousDate1] [char](6) NULL,
	[PreviousRate2] [char](1) NULL,
	[PreviousDate2] [char](6) NULL,
	[PreviousRate3] [char](1) NULL,
	[PreviousDate3] [char](6) NULL,
	[DateLastActivity] [char](6) NULL,
	[NarrativeCode1] [char](2) NULL,
	[NarrativeCode2] [char](2) NULL,
	[PaymentHistory24Month] [char](25) NULL,
	[ClientIP] [char](15) NULL,
	[WebIP] [char](15) NULL,
	[ClusterID] [char](10) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [TrackingNum]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [TrackingNum] ON [IMS].[EquifaxTradeHistory]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[EquifaxTradeProspect]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[EquifaxTradeProspect](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[TrackingNum] [int] NULL,
	[LoanType] [char](10) NULL,
	[LoanSubType] [char](10) NULL,
	[ProductName] [char](100) NULL,
	[InstitutionName] [char](100) NULL,
	[Payment] [int] NULL,
	[Rate] [int] NULL,
	[Term] [smallint] NULL,
	[Balance] [int] NULL,
	[OrigBal] [int] NULL,
	[CreditLim] [int] NULL,
	[ExpireDate] [datetime] NULL,
 CONSTRAINT [PK_EquifaxTradeProspect] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[Error]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[Error](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[at] [datetime] NOT NULL,
	[application] [varchar](100) NULL,
	[text] [varchar](max) NOT NULL,
	[reslovedAt] [datetime] NULL,
	[reslovedBy] [varchar](100) NULL,
	[exception] [varchar](max) NULL,
 CONSTRAINT [PK__NAOError__3213E83F54376389] PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [IMS].[ExperianCreditProfileReply]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[ExperianCreditProfileReply](
	[TrackingNum] [int] NULL,
	[SSN] [varchar](100) NULL,
	[FullResponse] [text] NULL,
	[HumanReadable] [text] NULL,
	[DatePulled] [datetime] NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [IMS].[ExperianDefaults]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[ExperianDefaults](
	[DefaultsID] [int] NULL,
	[Name] [varchar](50) NULL,
	[PasswordResetURL] [varchar](50) NULL,
	[PasswordResetURI] [varchar](50) NULL,
	[Username] [varchar](200) NULL,
	[Password] [varchar](200) NULL,
	[DateTimePasswordExpire] [datetime] NULL,
	[PasswordExpireDays] [int] NULL,
	[EAI] [varchar](50) NULL,
	[DBHost] [varchar](15) NULL,
	[Preamble] [varchar](200) NULL,
	[SubCode] [varchar](200) NULL,
	[TTYHeading] [char](1) NULL,
	[ARFVersion] [char](2) NULL,
	[ARFParsed] [char](1) NULL,
	[ARFDemograhics] [char](1) NULL,
	[ARFY2K] [char](1) NULL,
	[ARFSegment130] [char](1) NULL,
	[ParallelProfileFormatType] [char](1) NULL,
	[ParallelProfileHeading] [char](1) NULL,
	[VendorNumber] [varchar](3) NULL,
	[VendorVersion] [varchar](6) NULL,
	[OptionsJoint] [char](1) NULL,
	[OptionsReferenceNumber] [varchar](90) NULL,
	[OptionsEndUser] [varchar](30) NULL,
	[OptionsBrokerNumber] [varchar](10) NULL,
	[OptionsSB168] [char](1) NULL,
	[OFACMSG] [char](1) NULL,
	[OFAC] [char](1) NULL,
	[LockedOut] [char](1) NULL,
	[ECALSURL] [varchar](200) NULL,
	[AuthenticationFailure] [int] NULL,
	[FullURL] [varchar](200) NULL,
	[URL] [varchar](50) NULL,
	[Port] [int] NULL,
	[URI] [varchar](50) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[ExperianManualApproval]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[ExperianManualApproval](
	[TrackingNum] [int] NULL,
	[ReasonCode] [varchar](32) NULL,
	[Category] [varchar](2) NULL,
	[Description] [varchar](80) NULL,
	[ActionCode] [varchar](1) NULL,
	[DataField] [varchar](20) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[FDRConfig]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[FDRConfig](
	[ID] [int] NULL,
	[WebServiceUrl] [varchar](255) NULL,
	[WebServiceTimeout] [int] NULL,
	[CertFile] [varchar](255) NULL,
	[Username] [varchar](255) NULL,
	[Password] [varchar](255) NULL,
	[apikey] [varchar](255) NULL,
	[token] [varchar](255) NULL,
	[ContentType] [varchar](100) NULL,
	[APISecret] [varchar](255) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[FISPrePaidConfig]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[FISPrePaidConfig](
	[ConfigurationId] [int] NULL,
	[FISPrePaidUrl] [varchar](255) NULL,
	[BalanceInquiryPageUrl] [varchar](100) NULL,
	[BalanceInquiryPageResponseType] [varchar](10) NULL,
	[TransactionHistoryPageUrl] [varchar](100) NULL,
	[TransactionHistoryPageResponseType] [varchar](10) NULL,
	[ReloadsPageUrl] [varchar](100) NULL,
	[ReloadsPageResponseType] [varchar](10) NULL,
	[WebServiceTimeout] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[Flags]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[Flags](
	[TrackingNum] [int] NOT NULL,
	[Sequence] [tinyint] NOT NULL,
	[Account] [int] NULL,
	[Surname] [char](2) NULL,
	[Suffix] [smallint] NULL,
	[FlagLevel] [char](1) NULL,
	[FlagType] [char](1) NULL,
	[FlagNumber] [smallint] NULL,
	[Processed] [smallint] NULL,
	[FlagValue] [smallint] NULL,
	[FlagDate] [datetime] NULL,
	[ClientIP] [char](15) NULL,
	[WebIP] [char](15) NULL,
	[ClusterID] [char](10) NULL,
	[LastModified] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Index [Tracking]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [Tracking] ON [IMS].[Flags]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[HarlandChecksConfig]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[HarlandChecksConfig](
	[ConfigurationId] [int] NULL,
	[ClientId] [varchar](10) NULL,
	[EncryptionKeyFile] [varchar](255) NULL,
	[HarlandHostname] [varchar](255) NULL,
	[HarlandPath] [varchar](255) NULL,
	[HarlandPort] [int] NULL,
	[HarlandTimeout] [int] NULL,
	[Username] [varchar](100) NULL,
	[Password] [varchar](100) NULL,
	[Application] [varchar](100) NULL,
	[RoutingNumber] [varchar](50) NULL,
	[FinancialInstitutionUrl] [varchar](512) NULL,
	[LogoUrl] [varchar](512) NULL,
	[Redirect] [varchar](1) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [IX_ConfigId]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE UNIQUE CLUSTERED INDEX [IX_ConfigId] ON [IMS].[HarlandChecksConfig]
(
	[ConfigurationId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[HostConfigurationSettings]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[HostConfigurationSettings](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](64) NOT NULL,
	[Value] [varchar](max) NULL,
	[Description] [varchar](1024) NULL,
 CONSTRAINT [PK__HostConf__3214EC07009FF5AC] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [IMS].[HTTPConfig]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[HTTPConfig](
	[TransId] [int] NULL,
	[OrgId] [char](10) NULL,
	[ClientName] [char](20) NULL,
	[URL] [char](50) NULL,
	[URI] [char](100) NULL,
	[iPort] [int] NULL,
	[UserId] [char](50) NULL,
	[Pass] [char](50) NULL,
	[sContentType] [char](50) NULL,
	[sMethod] [char](10) NULL,
	[bSecure] [bit] NULL,
	[TransactionType] [char](32) NULL,
	[Version] [char](20) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[HttpSetting]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[HttpSetting](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[scriptId] [varchar](100) NOT NULL,
	[name] [varchar](250) NOT NULL,
	[value] [varchar](4000) NULL,
 CONSTRAINT [PK__HttpSetting__2744C181] PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[ILA_BorrowerAddress]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[ILA_BorrowerAddress](
	[AddressTypeCode] [char](4) NOT NULL,
	[AddressVerified] [char](1) NULL,
	[Address1] [varchar](30) NULL,
	[Address2] [varchar](30) NULL,
	[Address3] [varchar](30) NULL,
	[City] [varchar](20) NULL,
	[State] [char](2) NULL,
	[Zip] [char](9) NULL,
	[AreaCode] [char](3) NULL,
	[Phone] [char](8) NULL,
	[CntryCode] [char](2) NULL,
	[CntryName] [varchar](40) NULL,
	[ResidenceYears] [smallint] NULL,
	[ResidenceMonths] [smallint] NULL,
	[OccupancyStatus] [varchar](40) NULL,
	[PaymentAmount] [int] NULL,
	[CellPhone] [char](7) NULL,
	[CellPhoneAC] [char](3) NULL,
	[Ext] [char](5) NULL,
	[FaxPhone] [char](7) NULL,
	[FaxPhoneAC] [char](3) NULL,
	[PagerPhone] [char](7) NULL,
	[PagerPhoneAC] [char](3) NULL,
	[Email1] [varchar](60) NULL,
	[TrackingNum] [int] NOT NULL,
	[BorrowerNum] [smallint] NOT NULL,
	[ClientIP] [varchar](15) NULL,
	[WebIP] [varchar](15) NULL,
	[ClusterID] [char](10) NULL,
	[LastModified] [datetime] NULL,
	[ResidenceBeg] [datetime] NULL,
	[ResidenceEnd] [datetime] NULL,
PRIMARY KEY CLUSTERED 
(
	[TrackingNum] ASC,
	[BorrowerNum] ASC,
	[AddressTypeCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[ILA_BorrowerDebt]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[ILA_BorrowerDebt](
	[DebtTypeCode] [char](4) NOT NULL,
	[DebtSource] [varchar](30) NULL,
	[DebtType] [varchar](30) NULL,
	[Residence] [char](6) NULL,
	[PaymentAmount] [int] NULL,
	[PaymentFrequency] [char](1) NULL,
	[TrackingNum] [int] NOT NULL,
	[BorrowerNum] [smallint] NOT NULL,
	[LotRent] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[TrackingNum] ASC,
	[BorrowerNum] ASC,
	[DebtTypeCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[ILA_BorrowerEmployment]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[ILA_BorrowerEmployment](
	[EmployerTypeCode] [char](4) NOT NULL,
	[OccupationCode] [char](2) NULL,
	[EmployerName] [varchar](36) NULL,
	[JobTitle] [varchar](30) NULL,
	[HireDate] [datetime] NULL,
	[AreaCode] [char](3) NULL,
	[Phone] [char](8) NULL,
	[Ext] [char](5) NULL,
	[CanContactAtWork] [char](2) NULL,
	[EmploymentStatus] [char](10) NULL,
	[EmploymentSalary] [int] NULL,
	[ProfessionYears] [smallint] NULL,
	[ProfessionMonths] [smallint] NULL,
	[ProfessionTotalYears] [smallint] NULL,
	[Department] [varchar](20) NULL,
	[EmployeeNumber] [varchar](20) NULL,
	[Shift] [char](10) NULL,
	[TrackingNum] [int] NOT NULL,
	[BorrowerNum] [smallint] NOT NULL,
	[ClientIP] [varchar](15) NULL,
	[WebIP] [varchar](15) NULL,
	[ClusterID] [char](10) NULL,
	[LastModified] [datetime] NULL,
	[ProfessionBeg] [datetime] NULL,
	[ProfessionEnd] [datetime] NULL,
 CONSTRAINT [PK__ILA_Borr__C52E38B5BFE2BD99] PRIMARY KEY CLUSTERED 
(
	[TrackingNum] ASC,
	[BorrowerNum] ASC,
	[EmployerTypeCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[ILA_BorrowerHMDA]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[ILA_BorrowerHMDA](
	[Decline] [char](1) NULL,
	[RaceCode] [char](1) NULL,
	[Race] [varchar](100) NULL,
	[Gender] [varchar](100) NULL,
	[Age] [smallint] NULL,
	[Ethnicity] [varchar](100) NULL,
	[TrackingNum] [int] NULL,
	[BorrowerNum] [smallint] NULL,
	[ClientIP] [varchar](15) NULL,
	[WebIP] [varchar](15) NULL,
	[ClusterID] [char](10) NULL,
	[LastModified] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Index [IX_IlaBorrowerHmda_TrackingNum]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [IX_IlaBorrowerHmda_TrackingNum] ON [IMS].[ILA_BorrowerHMDA]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[ILA_BorrowerIncome]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[ILA_BorrowerIncome](
	[IncomeTypeCode] [varchar](30) NOT NULL,
	[IncomeSource] [varchar](30) NULL,
	[GrossIncome] [int] NULL,
	[IncomeFrequency] [char](1) NULL,
	[TrackingNum] [int] NOT NULL,
	[BorrowerNum] [smallint] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[TrackingNum] ASC,
	[BorrowerNum] ASC,
	[IncomeTypeCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[ILA_BorrowerLiability]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[ILA_BorrowerLiability](
	[Sequence] [smallint] NULL,
	[TypeCode] [char](4) NULL,
	[Payment] [int] NULL,
	[Balance] [int] NULL,
	[TrackingNum] [int] NULL,
	[BorrowerNum] [smallint] NULL,
	[ClientIP] [varchar](15) NULL,
	[WebIP] [varchar](15) NULL,
	[ClusterID] [char](10) NULL,
	[LastModified] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Index [IX_IlaBorrowerLiability_TrackingNum]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [IX_IlaBorrowerLiability_TrackingNum] ON [IMS].[ILA_BorrowerLiability]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[ILA_BorrowerMortgage]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[ILA_BorrowerMortgage](
	[Sequence] [smallint] NULL,
	[Lender] [varchar](40) NULL,
	[OrigAmt] [int] NULL,
	[Balance] [int] NULL,
	[Payment] [int] NULL,
	[TrackingNum] [int] NULL,
	[BorrowerNum] [smallint] NULL,
	[ClientIP] [varchar](15) NULL,
	[WebIP] [varchar](15) NULL,
	[ClusterID] [char](10) NULL,
	[LastModified] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Index [IX_IlaBorrowerMortgage_TrackingNum]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [IX_IlaBorrowerMortgage_TrackingNum] ON [IMS].[ILA_BorrowerMortgage]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[ILA_BorrowerPayoff]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[ILA_BorrowerPayoff](
	[Sequence] [smallint] NULL,
	[Lender] [varchar](40) NULL,
	[Account] [varchar](40) NULL,
	[Balance] [int] NULL,
	[Payment] [int] NULL,
	[TrackingNum] [int] NULL,
	[BorrowerNum] [smallint] NULL,
	[ClientIP] [varchar](15) NULL,
	[WebIP] [varchar](15) NULL,
	[ClusterID] [char](10) NULL,
	[LastModified] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Index [IX_IlaBorrowerPayoff_TrackingNum]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [IX_IlaBorrowerPayoff_TrackingNum] ON [IMS].[ILA_BorrowerPayoff]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[ILA_BorrowerQuestion]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[ILA_BorrowerQuestion](
	[Sequence] [smallint] NULL,
	[FieldName1] [varchar](16) NULL,
	[FieldName2] [varchar](16) NULL,
	[Answer] [char](1) NULL,
	[Explain] [varchar](80) NULL,
	[TrackingNum] [int] NULL,
	[BorrowerNum] [smallint] NULL,
	[ClientIP] [varchar](15) NULL,
	[WebIP] [varchar](15) NULL,
	[ClusterID] [char](10) NULL,
	[LastModified] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Index [IX_IlaBorrowerQuestion_TrackingNum]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [IX_IlaBorrowerQuestion_TrackingNum] ON [IMS].[ILA_BorrowerQuestion]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[ILA_BorrowerReference]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[ILA_BorrowerReference](
	[Sequence] [smallint] NULL,
	[Relationship] [varchar](30) NULL,
	[FName] [varchar](20) NULL,
	[MInitial] [varchar](20) NULL,
	[LName] [varchar](20) NULL,
	[Address1] [varchar](30) NULL,
	[Address2] [varchar](30) NULL,
	[Address3] [varchar](30) NULL,
	[City] [varchar](20) NULL,
	[State] [char](2) NULL,
	[Zip] [char](9) NULL,
	[CntryCode] [char](2) NULL,
	[CntryName] [varchar](40) NULL,
	[AreaCode] [char](3) NULL,
	[Phone] [char](8) NULL,
	[Ext] [char](5) NULL,
	[TrackingNum] [int] NULL,
	[BorrowerNum] [smallint] NULL,
	[ClientIP] [varchar](15) NULL,
	[WebIP] [varchar](15) NULL,
	[ClusterID] [char](10) NULL,
	[LastModified] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Index [ClusteredIndex-20161220-123312]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [ClusteredIndex-20161220-123312] ON [IMS].[ILA_BorrowerReference]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[ILA_CustomFieldMapping]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[ILA_CustomFieldMapping](
	[IlaQuestionId] [varchar](50) NULL,
	[CustomFieldId] [varchar](50) NULL,
	[Context] [varchar](500) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[ILA_InsuranceProduct]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[ILA_InsuranceProduct](
	[Description] [varchar](80) NULL,
	[ApproInsCode] [varchar](20) NULL,
	[HostInsCode] [varchar](20) NULL,
	[Display] [char](1) NULL,
	[Sequence] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[ILA_LoanProduct]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[ILA_LoanProduct](
	[Description] [varchar](80) NULL,
	[LoanType] [char](6) NULL,
	[Display] [char](1) NULL,
	[MinAPR] [char](6) NULL,
	[ProductCode] [varchar](16) NULL,
	[ProductTypeID] [int] NULL,
	[ProductID] [int] NOT NULL,
	[ModuleID] [int] NULL,
	[ProductTrackingNum] [int] NULL,
	[DisclosureCode] [char](2) NULL,
	[CollateralCode] [varchar](20) NULL,
	[MaxAmount] [varchar](13) NULL,
	[MaxAPR] [char](6) NULL,
	[MaxTerm] [char](4) NULL,
	[Terms] [varchar](50) NULL,
	[MinAmount] [varchar](13) NULL,
	[MinTerm] [char](4) NULL,
	[Sequence] [smallint] NULL,
	[LoanPurposes] [varchar](250) NULL,
 CONSTRAINT [pk_ILALoanProduct] PRIMARY KEY CLUSTERED 
(
	[ProductID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[ILA_LoanProductTerms]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[ILA_LoanProductTerms](
	[CollateralCode] [char](4) NULL,
	[MinTerm] [char](4) NULL,
	[MaxTerm] [char](4) NULL,
	[MinAmount] [varchar](13) NULL,
	[MaxAmount] [varchar](13) NULL,
	[MinPayment] [varchar](13) NULL,
	[CalcAmountArg] [varchar](80) NULL,
	[CalcAmountOpt] [char](2) NULL,
	[CalcAPRArg] [varchar](80) NULL,
	[CalcAPROpt] [char](2) NULL,
	[CalcPaymentArg] [varchar](80) NULL,
	[CalcPaymentOpt] [char](2) NULL,
	[CalcTermArg] [varchar](80) NULL,
	[CalcTermOpt] [char](2) NULL,
	[DefaultAmount] [varchar](13) NULL,
	[DefaultAPR] [char](6) NULL,
	[DefaultPayment] [varchar](13) NULL,
	[DefaultTerm] [char](4) NULL,
	[DisclosureCode] [char](2) NULL,
	[MaxAPR] [char](6) NULL,
	[MaxPayment] [varchar](13) NULL,
	[MinAPR] [char](6) NULL,
	[Sequence] [smallint] NULL,
	[ProductCode] [varchar](16) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[ILA_LoanPurpose]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[ILA_LoanPurpose](
	[Description] [varchar](250) NULL,
	[PurposeCode] [varchar](20) NULL,
	[PurposeID] [int] NULL,
	[id] [int] IDENTITY(1,1) NOT NULL,
 CONSTRAINT [pk_ILALoanPurpose] PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[ILA_ProductDetail]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[ILA_ProductDetail](
	[LoanType] [varchar](40) NULL,
	[IsBoat] [char](1) NULL,
	[Sequence] [smallint] NULL,
	[ProductCode] [varchar](16) NULL,
	[ProductID] [int] NULL,
	[ProductTrackingNum] [int] NULL,
	[CollateralCode] [int] NULL,
	[Purpose] [varchar](30) NULL,
	[LoanAmount] [int] NULL,
	[Term] [char](6) NULL,
	[CreditLimit] [int] NULL,
	[PropertyValue] [int] NULL,
	[RetailValue] [int] NULL,
	[TradeInValue] [int] NULL,
	[PurchasePrice] [int] NULL,
	[DownPayment] [int] NULL,
	[AutoPayment] [int] NULL,
	[PurchaseDate] [datetime] NULL,
	[DueDate] [datetime] NULL,
	[PropertyType] [varchar](20) NULL,
	[Occupancy] [varchar](20) NULL,
	[LienPosition] [varchar](20) NULL,
	[Type] [char](4) NULL,
	[Year] [smallint] NULL,
	[Make] [varchar](20) NULL,
	[Model] [varchar](20) NULL,
	[Body] [varchar](20) NULL,
	[Milage] [int] NULL,
	[Year2] [smallint] NULL,
	[Make2] [varchar](20) NULL,
	[Model2] [varchar](20) NULL,
	[Body2] [varchar](20) NULL,
	[Year3] [smallint] NULL,
	[Make3] [varchar](20) NULL,
	[Model3] [varchar](20) NULL,
	[Body3] [varchar](20) NULL,
	[Year4] [smallint] NULL,
	[Make4] [varchar](20) NULL,
	[Model4] [varchar](20) NULL,
	[Body4] [varchar](20) NULL,
	[VIN] [varchar](18) NULL,
	[SaleType] [varchar](20) NULL,
	[DealerCode] [char](8) NULL,
	[Dealer] [varchar](30) NULL,
	[TitleDate] [datetime] NULL,
	[TitleNumber] [varchar](20) NULL,
	[License] [char](8) NULL,
	[PONumber] [char](10) NULL,
	[State] [char](2) NULL,
	[DisclosureCode] [char](2) NULL,
	[InsCode] [varchar](20) NULL,
	[GAP] [varchar](20) NULL,
	[MBP] [varchar](20) NULL,
	[TrackingNum] [int] NULL,
	[ClientIP] [varchar](15) NULL,
	[WebIP] [varchar](15) NULL,
	[ClusterID] [char](10) NULL,
	[LastModified] [datetime] NULL,
	[ModuleID] [int] NULL,
	[ProductTypeID] [int] NULL,
	[LoanToValue] [char](1) NULL,
	[Color] [varchar](20) NULL,
	[PropertyMortgageBalance] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Index [ClusteredIndex-20161220-123452]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [ClusteredIndex-20161220-123452] ON [IMS].[ILA_ProductDetail]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[ILA_QuestionsAnswer]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[ILA_QuestionsAnswer](
	[Id] [varchar](50) NULL,
	[Answer] [varchar](500) NULL,
	[TrackingNum] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Index [ClusteredIndex-20161220-123516]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [ClusteredIndex-20161220-123516] ON [IMS].[ILA_QuestionsAnswer]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[ILA_Timestamps]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[ILA_Timestamps](
	[TrackingNum] [int] NOT NULL,
	[EventName] [varchar](200) NOT NULL,
	[EventUtc] [datetime] NOT NULL,
	[EventIP] [varchar](32) NOT NULL,
	[EventStatus] [varchar](200) NULL,
 CONSTRAINT [PK_ILA_Timestamps] PRIMARY KEY CLUSTERED 
(
	[TrackingNum] ASC,
	[EventName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[ILA_VelocityApplicationDetail]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[ILA_VelocityApplicationDetail](
	[AppStatus] [varchar](100) NULL,
	[ApplicationID] [varchar](100) NULL,
	[AppNumber] [varchar](100) NULL,
	[WorkFlowTrackingID] [varchar](100) NULL,
	[LoanDecision] [varchar](100) NULL,
	[LoanRate] [varchar](100) NULL,
	[PreApprovalID] [varchar](100) NULL,
	[ErrorDescription] [varchar](8000) NULL,
	[TrackingNum] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Index [ClusteredIndex-20161220-123532]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [ClusteredIndex-20161220-123532] ON [IMS].[ILA_VelocityApplicationDetail]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[ILATracking]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[ILATracking](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[TrackingNum] [int] NULL,
	[PageName] [varchar](50) NULL,
	[PageStatus] [varchar](50) NULL,
	[StatusDateTime] [datetime] NULL,
	[ClientIP] [varchar](20) NULL,
	[UserAgent] [varchar](255) NULL,
 CONSTRAINT [PK_ILATracking] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[IMMConfiguration]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[IMMConfiguration](
	[ID] [int] NOT NULL,
	[HostID] [varchar](255) NULL,
	[HSFIID] [varchar](255) NULL,
	[Password] [varchar](255) NULL,
	[WebServiceURL] [varchar](255) NULL,
	[Vocabulary] [varchar](255) NULL,
	[Flatten] [char](1) NULL,
	[PageKey] [varchar](255) NULL,
	[DocumentSessionType] [varchar](20) NULL,
 CONSTRAINT [PK_IMMConfiguration] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[IMMSavedSessions]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[IMMSavedSessions](
	[TrackingNum] [int] NOT NULL,
	[DocQSessionUrl] [varchar](4096) NULL,
 CONSTRAINT [PK_IMMSavedSessions] PRIMARY KEY CLUSTERED 
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[InfoIMAGE]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[InfoIMAGE](
	[TrackingNum] [int] NULL,
	[AccountNumber] [int] NULL,
	[Surname] [varchar](2) NULL,
	[FlagNumber] [int] NULL,
	[EnrollmentStatusCode] [varchar](1) NULL,
	[Email] [varchar](50) NULL,
	[Success] [varchar](1) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[InfoIMAGEConfiguration]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[InfoIMAGEConfiguration](
	[ID] [int] NULL,
	[ClientID] [varchar](20) NULL,
	[URL] [varchar](255) NULL,
	[CertName] [varchar](50) NULL,
	[OAuthURL] [varchar](255) NULL,
	[OAuthClientID] [varchar](20) NULL,
	[OAuthUsername] [varchar](20) NULL,
	[OAuthPassword] [varchar](20) NULL,
	[SecretKey] [varchar](20) NULL,
	[CipherConstant] [varchar](20) NULL,
	[IsLegacy] [varchar](20) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[InfoIMAGEHistory]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[InfoIMAGEHistory](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[StatusCode] [varchar](4) NULL,
	[ResponseDate] [datetime] NULL,
	[TrackingNum] [int] NULL,
	[ResponseMessage] [varchar](100) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[IPBlockingConfiguration]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[IPBlockingConfiguration](
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[VelocityLimit] [int] NOT NULL,
	[HistoryMonths] [int] NOT NULL,
 CONSTRAINT [PK_IPBlockingConfiguration] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[LNCatCollateral]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[LNCatCollateral](
	[Category] [char](50) NULL,
	[Collateral] [smallint] NULL,
	[SortOrder] [smallint] NULL,
	[TypeDescription] [char](50) NULL,
	[ID] [int] IDENTITY(1,1) NOT NULL,
 CONSTRAINT [PK_LNCatCollateral] PRIMARY KEY NONCLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Index [xCollateral]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [xCollateral] ON [IMS].[LNCatCollateral]
(
	[Collateral] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[LOCH]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[LOCH](
	[TrackingNum] [int] NOT NULL,
	[Processed] [smallint] NULL,
	[Account] [int] NULL,
	[Surname] [char](2) NULL,
	[Detail] [char](60) NULL,
	[Suffix] [smallint] NULL,
	[ChangeMode] [char](1) NULL,
	[ApplyDate] [datetime] NULL,
	[LoanNumber] [int] NULL,
	[Officer] [char](3) NULL,
	[LoanAmount] [int] NULL,
	[NewRefinance] [char](1) NULL,
	[Action] [char](2) NULL,
	[ActionDate] [datetime] NULL,
	[RefSuffix1] [smallint] NULL,
	[RefSuffix2] [smallint] NULL,
	[RefSuffix3] [smallint] NULL,
	[InterestRate] [char](6) NULL,
	[Payment] [int] NULL,
	[DueDate] [datetime] NULL,
	[Method] [char](1) NULL,
	[Frequency] [char](1) NULL,
	[NonDiscountAPR] [int] NULL,
	[DisclosureCode] [char](1) NULL,
	[CollateralCode] [int] NULL,
	[Description] [char](60) NULL,
	[VRLCode] [char](3) NULL,
	[VRLTerm] [smallint] NULL,
	[VRLIndex] [char](2) NULL,
	[VRLMargin] [int] NULL,
	[VRLFreq] [char](1) NULL,
	[FullyIndexedRate] [char](6) NULL,
	[NextRateChangeDate] [datetime] NULL,
	[PledgeCode] [smallint] NULL,
	[InternetEnabledFlag] [char](1) NULL,
	[InternetEnabledDate] [datetime] NULL,
	[InternetLastSentDate] [datetime] NULL,
	[InternetUpdateCounter] [int] NULL,
	[StepRateLoanPurchases] [int] NULL,
	[StepRateCashAdvances] [int] NULL,
	[IntAdjCode] [smallint] NULL,
	[SplitValue] [int] NULL,
	[PercentDown] [int] NULL,
	[DebtRatio] [int] NULL,
	[StatementOrder] [smallint] NULL,
	[Purpose] [char](30) NULL,
	[InsCode] [char](2) NULL,
	[GroupNumber] [smallint] NULL,
	[CBCode] [char](3) NULL,
	[CBScore] [char](4) NULL,
	[CreditLimit] [int] NULL,
	[ReviewDate] [datetime] NULL,
	[CashAdvanceAPR] [int] NULL,
	[SkipCode] [char](2) NULL,
	[Coupons] [char](4) NULL,
	[AltPayments] [smallint] NULL,
	[AltAmount] [int] NULL,
	[AltDate] [datetime] NULL,
	[JointNam1] [char](30) NULL,
	[JointSSN] [char](9) NULL,
	[AssocCode] [char](1) NULL,
	[DenialNotice] [char](1) NULL,
	[KXferAccount] [int] NULL,
	[KXferSuffix] [smallint] NULL,
	[Branch] [smallint] NULL,
	[OrigBranch] [smallint] NULL,
	[Seller] [char](3) NULL,
	[ClientIP] [char](15) NULL,
	[WebIP] [char](15) NULL,
	[ClusterID] [char](10) NULL,
	[LastModified] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Index [IX_TrackingNum]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE UNIQUE CLUSTERED INDEX [IX_TrackingNum] ON [IMS].[LOCH]
(
	[TrackingNum] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[LOCHDenialReason]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[LOCHDenialReason](
	[TrackingNum] [int] NOT NULL,
	[Sequence] [smallint] NULL,
	[Reason] [char](60) NULL,
	[ClientIP] [char](15) NULL,
	[WebIP] [char](15) NULL,
	[ClusterID] [char](10) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [IX_TrackingNum]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE UNIQUE CLUSTERED INDEX [IX_TrackingNum] ON [IMS].[LOCHDenialReason]
(
	[TrackingNum] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[LOCHPledges]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[LOCHPledges](
	[TrackingNum] [int] NULL,
	[Sequence] [smallint] NULL,
	[Account] [int] NULL,
	[Suffix] [smallint] NULL,
	[Surname] [char](2) NULL,
	[Amount] [char](13) NULL,
	[Reason] [char](60) NULL,
	[ExpirationDate] [datetime] NULL,
	[ClientIP] [char](15) NULL,
	[WebIP] [char](15) NULL,
	[ClusterID] [char](10) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [IX_TrackingNum]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE UNIQUE CLUSTERED INDEX [IX_TrackingNum] ON [IMS].[LOCHPledges]
(
	[TrackingNum] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[LogConfig]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[LogConfig](
	[TransactionName] [char](20) NULL,
	[TransUsage] [char](20) NULL,
	[LogBasic] [char](1) NULL,
	[LogFields] [char](1) NULL,
	[LogXML] [char](1) NULL,
	[SaveFields] [char](300) NULL,
	[TransactionDescription] [varchar](50) NULL,
	[XMLAccount] [char](150) NULL,
	[TransactionQualifierxPath] [varchar](100) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[LoginAttempt]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[LoginAttempt](
	[AccountNumber] [int] NOT NULL,
	[FailedAttemptCount] [int] NULL,
	[LastAttemptDate] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[ManualApprovals]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[ManualApprovals](
	[PK] [int] IDENTITY(1,1) NOT NULL,
	[ReasonCode] [char](50) NULL,
	[Description] [char](255) NULL,
	[CreditBureau] [char](20) NULL,
 CONSTRAINT [PK_ManualApprovals] PRIMARY KEY CLUSTERED 
(
	[PK] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[MECH]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[MECH](
	[TrackingNum] [int] NOT NULL,
	[Processed] [smallint] NULL,
	[Account] [int] NULL,
	[Surname] [char](2) NULL,
	[ChangeMode] [char](1) NULL,
	[FName] [char](20) NULL,
	[MInitial] [char](10) NULL,
	[LName] [char](30) NULL,
	[SSN] [char](9) NULL,
	[TaxIDType] [char](1) NULL,
	[Residence] [char](1) NULL,
	[AffinityCode] [char](4) NULL,
	[Email1] [char](60) NULL,
	[HouseholdNumber] [int] NULL,
	[MaidenName] [char](20) NULL,
	[HouseholdCode] [char](1) NULL,
	[DriversLicenseState] [char](2) NULL,
	[DriversLicenseNum] [char](30) NULL,
	[DOB] [datetime] NULL,
	[InternetEnabledFlag] [char](1) NULL,
	[InternetEnabledDate] [datetime] NULL,
	[InternetLastSentDate] [datetime] NULL,
	[TaxCode] [char](1) NULL,
	[ClassCode] [char](2) NULL,
	[JointNam1] [char](30) NULL,
	[Branch] [smallint] NULL,
	[OrigBranch] [smallint] NULL,
	[Seller] [char](3) NULL,
	[EscheatDate] [datetime] NULL,
	[Department] [char](12) NULL,
	[EmployeeNumber] [int] NULL,
	[PledgeAmount] [int] NULL,
	[InsCode] [char](2) NULL,
	[Ref1] [char](8) NULL,
	[Ref2] [char](8) NULL,
	[Ref3] [char](8) NULL,
	[Ref4] [char](8) NULL,
	[UserDate] [datetime] NULL,
	[CreditReportCode] [char](4) NULL,
	[Password] [char](24) NULL,
	[ProxyDate] [datetime] NULL,
	[Gender] [char](1) NULL,
	[RaceCode] [char](1) NULL,
	[YTDInt] [int] NULL,
	[PayrollGroup] [char](4) NULL,
	[Call24Lockout] [char](1) NULL,
	[StatementCycle] [smallint] NULL,
	[PaymentHistory] [char](32) NULL,
	[AccessClass] [smallint] NULL,
	[CntryName] [char](40) NULL,
	[W8Received] [char](1) NULL,
	[trandatetime] [datetime] NULL,
	[ClientIP] [char](15) NULL,
	[WebIP] [char](15) NULL,
	[ClusterID] [char](10) NULL,
	[LastModified] [datetime] NULL,
	[FName2] [char](20) NULL,
	[MInitial2] [char](2) NULL,
	[LName2] [char](30) NULL,
	[ReportName2] [char](1) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[MECHHome]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[MECHHome](
	[Account] [int] NULL,
	[Address1] [char](30) NULL,
	[Address2] [char](30) NULL,
	[Address3] [char](30) NULL,
	[City] [char](20) NULL,
	[State] [char](2) NULL,
	[Zip] [char](9) NULL,
	[CntryCode] [char](2) NULL,
	[CntryName] [char](40) NULL,
	[AreaCode] [char](3) NULL,
	[Phone] [char](8) NULL,
	[Ext] [char](5) NULL,
	[ResidenceYears] [tinyint] NULL,
	[ResidenceMonths] [tinyint] NULL,
	[CellPhoneAC] [char](3) NULL,
	[CellPhone] [char](7) NULL,
	[FaxPhoneAC] [char](3) NULL,
	[FaxPhone] [char](7) NULL,
	[PagerPhoneAC] [char](3) NULL,
	[PagerPhone] [char](7) NULL,
	[TrackingNum] [int] NOT NULL,
	[ClientIP] [char](15) NULL,
	[WebIP] [char](15) NULL,
	[ClusterID] [char](10) NULL,
	[LastModified] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Index [IX_TrackingNum]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE UNIQUE CLUSTERED INDEX [IX_TrackingNum] ON [IMS].[MECHHome]
(
	[TrackingNum] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[MECHWork]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[MECHWork](
	[Account] [int] NULL,
	[Address1] [char](30) NULL,
	[Address2] [char](30) NULL,
	[Address3] [char](30) NULL,
	[City] [char](20) NULL,
	[State] [char](2) NULL,
	[Zip] [char](9) NULL,
	[CntryCode] [char](2) NULL,
	[CntryName] [char](40) NULL,
	[AreaCode] [char](3) NULL,
	[Phone] [char](8) NULL,
	[Ext] [char](5) NULL,
	[EmploymentStatus] [char](2) NULL,
	[EmployerName] [char](30) NULL,
	[JobTitle] [char](30) NULL,
	[HireDate] [datetime] NULL,
	[GrossIncome] [int] NULL,
	[OccupationCode] [char](2) NULL,
	[IncomeFrequency] [char](1) NULL,
	[ProfessionYears] [smallint] NULL,
	[TrackingNum] [int] NOT NULL,
	[EmployeeNumber] [char](20) NULL,
	[Shift] [char](10) NULL,
	[Department] [char](20) NULL,
	[ClientIP] [char](15) NULL,
	[WebIP] [char](15) NULL,
	[ClusterID] [char](10) NULL,
	[LastModified] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Index [IX_TrackingNum]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE UNIQUE CLUSTERED INDEX [IX_TrackingNum] ON [IMS].[MECHWork]
(
	[TrackingNum] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[MemberCollateral]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[MemberCollateral](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[TrackingNumber] [int] NOT NULL,
	[CollateralProductId] [int] NOT NULL,
	[CollateralDesignationId] [int] NULL,
	[PurposeCodeId] [int] NULL,
 CONSTRAINT [PK__MemberCo__3214EC0703958D18] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[MemberCollateralFieldData]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[MemberCollateralFieldData](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[MemberCollateralId] [int] NULL,
	[ProductCollateralFieldId] [int] NULL,
	[FieldValue] [nvarchar](255) NULL,
PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[Message]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[Message](
	[TrackingNum] [int] NULL,
	[Account] [int] NULL,
	[SubmitDate] [datetime] NULL,
	[Processed] [smallint] NULL,
	[ProcessDate] [datetime] NULL,
	[MessageSubject] [char](60) NULL,
	[ReadReceipt] [char](1) NULL,
	[DeliveryReceipt] [char](1) NULL,
	[TransactionType] [char](16) NULL,
	[TransactionProcessed] [smallint] NULL,
	[ClientIP] [char](15) NULL,
	[WebIP] [char](15) NULL,
	[ClusterID] [char](10) NULL,
	[LastModified] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Index [TrackingNum]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [TrackingNum] ON [IMS].[Message]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[MessageAttachment]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[MessageAttachment](
	[TrackingNum] [int] NULL,
	[Sequence] [smallint] NULL,
	[Filename] [char](80) NULL,
	[TransactionType] [char](16) NULL,
	[TransactionProcessed] [int] NULL,
	[DeleteFile] [char](1) NULL,
	[ClientIP] [char](15) NULL,
	[WebIP] [char](15) NULL,
	[ClusterID] [char](10) NULL,
	[LastModified] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Index [TrackingNum]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [TrackingNum] ON [IMS].[MessageAttachment]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[MessageRecipient]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[MessageRecipient](
	[TrackingNum] [int] NULL,
	[Sequence] [smallint] NULL,
	[RecipientType] [char](1) NULL,
	[EmailAddress] [char](80) NULL,
	[TransactionType] [char](16) NULL,
	[TransactionProcessed] [smallint] NULL,
	[ClientIP] [char](15) NULL,
	[WebIP] [char](15) NULL,
	[ClusterID] [char](10) NULL,
	[LastModified] [datetime] NULL
) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [TrackTypeSeq]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [TrackTypeSeq] ON [IMS].[MessageRecipient]
(
	[TrackingNum] ASC,
	[RecipientType] ASC,
	[Sequence] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[MessageTemplate]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[MessageTemplate](
	[Id] [uniqueidentifier] NOT NULL,
	[Name] [varchar](255) NOT NULL,
	[Subject] [varchar](255) NOT NULL,
	[Body] [varchar](max) NOT NULL,
	[MessageType] [varchar](10) NOT NULL,
	[CreatedDateUtc] [datetime] NOT NULL,
	[DeletedDateUtc] [datetime] NULL,
	[UpdatedDateUtc] [datetime] NULL,
	[CreatedByTeller] [varchar](50) NOT NULL,
 CONSTRAINT [PK_MessageTemplate] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [IMS].[MessageText]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[MessageText](
	[TrackingNum] [int] NULL,
	[Sequence] [smallint] NULL,
	[MessageLine] [char](80) NULL,
	[TransactionType] [char](16) NULL,
	[TransactionProcessed] [smallint] NULL,
	[ClientIP] [char](15) NULL,
	[WebIP] [char](15) NULL,
	[ClusterID] [char](10) NULL,
	[LastModified] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Index [TrackingNum]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [TrackingNum] ON [IMS].[MessageText]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[MetascanConfig]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[MetascanConfig](
	[CleanFlag] [bit] NULL,
	[AnalyzeBeforeScan] [int] NULL,
	[CleanActionType] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[MitekDossier]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[MitekDossier](
	[TrackingNum] [int] NOT NULL,
	[DossierId] [varchar](50) NOT NULL,
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Authenticated] [bit] NOT NULL,
	[Probability] [int] NOT NULL,
	[DLExtraction] [varchar](max) NULL,
	[Threshold] [varchar](30) NOT NULL,
	[JointSequence] [int] NOT NULL,
 CONSTRAINT [PK_MitekDossier] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [IMS].[MitekDossierFindings]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[MitekDossierFindings](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[TrackingNum] [int] NOT NULL,
	[DossierId] [varchar](50) NOT NULL,
	[VerificationType] [int] NOT NULL,
	[Name] [varchar](255) NOT NULL,
	[Judgement] [varchar](20) NOT NULL,
	[Probability] [int] NOT NULL,
	[Notifications] [varchar](max) NULL,
	[Version] [varchar](20) NULL,
	[DocumentId] [varchar](50) NULL,
 CONSTRAINT [PK_MitekDossierFindings] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [IMS].[MRCHDefaults]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[MRCHDefaults](
	[URL] [varchar](200) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[NewMemberAddress]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[NewMemberAddress](
	[TrackingNum] [int] NOT NULL,
	[Sequence] [int] NOT NULL,
	[TypeCode] [varchar](10) NOT NULL,
	[Address1] [char](50) NULL,
	[Address2] [char](50) NULL,
	[Address3] [char](50) NULL,
	[ApartmentNumber] [char](10) NULL,
	[City] [char](30) NULL,
	[State] [char](2) NULL,
	[Zip] [char](9) NULL,
	[CntryCode] [char](2) NULL,
	[CntryName] [char](40) NULL,
	[AreaCode] [char](3) NULL,
	[Phone] [char](7) NULL,
	[Ext] [char](5) NULL,
	[CellPhoneAC] [char](3) NULL,
	[CellPhone] [char](7) NULL,
	[FaxPhoneAC] [char](3) NULL,
	[FaxPhone] [char](7) NULL,
	[PagerPhoneAC] [char](3) NULL,
	[PagerPhone] [char](7) NULL,
	[ChangeCode] [char](1) NULL,
	[TIDRequired] [char](1) NULL,
	[CreateHost] [char](1) NULL,
	[HostCommand] [char](4) NULL,
	[Approval] [char](1) NULL,
	[OverrideBy] [varchar](20) NULL,
	[Created] [char](1) NULL,
	[CreatedBy] [varchar](20) NULL,
	[CreatedOn] [datetime] NULL,
	[HostTrackingNum] [int] NULL,
	[ErrorString] [char](100) NULL,
	[ClientIP] [char](15) NULL,
	[WebIP] [char](15) NULL,
	[ClusterID] [char](10) NULL,
	[PSIErrorString] [char](100) NULL,
 CONSTRAINT [PK_NewMemberAddress] PRIMARY KEY NONCLUSTERED 
(
	[TrackingNum] ASC,
	[Sequence] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Index [xTrackingNum]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [xTrackingNum] ON [IMS].[NewMemberAddress]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[NewMemberBeneficiary]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[NewMemberBeneficiary](
	[TrackingNum] [int] NOT NULL,
	[Sequence] [smallint] NULL,
	[BeneficiaryCode] [char](1) NULL,
	[FName] [char](20) NULL,
	[MInitial] [char](20) NULL,
	[LName] [char](20) NULL,
	[Address1] [char](30) NULL,
	[OName] [char](30) NULL,
	[Address2] [char](30) NULL,
	[Address3] [char](30) NULL,
	[City] [char](20) NULL,
	[State] [char](2) NULL,
	[Zip] [char](9) NULL,
	[CntryCode] [char](2) NULL,
	[CntryName] [char](40) NULL,
	[AreaCode] [char](3) NULL,
	[Phone] [char](8) NULL,
	[Ext] [char](5) NULL,
	[SSN] [char](9) NULL,
	[DOB] [datetime] NULL,
	[IDType] [char](1) NULL,
	[DriversLicenseState] [char](2) NULL,
	[DriversLicenseNum] [char](30) NULL,
	[IDSource] [char](12) NULL,
	[IDNumber] [char](30) NULL,
	[AssocCode] [char](10) NULL,
	[WorkAC] [char](3) NULL,
	[WorkPhone] [char](8) NULL,
	[Email1] [char](60) NULL,
	[Citizenship] [char](2) NULL,
	[W8Required] [char](1) NULL,
	[W8Type] [char](4) NULL,
	[TIDRequired] [char](1) NULL,
	[HostCommand] [char](4) NULL,
	[StartMemo] [char](10) NULL,
	[StopMemo] [char](10) NULL,
	[OverrideBy] [char](20) NULL,
	[Created] [char](1) NULL,
	[CreatedBy] [varchar](20) NULL,
	[CreatedOn] [datetime] NULL,
	[HostTrackingNum] [int] NULL,
	[ErrorString] [char](80) NULL,
	[BeneficiaryType] [char](10) NULL,
	[BType] [char](10) NULL,
	[RelToPrimary] [char](30) NULL,
	[ClientIP] [char](15) NULL,
	[WebIP] [char](15) NULL,
	[ClusterID] [char](10) NULL,
	[OwnerCode] [char](1) NULL,
	[CellAC] [char](3) NULL,
	[CellPhone] [char](7) NULL,
	[IDIssueDate] [datetime] NULL,
	[IDExpirationDate] [datetime] NULL,
	[BirthPlace] [char](30) NULL,
	[County] [char](30) NULL,
	[C24Access] [char](1) NULL,
	[StmtPrint] [char](1) NULL,
	[JointOwnerType] [char](2) NULL,
	[JointAccount] [char](10) NULL,
	[Account] [int] NULL,
	[W8OnFile] [char](1) NULL,
	[CreateHost] [char](1) NULL,
	[Approval] [char](1) NULL,
	[Department] [char](30) NULL,
	[Ref1] [char](12) NULL,
	[Ref2] [char](12) NULL,
	[Ref3] [char](12) NULL,
	[Ref4] [char](12) NULL,
	[Qualification1] [char](30) NULL,
	[Qualification2] [char](30) NULL,
	[Qualification3] [char](30) NULL,
	[Relationship] [char](30) NULL,
	[StartingNumber] [smallint] NULL,
	[SortOrder] [smallint] NULL,
	[PrimaryBen] [char](1) NULL,
	[BECHTag] [char](20) NULL,
	[TagBeginEnd] [char](1) NULL,
	[W8MemoNumber] [int] NULL,
	[W8ExpirationDate] [datetime] NULL,
	[BureauSetID] [int] NULL,
	[ScreenComplete] [char](1) NULL,
	[CBTracking] [int] NULL,
	[CBDecision] [char](1024) NULL,
	[CBCode] [char](20) NULL,
	[CBScore] [char](20) NULL,
	[SUMMITDecision] [char](250) NULL,
	[PaperGrade] [char](10) NULL,
	[Preapproval] [char](1024) NULL,
	[Prequalification] [char](1024) NULL,
	[ChangeCode] [char](1) NULL,
	[Title] [char](15) NULL,
	[MaidenName] [char](20) NULL,
	[AgeOfDelivery] [char](3) NULL,
	[ScreenLossComplete] [char](1) NULL,
	[TaxIDType] [char](1) NULL,
	[BenePercent] [smallint] NULL,
	[ApartmentNumber] [char](10) NULL,
	[PSIErrorString] [char](80) NULL,
	[Gender] [char](1) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [Tracking]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [Tracking] ON [IMS].[NewMemberBeneficiary]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[NewMemberBeneficiaryLink]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[NewMemberBeneficiaryLink](
	[TrackingNum] [int] NOT NULL,
	[Sequence] [smallint] NOT NULL,
	[SubAccountSequence] [smallint] NULL,
	[BeneficiarySequence] [smallint] NULL,
	[Approval] [char](3) NULL,
	[OverrideBy] [char](20) NULL,
	[Created] [char](1) NULL,
	[CreatedBy] [varchar](20) NULL,
	[CreatedOn] [datetime] NULL,
	[HostTrackingNum] [int] NULL,
	[ErrorString] [char](80) NULL,
	[BeneficiaryPercent] [int] NULL,
	[ClientIP] [char](15) NULL,
	[WebIP] [char](15) NULL,
	[ClusterID] [char](10) NULL,
	[PSIErrorString] [char](80) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [Tracking]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [Tracking] ON [IMS].[NewMemberBeneficiaryLink]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[NewMemberBureauPassword]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[NewMemberBureauPassword](
	[TrackingNum] [int] NOT NULL,
	[CBTypeCode] [char](2) NOT NULL,
	[Password] [varchar](50) NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[NewMemberChangeHistory]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[NewMemberChangeHistory](
	[TrackingNum] [int] NOT NULL,
	[ChangedField] [varchar](50) NULL,
	[OldValue] [varchar](50) NULL,
	[NewValue] [varchar](50) NULL,
	[ChangeDateTime] [datetime] NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Index [TrackingNum]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [TrackingNum] ON [IMS].[NewMemberChangeHistory]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[NewMemberCheckOrder]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[NewMemberCheckOrder](
	[TrackingNum] [int] NOT NULL,
	[Sequence] [int] NOT NULL,
	[SubAccountSequence] [int] NOT NULL,
	[CheckOrderType] [char](2) NULL,
	[CatalogCode] [char](15) NULL,
	[Quantity] [char](100) NULL,
	[StartingNum] [int] NULL,
	[Font] [char](5) NULL,
	[Flush] [char](1) NULL,
	[Personal1] [char](40) NULL,
	[Personal1Size] [char](1) NULL,
	[Personal2] [char](40) NULL,
	[Personal2Size] [char](1) NULL,
	[Personal3] [char](40) NULL,
	[Personal3Size] [char](1) NULL,
	[Personal4] [char](40) NULL,
	[Personal4Size] [char](1) NULL,
	[Personal5] [char](40) NULL,
	[Personal5Size] [char](1) NULL,
	[twoSignatures] [char](1) NULL,
	[SpecialProgram] [char](2) NULL,
	[BillCode] [char](2) NULL,
	[DeliveryCode] [char](5) NULL,
	[MailingAddress1] [char](50) NULL,
	[MailingAddress2] [char](50) NULL,
	[MailingAddress3] [char](50) NULL,
	[MailingAddress4] [char](50) NULL,
	[MailingAddress5] [char](50) NULL,
	[CoverCode] [char](15) NULL,
	[Approval] [char](20) NULL,
	[OverrideBy] [char](20) NULL,
	[Created] [char](1) NULL,
	[CreatedBy] [varchar](20) NULL,
	[CreatedOn] [datetime] NULL,
	[HostTrackingNum] [int] NULL,
	[ErrorString] [char](80) NULL,
	[PSIErrorString] [char](80) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[NewMemberCheckOrder]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[NewMemberCheckOrderSimple]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[NewMemberCheckOrderSimple](
	[TrackingNum] [int] NOT NULL,
	[Account] [varchar](50) NULL,
	[Info1] [varchar](50) NULL,
	[Bold1] [bit] NULL,
	[Info2] [varchar](50) NULL,
	[Bold2] [bit] NULL,
	[Info3] [varchar](50) NULL,
	[Bold3] [bit] NULL,
	[Info4] [varchar](50) NULL,
	[Info5] [varchar](50) NULL,
	[Info6] [varchar](50) NULL,
	[Status] [varchar](15) NULL,
	[MailingAddress1] [varchar](50) NULL,
	[MailingAddress2] [varchar](50) NULL,
	[MailingAddress3] [varchar](50) NULL,
	[MailingAddress4] [varchar](50) NULL,
	[MailingAddress5] [varchar](50) NULL,
 CONSTRAINT [PK_NewMemberCheckOrderSimple] PRIMARY KEY NONCLUSTERED 
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Index [xTrackingNum]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE UNIQUE CLUSTERED INDEX [xTrackingNum] ON [IMS].[NewMemberCheckOrderSimple]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[NewMemberClub]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[NewMemberClub](
	[TrackingNum] [int] NOT NULL,
	[Sequence] [smallint] NOT NULL,
	[ClubCode] [char](16) NULL,
	[Description] [char](30) NULL,
	[FlagType] [char](1) NULL,
	[FlagNumber] [smallint] NULL,
	[MemoNumber] [int] NULL,
	[Approval] [char](20) NULL,
	[OverrideBy] [char](20) NULL,
	[Expiration] [datetime] NULL,
	[Created] [char](1) NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [varchar](20) NULL,
	[HostTrackingNum] [int] NULL,
	[ErrorString] [char](80) NULL,
	[FlagCreated] [char](1) NULL,
	[FlagCreatedBy] [char](20) NULL,
	[FlagCreatedOn] [datetime] NULL,
	[FlagTrackingNum] [int] NULL,
	[MemoCreated] [char](1) NULL,
	[MemoCreatedBy] [char](20) NULL,
	[MemoCreatedOn] [datetime] NULL,
	[MemoTrackingNum] [int] NULL,
	[FlagValue] [smallint] NULL,
	[MemoDescription] [char](60) NULL,
	[MemoExpiration] [datetime] NULL,
	[FlagErrorString] [char](255) NULL,
	[MemoErrorString] [char](255) NULL,
	[ClientIP] [char](15) NULL,
	[WebIP] [char](15) NULL,
	[ClusterID] [char](10) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [Tracking]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [Tracking] ON [IMS].[NewMemberClub]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[NewMemberCoApp]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[NewMemberCoApp](
	[TrackingNum] [int] NOT NULL,
	[Sequence] [smallint] NULL,
	[CoMakerNumber] [smallint] NULL,
	[CoAppAccount] [varchar](50) NULL,
	[AddressAssociated] [char](1) NULL,
	[AssocCode] [char](1) NULL,
	[ConsumerInfoIndicator] [char](1) NULL,
	[C24Access] [char](1) NULL,
	[ReportOn1099C] [char](1) NULL,
	[FName] [char](20) NULL,
	[MInitial] [char](20) NULL,
	[LName] [char](20) NULL,
	[Address1] [char](30) NULL,
	[Address2] [char](30) NULL,
	[Address3] [char](30) NULL,
	[ResCode] [char](1) NULL,
	[City] [char](20) NULL,
	[State] [char](2) NULL,
	[Zip] [char](9) NULL,
	[CntryCode] [char](2) NULL,
	[CntryName] [char](40) NULL,
	[AreaCode] [char](3) NULL,
	[Phone] [char](7) NULL,
	[SSN] [char](9) NULL,
	[DOB] [datetime] NULL,
	[Gender] [char](1) NULL,
	[RaceOrigin] [char](1) NULL,
	[InsCode] [char](2) NULL,
	[PayStatus] [char](1) NULL,
	[DateSatisfied] [datetime] NULL,
	[PaymentAmount] [int] NULL,
	[PaymentFreq] [char](1) NULL,
	[PayrollSignupDate] [datetime] NULL,
	[SortOrder] [smallint] NULL,
	[RelToPrimary] [char](30) NULL,
	[IDType] [char](1) NULL,
	[IDSource] [char](12) NULL,
	[IDNumber] [char](30) NULL,
	[IDIssueDate] [datetime] NULL,
	[IDExpirationDate] [datetime] NULL,
	[DriversLicenseNum] [char](30) NULL,
	[DriversLicenseState] [char](2) NULL,
	[CoAppType] [char](2) NULL,
	[Account] [varchar](50) NULL,
	[HostCommand] [char](4) NULL,
	[Created] [char](1) NULL,
	[HostTrackingNum] [int] NULL,
	[ErrorString] [char](100) NULL,
	[COCHTag] [char](50) NULL,
	[TagBeginEnd] [char](1) NULL,
	[BureauSetID] [int] NULL,
	[ScreenComplete] [char](1) NULL,
	[CBTracking] [int] NULL,
	[CBDecision] [char](1024) NULL,
	[CBCode] [char](20) NULL,
	[CBScore] [char](20) NULL,
	[SUMMITDecision] [char](250) NULL,
	[PaperGrade] [char](10) NULL,
	[Preapproval] [char](1024) NULL,
	[Prequalification] [char](1024) NULL,
	[ChangeCode] [char](1) NULL,
	[ScreenLossComplete] [char](1) NULL,
	[PSIErrorString] [char](100) NULL,
	[PlasticCardLink] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[NewMemberCoAppLink]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[NewMemberCoAppLink](
	[TrackingNum] [int] NOT NULL,
	[Sequence] [smallint] NULL,
	[CoAppSequence] [smallint] NULL,
	[LoanSequence] [smallint] NULL,
	[PlasticSequence] [smallint] NULL,
	[Approval] [char](20) NULL,
	[OverrideBy] [char](20) NULL,
	[Created] [char](1) NULL,
	[CreatedBy] [varchar](20) NULL,
	[CreatedOn] [datetime] NULL,
	[HostTrackingNum] [char](10) NULL,
	[ErrorString] [char](80) NULL,
	[StartingNumber] [smallint] NULL,
	[SortOrder] [smallint] NULL,
	[CoAppType] [char](2) NULL,
	[COCHTag] [char](100) NULL,
	[TagBeginEnd] [char](1) NULL,
	[CoMakerNumber] [smallint] NULL,
	[CurrentCoNumber] [smallint] NULL,
	[ChangeCode] [char](1) NULL,
	[PSIErrorString] [char](80) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[NewMemberCreditReport]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[NewMemberCreditReport](
	[TrackingNum] [int] NOT NULL,
	[Sequence] [int] NOT NULL,
	[CreditBureau] [char](2) NULL,
	[CBTracking] [int] NULL,
	[CBDecision] [char](200) NULL,
	[DatePulled] [datetime] NULL,
	[ScreenComplete] [char](1) NULL,
	[Seller] [varchar](50) NULL,
	[Branch] [char](5) NULL,
	[CBScore] [int] NULL,
	[JointSequence] [int] NULL,
	[FirstName] [char](50) NULL,
	[LastName] [char](50) NULL,
	[SSN] [char](9) NULL,
	[AddressLine1] [char](100) NULL,
	[AddressLine2] [char](50) NULL,
	[City] [char](50) NULL,
	[State] [char](2) NULL,
	[ZipCode] [char](9) NULL,
	[Phone] [char](10) NULL,
	[IMSError] [char](5) NULL,
	[IMSErrorString] [char](120) NULL,
	[HostError] [char](5) NULL,
	[HostErrorString] [char](150) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTrackingNum]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [xTrackingNum] ON [IMS].[NewMemberCreditReport]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[NewMemberCreditReportLog]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[NewMemberCreditReportLog](
	[TrackingNum] [int] NOT NULL,
	[Sequence] [int] NOT NULL,
	[CRSequence] [int] NOT NULL,
	[CBTracking] [int] NULL,
	[CreditBureau] [char](2) NULL,
	[ScreenComplete] [char](1) NULL,
	[CBDecision] [char](200) NULL,
	[CBScore] [int] NULL,
	[DatePulled] [datetime] NULL,
	[Seller] [varchar](50) NULL,
	[Branch] [char](5) NULL,
	[JointSequence] [int] NULL,
	[FirstName] [char](50) NULL,
	[LastName] [char](50) NULL,
	[SSN] [char](9) NULL,
	[AddressLine1] [char](100) NULL,
	[AddressLine2] [char](50) NULL,
	[City] [char](50) NULL,
	[State] [char](2) NULL,
	[ZipCode] [char](9) NULL,
	[Phone] [char](10) NULL,
	[IMSError] [char](5) NULL,
	[IMSErrorString] [char](120) NULL,
	[HostError] [char](5) NULL,
	[HostErrorString] [char](150) NULL,
	[CRAction] [char](25) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[NewMemberCreditReportLog]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[NewMemberDoc]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[NewMemberDoc](
	[DocIndex] [int] NOT NULL,
	[DocSubName] [varchar](512) NULL,
	[TrackingNum] [int] NULL,
	[AccountSequences] [varchar](100) NOT NULL,
	[JOSequences] [varchar](100) NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[NewMemberDoc]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[NewMemberFlag]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[NewMemberFlag](
	[TrackingNum] [int] NOT NULL,
	[Sequence] [tinyint] NOT NULL,
	[Account] [int] NULL,
	[Surname] [char](2) NULL,
	[Suffix] [varchar](20) NULL,
	[FlagLevel] [char](1) NULL,
	[FlagType] [char](1) NULL,
	[FlagNumber] [smallint] NULL,
	[Processed] [smallint] NULL,
	[FlagValue] [smallint] NULL,
	[FlagDate] [datetime] NULL,
	[Created] [char](1) NULL,
	[CreatedBy] [varchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[HostTrackingNum] [int] NULL,
	[ErrorString] [char](80) NULL,
	[FlagSource] [char](15) NULL,
	[SubAccountSequence] [int] NULL,
	[ClientIP] [char](15) NULL,
	[WebIP] [char](15) NULL,
	[ClusterID] [char](10) NULL,
	[PSIErrorString] [char](80) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [Tracking]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [Tracking] ON [IMS].[NewMemberFlag]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[NewMemberFollowUp]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[NewMemberFollowUp](
	[TrackingNum] [int] NULL,
	[Account] [int] NULL,
	[FollowUpDate] [datetime] NULL,
	[BranchCode] [char](10) NULL,
	[PhoneNumber] [char](20) NULL,
	[Comments] [text] NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[NewMemberFollowUp]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[NewMemberHome]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[NewMemberHome](
	[TrackingNum] [int] NOT NULL,
	[Address1] [char](50) NULL,
	[Address2] [char](30) NULL,
	[Address3] [char](30) NULL,
	[City] [char](40) NULL,
	[State] [char](2) NULL,
	[Zip] [char](9) NULL,
	[CntryCode] [char](2) NULL,
	[CntryName] [char](40) NULL,
	[AreaCode] [char](3) NULL,
	[Phone] [char](8) NULL,
	[Ext] [char](5) NULL,
	[ResidenceYears] [char](2) NULL,
	[ResidenceMonths] [char](2) NULL,
	[CellPhoneAC] [char](3) NULL,
	[CellPhone] [char](7) NULL,
	[FaxPhoneAC] [char](3) NULL,
	[FaxPhone] [char](7) NULL,
	[PagerPhoneAC] [char](3) NULL,
	[PagerPhone] [char](7) NULL,
	[ClientIP] [char](15) NULL,
	[WebIP] [char](15) NULL,
	[ClusterID] [char](10) NULL,
	[ApartmentNumber] [char](10) NULL,
	[Latitude] [char](20) NULL,
	[Longitude] [char](20) NULL,
	[Block] [char](15) NULL,
	[CensusTract] [char](11) NULL,
 CONSTRAINT [PK_NewMemberHome] PRIMARY KEY NONCLUSTERED 
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Index [TrackingNum]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE UNIQUE CLUSTERED INDEX [TrackingNum] ON [IMS].[NewMemberHome]
(
	[TrackingNum] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[NewMemberID]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[NewMemberID](
	[TrackingNum] [int] NOT NULL,
	[Sequence] [smallint] NULL,
	[JointSequence] [smallint] NULL,
	[IDType] [char](50) NULL,
	[IDSource] [char](10) NULL,
	[IDNumber] [char](30) NULL,
	[IDIssueDate] [datetime] NULL,
	[IDExpirationDate] [datetime] NULL,
	[IDState] [char](2) NULL,
	[Description] [char](100) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [Tracking]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [Tracking] ON [IMS].[NewMemberID]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[NewMemberInvestmentAdd]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[NewMemberInvestmentAdd](
	[TrackingNum] [int] NOT NULL,
	[SubAccountSequence] [int] NOT NULL,
	[CertificateNumber] [char](20) NULL,
	[TargetAmount] [int] NULL,
	[PenaltyRate] [int] NULL,
	[PenaltyAmount] [int] NULL,
	[MaturityDate] [datetime] NULL,
	[MaturityDisp] [char](4) NULL,
	[DividendDisp] [char](4) NULL,
	[NoticeDate] [datetime] NULL,
	[WHHExemptDate] [datetime] NULL,
	[EffDistDate] [datetime] NULL,
	[DistMethod] [char](4) NULL,
	[DistFrequency] [char](1) NULL,
	[DistCode] [char](1) NULL,
	[MaxPrevCont] [int] NULL,
	[CurAnnCont] [int] NULL,
	[RolloverTransferType1] [smallint] NULL,
	[RolloverTransferAccount] [int] NULL,
	[RolloverTransferSuffix] [smallint] NULL,
	[RolloverTransferSurname] [char](2) NULL,
	[RolloverTermType] [char](1) NULL,
	[RolloverTerm] [smallint] NULL,
	[RolloverACC] [smallint] NULL,
	[RolloverSDA] [char](3) NULL,
	[RolloverTransferType] [char](4) NULL,
	[IRAType] [char](1) NULL,
	[Term] [int] NULL,
	[TermType] [char](1) NULL,
	[DividendRate] [char](10) NULL,
	[PlanNumber] [smallint] NULL,
	[ClientIP] [char](15) NULL,
	[WebIP] [char](15) NULL,
	[ClusterID] [char](10) NULL,
	[FundingOrder] [smallint] NULL,
	[ContributionCode] [char](1) NULL,
	[ContributionYear] [char](1) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[NewMemberInvestmentAdd]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[NewMemberManualApproval]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[NewMemberManualApproval](
	[TrackingNum] [int] NOT NULL,
	[Sequence] [int] NOT NULL,
	[ReasonCode] [char](50) NULL,
	[Description] [char](255) NULL,
	[ApprovedBy] [varchar](50) NULL,
	[ApprovedOn] [datetime] NULL,
	[JointSequence] [int] NULL,
	[Category] [char](2) NULL,
	[ApproveCode] [char](2) NULL,
	[Comment] [char](1000) NULL,
	[DeclinedBy] [varchar](500) NULL,
	[DeclinedOn] [datetime] NULL,
	[ErrorFlag] [char](1) NULL,
	[ApprovalStatus] [char](1) NULL,
	[ClientIP] [char](15) NULL,
	[WebIP] [char](15) NULL,
	[ClusterID] [char](10) NULL,
 CONSTRAINT [PK_NewMemberManualApproval_TrackingNum_Sequence] PRIMARY KEY CLUSTERED 
(
	[TrackingNum] ASC,
	[Sequence] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[NewMemberManualApprovalLog]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[NewMemberManualApprovalLog](
	[TrackingNum] [int] NOT NULL,
	[Sequence] [smallint] NOT NULL,
	[MASequence] [int] NOT NULL,
	[JointSequence] [int] NULL,
	[ReasonCode] [char](50) NULL,
	[Category] [char](2) NULL,
	[Description] [char](255) NULL,
	[ApprovedBy] [varchar](50) NULL,
	[ApprovedOn] [datetime] NULL,
	[DeclinedBy] [varchar](50) NULL,
	[DeclinedOn] [datetime] NULL,
	[ApproveCode] [char](2) NULL,
	[Comment] [char](1000) NULL,
	[ErrorFlag] [char](1) NULL,
	[ApprovalStatus] [char](1) NULL,
	[ClientIP] [char](15) NULL,
	[WebIP] [char](15) NULL,
	[ClusterID] [char](10) NULL,
	[MAAction] [char](25) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[NewMemberManualApprovalLog]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[NewMemberMemo]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[NewMemberMemo](
	[TrackingNum] [int] NOT NULL,
	[Sequence] [smallint] NULL,
	[MemoLevel] [char](1) NULL,
	[Suffix] [varchar](20) NULL,
	[MemoNumber] [int] NULL,
	[Description] [varchar](100) NULL,
	[Expiration] [datetime] NULL,
	[EntryDate] [datetime] NULL,
	[Created] [char](1) NULL,
	[CreatedBy] [varchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[HostTrackingNum] [int] NULL,
	[ErrorString] [char](80) NULL,
	[MemoSource] [char](8) NULL,
	[ClientIP] [char](15) NULL,
	[WebIP] [char](15) NULL,
	[ClusterID] [char](10) NULL,
	[PSIErrorString] [char](80) NULL,
	[SubAccountSequence] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Index [Tracking]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [Tracking] ON [IMS].[NewMemberMemo]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[NewMemberPaymentProfile]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[NewMemberPaymentProfile](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[TrackingNum] [int] NULL,
	[ProductID] [char](10) NULL,
	[TradeProspectID] [int] NULL,
	[Amount] [int] NULL,
	[InsuranceAmount1] [int] NULL,
	[InsuranceAmount2] [int] NULL,
	[InsCode] [char](2) NULL,
	[Rate] [int] NULL,
	[Term] [int] NULL,
	[Payment] [int] NULL,
	[Balance] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[NewMemberPaymentProfile]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[NewMemberReference]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[NewMemberReference](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[TrackingNum] [int] NULL,
	[ReferenceType] [varchar](10) NULL,
	[FName] [varchar](30) NULL,
	[LName] [varchar](30) NULL,
	[Address1] [varchar](50) NULL,
	[Address2] [varchar](30) NULL,
	[Address3] [varchar](30) NULL,
	[City] [varchar](30) NULL,
	[State] [char](2) NULL,
	[Zip] [varchar](9) NULL,
	[CntryCode] [char](2) NULL,
	[CntryName] [varchar](40) NULL,
	[AreaCode] [varchar](3) NULL,
	[Phone] [varchar](8) NULL,
	[Relationship] [varchar](30) NULL,
 CONSTRAINT [PK_NewMemberReference] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[NewMemberRequestExtra]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[NewMemberRequestExtra](
	[TrackingNum] [int] NOT NULL,
	[TermsAcceptedDateTime] [datetime] NULL,
	[DisclosuresAcceptedDateTime] [datetime] NULL,
	[W8ReceivedDate] [datetime] NULL,
	[TaxCountry] [varchar](10) NULL,
	[ForeignTIN] [varchar](30) NULL,
	[BadLoginAttempts] [int] NULL,
	[MemberNumber] [varchar](50) NULL,
	[PersonNumber] [varchar](50) NULL,
	[OrgNumber] [varchar](50) NULL,
	[EAgreementNumber] [varchar](50) NULL,
	[AdditionalData] [varchar](max) NULL,
	[CancelledDate] [datetime] NULL,
	[CancelledBy] [varchar](50) NULL,
	[AuditComment] [varchar](1000) NULL,
	[AuditCompletedDate] [datetime] NULL,
	[AuditCompletedBy] [varchar](50) NULL,
	[NaoChannel] [varchar](10) NULL,
 CONSTRAINT [PK_IMS.NewMemberRequestExtra] PRIMARY KEY CLUSTERED 
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [IMS].[NewMemberRequestTracking]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[NewMemberRequestTracking](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[TrackingNum] [int] NULL,
	[PageName] [varchar](50) NULL,
	[PageStatus] [varchar](50) NULL,
	[StatusDateTime] [datetime] NULL,
	[ClientIP] [varchar](20) NULL,
	[UserAgent] [varchar](255) NULL,
 CONSTRAINT [PK_IMS.NewMemberExternalTracking] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[NewMemberRequiredDocs]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[NewMemberRequiredDocs](
	[NewMemberRequiredDocId] [int] IDENTITY(1,1) NOT NULL,
	[TrackingNum] [int] NOT NULL,
	[SortOrder] [int] NULL,
	[RequirementText] [nvarchar](255) NULL,
	[DocumentInformation] [nvarchar](max) NULL,
 CONSTRAINT [PK_NewMemberRequiredDocs] PRIMARY KEY CLUSTERED 
(
	[NewMemberRequiredDocId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [IMS].[NewMemberShoppingCart]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[NewMemberShoppingCart](
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[ProductID] [char](40) NULL,
	[ProductName] [char](200) NULL,
	[YesNoMaybe] [char](10) NULL,
	[SLType] [char](2) NULL,
	[Approved] [char](1) NULL,
	[TrackingNum] [int] NULL,
	[Status] [char](1) NULL,
	[MasterCategoryID] [int] NULL,
	[CategoryID] [int] NULL,
	[FollowUpDate] [datetime] NULL,
	[Exclude] [nvarchar](200) NULL,
	[NeedsOverRide] [char](1) NULL,
	[CreatedBy] [varchar](20) NULL,
	[CreatedOn] [datetime] NULL,
	[Created] [char](1) NULL,
	[Fulfill] [char](1) NULL,
	[FulfillType] [char](10) NULL,
	[Requires] [char](60) NULL,
	[LOSID] [int] NULL,
	[LOSProductID] [char](10) NULL,
	[LoanSource] [char](10) NULL,
	[LoanType] [char](10) NULL,
	[LoanSubType] [char](10) NULL,
	[Term] [smallint] NULL,
	[ApprovedAmount] [int] NULL,
	[RequestedAmount] [int] NULL,
	[InsuranceAmount1] [int] NULL,
	[InsuranceAmount2] [int] NULL,
	[InsCode] [char](2) NULL,
	[ClosedFlag] [char](1) NULL,
	[LossFlag] [char](1) NULL,
	[TradeProspectIDs] [varchar](50) NULL,
	[SubAccountID] [bigint] NULL,
 CONSTRAINT [PK_NewMemberShoppingCart] PRIMARY KEY NONCLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[NewMemberShoppingCart]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[NewMemberStaffInfo]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[NewMemberStaffInfo](
	[TrackingNum] [int] NOT NULL,
	[TellerInitials] [char](8) NULL,
	[CSFrom] [char](50) NULL,
	[CSCenter] [char](50) NULL,
	[CSEmail] [char](50) NULL,
	[CSPhone] [char](20) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE UNIQUE CLUSTERED INDEX [xTracking] ON [IMS].[NewMemberStaffInfo]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[NewMemberSubAccountLink]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[NewMemberSubAccountLink](
	[TrackingNum] [int] NOT NULL,
	[Sequence] [smallint] NULL,
	[PlasticCardSequence] [smallint] NULL,
	[SubSequence] [smallint] NULL,
	[JointSequence] [smallint] NULL,
	[Approval] [char](3) NULL,
	[OverrideBy] [char](20) NULL,
	[Created] [char](1) NULL,
	[CreatedBy] [varchar](20) NULL,
	[HostTrackingNum] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[ErrorString] [char](80) NULL,
	[AssocCode] [char](2) NULL,
	[C24Access] [char](1) NULL,
	[StmtPrint] [char](1) NULL,
	[JOCHTag] [char](10) NULL,
	[JOType] [char](2) NULL,
	[TagBeginEnd] [char](1) NULL,
	[StartingNumber] [smallint] NULL,
	[SortOrder] [smallint] NULL,
	[PrimaryJoint] [char](1) NULL,
	[SufPosition] [char](5) NULL,
	[ClientIP] [char](15) NULL,
	[WebIP] [char](15) NULL,
	[ClusterID] [char](10) NULL,
	[PSIErrorString] [char](80) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[NewMemberSubAccountLink]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[NewMemberTimestamps]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[NewMemberTimestamps](
	[TrackingNum] [int] NOT NULL,
	[EventName] [varchar](200) NOT NULL,
	[EventUtc] [datetime] NOT NULL,
	[EventIP] [varchar](32) NOT NULL,
	[EventStatus] [varchar](200) NULL,
 CONSTRAINT [PK_NewMemberTimestamps] PRIMARY KEY CLUSTERED 
(
	[TrackingNum] ASC,
	[EventName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[NewMemberTradeProspect]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[NewMemberTradeProspect](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[TrackingNum] [int] NULL,
	[LoanType] [char](10) NULL,
	[LoanSubType] [char](10) NULL,
	[ProductName] [char](100) NULL,
	[InstitutionName] [char](100) NULL,
	[Payment] [int] NULL,
	[Rate] [int] NULL,
	[Term] [smallint] NULL,
	[Balance] [int] NULL,
	[OrigBal] [int] NULL,
	[CreditLim] [int] NULL,
	[ExpireDate] [datetime] NULL,
	[AddToCartReason] [varchar](200) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[NewMemberTradeProspect]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[NewMemberWork]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[NewMemberWork](
	[TrackingNum] [int] NULL,
	[Address1] [char](30) NULL,
	[Address2] [char](30) NULL,
	[Address3] [char](30) NULL,
	[City] [char](40) NULL,
	[State] [char](2) NULL,
	[Zip] [char](9) NULL,
	[CntryCode] [char](2) NULL,
	[CntryName] [char](40) NULL,
	[AreaCode] [char](3) NULL,
	[Phone] [char](8) NULL,
	[Ext] [char](5) NULL,
	[EmploymentStatus] [char](2) NULL,
	[EmployerName] [char](30) NULL,
	[JobTitle] [char](45) NULL,
	[HireDate] [datetime] NULL,
	[GrossIncome] [int] NULL,
	[OccupationCode] [char](2) NULL,
	[IncomeFrequency] [char](1) NULL,
	[ProfessionYears] [smallint] NULL,
	[EmployeeNumber] [char](20) NULL,
	[Shift] [char](50) NULL,
	[Department] [char](20) NULL,
	[ClientIP] [char](15) NULL,
	[WebIP] [char](15) NULL,
	[ClusterID] [char](10) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [TrackingNum]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE UNIQUE CLUSTERED INDEX [TrackingNum] ON [IMS].[NewMemberWork]
(
	[TrackingNum] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[NextTrackingNum]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[NextTrackingNum](
	[TrackingNum] [int] NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Index [TrackingNum]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE UNIQUE CLUSTERED INDEX [TrackingNum] ON [IMS].[NextTrackingNum]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[NMRFunding]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[NMRFunding](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[AccountNumber] [varchar](50) NULL,
	[GatewayCustomerID] [int] NULL,
	[DateTimeCreated] [datetime] NULL,
	[DateTimeLastTransaction] [datetime] NULL,
	[TrackingNum] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[NMRFundingBank]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[NMRFundingBank](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[GatewayAccountID] [int] NULL,
	[TrackingNum] [int] NULL,
	[AccountNumberLast4] [varchar](4) NULL,
	[BankName] [varchar](50) NULL,
	[AccountType] [char](1) NULL,
	[Amount1] [decimal](18, 2) NULL,
	[Amount2] [decimal](18, 2) NULL,
	[GatewayPaymentID1] [varchar](25) NULL,
	[GatewayPaymentID2] [varchar](25) NULL,
	[VerificationAttempts] [int] NULL,
	[VerificationStatus] [char](1) NULL,
	[PSIErrorMessage] [varchar](255) NULL,
	[DateTimeCreated] [datetime] NULL,
	[DateTimeVerified] [datetime] NULL,
	[DateTimeVerificationReconciled] [datetime] NULL,
	[DateTimeLastReversal] [datetime] NULL,
	[DateTimeLastTransaction] [datetime] NULL,
	[DateTimeLastReconciled] [datetime] NULL,
	[FundingID] [int] NULL,
	[ReconciliationUser] [varchar](50) NULL,
	[ApprovedLimit] [int] NULL,
	[CBTracking] [int] NULL,
	[RoutingNumber] [varchar](9) NULL,
	[AccountNumberEncrypted] [varchar](100) NULL,
	[DateTimeExported] [datetime] NULL,
	[Nickname] [varchar](30) NULL,
	[MakeAvailable] [bit] NOT NULL,
	[DebitAmount] [decimal](18, 2) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[NMRFundingCard]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[NMRFundingCard](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[GatewayAccountID] [bigint] NULL,
	[TrackingNum] [int] NULL,
	[AccountNumberLast4] [varchar](4) NULL,
	[CardType] [char](1) NULL,
	[DateTimeCreated] [datetime] NULL,
	[DateTimeLastReversal] [datetime] NULL,
	[DateTimeLastTransaction] [datetime] NULL,
	[DateTimeLastReconciled] [datetime] NULL,
	[FundingID] [int] NULL,
	[AuthenticationCode] [varchar](100) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[NMRFundingTransaction]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[NMRFundingTransaction](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[FundingBankID] [int] NULL,
	[FundingCardID] [int] NULL,
	[SourceSubAccountSeq] [int] NULL,
	[TargetSubAccountSuffix] [varchar](50) NULL,
	[FundingType] [char](1) NULL,
	[TrackingNum] [int] NULL,
	[GatewayPaymentID] [varchar](25) NULL,
	[TargetSubAccountSeq] [int] NULL,
	[Amount] [decimal](18, 2) NULL,
	[DateTimeCreated] [datetime] NULL,
	[DateTimeLastTransaction] [datetime] NULL,
	[DateTimeLastReversal] [datetime] NULL,
	[DateTimeReconciled] [datetime] NULL,
	[ReconciliationUser] [varchar](50) NULL,
	[DateTimeExported] [datetime] NULL,
	[TransactionState] [varchar](20) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[OnyxData]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[OnyxData](
	[AppName] [varchar](50) NULL,
	[EstablishSession] [varchar](200) NULL,
	[ExecuteTransaction] [varchar](200) NULL,
	[EndSession] [varchar](200) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[ProcessQ]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[ProcessQ](
	[TrackingNum] [int] NOT NULL,
	[Resource] [char](16) NOT NULL,
	[QType] [char](1) NULL,
	[TransactionType] [char](32) NULL,
	[HostError] [int] NULL,
	[Attempts] [smallint] NULL,
	[QDate] [datetime] NULL,
	[HostErrorString] [char](85) NULL,
	[IMSError] [int] NULL,
	[IMSErrorString] [char](85) NULL,
	[TransactionProcessed] [smallint] NULL,
	[OrigType] [char](32) NULL,
	[ClientIP] [char](15) NULL,
	[WebIP] [char](15) NULL,
	[ClusterID] [char](10) NULL,
	[TellerInitials] [char](3) NULL,
	[TellerID] [char](10) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [TrackingNum]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [TrackingNum] ON [IMS].[ProcessQ]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[ProductCollateralField]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[ProductCollateralField](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[CollateralProductId] [int] NULL,
	[FieldType] [nvarchar](255) NULL,
	[FieldLabel] [nvarchar](255) NULL,
	[AriaLabel] [nvarchar](255) NULL,
	[Tooltip] [nvarchar](255) NULL,
	[DisplayOrder] [int] NULL,
	[IsActive] [bit] NULL,
	[DisplayName] [nvarchar](255) NULL,
	[IsRequired] [bit] NULL,
	[MinValue] [int] NULL,
	[MaxValue] [int] NULL,
	[SelectOptions] [nvarchar](max) NULL,
	[ThirdPartyProperyName] [nvarchar](max) NULL,
	[ValidationRegex] [nvarchar](max) NULL,
PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [IMS].[ProductPurposeMapping]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[ProductPurposeMapping](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[PurposeCodeId] [int] NULL,
	[CollateralProductId] [int] NULL,
	[IsActive] [bit] NULL,
	[SortOrder] [int] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[PurposeCode]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[PurposeCode](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Code] [int] NULL,
	[DisplayName] [nvarchar](255) NULL,
PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[RefMon]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[RefMon](
	[SessionID] [char](60) NULL,
	[SessionKey] [char](168) NULL,
	[Account] [int] NULL,
	[TellerInitials] [char](3) NULL,
	[SSN] [int] NULL,
	[SessionExp] [datetime] NULL,
	[TranCounter] [int] NULL,
	[ClientIP] [char](15) NULL,
	[WebIP] [char](15) NULL,
	[ClusterID] [char](10) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[RefMonConfig]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[RefMonConfig](
	[CheckLogic] [char](200) NULL,
	[Sequence] [tinyint] NULL,
	[TransactionType] [char](20) NULL,
	[Mode] [char](2) NULL,
	[XMLSessionID] [char](100) NULL,
	[XMLSessionKey] [char](100) NULL,
	[XMLAccount] [char](100) NULL,
	[XMLSSN] [char](100) NULL,
	[XMLTellerInitials] [char](100) NULL,
	[RelatedMode] [char](2) NULL,
	[RelatedXMLData] [char](100) NULL,
	[RelatedDBField] [char](10) NULL,
	[RelatedType] [char](20) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[RefMonRelated]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[RefMonRelated](
	[RelationType] [char](20) NULL,
	[RelatedType] [char](20) NULL,
	[SessionID] [int] NULL,
	[RelatedData] [char](200) NULL,
	[Sequence] [smallint] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[RequiredDocuments]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[RequiredDocuments](
	[TrackingNum] [int] NOT NULL,
	[ID] [int] NOT NULL,
	[OtherDocID] [int] NOT NULL,
	[SortOrder] [int] NULL,
	[RequirementText] [nvarchar](250) NULL,
	[DocumentInformation] [nvarchar](max) NULL,
	[CriteriaType1] [nvarchar](100) NULL,
	[CriteriaValue1] [nvarchar](100) NULL,
	[CriteriaType2] [nvarchar](100) NULL,
	[CriteriaValue2] [nvarchar](100) NULL,
	[CriteriaType3] [nvarchar](100) NULL,
	[CriteriaValue3] [nvarchar](100) NULL,
PRIMARY KEY CLUSTERED 
(
	[TrackingNum] ASC,
	[ID] ASC,
	[OtherDocID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [IMS].[ReviewQueueConfig]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[ReviewQueueConfig](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[StatusCode] [varchar](2) NOT NULL,
	[StatusName] [varchar](50) NULL,
	[ReasonCode] [varchar](50) NULL,
	[Hierarchy] [int] NOT NULL,
 CONSTRAINT [PK_IMS.QueueReviewConfig] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[ScheduledTask]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[ScheduledTask](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[title] [varchar](50) NOT NULL,
	[description] [varchar](200) NULL,
	[taskFunction] [varchar](50) NOT NULL,
	[daysBetweenRun] [float] NOT NULL,
	[lastRun] [datetime] NULL,
	[lastRunInfo] [text] NULL,
	[lastSuccess] [datetime] NULL,
	[taskType] [nchar](50) NULL,
 CONSTRAINT [PK_ScheduledTask] PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [IMS].[SecureMailAttachment]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[SecureMailAttachment](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[RequiredDocID] [int] NULL,
	[Sequence] [int] NULL,
	[FileName] [varchar](200) NULL,
	[Status] [varchar](10) NULL,
	[ThreadId] [int] NULL,
	[ContentType] [varchar](100) NULL,
	[FileData] [varbinary](max) NULL,
	[OtherDocID] [int] NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [IMS].[SecureMailMessage]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[SecureMailMessage](
	[Sequence] [int] NULL,
	[TellerId] [char](6) NULL,
	[EmailNotifyAddress] [char](100) NULL,
	[SentBy] [char](10) NULL,
	[DateSent] [datetime] NULL,
	[Message] [char](500) NULL,
	[ThreadId] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[SecureMailThread]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[SecureMailThread](
	[TrackingNum] [int] NULL,
	[Account] [int] NULL,
	[ThreadId] [int] IDENTITY(1,1) NOT NULL,
	[LastUpdate] [datetime] NULL,
	[UserStatus] [char](20) NULL,
	[CSRStatus] [char](20) NULL,
	[Subject] [char](40) NULL,
	[JointOwnerSequence] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[SecurityCode]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[SecurityCode](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[TrackingNum] [int] NOT NULL,
	[Code] [varchar](500) NOT NULL,
	[CreatedAtUtc] [datetime2](7) NOT NULL,
	[ExpiresAtUtc] [datetime2](7) NOT NULL,
	[RetryAttempts] [int] NOT NULL,
	[RequestId] [uniqueidentifier] NOT NULL,
	[RequestType] [varchar](500) NOT NULL,
	[WasSuccessful] [bit] NOT NULL,
	[ResendCodeCount] [int] NULL,
	[DeliveryAddress] [varchar](256) NULL,
	[EncryptedTempPassword] [varchar](256) NULL,
 CONSTRAINT [PK__Security__3214EC07F6CE50F2] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[SHCatACC]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[SHCatACC](
	[Category] [char](16) NULL,
	[ACC] [smallint] NULL,
	[ShareType] [char](2) NULL,
	[SortOrder] [smallint] NULL,
	[TypeDescription] [char](50) NULL,
	[DescAbrv] [char](3) NULL,
	[ID] [int] IDENTITY(1,1) NOT NULL,
 CONSTRAINT [PK_SHCatACC] PRIMARY KEY NONCLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Index [XACC]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [XACC] ON [IMS].[SHCatACC]
(
	[ACC] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[SHCategories]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[SHCategories](
	[Category] [char](16) NULL,
	[Description] [char](80) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[SHCatPerm]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[SHCatPerm](
	[Category] [char](18) NULL,
	[PermType] [char](18) NULL,
	[Allowed] [char](18) NULL
) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [xCategory]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [xCategory] ON [IMS].[SHCatPerm]
(
	[Category] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[SHCatSDA]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[SHCatSDA](
	[Category] [char](16) NULL,
	[DescAbrv] [char](3) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[SHCH]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[SHCH](
	[TrackingNum] [int] NOT NULL,
	[Processed] [smallint] NULL,
	[Account] [int] NULL,
	[ChangeMode] [char](1) NULL,
	[Surname] [char](2) NULL,
	[Suffix] [smallint] NULL,
	[Description] [char](30) NULL,
	[DescAbrv] [char](3) NULL,
	[ACC] [smallint] NULL,
	[SSN] [char](9) NULL,
	[TaxIDType] [char](1) NULL,
	[DraftXRef] [char](9) NULL,
	[TaxCode] [char](1) NULL,
	[JointNam1] [char](30) NULL,
	[StatementOrder] [smallint] NULL,
	[OpenDate] [int] NULL,
	[MICRNumber] [char](14) NULL,
	[PrevMICRNumber] [char](14) NULL,
	[InternetEnabledFlag] [char](1) NULL,
	[InternetEnabledDate] [datetime] NULL,
	[InternetLastSentDate] [datetime] NULL,
	[APR] [int] NULL,
	[DivDisp] [char](4) NULL,
	[DivPaidDate] [datetime] NULL,
	[LowBalance] [int] NULL,
	[YTDInt] [int] NULL,
	[YTDWithheld] [int] NULL,
	[DivWithDate] [datetime] NULL,
	[CentsDays] [bigint] NULL,
	[MTDRegDWD] [smallint] NULL,
	[MTDRegDCHK] [smallint] NULL,
	[Branch] [smallint] NULL,
	[OrigBranch] [smallint] NULL,
	[LastSmallWDDate] [datetime] NULL,
	[Seller] [char](3) NULL,
	[Detail] [char](1) NULL,
	[ClientIP] [char](15) NULL,
	[WebIP] [char](15) NULL,
	[ClusterID] [char](10) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [Tracking]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE UNIQUE CLUSTERED INDEX [Tracking] ON [IMS].[SHCH]
(
	[TrackingNum] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[SHCHPledges]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[SHCHPledges](
	[TrackingNum] [int] NOT NULL,
	[Sequence] [smallint] NOT NULL,
	[Account] [int] NOT NULL,
	[Suffix] [smallint] NOT NULL,
	[Surname] [char](2) NULL,
	[Amount] [int] NULL,
	[Reason] [char](60) NULL,
	[ExpirationDate] [datetime] NULL,
	[ClientIP] [char](15) NULL,
	[WebIP] [char](15) NULL,
	[ClusterID] [char](10) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [Tracking]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [Tracking] ON [IMS].[SHCHPledges]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[SHCHSuffix]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[SHCHSuffix](
	[Sequence] [int] NOT NULL,
	[TrackingNum] [int] NOT NULL,
	[Account] [int] NULL,
	[SLType] [char](1) NULL,
	[RelType] [char](1) NULL,
	[Suffix] [int] NULL,
	[Surname] [char](2) NULL,
	[ChangeCode] [char](10) NULL,
	[Status] [char](1) NULL,
	[Description] [char](50) NULL,
	[ClientIP] [char](15) NULL,
	[WebIP] [char](15) NULL,
	[ClusterID] [char](10) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [Tracking]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [Tracking] ON [IMS].[SHCHSuffix]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[SHFE]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[SHFE](
	[TrackingNum] [int] NULL,
	[Processed] [smallint] NULL,
	[Account] [int] NULL,
	[Suffix] [smallint] NULL,
	[Surname] [char](2) NULL,
	[TranAmount] [int] NULL,
	[TranType] [char](2) NULL,
	[EffectiveDate] [datetime] NULL,
	[Description] [char](20) NULL,
	[TranSubcode] [char](8) NULL,
	[Fee] [int] NULL,
	[FeeAccount] [int] NULL,
	[MembershipFee] [int] NULL,
	[FromBalance] [int] NULL,
	[Description2] [char](20) NULL,
	[EffectiveDate2] [datetime] NULL,
	[FeeGL] [char](2) NULL,
	[ClientIP] [char](15) NULL,
	[WebIP] [char](15) NULL,
	[ClusterID] [char](10) NULL,
	[LastModified] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[SHNU]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[SHNU](
	[TrackingNum] [int] NOT NULL,
	[Processed] [smallint] NULL,
	[Account] [int] NULL,
	[Suffix] [smallint] NULL,
	[Surname] [char](2) NULL,
	[CashAmount] [int] NULL,
	[CheckAmount] [int] NULL,
	[VoucherAmount] [int] NULL,
	[Fee] [int] NULL,
	[HoldCode] [char](2) NULL,
	[EffectiveDate] [datetime] NULL,
	[ClientIP] [char](15) NULL,
	[WebIP] [char](15) NULL,
	[ClusterID] [char](10) NULL,
	[LastModified] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Index [Tracking]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE UNIQUE CLUSTERED INDEX [Tracking] ON [IMS].[SHNU]
(
	[TrackingNum] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[SHWI]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[SHWI](
	[TrackingNum] [int] NOT NULL,
	[Processed] [smallint] NULL,
	[Account] [int] NULL,
	[Suffix] [smallint] NULL,
	[Surname] [char](2) NULL,
	[CashAmount] [int] NULL,
	[CheckAmount] [int] NULL,
	[VoucherAmount] [int] NULL,
	[EffectiveDate] [datetime] NULL,
	[PayeeInfo1] [char](30) NULL,
	[PayeeInfo2] [char](30) NULL,
	[PayeeInfo3] [char](30) NULL,
	[PayeeInfo4] [char](30) NULL,
	[PayeeInfo5] [char](30) NULL,
	[MembershipFee] [int] NULL,
	[PayeeInfo6] [char](30) NULL,
	[FromBalance] [int] NULL,
	[AccountDesc] [char](30) NULL,
	[ClientIP] [char](15) NULL,
	[WebIP] [char](15) NULL,
	[ClusterID] [char](10) NULL,
	[LastModified] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Index [Tracking]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE UNIQUE CLUSTERED INDEX [Tracking] ON [IMS].[SHWI]
(
	[TrackingNum] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[SingleSignOn]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[SingleSignOn](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[setAt] [datetime] NOT NULL,
	[key] [uniqueidentifier] NOT NULL,
	[value] [varchar](2000) NOT NULL,
	[used] [bit] NOT NULL,
 CONSTRAINT [PK__SingleSi__3213E83F61915EA7] PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[Staff_User]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[Staff_User](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[uId] [uniqueidentifier] NOT NULL,
	[created] [datetime] NOT NULL,
	[lastLogin] [datetime] NULL,
	[badLoginCount] [int] NOT NULL,
	[firstName] [varchar](50) NULL,
	[lastName] [varchar](50) NOT NULL,
	[username] [varchar](50) NOT NULL,
	[password] [varchar](250) NOT NULL,
	[securityLevel] [int] NULL,
 CONSTRAINT [PK__Staff_Us__3213E83F6932806F] PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[SymitarConfigurationSettings]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[SymitarConfigurationSettings](
	[SymitarConfigurationSettingId] [bigint] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](64) NOT NULL,
	[Description] [varchar](1024) NULL,
	[Value] [varchar](max) NULL,
 CONSTRAINT [PK__SymitarC__4297B24B02F31DC9] PRIMARY KEY CLUSTERED 
(
	[SymitarConfigurationSettingId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [IMS].[SymitarTrackingFieldToFlag]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[SymitarTrackingFieldToFlag](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[TrackingTypeId] [int] NOT NULL,
	[FieldName] [varchar](50) NOT NULL,
	[ExpirationFieldName] [varchar](50) NULL,
	[MapToSubAccount] [varchar](10) NULL,
	[FlagLevel] [varchar](1) NULL,
	[FlagType] [varchar](1) NULL,
	[FlagNumber] [int] NULL,
	[FlagValue] [int] NULL,
 CONSTRAINT [PK__SymitarT__3214EC074401C717] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[SymitarTrackingFieldToMemo]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[SymitarTrackingFieldToMemo](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[TrackingTypeId] [int] NOT NULL,
	[FieldName] [varchar](50) NOT NULL,
	[ExpirationFieldName] [varchar](50) NULL,
	[MapToSubAccount] [varchar](10) NULL,
	[MemoDescription] [varchar](60) NULL,
	[MemoNumber] [int] NULL,
 CONSTRAINT [PK__SymitarT__3214EC0748C67C34] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[SymitarTrackingRecord]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[SymitarTrackingRecord](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[TrackingRecordType] [int] NOT NULL,
	[TrackingType] [int] NOT NULL,
 CONSTRAINT [PK__SymitarT__3214EC073F3D11FA] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[SymitarTrackingRecordType]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[SymitarTrackingRecordType](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Type] [varchar](50) NOT NULL,
	[Description] [varchar](250) NULL,
 CONSTRAINT [PK__SymitarT__3214EC073B6C8116] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[Sync1WebHookLog]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[Sync1WebHookLog](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[webhookType] [nchar](30) NOT NULL,
	[timeStamp] [datetime] NULL,
	[applicationId] [nchar](30) NOT NULL,
	[fullText] [varchar](max) NOT NULL,
 CONSTRAINT [PK_Sync1WebHookLog] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TellerAssignments]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TellerAssignments](
	[Id] [uniqueidentifier] NOT NULL,
	[AssignedToId] [int] NOT NULL,
	[TrackingNumber] [int] NOT NULL,
	[DateCreated] [datetime] NOT NULL,
	[DateUpdated] [datetime] NOT NULL,
	[AssignedById] [int] NOT NULL,
 CONSTRAINT [PK_TellerAssignments] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TellerSecurity]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TellerSecurity](
	[Initials] [char](4) NOT NULL,
	[TransactionType] [char](4) NOT NULL,
	[Mode] [char](5) NULL
) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [xInitials]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [xInitials] ON [IMS].[TellerSecurity]
(
	[Initials] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TransactionTypes_IMS7_ADAPI]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TransactionTypes_IMS7_ADAPI](
	[TransactionType] [char](32) NULL,
	[Host] [char](16) NULL,
	[Delay] [smallint] NULL,
	[Retry] [smallint] NULL,
	[CheckStatus] [char](1) NULL,
	[StatusDelay] [smallint] NULL,
	[StatusDays] [smallint] NULL,
	[StatusHost] [char](16) NULL,
	[AllowOffline] [char](1) NULL,
	[LicenseKey] [varchar](200) NULL,
	[DBConnString] [varchar](500) NULL,
	[XMLFileName] [varchar](255) NULL,
	[XMLObjectName] [varchar](255) NULL,
	[id] [int] IDENTITY(1,1) NOT NULL,
 CONSTRAINT [PK__TransactionTypes__1CC7330E] PRIMARY KEY NONCLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IXTransactionType]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE UNIQUE CLUSTERED INDEX [IXTransactionType] ON [IMS].[TransactionTypes_IMS7_ADAPI]
(
	[TransactionType] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TransactionTypes_IMS7_EStatements]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TransactionTypes_IMS7_EStatements](
	[TransactionType] [char](32) NULL,
	[Host] [char](16) NULL,
	[Delay] [smallint] NULL,
	[Retry] [smallint] NULL,
	[CheckStatus] [char](1) NULL,
	[StatusDelay] [smallint] NULL,
	[StatusDays] [smallint] NULL,
	[StatusHost] [char](16) NULL,
	[AllowOffline] [char](1) NULL,
	[LicenseKey] [varchar](200) NULL,
	[DBConnString] [varchar](500) NULL,
	[XMLFileName] [varchar](255) NULL,
	[XMLObjectName] [varchar](255) NULL,
	[id] [int] IDENTITY(1,1) NOT NULL,
 CONSTRAINT [PK_TransactionTypesIms7EStatements_ID] PRIMARY KEY NONCLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TUAccessFile]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TUAccessFile](
	[TrackingNumber] [int] NOT NULL,
	[NodeID] [int] NOT NULL,
	[PID] [int] NOT NULL,
	[SegmentType] [char](4) NULL,
	[AccessCode] [char](8) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTrackingNum]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [xTrackingNum] ON [IMS].[TUAccessFile]
(
	[TrackingNumber] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TUAdditionalInformation]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TUAdditionalInformation](
	[TrackingNumber] [int] NOT NULL,
	[NodeID] [int] NOT NULL,
	[PID] [int] NOT NULL,
	[SegmentType] [char](4) NULL,
	[LoanType] [char](2) NULL,
	[LoanAmount] [char](9) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTrackingNum]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [xTrackingNum] ON [IMS].[TUAdditionalInformation]
(
	[TrackingNumber] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TUAddOnStatus]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TUAddOnStatus](
	[TrackingNumber] [int] NOT NULL,
	[NodeID] [int] NOT NULL,
	[PID] [int] NOT NULL,
	[SegmentType] [char](4) NULL,
	[SegmentLength] [int] NULL,
	[ProductCode] [char](5) NULL,
	[ProductStatus] [char](2) NULL,
	[SearchStatus] [char](3) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTrackingNum]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [xTrackingNum] ON [IMS].[TUAddOnStatus]
(
	[TrackingNumber] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TUAddress]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TUAddress](
	[TrackingNumber] [int] NOT NULL,
	[NodeID] [int] NOT NULL,
	[PID] [int] NOT NULL,
	[SegmentType] [char](4) NULL,
	[SegmentLength] [int] NULL,
	[SourceIndicator] [char](1) NULL,
	[AddressQualifier] [char](1) NULL,
	[HouseNumber] [char](10) NULL,
	[Predirectional] [char](2) NULL,
	[StreetName] [char](27) NULL,
	[Postdirectional] [char](2) NULL,
	[ApartmentUnitNumber] [char](5) NULL,
	[CityName] [char](27) NULL,
	[State] [char](2) NULL,
	[ZipCode] [char](10) NULL,
	[LengthOfResidence] [char](4) NULL,
	[ResidentialStatus] [char](1) NULL,
	[StreetType] [char](2) NULL,
	[DateReported] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTrackingNum]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [xTrackingNum] ON [IMS].[TUAddress]
(
	[TrackingNumber] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TUCharacteristic]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TUCharacteristic](
	[TrackingNumber] [int] NOT NULL,
	[NodeID] [int] NOT NULL,
	[PID] [int] NOT NULL,
	[SegmentType] [char](4) NULL,
	[SegmentLength] [int] NULL,
	[ProductCode] [char](5) NULL,
	[CharacteristicID] [char](8) NULL,
	[CharacteristicValue] [char](1) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTrackingNum]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [xTrackingNum] ON [IMS].[TUCharacteristic]
(
	[TrackingNumber] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TUCollection]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TUCollection](
	[TrackingNumber] [int] NOT NULL,
	[NodeID] [int] NOT NULL,
	[PID] [int] NOT NULL,
	[SegmentType] [char](4) NULL,
	[SegmentLength] [int] NULL,
	[IndustryCode] [char](2) NULL,
	[MemberCode] [char](8) NULL,
	[CollectionAgencyName] [char](24) NULL,
	[AccountType] [char](1) NULL,
	[AccountNumber] [char](24) NULL,
	[AccountDesignator] [char](1) NULL,
	[CreditorsName] [char](36) NULL,
	[DateOpened] [datetime] NULL,
	[DateVerified] [datetime] NULL,
	[VerificationIndicator] [char](1) NULL,
	[DateClosed] [datetime] NULL,
	[DateClosedIndicator] [char](1) NULL,
	[DatePaidOut] [datetime] NULL,
	[CurrentMannerOfPayment] [char](2) NULL,
	[CurrentBalance] [char](9) NULL,
	[OrigionalBalance] [char](9) NULL,
	[RemarksCode] [char](3) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTrackingNum]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [xTrackingNum] ON [IMS].[TUCollection]
(
	[TrackingNumber] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TUCompliance]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TUCompliance](
	[TrackingNumber] [int] NOT NULL,
	[NodeID] [int] NOT NULL,
	[PID] [int] NOT NULL,
	[SegmentType] [char](4) NULL,
	[SegmentLength] [int] NULL,
	[InformationType] [char](1) NULL,
	[SubscriberSourceName] [char](24) NULL,
	[AccountDocketNumber] [char](24) NULL,
	[RmrksPubRecordTypeCode] [char](3) NULL,
	[WordingRmrksPubRecType] [char](36) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTrackingNum]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [xTrackingNum] ON [IMS].[TUCompliance]
(
	[TrackingNumber] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TUConsumerIdentifier]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TUConsumerIdentifier](
	[TrackingNumber] [int] NOT NULL,
	[NodeID] [int] NOT NULL,
	[PID] [int] NOT NULL,
	[SegmentType] [char](4) NULL,
	[SegmentLength] [int] NULL,
	[PermanentID] [char](12) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTrackingNum]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [xTrackingNum] ON [IMS].[TUConsumerIdentifier]
(
	[TrackingNumber] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TUConsumerStatement]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TUConsumerStatement](
	[TrackingNumber] [int] NOT NULL,
	[NodeID] [int] NOT NULL,
	[PID] [int] NOT NULL,
	[SegmentType] [char](4) NULL,
	[SegmentLength] [int] NULL,
	[ContentType] [char](2) NULL,
	[Information] [char](100) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[TUConsumerStatement]
(
	[TrackingNumber] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TUCORR]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TUCORR](
	[TrackingNumber] [int] NOT NULL,
	[NodeID] [int] NOT NULL,
	[PID] [int] NOT NULL,
	[SegmentType] [char](4) NULL,
	[SegmentLength] [int] NULL,
	[VersionSwitch] [int] NULL,
	[UserReferanceNumber] [char](24) NULL,
	[FstSecInqErrRespRecord] [char](1) NULL,
	[FstErrCondEncountered] [int] NULL,
	[SecErrCondEncountered] [int] NULL,
	[ThrdErrCondEncountered] [int] NULL,
	[FourthErrCondEncountered] [int] NULL,
	[FithErrCondEncountered] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[TUCORR]
(
	[TrackingNumber] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TUCountyInformation]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TUCountyInformation](
	[TrackingNumber] [int] NOT NULL,
	[NodeID] [int] NOT NULL,
	[PID] [int] NOT NULL,
	[SegmentType] [char](4) NULL,
	[SegmentLength] [int] NULL,
	[SourceIndicator] [char](1) NULL,
	[SourceQualifier] [char](1) NULL,
	[CityName] [char](28) NULL,
	[StateCode] [char](2) NULL,
	[County] [char](25) NULL,
	[CountyType] [char](1) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[TUCountyInformation]
(
	[TrackingNumber] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TUCreditCard]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TUCreditCard](
	[TrackingNumber] [int] NOT NULL,
	[NodeID] [int] NOT NULL,
	[PID] [int] NOT NULL,
	[SegmentType] [char](4) NULL,
	[SegmentLength] [int] NULL,
	[CreditCardType] [char](2) NULL,
	[CompanyName] [char](24) NULL,
	[CreditCardAccountNumber] [char](24) NULL,
	[ExpirationDate] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TUCreditSummary]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TUCreditSummary](
	[TrackingNumber] [int] NOT NULL,
	[NodeID] [int] NOT NULL,
	[PID] [int] NOT NULL,
	[SegmentType] [char](4) NULL,
	[SegmentLength] [int] NULL,
	[CreditSumReportPeriod] [int] NULL,
	[NumberOfPublicRecords] [int] NULL,
	[NumberOfCollections] [int] NULL,
	[NumberOfNegativeTrades] [int] NULL,
	[TrdsWAnyHistNegatives] [int] NULL,
	[OccOfHistoricalNegative] [int] NULL,
	[NumberOfTrades] [int] NULL,
	[NumRevAndCheckCreditTrds] [int] NULL,
	[NumInstallmentTrds] [int] NULL,
	[NumMortgageTrds] [int] NULL,
	[NumOpenTrdAccounts] [int] NULL,
	[NumberOfInquiries] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[TUCreditSummary]
(
	[TrackingNumber] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TUCreditSummaryDescription]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TUCreditSummaryDescription](
	[TrackingNumber] [int] NOT NULL,
	[NodeID] [int] NOT NULL,
	[PID] [int] NOT NULL,
	[SegmentType] [char](4) NULL,
	[SegmentLength] [int] NULL,
	[SummaryType] [char](1) NULL,
	[HighCredit] [char](9) NULL,
	[CreditLimit] [char](9) NULL,
	[Balance] [char](9) NULL,
	[AmountPastDue] [char](9) NULL,
	[MonthlyPayment] [char](9) NULL,
	[PercentOfCreditAvailable] [char](3) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[TUCreditSummaryDescription]
(
	[TrackingNumber] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TUCustomerData]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TUCustomerData](
	[TrackingNumber] [int] NOT NULL,
	[NodeID] [int] NOT NULL,
	[PID] [int] NOT NULL,
	[SegmentType] [char](4) NULL,
	[SegmentLength] [int] NULL,
	[CustIDQualifier] [char](2) NULL,
	[CustomerIdentifier] [char](24) NULL,
	[Password] [char](8) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[TUCustomerData]
(
	[TrackingNumber] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TUDataAnalysis]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TUDataAnalysis](
	[TrackingNumber] [int] NOT NULL,
	[NodeID] [int] NOT NULL,
	[PID] [int] NOT NULL,
	[SegmentType] [char](4) NULL,
	[SegmentLength] [int] NULL,
	[IDCustNumQualifier] [int] NULL,
	[InvalidFormat] [int] NULL,
	[SoundexCheck] [int] NULL,
	[LastNameCheck] [int] NULL,
	[FirstNameCheck] [int] NULL,
	[MiddleNameCheck] [int] NULL,
	[SSNCheck] [int] NULL,
	[DoBCheck] [int] NULL,
	[GenderCheck] [int] NULL,
	[EyeColorCheck] [int] NULL,
	[ExpirationDateCheck] [int] NULL,
	[MatchEvaluation] [char](2) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[TUDataAnalysis]
(
	[TrackingNumber] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TUDeceasedInformation]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TUDeceasedInformation](
	[TrackingNumber] [int] NOT NULL,
	[NodeID] [int] NOT NULL,
	[PID] [int] NOT NULL,
	[SegmentType] [char](4) NULL,
	[SegmentLength] [int] NULL,
	[MessageCode] [char](6) NULL,
	[SourceIndicator] [char](1) NULL,
	[LastName] [char](15) NULL,
	[FirstName] [char](15) NULL,
	[CityLastResidency] [char](27) NULL,
	[StateLastResidency] [char](2) NULL,
	[ZIPCodeLastResidency] [char](10) NULL,
	[CityLocationOfPayments] [char](27) NULL,
	[StateLocationOfPayments] [char](2) NULL,
	[ZipLocationOfPayments] [char](10) NULL,
	[DateOfBirthOfDeceased] [datetime] NULL,
	[DateOfDeath] [datetime] NULL,
	[DeceasedInfoFileSearched] [char](1) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[TUDeceasedInformation]
(
	[TrackingNumber] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TUDecisionSystemsCustomerBranch]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TUDecisionSystemsCustomerBranch](
	[TrackingNumber] [int] NOT NULL,
	[NodeID] [int] NOT NULL,
	[PID] [int] NOT NULL,
	[SegmentType] [char](4) NULL,
	[SegmentLength] [int] NULL,
	[BranchID] [char](1) NULL,
	[BranchType] [char](2) NULL,
	[ClientUse1] [char](2) NULL,
	[ClientUse2] [char](2) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[TUDecisionSystemsCustomerBranch]
(
	[TrackingNumber] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TUDecisionSystemsCustomInformation]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TUDecisionSystemsCustomInformation](
	[TrackingNumber] [int] NOT NULL,
	[NodeID] [int] NOT NULL,
	[PID] [int] NOT NULL,
	[SegmentType] [char](4) NULL,
	[SegmentLength] [int] NULL,
	[InputType] [char](2) NULL,
	[CustomInput] [char](24) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[TUDecisionSystemsCustomInformation]
(
	[TrackingNumber] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TUDecisionSystemsResponse]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TUDecisionSystemsResponse](
	[TrackingNumber] [int] NOT NULL,
	[NodeID] [int] NOT NULL,
	[PID] [int] NOT NULL,
	[SegmentType] [char](4) NULL,
	[SegmentLength] [int] NULL,
	[ReferanceNumber] [char](12) NULL,
	[DecisionClass] [char](1) NULL,
	[DecisionText] [char](1) NULL,
	[Level] [int] NULL,
	[LevelCode] [char](1) NULL,
	[TimeStamp] [int] NULL,
	[MaximumLevel] [int] NULL,
	[LevelReasons] [char](44) NULL,
	[DSReasons] [char](44) NULL,
	[CreditLimit] [int] NULL,
	[BureauID] [int] NULL,
	[CreditBureauErrorCode] [char](5) NULL,
	[CreditDataStatus] [char](1) NULL,
	[AccountNumber] [char](24) NULL,
	[CriteriaName] [char](6) NULL,
	[SpecialUse] [char](1) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[TUDecisionSystemsResponse]
(
	[TrackingNumber] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TUDefaults]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TUDefaults](
	[DefaultID] [int] NOT NULL,
	[DefaultName] [char](50) NULL,
	[URL] [char](50) NOT NULL,
	[Port] [int] NOT NULL,
	[BureauCode] [char](2) NOT NULL,
	[SubBureauCode] [char](2) NOT NULL,
	[IndustryCode] [char](2) NOT NULL,
	[MemberCode] [char](8) NOT NULL,
	[Password] [char](4) NOT NULL,
	[CertName] [char](50) NOT NULL,
	[ProductCode1] [char](5) NOT NULL,
	[ProductCode2] [char](5) NULL,
	[GeoCode] [bit] NOT NULL,
	[HAWK] [bit] NOT NULL,
	[InquiryAnalysis] [bit] NOT NULL,
	[LOOK] [bit] NOT NULL,
	[OFAC] [bit] NOT NULL,
	[PhoneAppend] [bit] NOT NULL,
	[ScoreModel] [char](5) NULL,
	[TransAlert] [bit] NOT NULL,
	[Test] [char](1) NOT NULL,
	[SPPreapproval] [char](50) NULL,
	[SPProspectTrades] [char](50) NULL,
	[PullHumanReadable] [char](1) NULL,
	[VendorID] [char](10) NULL,
 CONSTRAINT [PK__TUDefaults__373B3228] PRIMARY KEY CLUSTERED 
(
	[DefaultID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TUEdit]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TUEdit](
	[TrackingNumber] [int] NOT NULL,
	[NodeID] [int] NOT NULL,
	[PID] [int] NOT NULL,
	[SegmentType] [char](4) NULL,
	[SegmentLength] [int] NULL,
	[SubjectIdentifier] [int] NULL,
	[OrigionalValue] [char](5) NULL,
	[EditCodeNumber] [char](3) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[TUEdit]
(
	[TrackingNumber] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TUEmployment]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TUEmployment](
	[TrackingNumber] [int] NOT NULL,
	[NodeID] [int] NOT NULL,
	[PID] [int] NOT NULL,
	[SegmentType] [char](4) NULL,
	[SegmentLength] [int] NULL,
	[EmployerName] [char](35) NULL,
	[SourceIndicator] [char](1) NULL,
	[Occupation] [char](22) NULL,
	[DateHired] [datetime] NULL,
	[DateSeparated] [datetime] NULL,
	[DateVerifiedReported] [datetime] NULL,
	[DateVerifiedReportedCode] [char](1) NULL,
	[Income] [char](9) NULL,
	[PayBasis] [char](1) NULL,
	[LengthOfEmployment] [char](4) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[TUEmployment]
(
	[TrackingNumber] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TUEnds]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TUEnds](
	[TrackingNumber] [int] NOT NULL,
	[NodeID] [int] NOT NULL,
	[PID] [int] NOT NULL,
	[SegmentType] [char](4) NULL,
	[SegmentLength] [int] NULL,
	[TotalNumberOfSegments] [char](3) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[TUEnds]
(
	[TrackingNumber] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TUEndUsage]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TUEndUsage](
	[TrackingNumber] [int] NOT NULL,
	[NodeID] [int] NOT NULL,
	[PID] [int] NOT NULL,
	[SegmentType] [char](4) NULL,
	[EndUserName] [char](2) NULL,
	[PermissiblePurposeCode] [char](2) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[TUEndUsage]
(
	[TrackingNumber] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TUErrorCode]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TUErrorCode](
	[TrackingNumber] [int] NOT NULL,
	[NodeID] [int] NOT NULL,
	[PID] [int] NOT NULL,
	[SegmentType] [char](4) NULL,
	[SegmentLength] [int] NULL,
	[SubjectIdentifier] [int] NULL,
	[ErrorCodeNumber] [char](9) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[TUErrorCode]
(
	[TrackingNumber] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TUErrorControl]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TUErrorControl](
	[TrackingNumber] [int] NOT NULL,
	[NodeID] [int] NOT NULL,
	[PID] [int] NOT NULL,
	[SegmentType] [char](4) NULL,
	[SegmentLength] [int] NULL,
	[VersionSwitch] [int] NULL,
	[CountryCode] [char](1) NULL,
	[LanguageIndicator] [int] NULL,
	[UserReferanceNumber] [char](24) NULL,
	[BureauMarket] [int] NULL,
	[BureauSubmarket] [char](2) NULL,
	[IndustryCode] [char](2) NULL,
	[MemberCode] [char](8) NULL,
	[TransactionDate] [datetime] NULL,
	[TransactionTime] [char](6) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[TUErrorControl]
(
	[TrackingNumber] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TUErrorText]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TUErrorText](
	[TrackingNumber] [int] NOT NULL,
	[NodeID] [int] NOT NULL,
	[PID] [int] NOT NULL,
	[SegmentType] [char](4) NULL,
	[SegmentLength] [int] NULL,
	[SubjectIdentifier] [int] NULL,
	[ErrorCodeNumber] [char](3) NULL,
	[ErrorDescription] [char](79) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[TUErrorText]
(
	[TrackingNumber] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TUExtendedAddress]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TUExtendedAddress](
	[TrackingNumber] [int] NOT NULL,
	[NodeID] [int] NOT NULL,
	[PID] [int] NOT NULL,
	[SegmentType] [char](4) NULL,
	[SegmentLength] [int] NULL,
	[SourceIndicator] [char](1) NULL,
	[AddressQualifier] [char](1) NULL,
	[StreetAddress] [char](7) NULL,
	[CityName] [char](27) NULL,
	[State] [char](2) NULL,
	[ZipCode] [char](1) NULL,
	[DateReported] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[TUExtendedAddress]
(
	[TrackingNumber] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TUFACT]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TUFACT](
	[TrackingNumber] [int] NOT NULL,
	[NodeID] [int] NOT NULL,
	[PID] [int] NOT NULL,
	[SegmentType] [char](4) NULL,
	[SegmentLength] [int] NULL,
	[SubscriberShortName] [char](12) NULL,
	[SubscriberAreaCode] [char](3) NULL,
	[SubscriberPhoneNumber] [char](7) NULL,
	[AccountType] [char](1) NULL,
	[AccountNumber] [char](3) NULL,
	[DateOfLastActivity] [datetime] NULL,
	[TradeStatus] [char](3) NULL,
	[AvailableCredit] [char](9) NULL,
	[NewTradeIndicator] [char](1) NULL,
	[DebtCounselingIndicator] [char](3) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[TUFACT]
(
	[TrackingNumber] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TUFACTInquiry]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TUFACTInquiry](
	[TrackingNumber] [int] NOT NULL,
	[NodeID] [int] NOT NULL,
	[PID] [int] NOT NULL,
	[SegmentType] [char](4) NULL,
	[SegmentLength] [int] NULL,
	[SubscriberName] [char](24) NULL,
	[SubscriberAreaCode] [char](3) NULL,
	[SubscriberPhoneNumber] [char](7) NULL,
	[Extension] [char](5) NULL,
	[LoanType] [char](2) NULL,
	[DateOfInquiry] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[TUFACTInquiry]
(
	[TrackingNumber] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TUFACTSpecialIndicators]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TUFACTSpecialIndicators](
	[TrackingNumber] [int] NOT NULL,
	[NodeID] [int] NOT NULL,
	[PID] [int] NOT NULL,
	[SegmentType] [char](4) NULL,
	[SegmentLength] [int] NULL,
	[SubjectDeceased] [char](1) NULL,
	[LastActivityType] [char](1) NULL,
	[DateOfLastActivity] [datetime] NULL,
	[NumberOfTrades] [int] NULL,
	[NumberOfInquiries] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[TUFACTSpecialIndicators]
(
	[TrackingNumber] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TUFutureAddress]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TUFutureAddress](
	[TrackingNumber] [int] NOT NULL,
	[NodeID] [int] NOT NULL,
	[PID] [int] NOT NULL,
	[SegmentType] [char](4) NULL,
	[HouseNumber] [char](1) NULL,
	[Predirectional] [char](2) NULL,
	[StreetType] [char](2) NULL,
	[ApartmentUnitNumber] [char](5) NULL,
	[CityName] [char](27) NULL,
	[State] [char](2) NULL,
	[ZipCode] [char](1) NULL,
	[LengthOfResidence] [char](4) NULL,
	[ResidentialStatus] [char](1) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[TUFutureAddress]
(
	[TrackingNumber] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TUGeoCode]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TUGeoCode](
	[TrackingNumber] [int] NOT NULL,
	[NodeID] [int] NOT NULL,
	[PID] [int] NOT NULL,
	[SegmentType] [char](4) NULL,
	[SegmentLength] [int] NULL,
	[AddressIndicator] [char](1) NULL,
	[ZipCode] [char](9) NULL,
	[GEOStatus] [char](2) NULL,
	[BlockGroupStatus] [char](1) NULL,
	[CensusTractStatus] [char](1) NULL,
	[MSACode] [int] NULL,
	[StateCode] [char](2) NULL,
	[CountyCode] [char](3) NULL,
	[CensusTractCode] [char](4) NULL,
	[CensusTractSuffix] [char](2) NULL,
	[BlockCode] [char](1) NULL,
	[Latitude] [char](8) NULL,
	[Longitude] [char](8) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[TUGeoCode]
(
	[TrackingNumber] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TUGLANCETrade]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TUGLANCETrade](
	[TrackingNumber] [int] NOT NULL,
	[NodeID] [int] NOT NULL,
	[PID] [int] NOT NULL,
	[SegmentType] [char](4) NULL,
	[SegmentLength] [int] NULL,
	[IndustryCode] [char](2) NULL,
	[MemberCode] [char](8) NULL,
	[SubscriberLongName] [char](24) NULL,
	[AccountType] [char](1) NULL,
	[AccountNumber] [char](24) NULL,
	[AccountDesignator] [char](1) NULL,
	[DateOpened] [datetime] NULL,
	[DateVerified] [datetime] NULL,
	[TrdVerificIndic] [char](1) NULL,
	[DateClosed] [datetime] NULL,
	[DateClosedIndicator] [char](1) NULL,
	[DatePaidOut] [datetime] NULL,
	[DateOfLastActivity] [datetime] NULL,
	[CurrentMannerOfPayment] [char](2) NULL,
	[TradeCurrency] [char](1) NULL,
	[Balance] [char](9) NULL,
	[HighCredit] [char](9) NULL,
	[CreditLimit] [char](9) NULL,
	[TermsDuration] [char](3) NULL,
	[TermsFrequencyOfPayment] [char](1) NULL,
	[TermsAmountOfPayment] [char](9) NULL,
	[Collateral] [char](36) NULL,
	[LoanType] [char](2) NULL,
	[RemarksCode] [char](3) NULL,
	[AmountPastDue] [char](9) NULL,
	[NumberOfPaymentsPastDue] [int] NULL,
	[MaximumDelinquencyAmount] [char](9) NULL,
	[MaximumDelinquencyDate] [datetime] NULL,
	[MaximumDelinquencyMOP] [char](2) NULL,
	[PaymentPatternStartDate] [datetime] NULL,
	[PaymentPattern] [char](48) NULL,
	[NumberOfMonthsReviewed] [int] NULL,
	[Times3DaysLate] [char](2) NULL,
	[Times6DaysLate] [char](2) NULL,
	[Times9DaysLate] [char](2) NULL,
	[HistCntrsVerificIndic] [char](1) NULL,
	[DateReported] [datetime] NULL,
	[PurgeDate] [datetime] NULL,
	[SuppressionDate] [datetime] NULL,
	[SuppressionIndicator] [char](3) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[TUGLANCETrade]
(
	[TrackingNumber] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TUIdentification]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TUIdentification](
	[TrackingNumber] [int] NOT NULL,
	[NodeID] [int] NOT NULL,
	[PID] [int] NOT NULL,
	[SegmentType] [char](4) NULL,
	[SegmentLength] [int] NULL,
	[SourceIndicator] [char](1) NULL,
	[IDType] [char](2) NULL,
	[IDNumberOrValue] [char](3) NULL,
	[DateOfExpiration] [datetime] NULL,
	[StateOfIssuance] [char](2) NULL,
	[DateOfIssue] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[TUIdentification]
(
	[TrackingNumber] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TUIDMDefaults]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TUIDMDefaults](
	[DefaultsId] [int] NULL,
	[MessageType] [char](1) NULL,
	[inquirySource] [varchar](10) NULL,
	[partnerId] [varchar](10) NULL,
	[clientId] [varchar](10) NULL,
	[lenderId] [varchar](10) NULL,
	[customerId] [char](6) NULL,
	[programId] [char](4) NULL,
	[channelId] [char](1) NULL,
	[agentId] [varchar](10) NULL,
	[dealerId] [varchar](10) NULL,
	[URI] [varchar](50) NULL,
	[URL] [varchar](50) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TUInquiry]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TUInquiry](
	[TrackingNumber] [int] NOT NULL,
	[NodeID] [int] NOT NULL,
	[PID] [int] NOT NULL,
	[SegmentType] [char](4) NULL,
	[SegmentLength] [int] NULL,
	[BureauMarket] [int] NULL,
	[BureauSubmarket] [char](2) NULL,
	[IndustryCode] [char](2) NULL,
	[MemberCode] [char](8) NULL,
	[SubscriberName] [char](24) NULL,
	[InquiryType] [char](1) NULL,
	[LoanType] [char](2) NULL,
	[LoanAmount] [char](9) NULL,
	[DateOfInquiry] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[TUInquiry]
(
	[TrackingNumber] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TUInquiryHistory]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TUInquiryHistory](
	[TrackingNumber] [int] NOT NULL,
	[NodeID] [int] NOT NULL,
	[PID] [int] NOT NULL,
	[SegmentType] [char](4) NULL,
	[SegmentLength] [int] NULL,
	[MessageCode] [char](6) NULL,
	[AddressMatchFlag] [char](1) NULL,
	[NumTimeInputUseOnOthrInq] [char](3) NULL,
	[ThresholdChosen] [char](2) NULL,
	[TimeFrameOfOccurrences] [char](2) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[TUInquiryHistory]
(
	[TrackingNumber] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TULookUpRequest]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TULookUpRequest](
	[TrackingNumber] [int] NOT NULL,
	[NodeID] [int] NOT NULL,
	[PID] [int] NOT NULL,
	[SegmentType] [char](4) NULL,
	[SegmentLength] [int] NULL,
	[SegmentIndicator] [char](2) NULL,
	[SegmentDecoded] [char](2) NULL,
	[BureauMarket] [char](2) NULL,
	[BureauSubmarket] [char](2) NULL,
	[IndustryCode] [char](2) NULL,
	[MemberCode] [char](8) NULL,
	[SubscriberName] [char](24) NULL,
	[MethodOfContact] [char](1) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[TULookUpRequest]
(
	[TrackingNumber] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TUManualApproval]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TUManualApproval](
	[TrackingNum] [int] NOT NULL,
	[Category] [char](2) NULL,
	[ReasonCode] [char](32) NOT NULL,
	[Description] [char](200) NULL,
	[ActionCode] [char](10) NULL,
	[DataField] [char](10) NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
 CONSTRAINT [PK_TUManualApproval] PRIMARY KEY NONCLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[TUManualApproval]
(
	[TrackingNum] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TUMessageCode]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TUMessageCode](
	[TrackingNumber] [int] NOT NULL,
	[NodeID] [int] NOT NULL,
	[PID] [int] NOT NULL,
	[SegmentType] [char](4) NULL,
	[SegmentLength] [int] NULL,
	[MessCode] [char](6) NULL,
	[SourceIndicator] [char](1) NULL,
	[AddressMatchFlag] [char](1) NULL,
	[POBAppNumPhoneIndicator] [char](1) NULL,
	[POBAppNumPhoneNum] [char](10) NULL,
	[ThresholdNumber] [char](3) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[TUMessageCode]
(
	[TrackingNumber] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TUMessageText]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TUMessageText](
	[TrackingNumber] [int] NOT NULL,
	[NodeID] [int] NOT NULL,
	[PID] [int] NOT NULL,
	[SegmentType] [char](4) NULL,
	[SegmentLength] [int] NULL,
	[MessageCode] [char](6) NULL,
	[ActualMessageLength] [int] NULL,
	[CurrentSegmentNumber] [int] NULL,
	[TotalSegmentNumber] [int] NULL,
	[ThresholdNumber] [char](3) NULL,
	[MessageText] [char](15) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[TUMessageText]
(
	[TrackingNumber] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TUMileage_New]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TUMileage_New](
	[TrackingNumber] [int] NOT NULL,
	[NodeID] [int] NOT NULL,
	[PID] [int] NOT NULL,
	[SegmentType] [char](4) NULL,
	[SegmentLength] [int] NULL,
	[SourceIndicator] [char](1) NULL,
	[HomeVSBizPhoneNumMileage] [char](8) NULL,
	[HomePhoneVSBizZIPMileage] [char](8) NULL,
	[HomeZipVSBizPhoneMileage] [char](8) NULL,
	[HomeVSBizZipMileage] [char](8) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[TUMileage_New]
(
	[TrackingNumber] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TUMileage_Old]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TUMileage_Old](
	[TrackingNumber] [int] NOT NULL,
	[NodeID] [int] NOT NULL,
	[PID] [int] NOT NULL,
	[SegmentType] [char](4) NULL,
	[SegmentLength] [int] NULL,
	[SourceIndicator] [char](1) NULL,
	[MaxMileage] [char](8) NULL,
	[MaxMileageIndicator] [int] NULL,
	[MinMileage] [char](8) NULL,
	[MinMileageIndicator] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[TUMileage_Old]
(
	[TrackingNumber] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TUMiscellaneousStatement]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TUMiscellaneousStatement](
	[TrackingNumber] [int] NOT NULL,
	[NodeID] [int] NOT NULL,
	[PID] [int] NOT NULL,
	[SegmentType] [char](4) NULL,
	[SegmentLength] [int] NULL,
	[Information] [char](100) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[TUMiscellaneousStatement]
(
	[TrackingNumber] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TUModelData]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TUModelData](
	[TrackingNumber] [int] NOT NULL,
	[NodeID] [int] NOT NULL,
	[PID] [int] NOT NULL,
	[SegmentType] [char](4) NULL,
	[ProductCode] [char](5) NULL,
	[ModelAttributeID] [char](8) NULL,
	[ModelAttributeValue] [char](2) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[TUModelData]
(
	[TrackingNumber] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TUName]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TUName](
	[TrackingNumber] [int] NOT NULL,
	[NodeID] [int] NOT NULL,
	[PID] [int] NOT NULL,
	[SegmentType] [char](4) NULL,
	[SegmentLength] [int] NULL,
	[SourceIndicator] [char](1) NULL,
	[NameIndicator] [char](1) NULL,
	[NameType] [char](1) NULL,
	[LastName] [char](25) NULL,
	[FirstName] [char](15) NULL,
	[MiddleName] [char](15) NULL,
	[Prefix] [char](3) NULL,
	[Suffix] [char](3) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[TUName]
(
	[TrackingNumber] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TUNodes]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TUNodes](
	[TrackingNum] [int] NOT NULL,
	[NodeID] [int] NOT NULL,
	[PID] [int] NOT NULL,
	[NodeDataType] [char](1) NOT NULL,
	[ChildDataType] [char](1) NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[TUNodes]
(
	[TrackingNum] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TUNumberOf]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TUNumberOf](
	[TrackingNumber] [int] NOT NULL,
	[NodeID] [int] NOT NULL,
	[PID] [int] NOT NULL,
	[SegmentType] [char](4) NULL,
	[SegmentLength] [int] NULL,
	[NumberType] [int] NULL,
	[Number] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[TUNumberOf]
(
	[TrackingNumber] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TUOptionalRequest]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TUOptionalRequest](
	[TrackingNumber] [int] NOT NULL,
	[NodeID] [int] NOT NULL,
	[PID] [int] NOT NULL,
	[SegmentType] [char](4) NULL,
	[OwningBureauIDCreditFile] [char](1) NULL,
	[ErrorTextSegmentRequest] [char](1) NULL,
	[EditRespSegmentReqed] [char](1) NULL,
	[TrdMOPTotalsSegmentReqed] [char](1) NULL,
	[SummarySegmentRequested] [char](1) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[TUOptionalRequest]
(
	[TrackingNumber] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TUOutputDelivery]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TUOutputDelivery](
	[TrackingNumber] [int] NOT NULL,
	[NodeID] [int] NOT NULL,
	[PID] [int] NOT NULL,
	[SegmentType] [char](4) NULL,
	[TypeOfOutputRequested] [char](2) NULL,
	[FormType] [char](2) NULL,
	[DistributionMethod] [char](3) NULL,
	[OutputBlockSizeRequested] [char](1) NULL,
	[AddressToDeliver] [char](5) NULL,
	[TurnaroundTime] [char](2) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[TUOutputDelivery]
(
	[TrackingNumber] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TUOwningBureauIdentification]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TUOwningBureauIdentification](
	[TrackingNumber] [int] NOT NULL,
	[NodeID] [int] NOT NULL,
	[PID] [int] NOT NULL,
	[SegmentType] [char](4) NULL,
	[SegmentLength] [int] NULL,
	[BureauName] [char](60) NULL,
	[BureauAddress] [char](50) NULL,
	[BureauCityStateZip] [char](30) NULL,
	[BureauTelephoneNumber] [char](30) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[TUOwningBureauIdentification]
(
	[TrackingNumber] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TUOwningBureauIdentification_URL]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TUOwningBureauIdentification_URL](
	[TrackingNumber] [int] NOT NULL,
	[NodeID] [int] NOT NULL,
	[PID] [int] NOT NULL,
	[SegmentType] [char](4) NULL,
	[SegmentLength] [int] NULL,
	[BureauName] [char](5) NULL,
	[BureauAddress] [char](4) NULL,
	[BureauCityStateZip] [char](29) NULL,
	[BureauTelephoneNumber] [char](22) NULL,
	[BureauAdverseActionURL] [char](5) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[TUOwningBureauIdentification_URL]
(
	[TrackingNumber] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TUPersonalInformation]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TUPersonalInformation](
	[TrackingNumber] [int] NOT NULL,
	[NodeID] [int] NOT NULL,
	[PID] [int] NOT NULL,
	[SegmentType] [char](4) NULL,
	[SegmentLength] [int] NULL,
	[SourceIndicator] [char](1) NULL,
	[SocialSecurityNumber] [char](9) NULL,
	[DateOfBirth] [datetime] NULL,
	[Age] [char](3) NULL,
	[Gender] [char](1) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[TUPersonalInformation]
(
	[TrackingNumber] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TUPhoneNumber]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TUPhoneNumber](
	[TrackingNumber] [int] NOT NULL,
	[NodeID] [int] NOT NULL,
	[PID] [int] NOT NULL,
	[SegmentType] [char](4) NULL,
	[SegmentLength] [int] NULL,
	[SourceIndicator] [char](1) NULL,
	[PhoneQualifier] [char](1) NULL,
	[AvailabilityIndicator] [char](1) NULL,
	[PhoneType] [char](2) NULL,
	[AreaCode] [char](3) NULL,
	[TelephoneNumber] [char](7) NULL,
	[Extension] [char](5) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[TUPhoneNumber]
(
	[TrackingNumber] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TUPointsSummary]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TUPointsSummary](
	[TrackingNumber] [int] NOT NULL,
	[NodeID] [int] NOT NULL,
	[PID] [int] NOT NULL,
	[SegmentType] [char](4) NULL,
	[SegmentLength] [int] NULL,
	[FirstNameSources] [char](2) NULL,
	[LastNameSources] [char](2) NULL,
	[AddressSources] [char](2) NULL,
	[PreviousAddressSources] [char](2) NULL,
	[AreaCodeSources] [char](2) NULL,
	[PhoneNumberSources] [char](2) NULL,
	[SSNSources] [char](2) NULL,
	[TotalSources] [char](2) NULL,
	[FirstNameSummary] [char](8) NULL,
	[LastNameSummary] [char](8) NULL,
	[CurrentAddressSummary] [char](8) NULL,
	[PreviousAddressSummary] [char](8) NULL,
	[AreaCodeSummary] [char](8) NULL,
	[PhoneNumberSummary] [char](8) NULL,
	[SSNSummary] [char](8) NULL,
	[TotalMatchSummary] [char](8) NULL,
	[FirstNameTotalPoints] [char](2) NULL,
	[LastNameTotalPoints] [char](2) NULL,
	[CurrAddressTotalPoints] [char](2) NULL,
	[PrevAddressTotalPoints] [char](2) NULL,
	[AreaCodeTotalPoints] [char](2) NULL,
	[PhoneNumberTotalPoints] [char](2) NULL,
	[SSNTotalPoints] [char](2) NULL,
	[TotalPoints] [char](2) NULL,
	[FirstNamePercent] [char](3) NULL,
	[LastNamePercent] [char](3) NULL,
	[CurrentAddressPercent] [char](3) NULL,
	[PreviousAddressPercent] [char](3) NULL,
	[AreaCodePercent] [char](3) NULL,
	[PhoneNumberPercent] [char](3) NULL,
	[SSNPercent] [char](3) NULL,
	[TotalPercent] [char](3) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[TUPointsSummary]
(
	[TrackingNumber] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TUProductHeader]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TUProductHeader](
	[TrackingNumber] [int] NOT NULL,
	[NodeID] [int] NOT NULL,
	[PID] [int] NOT NULL,
	[SegmentType] [char](4) NULL,
	[SegmentLength] [int] NULL,
	[ProductCode] [char](5) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[TUProductHeader]
(
	[TrackingNumber] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TUProductHeaderWResult]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TUProductHeaderWResult](
	[TrackingNumber] [int] NOT NULL,
	[NodeID] [int] NOT NULL,
	[PID] [int] NOT NULL,
	[SegmentType] [char](4) NULL,
	[SegmentLength] [int] NULL,
	[ProductCode] [char](5) NULL,
	[ProductResults] [char](3) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[TUProductHeaderWResult]
(
	[TrackingNumber] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TUProductHeaderWResultBreakout]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TUProductHeaderWResultBreakout](
	[TrackingNumber] [int] NOT NULL,
	[NodeID] [int] NOT NULL,
	[PID] [int] NOT NULL,
	[SegmentType] [char](4) NULL,
	[SegmentLength] [int] NULL,
	[ProductCode] [char](5) NULL,
	[ProdtResults1PhoneStat] [char](1) NULL,
	[ProdResults2AddressStat] [char](1) NULL,
	[ProdResults3AddressStat] [char](1) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[TUProductHeaderWResultBreakout]
(
	[TrackingNumber] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TUPublicRecord]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TUPublicRecord](
	[TrackingNumber] [int] NOT NULL,
	[NodeID] [int] NOT NULL,
	[PID] [int] NOT NULL,
	[SegmentType] [char](4) NULL,
	[SegmentLength] [int] NULL,
	[IndustryCode] [char](2) NULL,
	[MemberCode] [char](8) NULL,
	[PublicRecordType] [char](2) NULL,
	[DocketNumber] [char](11) NULL,
	[Attorney] [char](36) NULL,
	[Plaintiff] [char](36) NULL,
	[DateReported] [datetime] NULL,
	[DatePaid] [datetime] NULL,
	[Assets] [char](9) NULL,
	[LiabilitiesAmount] [char](9) NULL,
	[AccountDesignator] [char](1) NULL,
	[CourtType] [char](2) NULL,
	[CourtLocationCity] [char](27) NULL,
	[CourtLocationState] [char](2) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[TUPublicRecord]
(
	[TrackingNumber] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TURawReply]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TURawReply](
	[TrackingNumber] [int] NULL,
	[RawReply] [text] NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[TURawReply]
(
	[TrackingNumber] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TURegionAnalysis]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TURegionAnalysis](
	[TrackingNumber] [int] NOT NULL,
	[NodeID] [int] NOT NULL,
	[PID] [int] NOT NULL,
	[SegmentType] [char](4) NULL,
	[SegmentLength] [int] NULL,
	[SourceIndicator] [char](1) NULL,
	[ZipCodeVSCity] [char](1) NULL,
	[ZipCodeVSState] [char](1) NULL,
	[PhoneNumberVSState] [char](1) NULL,
	[PhoneNumberVSZipCode] [char](1) NULL,
	[Mileage] [char](8) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[TURegionAnalysis]
(
	[TrackingNumber] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TUReply]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TUReply](
	[TrackingNumber] [int] NOT NULL,
	[URL] [char](255) NULL,
	[URI] [char](1000) NULL,
	[ServiceName] [char](30) NULL,
	[DateOfInquiry] [datetime] NULL,
	[DefaultsID] [char](30) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [TrackingNum]    Script Date: 1/4/2025 10:20:30 AM ******/
CREATE UNIQUE CLUSTERED INDEX [TrackingNum] ON [IMS].[TUReply]
(
	[TrackingNumber] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TUReportingSubscriber]    Script Date: 1/4/2025 10:20:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TUReportingSubscriber](
	[TrackingNumber] [int] NOT NULL,
	[NodeID] [int] NOT NULL,
	[PID] [int] NOT NULL,
	[SegmentType] [char](4) NULL,
	[IndustryCode] [char](2) NULL,
	[MemberCode] [char](8) NULL,
	[AccountNumber] [char](24) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[TUReportingSubscriber]
(
	[TrackingNumber] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TURequestAddonProduct]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TURequestAddonProduct](
	[TrackingNumber] [int] NOT NULL,
	[NodeID] [int] NOT NULL,
	[PID] [int] NOT NULL,
	[SegmentType] [char](4) NULL,
	[AddonProductCode] [char](5) NULL,
	[ProcessingRequest] [char](2) NULL,
	[ProductType] [char](1) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[TURequestAddonProduct]
(
	[TrackingNumber] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TURequestProduct1]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TURequestProduct1](
	[TrackingNumber] [int] NOT NULL,
	[NodeID] [int] NOT NULL,
	[PID] [int] NOT NULL,
	[SegmentType] [char](4) NULL,
	[ProductCode] [char](5) NULL,
	[BundleDefaultIndicator] [char](1) NULL,
	[SpecialtyCode] [char](2) NULL,
	[ProcessingRequest] [char](2) NULL,
	[InquiryType] [char](1) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[TURequestProduct1]
(
	[TrackingNumber] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TURequestProduct2]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TURequestProduct2](
	[TrackingNumber] [int] NOT NULL,
	[NodeID] [int] NOT NULL,
	[PID] [int] NOT NULL,
	[SegmentType] [char](4) NULL,
	[ProductCode] [char](5) NULL,
	[BundleDefaultIndicator] [char](1) NULL,
	[SpecialtyCode] [char](2) NULL,
	[ProcessingRequest] [char](2) NULL,
	[InquiryType] [char](1) NULL,
	[BureauMarket] [char](2) NULL,
	[BureauSubmarket] [char](2) NULL,
	[IndustryCode] [char](2) NULL,
	[MemberCode] [char](8) NULL,
	[SubscriberPassword] [char](4) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[TURequestProduct2]
(
	[TrackingNumber] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TUScoring]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TUScoring](
	[TrackingNumber] [int] NOT NULL,
	[NodeID] [int] NOT NULL,
	[PID] [int] NOT NULL,
	[SegmentType] [char](4) NULL,
	[SegmentLength] [int] NULL,
	[ProductCode] [char](5) NULL,
	[Sign] [char](1) NULL,
	[Score] [char](5) NULL,
	[ScoringIndicatorFlag] [char](1) NULL,
	[ScoreDerogatoryAlertFlag] [char](1) NULL,
	[FirstFactor] [char](3) NULL,
	[SecondFactor] [char](3) NULL,
	[ThirdFactor] [char](3) NULL,
	[FourthFactor] [char](3) NULL,
	[ScoreCardIndicator] [char](2) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[TUScoring]
(
	[TrackingNumber] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TUSegments]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TUSegments](
	[SegmentID] [char](4) NOT NULL,
	[SegmentName] [char](50) NOT NULL,
	[SegmentDBName] [char](50) NOT NULL
) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[TUSegments]
(
	[SegmentID] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TUSubjectHeader]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TUSubjectHeader](
	[TrackingNumber] [int] NOT NULL,
	[NodeID] [int] NOT NULL,
	[PID] [int] NOT NULL,
	[SegmentType] [char](4) NULL,
	[SegmentLength] [int] NULL,
	[SubjectIdentifier] [int] NULL,
	[FileNumber] [int] NULL,
	[FileHit] [char](1) NULL,
	[SSNMatchIndicator] [char](2) NULL,
	[ConsumerStatementIndic] [char](1) NULL,
	[BureauMarketFileControl] [char](2) NULL,
	[BureauSMFileControl] [char](2) NULL,
	[SuppressionIndicator] [char](1) NULL,
	[InFileSinceDate] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[TUSubjectHeader]
(
	[TrackingNumber] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TUSubjectHeaderSpecialProducts]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TUSubjectHeaderSpecialProducts](
	[TrackingNumber] [int] NOT NULL,
	[NodeID] [int] NOT NULL,
	[PID] [int] NOT NULL,
	[SegmentType] [char](4) NULL,
	[SegmentLength] [int] NULL,
	[SubjectIdentifier] [int] NULL,
	[FileNumber] [int] NULL,
	[ProductAction] [char](2) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[TUSubjectHeaderSpecialProducts]
(
	[TrackingNumber] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TUSubjectHeaderWMatchDetail]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TUSubjectHeaderWMatchDetail](
	[TrackingNumber] [int] NOT NULL,
	[NodeID] [int] NOT NULL,
	[PID] [int] NOT NULL,
	[SegmentType] [char](4) NULL,
	[SegmentLength] [int] NULL,
	[SubjectIdentifier] [int] NULL,
	[FileNumber] [int] NULL,
	[FileHit] [char](1) NULL,
	[SSNMatchIndicator] [char](2) NULL,
	[MatchIndicator] [char](1) NULL,
	[ConsumerStatementIndic] [char](1) NULL,
	[BureauMarketFileControl] [char](2) NULL,
	[BureauSMFileControl] [char](2) NULL,
	[SuppressionIndicator] [char](1) NULL,
	[InFileSinceDate] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[TUSubjectHeaderWMatchDetail]
(
	[TrackingNumber] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TUSubjectHeaderWMatchPhone]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TUSubjectHeaderWMatchPhone](
	[TrackingNumber] [int] NOT NULL,
	[NodeID] [int] NOT NULL,
	[PID] [int] NOT NULL,
	[SegmentType] [char](4) NULL,
	[SegmentLength] [int] NULL,
	[SubjectIdentifier] [int] NULL,
	[FileNumber] [int] NULL,
	[SubjectHitStatus] [char](1) NULL,
	[SubjectRestrictionStatus] [char](1) NULL,
	[SubjectCountry] [char](1) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[TUSubjectHeaderWMatchPhone]
(
	[TrackingNumber] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TUSubjectVerificationFraud]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TUSubjectVerificationFraud](
	[TrackingNumber] [int] NOT NULL,
	[NodeID] [int] NOT NULL,
	[PID] [int] NOT NULL,
	[SegmentType] [char](4) NULL,
	[SegmentLength] [int] NULL,
	[VerificationStatus] [char](2) NULL,
	[ResultsNameVerification] [char](2) NULL,
	[ResultsAddVerification] [char](2) NULL,
	[ResultsOfSSNVerification] [char](2) NULL,
	[ResultsOfDOBVerification] [char](2) NULL,
	[ResultSuffixVerification] [char](2) NULL,
	[MessageText] [char](48) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[TUSubjectVerificationFraud]
(
	[TrackingNumber] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TUSubjectVerificationOpenDB]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TUSubjectVerificationOpenDB](
	[TrackingNumber] [int] NOT NULL,
	[NodeID] [int] NOT NULL,
	[PID] [int] NOT NULL,
	[SegmentType] [char](4) NULL,
	[SegmentLength] [int] NULL,
	[FileSource] [char](2) NULL,
	[FileNumber] [int] NULL,
	[SubjectHitStatus] [char](2) NULL,
	[SubjectRestrictionStatus] [char](1) NULL,
	[PhoneStatus] [char](1) NULL,
	[AddressStatus] [char](1) NULL,
	[AddressType] [char](1) NULL,
	[FirstName] [char](2) NULL,
	[LastName] [char](2) NULL,
	[CurrentAddress] [char](2) NULL,
	[PreviousAddress] [char](2) NULL,
	[AreaCode] [char](2) NULL,
	[PhoneNumber] [char](2) NULL,
	[SSN] [char](2) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[TUSubjectVerificationOpenDB]
(
	[TrackingNumber] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TUSubscriberAddress]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TUSubscriberAddress](
	[TrackingNumber] [int] NOT NULL,
	[NodeID] [int] NOT NULL,
	[PID] [int] NOT NULL,
	[SegmentType] [char](4) NULL,
	[SegmentLength] [int] NULL,
	[SubscriberAddress1] [char](50) NULL,
	[SubscriberAddress2] [char](30) NULL,
	[City] [char](27) NULL,
	[State] [char](2) NULL,
	[ZipCode] [char](10) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[TUSubscriberAddress]
(
	[TrackingNumber] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TUTextStatement]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TUTextStatement](
	[TrackingNumber] [int] NOT NULL,
	[NodeID] [int] NOT NULL,
	[PID] [int] NOT NULL,
	[SegmentType] [char](4) NULL,
	[SegmentLength] [int] NULL,
	[ContentType] [char](3) NULL,
	[StatementIndentifier] [char](3) NULL,
	[CurrentSegmentNumber] [int] NULL,
	[TotalSegmentNumber] [int] NULL,
	[StatementText] [char](15) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[TUTextStatement]
(
	[TrackingNumber] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TUTIEScore]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TUTIEScore](
	[TrackingNumber] [int] NOT NULL,
	[NodeID] [int] NOT NULL,
	[PID] [int] NOT NULL,
	[SegmentType] [char](4) NULL,
	[SegmentLength] [int] NULL,
	[ProductCode] [char](5) NULL,
	[DebtToIncomePercIndic] [char](1) NULL,
	[DebtToIncomePercentage] [char](3) NULL,
	[LowRange] [int] NULL,
	[UpperRange] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[TUTIEScore]
(
	[TrackingNumber] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TUTrade]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TUTrade](
	[TrackingNumber] [int] NOT NULL,
	[NodeID] [int] NOT NULL,
	[PID] [int] NOT NULL,
	[SegmentType] [char](4) NULL,
	[SegmentLength] [int] NULL,
	[IndustryCode] [char](2) NULL,
	[MemberCode] [char](8) NULL,
	[SubscriberName] [char](24) NULL,
	[AccountType] [char](1) NULL,
	[AccountNumber] [char](24) NULL,
	[AccountDesignator] [char](1) NULL,
	[DateOpened] [datetime] NULL,
	[DateVerified] [datetime] NULL,
	[TrdVerificationIndic] [char](1) NULL,
	[DateClosed] [datetime] NULL,
	[DateClosedIndicator] [char](1) NULL,
	[DatePaidOut] [datetime] NULL,
	[DateOfLastActivity] [datetime] NULL,
	[CurrentMannerOfPayment] [char](2) NULL,
	[TradeCurrency] [char](1) NULL,
	[Balance] [char](9) NULL,
	[HighCredit] [char](9) NULL,
	[CreditLimit] [char](9) NULL,
	[TermsDuration] [char](3) NULL,
	[TermsFrequencyOfPayment] [char](1) NULL,
	[TermsAmountOfPayment] [char](9) NULL,
	[Collateral] [char](36) NULL,
	[LoanType] [char](2) NULL,
	[RemarksCode] [char](3) NULL,
	[AmountPastDue] [char](9) NULL,
	[NumberOfPaymentsPastDue] [int] NULL,
	[MaximumDelinquencyAmount] [char](9) NULL,
	[MaximumDelinquencyDate] [datetime] NULL,
	[MaximumDelinquencyMOP] [char](2) NULL,
	[PaymentPatternStartDate] [datetime] NULL,
	[PaymentPattern] [char](48) NULL,
	[NumberOfMonthsReviewed] [char](2) NULL,
	[Times30DaysLate] [char](2) NULL,
	[Times60DaysLate] [char](2) NULL,
	[Times90DaysLate] [char](2) NULL,
	[HistCntrsVerificIndic] [char](1) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[TUTrade]
(
	[TrackingNumber] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TUTradeMOPTotals]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TUTradeMOPTotals](
	[TrackingNumber] [int] NOT NULL,
	[NodeID] [int] NOT NULL,
	[PID] [int] NOT NULL,
	[SegmentType] [char](4) NULL,
	[SegmentLength] [int] NULL,
	[MOP99B9PCounter] [int] NULL,
	[MOP88A8D8R8PCounter] [int] NULL,
	[MOP7Counter] [int] NULL,
	[MOP5Counter] [int] NULL,
	[MOP4Counter] [int] NULL,
	[MOP3Counter] [int] NULL,
	[MOP2Counter] [int] NULL,
	[MOP1Counter] [int] NULL,
	[MOPCounter] [int] NULL,
	[AllOtherCounter] [int] NULL,
	[NumAccountsInDispute] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[TUTradeMOPTotals]
(
	[TrackingNumber] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TUTradeProspect]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TUTradeProspect](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[TrackingNum] [int] NULL,
	[LoanType] [char](10) NULL,
	[LoanSubType] [char](10) NULL,
	[ProductName] [char](100) NULL,
	[InstitutionName] [char](100) NULL,
	[Payment] [int] NULL,
	[Rate] [int] NULL,
	[Term] [smallint] NULL,
	[Balance] [int] NULL,
	[OrigBal] [int] NULL,
	[CreditLim] [int] NULL,
	[ExpireDate] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[TUTradeProspect]
(
	[TrackingNum] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TUTransactionControlInquiry]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TUTransactionControlInquiry](
	[TrackingNumber] [int] NOT NULL,
	[NodeID] [int] NOT NULL,
	[PID] [int] NOT NULL,
	[SegmentType] [char](4) NULL,
	[VersionSwitch] [char](1) NULL,
	[SpecialRoutingIndicator] [char](1) NULL,
	[CountryCode] [char](1) NULL,
	[LanguageIndicator] [char](8) NULL,
	[UserReferanceNumber] [char](24) NULL,
	[BureauMarket] [int] NULL,
	[BureauSubmarket] [char](2) NULL,
	[IndustryCode] [char](2) NULL,
	[MemberCode] [char](8) NULL,
	[SubscriberPassword] [char](4) NULL,
	[ContractualIndicator] [char](1) NULL,
	[PointOfSaleIndicator] [char](1) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[TUTransactionControlInquiry]
(
	[TrackingNumber] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TUTransactionControlResponce]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TUTransactionControlResponce](
	[TrackingNumber] [int] NOT NULL,
	[NodeID] [int] NOT NULL,
	[PID] [int] NOT NULL,
	[SegmentType] [char](4) NULL,
	[SegmentLength] [int] NULL,
	[VersionSwitch] [int] NULL,
	[CountryCode] [char](1) NULL,
	[LanguageIndicator] [int] NULL,
	[UserReferanceNumber] [char](24) NULL,
	[BureauMarket] [int] NULL,
	[BureauSubmarket] [char](2) NULL,
	[IndustryCode] [char](2) NULL,
	[MemberCode] [char](8) NULL,
	[TransactionDate] [datetime] NULL,
	[TransactionTime] [char](6) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[TUTransactionControlResponce]
(
	[TrackingNumber] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TUTransAlert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TUTransAlert](
	[TrackingNumber] [int] NOT NULL,
	[NodeID] [int] NOT NULL,
	[PID] [int] NOT NULL,
	[SegmentType] [char](4) NULL,
	[SegmentLength] [int] NULL,
	[AddressType] [char](1) NULL,
	[MessageType] [char](1) NULL,
	[AlertCondition] [char](1) NULL,
	[NumInquiriesInLast60Days] [char](2) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[TUTransAlert]
(
	[TrackingNumber] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TUVendorInformation]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TUVendorInformation](
	[TrackingNumber] [int] NOT NULL,
	[NodeID] [int] NOT NULL,
	[PID] [int] NOT NULL,
	[SegmentType] [char](4) NULL,
	[VendorName] [char](2) NULL,
	[VendorID] [char](1) NULL,
	[VendorReleaseNumber] [char](7) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[TUVendorInformation]
(
	[TrackingNumber] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TUWATCHSatisfaction]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TUWATCHSatisfaction](
	[TrackingNumber] [int] NOT NULL,
	[NodeID] [int] NOT NULL,
	[PID] [int] NOT NULL,
	[SegmentType] [char](4) NULL,
	[SegmentLength] [int] NULL,
	[SatisfactionCriteria] [char](3) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[TUWATCHSatisfaction]
(
	[TrackingNumber] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TUWATCHTrade]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TUWATCHTrade](
	[TrackingNumber] [int] NOT NULL,
	[NodeID] [int] NOT NULL,
	[PID] [int] NOT NULL,
	[SegmentType] [char](4) NULL,
	[SegmentLength] [int] NULL,
	[IndustryCode] [char](2) NULL,
	[MemberCode] [char](8) NULL,
	[SubscriberLongName] [char](24) NULL,
	[AccountType] [char](1) NULL,
	[AccountNumber] [char](24) NULL,
	[Balance] [char](9) NULL,
	[CurrentMannerOfPayment] [char](2) NULL,
	[CurrentAmountPastDue] [char](9) NULL,
	[PreviousMannerOfPayment] [char](2) NULL,
	[PreviousAmmountPastDue] [char](9) NULL,
	[RemarksCode] [char](3) NULL,
	[MethodOfContact] [char](1) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[TUWATCHTrade]
(
	[TrackingNumber] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TUYearOfIssuance]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TUYearOfIssuance](
	[TrackingNumber] [int] NOT NULL,
	[NodeID] [int] NOT NULL,
	[PID] [int] NOT NULL,
	[SegmentType] [char](4) NULL,
	[SegmentLength] [int] NULL,
	[IDQualifier] [char](2) NULL,
	[MessageCode] [char](6) NULL,
	[SourceIndicator] [char](1) NULL,
	[NumberOfYearsCovered] [char](2) NULL,
	[RangeOfYearsIssuedFrom] [int] NULL,
	[RangeOfYearsIssuedTo] [int] NULL,
	[StateCode] [char](2) NULL,
	[SignOfAgeObtainedFrom] [char](1) NULL,
	[AgeObtainedFrom] [char](2) NULL,
	[SignOfAgeObtainedTo] [char](1) NULL,
	[AgeObtainedTo] [char](2) NULL,
	[InssuanceYearStatus] [char](2) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[TUYearOfIssuance]
(
	[TrackingNumber] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[TUZipCode]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[TUZipCode](
	[TrackingNumber] [int] NOT NULL,
	[NodeID] [int] NOT NULL,
	[PID] [int] NOT NULL,
	[SegmentType] [char](4) NULL,
	[SegmentLength] [int] NULL,
	[SourceIndicator] [char](1) NULL,
	[ZipCodeQualifier] [char](2) NULL,
	[ZipCodeIndicator] [int] NULL,
	[ZipCodeType] [char](1) NULL,
	[ZipCode] [char](1) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE CLUSTERED INDEX [xTracking] ON [IMS].[TUZipCode]
(
	[TrackingNumber] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[udt_AccountTypes]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[udt_AccountTypes](
	[TrackingNum] [int] IDENTITY(1,1) NOT NULL,
	[TypeCode] [char](2) NULL,
	[Description] [char](40) NULL,
	[NewAccountCommand] [char](4) NULL,
	[JointOwnerLabel] [char](30) NULL,
	[JointOwnerTag] [char](20) NULL,
	[JointOwnerType] [char](30) NULL,
	[JointOwnerAssocCode] [char](2) NULL,
	[JointOwnerCommand] [char](4) NULL,
	[TaxCode] [char](1) NULL,
	[Department] [char](12) NULL,
	[NewMemberFee] [int] NULL,
	[StatementCycle] [smallint] NULL,
	[MemoNumber1] [int] NULL,
	[MemoText1] [char](60) NULL,
	[MemoExpireDays1] [int] NULL,
	[MemoNumber2] [int] NULL,
	[MemoText2] [char](60) NULL,
	[MemoExpireDays2] [int] NULL,
	[MemoNumber3] [int] NULL,
	[MemoText3] [char](60) NULL,
	[MemoExpireDays3] [int] NULL,
	[MemoNumber4] [int] NULL,
	[MemoText4] [char](60) NULL,
	[MemoExpireDays4] [int] NULL,
	[FlagNumber1] [smallint] NULL,
	[FlagType1] [char](1) NULL,
	[FlagLevel1] [char](1) NULL,
	[FlagValue1] [smallint] NULL,
	[FlagNumber2] [smallint] NULL,
	[FlagType2] [char](1) NULL,
	[FlagValue2] [smallint] NULL,
	[FlagLevel2] [char](1) NULL,
	[FlagNumber3] [smallint] NULL,
	[FlagType3] [char](1) NULL,
	[FlagValue3] [smallint] NULL,
	[FlagNumber4] [smallint] NULL,
	[FlagLevel3] [char](1) NULL,
	[FlagType4] [char](1) NULL,
	[FlagValue4] [smallint] NULL,
	[C24Memo] [int] NULL,
	[C24MemoText] [char](60) NULL,
	[FlagLevel4] [char](1) NULL,
	[CBCode] [char](4) NULL,
	[CBLogic] [smallint] NULL,
	[SetCBScore] [char](1) NULL,
	[MinPreApproval] [char](40) NULL,
	[AffinityCode] [char](2) NULL,
	[PreApproval] [char](40) NULL,
	[MaxPreApproval] [char](40) NULL,
	[MinAge] [int] NULL,
	[MaxAge] [int] NULL,
	[PODCommand] [char](4) NULL,
	[PODStartMemo] [int] NULL,
	[PODStopMemo] [int] NULL,
	[ServiceClass] [char](4) NULL,
	[HostCommand] [char](4) NULL,
	[AccountClass] [char](1) NULL,
	[ClassCode] [char](2) NULL,
	[SortOrder] [smallint] NULL,
	[JointTaxCode] [char](1) NULL,
	[RevocableTrustCode] [char](1) NULL,
	[UseTodayForDOB] [char](1) NULL,
	[RequiredTabs] [char](60) NULL,
	[DisabledTabs] [char](50) NULL,
	[W8TaxCode] [char](1) NULL,
	[AddSAV] [char](1) NULL,
	[AddDDA] [char](1) NULL,
	[AddOD] [char](1) NULL,
	[AddCC] [char](1) NULL,
	[AddOther] [char](1) NULL,
	[RequireID] [char](1) NULL,
	[ScreenLossAccounts] [char](1) NULL,
	[AllowEStatements] [char](1) NULL,
	[RequireSSN] [char](1) NULL,
	[NoScreen] [char](1) NULL,
	[RequireEmployment] [char](1) NULL,
	[PromptEmployment] [char](1) NULL,
	[AllowJoint] [char](1) NULL,
	[AllowPlastic] [char](1) NULL,
	[AllowODP] [char](1) NULL,
	[CBScreenNew] [char](1) NULL,
	[AllowIVR] [char](1) NULL,
	[CBScreenExisting] [char](1) NULL,
	[CalcPreapproval] [char](1) NULL,
	[PreapprovalFlags] [char](100) NULL,
	[RequireDocChecklist] [char](1) NULL,
	[DocChecklistName] [char](30) NULL,
	[AllowXferFund] [char](1) NULL,
	[AllowXferIVR] [char](1) NULL,
	[AllowXferOD] [char](1) NULL,
	[AllowPlasticCard] [char](1) NULL,
	[PromptMaidenName] [char](1) NULL,
	[PromptCourtName] [char](1) NULL,
	[PromptCaseNumber] [char](1) NULL,
	[PromptAffirmationDate] [char](1) NULL,
	[AutoConfirmEligibility] [char](1) NULL,
	[Category] [char](30) NULL,
	[PrimaryJointFlag] [char](1) NULL,
	[AutoAddJoint] [char](1) NULL,
	[HelpPage] [char](50) NULL,
	[Ref1] [char](8) NULL,
	[Ref2] [char](8) NULL,
	[Ref3] [char](8) NULL,
	[Ref4] [char](8) NULL,
	[MECHTag] [char](40) NULL,
	[TagBeginEnd] [char](1) NULL,
	[ByPassSalesTool] [char](1) NULL,
	[ScreenExcludeProducts] [char](20) NULL,
	[ValidTaxCodes] [char](10) NULL,
	[TaxIDTypes] [char](20) NULL,
	[PromptW8ReceivedDate] [char](1) NULL,
	[PromptTaxCountry] [char](1) NULL,
	[PromptForeignTIN] [char](1) NULL,
	[PromptNearestRel] [char](1) NULL,
	[MinPreApprovalExisting] [char](40) NULL,
	[Seller] [char](3) NULL,
	[BureauSetID] [int] NULL,
	[PledgeAmount] [int] NULL,
	[BureauSetIDExisting] [int] NULL,
 CONSTRAINT [PK_udt_AccountTypes] PRIMARY KEY CLUSTERED 
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[udt_ApprovalActions]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[udt_ApprovalActions](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[PreapproveCode] [varchar](10) NULL,
	[FlagNumber1] [smallint] NULL,
	[FlagType1] [char](1) NULL,
	[FlagLevel1] [varchar](5) NULL,
	[FlagValue1] [smallint] NULL,
	[FlagNumber2] [smallint] NULL,
	[FlagType2] [char](1) NULL,
	[FlagLevel2] [varchar](5) NULL,
	[FlagValue2] [smallint] NULL,
	[MemoNumber1] [int] NULL,
	[MemoLevel1] [varchar](5) NULL,
	[MemoText1] [varchar](60) NULL,
	[MemoExpireDays1] [int] NULL,
	[AccountTypes] [varchar](80) NULL,
 CONSTRAINT [PK_udt_ApprovalActions] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[udt_AssociateFlags]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[udt_AssociateFlags](
	[TrackingNum] [int] NOT NULL,
	[Sequence] [int] NOT NULL,
	[SLType] [char](1) NULL,
	[UniqueID] [char](10) NULL,
	[AssociateFlag] [char](1) NULL,
	[id] [int] IDENTITY(1,1) NOT NULL,
	[Type] [char](1) NULL,
	[AssociateFlagExistJO] [char](1) NULL,
	[AssociateFlagExistSubAccount] [char](1) NULL,
 CONSTRAINT [PK_udt_AssociateFlags] PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[udt_Beacon]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[udt_Beacon](
	[TrackingNum] [int] NOT NULL,
	[Sequence] [int] NOT NULL,
	[LowScore] [int] NULL,
	[HighScore] [int] NULL,
	[MultiLevelScore] [char](10) NULL,
	[PreapprovalFlags] [char](250) NULL,
	[APR] [char](10) NULL,
	[MinLimit] [char](10) NULL,
	[MaxLimit] [char](10) NULL,
	[MinTerm] [char](10) NULL,
	[MaxTerm] [char](10) NULL,
	[MinIncome] [char](10) NULL,
	[MaxIncome] [char](10) NULL,
	[CreditLimit] [char](10) NULL,
	[HighPaperGrade] [char](2) NULL,
	[LowPaperGrade] [char](2) NULL,
	[PaperGrade] [char](2) NULL,
	[LimitType] [char](1) NULL,
	[LimitPercent] [int] NULL,
	[TruncateInterval] [int] NULL,
	[PrescreenGroup] [smallint] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[udt_BeneficiaryTypes]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[udt_BeneficiaryTypes](
	[TrackingNum] [int] IDENTITY(1,1) NOT NULL,
	[BType] [char](10) NULL,
	[BenType] [char](1) NULL,
	[Description] [char](20) NULL,
	[AcctPlan] [char](10) NULL,
	[AccountTypes] [char](60) NULL,
	[AssocCode] [char](2) NULL,
	[BECHTag] [char](10) NULL,
	[AutoAssociate] [char](1) NULL,
	[MinRequired] [char](1) NULL,
	[PromptEligibility] [char](1) NULL,
	[PromptRelationship] [char](1) NULL,
	[RequireID] [char](1) NULL,
	[RequireSSN] [char](1) NULL,
	[DistributionPercent] [int] NULL,
	[PromptDOB] [char](1) NULL,
	[Individual] [char](1) NULL,
	[OwnerCode] [char](1) NULL,
	[C24Access] [char](1) NULL,
	[StmtPrint] [char](1) NULL,
	[TagBeginEnd] [char](1) NULL,
	[MinRequiredExisting] [int] NULL,
	[StartingNumber] [int] NULL,
	[SortOrder] [int] NULL,
	[CBScreenNew] [char](1) NULL,
	[CBScreenExisting] [char](1) NULL,
	[CBScreenNewForExisting] [char](1) NULL,
	[CBScreenExistingForExisting] [char](1) NULL,
	[ScreenExcludeProducts] [char](1) NULL,
	[ScreenLossAccounts] [char](1) NULL,
	[CalcPreapproval] [char](1) NULL,
	[FormPage] [char](20) NULL,
	[AllowPlasticCard] [char](1) NULL,
	[CreateHost] [char](1) NULL,
	[Titles] [char](100) NULL,
	[PromoteCode] [char](50) NULL,
	[PromoteCodeExisting] [char](50) NULL,
	[TotalAllowed] [smallint] NULL,
	[TotalAllowedExisting] [smallint] NULL,
	[MinAge] [int] NULL,
	[MaxAge] [int] NULL,
	[MaxScreen] [int] NULL,
	[GroupOrder] [smallint] NULL,
	[StartMemo] [int] NULL,
	[MemoFormat] [char](50) NULL,
	[TaxIDTypes] [char](20) NULL,
 CONSTRAINT [PK__udt_BeneficiaryT__7BE56230] PRIMARY KEY CLUSTERED 
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[udt_BSBureaus]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[udt_BSBureaus](
	[BureauSetID] [int] NOT NULL,
	[Sequence] [int] NOT NULL,
	[CreditBureauID] [int] NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xBureauSet]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE CLUSTERED INDEX [xBureauSet] ON [IMS].[udt_BSBureaus]
(
	[BureauSetID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[udt_BureauSet]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[udt_BureauSet](
	[BureauSetID] [int] IDENTITY(1,1) NOT NULL,
	[Label] [varchar](50) NULL,
	[TestFlag] [bit] NOT NULL,
	[TestAppURL] [varchar](50) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[udt_Category]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[udt_Category](
	[CategoryID] [int] NOT NULL,
	[DisplayName] [char](60) NULL,
	[MasterCategoryID] [int] NULL,
	[Sequence] [int] NULL,
	[AccountTypes] [char](60) NULL,
 CONSTRAINT [PK_udt_Category] PRIMARY KEY CLUSTERED 
(
	[CategoryID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[udt_CheckOrderTypes]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[udt_CheckOrderTypes](
	[TrackingNum] [int] IDENTITY(1,1) NOT NULL,
	[TypeCode] [char](2) NULL,
	[Description] [char](30) NULL,
	[CatalogCodes] [char](300) NULL,
	[Quantity] [char](100) NULL,
	[QuantityEditCode] [char](1) NULL,
	[StartNumber] [int] NULL,
	[Font] [char](100) NULL,
	[FontEditCode] [char](1) NULL,
	[Flush] [char](1) NULL,
	[FlushEditCode] [char](1) NULL,
	[CoverCode] [char](100) NULL,
	[CoverEditCode] [char](1) NULL,
	[Allow2Signatures] [char](1) NULL,
	[SpecialPrograms] [char](100) NULL,
	[PromptSpecialPrograms] [char](1) NULL,
	[BillCodes] [char](100) NULL,
	[BillEditCode] [char](1) NULL,
	[DeliveryOptions] [char](100) NULL,
	[DeliveryEditCode] [char](1) NULL,
	[PromptHomePhoneFlag] [char](1) NULL,
	[PromptDriversLicFlag] [char](1) NULL,
	[PromptJointNameFlag] [char](1) NULL,
	[PromptJointDriversLicFlag] [char](1) NULL,
	[PromptTrusteeInfo] [char](1) NULL,
	[PromptTrusteeInfoFlag] [char](1) NULL,
	[AccountTypes] [char](20) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[udt_Checks]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[udt_Checks](
	[TrackingNum] [int] NULL,
	[Line1] [char](50) NULL,
	[Account] [int] NULL,
	[Line2] [char](50) NULL,
	[Line3] [char](50) NULL,
	[Line4] [char](50) NULL,
	[City] [char](50) NULL,
	[State] [char](2) NULL,
	[Zip] [char](10) NULL,
	[JointName] [char](50) NULL,
	[ID] [int] IDENTITY(1,1) NOT NULL,
 CONSTRAINT [PK_udt_Checks] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[udt_CitizenshipTypes]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[udt_CitizenshipTypes](
	[TrackingNum] [int] IDENTITY(1,1) NOT NULL,
	[CitType] [char](2) NULL,
	[Description] [char](30) NULL,
	[W8Required] [char](1) NULL,
	[W8Type] [char](4) NULL,
	[TIDRequired] [char](1) NULL,
	[AccountTypes] [char](100) NULL,
	[BackupWithholdingApplies] [char](1) NULL,
	[NoScreen] [char](1) NULL,
	[ScreenLossAccounts] [char](1) NULL,
	[SortOrder] [smallint] NULL,
	[W8MemoNumber] [int] NULL,
	[W8ExpireDays] [smallint] NULL,
	[W8ExpireType] [char](1) NULL,
	[CBScreenNew] [char](1) NULL,
	[CBScreenExisting] [char](1) NULL,
	[TaxIDType] [char](1) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[udt_Clark]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[udt_Clark](
	[userid] [char](30) NOT NULL,
	[password] [char](30) NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[udt_ClientSettings]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[udt_ClientSettings](
	[ClientSettingId] [int] IDENTITY(1,1) NOT NULL,
	[ClientShortName] [varchar](10) NOT NULL,
	[ClientFullName] [nvarchar](100) NULL,
	[CoreName] [varchar](50) NULL,
	[PurgeNewMemberRecordsAfterDays] [int] NULL,
	[PurgeMissingActivationDatesAsDate] [datetime] NULL,
 CONSTRAINT [PK_udt_ClientSettings] PRIMARY KEY CLUSTERED 
(
	[ClientSettingId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[udt_Clubs]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[udt_Clubs](
	[TrackingNum] [int] IDENTITY(1,1) NOT NULL,
	[ClubCode] [char](10) NULL,
	[ClubName] [char](40) NULL,
	[MinAge] [int] NULL,
	[MaxAge] [int] NULL,
	[Includes] [char](30) NULL,
	[TotalAllowed] [int] NULL,
	[AccountTypes] [char](80) NULL,
	[RefValue] [char](30) NULL,
	[PromptString] [char](255) NULL,
	[FlagNumber1] [char](10) NULL,
	[FlagLevel1] [char](1) NULL,
	[FlagType1] [char](1) NULL,
	[FlagValue1] [char](10) NULL,
	[FlagNumber2] [char](10) NULL,
	[FlagLevel2] [char](1) NULL,
	[FlagType2] [char](1) NULL,
	[FlagValue2] [char](10) NULL,
	[FlagNumber3] [char](10) NULL,
	[FlagLevel3] [char](1) NULL,
	[FlagType3] [char](1) NULL,
	[FlagValue3] [char](10) NULL,
	[FlagNumber4] [char](10) NULL,
	[FlagLevel4] [char](1) NULL,
	[FlagType4] [char](1) NULL,
	[FlagValue4] [char](10) NULL,
	[MemoNumber1] [char](10) NULL,
	[MemoText1] [char](60) NULL,
	[DaysValid1] [int] NULL,
	[MemoNumber2] [char](10) NULL,
	[MemoText2] [char](60) NULL,
	[DaysValid2] [int] NULL,
	[MemoNumber3] [char](10) NULL,
	[MemoText3] [char](60) NULL,
	[DaysValid3] [int] NULL,
	[MemoNumber4] [char](10) NULL,
	[MemoText4] [char](60) NULL,
	[DaysValid4] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Index [IX_TrackingNum]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE CLUSTERED INDEX [IX_TrackingNum] ON [IMS].[udt_Clubs]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[udt_CoAppTypes]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[udt_CoAppTypes](
	[TrackingNum] [int] NOT NULL,
	[CoAppType] [char](2) NULL,
	[Description] [char](30) NULL,
	[AccountTypes] [char](80) NULL,
	[OwnerCode] [char](1) NULL,
	[AssocCode] [char](2) NULL,
	[C24Access] [char](1) NULL,
	[StmtPrint] [char](1) NULL,
	[COCHTag] [char](100) NULL,
	[Individual] [char](1) NULL,
	[AutoAssociate] [char](1) NULL,
	[TagBeginEnd] [char](1) NULL,
	[MinRequired] [int] NULL,
	[PromptEligibility] [char](1) NULL,
	[PromptRelationship] [char](1) NULL,
	[StartingNumber] [int] NULL,
	[SortOrder] [int] NULL,
	[RequireID] [char](1) NULL,
	[ScreenLossAccounts] [char](1) NULL,
	[NoScreen] [char](1) NULL,
	[CBScreenNew] [char](1) NULL,
	[CBScreenExisting] [char](1) NULL,
	[RequireSSN] [char](1) NULL,
	[CalcPreapproval] [char](1) NULL,
	[CreateHost] [char](1) NULL,
	[FormPage] [char](20) NULL,
	[AllowPlasticCard] [char](1) NULL,
	[Titles] [char](100) NULL,
	[PromoteCode] [char](50) NULL,
	[TotalAllowed] [smallint] NULL,
	[TotalAllowedExisting] [smallint] NULL,
	[MinAge] [int] NULL,
	[MaxAge] [int] NULL,
	[MaxScreen] [int] NULL,
	[GroupOrder] [smallint] NULL,
	[CBScreenExistingForExisting] [char](1) NULL,
	[CBScreenNewForExisting] [char](1) NULL,
	[MinRequiredExisting] [int] NULL,
	[PromoteCodeExisting] [char](50) NULL,
	[ScreenExcludeProducts] [char](1) NULL,
	[TaxIDTypes] [char](20) NULL,
	[UseCoAppTaxCode] [char](1) NULL,
	[SendCoAppName] [char](1) NULL,
	[StartMemo] [int] NULL,
	[MemoFormat] [char](50) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[udt_CotSpot]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[udt_CotSpot](
	[NumQueryTries] [int] NULL,
	[QueryInterval] [int] NULL,
	[CardOrder] [char](3) NULL,
	[CardStatus] [char](3) NULL,
	[CardServiceURL] [char](255) NULL,
	[CardServiceUser] [char](30) NULL,
	[CardServicePass] [char](30) NULL,
	[LastModifiedOn] [datetime] NULL,
	[LastModifiedBy] [char](3) NULL,
	[CardType] [char](20) NULL
) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_CotSpot]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE CLUSTERED INDEX [IX_CotSpot] ON [IMS].[udt_CotSpot]
(
	[CardServiceURL] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[udt_CreditBureaus]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[udt_CreditBureaus](
	[TrackingNum] [int] IDENTITY(1,1) NOT NULL,
	[TypeCode] [char](2) NULL,
	[Name] [char](20) NULL,
	[Description] [char](200) NULL,
	[ObjectName] [char](10) NULL,
	[AlertTypes] [char](50) NULL,
	[TestCreditBureau] [char](10) NULL,
	[ReportURL] [char](100) NULL,
	[MinScore] [char](5) NULL,
	[MinPreapproval] [char](100) NULL,
	[DefaultsID] [char](5) NULL,
	[ReuseFlag] [char](1) NULL,
	[ReuseThreshold] [int] NULL,
	[Bureaus] [char](10) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[udt_Doc]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[udt_Doc](
	[DocNum] [int] NOT NULL,
	[DocGroupNum] [int] NOT NULL,
	[DocName] [char](50) NULL,
	[SortOrder] [smallint] NULL,
	[EnableSP] [char](50) NULL,
	[OptionList] [char](100) NULL,
	[DocSubname] [char](50) NULL,
	[DocIndex] [int] NULL,
	[FieldsSP] [char](50) NULL,
	[SignatureTypes] [char](50) NULL,
	[IndexFormat] [varchar](250) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[udt_DocFormField]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[udt_DocFormField](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[DocNum] [int] NULL,
	[DocGroupNum] [int] NULL,
	[DocIndex] [int] NULL,
	[Description] [varchar](50) NULL,
	[Param1] [varchar](50) NULL,
	[Param2] [varchar](50) NULL,
	[LeftX] [int] NULL,
	[LeftY] [int] NULL,
	[RightX] [int] NULL,
	[RightY] [int] NULL,
	[FieldName] [varchar](50) NULL,
	[FieldType] [varchar](50) NULL,
	[OptionList] [varchar](100) NULL,
	[PageNum] [int] NULL,
	[JOCount] [int] NULL,
	[JOTypes] [varchar](50) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[udt_DocGroup]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[udt_DocGroup](
	[DocGroupNum] [int] NOT NULL,
	[DocPackNum] [int] NOT NULL,
	[DocGroupName] [char](50) NULL,
	[SortOrder] [smallint] NULL,
	[EnableSP] [char](50) NULL,
	[OptionList] [char](100) NULL,
	[FieldsSP] [char](50) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[udt_DocPack]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[udt_DocPack](
	[DocPackNum] [int] NOT NULL,
	[DocPackName] [char](50) NULL,
	[SortOrder] [smallint] NULL,
	[Printer] [char](50) NULL,
	[Display] [char](1) NULL,
	[BatchPrint] [char](1) NULL,
	[Duplex] [char](1) NULL,
	[AdobeVersion] [char](50) NULL,
	[EnableSP] [char](50) NULL,
	[OptionList] [char](100) NULL,
	[FieldsSP] [char](50) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[udt_DocuSignTab]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[udt_DocuSignTab](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[docGroupNum] [int] NOT NULL,
	[docNum] [int] NOT NULL,
	[pageNumber] [smallint] NOT NULL,
	[tabType] [varchar](30) NOT NULL,
	[jointNumber] [smallint] NULL,
	[name] [varchar](30) NULL,
	[optional] [smallint] NULL,
	[tabLabel] [varchar](300) NULL,
	[xPosition] [int] NULL,
	[yPosition] [int] NULL,
	[scaleValue] [int] NULL,
	[value] [varchar](50) NULL,
	[anchorString] [varchar](80) NULL,
	[anchorXOffset] [int] NULL,
	[anchorYOffset] [int] NULL,
	[anchorUnits] [nchar](15) NULL,
	[anchorIgnoreIfNotPresent] [smallint] NULL,
	[fontColor] [nchar](20) NULL,
	[fontSize] [nchar](10) NULL,
	[font] [nchar](30) NULL,
	[bold] [smallint] NULL,
 CONSTRAINT [PK_udt_DocuSignTab] PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[udt_EligibilityByZip]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[udt_EligibilityByZip](
	[ZipCode] [varchar](5) NULL,
	[Department] [varchar](12) NULL,
	[CensusTract] [varchar](20) NULL,
	[HandleCode] [varchar](10) NULL
) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_Unique]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE CLUSTERED INDEX [IX_Unique] ON [IMS].[udt_EligibilityByZip]
(
	[ZipCode] ASC,
	[CensusTract] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[udt_EmployerList]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[udt_EmployerList](
	[EmployerID] [int] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[Description] [char](100) NULL,
	[IndustryCode] [char](10) NULL,
	[Department] [char](12) NULL,
	[SortOrder] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[udt_HoldCodes]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[udt_HoldCodes](
	[TrackingNum] [int] IDENTITY(1,1) NOT NULL,
	[HCode] [char](10) NULL,
	[Description] [char](30) NULL,
	[SameDayAvailability] [int] NULL,
	[AccountTypes] [char](80) NULL,
	[HoldCodeID] [char](2) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[udt_IDTypes]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[udt_IDTypes](
	[TrackingNum] [int] IDENTITY(1,1) NOT NULL,
	[IDTypes] [char](50) NULL,
	[IDSource] [char](10) NULL,
	[Description] [char](50) NULL,
	[IDSourceFormat] [char](20) NULL,
	[Required] [char](1) NULL,
	[Memo] [int] NULL,
	[MemoFormat] [char](60) NULL,
	[ShowDesc] [char](1) NULL,
	[ShowNum] [char](1) NULL,
	[ShowIssueDate] [char](1) NULL,
	[ShowExpDate] [char](1) NULL,
	[ShowState] [char](1) NULL,
	[RequireDesc] [char](1) NULL,
	[RequireNum] [char](1) NULL,
	[RequireIssueDate] [char](1) NULL,
	[RequireExpDate] [char](1) NULL,
	[RequireState] [char](1) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[udt_IndustryList]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[udt_IndustryList](
	[CategoryID] [int] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[IndustryCode] [char](10) NULL,
	[Description] [char](100) NULL,
	[SortOrder] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[udt_Institutions]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[udt_Institutions](
	[TrackingNum] [int] IDENTITY(1,1) NOT NULL,
	[InstitutionID] [char](20) NULL,
	[Name] [char](40) NULL,
	[IMSIP] [char](15) NULL,
	[IMSPort] [char](10) NULL,
	[CreditBureauOrder] [char](15) NULL,
	[PreapproveCreditBureau] [char](2) NULL,
	[SecurityMessage] [varchar](500) NULL,
	[PaperGrades] [char](20) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[udt_InsuranceCodes]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[udt_InsuranceCodes](
	[TrackingNum] [int] IDENTITY(1,1) NOT NULL,
	[InsCode] [char](2) NULL,
	[Description] [char](30) NULL,
	[AccountTypes] [char](80) NULL,
	[SortOrder] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[udt_InvestmentData]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[udt_InvestmentData](
	[TrackingNum] [int] NOT NULL,
	[Sequence] [int] NOT NULL,
	[MinTerm] [int] NULL,
	[MaxTerm] [int] NULL,
	[ACC] [varchar](10) NULL,
	[DescAbrv] [char](10) NULL,
	[Description] [varchar](50) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE CLUSTERED INDEX [xTracking] ON [IMS].[udt_InvestmentData]
(
	[TrackingNum] ASC,
	[Sequence] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[udt_LoanDiscount]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[udt_LoanDiscount](
	[TrackingNum] [int] IDENTITY(1,1) NOT NULL,
	[SortOrder] [int] NULL,
	[DiscountID] [char](20) NULL,
	[DiscountName] [char](40) NULL,
	[DiscountAmount] [char](10) NULL,
	[DiscountLevel] [smallint] NULL,
	[DiscountDisplayType] [char](10) NULL,
	[DiscountInputType] [char](10) NULL,
	[Combine] [char](1) NULL,
	[OverrideRequired] [char](1) NULL,
	[ParentID] [int] NULL,
 CONSTRAINT [PK__udt_LoanDiscount__0E04126B] PRIMARY KEY CLUSTERED 
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[udt_LoanPlanTypes]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[udt_LoanPlanTypes](
	[TrackingNum] [int] IDENTITY(1,1) NOT NULL,
	[LPID] [int] NULL,
	[LoanPlanName] [char](30) NULL,
	[LoanPlanDescription] [char](60) NULL,
	[UseMemo] [char](1) NULL,
	[UseFlag] [char](1) NULL,
	[MemoNumber] [int] NULL,
	[MemoNumber2] [int] NULL,
	[FlagNumber] [int] NULL,
	[FlagNumber2] [int] NULL,
	[AccountTypes] [char](80) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[udt_MasterCategory]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[udt_MasterCategory](
	[MasterCategoryID] [int] NOT NULL,
	[Description] [char](50) NULL,
	[SLType] [char](10) NULL,
	[DisplayName] [char](40) NULL,
	[Sequence] [int] NULL,
	[AccountTypes] [char](70) NULL,
	[ImageSet] [smallint] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[udt_OptInOptOut]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[udt_OptInOptOut](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[SortOrder] [int] NULL,
	[OptionText] [varchar](300) NULL,
	[FlagNumber1] [smallint] NULL,
	[FlagType1] [char](1) NULL,
	[FlagLevel1] [varchar](5) NULL,
	[FlagValue1] [smallint] NULL,
	[MemoNumber1] [int] NULL,
	[MemoLevel1] [varchar](5) NULL,
	[MemoText1] [varchar](60) NULL,
	[MemoExpireDays1] [int] NULL,
	[AccountTypes] [varchar](80) NULL,
	[FlagNumber2] [smallint] NULL,
	[FlagType2] [char](1) NULL,
	[FlagLevel2] [varchar](5) NULL,
	[FlagValue2] [smallint] NULL,
 CONSTRAINT [PK_udt_OptInOptOut] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[udt_Page]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[udt_Page](
	[PageID] [int] NULL,
	[Sequence] [int] NULL,
	[URL] [char](100) NULL,
	[HTML] [char](2000) NULL,
	[Context] [char](20) NULL,
	[AccountTypes] [char](60) NULL,
	[ActionItems] [varchar](100) NULL,
	[PreapproveCode] [varchar](100) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[udt_PaymentFrequency]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[udt_PaymentFrequency](
	[TrackingNum] [int] NOT NULL,
	[Sequence] [smallint] NULL,
	[Frequency] [char](1) NULL,
	[PaymentPercent] [char](6) NULL,
	[Description] [char](100) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [Tracking]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE CLUSTERED INDEX [Tracking] ON [IMS].[udt_PaymentFrequency]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[udt_PaymentFrequencySkipCodes]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[udt_PaymentFrequencySkipCodes](
	[TrackingNum] [int] NOT NULL,
	[Sequence] [smallint] NULL,
	[PayFreqSequence] [smallint] NULL,
	[SkipCode] [char](2) NULL,
	[Frequency] [char](1) NULL,
	[PaymentPercent] [char](6) NULL,
	[Description] [char](100) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [Tracking]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE CLUSTERED INDEX [Tracking] ON [IMS].[udt_PaymentFrequencySkipCodes]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[udt_PaymentMethod]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[udt_PaymentMethod](
	[TrackingNum] [int] NOT NULL,
	[Method] [char](1) NULL,
	[Requires] [char](50) NULL,
	[Description] [char](100) NULL,
	[FlagNumber] [smallint] NULL,
	[FlagLevel] [char](1) NULL,
	[FlagType] [char](1) NULL,
	[FlagValue] [smallint] NULL,
	[Sequence] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Index [Tracking]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE CLUSTERED INDEX [Tracking] ON [IMS].[udt_PaymentMethod]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[udt_PlasticLimits]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[udt_PlasticLimits](
	[TrackingNum] [int] NOT NULL,
	[Sequence] [int] NOT NULL,
	[LowScore] [int] NULL,
	[HighScore] [int] NULL,
	[AmountOnline] [char](10) NULL,
	[AmountOffline] [char](10) NULL,
	[POSOnline] [char](10) NULL,
	[POSOffline] [char](10) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[udt_PlasticProducts]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[udt_PlasticProducts](
	[TrackingNum] [int] IDENTITY(1,1) NOT NULL,
	[TypeCode] [char](2) NULL,
	[StockCode] [char](1) NULL,
	[PreapproveCode] [char](10) NULL,
	[AutoGenerateCardNumber] [char](1) NULL,
	[DefaultTerm] [smallint] NULL,
	[MinTerm] [smallint] NULL,
	[MaxTerm] [smallint] NULL,
	[AmountOnline] [int] NULL,
	[AmountOffline] [int] NULL,
	[POSOnlineLimit] [int] NULL,
	[POSOfflineLimit] [int] NULL,
	[CardOrder] [smallint] NULL,
	[CardStatus] [smallint] NULL,
	[Description] [char](60) NULL,
	[Required] [char](1) NULL,
	[AutoAdd] [char](1) NULL,
	[Requires] [char](100) NULL,
	[MinAge] [int] NULL,
	[MaxAge] [int] NULL,
	[TotalAllowed] [int] NULL,
	[AccountTypes] [char](80) NULL,
	[VIPCode] [char](2) NULL,
	[OrderBatch] [smallint] NULL,
	[OrderDays] [int] NULL,
	[StartMemberNumber] [smallint] NULL,
	[AllowName2] [char](1) NULL,
	[PromptPINOffset] [char](1) NULL,
	[RequirePINOffset] [char](1) NULL,
	[AutoFillName1] [char](1) NULL,
	[AutoFillName2] [char](1) NULL,
	[CollateralCode] [char](10) NULL,
	[AscDscMemberNum] [char](10) NULL,
	[MemberNumEditCode] [char](1) NULL,
	[FlagNumber1] [smallint] NULL,
	[FlagType1] [char](1) NULL,
	[FlagValue1] [smallint] NULL,
	[FlagNumber2] [smallint] NULL,
	[FlagLevel1] [varchar](10) NULL,
	[FlagType2] [char](1) NULL,
	[FlagMatch1] [char](50) NULL,
	[FlagValue2] [smallint] NULL,
	[FlagNumber3] [smallint] NULL,
	[FlagType3] [char](1) NULL,
	[FlagValue3] [smallint] NULL,
	[FlagLevel2] [varchar](10) NULL,
	[FlagNumber4] [smallint] NULL,
	[FlagMatch2] [char](50) NULL,
	[FlagType4] [char](1) NULL,
	[FlagValue4] [smallint] NULL,
	[ExpireDays] [int] NULL,
	[ExpireDate] [datetime] NULL,
	[FlagLevel3] [varchar](10) NULL,
	[ExpireType] [char](1) NULL,
	[FlagMatch3] [char](50) NULL,
	[CardCount] [int] NULL,
	[FormPage] [char](20) NULL,
	[NameEditCode] [char](1) NULL,
	[FlagLevel4] [varchar](10) NULL,
	[SuffixPositions] [char](20) NULL,
	[Name2Value] [char](30) NULL,
	[FlagMatch4] [char](50) NULL,
	[FlagSATypeLink] [char](100) NULL,
	[UniqueID] [char](10) NULL,
	[SortOrder] [smallint] NULL,
	[CreateHost] [char](1) NULL,
	[Activation] [char](2) NULL,
	[Exclude] [varchar](50) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [IX_TrackingNum]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE CLUSTERED INDEX [IX_TrackingNum] ON [IMS].[udt_PlasticProducts]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[udt_PrescreenCriteria]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[udt_PrescreenCriteria](
	[TrackingNum] [int] NOT NULL,
	[Sequence] [int] NOT NULL,
	[PaperGrade] [char](5) NULL,
	[MaxPublicRecords] [char](5) NULL,
	[MaxInquiries] [char](5) NULL,
	[MaxCollections] [char](5) NULL,
	[MinCreditScore] [char](5) NULL,
	[MinIncome] [char](10) NULL,
	[MinTrades] [char](5) NULL,
	[MinTradeAge] [char](5) NULL,
	[MaxRevolvingTrades] [char](5) NULL,
	[RevolvingTradeBalance] [char](10) NULL,
	[Max1Month] [char](5) NULL,
	[Max2Month] [char](5) NULL,
	[Max3Month] [char](5) NULL,
	[Max4Month] [char](5) NULL,
	[Max5Month] [char](5) NULL,
	[Max6Month] [char](5) NULL,
	[Max7Month] [char](5) NULL,
	[Max8Month] [char](5) NULL,
	[Max9Month] [char](5) NULL,
	[Max10Month] [char](5) NULL,
	[Max11Month] [char](5) NULL,
	[Max12Month] [char](5) NULL,
	[Max12PlusMonth] [char](5) NULL,
	[RejectBankruptcy] [char](1) NULL,
	[RejectDeceased] [char](1) NULL,
	[RejectSuffixGeneration] [char](1) NULL,
	[ApprovalTier] [char](1) NULL,
	[LoanOfficer] [char](10) NULL,
	[MaxRevolvingTradesNZB] [char](5) NULL,
	[RevolvingTradeBalAsPerAnnIncome] [char](3) NULL,
	[ExcludeHEfromRTB] [char](1) NULL,
	[PrescreenGroup] [smallint] NULL,
	[MaxPastDueBalance] [char](10) NULL,
	[MaxDebtIncomeRatio] [char](5) NULL,
	[MaxIssuesPastYear] [char](5) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [IX_TrackingNum_Sequence]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE CLUSTERED INDEX [IX_TrackingNum_Sequence] ON [IMS].[udt_PrescreenCriteria]
(
	[TrackingNum] ASC,
	[Sequence] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[udt_ProductOptionParams]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[udt_ProductOptionParams](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[TrackingNum] [int] NULL,
	[SLType] [char](1) NULL,
	[MaxSelect] [int] NULL
) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_Unique]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE CLUSTERED INDEX [IX_Unique] ON [IMS].[udt_ProductOptionParams]
(
	[TrackingNum] ASC,
	[SLType] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[udt_ProductOptions]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[udt_ProductOptions](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[TrackingNum] [int] NULL,
	[SLType] [char](1) NULL,
	[SortOrder] [int] NULL,
	[OptionText] [varchar](300) NULL,
	[MemoNumber1] [int] NULL,
	[MemoLevel1] [varchar](5) NULL,
	[MemoText1] [varchar](60) NULL,
	[MemoExpireDays1] [int] NULL,
	[FlagNumber1] [int] NULL,
	[FlagLevel1] [char](1) NULL,
	[FlagType1] [char](1) NULL,
	[FlagValue1] [int] NULL
) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_Unique]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE CLUSTERED INDEX [IX_Unique] ON [IMS].[udt_ProductOptions]
(
	[TrackingNum] ASC,
	[SLType] ASC,
	[MemoNumber1] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[udt_ProductRates]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[udt_ProductRates](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[TrackingNum] [int] NULL,
	[SLType] [char](1) NULL,
	[Tier] [int] NULL,
	[MinTerm] [int] NULL,
	[MaxTerm] [int] NULL,
	[Rate] [decimal](18, 3) NULL,
	[AsOfDate] [datetime] NULL,
	[SymitarType] [nvarchar](4) NULL,
	[SymitarDescription] [varchar](50) NULL,
 CONSTRAINT [udt_ProductRates_pk] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[udt_Questions]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[udt_Questions](
	[QuestionID] [int] IDENTITY(1,1) NOT NULL,
	[SortOrder] [smallint] NULL,
	[Question] [char](200) NULL,
	[UniqueID] [char](10) NULL,
	[SLType] [char](1) NULL,
	[DataType] [char](10) NULL,
	[Params] [char](200) NULL,
	[ParamsSP] [char](200) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[udt_RequiredDocs]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[udt_RequiredDocs](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[SortOrder] [int] NULL,
	[RequirementText] [varchar](250) NULL,
	[CriteriaType1] [varchar](100) NULL,
	[CriteriaValue1] [varchar](100) NULL,
	[CriteriaType2] [varchar](100) NULL,
	[CriteriaValue2] [varchar](100) NULL,
	[CriteriaType3] [varchar](100) NULL,
	[CriteriaValue3] [varchar](100) NULL,
	[DocumentInformation] [nvarchar](max) NULL,
 CONSTRAINT [PK_udt_RequiredDocs] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [IMS].[udt_SalesToolProducts]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[udt_SalesToolProducts](
	[ProductID] [char](30) NULL,
	[CategoryID] [int] NULL,
	[MasterCategoryID] [int] NULL,
	[LoanSources] [char](50) NULL,
	[FulFill] [char](1) NULL,
	[SLType] [char](1) NULL,
	[ProductDesc] [char](50) NULL,
	[Exclude] [nvarchar](200) NULL,
	[URL] [char](50) NULL,
	[FulFillTypes] [char](50) NULL,
	[Address] [char](50) NULL,
	[LoanType] [char](10) NULL,
	[Phone] [char](15) NULL,
	[LoanSubType] [char](10) NULL,
	[Contact] [char](50) NULL,
	[ShowPreApproval] [char](1) NULL,
	[Requires] [char](60) NULL,
	[AccountTypes] [char](80) NULL,
	[RelatedProducts] [char](100) NULL,
	[LOSProductID] [char](10) NULL,
	[LOSProductDesc] [char](100) NULL,
	[FlagLevel] [char](1) NULL,
	[FlagType] [char](1) NULL,
	[FlagNumber] [smallint] NULL,
	[FlagValue] [smallint] NULL,
	[FlagMatch] [char](50) NULL,
	[FlagSource] [char](15) NULL,
	[FlagLevel2] [char](1) NULL,
	[FlagType2] [char](1) NULL,
	[FlagNumber2] [smallint] NULL,
	[FlagValue2] [smallint] NULL,
	[FlagMatch2] [char](50) NULL,
	[FlagSource2] [char](15) NULL,
	[ActionItemsRequired] [varchar](100) NULL,
	[ActionItemsResponse] [varchar](100) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[udt_SingleSignOn]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[udt_SingleSignOn](
	[GUID] [uniqueidentifier] NOT NULL,
	[Account] [int] NULL,
	[SetDateTime] [datetime] NULL,
	[LegacyIDs] [varchar](max) NULL,
	[AccountList] [varchar](max) NULL,
 CONSTRAINT [PK__udt_Sing__15B69B8E37311087] PRIMARY KEY CLUSTERED 
(
	[GUID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [IMS].[udt_SkipCodes]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[udt_SkipCodes](
	[TrackingNum] [int] IDENTITY(1,1) NOT NULL,
	[SCode] [char](2) NULL,
	[Description] [char](30) NULL,
	[AccountTypes] [char](80) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[udt_StaticDocs]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[udt_StaticDocs](
	[TrackingNum] [int] NOT NULL,
	[DocFile] [char](20) NULL,
	[DocName] [char](40) NULL,
	[DocDescription] [char](100) NULL,
	[AccountTypes] [char](100) NULL,
	[PDOCCommand] [char](10) NULL,
	[Category] [char](15) NULL,
	[SortOrder] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[udt_SuffixPositions]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[udt_SuffixPositions](
	[TrackingNum] [int] NOT NULL,
	[SType] [char](1) NULL,
	[AllowPlastic] [char](1) NULL,
	[SufPosition] [char](5) NULL,
	[id] [int] IDENTITY(1,1) NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[UDTScripts_IMS7_ADAPI]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[UDTScripts_IMS7_ADAPI](
	[TransactionType] [char](32) NULL,
	[Sequence] [smallint] NULL,
	[ServerName] [char](32) NULL,
	[ScriptObjectName] [char](255) NULL,
	[ScriptFileName] [char](255) NULL,
	[id] [int] IDENTITY(1,1) NOT NULL,
 CONSTRAINT [PK__UDTSCRIPTS_IMS7___1DBB5747] PRIMARY KEY NONCLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IXTransactionTypeSeverName]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE CLUSTERED INDEX [IXTransactionTypeSeverName] ON [IMS].[UDTScripts_IMS7_ADAPI]
(
	[TransactionType] ASC,
	[Sequence] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[UDTScripts_IMS7_EStatements]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[UDTScripts_IMS7_EStatements](
	[TransactionType] [char](32) NULL,
	[Sequence] [smallint] NULL,
	[ServerName] [char](32) NULL,
	[ScriptObjectName] [char](255) NULL,
	[ScriptFileName] [char](255) NULL,
	[id] [int] IDENTITY(1,1) NOT NULL,
 CONSTRAINT [PK_UDTScriptsIms7EStatements_ID] PRIMARY KEY NONCLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_UDTScriptsIms7EStatements_TransactionType_Sequence]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE CLUSTERED INDEX [IX_UDTScriptsIms7EStatements_TransactionType_Sequence] ON [IMS].[UDTScripts_IMS7_EStatements]
(
	[TransactionType] ASC,
	[Sequence] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[USAePayConfig]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[USAePayConfig](
	[ConfigurationId] [int] NOT NULL,
	[SourceKey] [varchar](255) NULL,
	[SourcePIN] [varchar](255) NULL,
	[USAePayUrl] [varchar](255) NULL,
	[WebServiceTimeout] [int] NULL,
 CONSTRAINT [PK_USAePayConfig] PRIMARY KEY CLUSTERED 
(
	[ConfigurationId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[USAePayPaymentStatus]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[USAePayPaymentStatus](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[PaymentId] [varchar](25) NULL,
	[PaymentStatus] [varchar](35) NULL,
	[LastUpdated] [datetime] NULL,
 CONSTRAINT [PK_USAePayPaymentStatus] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[USAePayTransactionLog]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[USAePayTransactionLog](
	[TrackingNum] [int] NOT NULL,
	[TranDate] [datetime] NULL,
	[ClientIP] [varchar](15) NULL,
	[TransactionType] [varchar](25) NULL,
	[IgnoreDuplicate] [char](1) NULL,
	[InvoiceNumber] [varchar](10) NULL,
	[PONumber] [int] NULL,
	[OrderId] [varchar](64) NULL,
	[SalesClerk] [varchar](255) NULL,
	[TerminalName] [varchar](255) NULL,
	[Description] [varchar](255) NULL,
	[Comments] [varchar](255) NULL,
	[IsTaxable] [char](1) NULL,
	[AmountSubTotal] [varchar](25) NULL,
	[AmountTax] [varchar](25) NULL,
	[AmountTip] [varchar](25) NULL,
	[AmountShipping] [varchar](25) NULL,
	[AmountDiscount] [varchar](25) NULL,
	[CreditCardNumber] [varchar](25) NULL,
	[CreditCardExpiration] [char](4) NULL,
	[CreditCardPresent] [char](1) NULL,
	[BankRoutingNumber] [char](9) NULL,
	[BankAccountNumber] [varchar](25) NULL,
	[BankAccountType] [varchar](25) NULL,
	[FirstName] [varchar](255) NULL,
	[LastName] [varchar](255) NULL,
	[Company] [varchar](255) NULL,
	[BillingAddress1] [varchar](255) NULL,
	[BillingAddress2] [varchar](255) NULL,
	[BillingCity] [varchar](255) NULL,
	[BillingState] [char](2) NULL,
	[BillingZipCode] [varchar](10) NULL,
	[BillingCountry] [char](2) NULL,
	[BillingPhoneNumber] [varchar](25) NULL,
	[BillingEmailAddress] [varchar](255) NULL,
	[CustomerId] [varchar](25) NULL,
	[AccountId] [varchar](25) NULL,
	[PaymentId] [varchar](25) NULL,
	[PaymentStatus] [varchar](35) NULL,
	[TransactionErrorMessage] [varchar](255) NULL,
 CONSTRAINT [PK_USAePayTransactionLog] PRIMARY KEY CLUSTERED 
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[ValidABAs]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[ValidABAs](
	[RoutingNumber] [char](9) NOT NULL,
	[InstitutionName] [varchar](36) NULL,
	[Address] [varchar](36) NULL,
	[City] [varchar](20) NULL,
	[State] [char](2) NULL,
	[Zip] [char](5) NULL,
	[ZipExt] [char](5) NULL,
 CONSTRAINT [PK_ValidABA2] PRIMARY KEY CLUSTERED 
(
	[RoutingNumber] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[WAPrereq]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[WAPrereq](
	[WorkflowType] [char](32) NULL,
	[ActionName] [char](32) NULL,
	[PrereqAction] [char](32) NULL,
	[Sequence] [smallint] NULL,
	[PrereqType] [char](32) NULL
) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [Tracking]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE CLUSTERED INDEX [Tracking] ON [IMS].[WAPrereq]
(
	[WorkflowType] ASC,
	[ActionName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[WorkflowAction]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[WorkflowAction](
	[WorkflowType] [char](32) NULL,
	[Sequence] [smallint] NULL,
	[ActionName] [char](32) NULL,
	[ActionType] [char](32) NULL,
	[Description] [char](60) NULL,
	[ASPPage] [char](60) NULL,
	[Display] [char](1) NULL,
	[UndoAllowed] [char](1) NULL,
	[OverrideAllowed] [char](1) NULL,
	[ReviewAllowed] [char](1) NULL,
	[OverrideBy] [char](3) NULL,
	[OverrideDate] [datetime] NULL,
	[SkipAllowed] [char](1) NULL
) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [Tracking]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE CLUSTERED INDEX [Tracking] ON [IMS].[WorkflowAction]
(
	[WorkflowType] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[x_AddressValidationUseage]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[x_AddressValidationUseage](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[UsedOnUtc] [datetime] NOT NULL,
	[LineOne] [varchar](500) NULL,
 CONSTRAINT [PK__x_Addres__3214EC07B99F4595] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[x_CreditReportReviewLog]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[x_CreditReportReviewLog](
	[TrackingNum] [int] NULL,
	[CBTrackingNum] [int] NULL,
	[BureauCode] [char](10) NULL,
	[Account] [varchar](50) NULL,
	[TellerInitials] [varchar](50) NULL,
	[ReviewDate] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[x_EMCH]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[x_EMCH](
	[TrackingNum] [int] NOT NULL,
	[Processed] [smallint] NULL,
	[Account] [int] NULL,
	[Surname] [char](2) NULL,
	[ChangeMode] [char](1) NULL,
	[EmployerName] [char](30) NULL,
	[Address1] [char](30) NULL,
	[City] [char](16) NULL,
	[State] [char](2) NULL,
	[Zip] [char](9) NULL,
	[AreaCode] [char](3) NULL,
	[Phone] [int] NULL,
	[Department] [char](12) NULL,
	[JobTitle] [char](16) NULL,
	[Shift] [char](10) NULL,
	[EmployeeNumber] [char](20) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[x_InternalAccess]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[x_InternalAccess](
	[TrackingNum] [int] NOT NULL,
	[Teller] [char](50) NULL,
	[AccessCategory] [char](20) NULL,
	[AccessName] [char](40) NULL,
	[AccessType] [char](10) NULL,
	[AccessValue] [char](500) NULL,
	[AddDate] [datetime] NULL,
	[ChangeDate] [datetime] NULL,
	[ClientIP] [char](15) NULL,
	[WebIP] [char](15) NULL,
	[ClusterID] [char](10) NULL,
	[LastModified] [datetime] NULL,
	[ID] [int] IDENTITY(1,1) NOT NULL,
 CONSTRAINT [PK_x_InternalAccess] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[x_InternalAccessGroup]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[x_InternalAccessGroup](
	[TrackingNum] [int] NOT NULL,
	[TellerGroup] [char](20) NULL,
	[AccessCategory] [char](20) NULL,
	[AccessName] [char](40) NULL,
	[AccessType] [char](10) NULL,
	[AccessValue] [char](500) NULL,
	[AddDate] [datetime] NULL,
	[ChangeDate] [datetime] NULL,
	[ClientIP] [char](15) NULL,
	[WebIP] [char](15) NULL,
	[ClusterID] [char](10) NULL,
	[LastModified] [datetime] NULL
) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [xGroup]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE CLUSTERED INDEX [xGroup] ON [IMS].[x_InternalAccessGroup]
(
	[TellerGroup] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[x_JOCH]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[x_JOCH](
	[TrackingNum] [int] NOT NULL,
	[Processed] [smallint] NULL,
	[Account] [int] NULL,
	[Suffix] [smallint] NULL,
	[Surname] [char](2) NULL,
	[JointOwnerNumber] [int] NULL,
	[ChangeMode] [char](1) NULL,
	[JointAccount] [char](9) NULL,
	[AddressAssociated] [char](1) NULL,
	[AssociationCode] [char](2) NULL,
	[C24Access] [char](1) NULL,
	[StatementPrint] [char](1) NULL,
	[FName] [char](30) NULL,
	[Address1] [char](30) NULL,
	[Address2] [char](30) NULL,
	[Address3] [char](30) NULL,
	[City] [char](16) NULL,
	[State] [char](2) NULL,
	[Zip] [char](9) NULL,
	[CntryCode] [char](2) NULL,
	[HomePhone] [char](7) NULL,
	[SSN] [char](9) NULL,
	[DOB] [datetime] NULL,
	[MInitial] [char](2) NULL,
	[LName] [char](30) NULL,
	[HomeAC] [char](3) NULL,
	[EMail1] [char](60) NULL,
	[WorkAC] [char](3) NULL,
	[WorkPhone] [char](7) NULL,
	[W8] [char](1) NULL,
	[RelationshipType] [char](1) NULL,
	[DistribPercent] [char](5) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[xUserTable]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[xUserTable](
	[Initials] [varchar](20) NULL,
	[Password] [char](8) NULL,
	[UserName] [char](24) NULL,
	[DefaultBranch] [smallint] NULL,
	[TellerGroup] [char](20) NULL,
	[HostID] [varchar](30) NULL,
	[ID] [int] IDENTITY(1,1) NOT NULL,
 CONSTRAINT [PK_xUserTable] PRIMARY KEY NONCLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_Initials]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE CLUSTERED INDEX [IX_Initials] ON [IMS].[xUserTable]
(
	[Initials] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [IMS].[zAccountNumbers]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [IMS].[zAccountNumbers](
	[ID] [int] NULL,
	[TrackingNum] [int] NOT NULL,
	[AccountNum] [varchar](50) NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Index [ACC]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [ACC] ON [IMS].[ACCs]
(
	[ACC] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_Decision]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE NONCLUSTERED INDEX [IX_Decision] ON [IMS].[ACHReview]
(
	[Decision] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [xTypeNameTracking]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [xTypeNameTracking] ON [IMS].[ActionLog]
(
	[WorkflowType] ASC,
	[ActionName] ASC,
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_BlockIp]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [IX_BlockIp] ON [IMS].[BlockIp]
(
	[ClientIP] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [BranchCode]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [BranchCode] ON [IMS].[Branches]
(
	[BranchCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [account]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE NONCLUSTERED INDEX [account] ON [IMS].[CheckLog]
(
	[Account] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [branch]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE NONCLUSTERED INDEX [branch] ON [IMS].[CheckLog]
(
	[Branch] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [trackingnum]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE NONCLUSTERED INDEX [trackingnum] ON [IMS].[CheckLog]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [ID]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [ID] ON [IMS].[Config]
(
	[CUID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [xTrackingSeq]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [xTrackingSeq] ON [IMS].[CRCHPledges]
(
	[TrackingNum] ASC,
	[Sequence] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [xTrackingSeq]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [xTrackingSeq] ON [IMS].[CRCHRelatedSuffix]
(
	[Sequence] ASC,
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [xTrackingSeq]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [xTrackingSeq] ON [IMS].[CRCHSuffix]
(
	[Sequence] ASC,
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_Unique]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [IX_Unique] ON [IMS].[DeluxeAgentInfo]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_Unique]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [IX_Unique] ON [IMS].[DeluxeBankInfo]
(
	[TrackingNum] ASC,
	[BankIdType] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_Unique]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [IX_Unique] ON [IMS].[DeluxeDepAcctId]
(
	[TrackingNum] ASC,
	[AcctType] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_Unique]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [IX_Unique] ON [IMS].[DeluxeMiscText]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_Unique]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [IX_Unique] ON [IMS].[DeluxeOrgInfo]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_Unique]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [IX_Unique] ON [IMS].[DeluxePersonInfo]
(
	[TrackingNum] ASC,
	[Sequence] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_Unique]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [IX_Unique] ON [IMS].[DeluxePersonName]
(
	[TrackingNum] ASC,
	[Sequence] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_Unique]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [IX_Unique] ON [IMS].[DeluxePhoneNum]
(
	[TrackingNum] ASC,
	[PhoneType] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_Unique]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [IX_Unique] ON [IMS].[DeluxePostAddr]
(
	[TrackingNum] ASC,
	[AddrType] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_Unique]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [IX_Unique] ON [IMS].[DeluxeProgram]
(
	[TrackingNum] ASC,
	[ProgramName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_Unique]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [IX_Unique] ON [IMS].[DeluxeReply]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_Unique]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [IX_Unique] ON [IMS].[DeluxeRequest]
(
	[TrackingNum] ASC,
	[RqUID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_Department]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [IX_Department] ON [IMS].[Departments]
(
	[Department] ASC,
	[Description] ASC,
	[Display] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_Diagnostic_timestamp]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE NONCLUSTERED INDEX [IX_Diagnostic_timestamp] ON [IMS].[Diagnostic]
(
	[timestamp] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_Diagnostic_tracking]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE NONCLUSTERED INDEX [IX_Diagnostic_tracking] ON [IMS].[Diagnostic]
(
	[trackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_DocuSignEnvelope]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE NONCLUSTERED INDEX [IX_DocuSignEnvelope] ON [IMS].[DocuSignEnvelope]
(
	[trackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [xCategory]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE NONCLUSTERED INDEX [xCategory] ON [IMS].[EquifaxDictionary]
(
	[Category] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [TrackingSequence]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [TrackingSequence] ON [IMS].[Flags]
(
	[TrackingNum] ASC,
	[Sequence] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_HostConfigurationSettings]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [IX_HostConfigurationSettings] ON [IMS].[HostConfigurationSettings]
(
	[Name] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [xConfig]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [xConfig] ON [IMS].[HTTPConfig]
(
	[TransactionType] ASC,
	[TransId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [xCatCollateral]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [xCatCollateral] ON [IMS].[LNCatCollateral]
(
	[Category] ASC,
	[Collateral] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [xCategory]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE NONCLUSTERED INDEX [xCategory] ON [IMS].[LNCatCollateral]
(
	[Category] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [xTrackingSeq]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [xTrackingSeq] ON [IMS].[LOCHDenialReason]
(
	[TrackingNum] ASC,
	[Sequence] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [xTrackingSeq]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [xTrackingSeq] ON [IMS].[LOCHPledges]
(
	[TrackingNum] ASC,
	[Sequence] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [TrackTypeProcessed]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [TrackTypeProcessed] ON [IMS].[Message]
(
	[TrackingNum] ASC,
	[TransactionType] ASC,
	[TransactionProcessed] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [TrackingSequence]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [TrackingSequence] ON [IMS].[MessageAttachment]
(
	[TrackingNum] ASC,
	[TransactionType] ASC,
	[TransactionProcessed] ASC,
	[Sequence] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [MainKey]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [MainKey] ON [IMS].[MessageRecipient]
(
	[TrackingNum] ASC,
	[RecipientType] ASC,
	[Sequence] ASC,
	[TransactionType] ASC,
	[TransactionProcessed] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [TrackingNum]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE NONCLUSTERED INDEX [TrackingNum] ON [IMS].[MessageRecipient]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [TrackingSequence]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [TrackingSequence] ON [IMS].[MessageText]
(
	[TrackingNum] ASC,
	[TransactionType] ASC,
	[TransactionProcessed] ASC,
	[Sequence] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [NewMemberAddress_IDX]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [NewMemberAddress_IDX] ON [IMS].[NewMemberAddress]
(
	[TrackingNum] ASC,
	[Sequence] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [TrackingSeq]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [TrackingSeq] ON [IMS].[NewMemberBeneficiary]
(
	[TrackingNum] ASC,
	[Sequence] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [TrackingSeq]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [TrackingSeq] ON [IMS].[NewMemberBeneficiaryLink]
(
	[TrackingNum] ASC,
	[SubAccountSequence] ASC,
	[Sequence] ASC,
	[BeneficiarySequence] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [xTrackingSubseq]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE NONCLUSTERED INDEX [xTrackingSubseq] ON [IMS].[NewMemberBeneficiaryLink]
(
	[TrackingNum] DESC,
	[SubAccountSequence] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [xTrackingSeqSeq]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [xTrackingSeqSeq] ON [IMS].[NewMemberCertificateLink]
(
	[TrackingNum] ASC,
	[TargetSequence] ASC,
	[LinkSequence] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [xTrackingTargetseq]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE NONCLUSTERED INDEX [xTrackingTargetseq] ON [IMS].[NewMemberCertificateLink]
(
	[TrackingNum] ASC,
	[TargetSequence] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [xTrackSubseq]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE NONCLUSTERED INDEX [xTrackSubseq] ON [IMS].[NewMemberCheckOrder]
(
	[TrackingNum] ASC,
	[SubAccountSequence] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [TrackingSeq]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [TrackingSeq] ON [IMS].[NewMemberClub]
(
	[TrackingNum] ASC,
	[Sequence] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_CoApp]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [IX_CoApp] ON [IMS].[NewMemberCoApp]
(
	[TrackingNum] ASC,
	[Sequence] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_CoAppLink]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [IX_CoAppLink] ON [IMS].[NewMemberCoAppLink]
(
	[TrackingNum] ASC,
	[Sequence] ASC,
	[CoAppSequence] ASC,
	[LoanSequence] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [xTrackingSequence]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [xTrackingSequence] ON [IMS].[NewMemberCreditReport]
(
	[TrackingNum] ASC,
	[Sequence] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [TrackingSequence]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [TrackingSequence] ON [IMS].[NewMemberFlag]
(
	[TrackingNum] ASC,
	[Sequence] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [xTrackingSeq]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [xTrackingSeq] ON [IMS].[NewMemberFunds]
(
	[TrackingNum] ASC,
	[Sequence] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [xTrackingSeq]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [xTrackingSeq] ON [IMS].[NewMemberInvestmentAdd]
(
	[TrackingNum] ASC,
	[SubAccountSequence] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [xTrackingSeq]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [xTrackingSeq] ON [IMS].[NewMemberIVRAccess]
(
	[TrackingNum] ASC,
	[Sequence] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [xTrackingJoint]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE NONCLUSTERED INDEX [xTrackingJoint] ON [IMS].[NewMemberJointLink]
(
	[TrackingNum] DESC,
	[JointSequence] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [xUnique]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [xUnique] ON [IMS].[NewMemberJointLink]
(
	[TrackingNum] ASC,
	[Sequence] ASC,
	[JointSequence] ASC,
	[SubAccountSequence] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_Department]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE NONCLUSTERED INDEX [IX_Department] ON [IMS].[NewMemberJointOwner]
(
	[Department] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_JointOwnerType]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE NONCLUSTERED INDEX [IX_JointOwnerType] ON [IMS].[NewMemberJointOwner]
(
	[JointOwnerType] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [NewMemberJointOwner30]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE NONCLUSTERED INDEX [NewMemberJointOwner30] ON [IMS].[NewMemberJointOwner]
(
	[TrackingNum] ASC,
	[SortOrder] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [TrackingSeq]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [TrackingSeq] ON [IMS].[NewMemberJointOwner]
(
	[TrackingNum] ASC,
	[Sequence] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_Unique]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [IX_Unique] ON [IMS].[NewMemberLoanPlan]
(
	[TrackingNum] ASC,
	[Sequence] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [TrackingSeq]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [TrackingSeq] ON [IMS].[NewMemberMemo]
(
	[TrackingNum] ASC,
	[Sequence] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [TrackingSeq]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [TrackingSeq] ON [IMS].[NewMemberOverdraftLink]
(
	[TrackingNum] ASC,
	[OverdraftSequence] ASC,
	[TargetSubAccount] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [xTrackingSubseq]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE NONCLUSTERED INDEX [xTrackingSubseq] ON [IMS].[NewMemberOverdraftLink]
(
	[TrackingNum] DESC,
	[TargetSubAccount] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [xTrackingSequence]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [xTrackingSequence] ON [IMS].[NewMemberPlasticCard]
(
	[TrackingNum] ASC,
	[Sequence] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [xTrackingId]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [xTrackingId] ON [IMS].[NewMemberQuestion]
(
	[TrackingNum] ASC,
	[QuestionID] ASC,
	[JointSequence] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_ReferenceType]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE NONCLUSTERED INDEX [IX_ReferenceType] ON [IMS].[NewMemberReference]
(
	[ReferenceType] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_TrackingNum]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE NONCLUSTERED INDEX [IX_TrackingNum] ON [IMS].[NewMemberReference]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [account_number]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE NONCLUSTERED INDEX [account_number] ON [IMS].[NewMemberRequest]
(
	[Account] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [account_type]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE NONCLUSTERED INDEX [account_type] ON [IMS].[NewMemberRequest]
(
	[AccountType] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [application_date]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE NONCLUSTERED INDEX [application_date] ON [IMS].[NewMemberRequest]
(
	[ApplyDate] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [application_status]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE NONCLUSTERED INDEX [application_status] ON [IMS].[NewMemberRequest]
(
	[Processed] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [branch_name]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE NONCLUSTERED INDEX [branch_name] ON [IMS].[NewMemberRequest]
(
	[Branch] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [government_id]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE NONCLUSTERED INDEX [government_id] ON [IMS].[NewMemberRequest]
(
	[SSN] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_ThirdPartyID]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE NONCLUSTERED INDEX [IX_ThirdPartyID] ON [IMS].[NewMemberRequest]
(
	[ThirdPartyID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [organization_name]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE NONCLUSTERED INDEX [organization_name] ON [IMS].[NewMemberRequest]
(
	[OrganizationName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [person_name]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE NONCLUSTERED INDEX [person_name] ON [IMS].[NewMemberRequest]
(
	[LName] ASC,
	[FName] ASC,
	[MInitial] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [teller_initials]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE NONCLUSTERED INDEX [teller_initials] ON [IMS].[NewMemberRequest]
(
	[Employee] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_TN_PageName_PageStatus]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE NONCLUSTERED INDEX [IX_TN_PageName_PageStatus] ON [IMS].[NewMemberRequestTracking]
(
	[TrackingNum] ASC,
	[PageName] ASC,
	[PageStatus] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_SubAccountID]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE NONCLUSTERED INDEX [IX_SubAccountID] ON [IMS].[NewMemberShoppingCart]
(
	[SubAccountID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [xTrackingProduct]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE NONCLUSTERED INDEX [xTrackingProduct] ON [IMS].[NewMemberShoppingCart]
(
	[ProductID] ASC,
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_ShoppingCartID]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE NONCLUSTERED INDEX [IX_ShoppingCartID] ON [IMS].[NewMemberSubAccount]
(
	[ShoppingCartID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_Suffix]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE NONCLUSTERED INDEX [IX_Suffix] ON [IMS].[NewMemberSubAccount]
(
	[Suffix] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [xTrackingSequence]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [xTrackingSequence] ON [IMS].[NewMemberSubAccount]
(
	[TrackingNum] ASC,
	[Sequence] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [xTrackingSequence]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [xTrackingSequence] ON [IMS].[NewMemberSubAccountLink]
(
	[TrackingNum] ASC,
	[Sequence] ASC,
	[PlasticCardSequence] ASC,
	[SubSequence] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [xTrackingID]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [xTrackingID] ON [IMS].[NewMemberTradeProspect]
(
	[ID] ASC,
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [TrackingTypeProcessed]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [TrackingTypeProcessed] ON [IMS].[ProcessQ]
(
	[TrackingNum] ASC,
	[TransactionType] ASC,
	[TransactionProcessed] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [XCategory]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE NONCLUSTERED INDEX [XCategory] ON [IMS].[SHCatACC]
(
	[Category] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [xCategoryACC]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [xCategoryACC] ON [IMS].[SHCatACC]
(
	[Category] ASC,
	[ACC] ASC,
	[DescAbrv] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [Category]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [Category] ON [IMS].[SHCategories]
(
	[Category] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [xCatPerm]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [xCatPerm] ON [IMS].[SHCatPerm]
(
	[Category] ASC,
	[PermType] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [xPermType]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE NONCLUSTERED INDEX [xPermType] ON [IMS].[SHCatPerm]
(
	[PermType] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [idx_SHCatSDA_Unique]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [idx_SHCatSDA_Unique] ON [IMS].[SHCatSDA]
(
	[DescAbrv] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [TrackingSeq]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [TrackingSeq] ON [IMS].[SHCHPledges]
(
	[TrackingNum] ASC,
	[Sequence] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [TrackingSeq]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [TrackingSeq] ON [IMS].[SHCHSuffix]
(
	[TrackingNum] ASC,
	[Sequence] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [xInitialsTranType]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [xInitialsTranType] ON [IMS].[TellerSecurity]
(
	[Initials] ASC,
	[TransactionType] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE NONCLUSTERED INDEX [xTracking] ON [IMS].[TUCreditCard]
(
	[TrackingNumber] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_Unique]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [IX_Unique] ON [IMS].[udt_BSBureaus]
(
	[BureauSetID] ASC,
	[CreditBureauID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_BureauSetID]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [IX_BureauSetID] ON [IMS].[udt_BureauSet]
(
	[BureauSetID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [xMasterCat]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE NONCLUSTERED INDEX [xMasterCat] ON [IMS].[udt_Category]
(
	[MasterCategoryID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [account]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE NONCLUSTERED INDEX [account] ON [IMS].[udt_Checks]
(
	[Account] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [trackingnum]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE NONCLUSTERED INDEX [trackingnum] ON [IMS].[udt_Checks]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [xTracking] ON [IMS].[udt_CitizenshipTypes]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_CoAppType]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [IX_CoAppType] ON [IMS].[udt_CoAppTypes]
(
	[CoAppType] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_TrackingNum]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [IX_TrackingNum] ON [IMS].[udt_CreditBureaus]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_Unique]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [IX_Unique] ON [IMS].[udt_Doc]
(
	[DocNum] ASC,
	[DocGroupNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_Unique]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [IX_Unique] ON [IMS].[udt_DocGroup]
(
	[DocGroupNum] ASC,
	[DocPackNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_Unique]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [IX_Unique] ON [IMS].[udt_DocPack]
(
	[DocPackNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [xTracking]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [xTracking] ON [IMS].[udt_JointOwnerTypes]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_UniqueID]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [IX_UniqueID] ON [IMS].[udt_LSubAccounts]
(
	[UniqueID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [xTrackingNum]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [xTrackingNum] ON [IMS].[udt_ManualApprovalAction]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_MasterCategoryID]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [IX_MasterCategoryID] ON [IMS].[udt_MasterCategory]
(
	[MasterCategoryID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_Unique]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [IX_Unique] ON [IMS].[udt_Page]
(
	[PageID] ASC,
	[Context] ASC,
	[AccountTypes] ASC,
	[PreapproveCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_QuestionID]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [IX_QuestionID] ON [IMS].[udt_Questions]
(
	[QuestionID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_ProductID]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [IX_ProductID] ON [IMS].[udt_SalesToolProducts]
(
	[ProductID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_TrackingNum]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [IX_TrackingNum] ON [IMS].[udt_SSubAccounts]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [xUniqueID]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE NONCLUSTERED INDEX [xUniqueID] ON [IMS].[udt_SSubAccounts]
(
	[UniqueID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_TrackingNum]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [IX_TrackingNum] ON [IMS].[udt_SuffixPositions]
(
	[TrackingNum] ASC,
	[SufPosition] ASC,
	[SType] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_PaymentID]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [IX_PaymentID] ON [IMS].[USAePayPaymentStatus]
(
	[PaymentId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [TrackingSeq]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [TrackingSeq] ON [IMS].[WAPrereq]
(
	[WorkflowType] ASC,
	[ActionName] ASC,
	[Sequence] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [TrackingSeq]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [TrackingSeq] ON [IMS].[WorkflowAction]
(
	[WorkflowType] ASC,
	[Sequence] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [TypeAction]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE NONCLUSTERED INDEX [TypeAction] ON [IMS].[WorkflowAction]
(
	[WorkflowType] ASC,
	[ActionName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_TrackingNum]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [IX_TrackingNum] ON [IMS].[x_EMCH]
(
	[TrackingNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [internalaccess_teller]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE NONCLUSTERED INDEX [internalaccess_teller] ON [IMS].[x_InternalAccess]
(
	[Teller] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [xGroupCategoryName]    Script Date: 1/4/2025 10:20:31 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [xGroupCategoryName] ON [IMS].[x_InternalAccessGroup]
(
	[TellerGroup] ASC,
	[AccessCategory] ASC,
	[AccessName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
ALTER TABLE [IMS].[DeluxeConsumer] ADD  CONSTRAINT [DF_DeluxeConsumer_MatchRecordSequence]  DEFAULT ((0)) FOR [MatchRecordSequence]
GO
ALTER TABLE [IMS].[DeluxeInquiryResponse] ADD  CONSTRAINT [DF_DeluxeInquiryResponse_DateOfInquiry]  DEFAULT (getdate()) FOR [DateOfInquiry]
GO
ALTER TABLE [IMS].[DeluxeOutOfWalletIDScoreRequest] ADD  CONSTRAINT [DF_DeluxeOutOfWalletIDScoreRequest_JointOwnerSequence]  DEFAULT ((0)) FOR [JointOwnerSequence]
GO
ALTER TABLE [IMS].[DeluxeOutOfWalletQuizQuestion] ADD  CONSTRAINT [DF_DeluxeOutOfWalletQuizQuestion_JointOwnerSequence]  DEFAULT ((0)) FOR [JointOwnerSequence]
GO
ALTER TABLE [IMS].[DeluxeOutOfWalletQuizQuestionChoice] ADD  CONSTRAINT [DF_DeluxeOutOfWalletQuizQuestionChoice_JointOwnerSequence]  DEFAULT ((0)) FOR [JointOwnerSequence]
GO
ALTER TABLE [IMS].[DeluxeOutOfWalletQuizRequest] ADD  CONSTRAINT [DF_DeluxeOutOfWalletQuizRequest_JointOwnerSequence]  DEFAULT ((0)) FOR [JointOwnerSequence]
GO
ALTER TABLE [IMS].[DeluxeOutOfWalletQuizResponse] ADD  CONSTRAINT [DF_DeluxeOutOfWalletQuizResponse_JointOwnerSequence]  DEFAULT ((0)) FOR [JointOwnerSequence]
GO
ALTER TABLE [IMS].[DeluxeOutOfWalletQuizResponseRequest] ADD  CONSTRAINT [DF_DeluxeOutOfWalletQuizResponseRequest_JointOwnerSequence]  DEFAULT ((0)) FOR [JointOwnerSequence]
GO
ALTER TABLE [IMS].[Diagnostic] ADD  CONSTRAINT [DF_Diagnostic_timestamp]  DEFAULT (getdate()) FOR [timestamp]
GO
ALTER TABLE [IMS].[EF2_KBADecision] ADD  CONSTRAINT [DF_EF2_KBADecision_JointOwnerSequence]  DEFAULT ((0)) FOR [JointOwnerSequence]
GO
ALTER TABLE [IMS].[EF2_KBAPerson] ADD  CONSTRAINT [DF_EF2_KBAPerson_JointOwnerSequence]  DEFAULT ((0)) FOR [JointOwnerSequence]
GO
ALTER TABLE [IMS].[EF2_KBAQuestion] ADD  CONSTRAINT [DF_EF2_KBAQuestion_JointOwnerSequence]  DEFAULT ((0)) FOR [JointOwnerSequence]
GO
ALTER TABLE [IMS].[EF2_KBAQuestions] ADD  CONSTRAINT [DF_EF2_KBAQuestions_JointOwnerSequence]  DEFAULT ((0)) FOR [JointOwnerSequence]
GO
ALTER TABLE [IMS].[EmailLog] ADD  CONSTRAINT [DF_Table_1_DateSent]  DEFAULT (sysutcdatetime()) FOR [UtcDateSent]
GO
ALTER TABLE [IMS].[ExperianCreditProfileReply] ADD  CONSTRAINT [DF_ExperianCreditProfileReply_DatePulled]  DEFAULT (getdate()) FOR [DatePulled]
GO
ALTER TABLE [IMS].[ILA_Application] ADD  CONSTRAINT [DF_ILA_Application_ApplicationSourceType]  DEFAULT ('PSIWeb') FOR [ApplicationSourceType]
GO
ALTER TABLE [IMS].[ILA_ApplicationInfo] ADD  CONSTRAINT [DF_ILA_ApplicationInfo_OaoIlaOptions]  DEFAULT ((0)) FOR [OaoIlaOptions]
GO
ALTER TABLE [IMS].[ILA_Timestamps] ADD  CONSTRAINT [DF_ILA_Timestamps_EventUtc]  DEFAULT (getutcdate()) FOR [EventUtc]
GO
ALTER TABLE [IMS].[MitekDossier] ADD  CONSTRAINT [DF_MitekDossier_JointSequence]  DEFAULT ((0)) FOR [JointSequence]
GO
ALTER TABLE [IMS].[NewMemberChangeHistory] ADD  CONSTRAINT [DF_IMS.NewMemberChangeHistory_ChangeDateTime]  DEFAULT (getdate()) FOR [ChangeDateTime]
GO
ALTER TABLE [IMS].[NewMemberDoc] ADD  CONSTRAINT [DF_NewMemberDoc_AccountSequences]  DEFAULT ('') FOR [AccountSequences]
GO
ALTER TABLE [IMS].[NewMemberDoc] ADD  CONSTRAINT [DF_NewMemberDoc_JOSequences]  DEFAULT ('') FOR [JOSequences]
GO
ALTER TABLE [IMS].[NewMemberJointOwner] ADD  CONSTRAINT [DF_NewMemberJointOwner_Disqualified]  DEFAULT ((0)) FOR [Disqualified]
GO
ALTER TABLE [IMS].[NewMemberRequest] ADD  CONSTRAINT [DF_NewMemberRequest_ApplyDate]  DEFAULT (getdate()) FOR [ApplyDate]
GO
ALTER TABLE [IMS].[NewMemberRequestExtra] ADD  CONSTRAINT [DF__NewMember__BadLo__2ED1A007]  DEFAULT ((0)) FOR [BadLoginAttempts]
GO
ALTER TABLE [IMS].[NMRFundingBank] ADD  CONSTRAINT [DF_NMRFundingBank_MakeAvailable]  DEFAULT ((0)) FOR [MakeAvailable]
GO
ALTER TABLE [IMS].[ProductPurposeMapping] ADD  DEFAULT ((0)) FOR [SortOrder]
GO
ALTER TABLE [IMS].[SingleSignOn] ADD  CONSTRAINT [DF__SingleSig__setAt__6379A719]  DEFAULT (getdate()) FOR [setAt]
GO
ALTER TABLE [IMS].[SingleSignOn] ADD  CONSTRAINT [DF__SingleSignO__key__646DCB52]  DEFAULT (newid()) FOR [key]
GO
ALTER TABLE [IMS].[SingleSignOn] ADD  CONSTRAINT [DF__SingleSign__used__6561EF8B]  DEFAULT ((0)) FOR [used]
GO
ALTER TABLE [IMS].[Staff_User] ADD  CONSTRAINT [DF__Staff_User__uId__6B1AC8E1]  DEFAULT (newid()) FOR [uId]
GO
ALTER TABLE [IMS].[Staff_User] ADD  CONSTRAINT [DF__Staff_Use__creat__6C0EED1A]  DEFAULT (getdate()) FOR [created]
GO
ALTER TABLE [IMS].[Staff_User] ADD  CONSTRAINT [DF__Staff_Use__badLo__6D031153]  DEFAULT ((0)) FOR [badLoginCount]
GO
ALTER TABLE [IMS].[udt_DocuSignTab] ADD  CONSTRAINT [DF_udt_DocuSignTab_tabType]  DEFAULT ('SignHere') FOR [tabType]
GO
ALTER TABLE [IMS].[x_AddressValidationUseage] ADD  CONSTRAINT [DF__x_Address__UsedO__6C98FCFF]  DEFAULT (getutcdate()) FOR [UsedOnUtc]
GO
ALTER TABLE [IMS].[CollateralProduct]  WITH CHECK ADD FOREIGN KEY([CollateralTypeId])
REFERENCES [IMS].[CollateralType] ([Id])
GO
ALTER TABLE [IMS].[CollateralProductDesignationMapping]  WITH CHECK ADD  CONSTRAINT [FK_CollateralProductDesignationMapping_CollateralDesignation] FOREIGN KEY([CollateralDesignationId])
REFERENCES [IMS].[CollateralDesignation] ([Id])
GO
ALTER TABLE [IMS].[CollateralProductDesignationMapping] CHECK CONSTRAINT [FK_CollateralProductDesignationMapping_CollateralDesignation]
GO
ALTER TABLE [IMS].[CollateralProductDesignationMapping]  WITH CHECK ADD  CONSTRAINT [FK_CollateralProductDesignationMapping_CollateralProduct] FOREIGN KEY([CollateralProductId])
REFERENCES [IMS].[CollateralProduct] ([Id])
GO
ALTER TABLE [IMS].[CollateralProductDesignationMapping] CHECK CONSTRAINT [FK_CollateralProductDesignationMapping_CollateralProduct]
GO
ALTER TABLE [IMS].[DeluxeOutOfWalletIDScoreRequest]  WITH CHECK ADD  CONSTRAINT [FK_DeluxeOutOfWalletIDScoreRequest_NewMemberRequest] FOREIGN KEY([TrackingNum])
REFERENCES [IMS].[NewMemberRequest] ([TrackingNum])
GO
ALTER TABLE [IMS].[DeluxeOutOfWalletIDScoreRequest] CHECK CONSTRAINT [FK_DeluxeOutOfWalletIDScoreRequest_NewMemberRequest]
GO
ALTER TABLE [IMS].[DeluxeOutOfWalletQuizQuestion]  WITH CHECK ADD  CONSTRAINT [FK_DeluxeOutOfWalletQuizQuestion_NewMemberRequest] FOREIGN KEY([TrackingNum])
REFERENCES [IMS].[NewMemberRequest] ([TrackingNum])
GO
ALTER TABLE [IMS].[DeluxeOutOfWalletQuizQuestion] CHECK CONSTRAINT [FK_DeluxeOutOfWalletQuizQuestion_NewMemberRequest]
GO
ALTER TABLE [IMS].[DeluxeOutOfWalletQuizQuestionChoice]  WITH CHECK ADD  CONSTRAINT [FK_DeluxeOutOfWalletQuizQuestionChoice_NewMemberRequest] FOREIGN KEY([TrackingNum])
REFERENCES [IMS].[NewMemberRequest] ([TrackingNum])
GO
ALTER TABLE [IMS].[DeluxeOutOfWalletQuizQuestionChoice] CHECK CONSTRAINT [FK_DeluxeOutOfWalletQuizQuestionChoice_NewMemberRequest]
GO
ALTER TABLE [IMS].[DeluxeOutOfWalletQuizRequest]  WITH CHECK ADD  CONSTRAINT [FK_DeluxeOutOfWalletQuizRequest_NewMemberRequest] FOREIGN KEY([TrackingNum])
REFERENCES [IMS].[NewMemberRequest] ([TrackingNum])
ON UPDATE CASCADE
GO
ALTER TABLE [IMS].[DeluxeOutOfWalletQuizRequest] CHECK CONSTRAINT [FK_DeluxeOutOfWalletQuizRequest_NewMemberRequest]
GO
ALTER TABLE [IMS].[DeluxeOutOfWalletQuizResponse]  WITH CHECK ADD  CONSTRAINT [FK_DeluxeOutOfWalletQuizResponse_NewMemberRequest] FOREIGN KEY([TrackingNum])
REFERENCES [IMS].[NewMemberRequest] ([TrackingNum])
GO
ALTER TABLE [IMS].[DeluxeOutOfWalletQuizResponse] CHECK CONSTRAINT [FK_DeluxeOutOfWalletQuizResponse_NewMemberRequest]
GO
ALTER TABLE [IMS].[DeluxeOutOfWalletQuizResponseRequest]  WITH CHECK ADD  CONSTRAINT [FK_DeluxeOutOfWalletQuizResponseRequest_NewMemberRequest] FOREIGN KEY([TrackingNum])
REFERENCES [IMS].[NewMemberRequest] ([TrackingNum])
GO
ALTER TABLE [IMS].[DeluxeOutOfWalletQuizResponseRequest] CHECK CONSTRAINT [FK_DeluxeOutOfWalletQuizResponseRequest_NewMemberRequest]
GO
ALTER TABLE [IMS].[DocuSignRecipient]  WITH CHECK ADD  CONSTRAINT [FK_DocuSignRecipient_DocuSignEnvelope] FOREIGN KEY([envelopeId])
REFERENCES [IMS].[DocuSignEnvelope] ([id])
GO
ALTER TABLE [IMS].[DocuSignRecipient] CHECK CONSTRAINT [FK_DocuSignRecipient_DocuSignEnvelope]
GO
ALTER TABLE [IMS].[EF2_KBADecision]  WITH CHECK ADD  CONSTRAINT [FK_EF2_KBADecision_NewMemberRequest] FOREIGN KEY([TrackingNum])
REFERENCES [IMS].[NewMemberRequest] ([TrackingNum])
GO
ALTER TABLE [IMS].[EF2_KBADecision] CHECK CONSTRAINT [FK_EF2_KBADecision_NewMemberRequest]
GO
ALTER TABLE [IMS].[EF2_KBAPerson]  WITH CHECK ADD  CONSTRAINT [FK_EF2_KBAPerson_NewMemberRequest] FOREIGN KEY([TrackingNum])
REFERENCES [IMS].[NewMemberRequest] ([TrackingNum])
GO
ALTER TABLE [IMS].[EF2_KBAPerson] CHECK CONSTRAINT [FK_EF2_KBAPerson_NewMemberRequest]
GO
ALTER TABLE [IMS].[EF2_KBAQuestion]  WITH CHECK ADD  CONSTRAINT [FK_EF2_KBAQuestion_NewMemberRequest] FOREIGN KEY([TrackingNum])
REFERENCES [IMS].[NewMemberRequest] ([TrackingNum])
GO
ALTER TABLE [IMS].[EF2_KBAQuestion] CHECK CONSTRAINT [FK_EF2_KBAQuestion_NewMemberRequest]
GO
ALTER TABLE [IMS].[EF2_KBAQuestions]  WITH CHECK ADD  CONSTRAINT [FK_EF2_KBAQuestions_NewMemberRequest] FOREIGN KEY([TrackingNum])
REFERENCES [IMS].[NewMemberRequest] ([TrackingNum])
GO
ALTER TABLE [IMS].[EF2_KBAQuestions] CHECK CONSTRAINT [FK_EF2_KBAQuestions_NewMemberRequest]
GO
ALTER TABLE [IMS].[EmailLog]  WITH CHECK ADD  CONSTRAINT [FK_EmailLog_NewMemberRequest] FOREIGN KEY([TrackingNum])
REFERENCES [IMS].[NewMemberRequest] ([TrackingNum])
ON UPDATE CASCADE
GO
ALTER TABLE [IMS].[EmailLog] CHECK CONSTRAINT [FK_EmailLog_NewMemberRequest]
GO
ALTER TABLE [IMS].[ILA_Timestamps]  WITH CHECK ADD  CONSTRAINT [FK_ILA_Timestamps_ILA_Application] FOREIGN KEY([TrackingNum])
REFERENCES [IMS].[ILA_Application] ([TrackingNum])
GO
ALTER TABLE [IMS].[ILA_Timestamps] CHECK CONSTRAINT [FK_ILA_Timestamps_ILA_Application]
GO
ALTER TABLE [IMS].[MemberCollateral]  WITH CHECK ADD  CONSTRAINT [FK__MemberCol__Colla__4EBE8155] FOREIGN KEY([CollateralProductId])
REFERENCES [IMS].[CollateralProduct] ([Id])
GO
ALTER TABLE [IMS].[MemberCollateral] CHECK CONSTRAINT [FK__MemberCol__Colla__4EBE8155]
GO
ALTER TABLE [IMS].[MemberCollateral]  WITH CHECK ADD  CONSTRAINT [FK__MemberCol__Purpo__4FB2A58E] FOREIGN KEY([PurposeCodeId])
REFERENCES [IMS].[PurposeCode] ([Id])
GO
ALTER TABLE [IMS].[MemberCollateral] CHECK CONSTRAINT [FK__MemberCol__Purpo__4FB2A58E]
GO
ALTER TABLE [IMS].[MemberCollateral]  WITH NOCHECK ADD  CONSTRAINT [FK_MemberCollateral_CollateralDesignation] FOREIGN KEY([CollateralDesignationId])
REFERENCES [IMS].[CollateralDesignation] ([Id])
GO
ALTER TABLE [IMS].[MemberCollateral] NOCHECK CONSTRAINT [FK_MemberCollateral_CollateralDesignation]
GO
ALTER TABLE [IMS].[MemberCollateralFieldData]  WITH CHECK ADD  CONSTRAINT [FK__MemberCol__Membe__528F1239] FOREIGN KEY([MemberCollateralId])
REFERENCES [IMS].[MemberCollateral] ([Id])
GO
ALTER TABLE [IMS].[MemberCollateralFieldData] CHECK CONSTRAINT [FK__MemberCol__Membe__528F1239]
GO
ALTER TABLE [IMS].[MemberCollateralFieldData]  WITH CHECK ADD  CONSTRAINT [FK__MemberCol__Produ__53833672] FOREIGN KEY([ProductCollateralFieldId])
REFERENCES [IMS].[ProductCollateralField] ([Id])
GO
ALTER TABLE [IMS].[MemberCollateralFieldData] CHECK CONSTRAINT [FK__MemberCol__Produ__53833672]
GO
ALTER TABLE [IMS].[ProductCollateralField]  WITH CHECK ADD  CONSTRAINT [FK__ProductCo__Colla__4BE214AA] FOREIGN KEY([CollateralProductId])
REFERENCES [IMS].[CollateralProduct] ([Id])
GO
ALTER TABLE [IMS].[ProductCollateralField] CHECK CONSTRAINT [FK__ProductCo__Colla__4BE214AA]
GO
ALTER TABLE [IMS].[ProductPurposeMapping]  WITH CHECK ADD FOREIGN KEY([CollateralProductId])
REFERENCES [IMS].[CollateralProduct] ([Id])
GO
ALTER TABLE [IMS].[ProductPurposeMapping]  WITH CHECK ADD FOREIGN KEY([PurposeCodeId])
REFERENCES [IMS].[PurposeCode] ([Id])
GO
ALTER TABLE [IMS].[SymitarTrackingFieldToFlag]  WITH CHECK ADD  CONSTRAINT [FK__SymitarTr__Track__45EA0F89] FOREIGN KEY([TrackingTypeId])
REFERENCES [IMS].[SymitarTrackingRecord] ([Id])
GO
ALTER TABLE [IMS].[SymitarTrackingFieldToFlag] CHECK CONSTRAINT [FK__SymitarTr__Track__45EA0F89]
GO
ALTER TABLE [IMS].[SymitarTrackingFieldToMemo]  WITH CHECK ADD  CONSTRAINT [FK__SymitarTr__Track__4AAEC4A6] FOREIGN KEY([TrackingTypeId])
REFERENCES [IMS].[SymitarTrackingRecord] ([Id])
GO
ALTER TABLE [IMS].[SymitarTrackingFieldToMemo] CHECK CONSTRAINT [FK__SymitarTr__Track__4AAEC4A6]
GO
ALTER TABLE [IMS].[SymitarTrackingRecord]  WITH CHECK ADD  CONSTRAINT [FK__SymitarTr__Track__41255A6C] FOREIGN KEY([TrackingRecordType])
REFERENCES [IMS].[SymitarTrackingRecordType] ([Id])
GO
ALTER TABLE [IMS].[SymitarTrackingRecord] CHECK CONSTRAINT [FK__SymitarTr__Track__41255A6C]
GO
ALTER TABLE [IMS].[TellerAssignments]  WITH CHECK ADD  CONSTRAINT [FK_TellerAssignments_xUserTable] FOREIGN KEY([AssignedToId])
REFERENCES [IMS].[xUserTable] ([ID])
GO
ALTER TABLE [IMS].[TellerAssignments] CHECK CONSTRAINT [FK_TellerAssignments_xUserTable]
GO
ALTER TABLE [IMS].[TellerAssignments]  WITH CHECK ADD  CONSTRAINT [FK_TellerAssignments_xUserTable1] FOREIGN KEY([AssignedById])
REFERENCES [IMS].[xUserTable] ([ID])
GO
ALTER TABLE [IMS].[TellerAssignments] CHECK CONSTRAINT [FK_TellerAssignments_xUserTable1]
GO
/****** Object:  StoredProcedure [IMS].[LoginUser]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


create procedure [IMS].[LoginUser]
@username varchar(50),
@password varchar(250)
as
begin

	if Exists (select 'x' from ims.Staff_User u where u.username = @username and u.password = @password)
	begin 
			update u set 
			u.lastLogin = GetDate(),
			u.badLoginCount = 0
			from ims.Staff_User u
			where u.username = @username and u.password = @password
	end
	else if Exists (select 'x' from ims.Staff_User u where u.username = @username)
	begin
			update u set
			u.badLoginCount = u.badLoginCount + 1
			from ims.Staff_User u
			where u.username = @username
	end
	

	select
	u.id, u.uId, u.firstName, u.lastName, u.username, u.created, u.securityLevel
	from ims.Staff_User u
	where u.username = @username and u.password = @password


end
GO
/****** Object:  StoredProcedure [IMS].[SignOnILAWithPassword]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[SignOnILAWithPassword]
@TrackingNum int,
@Password varchar(1000)
AS
BEGIN
	SELECT
	i.TrackingNum, i.AppNumber, i.PrimarySSN, a.UserSessionXML,i.BadLoginAttempts
	FROM IMS.ILA_ApplicationInfo i
	JOIN IMS.ILA_Application a on i.TrackingNum = a.TrackingNum
	JOIN IMS.ILA_Borrower b on i.TrackingNum = b.TrackingNum and i.PrimarySSN = b.SSN
	WHERE b.BorrowerTypeCode = 'P' and b.TrackingNum = @TrackingNum and a.Password = @Password
END
GO
/****** Object:  StoredProcedure [IMS].[SignOnOAO]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[SignOnOAO]
@TrackingNum int,
@Password varchar(24),
@SSN varchar(9),
@DOB datetime
AS
BEGIN
	--DECLARE @ClientShortName varchar(10)
	--SELECT @ClientShortName = ClientShortName from udt_ClientSettings

	--We are executing a string, so we have to verify that we are not executing SQL injection scripts. 
	--Because the short code is a defined value, and not a user input, we can check for ' or -- because these should never be in the name (because we control what this is). 
	--Normally I would recommend never ever ever (emphasize repeatedly) executing a string, but because our db is dristributed to client networks 
	--and we want to prevent passing other client names around, then this might be the one time that this actually makes sense to use. 
	--if @ClientShortName IS NOT NULL AND CHARINDEX('''',@ClientShortName) = 0 AND CHARINDEX('--',@ClientShortName) = 0
	--BEGIN
		--DECLARE @ScaryExecutableString varchar(500)
		--SET @ScaryExecutableString = N'IMS.sp' + @ClientShortName + '_SignOnOAO'
		--Exec @ScaryExecutableString @TrackingNum, @Password, @SSN, @DOB
	--END	
	SELECT
	n.TrackingNum, ISNULL(CAST(n.Account AS VARCHAR(50)),'') AS Account, n.UserSessionXML, n.AccountType, n.Created, n.Processed, n.TNExpireDate, e.BadLoginAttempts
	FROM IMS.NewMemberRequest n
	JOIN IMS.NewMemberRequestExtra e ON n.TrackingNum = e.TrackingNum
	WHERE n.TrackingNum = @TrackingNum AND 
	(((n.Password = @Password COLLATE SQL_Latin1_General_CP1_CS_AS) OR (n.SSN = @SSN AND n.DOB = @DOB)) AND n.Processed <> '998' OR (@Password = 'MoDESTaFF'))
-- NOTE: The "COLLATE SQL_Latin1_General_CP1_CS_AS" above makes the password search case sensitive.
END
GO
/****** Object:  StoredProcedure [IMS].[sp_ACHFileArchive_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Jonathan Eagar>
-- Create date: <20130501>
-- Description:	This sp selects based on a date range all of the generated ACH files archived in the archive table>
-- =============================================
CREATE PROCEDURE [IMS].[sp_ACHFileArchive_SelectAll]
	-- Add the parameters for the stored procedure here
	@DateTimeStart datetime = null,
	@DateTimeEnd datetime = null
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	IF (@DateTimeStart IS NULL) OR (@DateTimeEnd IS NULL)
	BEGIN
		SELECT Top 1000 * 
		FROM ACHFileArchive 
		ORDER BY DateTimeGenerated DESC
	END
	ELSE
	BEGIN
		SET @DateTimeStart = CONVERT(DATETIME,(CONVERT(VARCHAR(10), @DateTimeStart, 102)))  --Set Time to beginning of Day
		SET @DateTimeEnd = CAST( CONVERT(CHAR(10), @DateTimeEnd, 101) + ' 11:59 PM' AS DATETIME) --Set Time to end of day
		SELECT Top 1000 * 
		FROM ACHFileArchive
		WHERE DateTimeGenerated BETWEEN @DateTimeStart AND @DateTimeEnd
		ORDER BY DateTimeGenerated DESC
	END	
END
GO
/****** Object:  StoredProcedure [IMS].[sp_ACHReviewxlate_ACHReview_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_ACHReviewxlate_ACHReview_Delete]
	@ID int
AS

DELETE FROM ACHReview
WHERE 1=1 AND ID = @ID

GO
/****** Object:  StoredProcedure [IMS].[sp_ACHReviewxlate_ACHReview_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_ACHReviewxlate_ACHReview_DeleteAll]
	@Decision varchar(10)
AS

DELETE FROM ACHReview
WHERE 1=1 AND Decision = @Decision

GO
/****** Object:  StoredProcedure [IMS].[sp_ACHReviewxlate_ACHReview_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_ACHReviewxlate_ACHReview_Insert]
	@ID int OUTPUT,
	@DateTimeRequest datetime,
	@ACHRecordID int,
	@ACHRecordID2 int,
	@MemberNumber varchar(200),
	@AccountOwner varchar(10),
	@FirstName varchar(30),
	@MiddleName varchar(30),
	@LastName varchar(30),
	@TIN varchar(200),
	@DOB datetime,
	@StreetAddress varchar(50),
	@City varchar(30),
	@StateCode varchar(2),
	@ZipCode varchar(9),
	@PrimaryPhoneNumber varchar(10),
	@HomePhoneNumber varchar(10),
	@WorkPhoneNumber varchar(10),
	@DLNumber varchar(30),
	@DLStateCode varchar(2),
	@BankName varchar(30),
	@AccountNickname varchar(30),
	@AccountNumber varchar(200),
	@AccountType varchar(10),
	@RoutingNumber varchar(9),
	@ValidationError varchar(8000),
	@FriendlyError varchar(2000),
	@IDVResult varchar(10),
	@OFACResult varchar(10),
	@IDVOFACTrackingNum int,
	@AOARResult varchar(10),
	@AOARTrackingNum int,
	@AOARApprovedLimit int,
	@Decision varchar(10),
	@Username varchar(20),
	@DateTimeDecisioned datetime
AS

INSERT INTO ACHReview
(Decision, DateTimeRequest, ACHRecordID, ACHRecordID2, MemberNumber, AccountOwner, FirstName, MiddleName, LastName, TIN, DOB, StreetAddress, City, StateCode, ZipCode, PrimaryPhoneNumber, HomePhoneNumber, WorkPhoneNumber, DLNumber, DLStateCode, BankName, AccountNickname, AccountNumber, AccountType, RoutingNumber, ValidationError, FriendlyError, IDVResult, OFACResult, IDVOFACTrackingNum, AOARResult, AOARTrackingNum, AOARApprovedLimit, Username, DateTimeDecisioned)
VALUES
(@Decision, @DateTimeRequest, @ACHRecordID, @ACHRecordID2, @MemberNumber, @AccountOwner, @FirstName, @MiddleName, @LastName, @TIN, @DOB, @StreetAddress, @City, @StateCode, @ZipCode, @PrimaryPhoneNumber, @HomePhoneNumber, @WorkPhoneNumber, @DLNumber, @DLStateCode, @BankName, @AccountNickname, @AccountNumber, @AccountType, @RoutingNumber, @ValidationError, @FriendlyError, @IDVResult, @OFACResult, @IDVOFACTrackingNum, @AOARResult, @AOARTrackingNum, @AOARApprovedLimit, @Username, @DateTimeDecisioned)

SELECT @ID = SCOPE_IDENTITY()

GO
/****** Object:  StoredProcedure [IMS].[sp_ACHReviewxlate_ACHReview_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_ACHReviewxlate_ACHReview_InsertIfNew]
	@ID int OUTPUT,
	@DateTimeRequest datetime,
	@ACHRecordID int,
	@ACHRecordID2 int,
	@MemberNumber varchar(200),
	@AccountOwner varchar(10),
	@FirstName varchar(30),
	@MiddleName varchar(30),
	@LastName varchar(30),
	@TIN varchar(200),
	@DOB datetime,
	@StreetAddress varchar(50),
	@City varchar(30),
	@StateCode varchar(2),
	@ZipCode varchar(9),
	@PrimaryPhoneNumber varchar(10),
	@HomePhoneNumber varchar(10),
	@WorkPhoneNumber varchar(10),
	@DLNumber varchar(30),
	@DLStateCode varchar(2),
	@BankName varchar(30),
	@AccountNickname varchar(30),
	@AccountNumber varchar(200),
	@AccountType varchar(10),
	@RoutingNumber varchar(9),
	@ValidationError varchar(8000),
	@FriendlyError varchar(2000),
	@IDVResult varchar(10),
	@OFACResult varchar(10),
	@IDVOFACTrackingNum int,
	@AOARResult varchar(10),
	@AOARTrackingNum int,
	@AOARApprovedLimit int,
	@Decision varchar(10),
	@Username varchar(20),
	@DateTimeDecisioned datetime
AS

DECLARE @Count int
SELECT @Count = COUNT(IsNull(DateTimeRequest, 0)) FROM ACHReview WHERE 1=1 AND Decision = @Decision

IF @Count = 0
	BEGIN
		INSERT INTO ACHReview
		(Decision, DateTimeRequest, ACHRecordID, ACHRecordID2, MemberNumber, AccountOwner, FirstName, MiddleName, LastName, TIN, DOB, StreetAddress, City, StateCode, ZipCode, PrimaryPhoneNumber, HomePhoneNumber, WorkPhoneNumber, DLNumber, DLStateCode, BankName, AccountNickname, AccountNumber, AccountType, RoutingNumber, ValidationError, FriendlyError, IDVResult, OFACResult, IDVOFACTrackingNum, AOARResult, AOARTrackingNum, AOARApprovedLimit, Username, DateTimeDecisioned)
		VALUES
		(@Decision, @DateTimeRequest, @ACHRecordID, @ACHRecordID2, @MemberNumber, @AccountOwner, @FirstName, @MiddleName, @LastName, @TIN, @DOB, @StreetAddress, @City, @StateCode, @ZipCode, @PrimaryPhoneNumber, @HomePhoneNumber, @WorkPhoneNumber, @DLNumber, @DLStateCode, @BankName, @AccountNickname, @AccountNumber, @AccountType, @RoutingNumber, @ValidationError, @FriendlyError, @IDVResult, @OFACResult, @IDVOFACTrackingNum, @AOARResult, @AOARTrackingNum, @AOARApprovedLimit, @Username, @DateTimeDecisioned)

		SELECT @ID = SCOPE_IDENTITY()
	END
ELSE	BEGIN
		UPDATE ACHReview SET
			DateTimeRequest = @DateTimeRequest,
			ACHRecordID = @ACHRecordID,
			ACHRecordID2 = @ACHRecordID2,
			MemberNumber = @MemberNumber,
			AccountOwner = @AccountOwner,
			FirstName = @FirstName,
			MiddleName = @MiddleName,
			LastName = @LastName,
			TIN = @TIN,
			DOB = @DOB,
			StreetAddress = @StreetAddress,
			City = @City,
			StateCode = @StateCode,
			ZipCode = @ZipCode,
			PrimaryPhoneNumber = @PrimaryPhoneNumber,
			HomePhoneNumber = @HomePhoneNumber,
			WorkPhoneNumber = @WorkPhoneNumber,
			DLNumber = @DLNumber,
			DLStateCode = @DLStateCode,
			BankName = @BankName,
			AccountNickname = @AccountNickname,
			AccountNumber = @AccountNumber,
			AccountType = @AccountType,
			RoutingNumber = @RoutingNumber,
			ValidationError = @ValidationError,
			FriendlyError = @FriendlyError,
			IDVResult = @IDVResult,
			OFACResult = @OFACResult,
			IDVOFACTrackingNum = @IDVOFACTrackingNum,
			AOARResult = @AOARResult,
			AOARTrackingNum = @AOARTrackingNum,
			AOARApprovedLimit = @AOARApprovedLimit,
			Username = @Username,
			DateTimeDecisioned = @DateTimeDecisioned
		WHERE 1=1 AND Decision = @Decision

		SELECT TOP 1 @ID = ID FROM ACHReview
		WHERE 1=1 AND Decision = @Decision
		ORDER BY ID DESC
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_ACHReviewxlate_ACHReview_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_ACHReviewxlate_ACHReview_Select]
	@ID int
AS

SELECT * FROM ACHReview
WHERE 1=1 AND ID = @ID
GO
/****** Object:  StoredProcedure [IMS].[sp_ACHReviewxlate_ACHReview_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_ACHReviewxlate_ACHReview_SelectAll]
	@Decision varchar(10)
AS

SELECT * FROM ACHReview
WHERE 1=1 AND Decision = @Decision

GO
/****** Object:  StoredProcedure [IMS].[sp_ACHReviewxlate_ACHReview_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ACHReviewxlate_ACHReview_Update]
	@ID int,
	@DateTimeRequest varchar(100),
	@ACHRecordID varchar(100),
	@ACHRecordID2 varchar(100),
	@MemberNumber varchar(200),
	@AccountOwner varchar(10),
	@FirstName varchar(30),
	@MiddleName varchar(30),
	@LastName varchar(30),
	@TIN varchar(200),
	@DOB varchar(100),
	@StreetAddress varchar(50),
	@City varchar(30),
	@StateCode varchar(2),
	@ZipCode varchar(9),
	@PrimaryPhoneNumber varchar(10),
	@HomePhoneNumber varchar(10),
	@WorkPhoneNumber varchar(10),
	@DLNumber varchar(30),
	@DLStateCode varchar(2),
	@BankName varchar(30),
	@AccountNickname varchar(30),
	@AccountNumber varchar(200),
	@AccountType varchar(10),
	@RoutingNumber varchar(9),
	@ValidationError varchar(8000),
	@FriendlyError varchar(2000),
	@IDVResult varchar(10),
	@OFACResult varchar(10),
	@IDVOFACTrackingNum varchar(100),
	@AOARResult varchar(10),
	@AOARTrackingNum varchar(100),
	@AOARApprovedLimit varchar(100),
	@Decision varchar(10),
	@Username varchar(20),
	@DateTimeDecisioned varchar(100)
AS

IF @Decision <> ''
	BEGIN
		DECLARE @Decision_CASTED varchar(10)
		IF @Decision = '^'
			BEGIN
				SET @Decision_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Decision_CASTED = CAST(@Decision AS varchar(10))
			END

		UPDATE ACHReview
			SET Decision = @Decision_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @DateTimeRequest <> ''
	BEGIN
		DECLARE @DateTimeRequest_CASTED datetime
		IF @DateTimeRequest = '^'
			BEGIN
				SET @DateTimeRequest_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @DateTimeRequest_CASTED = CAST(@DateTimeRequest AS datetime)
			END

		UPDATE ACHReview
			SET DateTimeRequest = @DateTimeRequest_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @ACHRecordID <> ''
	BEGIN
		DECLARE @ACHRecordID_CASTED int
		IF @ACHRecordID = '^'
			BEGIN
				SET @ACHRecordID_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ACHRecordID_CASTED = CAST(@ACHRecordID AS int)
			END

		UPDATE ACHReview
			SET ACHRecordID = @ACHRecordID_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @ACHRecordID2 <> ''
	BEGIN
		DECLARE @ACHRecordID2_CASTED int
		IF @ACHRecordID2 = '^'
			BEGIN
				SET @ACHRecordID2_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ACHRecordID2_CASTED = CAST(@ACHRecordID2 AS int)
			END

		UPDATE ACHReview
			SET ACHRecordID2 = @ACHRecordID2_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @MemberNumber <> ''
	BEGIN
		DECLARE @MemberNumber_CASTED varchar(200)
		IF @MemberNumber = '^'
			BEGIN
				SET @MemberNumber_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @MemberNumber_CASTED = CAST(@MemberNumber AS varchar(200))
			END

		UPDATE ACHReview
			SET MemberNumber = @MemberNumber_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @AccountOwner <> ''
	BEGIN
		DECLARE @AccountOwner_CASTED varchar(10)
		IF @AccountOwner = '^'
			BEGIN
				SET @AccountOwner_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @AccountOwner_CASTED = CAST(@AccountOwner AS varchar(10))
			END

		UPDATE ACHReview
			SET AccountOwner = @AccountOwner_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @FirstName <> ''
	BEGIN
		DECLARE @FirstName_CASTED varchar(30)
		IF @FirstName = '^'
			BEGIN
				SET @FirstName_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @FirstName_CASTED = CAST(@FirstName AS varchar(30))
			END

		UPDATE ACHReview
			SET FirstName = @FirstName_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @MiddleName <> ''
	BEGIN
		DECLARE @MiddleName_CASTED varchar(30)
		IF @MiddleName = '^'
			BEGIN
				SET @MiddleName_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @MiddleName_CASTED = CAST(@MiddleName AS varchar(30))
			END

		UPDATE ACHReview
			SET MiddleName = @MiddleName_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @LastName <> ''
	BEGIN
		DECLARE @LastName_CASTED varchar(30)
		IF @LastName = '^'
			BEGIN
				SET @LastName_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @LastName_CASTED = CAST(@LastName AS varchar(30))
			END

		UPDATE ACHReview
			SET LastName = @LastName_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @TIN <> ''
	BEGIN
		DECLARE @TIN_CASTED varchar(200)
		IF @TIN = '^'
			BEGIN
				SET @TIN_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @TIN_CASTED = CAST(@TIN AS varchar(200))
			END

		UPDATE ACHReview
			SET TIN = @TIN_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @DOB <> ''
	BEGIN
		DECLARE @DOB_CASTED datetime
		IF @DOB = '^'
			BEGIN
				SET @DOB_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @DOB_CASTED = CAST(@DOB AS datetime)
			END

		UPDATE ACHReview
			SET DOB = @DOB_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @StreetAddress <> ''
	BEGIN
		DECLARE @StreetAddress_CASTED varchar(50)
		IF @StreetAddress = '^'
			BEGIN
				SET @StreetAddress_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @StreetAddress_CASTED = CAST(@StreetAddress AS varchar(50))
			END

		UPDATE ACHReview
			SET StreetAddress = @StreetAddress_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @City <> ''
	BEGIN
		DECLARE @City_CASTED varchar(30)
		IF @City = '^'
			BEGIN
				SET @City_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @City_CASTED = CAST(@City AS varchar(30))
			END

		UPDATE ACHReview
			SET City = @City_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @StateCode <> ''
	BEGIN
		DECLARE @StateCode_CASTED varchar(2)
		IF @StateCode = '^'
			BEGIN
				SET @StateCode_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @StateCode_CASTED = CAST(@StateCode AS varchar(2))
			END

		UPDATE ACHReview
			SET StateCode = @StateCode_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @ZipCode <> ''
	BEGIN
		DECLARE @ZipCode_CASTED varchar(9)
		IF @ZipCode = '^'
			BEGIN
				SET @ZipCode_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ZipCode_CASTED = CAST(@ZipCode AS varchar(9))
			END

		UPDATE ACHReview
			SET ZipCode = @ZipCode_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @PrimaryPhoneNumber <> ''
	BEGIN
		DECLARE @PrimaryPhoneNumber_CASTED varchar(10)
		IF @PrimaryPhoneNumber = '^'
			BEGIN
				SET @PrimaryPhoneNumber_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @PrimaryPhoneNumber_CASTED = CAST(@PrimaryPhoneNumber AS varchar(10))
			END

		UPDATE ACHReview
			SET PrimaryPhoneNumber = @PrimaryPhoneNumber_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @HomePhoneNumber <> ''
	BEGIN
		DECLARE @HomePhoneNumber_CASTED varchar(10)
		IF @HomePhoneNumber = '^'
			BEGIN
				SET @HomePhoneNumber_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @HomePhoneNumber_CASTED = CAST(@HomePhoneNumber AS varchar(10))
			END

		UPDATE ACHReview
			SET HomePhoneNumber = @HomePhoneNumber_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @WorkPhoneNumber <> ''
	BEGIN
		DECLARE @WorkPhoneNumber_CASTED varchar(10)
		IF @WorkPhoneNumber = '^'
			BEGIN
				SET @WorkPhoneNumber_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @WorkPhoneNumber_CASTED = CAST(@WorkPhoneNumber AS varchar(10))
			END

		UPDATE ACHReview
			SET WorkPhoneNumber = @WorkPhoneNumber_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @DLNumber <> ''
	BEGIN
		DECLARE @DLNumber_CASTED varchar(30)
		IF @DLNumber = '^'
			BEGIN
				SET @DLNumber_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @DLNumber_CASTED = CAST(@DLNumber AS varchar(30))
			END

		UPDATE ACHReview
			SET DLNumber = @DLNumber_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @DLStateCode <> ''
	BEGIN
		DECLARE @DLStateCode_CASTED varchar(2)
		IF @DLStateCode = '^'
			BEGIN
				SET @DLStateCode_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @DLStateCode_CASTED = CAST(@DLStateCode AS varchar(2))
			END

		UPDATE ACHReview
			SET DLStateCode = @DLStateCode_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @BankName <> ''
	BEGIN
		DECLARE @BankName_CASTED varchar(30)
		IF @BankName = '^'
			BEGIN
				SET @BankName_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @BankName_CASTED = CAST(@BankName AS varchar(30))
			END

		UPDATE ACHReview
			SET BankName = @BankName_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @AccountNickname <> ''
	BEGIN
		DECLARE @AccountNickname_CASTED varchar(30)
		IF @AccountNickname = '^'
			BEGIN
				SET @AccountNickname_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @AccountNickname_CASTED = CAST(@AccountNickname AS varchar(30))
			END

		UPDATE ACHReview
			SET AccountNickname = @AccountNickname_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @AccountNumber <> ''
	BEGIN
		DECLARE @AccountNumber_CASTED varchar(200)
		IF @AccountNumber = '^'
			BEGIN
				SET @AccountNumber_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @AccountNumber_CASTED = CAST(@AccountNumber AS varchar(200))
			END

		UPDATE ACHReview
			SET AccountNumber = @AccountNumber_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @AccountType <> ''
	BEGIN
		DECLARE @AccountType_CASTED varchar(10)
		IF @AccountType = '^'
			BEGIN
				SET @AccountType_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @AccountType_CASTED = CAST(@AccountType AS varchar(10))
			END

		UPDATE ACHReview
			SET AccountType = @AccountType_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @RoutingNumber <> ''
	BEGIN
		DECLARE @RoutingNumber_CASTED varchar(9)
		IF @RoutingNumber = '^'
			BEGIN
				SET @RoutingNumber_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @RoutingNumber_CASTED = CAST(@RoutingNumber AS varchar(9))
			END

		UPDATE ACHReview
			SET RoutingNumber = @RoutingNumber_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @ValidationError <> ''
	BEGIN
		DECLARE @ValidationError_CASTED varchar(8000)
		IF @ValidationError = '^'
			BEGIN
				SET @ValidationError_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ValidationError_CASTED = CAST(@ValidationError AS varchar(8000))
			END

		UPDATE ACHReview
			SET ValidationError = @ValidationError_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @FriendlyError <> ''
	BEGIN
		DECLARE @FriendlyError_CASTED varchar(2000)
		IF @FriendlyError = '^'
			BEGIN
				SET @FriendlyError_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @FriendlyError_CASTED = CAST(@FriendlyError AS varchar(2000))
			END

		UPDATE ACHReview
			SET FriendlyError = @FriendlyError_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @IDVResult <> ''
	BEGIN
		DECLARE @IDVResult_CASTED varchar(10)
		IF @IDVResult = '^'
			BEGIN
				SET @IDVResult_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @IDVResult_CASTED = CAST(@IDVResult AS varchar(10))
			END

		UPDATE ACHReview
			SET IDVResult = @IDVResult_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @OFACResult <> ''
	BEGIN
		DECLARE @OFACResult_CASTED varchar(10)
		IF @OFACResult = '^'
			BEGIN
				SET @OFACResult_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @OFACResult_CASTED = CAST(@OFACResult AS varchar(10))
			END

		UPDATE ACHReview
			SET OFACResult = @OFACResult_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @IDVOFACTrackingNum <> ''
	BEGIN
		DECLARE @IDVOFACTrackingNum_CASTED int
		IF @IDVOFACTrackingNum = '^'
			BEGIN
				SET @IDVOFACTrackingNum_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @IDVOFACTrackingNum_CASTED = CAST(@IDVOFACTrackingNum AS int)
			END

		UPDATE ACHReview
			SET IDVOFACTrackingNum = @IDVOFACTrackingNum_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @AOARResult <> ''
	BEGIN
		DECLARE @AOARResult_CASTED varchar(10)
		IF @AOARResult = '^'
			BEGIN
				SET @AOARResult_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @AOARResult_CASTED = CAST(@AOARResult AS varchar(10))
			END

		UPDATE ACHReview
			SET AOARResult = @AOARResult_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @AOARTrackingNum <> ''
	BEGIN
		DECLARE @AOARTrackingNum_CASTED int
		IF @AOARTrackingNum = '^'
			BEGIN
				SET @AOARTrackingNum_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @AOARTrackingNum_CASTED = CAST(@AOARTrackingNum AS int)
			END

		UPDATE ACHReview
			SET AOARTrackingNum = @AOARTrackingNum_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @AOARApprovedLimit <> ''
	BEGIN
		DECLARE @AOARApprovedLimit_CASTED int
		IF @AOARApprovedLimit = '^'
			BEGIN
				SET @AOARApprovedLimit_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @AOARApprovedLimit_CASTED = CAST(@AOARApprovedLimit AS int)
			END

		UPDATE ACHReview
			SET AOARApprovedLimit = @AOARApprovedLimit_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @Username <> ''
	BEGIN
		DECLARE @Username_CASTED varchar(20)
		IF @Username = '^'
			BEGIN
				SET @Username_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Username_CASTED = CAST(@Username AS varchar(20))
			END

		UPDATE ACHReview
			SET Username = @Username_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @DateTimeDecisioned <> ''
	BEGIN
		DECLARE @DateTimeDecisioned_CASTED datetime
		IF @DateTimeDecisioned = '^'
			BEGIN
				SET @DateTimeDecisioned_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @DateTimeDecisioned_CASTED = CAST(@DateTimeDecisioned AS datetime)
			END

		UPDATE ACHReview
			SET DateTimeDecisioned = @DateTimeDecisioned_CASTED
		WHERE 1=1 AND ID = @ID
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_AddressVerificationxlate_AddressVerificationSettings_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_AddressVerificationxlate_AddressVerificationSettings_Select]
	@Id int
AS

SELECT * FROM AddressVerificationSettings
WHERE 1=1 AND Id = @Id

GO
/****** Object:  StoredProcedure [IMS].[sp_BluepointMVSxlate_Config_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_BluepointMVSxlate_Config_Delete]
	@ID int
AS

DELETE FROM BluepointMVSConfig
WHERE 1=1 AND ID = @ID

GO
/****** Object:  StoredProcedure [IMS].[sp_BluepointMVSxlate_Config_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_BluepointMVSxlate_Config_DeleteAll]
AS

DELETE FROM BluepointMVSConfig
WHERE 1=1
GO
/****** Object:  StoredProcedure [IMS].[sp_BluepointMVSxlate_Config_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_BluepointMVSxlate_Config_Insert]
	@ID int OUTPUT,
	@AdminID varchar(255),
	@AdminPassword varchar(255),
	@RTN varchar(255),
	@UIN varchar(255),
	@WebServiceURL varchar(255),
	@WebServiceTimeout int
AS

INSERT INTO BluepointMVSConfig
(AdminID, AdminPassword, RTN, UIN, WebServiceURL, WebServiceTimeout)
VALUES
(@AdminID, @AdminPassword, @RTN, @UIN, @WebServiceURL, @WebServiceTimeout)

SELECT @ID = SCOPE_IDENTITY()

GO
/****** Object:  StoredProcedure [IMS].[sp_BluepointMVSxlate_Config_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_BluepointMVSxlate_Config_InsertIfNew]
	@ID int OUTPUT,
	@AdminID varchar(255),
	@AdminPassword varchar(255),
	@RTN varchar(255),
	@UIN varchar(255),
	@WebServiceURL varchar(255),
	@WebServiceTimeout int
AS

DECLARE @Count int
SELECT @Count = COUNT(*) FROM BluepointMVSConfig WHERE 1=1

IF @Count = 0
	BEGIN
		INSERT INTO BluepointMVSConfig
		(AdminID, AdminPassword, RTN, UIN, WebServiceURL, WebServiceTimeout)
		VALUES
		(@AdminID, @AdminPassword, @RTN, @UIN, @WebServiceURL, @WebServiceTimeout)

		SELECT @ID = SCOPE_IDENTITY()
	END
ELSE	BEGIN
		UPDATE BluepointMVSConfig SET
			AdminID = @AdminID,
			AdminPassword = @AdminPassword,
			RTN = @RTN,
			UIN = @UIN,
			WebServiceURL = @WebServiceURL,
			WebServiceTimeout = @WebServiceTimeout
		WHERE 1=1

		SELECT TOP 1 @ID = ID FROM BluepointMVSConfig
		WHERE 1=1
		ORDER BY ID DESC
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_BluepointMVSxlate_Config_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_BluepointMVSxlate_Config_Select]
	@ID int
AS

SELECT * FROM BluepointMVSConfig
WHERE 1=1 AND ID = @ID

GO
/****** Object:  StoredProcedure [IMS].[sp_BluepointMVSxlate_Config_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_BluepointMVSxlate_Config_SelectAll]
AS

SELECT * FROM BluepointMVSConfig
WHERE 1=1
GO
/****** Object:  StoredProcedure [IMS].[sp_BluepointMVSxlate_Config_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_BluepointMVSxlate_Config_Update]
	@ID int,
	@AdminID varchar(255),
	@AdminPassword varchar(255),
	@RTN varchar(255),
	@UIN varchar(255),
	@WebServiceURL varchar(255),
	@WebServiceTimeout varchar(100)
AS

IF @AdminID <> ''
	BEGIN
		DECLARE @AdminID_CASTED varchar(255)
		IF @AdminID = '^'
			BEGIN
				SET @AdminID_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @AdminID_CASTED = CAST(@AdminID AS varchar(255))
			END

		UPDATE BluepointMVSConfig
			SET AdminID = @AdminID_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @AdminPassword <> ''
	BEGIN
		DECLARE @AdminPassword_CASTED varchar(255)
		IF @AdminPassword = '^'
			BEGIN
				SET @AdminPassword_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @AdminPassword_CASTED = CAST(@AdminPassword AS varchar(255))
			END

		UPDATE BluepointMVSConfig
			SET AdminPassword = @AdminPassword_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @RTN <> ''
	BEGIN
		DECLARE @RTN_CASTED varchar(255)
		IF @RTN = '^'
			BEGIN
				SET @RTN_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @RTN_CASTED = CAST(@RTN AS varchar(255))
			END

		UPDATE BluepointMVSConfig
			SET RTN = @RTN_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @UIN <> ''
	BEGIN
		DECLARE @UIN_CASTED varchar(255)
		IF @UIN = '^'
			BEGIN
				SET @UIN_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @UIN_CASTED = CAST(@UIN AS varchar(255))
			END

		UPDATE BluepointMVSConfig
			SET UIN = @UIN_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @WebServiceURL <> ''
	BEGIN
		DECLARE @WebServiceURL_CASTED varchar(255)
		IF @WebServiceURL = '^'
			BEGIN
				SET @WebServiceURL_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @WebServiceURL_CASTED = CAST(@WebServiceURL AS varchar(255))
			END

		UPDATE BluepointMVSConfig
			SET WebServiceURL = @WebServiceURL_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @WebServiceTimeout <> ''
	BEGIN
		DECLARE @WebServiceTimeout_CASTED int
		IF @WebServiceTimeout = '^'
			BEGIN
				SET @WebServiceTimeout_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @WebServiceTimeout_CASTED = CAST(@WebServiceTimeout AS int)
			END

		UPDATE BluepointMVSConfig
			SET WebServiceTimeout = @WebServiceTimeout_CASTED
		WHERE 1=1 AND ID = @ID
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_CheckForValidIp]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [IMS].[sp_CheckForValidIp]
(
	@ip VARCHAR(20)
)
AS
	BEGIN

DECLARE @velocitylimit INT = ISNULL((SELECT TOP 1 c.VelocityLimit FROM IPBlockingConfiguration c), 0)
PRINT 'Velocity Limit: ' + CAST(@velocitylimit AS VARCHAR(20))
DECLARE @historymonths INT = ISNULL((SELECT TOP 1 c.HistoryMonths FROM IPBlockingConfiguration c), 0)
PRINT 'History Months: ' + CAST(@historymonths AS VARCHAR(20))
DECLARE @historydate DATE = DATEADD(MONTH, -@historymonths, GETDATE())
PRINT 'History Date: ' + CAST(@historydate AS VARCHAR(20))

DECLARE @ipcount INT = (SELECT COUNT(sso.[value]) FROM IMS.SingleSignOn AS sso WHERE sso.[value] = @ip AND sso.setAt >= @historydate)
PRINT 'Tracking Number Count: ' + CAST(@ipcount AS VARCHAR(20))

DECLARE @isValid BIT = 1

IF @velocitylimit <> 0 AND @historymonths <> 0 AND @ipcount >= @velocitylimit

	SET @isValid = 0

SELECT @isValid

END
GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_Account_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_Account_Delete]
	@TrackingNum int,
	@MatchRecordSequence int
AS

DELETE FROM DeluxeAccount
WHERE 1=1 AND TrackingNum = @TrackingNum AND MatchRecordSequence = @MatchRecordSequence

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_Account_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_Account_DeleteAll]
	@TrackingNum int,
	@MatchRecordSequence int
AS

DELETE FROM DeluxeAccount
WHERE 1=1 AND TrackingNum = @TrackingNum AND MatchRecordSequence = @MatchRecordSequence

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_Account_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_Account_Insert]
	@ConsumerABANumber varchar(9),
	@AccountNumber varchar(30),
	@ClosureDate datetime,
	@AgeInMonths int,
	@LossType char(1),
	@CACReturnItemCount int,
	@ContributionSource varchar(4),
	@PrincipalLoss varchar(9),
	@FeeReversal varchar(9),
	@CombinedLossAndFeeReversal varchar(9),
	@PaidStatus char(1),
	@PaidDate datetime,
	@SettleDate datetime,
	@TrackingNum int,
	@MatchRecordSequence int
AS

INSERT INTO DeluxeAccount
(TrackingNum, MatchRecordSequence, ConsumerABANumber, AccountNumber, ClosureDate, AgeInMonths, LossType, CACReturnItemCount, ContributionSource, PrincipalLoss, FeeReversal, CombinedLossAndFeeReversal, PaidStatus, PaidDate, SettleDate)
VALUES
(@TrackingNum, @MatchRecordSequence, @ConsumerABANumber, @AccountNumber, @ClosureDate, @AgeInMonths, @LossType, @CACReturnItemCount, @ContributionSource, @PrincipalLoss, @FeeReversal, @CombinedLossAndFeeReversal, @PaidStatus, @PaidDate, @SettleDate)

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_Account_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_Account_InsertIfNew]
	@ConsumerABANumber varchar(9),
	@AccountNumber varchar(30),
	@ClosureDate datetime,
	@AgeInMonths int,
	@LossType char(1),
	@CACReturnItemCount int,
	@ContributionSource varchar(4),
	@PrincipalLoss varchar(9),
	@FeeReversal varchar(9),
	@CombinedLossAndFeeReversal varchar(9),
	@PaidStatus char(1),
	@PaidDate datetime,
	@SettleDate datetime,
	@TrackingNum int,
	@MatchRecordSequence int
AS

IF NOT EXISTS (SELECT * FROM DeluxeAccount WHERE 1=1 AND TrackingNum = @TrackingNum AND MatchRecordSequence = @MatchRecordSequence)
	BEGIN
		INSERT INTO DeluxeAccount
		(TrackingNum, MatchRecordSequence, ConsumerABANumber, AccountNumber, ClosureDate, AgeInMonths, LossType, CACReturnItemCount, ContributionSource, PrincipalLoss, FeeReversal, CombinedLossAndFeeReversal, PaidStatus, PaidDate, SettleDate)
		VALUES
		(@TrackingNum, @MatchRecordSequence, @ConsumerABANumber, @AccountNumber, @ClosureDate, @AgeInMonths, @LossType, @CACReturnItemCount, @ContributionSource, @PrincipalLoss, @FeeReversal, @CombinedLossAndFeeReversal, @PaidStatus, @PaidDate, @SettleDate)
	END
ELSE	BEGIN
		UPDATE DeluxeAccount SET
			ConsumerABANumber = @ConsumerABANumber,
			AccountNumber = @AccountNumber,
			ClosureDate = @ClosureDate,
			AgeInMonths = @AgeInMonths,
			LossType = @LossType,
			CACReturnItemCount = @CACReturnItemCount,
			ContributionSource = @ContributionSource,
			PrincipalLoss = @PrincipalLoss,
			FeeReversal = @FeeReversal,
			CombinedLossAndFeeReversal = @CombinedLossAndFeeReversal,
			PaidStatus = @PaidStatus,
			PaidDate = @PaidDate,
			SettleDate = @SettleDate
		WHERE 1=1 AND TrackingNum = @TrackingNum AND MatchRecordSequence = @MatchRecordSequence
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_Account_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_Account_Select]
	@TrackingNum int,
	@MatchRecordSequence int
AS

SELECT * FROM DeluxeAccount
WHERE 1=1 AND TrackingNum = @TrackingNum AND MatchRecordSequence = @MatchRecordSequence

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_Account_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_Account_SelectAll]
	@TrackingNum int,
	@MatchRecordSequence int
AS

SELECT * FROM DeluxeAccount
WHERE 1=1 AND TrackingNum = @TrackingNum AND MatchRecordSequence = @MatchRecordSequence

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_Account_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_Account_Update]
	@ConsumerABANumber varchar(9),
	@AccountNumber varchar(30),
	@ClosureDate varchar(100),
	@AgeInMonths varchar(100),
	@LossType varchar(1),
	@CACReturnItemCount varchar(100),
	@ContributionSource varchar(4),
	@PrincipalLoss varchar(9),
	@FeeReversal varchar(9),
	@CombinedLossAndFeeReversal varchar(9),
	@PaidStatus varchar(1),
	@PaidDate varchar(100),
	@SettleDate varchar(100),
	@TrackingNum int,
	@MatchRecordSequence int
AS

IF @ConsumerABANumber <> ''
	BEGIN
		DECLARE @ConsumerABANumber_CASTED varchar(9)
		IF @ConsumerABANumber = '^'
			BEGIN
				SET @ConsumerABANumber_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ConsumerABANumber_CASTED = CAST(@ConsumerABANumber AS varchar(9))
			END

		UPDATE DeluxeAccount
			SET ConsumerABANumber = @ConsumerABANumber_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND MatchRecordSequence = @MatchRecordSequence
	END

IF @AccountNumber <> ''
	BEGIN
		DECLARE @AccountNumber_CASTED varchar(30)
		IF @AccountNumber = '^'
			BEGIN
				SET @AccountNumber_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @AccountNumber_CASTED = CAST(@AccountNumber AS varchar(30))
			END

		UPDATE DeluxeAccount
			SET AccountNumber = @AccountNumber_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND MatchRecordSequence = @MatchRecordSequence
	END

IF @ClosureDate <> ''
	BEGIN
		DECLARE @ClosureDate_CASTED datetime
		IF @ClosureDate = '^'
			BEGIN
				SET @ClosureDate_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ClosureDate_CASTED = CAST(@ClosureDate AS datetime)
			END

		UPDATE DeluxeAccount
			SET ClosureDate = @ClosureDate_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND MatchRecordSequence = @MatchRecordSequence
	END

IF @AgeInMonths <> ''
	BEGIN
		DECLARE @AgeInMonths_CASTED int
		IF @AgeInMonths = '^'
			BEGIN
				SET @AgeInMonths_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @AgeInMonths_CASTED = CAST(@AgeInMonths AS int)
			END

		UPDATE DeluxeAccount
			SET AgeInMonths = @AgeInMonths_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND MatchRecordSequence = @MatchRecordSequence
	END

IF @LossType <> ''
	BEGIN
		DECLARE @LossType_CASTED char(1)
		IF @LossType = '^'
			BEGIN
				SET @LossType_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @LossType_CASTED = CAST(@LossType AS char(1))
			END

		UPDATE DeluxeAccount
			SET LossType = @LossType_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND MatchRecordSequence = @MatchRecordSequence
	END

IF @CACReturnItemCount <> ''
	BEGIN
		DECLARE @CACReturnItemCount_CASTED int
		IF @CACReturnItemCount = '^'
			BEGIN
				SET @CACReturnItemCount_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @CACReturnItemCount_CASTED = CAST(@CACReturnItemCount AS int)
			END

		UPDATE DeluxeAccount
			SET CACReturnItemCount = @CACReturnItemCount_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND MatchRecordSequence = @MatchRecordSequence
	END

IF @ContributionSource <> ''
	BEGIN
		DECLARE @ContributionSource_CASTED varchar(4)
		IF @ContributionSource = '^'
			BEGIN
				SET @ContributionSource_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ContributionSource_CASTED = CAST(@ContributionSource AS varchar(4))
			END

		UPDATE DeluxeAccount
			SET ContributionSource = @ContributionSource_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND MatchRecordSequence = @MatchRecordSequence
	END

IF @PrincipalLoss <> ''
	BEGIN
		DECLARE @PrincipalLoss_CASTED varchar(9)
		IF @PrincipalLoss = '^'
			BEGIN
				SET @PrincipalLoss_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @PrincipalLoss_CASTED = CAST(@PrincipalLoss AS varchar(9))
			END

		UPDATE DeluxeAccount
			SET PrincipalLoss = @PrincipalLoss_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND MatchRecordSequence = @MatchRecordSequence
	END

IF @FeeReversal <> ''
	BEGIN
		DECLARE @FeeReversal_CASTED varchar(9)
		IF @FeeReversal = '^'
			BEGIN
				SET @FeeReversal_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @FeeReversal_CASTED = CAST(@FeeReversal AS varchar(9))
			END

		UPDATE DeluxeAccount
			SET FeeReversal = @FeeReversal_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND MatchRecordSequence = @MatchRecordSequence
	END

IF @CombinedLossAndFeeReversal <> ''
	BEGIN
		DECLARE @CombinedLossAndFeeReversal_CASTED varchar(9)
		IF @CombinedLossAndFeeReversal = '^'
			BEGIN
				SET @CombinedLossAndFeeReversal_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @CombinedLossAndFeeReversal_CASTED = CAST(@CombinedLossAndFeeReversal AS varchar(9))
			END

		UPDATE DeluxeAccount
			SET CombinedLossAndFeeReversal = @CombinedLossAndFeeReversal_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND MatchRecordSequence = @MatchRecordSequence
	END

IF @PaidStatus <> ''
	BEGIN
		DECLARE @PaidStatus_CASTED char(1)
		IF @PaidStatus = '^'
			BEGIN
				SET @PaidStatus_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @PaidStatus_CASTED = CAST(@PaidStatus AS char(1))
			END

		UPDATE DeluxeAccount
			SET PaidStatus = @PaidStatus_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND MatchRecordSequence = @MatchRecordSequence
	END

IF @PaidDate <> ''
	BEGIN
		DECLARE @PaidDate_CASTED datetime
		IF @PaidDate = '^'
			BEGIN
				SET @PaidDate_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @PaidDate_CASTED = CAST(@PaidDate AS datetime)
			END

		UPDATE DeluxeAccount
			SET PaidDate = @PaidDate_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND MatchRecordSequence = @MatchRecordSequence
	END

IF @SettleDate <> ''
	BEGIN
		DECLARE @SettleDate_CASTED datetime
		IF @SettleDate = '^'
			BEGIN
				SET @SettleDate_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @SettleDate_CASTED = CAST(@SettleDate AS datetime)
			END

		UPDATE DeluxeAccount
			SET SettleDate = @SettleDate_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND MatchRecordSequence = @MatchRecordSequence
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_AdditionalVerificationOFACMatch_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_AdditionalVerificationOFACMatch_Delete]
	@TrackingNum int
AS

DELETE FROM DeluxeAdditionalVerificationOFACMatch
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_AdditionalVerificationOFACMatch_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_AdditionalVerificationOFACMatch_DeleteAll]
	@TrackingNum int
AS

DELETE FROM DeluxeAdditionalVerificationOFACMatch
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_AdditionalVerificationOFACMatch_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_AdditionalVerificationOFACMatch_Insert]
	@Sequence int,
	@ContributorName varchar(50),
	@Severity varchar(3),
	@PostedDate datetime,
	@EntityType char(1),
	@OrgName varchar(100),
	@FirstName varchar(40),
	@MiddleName varchar(40),
	@LastName varchar(40),
	@SSN varchar(9),
	@DOB datetime,
	@IDType varchar(4),
	@IDIssuer varchar(50),
	@IDCountry varchar(3),
	@IDNumber varchar(30),
	@OriginalListName varchar(4),
	@VesselOwner varchar(50),
	@TrackingNum int
AS

INSERT INTO DeluxeAdditionalVerificationOFACMatch
(TrackingNum, Sequence, ContributorName, Severity, PostedDate, EntityType, OrgName, FirstName, MiddleName, LastName, SSN, DOB, IDType, IDIssuer, IDCountry, IDNumber, OriginalListName, VesselOwner)
VALUES
(@TrackingNum, @Sequence, @ContributorName, @Severity, @PostedDate, @EntityType, @OrgName, @FirstName, @MiddleName, @LastName, @SSN, @DOB, @IDType, @IDIssuer, @IDCountry, @IDNumber, @OriginalListName, @VesselOwner)

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_AdditionalVerificationOFACMatch_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_AdditionalVerificationOFACMatch_InsertIfNew]
	@Sequence int,
	@ContributorName varchar(50),
	@Severity varchar(3),
	@PostedDate datetime,
	@EntityType char(1),
	@OrgName varchar(100),
	@FirstName varchar(40),
	@MiddleName varchar(40),
	@LastName varchar(40),
	@SSN varchar(9),
	@DOB datetime,
	@IDType varchar(4),
	@IDIssuer varchar(50),
	@IDCountry varchar(3),
	@IDNumber varchar(30),
	@OriginalListName varchar(4),
	@VesselOwner varchar(50),
	@TrackingNum int
AS

IF NOT EXISTS (SELECT * FROM DeluxeAdditionalVerificationOFACMatch WHERE 1=1 AND TrackingNum = @TrackingNum)
	BEGIN
		INSERT INTO DeluxeAdditionalVerificationOFACMatch
		(TrackingNum, Sequence, ContributorName, Severity, PostedDate, EntityType, OrgName, FirstName, MiddleName, LastName, SSN, DOB, IDType, IDIssuer, IDCountry, IDNumber, OriginalListName, VesselOwner)
		VALUES
		(@TrackingNum, @Sequence, @ContributorName, @Severity, @PostedDate, @EntityType, @OrgName, @FirstName, @MiddleName, @LastName, @SSN, @DOB, @IDType, @IDIssuer, @IDCountry, @IDNumber, @OriginalListName, @VesselOwner)
	END
ELSE	BEGIN
		UPDATE DeluxeAdditionalVerificationOFACMatch SET
			Sequence = @Sequence,
			ContributorName = @ContributorName,
			Severity = @Severity,
			PostedDate = @PostedDate,
			EntityType = @EntityType,
			OrgName = @OrgName,
			FirstName = @FirstName,
			MiddleName = @MiddleName,
			LastName = @LastName,
			SSN = @SSN,
			DOB = @DOB,
			IDType = @IDType,
			IDIssuer = @IDIssuer,
			IDCountry = @IDCountry,
			IDNumber = @IDNumber,
			OriginalListName = @OriginalListName,
			VesselOwner = @VesselOwner
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_AdditionalVerificationOFACMatch_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_AdditionalVerificationOFACMatch_Select]
	@TrackingNum int
AS

SELECT * FROM DeluxeAdditionalVerificationOFACMatch
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_AdditionalVerificationOFACMatch_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_AdditionalVerificationOFACMatch_SelectAll]
	@TrackingNum int
AS

SELECT * FROM DeluxeAdditionalVerificationOFACMatch
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_AdditionalVerificationOFACMatch_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_AdditionalVerificationOFACMatch_Update]
	@Sequence varchar(100),
	@ContributorName varchar(50),
	@Severity varchar(3),
	@PostedDate varchar(100),
	@EntityType varchar(1),
	@OrgName varchar(100),
	@FirstName varchar(40),
	@MiddleName varchar(40),
	@LastName varchar(40),
	@SSN varchar(9),
	@DOB varchar(100),
	@IDType varchar(4),
	@IDIssuer varchar(50),
	@IDCountry varchar(3),
	@IDNumber varchar(30),
	@OriginalListName varchar(4),
	@VesselOwner varchar(50),
	@TrackingNum int
AS

IF @Sequence <> ''
	BEGIN
		DECLARE @Sequence_CASTED int
		IF @Sequence = '^'
			BEGIN
				SET @Sequence_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Sequence_CASTED = CAST(@Sequence AS int)
			END

		UPDATE DeluxeAdditionalVerificationOFACMatch
			SET Sequence = @Sequence_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @ContributorName <> ''
	BEGIN
		DECLARE @ContributorName_CASTED varchar(50)
		IF @ContributorName = '^'
			BEGIN
				SET @ContributorName_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ContributorName_CASTED = CAST(@ContributorName AS varchar(50))
			END

		UPDATE DeluxeAdditionalVerificationOFACMatch
			SET ContributorName = @ContributorName_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @Severity <> ''
	BEGIN
		DECLARE @Severity_CASTED varchar(3)
		IF @Severity = '^'
			BEGIN
				SET @Severity_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Severity_CASTED = CAST(@Severity AS varchar(3))
			END

		UPDATE DeluxeAdditionalVerificationOFACMatch
			SET Severity = @Severity_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @PostedDate <> ''
	BEGIN
		DECLARE @PostedDate_CASTED datetime
		IF @PostedDate = '^'
			BEGIN
				SET @PostedDate_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @PostedDate_CASTED = CAST(@PostedDate AS datetime)
			END

		UPDATE DeluxeAdditionalVerificationOFACMatch
			SET PostedDate = @PostedDate_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @EntityType <> ''
	BEGIN
		DECLARE @EntityType_CASTED char(1)
		IF @EntityType = '^'
			BEGIN
				SET @EntityType_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @EntityType_CASTED = CAST(@EntityType AS char(1))
			END

		UPDATE DeluxeAdditionalVerificationOFACMatch
			SET EntityType = @EntityType_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @OrgName <> ''
	BEGIN
		DECLARE @OrgName_CASTED varchar(100)
		IF @OrgName = '^'
			BEGIN
				SET @OrgName_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @OrgName_CASTED = CAST(@OrgName AS varchar(100))
			END

		UPDATE DeluxeAdditionalVerificationOFACMatch
			SET OrgName = @OrgName_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @FirstName <> ''
	BEGIN
		DECLARE @FirstName_CASTED varchar(40)
		IF @FirstName = '^'
			BEGIN
				SET @FirstName_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @FirstName_CASTED = CAST(@FirstName AS varchar(40))
			END

		UPDATE DeluxeAdditionalVerificationOFACMatch
			SET FirstName = @FirstName_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @MiddleName <> ''
	BEGIN
		DECLARE @MiddleName_CASTED varchar(40)
		IF @MiddleName = '^'
			BEGIN
				SET @MiddleName_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @MiddleName_CASTED = CAST(@MiddleName AS varchar(40))
			END

		UPDATE DeluxeAdditionalVerificationOFACMatch
			SET MiddleName = @MiddleName_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @LastName <> ''
	BEGIN
		DECLARE @LastName_CASTED varchar(40)
		IF @LastName = '^'
			BEGIN
				SET @LastName_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @LastName_CASTED = CAST(@LastName AS varchar(40))
			END

		UPDATE DeluxeAdditionalVerificationOFACMatch
			SET LastName = @LastName_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @SSN <> ''
	BEGIN
		DECLARE @SSN_CASTED varchar(9)
		IF @SSN = '^'
			BEGIN
				SET @SSN_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @SSN_CASTED = CAST(@SSN AS varchar(9))
			END

		UPDATE DeluxeAdditionalVerificationOFACMatch
			SET SSN = @SSN_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @DOB <> ''
	BEGIN
		DECLARE @DOB_CASTED datetime
		IF @DOB = '^'
			BEGIN
				SET @DOB_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @DOB_CASTED = CAST(@DOB AS datetime)
			END

		UPDATE DeluxeAdditionalVerificationOFACMatch
			SET DOB = @DOB_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @IDType <> ''
	BEGIN
		DECLARE @IDType_CASTED varchar(4)
		IF @IDType = '^'
			BEGIN
				SET @IDType_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @IDType_CASTED = CAST(@IDType AS varchar(4))
			END

		UPDATE DeluxeAdditionalVerificationOFACMatch
			SET IDType = @IDType_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @IDIssuer <> ''
	BEGIN
		DECLARE @IDIssuer_CASTED varchar(50)
		IF @IDIssuer = '^'
			BEGIN
				SET @IDIssuer_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @IDIssuer_CASTED = CAST(@IDIssuer AS varchar(50))
			END

		UPDATE DeluxeAdditionalVerificationOFACMatch
			SET IDIssuer = @IDIssuer_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @IDCountry <> ''
	BEGIN
		DECLARE @IDCountry_CASTED varchar(3)
		IF @IDCountry = '^'
			BEGIN
				SET @IDCountry_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @IDCountry_CASTED = CAST(@IDCountry AS varchar(3))
			END

		UPDATE DeluxeAdditionalVerificationOFACMatch
			SET IDCountry = @IDCountry_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @IDNumber <> ''
	BEGIN
		DECLARE @IDNumber_CASTED varchar(30)
		IF @IDNumber = '^'
			BEGIN
				SET @IDNumber_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @IDNumber_CASTED = CAST(@IDNumber AS varchar(30))
			END

		UPDATE DeluxeAdditionalVerificationOFACMatch
			SET IDNumber = @IDNumber_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @OriginalListName <> ''
	BEGIN
		DECLARE @OriginalListName_CASTED varchar(4)
		IF @OriginalListName = '^'
			BEGIN
				SET @OriginalListName_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @OriginalListName_CASTED = CAST(@OriginalListName AS varchar(4))
			END

		UPDATE DeluxeAdditionalVerificationOFACMatch
			SET OriginalListName = @OriginalListName_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @VesselOwner <> ''
	BEGIN
		DECLARE @VesselOwner_CASTED varchar(50)
		IF @VesselOwner = '^'
			BEGIN
				SET @VesselOwner_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @VesselOwner_CASTED = CAST(@VesselOwner AS varchar(50))
			END

		UPDATE DeluxeAdditionalVerificationOFACMatch
			SET VesselOwner = @VesselOwner_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_Address_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_Address_Delete]
	@TrackingNum int,
	@MatchRecordSequence int
AS

DELETE FROM DeluxeAddress
WHERE 1=1 AND TrackingNum = @TrackingNum AND MatchRecordSequence = @MatchRecordSequence

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_Address_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_Address_DeleteAll]
	@TrackingNum int,
	@MatchRecordSequence int
AS

DELETE FROM DeluxeAddress
WHERE 1=1 AND TrackingNum = @TrackingNum AND MatchRecordSequence = @MatchRecordSequence

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_Address_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_Address_Insert]
	@Sequence int,
	@AddressType varchar(10),
	@Address1 varchar(50),
	@Address2 varchar(50),
	@City varchar(28),
	@State varchar(2),
	@PostalCode varchar(14),
	@CountryCode varchar(3),
	@CountryName varchar(50),
	@TrackingNum int,
	@MatchRecordSequence int
AS

INSERT INTO DeluxeAddress
(TrackingNum, MatchRecordSequence, Sequence, AddressType, Address1, Address2, City, State, PostalCode, CountryCode, CountryName)
VALUES
(@TrackingNum, @MatchRecordSequence, @Sequence, @AddressType, @Address1, @Address2, @City, @State, @PostalCode, @CountryCode, @CountryName)

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_Address_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_Address_InsertIfNew]
	@Sequence int,
	@AddressType varchar(10),
	@Address1 varchar(50),
	@Address2 varchar(50),
	@City varchar(28),
	@State varchar(2),
	@PostalCode varchar(14),
	@CountryCode varchar(3),
	@CountryName varchar(50),
	@TrackingNum int,
	@MatchRecordSequence int
AS

IF NOT EXISTS (SELECT * FROM DeluxeAddress WHERE 1=1 AND TrackingNum = @TrackingNum AND MatchRecordSequence = @MatchRecordSequence)
	BEGIN
		INSERT INTO DeluxeAddress
		(TrackingNum, MatchRecordSequence, Sequence, AddressType, Address1, Address2, City, State, PostalCode, CountryCode, CountryName)
		VALUES
		(@TrackingNum, @MatchRecordSequence, @Sequence, @AddressType, @Address1, @Address2, @City, @State, @PostalCode, @CountryCode, @CountryName)
	END
ELSE	BEGIN
		UPDATE DeluxeAddress SET
			Sequence = @Sequence,
			AddressType = @AddressType,
			Address1 = @Address1,
			Address2 = @Address2,
			City = @City,
			State = @State,
			PostalCode = @PostalCode,
			CountryCode = @CountryCode,
			CountryName = @CountryName
		WHERE 1=1 AND TrackingNum = @TrackingNum AND MatchRecordSequence = @MatchRecordSequence
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_Address_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_Address_Select]
	@TrackingNum int,
	@MatchRecordSequence int
AS

SELECT * FROM DeluxeAddress
WHERE 1=1 AND TrackingNum = @TrackingNum AND MatchRecordSequence = @MatchRecordSequence
GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_Address_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_Address_SelectAll]
	@TrackingNum int,
	@MatchRecordSequence int
AS

SELECT * FROM DeluxeAddress
WHERE 1=1 AND TrackingNum = @TrackingNum AND MatchRecordSequence = @MatchRecordSequence
GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_Address_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_Address_Update]
	@Sequence varchar(100),
	@AddressType varchar(10),
	@Address1 varchar(50),
	@Address2 varchar(50),
	@City varchar(28),
	@State varchar(2),
	@PostalCode varchar(14),
	@CountryCode varchar(3),
	@CountryName varchar(50),
	@TrackingNum int,
	@MatchRecordSequence int
AS

IF @Sequence <> ''
	BEGIN
		DECLARE @Sequence_CASTED int
		IF @Sequence = '^'
			BEGIN
				SET @Sequence_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Sequence_CASTED = CAST(@Sequence AS int)
			END

		UPDATE DeluxeAddress
			SET Sequence = @Sequence_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND MatchRecordSequence = @MatchRecordSequence
	END

IF @AddressType <> ''
	BEGIN
		DECLARE @AddressType_CASTED varchar(10)
		IF @AddressType = '^'
			BEGIN
				SET @AddressType_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @AddressType_CASTED = CAST(@AddressType AS varchar(10))
			END

		UPDATE DeluxeAddress
			SET AddressType = @AddressType_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND MatchRecordSequence = @MatchRecordSequence
	END

IF @Address1 <> ''
	BEGIN
		DECLARE @Address1_CASTED varchar(50)
		IF @Address1 = '^'
			BEGIN
				SET @Address1_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Address1_CASTED = CAST(@Address1 AS varchar(50))
			END

		UPDATE DeluxeAddress
			SET Address1 = @Address1_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND MatchRecordSequence = @MatchRecordSequence
	END

IF @Address2 <> ''
	BEGIN
		DECLARE @Address2_CASTED varchar(50)
		IF @Address2 = '^'
			BEGIN
				SET @Address2_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Address2_CASTED = CAST(@Address2 AS varchar(50))
			END

		UPDATE DeluxeAddress
			SET Address2 = @Address2_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND MatchRecordSequence = @MatchRecordSequence
	END

IF @City <> ''
	BEGIN
		DECLARE @City_CASTED varchar(28)
		IF @City = '^'
			BEGIN
				SET @City_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @City_CASTED = CAST(@City AS varchar(28))
			END

		UPDATE DeluxeAddress
			SET City = @City_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND MatchRecordSequence = @MatchRecordSequence
	END

IF @State <> ''
	BEGIN
		DECLARE @State_CASTED varchar(2)
		IF @State = '^'
			BEGIN
				SET @State_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @State_CASTED = CAST(@State AS varchar(2))
			END

		UPDATE DeluxeAddress
			SET State = @State_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND MatchRecordSequence = @MatchRecordSequence
	END

IF @PostalCode <> ''
	BEGIN
		DECLARE @PostalCode_CASTED varchar(14)
		IF @PostalCode = '^'
			BEGIN
				SET @PostalCode_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @PostalCode_CASTED = CAST(@PostalCode AS varchar(14))
			END

		UPDATE DeluxeAddress
			SET PostalCode = @PostalCode_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND MatchRecordSequence = @MatchRecordSequence
	END

IF @CountryCode <> ''
	BEGIN
		DECLARE @CountryCode_CASTED varchar(3)
		IF @CountryCode = '^'
			BEGIN
				SET @CountryCode_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @CountryCode_CASTED = CAST(@CountryCode AS varchar(3))
			END

		UPDATE DeluxeAddress
			SET CountryCode = @CountryCode_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND MatchRecordSequence = @MatchRecordSequence
	END

IF @CountryName <> ''
	BEGIN
		DECLARE @CountryName_CASTED varchar(50)
		IF @CountryName = '^'
			BEGIN
				SET @CountryName_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @CountryName_CASTED = CAST(@CountryName AS varchar(50))
			END

		UPDATE DeluxeAddress
			SET CountryName = @CountryName_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND MatchRecordSequence = @MatchRecordSequence
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_Configuration_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_Configuration_Delete]
AS

DELETE FROM DeluxeConfiguration
WHERE 1=1

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_Configuration_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_Configuration_DeleteAll]
AS

DELETE FROM DeluxeConfiguration
WHERE 1=1

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_Configuration_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_Configuration_Insert]
	@SchemaVersion varchar(10),
	@ClientID varchar(9),
	@ProcessingID varchar(8),
	@ConfigurationID int,
	@DeluxeURL varchar(150),
	@UserId varchar(20),
	@Password varchar(40),
	@Platform varchar(20),
	@OrgReportingUnit varchar(10),
	@Certificate varchar(40),
	@OverallSeverityManualApprovalValue int,
	@ExceptionCausesManualApproval char(1)
AS

INSERT INTO DeluxeConfiguration
(SchemaVersion, ClientID, ProcessingID, ConfigurationID, DeluxeURL, UserId, Password, Platform, OrgReportingUnit, Certificate, OverallSeverityManualApprovalValue, ExceptionCausesManualApproval)
VALUES
(@SchemaVersion, @ClientID, @ProcessingID, @ConfigurationID, @DeluxeURL, @UserId, @Password, @Platform, @OrgReportingUnit, @Certificate, @OverallSeverityManualApprovalValue, @ExceptionCausesManualApproval)

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_Configuration_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_Configuration_InsertIfNew]
	@SchemaVersion varchar(10),
	@ClientID varchar(9),
	@ProcessingID varchar(8),
	@ConfigurationID int,
	@DeluxeURL varchar(150),
	@UserId varchar(20),
	@Password varchar(40),
	@Platform varchar(20),
	@OrgReportingUnit varchar(10),
	@Certificate varchar(40),
	@OverallSeverityManualApprovalValue int,
	@ExceptionCausesManualApproval char(1)
AS

IF NOT EXISTS (SELECT * FROM DeluxeConfiguration WHERE 1=1)
	BEGIN
		INSERT INTO DeluxeConfiguration
		(SchemaVersion, ClientID, ProcessingID, ConfigurationID, DeluxeURL, UserId, Password, Platform, OrgReportingUnit, Certificate, OverallSeverityManualApprovalValue, ExceptionCausesManualApproval)
		VALUES
		(@SchemaVersion, @ClientID, @ProcessingID, @ConfigurationID, @DeluxeURL, @UserId, @Password, @Platform, @OrgReportingUnit, @Certificate, @OverallSeverityManualApprovalValue, @ExceptionCausesManualApproval)
	END
ELSE	BEGIN
		UPDATE DeluxeConfiguration SET
			SchemaVersion = @SchemaVersion,
			ClientID = @ClientID,
			ProcessingID = @ProcessingID,
			ConfigurationID = @ConfigurationID,
			DeluxeURL = @DeluxeURL,
			UserId = @UserId,
			Password = @Password,
			Platform = @Platform,
			OrgReportingUnit = @OrgReportingUnit,
			Certificate = @Certificate,
			OverallSeverityManualApprovalValue = @OverallSeverityManualApprovalValue,
			ExceptionCausesManualApproval = @ExceptionCausesManualApproval
		WHERE 1=1
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_Configuration_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_Configuration_Select]
AS

SELECT * FROM DeluxeConfiguration
WHERE 1=1

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_Configuration_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_Configuration_SelectAll]
AS

SELECT * FROM DeluxeConfiguration
WHERE 1=1

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_Configuration_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_Configuration_Update]
	@SchemaVersion varchar(10),
	@ClientID varchar(9),
	@ProcessingID varchar(8),
	@ConfigurationID varchar(100),
	@DeluxeURL varchar(150),
	@UserId varchar(20),
	@Password varchar(40),
	@Platform varchar(20),
	@OrgReportingUnit varchar(10),
	@Certificate varchar(40),
	@OverallSeverityManualApprovalValue varchar(100),
	@ExceptionCausesManualApproval varchar(1)
AS

IF @SchemaVersion <> ''
	BEGIN
		DECLARE @SchemaVersion_CASTED varchar(10)
		IF @SchemaVersion = '^'
			BEGIN
				SET @SchemaVersion_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @SchemaVersion_CASTED = CAST(@SchemaVersion AS varchar(10))
			END

		UPDATE DeluxeConfiguration
			SET SchemaVersion = @SchemaVersion_CASTED
		WHERE 1=1
	END

IF @ClientID <> ''
	BEGIN
		DECLARE @ClientID_CASTED varchar(9)
		IF @ClientID = '^'
			BEGIN
				SET @ClientID_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ClientID_CASTED = CAST(@ClientID AS varchar(9))
			END

		UPDATE DeluxeConfiguration
			SET ClientID = @ClientID_CASTED
		WHERE 1=1
	END

IF @ProcessingID <> ''
	BEGIN
		DECLARE @ProcessingID_CASTED varchar(8)
		IF @ProcessingID = '^'
			BEGIN
				SET @ProcessingID_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ProcessingID_CASTED = CAST(@ProcessingID AS varchar(8))
			END

		UPDATE DeluxeConfiguration
			SET ProcessingID = @ProcessingID_CASTED
		WHERE 1=1
	END

IF @ConfigurationID <> ''
	BEGIN
		DECLARE @ConfigurationID_CASTED int
		IF @ConfigurationID = '^'
			BEGIN
				SET @ConfigurationID_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ConfigurationID_CASTED = CAST(@ConfigurationID AS int)
			END

		UPDATE DeluxeConfiguration
			SET ConfigurationID = @ConfigurationID_CASTED
		WHERE 1=1
	END

IF @DeluxeURL <> ''
	BEGIN
		DECLARE @DeluxeURL_CASTED varchar(150)
		IF @DeluxeURL = '^'
			BEGIN
				SET @DeluxeURL_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @DeluxeURL_CASTED = CAST(@DeluxeURL AS varchar(150))
			END

		UPDATE DeluxeConfiguration
			SET DeluxeURL = @DeluxeURL_CASTED
		WHERE 1=1
	END

IF @UserId <> ''
	BEGIN
		DECLARE @UserId_CASTED varchar(20)
		IF @UserId = '^'
			BEGIN
				SET @UserId_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @UserId_CASTED = CAST(@UserId AS varchar(20))
			END

		UPDATE DeluxeConfiguration
			SET UserId = @UserId_CASTED
		WHERE 1=1
	END

IF @Password <> ''
	BEGIN
		DECLARE @Password_CASTED varchar(40)
		IF @Password = '^'
			BEGIN
				SET @Password_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Password_CASTED = CAST(@Password AS varchar(40))
			END

		UPDATE DeluxeConfiguration
			SET Password = @Password_CASTED
		WHERE 1=1
	END

IF @Platform <> ''
	BEGIN
		DECLARE @Platform_CASTED varchar(20)
		IF @Platform = '^'
			BEGIN
				SET @Platform_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Platform_CASTED = CAST(@Platform AS varchar(20))
			END

		UPDATE DeluxeConfiguration
			SET Platform = @Platform_CASTED
		WHERE 1=1
	END

IF @OrgReportingUnit <> ''
	BEGIN
		DECLARE @OrgReportingUnit_CASTED varchar(10)
		IF @OrgReportingUnit = '^'
			BEGIN
				SET @OrgReportingUnit_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @OrgReportingUnit_CASTED = CAST(@OrgReportingUnit AS varchar(10))
			END

		UPDATE DeluxeConfiguration
			SET OrgReportingUnit = @OrgReportingUnit_CASTED
		WHERE 1=1
	END

IF @Certificate <> ''
	BEGIN
		DECLARE @Certificate_CASTED varchar(40)
		IF @Certificate = '^'
			BEGIN
				SET @Certificate_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Certificate_CASTED = CAST(@Certificate AS varchar(40))
			END

		UPDATE DeluxeConfiguration
			SET Certificate = @Certificate_CASTED
		WHERE 1=1
	END

IF @OverallSeverityManualApprovalValue <> ''
	BEGIN
		DECLARE @OverallSeverityManualApprovalValue_CASTED int
		IF @OverallSeverityManualApprovalValue = '^'
			BEGIN
				SET @OverallSeverityManualApprovalValue_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @OverallSeverityManualApprovalValue_CASTED = CAST(@OverallSeverityManualApprovalValue AS int)
			END

		UPDATE DeluxeConfiguration
			SET OverallSeverityManualApprovalValue = @OverallSeverityManualApprovalValue_CASTED
		WHERE 1=1
	END

IF @ExceptionCausesManualApproval <> ''
	BEGIN
		DECLARE @ExceptionCausesManualApproval_CASTED char(1)
		IF @ExceptionCausesManualApproval = '^'
			BEGIN
				SET @ExceptionCausesManualApproval_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ExceptionCausesManualApproval_CASTED = CAST(@ExceptionCausesManualApproval AS char(1))
			END

		UPDATE DeluxeConfiguration
			SET ExceptionCausesManualApproval = @ExceptionCausesManualApproval_CASTED
		WHERE 1=1
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_Consumer_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_Consumer_Delete]
	@TrackingNum int,
	@MatchRecordSequence int
AS

DELETE FROM DeluxeConsumer
WHERE 1=1 AND TrackingNum = @TrackingNum AND MatchRecordSequence = @MatchRecordSequence

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_Consumer_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_Consumer_DeleteAll]
	@TrackingNum int,
	@MatchRecordSequence int
AS

DELETE FROM DeluxeConsumer
WHERE 1=1 AND TrackingNum = @TrackingNum AND MatchRecordSequence = @MatchRecordSequence

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_Consumer_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_Consumer_Insert]
	@ConsumerType varchar(3),
	@LastName varchar(40),
	@MiddleName varchar(20),
	@FirstName varchar(40),
	@Gender char(1),
	@BirthDate datetime,
	@BusinessName varchar(40),
	@TaxIdNumber varchar(9),
	@IdentificationType char(2),
	@IdentificationNumber varchar(28),
	@IdentificationState char(2),
	@IdentificationCountry char(3),
	@IdentificationExpirationDate datetime,
	@TrackingNum int,
	@MatchRecordSequence int
AS

INSERT INTO DeluxeConsumer
(TrackingNum, MatchRecordSequence, ConsumerType, LastName, MiddleName, FirstName, Gender, BirthDate, BusinessName, TaxIdNumber, IdentificationType, IdentificationNumber, IdentificationState, IdentificationCountry, IdentificationExpirationDate)
VALUES
(@TrackingNum, @MatchRecordSequence, @ConsumerType, @LastName, @MiddleName, @FirstName, @Gender, @BirthDate, @BusinessName, @TaxIdNumber, @IdentificationType, @IdentificationNumber, @IdentificationState, @IdentificationCountry, @IdentificationExpirationDate)

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_Consumer_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_Consumer_InsertIfNew]
	@ConsumerType varchar(3),
	@LastName varchar(40),
	@MiddleName varchar(20),
	@FirstName varchar(40),
	@Gender char(1),
	@BirthDate datetime,
	@BusinessName varchar(40),
	@TaxIdNumber varchar(9),
	@IdentificationType char(2),
	@IdentificationNumber varchar(28),
	@IdentificationState char(2),
	@IdentificationCountry char(3),
	@IdentificationExpirationDate datetime,
	@TrackingNum int,
	@MatchRecordSequence int
AS

IF NOT EXISTS (SELECT * FROM DeluxeConsumer WHERE 1=1 AND TrackingNum = @TrackingNum AND MatchRecordSequence = @MatchRecordSequence)
	BEGIN
		INSERT INTO DeluxeConsumer
		(TrackingNum, MatchRecordSequence, ConsumerType, LastName, MiddleName, FirstName, Gender, BirthDate, BusinessName, TaxIdNumber, IdentificationType, IdentificationNumber, IdentificationState, IdentificationCountry, IdentificationExpirationDate)
		VALUES
		(@TrackingNum, @MatchRecordSequence, @ConsumerType, @LastName, @MiddleName, @FirstName, @Gender, @BirthDate, @BusinessName, @TaxIdNumber, @IdentificationType, @IdentificationNumber, @IdentificationState, @IdentificationCountry, @IdentificationExpirationDate)
	END
ELSE	BEGIN
		UPDATE DeluxeConsumer SET
			ConsumerType = @ConsumerType,
			LastName = @LastName,
			MiddleName = @MiddleName,
			FirstName = @FirstName,
			Gender = @Gender,
			BirthDate = @BirthDate,
			BusinessName = @BusinessName,
			TaxIdNumber = @TaxIdNumber,
			IdentificationType = @IdentificationType,
			IdentificationNumber = @IdentificationNumber,
			IdentificationState = @IdentificationState,
			IdentificationCountry = @IdentificationCountry,
			IdentificationExpirationDate = @IdentificationExpirationDate
		WHERE 1=1 AND TrackingNum = @TrackingNum AND MatchRecordSequence = @MatchRecordSequence
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_Consumer_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_Consumer_Select]
	@TrackingNum int,
	@MatchRecordSequence int
AS

SELECT * FROM DeluxeConsumer
WHERE 1=1 AND TrackingNum = @TrackingNum AND MatchRecordSequence = @MatchRecordSequence

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_Consumer_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_Consumer_SelectAll]
	@TrackingNum int,
	@MatchRecordSequence int
AS

SELECT * FROM DeluxeConsumer
WHERE 1=1 AND TrackingNum = @TrackingNum AND MatchRecordSequence = @MatchRecordSequence

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_Consumer_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_Consumer_Update]
	@ConsumerType varchar(3),
	@LastName varchar(40),
	@MiddleName varchar(20),
	@FirstName varchar(40),
	@Gender varchar(1),
	@BirthDate varchar(100),
	@BusinessName varchar(40),
	@TaxIdNumber varchar(9),
	@IdentificationType varchar(2),
	@IdentificationNumber varchar(28),
	@IdentificationState varchar(2),
	@IdentificationCountry varchar(3),
	@IdentificationExpirationDate varchar(100),
	@TrackingNum int,
	@MatchRecordSequence int
AS

IF @ConsumerType <> ''
	BEGIN
		DECLARE @ConsumerType_CASTED varchar(3)
		IF @ConsumerType = '^'
			BEGIN
				SET @ConsumerType_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ConsumerType_CASTED = CAST(@ConsumerType AS varchar(3))
			END

		UPDATE DeluxeConsumer
			SET ConsumerType = @ConsumerType_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND MatchRecordSequence = @MatchRecordSequence
	END

IF @LastName <> ''
	BEGIN
		DECLARE @LastName_CASTED varchar(40)
		IF @LastName = '^'
			BEGIN
				SET @LastName_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @LastName_CASTED = CAST(@LastName AS varchar(40))
			END

		UPDATE DeluxeConsumer
			SET LastName = @LastName_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND MatchRecordSequence = @MatchRecordSequence
	END

IF @MiddleName <> ''
	BEGIN
		DECLARE @MiddleName_CASTED varchar(20)
		IF @MiddleName = '^'
			BEGIN
				SET @MiddleName_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @MiddleName_CASTED = CAST(@MiddleName AS varchar(20))
			END

		UPDATE DeluxeConsumer
			SET MiddleName = @MiddleName_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND MatchRecordSequence = @MatchRecordSequence
	END

IF @FirstName <> ''
	BEGIN
		DECLARE @FirstName_CASTED varchar(40)
		IF @FirstName = '^'
			BEGIN
				SET @FirstName_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @FirstName_CASTED = CAST(@FirstName AS varchar(40))
			END

		UPDATE DeluxeConsumer
			SET FirstName = @FirstName_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND MatchRecordSequence = @MatchRecordSequence
	END

IF @Gender <> ''
	BEGIN
		DECLARE @Gender_CASTED char(1)
		IF @Gender = '^'
			BEGIN
				SET @Gender_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Gender_CASTED = CAST(@Gender AS char(1))
			END

		UPDATE DeluxeConsumer
			SET Gender = @Gender_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND MatchRecordSequence = @MatchRecordSequence
	END

IF @BirthDate <> ''
	BEGIN
		DECLARE @BirthDate_CASTED datetime
		IF @BirthDate = '^'
			BEGIN
				SET @BirthDate_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @BirthDate_CASTED = CAST(@BirthDate AS datetime)
			END

		UPDATE DeluxeConsumer
			SET BirthDate = @BirthDate_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND MatchRecordSequence = @MatchRecordSequence
	END

IF @BusinessName <> ''
	BEGIN
		DECLARE @BusinessName_CASTED varchar(40)
		IF @BusinessName = '^'
			BEGIN
				SET @BusinessName_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @BusinessName_CASTED = CAST(@BusinessName AS varchar(40))
			END

		UPDATE DeluxeConsumer
			SET BusinessName = @BusinessName_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND MatchRecordSequence = @MatchRecordSequence
	END

IF @TaxIdNumber <> ''
	BEGIN
		DECLARE @TaxIdNumber_CASTED varchar(9)
		IF @TaxIdNumber = '^'
			BEGIN
				SET @TaxIdNumber_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @TaxIdNumber_CASTED = CAST(@TaxIdNumber AS varchar(9))
			END

		UPDATE DeluxeConsumer
			SET TaxIdNumber = @TaxIdNumber_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND MatchRecordSequence = @MatchRecordSequence
	END

IF @IdentificationType <> ''
	BEGIN
		DECLARE @IdentificationType_CASTED char(2)
		IF @IdentificationType = '^'
			BEGIN
				SET @IdentificationType_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @IdentificationType_CASTED = CAST(@IdentificationType AS char(2))
			END

		UPDATE DeluxeConsumer
			SET IdentificationType = @IdentificationType_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND MatchRecordSequence = @MatchRecordSequence
	END

IF @IdentificationNumber <> ''
	BEGIN
		DECLARE @IdentificationNumber_CASTED varchar(28)
		IF @IdentificationNumber = '^'
			BEGIN
				SET @IdentificationNumber_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @IdentificationNumber_CASTED = CAST(@IdentificationNumber AS varchar(28))
			END

		UPDATE DeluxeConsumer
			SET IdentificationNumber = @IdentificationNumber_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND MatchRecordSequence = @MatchRecordSequence
	END

IF @IdentificationState <> ''
	BEGIN
		DECLARE @IdentificationState_CASTED char(2)
		IF @IdentificationState = '^'
			BEGIN
				SET @IdentificationState_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @IdentificationState_CASTED = CAST(@IdentificationState AS char(2))
			END

		UPDATE DeluxeConsumer
			SET IdentificationState = @IdentificationState_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND MatchRecordSequence = @MatchRecordSequence
	END

IF @IdentificationCountry <> ''
	BEGIN
		DECLARE @IdentificationCountry_CASTED char(3)
		IF @IdentificationCountry = '^'
			BEGIN
				SET @IdentificationCountry_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @IdentificationCountry_CASTED = CAST(@IdentificationCountry AS char(3))
			END

		UPDATE DeluxeConsumer
			SET IdentificationCountry = @IdentificationCountry_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND MatchRecordSequence = @MatchRecordSequence
	END

IF @IdentificationExpirationDate <> ''
	BEGIN
		DECLARE @IdentificationExpirationDate_CASTED datetime
		IF @IdentificationExpirationDate = '^'
			BEGIN
				SET @IdentificationExpirationDate_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @IdentificationExpirationDate_CASTED = CAST(@IdentificationExpirationDate AS datetime)
			END

		UPDATE DeluxeConsumer
			SET IdentificationExpirationDate = @IdentificationExpirationDate_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND MatchRecordSequence = @MatchRecordSequence
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_Dispute_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_Dispute_Delete]
	@TrackingNum int
AS

DELETE FROM DeluxeDispute
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_Dispute_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_Dispute_DeleteAll]
	@TrackingNum int
AS

DELETE FROM DeluxeDispute
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_Dispute_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_Dispute_Insert]
	@DisputeCode varchar(2),
	@DisputeReason varchar(700),
	@DisputeDate datetime,
	@TrackingNum int
AS

INSERT INTO DeluxeDispute
(TrackingNum, DisputeCode, DisputeReason, DisputeDate)
VALUES
(@TrackingNum, @DisputeCode, @DisputeReason, @DisputeDate)

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_Dispute_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_Dispute_InsertIfNew]
	@DisputeCode varchar(2),
	@DisputeReason varchar(700),
	@DisputeDate datetime,
	@TrackingNum int
AS

IF NOT EXISTS (SELECT * FROM DeluxeDispute WHERE 1=1 AND TrackingNum = @TrackingNum)
	BEGIN
		INSERT INTO DeluxeDispute
		(TrackingNum, DisputeCode, DisputeReason, DisputeDate)
		VALUES
		(@TrackingNum, @DisputeCode, @DisputeReason, @DisputeDate)
	END
ELSE	BEGIN
		UPDATE DeluxeDispute SET
			DisputeCode = @DisputeCode,
			DisputeReason = @DisputeReason,
			DisputeDate = @DisputeDate
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_Dispute_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_Dispute_Select]
	@TrackingNum int
AS

SELECT * FROM DeluxeDispute
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_Dispute_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_Dispute_SelectAll]
	@TrackingNum int
AS

SELECT * FROM DeluxeDispute
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_Dispute_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_Dispute_Update]
	@DisputeCode varchar(2),
	@DisputeReason varchar(700),
	@DisputeDate varchar(100),
	@TrackingNum int
AS

IF @DisputeCode <> ''
	BEGIN
		DECLARE @DisputeCode_CASTED varchar(2)
		IF @DisputeCode = '^'
			BEGIN
				SET @DisputeCode_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @DisputeCode_CASTED = CAST(@DisputeCode AS varchar(2))
			END

		UPDATE DeluxeDispute
			SET DisputeCode = @DisputeCode_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @DisputeReason <> ''
	BEGIN
		DECLARE @DisputeReason_CASTED varchar(700)
		IF @DisputeReason = '^'
			BEGIN
				SET @DisputeReason_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @DisputeReason_CASTED = CAST(@DisputeReason AS varchar(700))
			END

		UPDATE DeluxeDispute
			SET DisputeReason = @DisputeReason_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @DisputeDate <> ''
	BEGIN
		DECLARE @DisputeDate_CASTED datetime
		IF @DisputeDate = '^'
			BEGIN
				SET @DisputeDate_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @DisputeDate_CASTED = CAST(@DisputeDate AS datetime)
			END

		UPDATE DeluxeDispute
			SET DisputeDate = @DisputeDate_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_IdentityVerificationResultMessage_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_IdentityVerificationResultMessage_Delete]
	@TrackingNum int
AS

DELETE FROM DeluxeIdentityVerificationResultMessage
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_IdentityVerificationResultMessage_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_IdentityVerificationResultMessage_DeleteAll]
	@TrackingNum int
AS

DELETE FROM DeluxeIdentityVerificationResultMessage
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_IdentityVerificationResultMessage_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_IdentityVerificationResultMessage_Insert]
	@WarningNumber int,
	@WarningText varchar(50),
	@Severity varchar(3),
	@TrackingNum int
AS

INSERT INTO DeluxeIdentityVerificationResultMessage
(TrackingNum, WarningNumber, WarningText, Severity)
VALUES
(@TrackingNum, @WarningNumber, @WarningText, @Severity)

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_IdentityVerificationResultMessage_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_IdentityVerificationResultMessage_InsertIfNew]
	@WarningNumber int,
	@WarningText varchar(50),
	@Severity varchar(3),
	@TrackingNum int
AS

IF NOT EXISTS (SELECT * FROM DeluxeIdentityVerificationResultMessage WHERE 1=1 AND TrackingNum = @TrackingNum)
	BEGIN
		INSERT INTO DeluxeIdentityVerificationResultMessage
		(TrackingNum, WarningNumber, WarningText, Severity)
		VALUES
		(@TrackingNum, @WarningNumber, @WarningText, @Severity)
	END
ELSE	BEGIN
		UPDATE DeluxeIdentityVerificationResultMessage SET
			WarningNumber = @WarningNumber,
			WarningText = @WarningText,
			Severity = @Severity
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_IdentityVerificationResultMessage_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_IdentityVerificationResultMessage_Select]
	@TrackingNum int
AS

SELECT * FROM DeluxeIdentityVerificationResultMessage
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_IdentityVerificationResultMessage_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_IdentityVerificationResultMessage_SelectAll]
	@TrackingNum int
AS

SELECT * FROM DeluxeIdentityVerificationResultMessage
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_IdentityVerificationResultMessage_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_IdentityVerificationResultMessage_Update]
	@WarningNumber varchar(100),
	@WarningText varchar(50),
	@Severity varchar(3),
	@TrackingNum int
AS

IF @WarningNumber <> ''
	BEGIN
		DECLARE @WarningNumber_CASTED int
		IF @WarningNumber = '^'
			BEGIN
				SET @WarningNumber_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @WarningNumber_CASTED = CAST(@WarningNumber AS int)
			END

		UPDATE DeluxeIdentityVerificationResultMessage
			SET WarningNumber = @WarningNumber_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @WarningText <> ''
	BEGIN
		DECLARE @WarningText_CASTED varchar(50)
		IF @WarningText = '^'
			BEGIN
				SET @WarningText_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @WarningText_CASTED = CAST(@WarningText AS varchar(50))
			END

		UPDATE DeluxeIdentityVerificationResultMessage
			SET WarningText = @WarningText_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @Severity <> ''
	BEGIN
		DECLARE @Severity_CASTED varchar(3)
		IF @Severity = '^'
			BEGIN
				SET @Severity_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Severity_CASTED = CAST(@Severity AS varchar(3))
			END

		UPDATE DeluxeIdentityVerificationResultMessage
			SET Severity = @Severity_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_InquiryResponse_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_InquiryResponse_Delete]
	@TrackingNum int
AS

DELETE FROM DeluxeInquiryResponse
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_InquiryResponse_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_InquiryResponse_DeleteAll]
	@TrackingNum int
AS

DELETE FROM DeluxeInquiryResponse
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_InquiryResponse_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_InquiryResponse_Insert]
	@ResponseCode varchar(10),
	@ResponseMessage varchar(50),
	@InquirySystemTrackingIdentifier varchar(15),
	@RemarketerSystemTrackingIdentifierField varchar(15),
	@CustomerID varchar(9),
	@AttemptNumber int,
	@InitialMessage varchar(50),
	@DecisionMessage varchar(45),
	@OverallSeverity varchar(3),
	@CumulativeLoss bigint,
	@FCRAFlag char(1),
	@SchemaVersion varchar,
	@TrackingNum int
AS

INSERT INTO DeluxeInquiryResponse
(TrackingNum, ResponseCode, ResponseMessage, InquirySystemTrackingIdentifier, RemarketerSystemTrackingIdentifierField, CustomerID, AttemptNumber, InitialMessage, DecisionMessage, OverallSeverity, CumulativeLoss, FCRAFlag, SchemaVersion)
VALUES
(@TrackingNum, @ResponseCode, @ResponseMessage, @InquirySystemTrackingIdentifier, @RemarketerSystemTrackingIdentifierField, @CustomerID, @AttemptNumber, @InitialMessage, @DecisionMessage, @OverallSeverity, @CumulativeLoss, @FCRAFlag, @SchemaVersion)

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_InquiryResponse_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_InquiryResponse_InsertIfNew]
	@ResponseCode varchar(10),
	@ResponseMessage varchar(50),
	@InquirySystemTrackingIdentifier varchar(15),
	@RemarketerSystemTrackingIdentifierField varchar(15),
	@CustomerID varchar(9),
	@AttemptNumber int,
	@InitialMessage varchar(50),
	@DecisionMessage varchar(45),
	@OverallSeverity varchar(3),
	@CumulativeLoss bigint,
	@FCRAFlag char(1),
	@SchemaVersion varchar,
	@TrackingNum int
AS

IF NOT EXISTS (SELECT * FROM DeluxeInquiryResponse WHERE 1=1 AND TrackingNum = @TrackingNum)
	BEGIN
		INSERT INTO DeluxeInquiryResponse
		(TrackingNum, ResponseCode, ResponseMessage, InquirySystemTrackingIdentifier, RemarketerSystemTrackingIdentifierField, CustomerID, AttemptNumber, InitialMessage, DecisionMessage, OverallSeverity, CumulativeLoss, FCRAFlag, SchemaVersion)
		VALUES
		(@TrackingNum, @ResponseCode, @ResponseMessage, @InquirySystemTrackingIdentifier, @RemarketerSystemTrackingIdentifierField, @CustomerID, @AttemptNumber, @InitialMessage, @DecisionMessage, @OverallSeverity, @CumulativeLoss, @FCRAFlag, @SchemaVersion)
	END
ELSE	BEGIN
		UPDATE DeluxeInquiryResponse SET
			ResponseCode = @ResponseCode,
			ResponseMessage = @ResponseMessage,
			InquirySystemTrackingIdentifier = @InquirySystemTrackingIdentifier,
			RemarketerSystemTrackingIdentifierField = @RemarketerSystemTrackingIdentifierField,
			CustomerID = @CustomerID,
			AttemptNumber = @AttemptNumber,
			InitialMessage = @InitialMessage,
			DecisionMessage = @DecisionMessage,
			OverallSeverity = @OverallSeverity,
			CumulativeLoss = @CumulativeLoss,
			FCRAFlag = @FCRAFlag,
			SchemaVersion = @SchemaVersion
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_InquiryResponse_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_InquiryResponse_Select]
	@TrackingNum int
AS

SELECT * FROM DeluxeInquiryResponse
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_InquiryResponse_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_InquiryResponse_SelectAll]
	@TrackingNum int
AS

SELECT * FROM DeluxeInquiryResponse
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_InquiryResponse_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_InquiryResponse_Update]
	@ResponseCode varchar(10),
	@ResponseMessage varchar(50),
	@InquirySystemTrackingIdentifier varchar(15),
	@RemarketerSystemTrackingIdentifierField varchar(15),
	@CustomerID varchar(9),
	@AttemptNumber varchar(100),
	@InitialMessage varchar(50),
	@DecisionMessage varchar(45),
	@OverallSeverity varchar(3),
	@CumulativeLoss varchar(100),
	@FCRAFlag varchar(1),
	@SchemaVersion varchar,
	@TrackingNum int
AS

IF @ResponseCode <> ''
	BEGIN
		DECLARE @ResponseCode_CASTED varchar(10)
		IF @ResponseCode = '^'
			BEGIN
				SET @ResponseCode_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ResponseCode_CASTED = CAST(@ResponseCode AS varchar(10))
			END

		UPDATE DeluxeInquiryResponse
			SET ResponseCode = @ResponseCode_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @ResponseMessage <> ''
	BEGIN
		DECLARE @ResponseMessage_CASTED varchar(50)
		IF @ResponseMessage = '^'
			BEGIN
				SET @ResponseMessage_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ResponseMessage_CASTED = CAST(@ResponseMessage AS varchar(50))
			END

		UPDATE DeluxeInquiryResponse
			SET ResponseMessage = @ResponseMessage_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @InquirySystemTrackingIdentifier <> ''
	BEGIN
		DECLARE @InquirySystemTrackingIdentifier_CASTED varchar(15)
		IF @InquirySystemTrackingIdentifier = '^'
			BEGIN
				SET @InquirySystemTrackingIdentifier_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @InquirySystemTrackingIdentifier_CASTED = CAST(@InquirySystemTrackingIdentifier AS varchar(15))
			END

		UPDATE DeluxeInquiryResponse
			SET InquirySystemTrackingIdentifier = @InquirySystemTrackingIdentifier_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @RemarketerSystemTrackingIdentifierField <> ''
	BEGIN
		DECLARE @RemarketerSystemTrackingIdentifierField_CASTED varchar(15)
		IF @RemarketerSystemTrackingIdentifierField = '^'
			BEGIN
				SET @RemarketerSystemTrackingIdentifierField_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @RemarketerSystemTrackingIdentifierField_CASTED = CAST(@RemarketerSystemTrackingIdentifierField AS varchar(15))
			END

		UPDATE DeluxeInquiryResponse
			SET RemarketerSystemTrackingIdentifierField = @RemarketerSystemTrackingIdentifierField_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @CustomerID <> ''
	BEGIN
		DECLARE @CustomerID_CASTED varchar(9)
		IF @CustomerID = '^'
			BEGIN
				SET @CustomerID_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @CustomerID_CASTED = CAST(@CustomerID AS varchar(9))
			END

		UPDATE DeluxeInquiryResponse
			SET CustomerID = @CustomerID_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @AttemptNumber <> ''
	BEGIN
		DECLARE @AttemptNumber_CASTED int
		IF @AttemptNumber = '^'
			BEGIN
				SET @AttemptNumber_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @AttemptNumber_CASTED = CAST(@AttemptNumber AS int)
			END

		UPDATE DeluxeInquiryResponse
			SET AttemptNumber = @AttemptNumber_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @InitialMessage <> ''
	BEGIN
		DECLARE @InitialMessage_CASTED varchar(50)
		IF @InitialMessage = '^'
			BEGIN
				SET @InitialMessage_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @InitialMessage_CASTED = CAST(@InitialMessage AS varchar(50))
			END

		UPDATE DeluxeInquiryResponse
			SET InitialMessage = @InitialMessage_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @DecisionMessage <> ''
	BEGIN
		DECLARE @DecisionMessage_CASTED varchar(45)
		IF @DecisionMessage = '^'
			BEGIN
				SET @DecisionMessage_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @DecisionMessage_CASTED = CAST(@DecisionMessage AS varchar(45))
			END

		UPDATE DeluxeInquiryResponse
			SET DecisionMessage = @DecisionMessage_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @OverallSeverity <> ''
	BEGIN
		DECLARE @OverallSeverity_CASTED varchar(3)
		IF @OverallSeverity = '^'
			BEGIN
				SET @OverallSeverity_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @OverallSeverity_CASTED = CAST(@OverallSeverity AS varchar(3))
			END

		UPDATE DeluxeInquiryResponse
			SET OverallSeverity = @OverallSeverity_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @CumulativeLoss <> ''
	BEGIN
		DECLARE @CumulativeLoss_CASTED bigint
		IF @CumulativeLoss = '^'
			BEGIN
				SET @CumulativeLoss_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @CumulativeLoss_CASTED = CAST(@CumulativeLoss AS bigint)
			END

		UPDATE DeluxeInquiryResponse
			SET CumulativeLoss = @CumulativeLoss_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @FCRAFlag <> ''
	BEGIN
		DECLARE @FCRAFlag_CASTED char(1)
		IF @FCRAFlag = '^'
			BEGIN
				SET @FCRAFlag_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @FCRAFlag_CASTED = CAST(@FCRAFlag AS char(1))
			END

		UPDATE DeluxeInquiryResponse
			SET FCRAFlag = @FCRAFlag_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @SchemaVersion <> ''
	BEGIN
		DECLARE @SchemaVersion_CASTED varchar
		IF @SchemaVersion = '^'
			BEGIN
				SET @SchemaVersion_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @SchemaVersion_CASTED = CAST(@SchemaVersion AS varchar)
			END

		UPDATE DeluxeInquiryResponse
			SET SchemaVersion = @SchemaVersion_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_ManualApproval_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_ManualApproval_Delete]
	@Sequence int,
	@TrackingNum int
AS

DELETE FROM [IMS].[DeluxeManualApproval]
WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_ManualApproval_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_ManualApproval_DeleteAll]
	@Sequence int,
	@TrackingNum int
AS

DELETE FROM [IMS].[DeluxeManualApproval]
WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_ManualApproval_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_ManualApproval_Insert]
	@Sequence int,
	@Category varchar(2),
	@ReasonCode varchar(32),
	@Description varchar(256),
	@ErrorFlag char(1),
	@TrackingNum int
AS

INSERT INTO [IMS].[DeluxeManualApproval]
(Sequence, Category, TrackingNum, ReasonCode, Description, ErrorFlag)
VALUES
(@Sequence, @Category, @TrackingNum, @ReasonCode, @Description, @ErrorFlag)

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_ManualApproval_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_ManualApproval_InsertIfNew]
	@Sequence int,
	@Category varchar(2),
	@ReasonCode varchar(32),
	@Description varchar(256),
	@ErrorFlag char(1),
	@TrackingNum int
AS

IF NOT EXISTS (SELECT * FROM [IMS].[DeluxeManualApproval] WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum)
	BEGIN
		INSERT INTO [IMS].[DeluxeManualApproval]
		(Sequence, Category, TrackingNum, ReasonCode, Description, ErrorFlag)
		VALUES
		(@Sequence, @Category, @TrackingNum, @ReasonCode, @Description, @ErrorFlag)
	END
ELSE	BEGIN
		UPDATE [IMS].[DeluxeManualApproval] SET
			Category = @Category,
			ReasonCode = @ReasonCode,
			Description = @Description,
			ErrorFlag = @ErrorFlag
		WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_ManualApproval_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_ManualApproval_Select]
	@Sequence int,
	@TrackingNum int
AS

SELECT * FROM [IMS].[DeluxeManualApproval]
WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_ManualApproval_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_ManualApproval_SelectAll]
	@Sequence int,
	@TrackingNum int
AS

SELECT * FROM [IMS].[DeluxeManualApproval]
WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_ManualApproval_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_ManualApproval_Update]
	@Sequence int,
	@Category varchar(2),
	@ReasonCode varchar(32),
	@Description varchar(256),
	@ErrorFlag varchar(1),
	@TrackingNum int
AS

IF @Category <> ''
	BEGIN
		DECLARE @Category_CASTED varchar(2)
		IF @Category = '^'
			BEGIN
				SET @Category_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Category_CASTED = CAST(@Category AS varchar(2))
			END

		UPDATE [IMS].[DeluxeManualApproval]
			SET Category = @Category_CASTED
		WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
	END

IF @ReasonCode <> ''
	BEGIN
		DECLARE @ReasonCode_CASTED varchar(32)
		IF @ReasonCode = '^'
			BEGIN
				SET @ReasonCode_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ReasonCode_CASTED = CAST(@ReasonCode AS varchar(32))
			END

		UPDATE [IMS].[DeluxeManualApproval]
			SET ReasonCode = @ReasonCode_CASTED
		WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
	END

IF @Description <> ''
	BEGIN
		DECLARE @Description_CASTED varchar(256)
		IF @Description = '^'
			BEGIN
				SET @Description_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Description_CASTED = CAST(@Description AS varchar(256))
			END

		UPDATE [IMS].[DeluxeManualApproval]
			SET Description = @Description_CASTED
		WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
	END

IF @ErrorFlag <> ''
	BEGIN
		DECLARE @ErrorFlag_CASTED char(1)
		IF @ErrorFlag = '^'
			BEGIN
				SET @ErrorFlag_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ErrorFlag_CASTED = CAST(@ErrorFlag AS char(1))
			END

		UPDATE [IMS].[DeluxeManualApproval]
			SET ErrorFlag = @ErrorFlag_CASTED
		WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_Match_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_Match_Delete]
	@TrackingNum int,
	@MatchRecordSequence int
AS

DELETE FROM DeluxeMatch
WHERE 1=1 AND TrackingNum = @TrackingNum AND MatchRecordSequence = @MatchRecordSequence

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_Match_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_Match_DeleteAll]
	@TrackingNum int,
	@MatchRecordSequence int
AS

DELETE FROM DeluxeMatch
WHERE 1=1 AND TrackingNum = @TrackingNum AND MatchRecordSequence = @MatchRecordSequence

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_Match_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_Match_Insert]
	@Sequence int,
	@MatchType varchar(10),
	@MatchField varchar(40),
	@MatchData varchar(150),
	@TrackingNum int,
	@MatchRecordSequence int
AS

INSERT INTO DeluxeMatch
(TrackingNum, MatchRecordSequence, Sequence, MatchType, MatchField, MatchData)
VALUES
(@TrackingNum, @MatchRecordSequence, @Sequence, @MatchType, @MatchField, @MatchData)

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_Match_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_Match_InsertIfNew]
	@Sequence int,
	@MatchType varchar(10),
	@MatchField varchar(40),
	@MatchData varchar(150),
	@TrackingNum int,
	@MatchRecordSequence int
AS

IF NOT EXISTS (SELECT * FROM DeluxeMatch WHERE 1=1 AND TrackingNum = @TrackingNum AND MatchRecordSequence = @MatchRecordSequence)
	BEGIN
		INSERT INTO DeluxeMatch
		(TrackingNum, MatchRecordSequence, Sequence, MatchType, MatchField, MatchData)
		VALUES
		(@TrackingNum, @MatchRecordSequence, @Sequence, @MatchType, @MatchField, @MatchData)
	END
ELSE	BEGIN
		UPDATE DeluxeMatch SET
			Sequence = @Sequence,
			MatchType = @MatchType,
			MatchField = @MatchField,
			MatchData = @MatchData
		WHERE 1=1 AND TrackingNum = @TrackingNum AND MatchRecordSequence = @MatchRecordSequence
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_Match_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_Match_Select]
	@TrackingNum int,
	@MatchRecordSequence int
AS

SELECT * FROM DeluxeMatch
WHERE 1=1 AND TrackingNum = @TrackingNum AND MatchRecordSequence = @MatchRecordSequence

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_Match_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_Match_SelectAll]
	@TrackingNum int,
	@MatchRecordSequence int
AS

SELECT * FROM DeluxeMatch
WHERE 1=1 AND TrackingNum = @TrackingNum AND MatchRecordSequence = @MatchRecordSequence

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_Match_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_Match_Update]
	@Sequence varchar(100),
	@MatchType varchar(10),
	@MatchField varchar(40),
	@MatchData varchar(150),
	@TrackingNum int,
	@MatchRecordSequence int
AS

IF @Sequence <> ''
	BEGIN
		DECLARE @Sequence_CASTED int
		IF @Sequence = '^'
			BEGIN
				SET @Sequence_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Sequence_CASTED = CAST(@Sequence AS int)
			END

		UPDATE DeluxeMatch
			SET Sequence = @Sequence_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND MatchRecordSequence = @MatchRecordSequence
	END

IF @MatchType <> ''
	BEGIN
		DECLARE @MatchType_CASTED varchar(10)
		IF @MatchType = '^'
			BEGIN
				SET @MatchType_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @MatchType_CASTED = CAST(@MatchType AS varchar(10))
			END

		UPDATE DeluxeMatch
			SET MatchType = @MatchType_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND MatchRecordSequence = @MatchRecordSequence
	END

IF @MatchField <> ''
	BEGIN
		DECLARE @MatchField_CASTED varchar(40)
		IF @MatchField = '^'
			BEGIN
				SET @MatchField_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @MatchField_CASTED = CAST(@MatchField AS varchar(40))
			END

		UPDATE DeluxeMatch
			SET MatchField = @MatchField_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND MatchRecordSequence = @MatchRecordSequence
	END

IF @MatchData <> ''
	BEGIN
		DECLARE @MatchData_CASTED varchar(150)
		IF @MatchData = '^'
			BEGIN
				SET @MatchData_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @MatchData_CASTED = CAST(@MatchData AS varchar(150))
			END

		UPDATE DeluxeMatch
			SET MatchData = @MatchData_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND MatchRecordSequence = @MatchRecordSequence
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_MatchRecord_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_MatchRecord_Delete]
	@TrackingNum int
AS

DELETE FROM DeluxeMatchRecord
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_MatchRecord_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_MatchRecord_DeleteAll]
	@TrackingNum int
AS

DELETE FROM DeluxeMatchRecord
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_MatchRecord_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_MatchRecord_Insert]
	@MatchRecordSequence int,
	@ContributorName varchar(50),
	@Severity varchar(3),
	@TrackingNum int
AS

INSERT INTO DeluxeMatchRecord
(TrackingNum, MatchRecordSequence, ContributorName, Severity)
VALUES
(@TrackingNum, @MatchRecordSequence, @ContributorName, @Severity)

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_MatchRecord_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_MatchRecord_InsertIfNew]
	@MatchRecordSequence int,
	@ContributorName varchar(50),
	@Severity varchar(3),
	@TrackingNum int
AS

IF NOT EXISTS (SELECT * FROM DeluxeMatchRecord WHERE 1=1 AND TrackingNum = @TrackingNum)
	BEGIN
		INSERT INTO DeluxeMatchRecord
		(TrackingNum, MatchRecordSequence, ContributorName, Severity)
		VALUES
		(@TrackingNum, @MatchRecordSequence, @ContributorName, @Severity)
	END
ELSE	BEGIN
		UPDATE DeluxeMatchRecord SET
			MatchRecordSequence = @MatchRecordSequence,
			ContributorName = @ContributorName,
			Severity = @Severity
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_MatchRecord_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_MatchRecord_Select]
	@TrackingNum int
AS

SELECT * FROM DeluxeMatchRecord
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_MatchRecord_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_MatchRecord_SelectAll]
	@TrackingNum int
AS

SELECT * FROM DeluxeMatchRecord
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_MatchRecord_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_MatchRecord_Update]
	@MatchRecordSequence varchar(100),
	@ContributorName varchar(50),
	@Severity varchar(3),
	@TrackingNum int
AS

IF @MatchRecordSequence <> ''
	BEGIN
		DECLARE @MatchRecordSequence_CASTED int
		IF @MatchRecordSequence = '^'
			BEGIN
				SET @MatchRecordSequence_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @MatchRecordSequence_CASTED = CAST(@MatchRecordSequence AS int)
			END

		UPDATE DeluxeMatchRecord
			SET MatchRecordSequence = @MatchRecordSequence_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @ContributorName <> ''
	BEGIN
		DECLARE @ContributorName_CASTED varchar(50)
		IF @ContributorName = '^'
			BEGIN
				SET @ContributorName_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ContributorName_CASTED = CAST(@ContributorName AS varchar(50))
			END

		UPDATE DeluxeMatchRecord
			SET ContributorName = @ContributorName_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @Severity <> ''
	BEGIN
		DECLARE @Severity_CASTED varchar(3)
		IF @Severity = '^'
			BEGIN
				SET @Severity_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Severity_CASTED = CAST(@Severity AS varchar(3))
			END

		UPDATE DeluxeMatchRecord
			SET Severity = @Severity_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_OFACAlias_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_OFACAlias_Delete]
	@TrackingNum int
AS

DELETE FROM DeluxeOFACAlias
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_OFACAlias_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_OFACAlias_DeleteAll]
	@TrackingNum int
AS

DELETE FROM DeluxeOFACAlias
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_OFACAlias_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_OFACAlias_Insert]
	@AliasName varchar(100),
	@TrackingNum int
AS

INSERT INTO DeluxeOFACAlias
(TrackingNum, AliasName)
VALUES
(@TrackingNum, @AliasName)

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_OFACAlias_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_OFACAlias_InsertIfNew]
	@AliasName varchar(100),
	@TrackingNum int
AS

IF NOT EXISTS (SELECT * FROM DeluxeOFACAlias WHERE 1=1 AND TrackingNum = @TrackingNum)
	BEGIN
		INSERT INTO DeluxeOFACAlias
		(TrackingNum, AliasName)
		VALUES
		(@TrackingNum, @AliasName)
	END
ELSE	BEGIN
		UPDATE DeluxeOFACAlias SET
			AliasName = @AliasName
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_OFACAlias_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_OFACAlias_Select]
	@TrackingNum int
AS

SELECT * FROM DeluxeOFACAlias
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_OFACAlias_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_OFACAlias_SelectAll]
	@TrackingNum int
AS

SELECT * FROM DeluxeOFACAlias
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_OFACAlias_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_OFACAlias_Update]
	@AliasName varchar(100),
	@TrackingNum int
AS

IF @AliasName <> ''
	BEGIN
		DECLARE @AliasName_CASTED varchar(100)
		IF @AliasName = '^'
			BEGIN
				SET @AliasName_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @AliasName_CASTED = CAST(@AliasName AS varchar(100))
			END

		UPDATE DeluxeOFACAlias
			SET AliasName = @AliasName_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_OFACSanctionTypes_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_OFACSanctionTypes_Delete]
	@TrackingNum int
AS

DELETE FROM DeluxeOFACSanctions
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_OFACSanctionTypes_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_OFACSanctionTypes_DeleteAll]
	@TrackingNum int
AS

DELETE FROM DeluxeOFACSanctions
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_OFACSanctionTypes_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_OFACSanctionTypes_Insert]
	@SanctionType varchar(4),
	@TrackingNum int
AS

INSERT INTO DeluxeOFACSanctions
(TrackingNum, SanctionType)
VALUES
(@TrackingNum, @SanctionType)

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_OFACSanctionTypes_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_OFACSanctionTypes_InsertIfNew]
	@SanctionType varchar(4),
	@TrackingNum int
AS

IF NOT EXISTS (SELECT * FROM DeluxeOFACSanctions WHERE 1=1 AND TrackingNum = @TrackingNum)
	BEGIN
		INSERT INTO DeluxeOFACSanctions
		(TrackingNum, SanctionType)
		VALUES
		(@TrackingNum, @SanctionType)
	END
ELSE	BEGIN
		UPDATE DeluxeOFACSanctions SET
			SanctionType = @SanctionType
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_OFACSanctionTypes_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_OFACSanctionTypes_Select]
	@TrackingNum int
AS

SELECT * FROM DeluxeOFACSanctions
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_OFACSanctionTypes_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_OFACSanctionTypes_SelectAll]
	@TrackingNum int
AS

SELECT * FROM DeluxeOFACSanctions
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_OFACSanctionTypes_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_OFACSanctionTypes_Update]
	@SanctionType varchar(4),
	@TrackingNum int
AS

IF @SanctionType <> ''
	BEGIN
		DECLARE @SanctionType_CASTED varchar(4)
		IF @SanctionType = '^'
			BEGIN
				SET @SanctionType_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @SanctionType_CASTED = CAST(@SanctionType AS varchar(4))
			END

		UPDATE DeluxeOFACSanctions
			SET SanctionType = @SanctionType_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletError_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletError_Delete]
	@TrackingNum int
AS

DELETE FROM DeluxeOutOfWalletError
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletError_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletError_DeleteAll]
	@TrackingNum int
AS

DELETE FROM DeluxeOutOfWalletError
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletError_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletError_Insert]
	@ErrorCode varchar(20),
	@ErrorMessage varchar(255),
	@TrackingNum int,
	@JointOwnerSequence smallint
AS

INSERT INTO DeluxeOutOfWalletError
(TrackingNum, ErrorCode, ErrorMessage, JointOwnerSequence)
VALUES
(@TrackingNum, @ErrorCode, @ErrorMessage, @JointOwnerSequence)

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletError_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletError_InsertIfNew]
	@ErrorCode varchar(20),
	@ErrorMessage varchar(255),
	@TrackingNum int,
	@JointOwnerSequence smallint
AS

IF NOT EXISTS (SELECT * FROM DeluxeOutOfWalletError WHERE 1=1 AND TrackingNum = @TrackingNum)
	BEGIN
		INSERT INTO DeluxeOutOfWalletError
		(TrackingNum, ErrorCode, ErrorMessage, JointOwnerSequence)
		VALUES
		(@TrackingNum, @ErrorCode, @ErrorMessage, @JointOwnerSequence)
	END
ELSE	BEGIN
		UPDATE DeluxeOutOfWalletError SET
			ErrorCode = @ErrorCode,
			ErrorMessage = @ErrorMessage,
			JointOwnerSequence = @JointOwnerSequence
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletError_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletError_Select]
	@TrackingNum int
AS

SELECT * FROM DeluxeOutOfWalletError
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletError_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletError_SelectAll]
	@TrackingNum int
AS

SELECT * FROM DeluxeOutOfWalletError
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletError_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletError_Update]
	@ErrorCode varchar(20),
	@ErrorMessage varchar(255),
	@TrackingNum int,
	@JointOwnerSequence varchar(100)
AS

IF @ErrorCode <> ''
	BEGIN
		DECLARE @ErrorCode_CASTED varchar(20)
		IF @ErrorCode = '^'
			BEGIN
				SET @ErrorCode_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ErrorCode_CASTED = CAST(@ErrorCode AS varchar(20))
			END

		UPDATE DeluxeOutOfWalletError
			SET ErrorCode = @ErrorCode_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @ErrorMessage <> ''
	BEGIN
		DECLARE @ErrorMessage_CASTED varchar(255)
		IF @ErrorMessage = '^'
			BEGIN
				SET @ErrorMessage_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ErrorMessage_CASTED = CAST(@ErrorMessage AS varchar(255))
			END

		UPDATE DeluxeOutOfWalletError
			SET ErrorMessage = @ErrorMessage_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @JointOwnerSequence <> ''
	BEGIN
		DECLARE @JointOwnerSequence_CASTED smallint
		IF @JointOwnerSequence = '^'
			BEGIN
				SET @JointOwnerSequence_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @JointOwnerSequence_CASTED = CAST(@JointOwnerSequence AS smallint)
			END

		UPDATE DeluxeOutOfWalletError
			SET JointOwnerSequence = @JointOwnerSequence_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletIDScoreRequest_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletIDScoreRequest_Delete]
	@TrackingNum int
AS

DELETE FROM DeluxeOutOfWalletIDScoreRequest
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletIDScoreRequest_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletIDScoreRequest_DeleteAll]
	@TrackingNum int
AS

DELETE FROM DeluxeOutOfWalletIDScoreRequest
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletIDScoreRequest_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletIDScoreRequest_Insert]
	@IdentityMethod char(1),
	@FirstName varchar(16),
	@LastName varchar(24),
	@MiddleName varchar(24),
	@AddressLine1 varchar(40),
	@AddressLine2 varchar(40),
	@City varchar(22),
	@State varchar(2),
	@PostalCode varchar(9),
	@Phone varchar(10),
	@AltPhone varchar(10),
	@SSN varchar(9),
	@DateOfBirth datetime,
	@TrackingNum int,
	@JointOwnerSequence smallint
AS

INSERT INTO DeluxeOutOfWalletIDScoreRequest
(TrackingNum, IdentityMethod, FirstName, LastName, MiddleName, AddressLine1, AddressLine2, City, State, PostalCode, Phone, AltPhone, SSN, DateOfBirth, JointOwnerSequence)
VALUES
(@TrackingNum, @IdentityMethod, @FirstName, @LastName, @MiddleName, @AddressLine1, @AddressLine2, @City, @State, @PostalCode, @Phone, @AltPhone, @SSN, @DateOfBirth, @JointOwnerSequence)

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletIDScoreRequest_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletIDScoreRequest_InsertIfNew]
	@IdentityMethod char(1),
	@FirstName varchar(16),
	@LastName varchar(24),
	@MiddleName varchar(24),
	@AddressLine1 varchar(40),
	@AddressLine2 varchar(40),
	@City varchar(22),
	@State varchar(2),
	@PostalCode varchar(9),
	@Phone varchar(10),
	@AltPhone varchar(10),
	@SSN varchar(9),
	@DateOfBirth datetime,
	@TrackingNum int,
	@JointOwnerSequence smallint
AS

IF NOT EXISTS (SELECT * FROM DeluxeOutOfWalletIDScoreRequest WHERE 1=1 AND TrackingNum = @TrackingNum)
	BEGIN
		INSERT INTO DeluxeOutOfWalletIDScoreRequest
		(TrackingNum, IdentityMethod, FirstName, LastName, MiddleName, AddressLine1, AddressLine2, City, State, PostalCode, Phone, AltPhone, SSN, DateOfBirth, JointOwnerSequence)
		VALUES
		(@TrackingNum, @IdentityMethod, @FirstName, @LastName, @MiddleName, @AddressLine1, @AddressLine2, @City, @State, @PostalCode, @Phone, @AltPhone, @SSN, @DateOfBirth, @JointOwnerSequence)
	END
ELSE	BEGIN
		UPDATE DeluxeOutOfWalletIDScoreRequest SET
			IdentityMethod = @IdentityMethod,
			FirstName = @FirstName,
			LastName = @LastName,
			MiddleName = @MiddleName,
			AddressLine1 = @AddressLine1,
			AddressLine2 = @AddressLine2,
			City = @City,
			State = @State,
			PostalCode = @PostalCode,
			Phone = @Phone,
			AltPhone = @AltPhone,
			SSN = @SSN,
			DateOfBirth = @DateOfBirth,
			JointOwnerSequence = @JointOwnerSequence
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletIDScoreRequest_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletIDScoreRequest_Select]
	@TrackingNum int
AS

SELECT * FROM DeluxeOutOfWalletIDScoreRequest
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletIDScoreRequest_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletIDScoreRequest_SelectAll]
	@TrackingNum int
AS

SELECT * FROM DeluxeOutOfWalletIDScoreRequest
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletIDScoreRequest_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletIDScoreRequest_Update]
	@IdentityMethod varchar(1),
	@FirstName varchar(16),
	@LastName varchar(24),
	@MiddleName varchar(24),
	@AddressLine1 varchar(40),
	@AddressLine2 varchar(40),
	@City varchar(22),
	@State varchar(2),
	@PostalCode varchar(9),
	@Phone varchar(10),
	@AltPhone varchar(10),
	@SSN varchar(9),
	@DateOfBirth varchar(100),
	@TrackingNum int,
	@JointOwnerSequence varchar(100)
AS

IF @IdentityMethod <> ''
	BEGIN
		DECLARE @IdentityMethod_CASTED char(1)
		IF @IdentityMethod = '^'
			BEGIN
				SET @IdentityMethod_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @IdentityMethod_CASTED = CAST(@IdentityMethod AS char(1))
			END

		UPDATE DeluxeOutOfWalletIDScoreRequest
			SET IdentityMethod = @IdentityMethod_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @FirstName <> ''
	BEGIN
		DECLARE @FirstName_CASTED varchar(16)
		IF @FirstName = '^'
			BEGIN
				SET @FirstName_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @FirstName_CASTED = CAST(@FirstName AS varchar(16))
			END

		UPDATE DeluxeOutOfWalletIDScoreRequest
			SET FirstName = @FirstName_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @LastName <> ''
	BEGIN
		DECLARE @LastName_CASTED varchar(24)
		IF @LastName = '^'
			BEGIN
				SET @LastName_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @LastName_CASTED = CAST(@LastName AS varchar(24))
			END

		UPDATE DeluxeOutOfWalletIDScoreRequest
			SET LastName = @LastName_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @MiddleName <> ''
	BEGIN
		DECLARE @MiddleName_CASTED varchar(24)
		IF @MiddleName = '^'
			BEGIN
				SET @MiddleName_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @MiddleName_CASTED = CAST(@MiddleName AS varchar(24))
			END

		UPDATE DeluxeOutOfWalletIDScoreRequest
			SET MiddleName = @MiddleName_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @AddressLine1 <> ''
	BEGIN
		DECLARE @AddressLine1_CASTED varchar(40)
		IF @AddressLine1 = '^'
			BEGIN
				SET @AddressLine1_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @AddressLine1_CASTED = CAST(@AddressLine1 AS varchar(40))
			END

		UPDATE DeluxeOutOfWalletIDScoreRequest
			SET AddressLine1 = @AddressLine1_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @AddressLine2 <> ''
	BEGIN
		DECLARE @AddressLine2_CASTED varchar(40)
		IF @AddressLine2 = '^'
			BEGIN
				SET @AddressLine2_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @AddressLine2_CASTED = CAST(@AddressLine2 AS varchar(40))
			END

		UPDATE DeluxeOutOfWalletIDScoreRequest
			SET AddressLine2 = @AddressLine2_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @City <> ''
	BEGIN
		DECLARE @City_CASTED varchar(22)
		IF @City = '^'
			BEGIN
				SET @City_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @City_CASTED = CAST(@City AS varchar(22))
			END

		UPDATE DeluxeOutOfWalletIDScoreRequest
			SET City = @City_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @State <> ''
	BEGIN
		DECLARE @State_CASTED varchar(2)
		IF @State = '^'
			BEGIN
				SET @State_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @State_CASTED = CAST(@State AS varchar(2))
			END

		UPDATE DeluxeOutOfWalletIDScoreRequest
			SET State = @State_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @PostalCode <> ''
	BEGIN
		DECLARE @PostalCode_CASTED varchar(9)
		IF @PostalCode = '^'
			BEGIN
				SET @PostalCode_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @PostalCode_CASTED = CAST(@PostalCode AS varchar(9))
			END

		UPDATE DeluxeOutOfWalletIDScoreRequest
			SET PostalCode = @PostalCode_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @Phone <> ''
	BEGIN
		DECLARE @Phone_CASTED varchar(10)
		IF @Phone = '^'
			BEGIN
				SET @Phone_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Phone_CASTED = CAST(@Phone AS varchar(10))
			END

		UPDATE DeluxeOutOfWalletIDScoreRequest
			SET Phone = @Phone_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @AltPhone <> ''
	BEGIN
		DECLARE @AltPhone_CASTED varchar(10)
		IF @AltPhone = '^'
			BEGIN
				SET @AltPhone_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @AltPhone_CASTED = CAST(@AltPhone AS varchar(10))
			END

		UPDATE DeluxeOutOfWalletIDScoreRequest
			SET AltPhone = @AltPhone_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @SSN <> ''
	BEGIN
		DECLARE @SSN_CASTED varchar(9)
		IF @SSN = '^'
			BEGIN
				SET @SSN_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @SSN_CASTED = CAST(@SSN AS varchar(9))
			END

		UPDATE DeluxeOutOfWalletIDScoreRequest
			SET SSN = @SSN_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @DateOfBirth <> ''
	BEGIN
		DECLARE @DateOfBirth_CASTED datetime
		IF @DateOfBirth = '^'
			BEGIN
				SET @DateOfBirth_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @DateOfBirth_CASTED = CAST(@DateOfBirth AS datetime)
			END

		UPDATE DeluxeOutOfWalletIDScoreRequest
			SET DateOfBirth = @DateOfBirth_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @JointOwnerSequence <> ''
	BEGIN
		DECLARE @JointOwnerSequence_CASTED smallint
		IF @JointOwnerSequence = '^'
			BEGIN
				SET @JointOwnerSequence_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @JointOwnerSequence_CASTED = CAST(@JointOwnerSequence AS smallint)
			END

		UPDATE DeluxeOutOfWalletIDScoreRequest
			SET JointOwnerSequence = @JointOwnerSequence_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletQuizQuestion_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletQuizQuestion_Delete]
	@RequestSequenceID varchar(10),
	@QuizID varchar(16),
	@QuestionID int,
	@TrackingNum int
AS

DELETE FROM DeluxeOutOfWalletQuizQuestion
WHERE 1=1 AND RequestSequenceID = @RequestSequenceID AND QuizID = @QuizID AND QuestionID = @QuestionID AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletQuizQuestion_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletQuizQuestion_DeleteAll]
	@RequestSequenceID varchar(10),
	@QuizID varchar(16),
	@QuestionID int,
	@TrackingNum int
AS

DELETE FROM DeluxeOutOfWalletQuizQuestion
WHERE 1=1 AND RequestSequenceID = @RequestSequenceID AND QuizID = @QuizID AND QuestionID = @QuestionID AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletQuizQuestion_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletQuizQuestion_Insert]
	@RequestClientID varchar(53),
	@RequestSequenceID varchar(10),
	@QuizID varchar(16),
	@QuestionID int,
	@QuestionText varchar(255),
	@TrackingNum int,
	@JointOwnerSequence smallint
AS

INSERT INTO DeluxeOutOfWalletQuizQuestion
(RequestSequenceID, QuizID, QuestionID, TrackingNum, RequestClientID, QuestionText, JointOwnerSequence)
VALUES
(@RequestSequenceID, @QuizID, @QuestionID, @TrackingNum, @RequestClientID, @QuestionText, @JointOwnerSequence)

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletQuizQuestion_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletQuizQuestion_InsertIfNew]
	@RequestClientID varchar(53),
	@RequestSequenceID varchar(10),
	@QuizID varchar(16),
	@QuestionID int,
	@QuestionText varchar(255),
	@TrackingNum int,
	@JointOwnerSequence smallint
AS

IF NOT EXISTS (SELECT * FROM DeluxeOutOfWalletQuizQuestion WHERE 1=1 AND RequestSequenceID = @RequestSequenceID AND QuizID = @QuizID AND QuestionID = @QuestionID AND TrackingNum = @TrackingNum)
	BEGIN
		INSERT INTO DeluxeOutOfWalletQuizQuestion
		(RequestSequenceID, QuizID, QuestionID, TrackingNum, RequestClientID, QuestionText, JointOwnerSequence)
		VALUES
		(@RequestSequenceID, @QuizID, @QuestionID, @TrackingNum, @RequestClientID, @QuestionText, @JointOwnerSequence)
	END
ELSE	BEGIN
		UPDATE DeluxeOutOfWalletQuizQuestion SET
			RequestClientID = @RequestClientID,
			QuestionText = @QuestionText,
			JointOwnerSequence = @JointOwnerSequence
		WHERE 1=1 AND RequestSequenceID = @RequestSequenceID AND QuizID = @QuizID AND QuestionID = @QuestionID AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletQuizQuestion_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletQuizQuestion_Select]
	@RequestSequenceID varchar(10),
	@QuizID varchar(16),
	@QuestionID int,
	@TrackingNum int
AS

SELECT * FROM DeluxeOutOfWalletQuizQuestion
WHERE 1=1 AND RequestSequenceID = @RequestSequenceID AND QuizID = @QuizID AND QuestionID = @QuestionID AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletQuizQuestion_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletQuizQuestion_SelectAll]
	@RequestSequenceID varchar(10),
	@QuizID varchar(16),
	@QuestionID int,
	@TrackingNum int
AS

SELECT * FROM DeluxeOutOfWalletQuizQuestion
WHERE 1=1 AND RequestSequenceID = @RequestSequenceID AND QuizID = @QuizID AND QuestionID = @QuestionID AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletQuizQuestion_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletQuizQuestion_Update]
	@RequestClientID varchar(53),
	@RequestSequenceID varchar(10),
	@QuizID varchar(16),
	@QuestionID int,
	@QuestionText varchar(255),
	@TrackingNum int,
	@JointOwnerSequence varchar(100)
AS

IF @RequestClientID <> ''
	BEGIN
		DECLARE @RequestClientID_CASTED varchar(53)
		IF @RequestClientID = '^'
			BEGIN
				SET @RequestClientID_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @RequestClientID_CASTED = CAST(@RequestClientID AS varchar(53))
			END

		UPDATE DeluxeOutOfWalletQuizQuestion
			SET RequestClientID = @RequestClientID_CASTED
		WHERE 1=1 AND RequestSequenceID = @RequestSequenceID AND QuizID = @QuizID AND QuestionID = @QuestionID AND TrackingNum = @TrackingNum
	END

IF @QuestionText <> ''
	BEGIN
		DECLARE @QuestionText_CASTED varchar(255)
		IF @QuestionText = '^'
			BEGIN
				SET @QuestionText_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @QuestionText_CASTED = CAST(@QuestionText AS varchar(255))
			END

		UPDATE DeluxeOutOfWalletQuizQuestion
			SET QuestionText = @QuestionText_CASTED
		WHERE 1=1 AND RequestSequenceID = @RequestSequenceID AND QuizID = @QuizID AND QuestionID = @QuestionID AND TrackingNum = @TrackingNum
	END

IF @JointOwnerSequence <> ''
	BEGIN
		DECLARE @JointOwnerSequence_CASTED smallint
		IF @JointOwnerSequence = '^'
			BEGIN
				SET @JointOwnerSequence_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @JointOwnerSequence_CASTED = CAST(@JointOwnerSequence AS smallint)
			END

		UPDATE DeluxeOutOfWalletQuizQuestion
			SET JointOwnerSequence = @JointOwnerSequence_CASTED
		WHERE 1=1 AND RequestSequenceID = @RequestSequenceID AND QuizID = @QuizID AND QuestionID = @QuestionID AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletQuizQuestionChoice_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletQuizQuestionChoice_Delete]
	@RequestSequenceID varchar(10),
	@QuizID varchar(16),
	@QuestionID int,
	@Choice varchar(255),
	@TrackingNum int
AS

DELETE FROM DeluxeOutOfWalletQuizQuestionChoice
WHERE 1=1 AND RequestSequenceID = @RequestSequenceID AND QuizID = @QuizID AND QuestionID = @QuestionID AND Choice = @Choice AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletQuizQuestionChoice_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletQuizQuestionChoice_DeleteAll]
	@RequestSequenceID varchar(10),
	@QuizID varchar(16),
	@QuestionID int,
	@Choice varchar(255),
	@TrackingNum int
AS

DELETE FROM DeluxeOutOfWalletQuizQuestionChoice
WHERE 1=1 AND RequestSequenceID = @RequestSequenceID AND QuizID = @QuizID AND QuestionID = @QuestionID AND Choice = @Choice AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletQuizQuestionChoice_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletQuizQuestionChoice_Insert]
	@RequestClientID varchar(53),
	@RequestSequenceID varchar(10),
	@QuizID varchar(16),
	@QuestionID int,
	@Choice varchar(255),
	@IsUserAnswer char(1),
	@TrackingNum int,
	@JointOwnerSequence smallint
AS

INSERT INTO DeluxeOutOfWalletQuizQuestionChoice
(RequestSequenceID, QuizID, QuestionID, Choice, TrackingNum, RequestClientID, IsUserAnswer, JointOwnerSequence)
VALUES
(@RequestSequenceID, @QuizID, @QuestionID, @Choice, @TrackingNum, @RequestClientID, @IsUserAnswer, @JointOwnerSequence)

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletQuizQuestionChoice_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletQuizQuestionChoice_InsertIfNew]
	@RequestClientID varchar(53),
	@RequestSequenceID varchar(10),
	@QuizID varchar(16),
	@QuestionID int,
	@Choice varchar(255),
	@IsUserAnswer char(1),
	@TrackingNum int,
	@JointOwnerSequence smallint
AS

IF NOT EXISTS (SELECT * FROM DeluxeOutOfWalletQuizQuestionChoice WHERE 1=1 AND RequestSequenceID = @RequestSequenceID AND QuizID = @QuizID AND QuestionID = @QuestionID AND Choice = @Choice AND TrackingNum = @TrackingNum)
	BEGIN
		INSERT INTO DeluxeOutOfWalletQuizQuestionChoice
		(RequestSequenceID, QuizID, QuestionID, Choice, TrackingNum, RequestClientID, IsUserAnswer, JointOwnerSequence)
		VALUES
		(@RequestSequenceID, @QuizID, @QuestionID, @Choice, @TrackingNum, @RequestClientID, @IsUserAnswer, @JointOwnerSequence)
	END
ELSE	BEGIN
		UPDATE DeluxeOutOfWalletQuizQuestionChoice SET
			RequestClientID = @RequestClientID,
			IsUserAnswer = @IsUserAnswer,
			JointOwnerSequence = @JointOwnerSequence
		WHERE 1=1 AND RequestSequenceID = @RequestSequenceID AND QuizID = @QuizID AND QuestionID = @QuestionID AND Choice = @Choice AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletQuizQuestionChoice_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletQuizQuestionChoice_Select]
	@RequestSequenceID varchar(10),
	@QuizID varchar(16),
	@QuestionID int,
	@Choice varchar(255),
	@TrackingNum int
AS

SELECT * FROM DeluxeOutOfWalletQuizQuestionChoice
WHERE 1=1 AND RequestSequenceID = @RequestSequenceID AND QuizID = @QuizID AND QuestionID = @QuestionID AND Choice = @Choice AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletQuizQuestionChoice_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletQuizQuestionChoice_SelectAll]
	@RequestSequenceID varchar(10),
	@QuizID varchar(16),
	@QuestionID int,
	@Choice varchar(255),
	@TrackingNum int
AS

SELECT * FROM DeluxeOutOfWalletQuizQuestionChoice
WHERE 1=1 AND RequestSequenceID = @RequestSequenceID AND QuizID = @QuizID AND QuestionID = @QuestionID AND Choice = @Choice AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletQuizQuestionChoice_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletQuizQuestionChoice_Update]
	@RequestClientID varchar(53),
	@RequestSequenceID varchar(10),
	@QuizID varchar(16),
	@QuestionID int,
	@Choice varchar(255),
	@IsUserAnswer varchar(1),
	@TrackingNum int,
	@JointOwnerSequence varchar(100)
AS

IF @RequestClientID <> ''
	BEGIN
		DECLARE @RequestClientID_CASTED varchar(53)
		IF @RequestClientID = '^'
			BEGIN
				SET @RequestClientID_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @RequestClientID_CASTED = CAST(@RequestClientID AS varchar(53))
			END

		UPDATE DeluxeOutOfWalletQuizQuestionChoice
			SET RequestClientID = @RequestClientID_CASTED
		WHERE 1=1 AND RequestSequenceID = @RequestSequenceID AND QuizID = @QuizID AND QuestionID = @QuestionID AND Choice = @Choice AND TrackingNum = @TrackingNum
	END

IF @IsUserAnswer <> ''
	BEGIN
		DECLARE @IsUserAnswer_CASTED char(1)
		IF @IsUserAnswer = '^'
			BEGIN
				SET @IsUserAnswer_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @IsUserAnswer_CASTED = CAST(@IsUserAnswer AS char(1))
			END

		UPDATE DeluxeOutOfWalletQuizQuestionChoice
			SET IsUserAnswer = @IsUserAnswer_CASTED
		WHERE 1=1 AND RequestSequenceID = @RequestSequenceID AND QuizID = @QuizID AND QuestionID = @QuestionID AND Choice = @Choice AND TrackingNum = @TrackingNum
	END

IF @JointOwnerSequence <> ''
	BEGIN
		DECLARE @JointOwnerSequence_CASTED smallint
		IF @JointOwnerSequence = '^'
			BEGIN
				SET @JointOwnerSequence_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @JointOwnerSequence_CASTED = CAST(@JointOwnerSequence AS smallint)
			END

		UPDATE DeluxeOutOfWalletQuizQuestionChoice
			SET JointOwnerSequence = @JointOwnerSequence_CASTED
		WHERE 1=1 AND RequestSequenceID = @RequestSequenceID AND QuizID = @QuizID AND QuestionID = @QuestionID AND Choice = @Choice AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletQuizRequest_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletQuizRequest_Delete]
	@QuizID varchar(16),
	@TrackingNum int
AS

DELETE FROM DeluxeOutOfWalletQuizRequest
WHERE 1=1 AND QuizID = @QuizID AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletQuizRequest_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletQuizRequest_DeleteAll]
	@QuizID varchar(16),
	@TrackingNum int
AS

DELETE FROM DeluxeOutOfWalletQuizRequest
WHERE 1=1 AND QuizID = @QuizID AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletQuizRequest_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletQuizRequest_Insert]
	@RequestClientID varchar(53),
	@RequestAppID varchar(3),
	@ClientID varchar(9),
	@RequestSequenceID varchar(10),
	@IdentityMethod char(1),
	@QuizID varchar(16),
	@TrackingNum int,
	@JointOwnerSequence smallint
AS

INSERT INTO DeluxeOutOfWalletQuizRequest
(QuizID, TrackingNum, RequestClientID, RequestAppID, ClientID, RequestSequenceID, IdentityMethod, JointOwnerSequence)
VALUES
(@QuizID, @TrackingNum, @RequestClientID, @RequestAppID, @ClientID, @RequestSequenceID, @IdentityMethod, @JointOwnerSequence)

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletQuizRequest_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletQuizRequest_InsertIfNew]
	@RequestClientID varchar(53),
	@RequestAppID varchar(3),
	@ClientID varchar(9),
	@RequestSequenceID varchar(10),
	@IdentityMethod char(1),
	@QuizID varchar(16),
	@TrackingNum int,
	@JointOwnerSequence smallint
AS

IF NOT EXISTS (SELECT * FROM DeluxeOutOfWalletQuizRequest WHERE 1=1 AND QuizID = @QuizID AND TrackingNum = @TrackingNum)
	BEGIN
		INSERT INTO DeluxeOutOfWalletQuizRequest
		(QuizID, TrackingNum, RequestClientID, RequestAppID, ClientID, RequestSequenceID, IdentityMethod, JointOwnerSequence)
		VALUES
		(@QuizID, @TrackingNum, @RequestClientID, @RequestAppID, @ClientID, @RequestSequenceID, @IdentityMethod, @JointOwnerSequence)
	END
ELSE	BEGIN
		UPDATE DeluxeOutOfWalletQuizRequest SET
			RequestClientID = @RequestClientID,
			RequestAppID = @RequestAppID,
			ClientID = @ClientID,
			RequestSequenceID = @RequestSequenceID,
			IdentityMethod = @IdentityMethod,
			JointOwnerSequence = @JointOwnerSequence
		WHERE 1=1 AND QuizID = @QuizID AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletQuizRequest_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletQuizRequest_Select]
	@QuizID varchar(16),
	@TrackingNum int
AS

SELECT * FROM DeluxeOutOfWalletQuizRequest
WHERE 1=1 AND QuizID = @QuizID AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletQuizRequest_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletQuizRequest_SelectAll]
	@QuizID varchar(16),
	@TrackingNum int
AS

SELECT * FROM DeluxeOutOfWalletQuizRequest
WHERE 1=1 AND QuizID = @QuizID AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletQuizRequest_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletQuizRequest_Update]
	@RequestClientID varchar(53),
	@RequestAppID varchar(3),
	@ClientID varchar(9),
	@RequestSequenceID varchar(10),
	@IdentityMethod varchar(1),
	@QuizID varchar(16),
	@TrackingNum int,
	@JointOwnerSequence varchar(100)
AS

IF @RequestClientID <> ''
	BEGIN
		DECLARE @RequestClientID_CASTED varchar(53)
		IF @RequestClientID = '^'
			BEGIN
				SET @RequestClientID_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @RequestClientID_CASTED = CAST(@RequestClientID AS varchar(53))
			END

		UPDATE DeluxeOutOfWalletQuizRequest
			SET RequestClientID = @RequestClientID_CASTED
		WHERE 1=1 AND QuizID = @QuizID AND TrackingNum = @TrackingNum
	END

IF @RequestAppID <> ''
	BEGIN
		DECLARE @RequestAppID_CASTED varchar(3)
		IF @RequestAppID = '^'
			BEGIN
				SET @RequestAppID_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @RequestAppID_CASTED = CAST(@RequestAppID AS varchar(3))
			END

		UPDATE DeluxeOutOfWalletQuizRequest
			SET RequestAppID = @RequestAppID_CASTED
		WHERE 1=1 AND QuizID = @QuizID AND TrackingNum = @TrackingNum
	END

IF @ClientID <> ''
	BEGIN
		DECLARE @ClientID_CASTED varchar(9)
		IF @ClientID = '^'
			BEGIN
				SET @ClientID_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ClientID_CASTED = CAST(@ClientID AS varchar(9))
			END

		UPDATE DeluxeOutOfWalletQuizRequest
			SET ClientID = @ClientID_CASTED
		WHERE 1=1 AND QuizID = @QuizID AND TrackingNum = @TrackingNum
	END

IF @RequestSequenceID <> ''
	BEGIN
		DECLARE @RequestSequenceID_CASTED varchar(10)
		IF @RequestSequenceID = '^'
			BEGIN
				SET @RequestSequenceID_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @RequestSequenceID_CASTED = CAST(@RequestSequenceID AS varchar(10))
			END

		UPDATE DeluxeOutOfWalletQuizRequest
			SET RequestSequenceID = @RequestSequenceID_CASTED
		WHERE 1=1 AND QuizID = @QuizID AND TrackingNum = @TrackingNum
	END

IF @IdentityMethod <> ''
	BEGIN
		DECLARE @IdentityMethod_CASTED char(1)
		IF @IdentityMethod = '^'
			BEGIN
				SET @IdentityMethod_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @IdentityMethod_CASTED = CAST(@IdentityMethod AS char(1))
			END

		UPDATE DeluxeOutOfWalletQuizRequest
			SET IdentityMethod = @IdentityMethod_CASTED
		WHERE 1=1 AND QuizID = @QuizID AND TrackingNum = @TrackingNum
	END

IF @JointOwnerSequence <> ''
	BEGIN
		DECLARE @JointOwnerSequence_CASTED smallint
		IF @JointOwnerSequence = '^'
			BEGIN
				SET @JointOwnerSequence_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @JointOwnerSequence_CASTED = CAST(@JointOwnerSequence AS smallint)
			END

		UPDATE DeluxeOutOfWalletQuizRequest
			SET JointOwnerSequence = @JointOwnerSequence_CASTED
		WHERE 1=1 AND QuizID = @QuizID AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletQuizResponse_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletQuizResponse_Delete]
	@RequestSequenceID varchar(10),
	@QuizID varchar(16),
	@TrackingNum int
AS

DELETE FROM DeluxeOutOfWalletQuizResponse
WHERE 1=1 AND RequestSequenceID = @RequestSequenceID AND QuizID = @QuizID AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletQuizResponse_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletQuizResponse_DeleteAll]
	@RequestSequenceID varchar(10),
	@QuizID varchar(16),
	@TrackingNum int
AS

DELETE FROM DeluxeOutOfWalletQuizResponse
WHERE 1=1 AND RequestSequenceID = @RequestSequenceID AND QuizID = @QuizID AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletQuizResponse_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletQuizResponse_Insert]
	@RequestClientID varchar(53),
	@RequestSequenceID varchar(10),
	@QuizID varchar(16),
	@TrackingNum int,
	@JointOwnerSequence smallint
AS

INSERT INTO DeluxeOutOfWalletQuizResponse
(RequestSequenceID, QuizID, TrackingNum, RequestClientID, JointOwnerSequence)
VALUES
(@RequestSequenceID, @QuizID, @TrackingNum, @RequestClientID, @JointOwnerSequence)

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletQuizResponse_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletQuizResponse_InsertIfNew]
	@RequestClientID varchar(53),
	@RequestSequenceID varchar(10),
	@QuizID varchar(16),
	@TrackingNum int,
	@JointOwnerSequence smallint
AS

IF NOT EXISTS (SELECT * FROM DeluxeOutOfWalletQuizResponse WHERE 1=1 AND RequestSequenceID = @RequestSequenceID AND QuizID = @QuizID AND TrackingNum = @TrackingNum)
	BEGIN
		INSERT INTO DeluxeOutOfWalletQuizResponse
		(RequestSequenceID, QuizID, TrackingNum, RequestClientID, JointOwnerSequence)
		VALUES
		(@RequestSequenceID, @QuizID, @TrackingNum, @RequestClientID, @JointOwnerSequence)
	END
ELSE	BEGIN
		UPDATE DeluxeOutOfWalletQuizResponse SET
			RequestClientID = @RequestClientID,
			JointOwnerSequence = @JointOwnerSequence
		WHERE 1=1 AND RequestSequenceID = @RequestSequenceID AND QuizID = @QuizID AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletQuizResponse_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletQuizResponse_Select]
	@RequestSequenceID varchar(10),
	@QuizID varchar(16),
	@TrackingNum int
AS

SELECT * FROM DeluxeOutOfWalletQuizResponse
WHERE 1=1 AND RequestSequenceID = @RequestSequenceID AND QuizID = @QuizID AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletQuizResponse_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletQuizResponse_SelectAll]
	@RequestSequenceID varchar(10),
	@QuizID varchar(16),
	@TrackingNum int
AS

SELECT * FROM DeluxeOutOfWalletQuizResponse
WHERE 1=1 AND RequestSequenceID = @RequestSequenceID AND QuizID = @QuizID AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletQuizResponse_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletQuizResponse_Update]
	@RequestClientID varchar(53),
	@RequestSequenceID varchar(10),
	@QuizID varchar(16),
	@TrackingNum int,
	@JointOwnerSequence varchar(100)
AS

IF @RequestClientID <> ''
	BEGIN
		DECLARE @RequestClientID_CASTED varchar(53)
		IF @RequestClientID = '^'
			BEGIN
				SET @RequestClientID_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @RequestClientID_CASTED = CAST(@RequestClientID AS varchar(53))
			END

		UPDATE DeluxeOutOfWalletQuizResponse
			SET RequestClientID = @RequestClientID_CASTED
		WHERE 1=1 AND RequestSequenceID = @RequestSequenceID AND QuizID = @QuizID AND TrackingNum = @TrackingNum
	END

IF @JointOwnerSequence <> ''
	BEGIN
		DECLARE @JointOwnerSequence_CASTED smallint
		IF @JointOwnerSequence = '^'
			BEGIN
				SET @JointOwnerSequence_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @JointOwnerSequence_CASTED = CAST(@JointOwnerSequence AS smallint)
			END

		UPDATE DeluxeOutOfWalletQuizResponse
			SET JointOwnerSequence = @JointOwnerSequence_CASTED
		WHERE 1=1 AND RequestSequenceID = @RequestSequenceID AND QuizID = @QuizID AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletQuizResponseRequest_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletQuizResponseRequest_Delete]
	@RequestSequenceID varchar(10),
	@TrackingNum int
AS

DELETE FROM DeluxeOutOfWalletQuizResponseRequest
WHERE 1=1 AND RequestSequenceID = @RequestSequenceID AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletQuizResponseRequest_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletQuizResponseRequest_DeleteAll]
	@RequestSequenceID varchar(10),
	@TrackingNum int
AS

DELETE FROM DeluxeOutOfWalletQuizResponseRequest
WHERE 1=1 AND RequestSequenceID = @RequestSequenceID AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletQuizResponseRequest_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletQuizResponseRequest_Insert]
	@RequestSequenceID varchar(10),
	@RequestClientID varchar(53),
	@RequestStatusCode varchar(3),
	@RequestResult varchar(128),
	@RequestQuizState varchar(255),
	@RequestNumberWrong int,
	@RequestAppID varchar(3),
	@ClientID varchar(9),
	@RequestProcessDate datetime,
	@TrackingNum int,
	@JointOwnerSequence smallint
AS

INSERT INTO DeluxeOutOfWalletQuizResponseRequest
(RequestSequenceID, TrackingNum, RequestClientID, RequestStatusCode, RequestResult, RequestQuizState, RequestNumberWrong, RequestAppID, ClientID, RequestProcessDate, JointOwnerSequence)
VALUES
(@RequestSequenceID, @TrackingNum, @RequestClientID, @RequestStatusCode, @RequestResult, @RequestQuizState, @RequestNumberWrong, @RequestAppID, @ClientID, @RequestProcessDate, @JointOwnerSequence)

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletQuizResponseRequest_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletQuizResponseRequest_InsertIfNew]
	@RequestSequenceID varchar(10),
	@RequestClientID varchar(53),
	@RequestStatusCode varchar(3),
	@RequestResult varchar(128),
	@RequestQuizState varchar(255),
	@RequestNumberWrong int,
	@RequestAppID varchar(3),
	@ClientID varchar(9),
	@RequestProcessDate datetime,
	@TrackingNum int,
	@JointOwnerSequence smallint
AS

IF NOT EXISTS (SELECT * FROM DeluxeOutOfWalletQuizResponseRequest WHERE 1=1 AND RequestSequenceID = @RequestSequenceID AND TrackingNum = @TrackingNum)
	BEGIN
		INSERT INTO DeluxeOutOfWalletQuizResponseRequest
		(RequestSequenceID, TrackingNum, RequestClientID, RequestStatusCode, RequestResult, RequestQuizState, RequestNumberWrong, RequestAppID, ClientID, RequestProcessDate, JointOwnerSequence)
		VALUES
		(@RequestSequenceID, @TrackingNum, @RequestClientID, @RequestStatusCode, @RequestResult, @RequestQuizState, @RequestNumberWrong, @RequestAppID, @ClientID, @RequestProcessDate, @JointOwnerSequence)
	END
ELSE	BEGIN
		UPDATE DeluxeOutOfWalletQuizResponseRequest SET
			RequestClientID = @RequestClientID,
			RequestStatusCode = @RequestStatusCode,
			RequestResult = @RequestResult,
			RequestQuizState = @RequestQuizState,
			RequestNumberWrong = @RequestNumberWrong,
			RequestAppID = @RequestAppID,
			ClientID = @ClientID,
			RequestProcessDate = @RequestProcessDate,
			JointOwnerSequence = @JointOwnerSequence
		WHERE 1=1 AND RequestSequenceID = @RequestSequenceID AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletQuizResponseRequest_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletQuizResponseRequest_Select]
	@RequestSequenceID varchar(10),
	@TrackingNum int
AS

SELECT * FROM DeluxeOutOfWalletQuizResponseRequest
WHERE 1=1 AND RequestSequenceID = @RequestSequenceID AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletQuizResponseRequest_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletQuizResponseRequest_SelectAll]
	@RequestSequenceID varchar(10),
	@TrackingNum int
AS

SELECT * FROM DeluxeOutOfWalletQuizResponseRequest
WHERE 1=1 AND RequestSequenceID = @RequestSequenceID AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletQuizResponseRequest_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_OutOfWalletQuizResponseRequest_Update]
	@RequestSequenceID varchar(10),
	@RequestClientID varchar(53),
	@RequestStatusCode varchar(3),
	@RequestResult varchar(128),
	@RequestQuizState varchar(255),
	@RequestNumberWrong varchar(100),
	@RequestAppID varchar(3),
	@ClientID varchar(9),
	@RequestProcessDate varchar(100),
	@TrackingNum int,
	@JointOwnerSequence varchar(100)
AS

IF @RequestClientID <> ''
	BEGIN
		DECLARE @RequestClientID_CASTED varchar(53)
		IF @RequestClientID = '^'
			BEGIN
				SET @RequestClientID_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @RequestClientID_CASTED = CAST(@RequestClientID AS varchar(53))
			END

		UPDATE DeluxeOutOfWalletQuizResponseRequest
			SET RequestClientID = @RequestClientID_CASTED
		WHERE 1=1 AND RequestSequenceID = @RequestSequenceID AND TrackingNum = @TrackingNum
	END

IF @RequestStatusCode <> ''
	BEGIN
		DECLARE @RequestStatusCode_CASTED varchar(3)
		IF @RequestStatusCode = '^'
			BEGIN
				SET @RequestStatusCode_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @RequestStatusCode_CASTED = CAST(@RequestStatusCode AS varchar(3))
			END

		UPDATE DeluxeOutOfWalletQuizResponseRequest
			SET RequestStatusCode = @RequestStatusCode_CASTED
		WHERE 1=1 AND RequestSequenceID = @RequestSequenceID AND TrackingNum = @TrackingNum
	END

IF @RequestResult <> ''
	BEGIN
		DECLARE @RequestResult_CASTED varchar(128)
		IF @RequestResult = '^'
			BEGIN
				SET @RequestResult_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @RequestResult_CASTED = CAST(@RequestResult AS varchar(128))
			END

		UPDATE DeluxeOutOfWalletQuizResponseRequest
			SET RequestResult = @RequestResult_CASTED
		WHERE 1=1 AND RequestSequenceID = @RequestSequenceID AND TrackingNum = @TrackingNum
	END

IF @RequestQuizState <> ''
	BEGIN
		DECLARE @RequestQuizState_CASTED varchar(255)
		IF @RequestQuizState = '^'
			BEGIN
				SET @RequestQuizState_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @RequestQuizState_CASTED = CAST(@RequestQuizState AS varchar(255))
			END

		UPDATE DeluxeOutOfWalletQuizResponseRequest
			SET RequestQuizState = @RequestQuizState_CASTED
		WHERE 1=1 AND RequestSequenceID = @RequestSequenceID AND TrackingNum = @TrackingNum
	END

IF @RequestNumberWrong <> ''
	BEGIN
		DECLARE @RequestNumberWrong_CASTED int
		IF @RequestNumberWrong = '^'
			BEGIN
				SET @RequestNumberWrong_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @RequestNumberWrong_CASTED = CAST(@RequestNumberWrong AS int)
			END

		UPDATE DeluxeOutOfWalletQuizResponseRequest
			SET RequestNumberWrong = @RequestNumberWrong_CASTED
		WHERE 1=1 AND RequestSequenceID = @RequestSequenceID AND TrackingNum = @TrackingNum
	END

IF @RequestAppID <> ''
	BEGIN
		DECLARE @RequestAppID_CASTED varchar(3)
		IF @RequestAppID = '^'
			BEGIN
				SET @RequestAppID_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @RequestAppID_CASTED = CAST(@RequestAppID AS varchar(3))
			END

		UPDATE DeluxeOutOfWalletQuizResponseRequest
			SET RequestAppID = @RequestAppID_CASTED
		WHERE 1=1 AND RequestSequenceID = @RequestSequenceID AND TrackingNum = @TrackingNum
	END

IF @ClientID <> ''
	BEGIN
		DECLARE @ClientID_CASTED varchar(9)
		IF @ClientID = '^'
			BEGIN
				SET @ClientID_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ClientID_CASTED = CAST(@ClientID AS varchar(9))
			END

		UPDATE DeluxeOutOfWalletQuizResponseRequest
			SET ClientID = @ClientID_CASTED
		WHERE 1=1 AND RequestSequenceID = @RequestSequenceID AND TrackingNum = @TrackingNum
	END

IF @RequestProcessDate <> ''
	BEGIN
		DECLARE @RequestProcessDate_CASTED datetime
		IF @RequestProcessDate = '^'
			BEGIN
				SET @RequestProcessDate_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @RequestProcessDate_CASTED = CAST(@RequestProcessDate AS datetime)
			END

		UPDATE DeluxeOutOfWalletQuizResponseRequest
			SET RequestProcessDate = @RequestProcessDate_CASTED
		WHERE 1=1 AND RequestSequenceID = @RequestSequenceID AND TrackingNum = @TrackingNum
	END

IF @JointOwnerSequence <> ''
	BEGIN
		DECLARE @JointOwnerSequence_CASTED smallint
		IF @JointOwnerSequence = '^'
			BEGIN
				SET @JointOwnerSequence_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @JointOwnerSequence_CASTED = CAST(@JointOwnerSequence AS smallint)
			END

		UPDATE DeluxeOutOfWalletQuizResponseRequest
			SET JointOwnerSequence = @JointOwnerSequence_CASTED
		WHERE 1=1 AND RequestSequenceID = @RequestSequenceID AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_Phone_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_Phone_Delete]
	@TrackingNum int,
	@MatchRecordSequence int
AS

DELETE FROM DeluxeDetectPhone
WHERE 1=1 AND TrackingNum = @TrackingNum AND MatchRecordSequence = @MatchRecordSequence

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_Phone_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_Phone_DeleteAll]
	@TrackingNum int,
	@MatchRecordSequence int
AS

DELETE FROM DeluxeDetectPhone
WHERE 1=1 AND TrackingNum = @TrackingNum AND MatchRecordSequence = @MatchRecordSequence

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_Phone_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_Phone_Insert]
	@Sequence int,
	@PhoneType char(3),
	@PhoneNumber varchar(10),
	@TrackingNum int,
	@MatchRecordSequence int
AS

INSERT INTO DeluxeDetectPhone
(TrackingNum, MatchRecordSequence, Sequence, PhoneType, PhoneNumber)
VALUES
(@TrackingNum, @MatchRecordSequence, @Sequence, @PhoneType, @PhoneNumber)

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_Phone_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_Phone_InsertIfNew]
	@Sequence int,
	@PhoneType char(3),
	@PhoneNumber varchar(10),
	@TrackingNum int,
	@MatchRecordSequence int
AS

IF NOT EXISTS (SELECT * FROM DeluxeDetectPhone WHERE 1=1 AND TrackingNum = @TrackingNum AND MatchRecordSequence = @MatchRecordSequence)
	BEGIN
		INSERT INTO DeluxeDetectPhone
		(TrackingNum, MatchRecordSequence, Sequence, PhoneType, PhoneNumber)
		VALUES
		(@TrackingNum, @MatchRecordSequence, @Sequence, @PhoneType, @PhoneNumber)
	END
ELSE	BEGIN
		UPDATE DeluxeDetectPhone SET
			Sequence = @Sequence,
			PhoneType = @PhoneType,
			PhoneNumber = @PhoneNumber
		WHERE 1=1 AND TrackingNum = @TrackingNum AND MatchRecordSequence = @MatchRecordSequence
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_Phone_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_Phone_Select]
	@TrackingNum int,
	@MatchRecordSequence int
AS

SELECT * FROM DeluxeDetectPhone
WHERE 1=1 AND TrackingNum = @TrackingNum AND MatchRecordSequence = @MatchRecordSequence

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_Phone_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_Phone_SelectAll]
	@TrackingNum int,
	@MatchRecordSequence int
AS

SELECT * FROM DeluxeDetectPhone
WHERE 1=1 AND TrackingNum = @TrackingNum AND MatchRecordSequence = @MatchRecordSequence

GO
/****** Object:  StoredProcedure [IMS].[sp_DeluxeDetectIDxlate_Phone_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_DeluxeDetectIDxlate_Phone_Update]
	@Sequence varchar(100),
	@PhoneType varchar(3),
	@PhoneNumber varchar(10),
	@TrackingNum int,
	@MatchRecordSequence int
AS

IF @Sequence <> ''
	BEGIN
		DECLARE @Sequence_CASTED int
		IF @Sequence = '^'
			BEGIN
				SET @Sequence_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Sequence_CASTED = CAST(@Sequence AS int)
			END

		UPDATE DeluxeDetectPhone
			SET Sequence = @Sequence_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND MatchRecordSequence = @MatchRecordSequence
	END

IF @PhoneType <> ''
	BEGIN
		DECLARE @PhoneType_CASTED char(3)
		IF @PhoneType = '^'
			BEGIN
				SET @PhoneType_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @PhoneType_CASTED = CAST(@PhoneType AS char(3))
			END

		UPDATE DeluxeDetectPhone
			SET PhoneType = @PhoneType_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND MatchRecordSequence = @MatchRecordSequence
	END

IF @PhoneNumber <> ''
	BEGIN
		DECLARE @PhoneNumber_CASTED varchar(10)
		IF @PhoneNumber = '^'
			BEGIN
				SET @PhoneNumber_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @PhoneNumber_CASTED = CAST(@PhoneNumber AS varchar(10))
			END

		UPDATE DeluxeDetectPhone
			SET PhoneNumber = @PhoneNumber_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND MatchRecordSequence = @MatchRecordSequence
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_DocStoreIndexParams]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[sp_DocStoreIndexParams]
	@TrackingNum int
AS
BEGIN
	SELECT FName AS FirstName, LName AS LastName, Account, SSN
	FROM NewMemberRequest
	WHERE TrackingNum = @TrackingNum
END
GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_AccountActionInfo_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_AccountActionInfo_Delete]
	@TrackingNum int
AS

DELETE FROM IMS.EF2_AccountActionInfo
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_AccountActionInfo_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_eFunds2xlate_AccountActionInfo_DeleteAll]
	@TrackingNum int
AS

DELETE FROM IMS.EF2_AccountActionInfo
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_AccountActionInfo_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_eFunds2xlate_AccountActionInfo_Insert]
	@accountacceptancetxt varchar(10),
	@accountactiontxt1 varchar(30),
	@accountactiontxt10 varchar(30),
	@accountactiontxt2 varchar(30),
	@accountactiontxt3 varchar(30),
	@accountactiontxt4 varchar(30),
	@accountactiontxt5 varchar(30),
	@accountactiontxt6 varchar(30),
	@accountactiontxt7 varchar(30),
	@accountactiontxt8 varchar(30),
	@accountactiontxt9 varchar(30),
	@TrackingNum int
AS

INSERT INTO IMS.EF2_AccountActionInfo
(TrackingNum, accountacceptancetxt, accountactiontxt1, accountactiontxt10, accountactiontxt2, accountactiontxt3, accountactiontxt4, accountactiontxt5, accountactiontxt6, accountactiontxt7, accountactiontxt8, accountactiontxt9)
VALUES
(@TrackingNum, @accountacceptancetxt, @accountactiontxt1, @accountactiontxt10, @accountactiontxt2, @accountactiontxt3, @accountactiontxt4, @accountactiontxt5, @accountactiontxt6, @accountactiontxt7, @accountactiontxt8, @accountactiontxt9)

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_AccountActionInfo_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_eFunds2xlate_AccountActionInfo_InsertIfNew]
	@accountacceptancetxt varchar(10),
	@accountactiontxt1 varchar(30),
	@accountactiontxt10 varchar(30),
	@accountactiontxt2 varchar(30),
	@accountactiontxt3 varchar(30),
	@accountactiontxt4 varchar(30),
	@accountactiontxt5 varchar(30),
	@accountactiontxt6 varchar(30),
	@accountactiontxt7 varchar(30),
	@accountactiontxt8 varchar(30),
	@accountactiontxt9 varchar(30),
	@TrackingNum int
AS

DECLARE @Count int
SELECT @Count = COUNT(accountacceptancetxt) FROM IMS.EF2_AccountActionInfo WHERE 1=1 AND TrackingNum = @TrackingNum

IF @Count = 0
	BEGIN
		INSERT INTO IMS.EF2_AccountActionInfo
		(TrackingNum, accountacceptancetxt, accountactiontxt1, accountactiontxt10, accountactiontxt2, accountactiontxt3, accountactiontxt4, accountactiontxt5, accountactiontxt6, accountactiontxt7, accountactiontxt8, accountactiontxt9)
		VALUES
		(@TrackingNum, @accountacceptancetxt, @accountactiontxt1, @accountactiontxt10, @accountactiontxt2, @accountactiontxt3, @accountactiontxt4, @accountactiontxt5, @accountactiontxt6, @accountactiontxt7, @accountactiontxt8, @accountactiontxt9)
	END
ELSE	BEGIN
		UPDATE IMS.EF2_AccountActionInfo SET
			accountacceptancetxt = @accountacceptancetxt,
			accountactiontxt1 = @accountactiontxt1,
			accountactiontxt10 = @accountactiontxt10,
			accountactiontxt2 = @accountactiontxt2,
			accountactiontxt3 = @accountactiontxt3,
			accountactiontxt4 = @accountactiontxt4,
			accountactiontxt5 = @accountactiontxt5,
			accountactiontxt6 = @accountactiontxt6,
			accountactiontxt7 = @accountactiontxt7,
			accountactiontxt8 = @accountactiontxt8,
			accountactiontxt9 = @accountactiontxt9
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_AccountActionInfo_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_eFunds2xlate_AccountActionInfo_Select]
	@TrackingNum int
AS

SELECT * FROM IMS.EF2_AccountActionInfo
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_AccountActionInfo_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_eFunds2xlate_AccountActionInfo_SelectAll]
	@TrackingNum int
AS

SELECT * FROM IMS.EF2_AccountActionInfo
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_AccountActionInfo_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_eFunds2xlate_AccountActionInfo_Update]
	@accountacceptancetxt varchar(10),
	@accountactiontxt1 varchar(30),
	@accountactiontxt10 varchar(30),
	@accountactiontxt2 varchar(30),
	@accountactiontxt3 varchar(30),
	@accountactiontxt4 varchar(30),
	@accountactiontxt5 varchar(30),
	@accountactiontxt6 varchar(30),
	@accountactiontxt7 varchar(30),
	@accountactiontxt8 varchar(30),
	@accountactiontxt9 varchar(30),
	@TrackingNum int
AS

IF @accountacceptancetxt <> ''
	BEGIN
		DECLARE @accountacceptancetxt_CASTED varchar(10)
		IF @accountacceptancetxt = '^'
			BEGIN
				SET @accountacceptancetxt_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @accountacceptancetxt_CASTED = CAST(@accountacceptancetxt AS varchar(10))
			END

		UPDATE IMS.EF2_AccountActionInfo
			SET accountacceptancetxt = @accountacceptancetxt_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @accountactiontxt1 <> ''
	BEGIN
		DECLARE @accountactiontxt1_CASTED varchar(30)
		IF @accountactiontxt1 = '^'
			BEGIN
				SET @accountactiontxt1_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @accountactiontxt1_CASTED = CAST(@accountactiontxt1 AS varchar(30))
			END

		UPDATE IMS.EF2_AccountActionInfo
			SET accountactiontxt1 = @accountactiontxt1_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @accountactiontxt10 <> ''
	BEGIN
		DECLARE @accountactiontxt10_CASTED varchar(30)
		IF @accountactiontxt10 = '^'
			BEGIN
				SET @accountactiontxt10_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @accountactiontxt10_CASTED = CAST(@accountactiontxt10 AS varchar(30))
			END

		UPDATE IMS.EF2_AccountActionInfo
			SET accountactiontxt10 = @accountactiontxt10_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @accountactiontxt2 <> ''
	BEGIN
		DECLARE @accountactiontxt2_CASTED varchar(30)
		IF @accountactiontxt2 = '^'
			BEGIN
				SET @accountactiontxt2_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @accountactiontxt2_CASTED = CAST(@accountactiontxt2 AS varchar(30))
			END

		UPDATE IMS.EF2_AccountActionInfo
			SET accountactiontxt2 = @accountactiontxt2_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @accountactiontxt3 <> ''
	BEGIN
		DECLARE @accountactiontxt3_CASTED varchar(30)
		IF @accountactiontxt3 = '^'
			BEGIN
				SET @accountactiontxt3_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @accountactiontxt3_CASTED = CAST(@accountactiontxt3 AS varchar(30))
			END

		UPDATE IMS.EF2_AccountActionInfo
			SET accountactiontxt3 = @accountactiontxt3_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @accountactiontxt4 <> ''
	BEGIN
		DECLARE @accountactiontxt4_CASTED varchar(30)
		IF @accountactiontxt4 = '^'
			BEGIN
				SET @accountactiontxt4_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @accountactiontxt4_CASTED = CAST(@accountactiontxt4 AS varchar(30))
			END

		UPDATE IMS.EF2_AccountActionInfo
			SET accountactiontxt4 = @accountactiontxt4_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @accountactiontxt5 <> ''
	BEGIN
		DECLARE @accountactiontxt5_CASTED varchar(30)
		IF @accountactiontxt5 = '^'
			BEGIN
				SET @accountactiontxt5_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @accountactiontxt5_CASTED = CAST(@accountactiontxt5 AS varchar(30))
			END

		UPDATE IMS.EF2_AccountActionInfo
			SET accountactiontxt5 = @accountactiontxt5_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @accountactiontxt6 <> ''
	BEGIN
		DECLARE @accountactiontxt6_CASTED varchar(30)
		IF @accountactiontxt6 = '^'
			BEGIN
				SET @accountactiontxt6_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @accountactiontxt6_CASTED = CAST(@accountactiontxt6 AS varchar(30))
			END

		UPDATE IMS.EF2_AccountActionInfo
			SET accountactiontxt6 = @accountactiontxt6_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @accountactiontxt7 <> ''
	BEGIN
		DECLARE @accountactiontxt7_CASTED varchar(30)
		IF @accountactiontxt7 = '^'
			BEGIN
				SET @accountactiontxt7_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @accountactiontxt7_CASTED = CAST(@accountactiontxt7 AS varchar(30))
			END

		UPDATE IMS.EF2_AccountActionInfo
			SET accountactiontxt7 = @accountactiontxt7_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @accountactiontxt8 <> ''
	BEGIN
		DECLARE @accountactiontxt8_CASTED varchar(30)
		IF @accountactiontxt8 = '^'
			BEGIN
				SET @accountactiontxt8_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @accountactiontxt8_CASTED = CAST(@accountactiontxt8 AS varchar(30))
			END

		UPDATE IMS.EF2_AccountActionInfo
			SET accountactiontxt8 = @accountactiontxt8_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @accountactiontxt9 <> ''
	BEGIN
		DECLARE @accountactiontxt9_CASTED varchar(30)
		IF @accountactiontxt9 = '^'
			BEGIN
				SET @accountactiontxt9_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @accountactiontxt9_CASTED = CAST(@accountactiontxt9 AS varchar(30))
			END

		UPDATE IMS.EF2_AccountActionInfo
			SET accountactiontxt9 = @accountactiontxt9_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_addBussIDBActions_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_addBussIDBActions_Delete]
	@TrackingNum int
AS

DELETE FROM IMS.EF2_BussIDBActions
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_addBussIDBActions_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_addBussIDBActions_DeleteAll]
	@TrackingNum int
AS

DELETE FROM IMS.EF2_BussIDBActions
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_addBussIDBActions_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_addBussIDBActions_Insert]
	@idboid int,
	@ActionMessage varchar(512),
	@TrackingNum int
AS

INSERT INTO IMS.EF2_BussIDBActions
(TrackingNum, idboid, ActionMessage)
VALUES
(@TrackingNum, @idboid, @ActionMessage)

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_addBussIDBActions_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_addBussIDBActions_InsertIfNew]
	@idboid int,
	@ActionMessage varchar(512),
	@TrackingNum int
AS

DECLARE @Count int
SELECT @Count = COUNT(idboid) FROM IMS.EF2_BussIDBActions WHERE 1=1 AND TrackingNum = @TrackingNum

IF @Count = 0
	BEGIN
		INSERT INTO IMS.EF2_BussIDBActions
		(TrackingNum, idboid, ActionMessage)
		VALUES
		(@TrackingNum, @idboid, @ActionMessage)
	END
ELSE	BEGIN
		UPDATE IMS.EF2_BussIDBActions SET
			idboid = @idboid,
			ActionMessage = @ActionMessage
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_addBussIDBActions_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_addBussIDBActions_Select]
	@TrackingNum int
AS

SELECT * FROM IMS.EF2_BussIDBActions
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_addBussIDBActions_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_addBussIDBActions_SelectAll]
	@TrackingNum int
AS

SELECT * FROM IMS.EF2_BussIDBActions
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_addBussIDBActions_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_addBussIDBActions_Update]
	@idboid varchar(100),
	@ActionMessage varchar(512),
	@TrackingNum int
AS

IF @idboid <> ''
	BEGIN
		DECLARE @idboid_CASTED int
		IF @idboid = '^'
			BEGIN
				SET @idboid_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @idboid_CASTED = CAST(@idboid AS int)
			END

		UPDATE IMS.EF2_BussIDBActions
			SET idboid = @idboid_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @ActionMessage <> ''
	BEGIN
		DECLARE @ActionMessage_CASTED varchar(512)
		IF @ActionMessage = '^'
			BEGIN
				SET @ActionMessage_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ActionMessage_CASTED = CAST(@ActionMessage AS varchar(512))
			END

		UPDATE IMS.EF2_BussIDBActions
			SET ActionMessage = @ActionMessage_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_addBussIDBOverride_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_addBussIDBOverride_Delete]
	@TrackingNum int
AS

DELETE FROM IMS.EF2_BussIDBOverride
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_addBussIDBOverride_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_addBussIDBOverride_DeleteAll]
	@TrackingNum int
AS

DELETE FROM IMS.EF2_BussIDBOverride
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_addBussIDBOverride_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_addBussIDBOverride_Insert]
	@idboid int,
	@OverrideMessage varchar(512),
	@TrackingNum int
AS

INSERT INTO IMS.EF2_BussIDBOverride
(TrackingNum, idboid, OverrideMessage)
VALUES
(@TrackingNum, @idboid, @OverrideMessage)

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_addBussIDBOverride_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_addBussIDBOverride_InsertIfNew]
	@idboid int,
	@OverrideMessage varchar(512),
	@TrackingNum int
AS

DECLARE @Count int
SELECT @Count = COUNT(idboid) FROM IMS.EF2_BussIDBOverride WHERE 1=1 AND TrackingNum = @TrackingNum

IF @Count = 0
	BEGIN
		INSERT INTO IMS.EF2_BussIDBOverride
		(TrackingNum, idboid, OverrideMessage)
		VALUES
		(@TrackingNum, @idboid, @OverrideMessage)
	END
ELSE	BEGIN
		UPDATE IMS.EF2_BussIDBOverride SET
			idboid = @idboid,
			OverrideMessage = @OverrideMessage
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_addBussIDBOverride_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_addBussIDBOverride_Select]
	@TrackingNum int
AS

SELECT * FROM IMS.EF2_BussIDBOverride
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_addBussIDBOverride_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_addBussIDBOverride_SelectAll]
	@TrackingNum int
AS

SELECT * FROM IMS.EF2_BussIDBOverride
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_addBussIDBOverride_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_addBussIDBOverride_Update]
	@idboid varchar(100),
	@OverrideMessage varchar(512),
	@TrackingNum int
AS

IF @idboid <> ''
	BEGIN
		DECLARE @idboid_CASTED int
		IF @idboid = '^'
			BEGIN
				SET @idboid_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @idboid_CASTED = CAST(@idboid AS int)
			END

		UPDATE IMS.EF2_BussIDBOverride
			SET idboid = @idboid_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @OverrideMessage <> ''
	BEGIN
		DECLARE @OverrideMessage_CASTED varchar(512)
		IF @OverrideMessage = '^'
			BEGIN
				SET @OverrideMessage_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @OverrideMessage_CASTED = CAST(@OverrideMessage AS varchar(512))
			END

		UPDATE IMS.EF2_BussIDBOverride
			SET OverrideMessage = @OverrideMessage_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_addBussOFACOverride_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_addBussOFACOverride_Delete]
	@TrackingNum int
AS

DELETE FROM IMS.EF2_BussOFACOverride
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_addBussOFACOverride_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_addBussOFACOverride_DeleteAll]
	@TrackingNum int
AS

DELETE FROM IMS.EF2_BussOFACOverride
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_addBussOFACOverride_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_addBussOFACOverride_Insert]
	@ofacoid int,
	@OverrideMessage varchar(512),
	@TrackingNum int
AS

INSERT INTO IMS.EF2_BussOFACOverride
(TrackingNum, ofacoid, OverrideMessage)
VALUES
(@TrackingNum, @ofacoid, @OverrideMessage)

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_addBussOFACOverride_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_addBussOFACOverride_InsertIfNew]
	@ofacoid int,
	@OverrideMessage varchar(512),
	@TrackingNum int
AS

DECLARE @Count int
SELECT @Count = COUNT(ofacoid) FROM IMS.EF2_BussOFACOverride WHERE 1=1 AND TrackingNum = @TrackingNum

IF @Count = 0
	BEGIN
		INSERT INTO IMS.EF2_BussOFACOverride
		(TrackingNum, ofacoid, OverrideMessage)
		VALUES
		(@TrackingNum, @ofacoid, @OverrideMessage)
	END
ELSE	BEGIN
		UPDATE IMS.EF2_BussOFACOverride SET
			ofacoid = @ofacoid,
			OverrideMessage = @OverrideMessage
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_addBussOFACOverride_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_addBussOFACOverride_Select]
	@TrackingNum int
AS

SELECT * FROM IMS.EF2_BussOFACOverride
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_addBussOFACOverride_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_addBussOFACOverride_SelectAll]
	@TrackingNum int
AS

SELECT * FROM IMS.EF2_BussOFACOverride
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_addBussOFACOverride_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_addBussOFACOverride_Update]
	@ofacoid varchar(100),
	@OverrideMessage varchar(512),
	@TrackingNum int
AS

IF @ofacoid <> ''
	BEGIN
		DECLARE @ofacoid_CASTED int
		IF @ofacoid = '^'
			BEGIN
				SET @ofacoid_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ofacoid_CASTED = CAST(@ofacoid AS int)
			END

		UPDATE IMS.EF2_BussOFACOverride
			SET ofacoid = @ofacoid_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @OverrideMessage <> ''
	BEGIN
		DECLARE @OverrideMessage_CASTED varchar(512)
		IF @OverrideMessage = '^'
			BEGIN
				SET @OverrideMessage_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @OverrideMessage_CASTED = CAST(@OverrideMessage AS varchar(512))
			END

		UPDATE IMS.EF2_BussOFACOverride
			SET OverrideMessage = @OverrideMessage_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_addChexIDVActions_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_addChexIDVActions_Delete]
	@TrackingNum int
AS

DELETE FROM IMS.EF2_ChexIDVActions
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_addChexIDVActions_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_addChexIDVActions_DeleteAll]
	@TrackingNum int
AS

DELETE FROM IMS.EF2_ChexIDVActions
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_addChexIDVActions_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_addChexIDVActions_Insert]
	@idvoid int,
	@ActionMessage varchar(512),
	@TrackingNum int
AS

INSERT INTO IMS.EF2_ChexIDVActions
(TrackingNum, idvoid, ActionMessage)
VALUES
(@TrackingNum, @idvoid, @ActionMessage)

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_addChexIDVActions_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_addChexIDVActions_InsertIfNew]
	@idvoid int,
	@ActionMessage varchar(512),
	@TrackingNum int
AS

DECLARE @Count int
SELECT @Count = COUNT(idvoid) FROM IMS.EF2_ChexIDVActions WHERE 1=1 AND TrackingNum = @TrackingNum

IF @Count = 0
	BEGIN
		INSERT INTO IMS.EF2_ChexIDVActions
		(TrackingNum, idvoid, ActionMessage)
		VALUES
		(@TrackingNum, @idvoid, @ActionMessage)
	END
ELSE	BEGIN
		UPDATE IMS.EF2_ChexIDVActions SET
			idvoid = @idvoid,
			ActionMessage = @ActionMessage
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_addChexIDVActions_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_addChexIDVActions_Select]
	@TrackingNum int
AS

SELECT * FROM IMS.EF2_ChexIDVActions
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_addChexIDVActions_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_addChexIDVActions_SelectAll]
	@TrackingNum int
AS

SELECT * FROM IMS.EF2_ChexIDVActions
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_addChexIDVActions_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_addChexIDVActions_Update]
	@idvoid varchar(100),
	@ActionMessage varchar(512),
	@TrackingNum int
AS

IF @idvoid <> ''
	BEGIN
		DECLARE @idvoid_CASTED int
		IF @idvoid = '^'
			BEGIN
				SET @idvoid_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @idvoid_CASTED = CAST(@idvoid AS int)
			END

		UPDATE IMS.EF2_ChexIDVActions
			SET idvoid = @idvoid_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @ActionMessage <> ''
	BEGIN
		DECLARE @ActionMessage_CASTED varchar(512)
		IF @ActionMessage = '^'
			BEGIN
				SET @ActionMessage_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ActionMessage_CASTED = CAST(@ActionMessage AS varchar(512))
			END

		UPDATE IMS.EF2_ChexIDVActions
			SET ActionMessage = @ActionMessage_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_addChexIDVOverride_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_addChexIDVOverride_Delete]
	@TrackingNum int
AS

DELETE FROM IMS.EF2_ChexIDVOverride
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_addChexIDVOverride_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_addChexIDVOverride_DeleteAll]
	@TrackingNum int
AS

DELETE FROM IMS.EF2_ChexIDVOverride
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_addChexIDVOverride_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_addChexIDVOverride_Insert]
	@idvoid int,
	@OverrideMessage varchar(512),
	@TrackingNum int
AS

INSERT INTO IMS.EF2_ChexIDVOverride
(TrackingNum, idvoid, OverrideMessage)
VALUES
(@TrackingNum, @idvoid, @OverrideMessage)

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_addChexIDVOverride_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_addChexIDVOverride_InsertIfNew]
	@idvoid int,
	@OverrideMessage varchar(512),
	@TrackingNum int
AS

DECLARE @Count int
SELECT @Count = COUNT(idvoid) FROM IMS.EF2_ChexIDVOverride WHERE 1=1 AND TrackingNum = @TrackingNum

IF @Count = 0
	BEGIN
		INSERT INTO IMS.EF2_ChexIDVOverride
		(TrackingNum, idvoid, OverrideMessage)
		VALUES
		(@TrackingNum, @idvoid, @OverrideMessage)
	END
ELSE	BEGIN
		UPDATE IMS.EF2_ChexIDVOverride SET
			idvoid = @idvoid,
			OverrideMessage = @OverrideMessage
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_addChexIDVOverride_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_addChexIDVOverride_Select]
	@TrackingNum int
AS

SELECT * FROM IMS.EF2_ChexIDVOverride
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_addChexIDVOverride_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_addChexIDVOverride_SelectAll]
	@TrackingNum int
AS

SELECT * FROM IMS.EF2_ChexIDVOverride
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_addChexIDVOverride_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_addChexIDVOverride_Update]
	@idvoid varchar(100),
	@OverrideMessage varchar(512),
	@TrackingNum int
AS

IF @idvoid <> ''
	BEGIN
		DECLARE @idvoid_CASTED int
		IF @idvoid = '^'
			BEGIN
				SET @idvoid_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @idvoid_CASTED = CAST(@idvoid AS int)
			END

		UPDATE IMS.EF2_ChexIDVOverride
			SET idvoid = @idvoid_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @OverrideMessage <> ''
	BEGIN
		DECLARE @OverrideMessage_CASTED varchar(512)
		IF @OverrideMessage = '^'
			BEGIN
				SET @OverrideMessage_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @OverrideMessage_CASTED = CAST(@OverrideMessage AS varchar(512))
			END

		UPDATE IMS.EF2_ChexIDVOverride
			SET OverrideMessage = @OverrideMessage_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_addChexOFACOverride_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_addChexOFACOverride_Delete]
	@TrackingNum int
AS

DELETE FROM IMS.EF2_ChexOFACOverride
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_addChexOFACOverride_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_addChexOFACOverride_DeleteAll]
	@TrackingNum int
AS

DELETE FROM IMS.EF2_ChexOFACOverride
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_addChexOFACOverride_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_addChexOFACOverride_Insert]
	@ofacoid int,
	@OverrideMessage varchar(512),
	@TrackingNum int
AS

INSERT INTO IMS.EF2_ChexOFACOverride
(TrackingNum, ofacoid, OverrideMessage)
VALUES
(@TrackingNum, @ofacoid, @OverrideMessage)

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_addChexOFACOverride_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_addChexOFACOverride_InsertIfNew]
	@ofacoid int,
	@OverrideMessage varchar(512),
	@TrackingNum int
AS

DECLARE @Count int
SELECT @Count = COUNT(ofacoid) FROM IMS.EF2_ChexOFACOverride WHERE 1=1 AND TrackingNum = @TrackingNum

IF @Count = 0
	BEGIN
		INSERT INTO IMS.EF2_ChexOFACOverride
		(TrackingNum, ofacoid, OverrideMessage)
		VALUES
		(@TrackingNum, @ofacoid, @OverrideMessage)
	END
ELSE	BEGIN
		UPDATE IMS.EF2_ChexOFACOverride SET
			ofacoid = @ofacoid,
			OverrideMessage = @OverrideMessage
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_addChexOFACOverride_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_addChexOFACOverride_Select]
	@TrackingNum int
AS

SELECT * FROM IMS.EF2_ChexOFACOverride
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_addChexOFACOverride_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_addChexOFACOverride_SelectAll]
	@TrackingNum int
AS

SELECT * FROM IMS.EF2_ChexOFACOverride
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_addChexOFACOverride_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_addChexOFACOverride_Update]
	@ofacoid varchar(100),
	@OverrideMessage varchar(512),
	@TrackingNum int
AS

IF @ofacoid <> ''
	BEGIN
		DECLARE @ofacoid_CASTED int
		IF @ofacoid = '^'
			BEGIN
				SET @ofacoid_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ofacoid_CASTED = CAST(@ofacoid AS int)
			END

		UPDATE IMS.EF2_ChexOFACOverride
			SET ofacoid = @ofacoid_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @OverrideMessage <> ''
	BEGIN
		DECLARE @OverrideMessage_CASTED varchar(512)
		IF @OverrideMessage = '^'
			BEGIN
				SET @OverrideMessage_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @OverrideMessage_CASTED = CAST(@OverrideMessage AS varchar(512))
			END

		UPDATE IMS.EF2_ChexOFACOverride
			SET OverrideMessage = @OverrideMessage_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_ApprovalMapping_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_ApprovalMapping_Delete]
	@DefaultsID int,
	@BranchID int,
	@AccountType char(2)
AS

DELETE FROM IMS.EF2_ApprovalMapping
WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_ApprovalMapping_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_ApprovalMapping_DeleteAll]
	@DefaultsID int,
	@BranchID int,
	@AccountType char(2)
AS

DELETE FROM IMS.EF2_ApprovalMapping
WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_ApprovalMapping_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_ApprovalMapping_Insert]
	@productoffertxt varchar(32),
	@CBDecisionCode varchar(80),
	@DefaultsID int,
	@BranchID int,
	@AccountType char(2)
AS

INSERT INTO IMS.EF2_ApprovalMapping
(DefaultsID, BranchID, AccountType, productoffertxt, CBDecisionCode)
VALUES
(@DefaultsID, @BranchID, @AccountType, @productoffertxt, @CBDecisionCode)

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_ApprovalMapping_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_ApprovalMapping_InsertIfNew]
	@productoffertxt varchar(32),
	@CBDecisionCode varchar(80),
	@DefaultsID int,
	@BranchID int,
	@AccountType char(2)
AS

DECLARE @Count int
SELECT @Count = COUNT(productoffertxt) FROM IMS.EF2_ApprovalMapping WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType

IF @Count = 0
	BEGIN
		INSERT INTO IMS.EF2_ApprovalMapping
		(DefaultsID, BranchID, AccountType, productoffertxt, CBDecisionCode)
		VALUES
		(@DefaultsID, @BranchID, @AccountType, @productoffertxt, @CBDecisionCode)
	END
ELSE	BEGIN
		UPDATE IMS.EF2_ApprovalMapping SET
			productoffertxt = @productoffertxt,
			CBDecisionCode = @CBDecisionCode
		WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_ApprovalMapping_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_ApprovalMapping_Select]
	@DefaultsID int,
	@BranchID int,
	@AccountType char(2)
AS

SELECT * FROM IMS.EF2_ApprovalMapping
WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_ApprovalMapping_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_ApprovalMapping_SelectAll]
	@DefaultsID int,
	@BranchID int,
	@AccountType char(2)
AS

SELECT * FROM IMS.EF2_ApprovalMapping
WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_ApprovalMapping_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_ApprovalMapping_Update]
	@productoffertxt varchar(32),
	@CBDecisionCode varchar(80),
	@DefaultsID int,
	@BranchID int,
	@AccountType char(2)
AS

IF @productoffertxt <> ''
	BEGIN
		DECLARE @productoffertxt_CASTED varchar(32)
		IF @productoffertxt = '^'
			BEGIN
				SET @productoffertxt_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @productoffertxt_CASTED = CAST(@productoffertxt AS varchar(32))
			END

		UPDATE IMS.EF2_ApprovalMapping
			SET productoffertxt = @productoffertxt_CASTED
		WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType
	END

IF @CBDecisionCode <> ''
	BEGIN
		DECLARE @CBDecisionCode_CASTED varchar(80)
		IF @CBDecisionCode = '^'
			BEGIN
				SET @CBDecisionCode_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @CBDecisionCode_CASTED = CAST(@CBDecisionCode AS varchar(80))
			END

		UPDATE IMS.EF2_ApprovalMapping
			SET CBDecisionCode = @CBDecisionCode_CASTED
		WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_BusinessQuery_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_BusinessQuery_Delete]
	@TrackingNum int
AS

DELETE FROM IMS.EF2_BusinessQuery
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_BusinessQuery_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_BusinessQuery_DeleteAll]
	@TrackingNum int
AS

DELETE FROM IMS.EF2_BusinessQuery
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_BusinessQuery_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_BusinessQuery_Insert]
	@businessfederalidentificationnbr char(9),
	@businessnm varchar(32),
	@citynm varchar(20),
	@compositephonenbr varchar(9),
	@countrynm varchar(50),
	@postalplusfourcd varchar(9),
	@statecd char(2),
	@streetaddresstxt varchar(25),
	@userdefinedrecordtxt varchar(256),
	@TrackingNum int
AS

INSERT INTO IMS.EF2_BusinessQuery
(TrackingNum, businessfederalidentificationnbr, businessnm, citynm, compositephonenbr, countrynm, postalplusfourcd, statecd, streetaddresstxt, userdefinedrecordtxt)
VALUES
(@TrackingNum, @businessfederalidentificationnbr, @businessnm, @citynm, @compositephonenbr, @countrynm, @postalplusfourcd, @statecd, @streetaddresstxt, @userdefinedrecordtxt)

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_BusinessQuery_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_BusinessQuery_InsertIfNew]
	@businessfederalidentificationnbr char(9),
	@businessnm varchar(32),
	@citynm varchar(20),
	@compositephonenbr varchar(9),
	@countrynm varchar(50),
	@postalplusfourcd varchar(9),
	@statecd char(2),
	@streetaddresstxt varchar(25),
	@userdefinedrecordtxt varchar(256),
	@TrackingNum int
AS

DECLARE @Count int
SELECT @Count = COUNT(businessfederalidentificationnbr) FROM IMS.EF2_BusinessQuery WHERE 1=1 AND TrackingNum = @TrackingNum

IF @Count = 0
	BEGIN
		INSERT INTO IMS.EF2_BusinessQuery
		(TrackingNum, businessfederalidentificationnbr, businessnm, citynm, compositephonenbr, countrynm, postalplusfourcd, statecd, streetaddresstxt, userdefinedrecordtxt)
		VALUES
		(@TrackingNum, @businessfederalidentificationnbr, @businessnm, @citynm, @compositephonenbr, @countrynm, @postalplusfourcd, @statecd, @streetaddresstxt, @userdefinedrecordtxt)
	END
ELSE	BEGIN
		UPDATE IMS.EF2_BusinessQuery SET
			businessfederalidentificationnbr = @businessfederalidentificationnbr,
			businessnm = @businessnm,
			citynm = @citynm,
			compositephonenbr = @compositephonenbr,
			countrynm = @countrynm,
			postalplusfourcd = @postalplusfourcd,
			statecd = @statecd,
			streetaddresstxt = @streetaddresstxt,
			userdefinedrecordtxt = @userdefinedrecordtxt
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_BusinessQuery_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_BusinessQuery_Select]
	@TrackingNum int
AS

SELECT * FROM IMS.EF2_BusinessQuery
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_BusinessQuery_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_BusinessQuery_SelectAll]
	@TrackingNum int
AS

SELECT * FROM IMS.EF2_BusinessQuery
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_BusinessQuery_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_BusinessQuery_Update]
	@businessfederalidentificationnbr varchar(9),
	@businessnm varchar(32),
	@citynm varchar(20),
	@compositephonenbr varchar(9),
	@countrynm varchar(50),
	@postalplusfourcd varchar(9),
	@statecd varchar(2),
	@streetaddresstxt varchar(25),
	@userdefinedrecordtxt varchar(256),
	@TrackingNum int
AS

IF @businessfederalidentificationnbr <> ''
	BEGIN
		DECLARE @businessfederalidentificationnbr_CASTED char(9)
		IF @businessfederalidentificationnbr = '^'
			BEGIN
				SET @businessfederalidentificationnbr_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @businessfederalidentificationnbr_CASTED = CAST(@businessfederalidentificationnbr AS char(9))
			END

		UPDATE IMS.EF2_BusinessQuery
			SET businessfederalidentificationnbr = @businessfederalidentificationnbr_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @businessnm <> ''
	BEGIN
		DECLARE @businessnm_CASTED varchar(32)
		IF @businessnm = '^'
			BEGIN
				SET @businessnm_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @businessnm_CASTED = CAST(@businessnm AS varchar(32))
			END

		UPDATE IMS.EF2_BusinessQuery
			SET businessnm = @businessnm_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @citynm <> ''
	BEGIN
		DECLARE @citynm_CASTED varchar(20)
		IF @citynm = '^'
			BEGIN
				SET @citynm_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @citynm_CASTED = CAST(@citynm AS varchar(20))
			END

		UPDATE IMS.EF2_BusinessQuery
			SET citynm = @citynm_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @compositephonenbr <> ''
	BEGIN
		DECLARE @compositephonenbr_CASTED varchar(9)
		IF @compositephonenbr = '^'
			BEGIN
				SET @compositephonenbr_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @compositephonenbr_CASTED = CAST(@compositephonenbr AS varchar(9))
			END

		UPDATE IMS.EF2_BusinessQuery
			SET compositephonenbr = @compositephonenbr_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @countrynm <> ''
	BEGIN
		DECLARE @countrynm_CASTED varchar(50)
		IF @countrynm = '^'
			BEGIN
				SET @countrynm_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @countrynm_CASTED = CAST(@countrynm AS varchar(50))
			END

		UPDATE IMS.EF2_BusinessQuery
			SET countrynm = @countrynm_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @postalplusfourcd <> ''
	BEGIN
		DECLARE @postalplusfourcd_CASTED varchar(9)
		IF @postalplusfourcd = '^'
			BEGIN
				SET @postalplusfourcd_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @postalplusfourcd_CASTED = CAST(@postalplusfourcd AS varchar(9))
			END

		UPDATE IMS.EF2_BusinessQuery
			SET postalplusfourcd = @postalplusfourcd_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @statecd <> ''
	BEGIN
		DECLARE @statecd_CASTED char(2)
		IF @statecd = '^'
			BEGIN
				SET @statecd_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @statecd_CASTED = CAST(@statecd AS char(2))
			END

		UPDATE IMS.EF2_BusinessQuery
			SET statecd = @statecd_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @streetaddresstxt <> ''
	BEGIN
		DECLARE @streetaddresstxt_CASTED varchar(25)
		IF @streetaddresstxt = '^'
			BEGIN
				SET @streetaddresstxt_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @streetaddresstxt_CASTED = CAST(@streetaddresstxt AS varchar(25))
			END

		UPDATE IMS.EF2_BusinessQuery
			SET streetaddresstxt = @streetaddresstxt_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @userdefinedrecordtxt <> ''
	BEGIN
		DECLARE @userdefinedrecordtxt_CASTED varchar(256)
		IF @userdefinedrecordtxt = '^'
			BEGIN
				SET @userdefinedrecordtxt_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @userdefinedrecordtxt_CASTED = CAST(@userdefinedrecordtxt AS varchar(256))
			END

		UPDATE IMS.EF2_BusinessQuery
			SET userdefinedrecordtxt = @userdefinedrecordtxt_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_BusinessReportReply_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_BusinessReportReply_Delete]
	@TrackingNum int
AS

DELETE FROM IMS.EF2_BusinessReportReply
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_BusinessReportReply_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_BusinessReportReply_DeleteAll]
	@TrackingNum int
AS

DELETE FROM IMS.EF2_BusinessReportReply
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_BusinessReportReply_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_BusinessReportReply_Insert]
	@chexid varchar(256),
	@errortxt varchar(512),
	@idvoid int,
	@idvpassed char(1),
	@ofacfailed char(1),
	@ofacoid int,
	@txtreport text,
	@userdefinedtransactiontxt text,
	@TrackingNum int
AS

INSERT INTO IMS.EF2_BusinessReportReply
(TrackingNum, chexid, errortxt, idvoid, idvpassed, ofacfailed, ofacoid, txtreport, userdefinedtransactiontxt)
VALUES
(@TrackingNum, @chexid, @errortxt, @idvoid, @idvpassed, @ofacfailed, @ofacoid, @txtreport, @userdefinedtransactiontxt)
GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_BusinessReportReply_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_BusinessReportReply_InsertIfNew]
	@chexid varchar(256),
	@errortxt varchar(512),
	@idvoid int,
	@idvpassed char(1),
	@ofacfailed char(1),
	@ofacoid int,
	@txtreport text,
	@userdefinedtransactiontxt text,
	@TrackingNum int
AS

DECLARE @Count int
SELECT @Count = COUNT(chexid) FROM IMS.EF2_BusinessReportReply WHERE 1=1 AND TrackingNum = @TrackingNum

IF @Count = 0
	BEGIN
		INSERT INTO IMS.EF2_BusinessReportReply
		(TrackingNum, chexid, errortxt, idvoid, idvpassed, ofacfailed, ofacoid, txtreport, userdefinedtransactiontxt)
		VALUES
		(@TrackingNum, @chexid, @errortxt, @idvoid, @idvpassed, @ofacfailed, @ofacoid, @txtreport, @userdefinedtransactiontxt)
	END
ELSE	BEGIN
		UPDATE IMS.EF2_BusinessReportReply SET
			chexid = @chexid,
			errortxt = @errortxt,
			idvoid = @idvoid,
			idvpassed = @idvpassed,
			ofacfailed = @ofacfailed,
			ofacoid = @ofacoid,
			txtreport = @txtreport,
			userdefinedtransactiontxt = @userdefinedtransactiontxt
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_BusinessReportReply_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_BusinessReportReply_Select]
	@TrackingNum int
AS

SELECT * FROM IMS.EF2_BusinessReportReply
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_BusinessReportReply_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_BusinessReportReply_SelectAll]
	@TrackingNum int
AS

SELECT * FROM IMS.EF2_BusinessReportReply
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_BusinessReportReply_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_BusinessReportReply_Update]
	@chexid varchar(256),
	@errortxt varchar(512),
	@idvoid varchar(100),
	@idvpassed varchar(1),
	@ofacfailed varchar(1),
	@ofacoid varchar(100),
	@txtreport text,
	@userdefinedtransactiontxt text,
	@TrackingNum int
AS

IF @chexid <> ''
	BEGIN
		DECLARE @chexid_CASTED varchar(256)
		IF @chexid = '^'
			BEGIN
				SET @chexid_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @chexid_CASTED = CAST(@chexid AS varchar(256))
			END

		UPDATE IMS.EF2_BusinessReportReply
			SET chexid = @chexid_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @errortxt <> ''
	BEGIN
		DECLARE @errortxt_CASTED varchar(512)
		IF @errortxt = '^'
			BEGIN
				SET @errortxt_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @errortxt_CASTED = CAST(@errortxt AS varchar(512))
			END

		UPDATE IMS.EF2_BusinessReportReply
			SET errortxt = @errortxt_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @idvoid <> ''
	BEGIN
		DECLARE @idvoid_CASTED int
		IF @idvoid = '^'
			BEGIN
				SET @idvoid_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @idvoid_CASTED = CAST(@idvoid AS int)
			END

		UPDATE IMS.EF2_BusinessReportReply
			SET idvoid = @idvoid_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @idvpassed <> ''
	BEGIN
		DECLARE @idvpassed_CASTED char(1)
		IF @idvpassed = '^'
			BEGIN
				SET @idvpassed_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @idvpassed_CASTED = CAST(@idvpassed AS char(1))
			END

		UPDATE IMS.EF2_BusinessReportReply
			SET idvpassed = @idvpassed_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @ofacfailed <> ''
	BEGIN
		DECLARE @ofacfailed_CASTED char(1)
		IF @ofacfailed = '^'
			BEGIN
				SET @ofacfailed_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ofacfailed_CASTED = CAST(@ofacfailed AS char(1))
			END

		UPDATE IMS.EF2_BusinessReportReply
			SET ofacfailed = @ofacfailed_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @ofacoid <> ''
	BEGIN
		DECLARE @ofacoid_CASTED int
		IF @ofacoid = '^'
			BEGIN
				SET @ofacoid_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ofacoid_CASTED = CAST(@ofacoid AS int)
			END

		UPDATE IMS.EF2_BusinessReportReply
			SET ofacoid = @ofacoid_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF CAST(@txtreport AS varchar(100)) <> ''
	BEGIN
		IF CAST(@txtreport AS varchar(100)) = '^'
			BEGIN
				UPDATE IMS.EF2_BusinessReportReply
					SET txtreport = NULL
				WHERE 1=1 AND TrackingNum = @TrackingNum
			END
		ELSE
			BEGIN
				UPDATE IMS.EF2_BusinessReportReply
					SET txtreport = @txtreport
				WHERE 1=1 AND TrackingNum = @TrackingNum
			END

	END

IF CAST(@userdefinedtransactiontxt AS varchar(100)) <> ''
	BEGIN
		IF CAST(@userdefinedtransactiontxt AS varchar(100)) = '^'
			BEGIN
				UPDATE IMS.EF2_BusinessReportReply
					SET userdefinedtransactiontxt = NULL
				WHERE 1=1 AND TrackingNum = @TrackingNum
			END
		ELSE
			BEGIN
				UPDATE IMS.EF2_BusinessReportReply
					SET userdefinedtransactiontxt = @userdefinedtransactiontxt
				WHERE 1=1 AND TrackingNum = @TrackingNum
			END

	END

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_CreditBureauInfo_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_CreditBureauInfo_Delete]
	@TrackingNum int
AS

DELETE FROM IMS.EF2_CreditBureauInfo
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_CreditBureauInfo_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_CreditBureauInfo_DeleteAll]
	@TrackingNum int
AS

DELETE FROM IMS.EF2_CreditBureauInfo
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_CreditBureauInfo_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_CreditBureauInfo_Insert]
	@creditbureaureasoncd1 varchar(2),
	@creditbureaureasoncd2 varchar(2),
	@creditbureaureasoncd3 varchar(2),
	@creditbureaureasoncd4 varchar(2),
	@creditbureaureasoncd5 varchar(2),
	@creditbureauscorenbr varchar(4),
	@TrackingNum int
AS

INSERT INTO IMS.EF2_CreditBureauInfo
(TrackingNum, creditbureaureasoncd1, creditbureaureasoncd2, creditbureaureasoncd3, creditbureaureasoncd4, creditbureaureasoncd5, creditbureauscorenbr)
VALUES
(@TrackingNum, @creditbureaureasoncd1, @creditbureaureasoncd2, @creditbureaureasoncd3, @creditbureaureasoncd4, @creditbureaureasoncd5, @creditbureauscorenbr)

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_CreditBureauInfo_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_CreditBureauInfo_InsertIfNew]
	@creditbureaureasoncd1 varchar(2),
	@creditbureaureasoncd2 varchar(2),
	@creditbureaureasoncd3 varchar(2),
	@creditbureaureasoncd4 varchar(2),
	@creditbureaureasoncd5 varchar(2),
	@creditbureauscorenbr varchar(4),
	@TrackingNum int
AS

DECLARE @Count int
SELECT @Count = COUNT(creditbureaureasoncd1) FROM IMS.EF2_CreditBureauInfo WHERE 1=1 AND TrackingNum = @TrackingNum

IF @Count = 0
	BEGIN
		INSERT INTO IMS.EF2_CreditBureauInfo
		(TrackingNum, creditbureaureasoncd1, creditbureaureasoncd2, creditbureaureasoncd3, creditbureaureasoncd4, creditbureaureasoncd5, creditbureauscorenbr)
		VALUES
		(@TrackingNum, @creditbureaureasoncd1, @creditbureaureasoncd2, @creditbureaureasoncd3, @creditbureaureasoncd4, @creditbureaureasoncd5, @creditbureauscorenbr)
	END
ELSE	BEGIN
		UPDATE IMS.EF2_CreditBureauInfo SET
			creditbureaureasoncd1 = @creditbureaureasoncd1,
			creditbureaureasoncd2 = @creditbureaureasoncd2,
			creditbureaureasoncd3 = @creditbureaureasoncd3,
			creditbureaureasoncd4 = @creditbureaureasoncd4,
			creditbureaureasoncd5 = @creditbureaureasoncd5,
			creditbureauscorenbr = @creditbureauscorenbr
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_CreditBureauInfo_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_CreditBureauInfo_Select]
	@TrackingNum int
AS

SELECT * FROM IMS.EF2_CreditBureauInfo
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_CreditBureauInfo_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_CreditBureauInfo_SelectAll]
	@TrackingNum int
AS

SELECT * FROM IMS.EF2_CreditBureauInfo
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_CreditBureauInfo_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_CreditBureauInfo_Update]
	@creditbureaureasoncd1 varchar(2),
	@creditbureaureasoncd2 varchar(2),
	@creditbureaureasoncd3 varchar(2),
	@creditbureaureasoncd4 varchar(2),
	@creditbureaureasoncd5 varchar(2),
	@creditbureauscorenbr varchar(4),
	@TrackingNum int
AS

IF @creditbureaureasoncd1 <> ''
	BEGIN
		DECLARE @creditbureaureasoncd1_CASTED varchar(2)
		IF @creditbureaureasoncd1 = '^'
			BEGIN
				SET @creditbureaureasoncd1_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @creditbureaureasoncd1_CASTED = CAST(@creditbureaureasoncd1 AS varchar(2))
			END

		UPDATE IMS.EF2_CreditBureauInfo
			SET creditbureaureasoncd1 = @creditbureaureasoncd1_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @creditbureaureasoncd2 <> ''
	BEGIN
		DECLARE @creditbureaureasoncd2_CASTED varchar(2)
		IF @creditbureaureasoncd2 = '^'
			BEGIN
				SET @creditbureaureasoncd2_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @creditbureaureasoncd2_CASTED = CAST(@creditbureaureasoncd2 AS varchar(2))
			END

		UPDATE IMS.EF2_CreditBureauInfo
			SET creditbureaureasoncd2 = @creditbureaureasoncd2_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @creditbureaureasoncd3 <> ''
	BEGIN
		DECLARE @creditbureaureasoncd3_CASTED varchar(2)
		IF @creditbureaureasoncd3 = '^'
			BEGIN
				SET @creditbureaureasoncd3_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @creditbureaureasoncd3_CASTED = CAST(@creditbureaureasoncd3 AS varchar(2))
			END

		UPDATE IMS.EF2_CreditBureauInfo
			SET creditbureaureasoncd3 = @creditbureaureasoncd3_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @creditbureaureasoncd4 <> ''
	BEGIN
		DECLARE @creditbureaureasoncd4_CASTED varchar(2)
		IF @creditbureaureasoncd4 = '^'
			BEGIN
				SET @creditbureaureasoncd4_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @creditbureaureasoncd4_CASTED = CAST(@creditbureaureasoncd4 AS varchar(2))
			END

		UPDATE IMS.EF2_CreditBureauInfo
			SET creditbureaureasoncd4 = @creditbureaureasoncd4_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @creditbureaureasoncd5 <> ''
	BEGIN
		DECLARE @creditbureaureasoncd5_CASTED varchar(2)
		IF @creditbureaureasoncd5 = '^'
			BEGIN
				SET @creditbureaureasoncd5_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @creditbureaureasoncd5_CASTED = CAST(@creditbureaureasoncd5 AS varchar(2))
			END

		UPDATE IMS.EF2_CreditBureauInfo
			SET creditbureaureasoncd5 = @creditbureaureasoncd5_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @creditbureauscorenbr <> ''
	BEGIN
		DECLARE @creditbureauscorenbr_CASTED varchar(4)
		IF @creditbureauscorenbr = '^'
			BEGIN
				SET @creditbureauscorenbr_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @creditbureauscorenbr_CASTED = CAST(@creditbureauscorenbr AS varchar(4))
			END

		UPDATE IMS.EF2_CreditBureauInfo
			SET creditbureauscorenbr = @creditbureauscorenbr_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_CustIdentification_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_CustIdentification_Delete]
	@DefaultsID int,
	@BranchID int,
	@AccountType char(2)
AS

DELETE FROM IMS.EF2_CustIdentification
WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_CustIdentification_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_CustIdentification_DeleteAll]
	@DefaultsID int,
	@BranchID int,
	@AccountType char(2)
AS

DELETE FROM IMS.EF2_CustIdentification
WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_CustIdentification_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_CustIdentification_Insert]
	@ChexWebServiceURL varchar(256),
	@BusinessWebServiceURL varchar(256),
	@acquirerid int,
	@chexsystemsversionnbr char(4),
	@customerid char(8),
	@includechexsystems char(1),
	@includeidentitymanager char(1),
	@includeofac char(1),
	@includequalifile char(1),
	@inquiryid varchar(15),
	@qualifileversionnbr char(4),
	@staging char(1),
	@strategytypeid varchar(5),
	@username varchar(40),
	@password varchar(40),
	@DefaultsID int,
	@BranchID int,
	@AccountType char(2)
AS

INSERT INTO IMS.EF2_CustIdentification
(DefaultsID, BranchID, AccountType, ChexWebServiceURL, BusinessWebServiceURL, acquirerid, chexsystemsversionnbr, customerid, includechexsystems, includeidentitymanager, includeofac, includequalifile, inquiryid, qualifileversionnbr, staging, strategytypeid, username, password)
VALUES
(@DefaultsID, @BranchID, @AccountType, @ChexWebServiceURL, @BusinessWebServiceURL, @acquirerid, @chexsystemsversionnbr, @customerid, @includechexsystems, @includeidentitymanager, @includeofac, @includequalifile, @inquiryid, @qualifileversionnbr, @staging, @strategytypeid, @username, @password)

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_CustIdentification_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_CustIdentification_InsertIfNew]
	@ChexWebServiceURL varchar(256),
	@BusinessWebServiceURL varchar(256),
	@acquirerid int,
	@chexsystemsversionnbr char(4),
	@customerid char(8),
	@includechexsystems char(1),
	@includeidentitymanager char(1),
	@includeofac char(1),
	@includequalifile char(1),
	@inquiryid varchar(15),
	@qualifileversionnbr char(4),
	@staging char(1),
	@strategytypeid varchar(5),
	@username varchar(40),
	@password varchar(40),
	@DefaultsID int,
	@BranchID int,
	@AccountType char(2)
AS

DECLARE @Count int
SELECT @Count = COUNT(ChexWebServiceURL) FROM IMS.EF2_CustIdentification WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType

IF @Count = 0
	BEGIN
		INSERT INTO IMS.EF2_CustIdentification
		(DefaultsID, BranchID, AccountType, ChexWebServiceURL, BusinessWebServiceURL, acquirerid, chexsystemsversionnbr, customerid, includechexsystems, includeidentitymanager, includeofac, includequalifile, inquiryid, qualifileversionnbr, staging, strategytypeid, username, password)
		VALUES
		(@DefaultsID, @BranchID, @AccountType, @ChexWebServiceURL, @BusinessWebServiceURL, @acquirerid, @chexsystemsversionnbr, @customerid, @includechexsystems, @includeidentitymanager, @includeofac, @includequalifile, @inquiryid, @qualifileversionnbr, @staging, @strategytypeid, @username, @password)
	END
ELSE	BEGIN
		UPDATE IMS.EF2_CustIdentification SET
			ChexWebServiceURL = @ChexWebServiceURL,
			BusinessWebServiceURL = @BusinessWebServiceURL,
			acquirerid = @acquirerid,
			chexsystemsversionnbr = @chexsystemsversionnbr,
			customerid = @customerid,
			includechexsystems = @includechexsystems,
			includeidentitymanager = @includeidentitymanager,
			includeofac = @includeofac,
			includequalifile = @includequalifile,
			inquiryid = @inquiryid,
			qualifileversionnbr = @qualifileversionnbr,
			staging = @staging,
			strategytypeid = @strategytypeid,
			username = @username,
			password = @password
		WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_CustIdentification_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_CustIdentification_Select]
	@DefaultsID int,
	@BranchID int,
	@AccountType char(2)
AS

SELECT * FROM IMS.EF2_CustIdentification
WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_CustIdentification_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_CustIdentification_SelectAll]
	@DefaultsID int,
	@BranchID int,
	@AccountType char(2)
AS

SELECT * FROM IMS.EF2_CustIdentification
WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_CustIdentification_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_CustIdentification_Update]
	@ChexWebServiceURL varchar(256),
	@BusinessWebServiceURL varchar(256),
	@acquirerid varchar(100),
	@chexsystemsversionnbr varchar(4),
	@customerid varchar(8),
	@includechexsystems varchar(1),
	@includeidentitymanager varchar(1),
	@includeofac varchar(1),
	@includequalifile varchar(1),
	@inquiryid varchar(15),
	@qualifileversionnbr varchar(4),
	@staging varchar(1),
	@strategytypeid varchar(5),
	@username varchar(40),
	@password varchar(40),
	@DefaultsID int,
	@BranchID int,
	@AccountType char(2)
AS

IF @ChexWebServiceURL <> ''
	BEGIN
		DECLARE @ChexWebServiceURL_CASTED varchar(256)
		IF @ChexWebServiceURL = '^'
			BEGIN
				SET @ChexWebServiceURL_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ChexWebServiceURL_CASTED = CAST(@ChexWebServiceURL AS varchar(256))
			END

		UPDATE IMS.EF2_CustIdentification
			SET ChexWebServiceURL = @ChexWebServiceURL_CASTED
		WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType
	END

IF @BusinessWebServiceURL <> ''
	BEGIN
		DECLARE @BusinessWebServiceURL_CASTED varchar(256)
		IF @BusinessWebServiceURL = '^'
			BEGIN
				SET @BusinessWebServiceURL_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @BusinessWebServiceURL_CASTED = CAST(@BusinessWebServiceURL AS varchar(256))
			END

		UPDATE IMS.EF2_CustIdentification
			SET BusinessWebServiceURL = @BusinessWebServiceURL_CASTED
		WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType
	END

IF @acquirerid <> ''
	BEGIN
		DECLARE @acquirerid_CASTED int
		IF @acquirerid = '^'
			BEGIN
				SET @acquirerid_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @acquirerid_CASTED = CAST(@acquirerid AS int)
			END

		UPDATE IMS.EF2_CustIdentification
			SET acquirerid = @acquirerid_CASTED
		WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType
	END

IF @chexsystemsversionnbr <> ''
	BEGIN
		DECLARE @chexsystemsversionnbr_CASTED char(4)
		IF @chexsystemsversionnbr = '^'
			BEGIN
				SET @chexsystemsversionnbr_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @chexsystemsversionnbr_CASTED = CAST(@chexsystemsversionnbr AS char(4))
			END

		UPDATE IMS.EF2_CustIdentification
			SET chexsystemsversionnbr = @chexsystemsversionnbr_CASTED
		WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType
	END

IF @customerid <> ''
	BEGIN
		DECLARE @customerid_CASTED char(8)
		IF @customerid = '^'
			BEGIN
				SET @customerid_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @customerid_CASTED = CAST(@customerid AS char(8))
			END

		UPDATE IMS.EF2_CustIdentification
			SET customerid = @customerid_CASTED
		WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType
	END

IF @includechexsystems <> ''
	BEGIN
		DECLARE @includechexsystems_CASTED char(1)
		IF @includechexsystems = '^'
			BEGIN
				SET @includechexsystems_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @includechexsystems_CASTED = CAST(@includechexsystems AS char(1))
			END

		UPDATE IMS.EF2_CustIdentification
			SET includechexsystems = @includechexsystems_CASTED
		WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType
	END

IF @includeidentitymanager <> ''
	BEGIN
		DECLARE @includeidentitymanager_CASTED char(1)
		IF @includeidentitymanager = '^'
			BEGIN
				SET @includeidentitymanager_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @includeidentitymanager_CASTED = CAST(@includeidentitymanager AS char(1))
			END

		UPDATE IMS.EF2_CustIdentification
			SET includeidentitymanager = @includeidentitymanager_CASTED
		WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType
	END

IF @includeofac <> ''
	BEGIN
		DECLARE @includeofac_CASTED char(1)
		IF @includeofac = '^'
			BEGIN
				SET @includeofac_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @includeofac_CASTED = CAST(@includeofac AS char(1))
			END

		UPDATE IMS.EF2_CustIdentification
			SET includeofac = @includeofac_CASTED
		WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType
	END

IF @includequalifile <> ''
	BEGIN
		DECLARE @includequalifile_CASTED char(1)
		IF @includequalifile = '^'
			BEGIN
				SET @includequalifile_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @includequalifile_CASTED = CAST(@includequalifile AS char(1))
			END

		UPDATE IMS.EF2_CustIdentification
			SET includequalifile = @includequalifile_CASTED
		WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType
	END

IF @inquiryid <> ''
	BEGIN
		DECLARE @inquiryid_CASTED varchar(15)
		IF @inquiryid = '^'
			BEGIN
				SET @inquiryid_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @inquiryid_CASTED = CAST(@inquiryid AS varchar(15))
			END

		UPDATE IMS.EF2_CustIdentification
			SET inquiryid = @inquiryid_CASTED
		WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType
	END

IF @qualifileversionnbr <> ''
	BEGIN
		DECLARE @qualifileversionnbr_CASTED char(4)
		IF @qualifileversionnbr = '^'
			BEGIN
				SET @qualifileversionnbr_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @qualifileversionnbr_CASTED = CAST(@qualifileversionnbr AS char(4))
			END

		UPDATE IMS.EF2_CustIdentification
			SET qualifileversionnbr = @qualifileversionnbr_CASTED
		WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType
	END

IF @staging <> ''
	BEGIN
		DECLARE @staging_CASTED char(1)
		IF @staging = '^'
			BEGIN
				SET @staging_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @staging_CASTED = CAST(@staging AS char(1))
			END

		UPDATE IMS.EF2_CustIdentification
			SET staging = @staging_CASTED
		WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType
	END

IF @strategytypeid <> ''
	BEGIN
		DECLARE @strategytypeid_CASTED varchar(5)
		IF @strategytypeid = '^'
			BEGIN
				SET @strategytypeid_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @strategytypeid_CASTED = CAST(@strategytypeid AS varchar(5))
			END

		UPDATE IMS.EF2_CustIdentification
			SET strategytypeid = @strategytypeid_CASTED
		WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType
	END

IF @username <> ''
	BEGIN
		DECLARE @username_CASTED varchar(40)
		IF @username = '^'
			BEGIN
				SET @username_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @username_CASTED = CAST(@username AS varchar(40))
			END

		UPDATE IMS.EF2_CustIdentification
			SET username = @username_CASTED
		WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType
	END

IF @password <> ''
	BEGIN
		DECLARE @password_CASTED varchar(40)
		IF @password = '^'
			BEGIN
				SET @password_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @password_CASTED = CAST(@password AS varchar(40))
			END

		UPDATE IMS.EF2_CustIdentification
			SET password = @password_CASTED
		WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_CustIdLog_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_CustIdLog_Delete]
	@TrackingNum int
AS

DELETE FROM IMS.EF2_CustIdLog
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_CustIdLog_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_CustIdLog_DeleteAll]
	@TrackingNum int
AS

DELETE FROM IMS.EF2_CustIdLog
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_CustIdLog_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_CustIdLog_Insert]
	@TrackingNum int,
	@HostError int,
	@HostErrorString varchar(256),
	@IMSError int,
	@IMSErrorString varchar(256),
	@locationid varchar(30),
	@userdefinedtransactiontxt varchar(256),
	@CBDecision varchar(256)
AS

INSERT INTO IMS.EF2_CustIdLog
(TrackingNum, HostError, HostErrorString, IMSError, IMSErrorString, locationid, userdefinedtransactiontxt, CBDecision)
VALUES
(@TrackingNum, @HostError, @HostErrorString, @IMSError, @IMSErrorString, @locationid, @userdefinedtransactiontxt, @CBDecision)

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_CustIdLog_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_CustIdLog_InsertIfNew]
	@TrackingNum int,
	@HostError int,
	@HostErrorString varchar(256),
	@IMSError int,
	@IMSErrorString varchar(256),
	@locationid varchar(30),
	@userdefinedtransactiontxt varchar(256),
	@CBDecision varchar(256)
AS

DECLARE @Count int
SELECT @Count = COUNT(HostError) FROM IMS.EF2_CustIdLog WHERE 1=1 AND TrackingNum = @TrackingNum

IF @Count = 0
	BEGIN
		INSERT INTO IMS.EF2_CustIdLog
		(TrackingNum, HostError, HostErrorString, IMSError, IMSErrorString, locationid, userdefinedtransactiontxt, CBDecision)
		VALUES
		(@TrackingNum, @HostError, @HostErrorString, @IMSError, @IMSErrorString, @locationid, @userdefinedtransactiontxt, @CBDecision)
	END
ELSE	BEGIN
		UPDATE IMS.EF2_CustIdLog SET
			HostError = @HostError,
			HostErrorString = @HostErrorString,
			IMSError = @IMSError,
			IMSErrorString = @IMSErrorString,
			locationid = @locationid,
			userdefinedtransactiontxt = @userdefinedtransactiontxt,
			CBDecision = @CBDecision
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_CustIdLog_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_CustIdLog_Select]
	@TrackingNum int
AS

SELECT * FROM IMS.EF2_CustIdLog
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_CustIdLog_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_CustIdLog_SelectAll]
	@TrackingNum int
AS

SELECT * FROM IMS.EF2_CustIdLog
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_CustIdLog_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_CustIdLog_Update]
	@TrackingNum int,
	@HostError varchar(100),
	@HostErrorString varchar(256),
	@IMSError varchar(100),
	@IMSErrorString varchar(256),
	@locationid varchar(30),
	@userdefinedtransactiontxt varchar(256),
	@CBDecision varchar(256)
AS

IF @HostError <> ''
	BEGIN
		DECLARE @HostError_CASTED int
		IF @HostError = '^'
			BEGIN
				SET @HostError_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @HostError_CASTED = CAST(@HostError AS int)
			END

		UPDATE IMS.EF2_CustIdLog
			SET HostError = @HostError_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @HostErrorString <> ''
	BEGIN
		DECLARE @HostErrorString_CASTED varchar(256)
		IF @HostErrorString = '^'
			BEGIN
				SET @HostErrorString_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @HostErrorString_CASTED = CAST(@HostErrorString AS varchar(256))
			END

		UPDATE IMS.EF2_CustIdLog
			SET HostErrorString = @HostErrorString_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @IMSError <> ''
	BEGIN
		DECLARE @IMSError_CASTED int
		IF @IMSError = '^'
			BEGIN
				SET @IMSError_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @IMSError_CASTED = CAST(@IMSError AS int)
			END

		UPDATE IMS.EF2_CustIdLog
			SET IMSError = @IMSError_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @IMSErrorString <> ''
	BEGIN
		DECLARE @IMSErrorString_CASTED varchar(256)
		IF @IMSErrorString = '^'
			BEGIN
				SET @IMSErrorString_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @IMSErrorString_CASTED = CAST(@IMSErrorString AS varchar(256))
			END

		UPDATE IMS.EF2_CustIdLog
			SET IMSErrorString = @IMSErrorString_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @locationid <> ''
	BEGIN
		DECLARE @locationid_CASTED varchar(30)
		IF @locationid = '^'
			BEGIN
				SET @locationid_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @locationid_CASTED = CAST(@locationid AS varchar(30))
			END

		UPDATE IMS.EF2_CustIdLog
			SET locationid = @locationid_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @userdefinedtransactiontxt <> ''
	BEGIN
		DECLARE @userdefinedtransactiontxt_CASTED varchar(256)
		IF @userdefinedtransactiontxt = '^'
			BEGIN
				SET @userdefinedtransactiontxt_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @userdefinedtransactiontxt_CASTED = CAST(@userdefinedtransactiontxt AS varchar(256))
			END

		UPDATE IMS.EF2_CustIdLog
			SET userdefinedtransactiontxt = @userdefinedtransactiontxt_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @CBDecision <> ''
	BEGIN
		DECLARE @CBDecision_CASTED varchar(256)
		IF @CBDecision = '^'
			BEGIN
				SET @CBDecision_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @CBDecision_CASTED = CAST(@CBDecision AS varchar(256))
			END

		UPDATE IMS.EF2_CustIdLog
			SET CBDecision = @CBDecision_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_Dictionary_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_Dictionary_Delete]
AS

DELETE FROM EF2_Dictionary
WHERE 1=1

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_Dictionary_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_Dictionary_DeleteAll]
AS

DELETE FROM EF2_Dictionary
WHERE 1=1

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_Dictionary_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_Dictionary_Insert]
	@Category varchar(40),
	@ErrorText varchar(512),
	@MAReasonCode varchar(32),
	@MADescription varchar(256),
	@ErrorFlag varchar(1)
AS

INSERT INTO EF2_Dictionary
(Category, ErrorText, MAReasonCode, MADescription, ErrorFlag)
VALUES
(@Category, @ErrorText, @MAReasonCode, @MADescription, @ErrorFlag)

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_Dictionary_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_Dictionary_InsertIfNew]
	@Category varchar(40),
	@ErrorText varchar(512),
	@MAReasonCode varchar(32),
	@MADescription varchar(256),
	@ErrorFlag varchar(1)
AS

DECLARE @Count int
SELECT @Count = COUNT(Category) FROM EF2_Dictionary WHERE 1=1

IF @Count = 0
	BEGIN
		INSERT INTO EF2_Dictionary
		(Category, ErrorText, MAReasonCode, MADescription, ErrorFlag)
		VALUES
		(@Category, @ErrorText, @MAReasonCode, @MADescription, @ErrorFlag)
	END
ELSE	BEGIN
		UPDATE EF2_Dictionary SET
			Category = @Category,
			ErrorText = @ErrorText,
			MAReasonCode = @MAReasonCode,
			MADescription = @MADescription,
			ErrorFlag = @ErrorFlag
		WHERE 1=1
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_Dictionary_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_Dictionary_Select]
AS

SELECT * FROM EF2_Dictionary
WHERE 1=1

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_Dictionary_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_Dictionary_SelectAll]
AS

SELECT * FROM EF2_Dictionary
WHERE 1=1

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_Dictionary_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_Dictionary_Update]
	@Category varchar(40),
	@ErrorText varchar(512),
	@MAReasonCode varchar(32),
	@MADescription varchar(256),
	@ErrorFlag varchar(1)
AS

IF @Category <> ''
	BEGIN
		DECLARE @Category_CASTED varchar(40)
		IF @Category = '^'
			BEGIN
				SET @Category_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Category_CASTED = CAST(@Category AS varchar(40))
			END

		UPDATE EF2_Dictionary
			SET Category = @Category_CASTED
		WHERE 1=1
	END

IF @ErrorText <> ''
	BEGIN
		DECLARE @ErrorText_CASTED varchar(512)
		IF @ErrorText = '^'
			BEGIN
				SET @ErrorText_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ErrorText_CASTED = CAST(@ErrorText AS varchar(512))
			END

		UPDATE EF2_Dictionary
			SET ErrorText = @ErrorText_CASTED
		WHERE 1=1
	END

IF @MAReasonCode <> ''
	BEGIN
		DECLARE @MAReasonCode_CASTED varchar(32)
		IF @MAReasonCode = '^'
			BEGIN
				SET @MAReasonCode_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @MAReasonCode_CASTED = CAST(@MAReasonCode AS varchar(32))
			END

		UPDATE EF2_Dictionary
			SET MAReasonCode = @MAReasonCode_CASTED
		WHERE 1=1
	END

IF @MADescription <> ''
	BEGIN
		DECLARE @MADescription_CASTED varchar(256)
		IF @MADescription = '^'
			BEGIN
				SET @MADescription_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @MADescription_CASTED = CAST(@MADescription AS varchar(256))
			END

		UPDATE EF2_Dictionary
			SET MADescription = @MADescription_CASTED
		WHERE 1=1
	END

IF @ErrorFlag <> ''
	BEGIN
		DECLARE @ErrorFlag_CASTED varchar(1)
		IF @ErrorFlag = '^'
			BEGIN
				SET @ErrorFlag_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ErrorFlag_CASTED = CAST(@ErrorFlag AS varchar(1))
			END

		UPDATE EF2_Dictionary
			SET ErrorFlag = @ErrorFlag_CASTED
		WHERE 1=1
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_KBADecision_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_KBADecision_Delete]
	@TrackingNum int
AS

DELETE FROM EF2_KBADecision
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_KBADecision_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_KBADecision_DeleteAll]
	@TrackingNum int
AS

DELETE FROM EF2_KBADecision
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_KBADecision_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_eFunds2xlate_KBADecision_Insert]
	@base int,
	@decision varchar(255),
	@score int,
	@kbaoid int,
	@TrackingNum int,
	@JointOwnerSequence smallint
AS

INSERT INTO EF2_KBADecision
(TrackingNum, base, decision, score, kbaoid, JointOwnerSequence)
VALUES
(@TrackingNum, @base, @decision, @score, @kbaoid, @JointOwnerSequence)

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_KBADecision_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_eFunds2xlate_KBADecision_InsertIfNew]
	@base int,
	@decision varchar(255),
	@score int,
	@kbaoid int,
	@TrackingNum int,
	@JointOwnerSequence smallint
AS

IF NOT EXISTS (SELECT * FROM EF2_KBADecision WHERE 1=1 AND TrackingNum = @TrackingNum)
	BEGIN
		INSERT INTO EF2_KBADecision
		(TrackingNum, base, decision, score, kbaoid, JointOwnerSequence)
		VALUES
		(@TrackingNum, @base, @decision, @score, @kbaoid, @JointOwnerSequence)
	END
ELSE	BEGIN
		UPDATE EF2_KBADecision SET
			base = @base,
			decision = @decision,
			score = @score,
			kbaoid = @kbaoid,
			JointOwnerSequence = @JointOwnerSequence
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_KBADecision_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_KBADecision_Select]
	@TrackingNum int,
	@JointOwnerSequence smallint
AS

SELECT * FROM EF2_KBADecision
WHERE 1=1 AND TrackingNum = @TrackingNum AND JointOwnerSequence = @JointOwnerSequence

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_KBADecision_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_KBADecision_SelectAll]
	@TrackingNum int,
	@JointOwnerSequence smallint
AS

SELECT * FROM EF2_KBADecision
WHERE 1=1 AND TrackingNum = @TrackingNum AND JointOwnerSequence = @JointOwnerSequence
GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_KBADecision_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_eFunds2xlate_KBADecision_Update]
	@base varchar(100),
	@decision varchar(255),
	@score varchar(100),
	@kbaoid varchar(100),
	@TrackingNum int,
	@JointOwnerSequence varchar(100)
AS

IF @base <> ''
	BEGIN
		DECLARE @base_CASTED int
		IF @base = '^'
			BEGIN
				SET @base_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @base_CASTED = CAST(@base AS int)
			END

		UPDATE EF2_KBADecision
			SET base = @base_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @decision <> ''
	BEGIN
		DECLARE @decision_CASTED varchar(255)
		IF @decision = '^'
			BEGIN
				SET @decision_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @decision_CASTED = CAST(@decision AS varchar(255))
			END

		UPDATE EF2_KBADecision
			SET decision = @decision_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @score <> ''
	BEGIN
		DECLARE @score_CASTED int
		IF @score = '^'
			BEGIN
				SET @score_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @score_CASTED = CAST(@score AS int)
			END

		UPDATE EF2_KBADecision
			SET score = @score_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @kbaoid <> ''
	BEGIN
		DECLARE @kbaoid_CASTED int
		IF @kbaoid = '^'
			BEGIN
				SET @kbaoid_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @kbaoid_CASTED = CAST(@kbaoid AS int)
			END

		UPDATE EF2_KBADecision
			SET kbaoid = @kbaoid_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @JointOwnerSequence <> ''
	BEGIN
		DECLARE @JointOwnerSequence_CASTED smallint
		IF @JointOwnerSequence = '^'
			BEGIN
				SET @JointOwnerSequence_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @JointOwnerSequence_CASTED = CAST(@JointOwnerSequence AS smallint)
			END

		UPDATE EF2_KBADecision
			SET JointOwnerSequence = @JointOwnerSequence_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_KBAIdentification_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_KBAIdentification_Delete]
	@DefaultsID int,
	@BranchID int,
	@AccountType char(2)
AS

DELETE FROM EF2_KBAIdentification
WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_KBAIdentification_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_KBAIdentification_DeleteAll]
	@DefaultsID int,
	@BranchID int,
	@AccountType char(2)
AS

DELETE FROM EF2_KBAIdentification
WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_KBAIdentification_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_KBAIdentification_Insert]
	@KBAWebServiceURL varchar(256),
	@acquirerid int,
	@configkey varchar(50),
	@customerid char(8),
	@productcd char(2),
	@productversionnbr char(4),
	@staging char(1),
	@userdefinedtransactiontext1 varchar(255),
	@userdefinedtransactiontext2 varchar(255),
	@userdefinedtransactiontext3 varchar(255),
	@username varchar(40),
	@password varchar(40),
	@DefaultsID int,
	@BranchID int,
	@AccountType char(2)
AS

INSERT INTO EF2_KBAIdentification
(DefaultsID, BranchID, AccountType, KBAWebServiceURL, acquirerid, configkey, customerid, productcd, productversionnbr, staging, userdefinedtransactiontext1, userdefinedtransactiontext2, userdefinedtransactiontext3, username, password)
VALUES
(@DefaultsID, @BranchID, @AccountType, @KBAWebServiceURL, @acquirerid, @configkey, @customerid, @productcd, @productversionnbr, @staging, @userdefinedtransactiontext1, @userdefinedtransactiontext2, @userdefinedtransactiontext3, @username, @password)

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_KBAIdentification_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_KBAIdentification_InsertIfNew]
	@KBAWebServiceURL varchar(256),
	@acquirerid int,
	@configkey varchar(50),
	@customerid char(8),
	@productcd char(2),
	@productversionnbr char(4),
	@staging char(1),
	@userdefinedtransactiontext1 varchar(255),
	@userdefinedtransactiontext2 varchar(255),
	@userdefinedtransactiontext3 varchar(255),
	@username varchar(40),
	@password varchar(40),
	@DefaultsID int,
	@BranchID int,
	@AccountType char(2)
AS

DECLARE @Count int
SELECT @Count = COUNT(KBAWebServiceURL) FROM EF2_KBAIdentification WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType

IF @Count = 0
	BEGIN
		INSERT INTO EF2_KBAIdentification
		(DefaultsID, BranchID, AccountType, KBAWebServiceURL, acquirerid, configkey, customerid, productcd, productversionnbr, staging, userdefinedtransactiontext1, userdefinedtransactiontext2, userdefinedtransactiontext3, username, password)
		VALUES
		(@DefaultsID, @BranchID, @AccountType, @KBAWebServiceURL, @acquirerid, @configkey, @customerid, @productcd, @productversionnbr, @staging, @userdefinedtransactiontext1, @userdefinedtransactiontext2, @userdefinedtransactiontext3, @username, @password)
	END
ELSE	BEGIN
		UPDATE EF2_KBAIdentification SET
			KBAWebServiceURL = @KBAWebServiceURL,
			acquirerid = @acquirerid,
			configkey = @configkey,
			customerid = @customerid,
			productcd = @productcd,
			productversionnbr = @productversionnbr,
			staging = @staging,
			userdefinedtransactiontext1 = @userdefinedtransactiontext1,
			userdefinedtransactiontext2 = @userdefinedtransactiontext2,
			userdefinedtransactiontext3 = @userdefinedtransactiontext3,
			username = @username,
			password = @password
		WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_KBAIdentification_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_KBAIdentification_Select]
	@DefaultsID int,
	@BranchID int,
	@AccountType char(2)
AS

SELECT * FROM EF2_KBAIdentification
WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_KBAIdentification_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_KBAIdentification_SelectAll]
	@DefaultsID int,
	@BranchID int,
	@AccountType char(2)
AS

SELECT * FROM EF2_KBAIdentification
WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_KBAIdentification_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_KBAIdentification_Update]
	@KBAWebServiceURL varchar(256),
	@acquirerid varchar(100),
	@configkey varchar(50),
	@customerid varchar(8),
	@productcd varchar(2),
	@productversionnbr varchar(4),
	@staging varchar(1),
	@userdefinedtransactiontext1 varchar(255),
	@userdefinedtransactiontext2 varchar(255),
	@userdefinedtransactiontext3 varchar(255),
	@username varchar(40),
	@password varchar(40),
	@DefaultsID int,
	@BranchID int,
	@AccountType char(2)
AS

IF @KBAWebServiceURL <> ''
	BEGIN
		DECLARE @KBAWebServiceURL_CASTED varchar(256)
		IF @KBAWebServiceURL = '^'
			BEGIN
				SET @KBAWebServiceURL_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @KBAWebServiceURL_CASTED = CAST(@KBAWebServiceURL AS varchar(256))
			END

		UPDATE EF2_KBAIdentification
			SET KBAWebServiceURL = @KBAWebServiceURL_CASTED
		WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType
	END

IF @acquirerid <> ''
	BEGIN
		DECLARE @acquirerid_CASTED int
		IF @acquirerid = '^'
			BEGIN
				SET @acquirerid_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @acquirerid_CASTED = CAST(@acquirerid AS int)
			END

		UPDATE EF2_KBAIdentification
			SET acquirerid = @acquirerid_CASTED
		WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType
	END

IF @configkey <> ''
	BEGIN
		DECLARE @configkey_CASTED varchar(50)
		IF @configkey = '^'
			BEGIN
				SET @configkey_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @configkey_CASTED = CAST(@configkey AS varchar(50))
			END

		UPDATE EF2_KBAIdentification
			SET configkey = @configkey_CASTED
		WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType
	END

IF @customerid <> ''
	BEGIN
		DECLARE @customerid_CASTED char(8)
		IF @customerid = '^'
			BEGIN
				SET @customerid_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @customerid_CASTED = CAST(@customerid AS char(8))
			END

		UPDATE EF2_KBAIdentification
			SET customerid = @customerid_CASTED
		WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType
	END

IF @productcd <> ''
	BEGIN
		DECLARE @productcd_CASTED char(2)
		IF @productcd = '^'
			BEGIN
				SET @productcd_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @productcd_CASTED = CAST(@productcd AS char(2))
			END

		UPDATE EF2_KBAIdentification
			SET productcd = @productcd_CASTED
		WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType
	END

IF @productversionnbr <> ''
	BEGIN
		DECLARE @productversionnbr_CASTED char(4)
		IF @productversionnbr = '^'
			BEGIN
				SET @productversionnbr_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @productversionnbr_CASTED = CAST(@productversionnbr AS char(4))
			END

		UPDATE EF2_KBAIdentification
			SET productversionnbr = @productversionnbr_CASTED
		WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType
	END

IF @staging <> ''
	BEGIN
		DECLARE @staging_CASTED char(1)
		IF @staging = '^'
			BEGIN
				SET @staging_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @staging_CASTED = CAST(@staging AS char(1))
			END

		UPDATE EF2_KBAIdentification
			SET staging = @staging_CASTED
		WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType
	END

IF @userdefinedtransactiontext1 <> ''
	BEGIN
		DECLARE @userdefinedtransactiontext1_CASTED varchar(255)
		IF @userdefinedtransactiontext1 = '^'
			BEGIN
				SET @userdefinedtransactiontext1_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @userdefinedtransactiontext1_CASTED = CAST(@userdefinedtransactiontext1 AS varchar(255))
			END

		UPDATE EF2_KBAIdentification
			SET userdefinedtransactiontext1 = @userdefinedtransactiontext1_CASTED
		WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType
	END

IF @userdefinedtransactiontext2 <> ''
	BEGIN
		DECLARE @userdefinedtransactiontext2_CASTED varchar(255)
		IF @userdefinedtransactiontext2 = '^'
			BEGIN
				SET @userdefinedtransactiontext2_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @userdefinedtransactiontext2_CASTED = CAST(@userdefinedtransactiontext2 AS varchar(255))
			END

		UPDATE EF2_KBAIdentification
			SET userdefinedtransactiontext2 = @userdefinedtransactiontext2_CASTED
		WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType
	END

IF @userdefinedtransactiontext3 <> ''
	BEGIN
		DECLARE @userdefinedtransactiontext3_CASTED varchar(255)
		IF @userdefinedtransactiontext3 = '^'
			BEGIN
				SET @userdefinedtransactiontext3_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @userdefinedtransactiontext3_CASTED = CAST(@userdefinedtransactiontext3 AS varchar(255))
			END

		UPDATE EF2_KBAIdentification
			SET userdefinedtransactiontext3 = @userdefinedtransactiontext3_CASTED
		WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType
	END

IF @username <> ''
	BEGIN
		DECLARE @username_CASTED varchar(40)
		IF @username = '^'
			BEGIN
				SET @username_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @username_CASTED = CAST(@username AS varchar(40))
			END

		UPDATE EF2_KBAIdentification
			SET username = @username_CASTED
		WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType
	END

IF @password <> ''
	BEGIN
		DECLARE @password_CASTED varchar(40)
		IF @password = '^'
			BEGIN
				SET @password_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @password_CASTED = CAST(@password AS varchar(40))
			END

		UPDATE EF2_KBAIdentification
			SET password = @password_CASTED
		WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_KBAPerson_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_KBAPerson_Delete]
	@TrackingNum int
AS

DELETE FROM EF2_KBAPerson
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_KBAPerson_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_KBAPerson_DeleteAll]
	@TrackingNum int
AS

DELETE FROM EF2_KBAPerson
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_KBAPerson_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_eFunds2xlate_KBAPerson_Insert]
	@firstname varchar(12),
	@lastname varchar(20),
	@dob datetime,
	@ssn char(9),
	@address varchar(25),
	@city varchar(20),
	@statecd char(2),
	@zip varchar(9),
	@idvoid int,
	@TrackingNum int,
	@JointOwnerSequence smallint
AS

INSERT INTO EF2_KBAPerson
(TrackingNum, firstname, lastname, dob, ssn, address, city, statecd, zip, idvoid, JointOwnerSequence)
VALUES
(@TrackingNum, @firstname, @lastname, @dob, @ssn, @address, @city, @statecd, @zip, @idvoid, @JointOwnerSequence)

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_KBAPerson_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_eFunds2xlate_KBAPerson_InsertIfNew]
	@firstname varchar(12),
	@lastname varchar(20),
	@dob datetime,
	@ssn char(9),
	@address varchar(25),
	@city varchar(20),
	@statecd char(2),
	@zip varchar(9),
	@idvoid int,
	@TrackingNum int,
	@JointOwnerSequence smallint
AS

IF NOT EXISTS (SELECT * FROM EF2_KBAPerson WHERE 1=1 AND TrackingNum = @TrackingNum)
	BEGIN
		INSERT INTO EF2_KBAPerson
		(TrackingNum, firstname, lastname, dob, ssn, address, city, statecd, zip, idvoid, JointOwnerSequence)
		VALUES
		(@TrackingNum, @firstname, @lastname, @dob, @ssn, @address, @city, @statecd, @zip, @idvoid, @JointOwnerSequence)
	END
ELSE	BEGIN
		UPDATE EF2_KBAPerson SET
			firstname = @firstname,
			lastname = @lastname,
			dob = @dob,
			ssn = @ssn,
			address = @address,
			city = @city,
			statecd = @statecd,
			zip = @zip,
			idvoid = @idvoid,
			JointOwnerSequence = @JointOwnerSequence
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_KBAPerson_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_KBAPerson_Select]
	@TrackingNum int
AS

SELECT * FROM EF2_KBAPerson
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_KBAPerson_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_KBAPerson_SelectAll]
	@TrackingNum int
AS

SELECT * FROM EF2_KBAPerson
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_KBAPerson_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_eFunds2xlate_KBAPerson_Update]
	@firstname varchar(12),
	@lastname varchar(20),
	@dob varchar(100),
	@ssn varchar(9),
	@address varchar(25),
	@city varchar(20),
	@statecd varchar(2),
	@zip varchar(9),
	@idvoid varchar(100),
	@TrackingNum int,
	@JointOwnerSequence varchar(100)
AS

IF @firstname <> ''
	BEGIN
		DECLARE @firstname_CASTED varchar(12)
		IF @firstname = '^'
			BEGIN
				SET @firstname_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @firstname_CASTED = CAST(@firstname AS varchar(12))
			END

		UPDATE EF2_KBAPerson
			SET firstname = @firstname_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @lastname <> ''
	BEGIN
		DECLARE @lastname_CASTED varchar(20)
		IF @lastname = '^'
			BEGIN
				SET @lastname_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @lastname_CASTED = CAST(@lastname AS varchar(20))
			END

		UPDATE EF2_KBAPerson
			SET lastname = @lastname_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @dob <> ''
	BEGIN
		DECLARE @dob_CASTED datetime
		IF @dob = '^'
			BEGIN
				SET @dob_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @dob_CASTED = CAST(@dob AS datetime)
			END

		UPDATE EF2_KBAPerson
			SET dob = @dob_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @ssn <> ''
	BEGIN
		DECLARE @ssn_CASTED char(9)
		IF @ssn = '^'
			BEGIN
				SET @ssn_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ssn_CASTED = CAST(@ssn AS char(9))
			END

		UPDATE EF2_KBAPerson
			SET ssn = @ssn_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @address <> ''
	BEGIN
		DECLARE @address_CASTED varchar(25)
		IF @address = '^'
			BEGIN
				SET @address_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @address_CASTED = CAST(@address AS varchar(25))
			END

		UPDATE EF2_KBAPerson
			SET address = @address_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @city <> ''
	BEGIN
		DECLARE @city_CASTED varchar(20)
		IF @city = '^'
			BEGIN
				SET @city_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @city_CASTED = CAST(@city AS varchar(20))
			END

		UPDATE EF2_KBAPerson
			SET city = @city_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @statecd <> ''
	BEGIN
		DECLARE @statecd_CASTED char(2)
		IF @statecd = '^'
			BEGIN
				SET @statecd_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @statecd_CASTED = CAST(@statecd AS char(2))
			END

		UPDATE EF2_KBAPerson
			SET statecd = @statecd_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @zip <> ''
	BEGIN
		DECLARE @zip_CASTED varchar(9)
		IF @zip = '^'
			BEGIN
				SET @zip_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @zip_CASTED = CAST(@zip AS varchar(9))
			END

		UPDATE EF2_KBAPerson
			SET zip = @zip_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @idvoid <> ''
	BEGIN
		DECLARE @idvoid_CASTED int
		IF @idvoid = '^'
			BEGIN
				SET @idvoid_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @idvoid_CASTED = CAST(@idvoid AS int)
			END

		UPDATE EF2_KBAPerson
			SET idvoid = @idvoid_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @JointOwnerSequence <> ''
	BEGIN
		DECLARE @JointOwnerSequence_CASTED smallint
		IF @JointOwnerSequence = '^'
			BEGIN
				SET @JointOwnerSequence_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @JointOwnerSequence_CASTED = CAST(@JointOwnerSequence AS smallint)
			END

		UPDATE EF2_KBAPerson
			SET JointOwnerSequence = @JointOwnerSequence_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_KBAQuestion_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_KBAQuestion_Delete]
	@id int,
	@TrackingNum int
AS

DELETE FROM EF2_KBAQuestion
WHERE 1=1 AND id = @id AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_KBAQuestion_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_KBAQuestion_DeleteAll]
	@id int,
	@TrackingNum int
AS

DELETE FROM EF2_KBAQuestion
WHERE 1=1 AND id = @id AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_KBAQuestion_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_eFunds2xlate_KBAQuestion_Insert]
	@id int,
	@questiontext varchar(80),
	@TrackingNum int,
	@JointOwnerSequence smallint
AS

INSERT INTO EF2_KBAQuestion
(id, TrackingNum, questiontext, JointOwnerSequence)
VALUES
(@id, @TrackingNum, @questiontext, @JointOwnerSequence)

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_KBAQuestion_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_eFunds2xlate_KBAQuestion_InsertIfNew]
	@id int,
	@questiontext varchar(80),
	@TrackingNum int,
	@JointOwnerSequence smallint
AS

IF NOT EXISTS (SELECT * FROM EF2_KBAQuestion WHERE 1=1 AND id = @id AND TrackingNum = @TrackingNum)
	BEGIN
		INSERT INTO EF2_KBAQuestion
		(id, TrackingNum, questiontext, JointOwnerSequence)
		VALUES
		(@id, @TrackingNum, @questiontext, @JointOwnerSequence)
	END
ELSE	BEGIN
		UPDATE EF2_KBAQuestion SET
			questiontext = @questiontext,
			JointOwnerSequence = @JointOwnerSequence
		WHERE 1=1 AND id = @id AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_KBAQuestion_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_eFunds2xlate_KBAQuestion_Select]
	@id int,
	@TrackingNum int
AS

SELECT * FROM EF2_KBAQuestion
WHERE 1=1 AND id = @id AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_KBAQuestion_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_eFunds2xlate_KBAQuestion_SelectAll]
	@id int,
	@TrackingNum int
AS

SELECT * FROM EF2_KBAQuestion
WHERE 1=1 AND id = @id AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_KBAQuestion_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_eFunds2xlate_KBAQuestion_Update]
	@id int,
	@questiontext varchar(80),
	@TrackingNum int,
	@JointOwnerSequence varchar(100)
AS

IF @questiontext <> ''
	BEGIN
		DECLARE @questiontext_CASTED varchar(80)
		IF @questiontext = '^'
			BEGIN
				SET @questiontext_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @questiontext_CASTED = CAST(@questiontext AS varchar(80))
			END

		UPDATE EF2_KBAQuestion
			SET questiontext = @questiontext_CASTED
		WHERE 1=1 AND id = @id AND TrackingNum = @TrackingNum
	END

IF @JointOwnerSequence <> ''
	BEGIN
		DECLARE @JointOwnerSequence_CASTED smallint
		IF @JointOwnerSequence = '^'
			BEGIN
				SET @JointOwnerSequence_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @JointOwnerSequence_CASTED = CAST(@JointOwnerSequence AS smallint)
			END

		UPDATE EF2_KBAQuestion
			SET JointOwnerSequence = @JointOwnerSequence_CASTED
		WHERE 1=1 AND id = @id AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_KBAQuestions_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_KBAQuestions_Delete]
	@TrackingNum int
AS

DELETE FROM EF2_KBAQuestions
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_KBAQuestions_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_KBAQuestions_DeleteAll]
	@TrackingNum int
AS

DELETE FROM EF2_KBAQuestions
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_KBAQuestions_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_eFunds2xlate_KBAQuestions_Insert]
	@TrackingNum int,
	@quizid varchar(25),
	@quizremain varchar(25),
	@quiztime varchar(25),
	@transid varchar(50),
	@JointOwnerSequence smallint
AS

INSERT INTO EF2_KBAQuestions
(TrackingNum, quizid, quizremain, quiztime, transid, JointOwnerSequence)
VALUES
(@TrackingNum, @quizid, @quizremain, @quiztime, @transid, @JointOwnerSequence)

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_KBAQuestions_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_eFunds2xlate_KBAQuestions_InsertIfNew]
	@TrackingNum int,
	@quizid varchar(25),
	@quizremain varchar(25),
	@quiztime varchar(25),
	@transid varchar(50),
	@JointOwnerSequence smallint
AS

IF NOT EXISTS (SELECT * FROM EF2_KBAQuestions WHERE 1=1 AND TrackingNum = @TrackingNum)
	BEGIN
		INSERT INTO EF2_KBAQuestions
		(TrackingNum, quizid, quizremain, quiztime, transid, JointOwnerSequence)
		VALUES
		(@TrackingNum, @quizid, @quizremain, @quiztime, @transid, @JointOwnerSequence)
	END
ELSE	BEGIN
		UPDATE EF2_KBAQuestions SET
			quizid = @quizid,
			quizremain = @quizremain,
			quiztime = @quiztime,
			transid = @transid,
			JointOwnerSequence = @JointOwnerSequence
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_KBAQuestions_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_KBAQuestions_Select]
	@TrackingNum int
AS

SELECT * FROM EF2_KBAQuestions
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_KBAQuestions_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_KBAQuestions_SelectAll]
	@TrackingNum int
AS

SELECT * FROM EF2_KBAQuestions
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_KBAQuestions_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_eFunds2xlate_KBAQuestions_Update]
	@TrackingNum int,
	@quizid varchar(25),
	@quizremain varchar(25),
	@quiztime varchar(25),
	@transid varchar(50),
	@JointOwnerSequence varchar(100)
AS

IF @quizid <> ''
	BEGIN
		DECLARE @quizid_CASTED varchar(25)
		IF @quizid = '^'
			BEGIN
				SET @quizid_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @quizid_CASTED = CAST(@quizid AS varchar(25))
			END

		UPDATE EF2_KBAQuestions
			SET quizid = @quizid_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @quizremain <> ''
	BEGIN
		DECLARE @quizremain_CASTED varchar(25)
		IF @quizremain = '^'
			BEGIN
				SET @quizremain_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @quizremain_CASTED = CAST(@quizremain AS varchar(25))
			END

		UPDATE EF2_KBAQuestions
			SET quizremain = @quizremain_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @quiztime <> ''
	BEGIN
		DECLARE @quiztime_CASTED varchar(25)
		IF @quiztime = '^'
			BEGIN
				SET @quiztime_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @quiztime_CASTED = CAST(@quiztime AS varchar(25))
			END

		UPDATE EF2_KBAQuestions
			SET quiztime = @quiztime_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @transid <> ''
	BEGIN
		DECLARE @transid_CASTED varchar(50)
		IF @transid = '^'
			BEGIN
				SET @transid_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @transid_CASTED = CAST(@transid AS varchar(50))
			END

		UPDATE EF2_KBAQuestions
			SET transid = @transid_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @JointOwnerSequence <> ''
	BEGIN
		DECLARE @JointOwnerSequence_CASTED smallint
		IF @JointOwnerSequence = '^'
			BEGIN
				SET @JointOwnerSequence_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @JointOwnerSequence_CASTED = CAST(@JointOwnerSequence AS smallint)
			END

		UPDATE EF2_KBAQuestions
			SET JointOwnerSequence = @JointOwnerSequence_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_ManualApproval_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_eFunds2xlate_ManualApproval_Delete]
	@Sequence varchar,
	@TrackingNum int
AS

DELETE FROM IMS.EF2_ManualApproval
WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_ManualApproval_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_eFunds2xlate_ManualApproval_DeleteAll]
	@Sequence varchar,
	@TrackingNum int
AS

DELETE FROM IMS.EF2_ManualApproval
WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_ManualApproval_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_eFunds2xlate_ManualApproval_Insert]
	@Sequence varchar,
	@ReasonCode varchar(32),
	@Description varchar(256),
	@ErrorFlag char(1),
	@TrackingNum int
AS

INSERT INTO IMS.EF2_ManualApproval
(Sequence, TrackingNum, ReasonCode, Description, ErrorFlag)
VALUES
(@Sequence, @TrackingNum, @ReasonCode, @Description, @ErrorFlag)

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_ManualApproval_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_eFunds2xlate_ManualApproval_InsertIfNew]
	@Sequence varchar,
	@ReasonCode varchar(32),
	@Description varchar(256),
	@ErrorFlag char(1),
	@TrackingNum int
AS

DECLARE @Count int
SELECT @Count = COUNT(ReasonCode) FROM IMS.EF2_ManualApproval WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum

IF @Count = 0
	BEGIN
		INSERT INTO IMS.EF2_ManualApproval
		(Sequence, TrackingNum, ReasonCode, Description, ErrorFlag)
		VALUES
		(@Sequence, @TrackingNum, @ReasonCode, @Description, @ErrorFlag)
	END
ELSE	BEGIN
		UPDATE IMS.EF2_ManualApproval SET
			ReasonCode = @ReasonCode,
			Description = @Description,
			ErrorFlag = @ErrorFlag
		WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_ManualApproval_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_eFunds2xlate_ManualApproval_Select]
	@Sequence varchar,
	@TrackingNum int
AS

SELECT * FROM IMS.EF2_ManualApproval
WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_ManualApproval_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_eFunds2xlate_ManualApproval_SelectAll]
	@Sequence varchar,
	@TrackingNum int
AS

SELECT * FROM IMS.EF2_ManualApproval
WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_ManualApproval_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_eFunds2xlate_ManualApproval_Update]
	@Sequence varchar,
	@ReasonCode varchar(32),
	@Description varchar(256),
	@ErrorFlag varchar(1),
	@TrackingNum int
AS

IF @ReasonCode <> ''
	BEGIN
		DECLARE @ReasonCode_CASTED varchar(32)
		IF @ReasonCode = '^'
			BEGIN
				SET @ReasonCode_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ReasonCode_CASTED = CAST(@ReasonCode AS varchar(32))
			END

		UPDATE IMS.EF2_ManualApproval
			SET ReasonCode = @ReasonCode_CASTED
		WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
	END

IF @Description <> ''
	BEGIN
		DECLARE @Description_CASTED varchar(256)
		IF @Description = '^'
			BEGIN
				SET @Description_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Description_CASTED = CAST(@Description AS varchar(256))
			END

		UPDATE IMS.EF2_ManualApproval
			SET Description = @Description_CASTED
		WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
	END

IF @ErrorFlag <> ''
	BEGIN
		DECLARE @ErrorFlag_CASTED char(1)
		IF @ErrorFlag = '^'
			BEGIN
				SET @ErrorFlag_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ErrorFlag_CASTED = CAST(@ErrorFlag AS char(1))
			END

		UPDATE IMS.EF2_ManualApproval
			SET ErrorFlag = @ErrorFlag_CASTED
		WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_MicrConsumer_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_MicrConsumer_Delete]
	@TrackingNum int
AS

DELETE FROM EF2_MicrConsumer
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_MicrConsumer_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_MicrConsumer_DeleteAll]
	@TrackingNum int
AS

DELETE FROM EF2_MicrConsumer
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_MicrConsumer_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_MicrConsumer_Insert]
	@bankcod char(8),
	@bankcheckdigitcd char(1),
	@accountnbr varchar(20),
	@title varchar(15),
	@firstname varchar(20),
	@middlename varchar(20),
	@lastname varchar(20),
	@generationtxt varchar(10),
	@suffixtxt varchar(15),
	@streetaddresstxt varchar(99),
	@cityname varchar(30),
	@statecd char(2),
	@postalplusfourcd varchar(9),
	@socialsecuritynbr char(9),
	@dlstatecd char(2),
	@dlnb char(25),
	@homephonenbr char(10),
	@workphonenbr char(10),
	@businessname char(20),
	@federaltaxid char(9),
	@TrackingNum int
AS

INSERT INTO EF2_MicrConsumer
(TrackingNum, bankcod, bankcheckdigitcd, accountnbr, title, firstname, middlename, lastname, generationtxt, suffixtxt, streetaddresstxt, cityname, statecd, postalplusfourcd, socialsecuritynbr, dlstatecd, dlnb, homephonenbr, workphonenbr, businessname, federaltaxid)
VALUES
(@TrackingNum, @bankcod, @bankcheckdigitcd, @accountnbr, @title, @firstname, @middlename, @lastname, @generationtxt, @suffixtxt, @streetaddresstxt, @cityname, @statecd, @postalplusfourcd, @socialsecuritynbr, @dlstatecd, @dlnb, @homephonenbr, @workphonenbr, @businessname, @federaltaxid)

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_MicrConsumer_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_MicrConsumer_InsertIfNew]
	@bankcod char(8),
	@bankcheckdigitcd char(1),
	@accountnbr varchar(20),
	@title varchar(15),
	@firstname varchar(20),
	@middlename varchar(20),
	@lastname varchar(20),
	@generationtxt varchar(10),
	@suffixtxt varchar(15),
	@streetaddresstxt varchar(99),
	@cityname varchar(30),
	@statecd char(2),
	@postalplusfourcd varchar(9),
	@socialsecuritynbr char(9),
	@dlstatecd char(2),
	@dlnb char(25),
	@homephonenbr char(10),
	@workphonenbr char(10),
	@businessname char(20),
	@federaltaxid char(9),
	@TrackingNum int
AS

DECLARE @Count int
SELECT @Count = COUNT(bankcod) FROM EF2_MicrConsumer WHERE 1=1 AND TrackingNum = @TrackingNum

IF @Count = 0
	BEGIN
		INSERT INTO EF2_MicrConsumer
		(TrackingNum, bankcod, bankcheckdigitcd, accountnbr, title, firstname, middlename, lastname, generationtxt, suffixtxt, streetaddresstxt, cityname, statecd, postalplusfourcd, socialsecuritynbr, dlstatecd, dlnb, homephonenbr, workphonenbr, businessname, federaltaxid)
		VALUES
		(@TrackingNum, @bankcod, @bankcheckdigitcd, @accountnbr, @title, @firstname, @middlename, @lastname, @generationtxt, @suffixtxt, @streetaddresstxt, @cityname, @statecd, @postalplusfourcd, @socialsecuritynbr, @dlstatecd, @dlnb, @homephonenbr, @workphonenbr, @businessname, @federaltaxid)
	END
ELSE	BEGIN
		UPDATE EF2_MicrConsumer SET
			bankcod = @bankcod,
			bankcheckdigitcd = @bankcheckdigitcd,
			accountnbr = @accountnbr,
			title = @title,
			firstname = @firstname,
			middlename = @middlename,
			lastname = @lastname,
			generationtxt = @generationtxt,
			suffixtxt = @suffixtxt,
			streetaddresstxt = @streetaddresstxt,
			cityname = @cityname,
			statecd = @statecd,
			postalplusfourcd = @postalplusfourcd,
			socialsecuritynbr = @socialsecuritynbr,
			dlstatecd = @dlstatecd,
			dlnb = @dlnb,
			homephonenbr = @homephonenbr,
			workphonenbr = @workphonenbr,
			businessname = @businessname,
			federaltaxid = @federaltaxid
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_MicrConsumer_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_MicrConsumer_Select]
	@TrackingNum int
AS

SELECT * FROM EF2_MicrConsumer
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_MicrConsumer_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_MicrConsumer_SelectAll]
	@TrackingNum int
AS

SELECT * FROM EF2_MicrConsumer
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_MicrConsumer_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_MicrConsumer_Update]
	@bankcod varchar(8),
	@bankcheckdigitcd varchar(1),
	@accountnbr varchar(20),
	@title varchar(15),
	@firstname varchar(20),
	@middlename varchar(20),
	@lastname varchar(20),
	@generationtxt varchar(10),
	@suffixtxt varchar(15),
	@streetaddresstxt varchar(99),
	@cityname varchar(30),
	@statecd varchar(2),
	@postalplusfourcd varchar(9),
	@socialsecuritynbr varchar(9),
	@dlstatecd varchar(2),
	@dlnb varchar(25),
	@homephonenbr varchar(10),
	@workphonenbr varchar(10),
	@businessname varchar(20),
	@federaltaxid varchar(9),
	@TrackingNum int
AS

IF @bankcod <> ''
	BEGIN
		DECLARE @bankcod_CASTED char(8)
		IF @bankcod = '^'
			BEGIN
				SET @bankcod_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @bankcod_CASTED = CAST(@bankcod AS char(8))
			END

		UPDATE EF2_MicrConsumer
			SET bankcod = @bankcod_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @bankcheckdigitcd <> ''
	BEGIN
		DECLARE @bankcheckdigitcd_CASTED char(1)
		IF @bankcheckdigitcd = '^'
			BEGIN
				SET @bankcheckdigitcd_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @bankcheckdigitcd_CASTED = CAST(@bankcheckdigitcd AS char(1))
			END

		UPDATE EF2_MicrConsumer
			SET bankcheckdigitcd = @bankcheckdigitcd_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @accountnbr <> ''
	BEGIN
		DECLARE @accountnbr_CASTED varchar(20)
		IF @accountnbr = '^'
			BEGIN
				SET @accountnbr_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @accountnbr_CASTED = CAST(@accountnbr AS varchar(20))
			END

		UPDATE EF2_MicrConsumer
			SET accountnbr = @accountnbr_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @title <> ''
	BEGIN
		DECLARE @title_CASTED varchar(15)
		IF @title = '^'
			BEGIN
				SET @title_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @title_CASTED = CAST(@title AS varchar(15))
			END

		UPDATE EF2_MicrConsumer
			SET title = @title_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @firstname <> ''
	BEGIN
		DECLARE @firstname_CASTED varchar(20)
		IF @firstname = '^'
			BEGIN
				SET @firstname_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @firstname_CASTED = CAST(@firstname AS varchar(20))
			END

		UPDATE EF2_MicrConsumer
			SET firstname = @firstname_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @middlename <> ''
	BEGIN
		DECLARE @middlename_CASTED varchar(20)
		IF @middlename = '^'
			BEGIN
				SET @middlename_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @middlename_CASTED = CAST(@middlename AS varchar(20))
			END

		UPDATE EF2_MicrConsumer
			SET middlename = @middlename_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @lastname <> ''
	BEGIN
		DECLARE @lastname_CASTED varchar(20)
		IF @lastname = '^'
			BEGIN
				SET @lastname_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @lastname_CASTED = CAST(@lastname AS varchar(20))
			END

		UPDATE EF2_MicrConsumer
			SET lastname = @lastname_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @generationtxt <> ''
	BEGIN
		DECLARE @generationtxt_CASTED varchar(10)
		IF @generationtxt = '^'
			BEGIN
				SET @generationtxt_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @generationtxt_CASTED = CAST(@generationtxt AS varchar(10))
			END

		UPDATE EF2_MicrConsumer
			SET generationtxt = @generationtxt_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @suffixtxt <> ''
	BEGIN
		DECLARE @suffixtxt_CASTED varchar(15)
		IF @suffixtxt = '^'
			BEGIN
				SET @suffixtxt_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @suffixtxt_CASTED = CAST(@suffixtxt AS varchar(15))
			END

		UPDATE EF2_MicrConsumer
			SET suffixtxt = @suffixtxt_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @streetaddresstxt <> ''
	BEGIN
		DECLARE @streetaddresstxt_CASTED varchar(99)
		IF @streetaddresstxt = '^'
			BEGIN
				SET @streetaddresstxt_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @streetaddresstxt_CASTED = CAST(@streetaddresstxt AS varchar(99))
			END

		UPDATE EF2_MicrConsumer
			SET streetaddresstxt = @streetaddresstxt_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @cityname <> ''
	BEGIN
		DECLARE @cityname_CASTED varchar(30)
		IF @cityname = '^'
			BEGIN
				SET @cityname_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @cityname_CASTED = CAST(@cityname AS varchar(30))
			END

		UPDATE EF2_MicrConsumer
			SET cityname = @cityname_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @statecd <> ''
	BEGIN
		DECLARE @statecd_CASTED char(2)
		IF @statecd = '^'
			BEGIN
				SET @statecd_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @statecd_CASTED = CAST(@statecd AS char(2))
			END

		UPDATE EF2_MicrConsumer
			SET statecd = @statecd_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @postalplusfourcd <> ''
	BEGIN
		DECLARE @postalplusfourcd_CASTED varchar(9)
		IF @postalplusfourcd = '^'
			BEGIN
				SET @postalplusfourcd_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @postalplusfourcd_CASTED = CAST(@postalplusfourcd AS varchar(9))
			END

		UPDATE EF2_MicrConsumer
			SET postalplusfourcd = @postalplusfourcd_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @socialsecuritynbr <> ''
	BEGIN
		DECLARE @socialsecuritynbr_CASTED char(9)
		IF @socialsecuritynbr = '^'
			BEGIN
				SET @socialsecuritynbr_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @socialsecuritynbr_CASTED = CAST(@socialsecuritynbr AS char(9))
			END

		UPDATE EF2_MicrConsumer
			SET socialsecuritynbr = @socialsecuritynbr_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @dlstatecd <> ''
	BEGIN
		DECLARE @dlstatecd_CASTED char(2)
		IF @dlstatecd = '^'
			BEGIN
				SET @dlstatecd_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @dlstatecd_CASTED = CAST(@dlstatecd AS char(2))
			END

		UPDATE EF2_MicrConsumer
			SET dlstatecd = @dlstatecd_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @dlnb <> ''
	BEGIN
		DECLARE @dlnb_CASTED char(25)
		IF @dlnb = '^'
			BEGIN
				SET @dlnb_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @dlnb_CASTED = CAST(@dlnb AS char(25))
			END

		UPDATE EF2_MicrConsumer
			SET dlnb = @dlnb_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @homephonenbr <> ''
	BEGIN
		DECLARE @homephonenbr_CASTED char(10)
		IF @homephonenbr = '^'
			BEGIN
				SET @homephonenbr_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @homephonenbr_CASTED = CAST(@homephonenbr AS char(10))
			END

		UPDATE EF2_MicrConsumer
			SET homephonenbr = @homephonenbr_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @workphonenbr <> ''
	BEGIN
		DECLARE @workphonenbr_CASTED char(10)
		IF @workphonenbr = '^'
			BEGIN
				SET @workphonenbr_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @workphonenbr_CASTED = CAST(@workphonenbr AS char(10))
			END

		UPDATE EF2_MicrConsumer
			SET workphonenbr = @workphonenbr_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @businessname <> ''
	BEGIN
		DECLARE @businessname_CASTED char(20)
		IF @businessname = '^'
			BEGIN
				SET @businessname_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @businessname_CASTED = CAST(@businessname AS char(20))
			END

		UPDATE EF2_MicrConsumer
			SET businessname = @businessname_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @federaltaxid <> ''
	BEGIN
		DECLARE @federaltaxid_CASTED char(9)
		IF @federaltaxid = '^'
			BEGIN
				SET @federaltaxid_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @federaltaxid_CASTED = CAST(@federaltaxid AS char(9))
			END

		UPDATE EF2_MicrConsumer
			SET federaltaxid = @federaltaxid_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_MicrIdentification_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_MicrIdentification_Delete]
	@DefaultsID int,
	@BranchID int,
	@AccountType char(2)
AS

DELETE FROM EF2_MicrIdentification
WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_MicrIdentification_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_MicrIdentification_DeleteAll]
	@DefaultsID int,
	@BranchID int,
	@AccountType char(2)
AS

DELETE FROM EF2_MicrIdentification
WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_MicrIdentification_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_MicrIdentification_Insert]
	@AOWebServiceURL varchar(256),
	@acquirerid int,
	@customerid char(8),
	@productcd char(2),
	@productversionnbr char(4),
	@staging char(1),
	@userdefinedtransactiontext2 varchar(40),
	@userdefinedtransactiontext3 varchar(40),
	@username varchar(40),
	@password varchar(40),
	@DefaultsID int,
	@BranchID int,
	@AccountType char(2),
	@userdefinedtransactiontext1 varchar(40)
AS

INSERT INTO EF2_MicrIdentification
(DefaultsID, BranchID, AccountType, AOWebServiceURL, acquirerid, customerid, productcd, productversionnbr, staging, userdefinedtransactiontext2, userdefinedtransactiontext3, username, password, userdefinedtransactiontext1)
VALUES
(@DefaultsID, @BranchID, @AccountType, @AOWebServiceURL, @acquirerid, @customerid, @productcd, @productversionnbr, @staging, @userdefinedtransactiontext2, @userdefinedtransactiontext3, @username, @password, @userdefinedtransactiontext1)

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_MicrIdentification_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_MicrIdentification_InsertIfNew]
	@AOWebServiceURL varchar(256),
	@acquirerid int,
	@customerid char(8),
	@productcd char(2),
	@productversionnbr char(4),
	@staging char(1),
	@userdefinedtransactiontext2 varchar(40),
	@userdefinedtransactiontext3 varchar(40),
	@username varchar(40),
	@password varchar(40),
	@DefaultsID int,
	@BranchID int,
	@AccountType char(2),
	@userdefinedtransactiontext1 varchar(40)
AS

DECLARE @Count int
SELECT @Count = COUNT(AOWebServiceURL) FROM EF2_MicrIdentification WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType

IF @Count = 0
	BEGIN
		INSERT INTO EF2_MicrIdentification
		(DefaultsID, BranchID, AccountType, AOWebServiceURL, acquirerid, customerid, productcd, productversionnbr, staging, userdefinedtransactiontext2, userdefinedtransactiontext3, username, password, userdefinedtransactiontext1)
		VALUES
		(@DefaultsID, @BranchID, @AccountType, @AOWebServiceURL, @acquirerid, @customerid, @productcd, @productversionnbr, @staging, @userdefinedtransactiontext2, @userdefinedtransactiontext3, @username, @password, @userdefinedtransactiontext1)
	END
ELSE	BEGIN
		UPDATE EF2_MicrIdentification SET
			AOWebServiceURL = @AOWebServiceURL,
			acquirerid = @acquirerid,
			customerid = @customerid,
			productcd = @productcd,
			productversionnbr = @productversionnbr,
			staging = @staging,
			userdefinedtransactiontext2 = @userdefinedtransactiontext2,
			userdefinedtransactiontext3 = @userdefinedtransactiontext3,
			username = @username,
			password = @password,
			userdefinedtransactiontext1 = @userdefinedtransactiontext1
		WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_MicrIdentification_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_MicrIdentification_Select]
	@DefaultsID int,
	@BranchID int,
	@AccountType char(2)
AS

SELECT * FROM EF2_MicrIdentification
WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_MicrIdentification_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_MicrIdentification_SelectAll]
	@DefaultsID int,
	@BranchID int,
	@AccountType char(2)
AS

SELECT * FROM EF2_MicrIdentification
WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_MicrIdentification_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_MicrIdentification_Update]
	@AOWebServiceURL varchar(256),
	@acquirerid varchar(100),
	@customerid varchar(8),
	@productcd varchar(2),
	@productversionnbr varchar(4),
	@staging varchar(1),
	@userdefinedtransactiontext2 varchar(40),
	@userdefinedtransactiontext3 varchar(40),
	@username varchar(40),
	@password varchar(40),
	@DefaultsID int,
	@BranchID int,
	@AccountType char(2),
	@userdefinedtransactiontext1 varchar(40)
AS

IF @AOWebServiceURL <> ''
	BEGIN
		DECLARE @AOWebServiceURL_CASTED varchar(256)
		IF @AOWebServiceURL = '^'
			BEGIN
				SET @AOWebServiceURL_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @AOWebServiceURL_CASTED = CAST(@AOWebServiceURL AS varchar(256))
			END

		UPDATE EF2_MicrIdentification
			SET AOWebServiceURL = @AOWebServiceURL_CASTED
		WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType
	END

IF @acquirerid <> ''
	BEGIN
		DECLARE @acquirerid_CASTED int
		IF @acquirerid = '^'
			BEGIN
				SET @acquirerid_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @acquirerid_CASTED = CAST(@acquirerid AS int)
			END

		UPDATE EF2_MicrIdentification
			SET acquirerid = @acquirerid_CASTED
		WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType
	END

IF @customerid <> ''
	BEGIN
		DECLARE @customerid_CASTED char(8)
		IF @customerid = '^'
			BEGIN
				SET @customerid_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @customerid_CASTED = CAST(@customerid AS char(8))
			END

		UPDATE EF2_MicrIdentification
			SET customerid = @customerid_CASTED
		WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType
	END

IF @productcd <> ''
	BEGIN
		DECLARE @productcd_CASTED char(2)
		IF @productcd = '^'
			BEGIN
				SET @productcd_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @productcd_CASTED = CAST(@productcd AS char(2))
			END

		UPDATE EF2_MicrIdentification
			SET productcd = @productcd_CASTED
		WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType
	END

IF @productversionnbr <> ''
	BEGIN
		DECLARE @productversionnbr_CASTED char(4)
		IF @productversionnbr = '^'
			BEGIN
				SET @productversionnbr_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @productversionnbr_CASTED = CAST(@productversionnbr AS char(4))
			END

		UPDATE EF2_MicrIdentification
			SET productversionnbr = @productversionnbr_CASTED
		WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType
	END

IF @staging <> ''
	BEGIN
		DECLARE @staging_CASTED char(1)
		IF @staging = '^'
			BEGIN
				SET @staging_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @staging_CASTED = CAST(@staging AS char(1))
			END

		UPDATE EF2_MicrIdentification
			SET staging = @staging_CASTED
		WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType
	END

IF @userdefinedtransactiontext2 <> ''
	BEGIN
		DECLARE @userdefinedtransactiontext2_CASTED varchar(40)
		IF @userdefinedtransactiontext2 = '^'
			BEGIN
				SET @userdefinedtransactiontext2_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @userdefinedtransactiontext2_CASTED = CAST(@userdefinedtransactiontext2 AS varchar(40))
			END

		UPDATE EF2_MicrIdentification
			SET userdefinedtransactiontext2 = @userdefinedtransactiontext2_CASTED
		WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType
	END

IF @userdefinedtransactiontext3 <> ''
	BEGIN
		DECLARE @userdefinedtransactiontext3_CASTED varchar(40)
		IF @userdefinedtransactiontext3 = '^'
			BEGIN
				SET @userdefinedtransactiontext3_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @userdefinedtransactiontext3_CASTED = CAST(@userdefinedtransactiontext3 AS varchar(40))
			END

		UPDATE EF2_MicrIdentification
			SET userdefinedtransactiontext3 = @userdefinedtransactiontext3_CASTED
		WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType
	END

IF @username <> ''
	BEGIN
		DECLARE @username_CASTED varchar(40)
		IF @username = '^'
			BEGIN
				SET @username_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @username_CASTED = CAST(@username AS varchar(40))
			END

		UPDATE EF2_MicrIdentification
			SET username = @username_CASTED
		WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType
	END

IF @password <> ''
	BEGIN
		DECLARE @password_CASTED varchar(40)
		IF @password = '^'
			BEGIN
				SET @password_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @password_CASTED = CAST(@password AS varchar(40))
			END

		UPDATE EF2_MicrIdentification
			SET password = @password_CASTED
		WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType
	END

IF @userdefinedtransactiontext1 <> ''
	BEGIN
		DECLARE @userdefinedtransactiontext1_CASTED varchar(40)
		IF @userdefinedtransactiontext1 = '^'
			BEGIN
				SET @userdefinedtransactiontext1_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @userdefinedtransactiontext1_CASTED = CAST(@userdefinedtransactiontext1 AS varchar(40))
			END

		UPDATE EF2_MicrIdentification
			SET userdefinedtransactiontext1 = @userdefinedtransactiontext1_CASTED
		WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_MicrMatchData_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_MicrMatchData_Delete]
AS

DELETE FROM EF2_MicrMatchData
WHERE 1=1

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_MicrMatchData_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_MicrMatchData_DeleteAll]
AS

DELETE FROM EF2_MicrMatchData
WHERE 1=1

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_MicrMatchData_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_MicrMatchData_Insert]
	@bankcod char(8),
	@bankcheckdigitcd char(1),
	@accountnbr varchar(20),
	@title varchar(15),
	@firstname varchar(20),
	@middlename varchar(20),
	@lastname varchar(20),
	@generationtxt varchar(10),
	@suffixtxt varchar(15),
	@streetaddresstxt varchar(99),
	@cityname varchar(30),
	@statecd char(2),
	@postalplusfourcd varchar(9),
	@socialsecuritynbr char(9),
	@dlstatecd char(2),
	@dlnb char(25),
	@homephonenbr char(10),
	@workphonenbr char(10),
	@businessname char(20),
	@federaltaxid char(9),
	@TrackingNum varchar(60)
AS

INSERT INTO EF2_MicrMatchData
(bankcod, bankcheckdigitcd, accountnbr, title, firstname, middlename, lastname, generationtxt, suffixtxt, streetaddresstxt, cityname, statecd, postalplusfourcd, socialsecuritynbr, dlstatecd, dlnb, homephonenbr, workphonenbr, businessname, federaltaxid, TrackingNum)
VALUES
(@bankcod, @bankcheckdigitcd, @accountnbr, @title, @firstname, @middlename, @lastname, @generationtxt, @suffixtxt, @streetaddresstxt, @cityname, @statecd, @postalplusfourcd, @socialsecuritynbr, @dlstatecd, @dlnb, @homephonenbr, @workphonenbr, @businessname, @federaltaxid, @TrackingNum)

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_MicrMatchData_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_MicrMatchData_InsertIfNew]
	@bankcod char(8),
	@bankcheckdigitcd char(1),
	@accountnbr varchar(20),
	@title varchar(15),
	@firstname varchar(20),
	@middlename varchar(20),
	@lastname varchar(20),
	@generationtxt varchar(10),
	@suffixtxt varchar(15),
	@streetaddresstxt varchar(99),
	@cityname varchar(30),
	@statecd char(2),
	@postalplusfourcd varchar(9),
	@socialsecuritynbr char(9),
	@dlstatecd char(2),
	@dlnb char(25),
	@homephonenbr char(10),
	@workphonenbr char(10),
	@businessname char(20),
	@federaltaxid char(9),
	@TrackingNum varchar(60)
AS

DECLARE @Count int
SELECT @Count = COUNT(bankcod) FROM EF2_MicrMatchData WHERE 1=1

IF @Count = 0
	BEGIN
		INSERT INTO EF2_MicrMatchData
		(bankcod, bankcheckdigitcd, accountnbr, title, firstname, middlename, lastname, generationtxt, suffixtxt, streetaddresstxt, cityname, statecd, postalplusfourcd, socialsecuritynbr, dlstatecd, dlnb, homephonenbr, workphonenbr, businessname, federaltaxid, TrackingNum)
		VALUES
		(@bankcod, @bankcheckdigitcd, @accountnbr, @title, @firstname, @middlename, @lastname, @generationtxt, @suffixtxt, @streetaddresstxt, @cityname, @statecd, @postalplusfourcd, @socialsecuritynbr, @dlstatecd, @dlnb, @homephonenbr, @workphonenbr, @businessname, @federaltaxid, @TrackingNum)
	END
ELSE	BEGIN
		UPDATE EF2_MicrMatchData SET
			bankcod = @bankcod,
			bankcheckdigitcd = @bankcheckdigitcd,
			accountnbr = @accountnbr,
			title = @title,
			firstname = @firstname,
			middlename = @middlename,
			lastname = @lastname,
			generationtxt = @generationtxt,
			suffixtxt = @suffixtxt,
			streetaddresstxt = @streetaddresstxt,
			cityname = @cityname,
			statecd = @statecd,
			postalplusfourcd = @postalplusfourcd,
			socialsecuritynbr = @socialsecuritynbr,
			dlstatecd = @dlstatecd,
			dlnb = @dlnb,
			homephonenbr = @homephonenbr,
			workphonenbr = @workphonenbr,
			businessname = @businessname,
			federaltaxid = @federaltaxid,
			TrackingNum = @TrackingNum
		WHERE 1=1
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_MicrMatchData_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_MicrMatchData_Select]
AS

SELECT * FROM EF2_MicrMatchData
WHERE 1=1

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_MicrMatchData_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_MicrMatchData_SelectAll]
AS

SELECT * FROM EF2_MicrMatchData
WHERE 1=1

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_MicrMatchData_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_MicrMatchData_Update]
	@bankcod varchar(8),
	@bankcheckdigitcd varchar(1),
	@accountnbr varchar(20),
	@title varchar(15),
	@firstname varchar(20),
	@middlename varchar(20),
	@lastname varchar(20),
	@generationtxt varchar(10),
	@suffixtxt varchar(15),
	@streetaddresstxt varchar(99),
	@cityname varchar(30),
	@statecd varchar(2),
	@postalplusfourcd varchar(9),
	@socialsecuritynbr varchar(9),
	@dlstatecd varchar(2),
	@dlnb varchar(25),
	@homephonenbr varchar(10),
	@workphonenbr varchar(10),
	@businessname varchar(20),
	@federaltaxid varchar(9),
	@TrackingNum varchar(60)
AS

IF @bankcod <> ''
	BEGIN
		DECLARE @bankcod_CASTED char(8)
		IF @bankcod = '^'
			BEGIN
				SET @bankcod_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @bankcod_CASTED = CAST(@bankcod AS char(8))
			END

		UPDATE EF2_MicrMatchData
			SET bankcod = @bankcod_CASTED
		WHERE 1=1
	END

IF @bankcheckdigitcd <> ''
	BEGIN
		DECLARE @bankcheckdigitcd_CASTED char(1)
		IF @bankcheckdigitcd = '^'
			BEGIN
				SET @bankcheckdigitcd_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @bankcheckdigitcd_CASTED = CAST(@bankcheckdigitcd AS char(1))
			END

		UPDATE EF2_MicrMatchData
			SET bankcheckdigitcd = @bankcheckdigitcd_CASTED
		WHERE 1=1
	END

IF @accountnbr <> ''
	BEGIN
		DECLARE @accountnbr_CASTED varchar(20)
		IF @accountnbr = '^'
			BEGIN
				SET @accountnbr_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @accountnbr_CASTED = CAST(@accountnbr AS varchar(20))
			END

		UPDATE EF2_MicrMatchData
			SET accountnbr = @accountnbr_CASTED
		WHERE 1=1
	END

IF @title <> ''
	BEGIN
		DECLARE @title_CASTED varchar(15)
		IF @title = '^'
			BEGIN
				SET @title_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @title_CASTED = CAST(@title AS varchar(15))
			END

		UPDATE EF2_MicrMatchData
			SET title = @title_CASTED
		WHERE 1=1
	END

IF @firstname <> ''
	BEGIN
		DECLARE @firstname_CASTED varchar(20)
		IF @firstname = '^'
			BEGIN
				SET @firstname_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @firstname_CASTED = CAST(@firstname AS varchar(20))
			END

		UPDATE EF2_MicrMatchData
			SET firstname = @firstname_CASTED
		WHERE 1=1
	END

IF @middlename <> ''
	BEGIN
		DECLARE @middlename_CASTED varchar(20)
		IF @middlename = '^'
			BEGIN
				SET @middlename_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @middlename_CASTED = CAST(@middlename AS varchar(20))
			END

		UPDATE EF2_MicrMatchData
			SET middlename = @middlename_CASTED
		WHERE 1=1
	END

IF @lastname <> ''
	BEGIN
		DECLARE @lastname_CASTED varchar(20)
		IF @lastname = '^'
			BEGIN
				SET @lastname_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @lastname_CASTED = CAST(@lastname AS varchar(20))
			END

		UPDATE EF2_MicrMatchData
			SET lastname = @lastname_CASTED
		WHERE 1=1
	END

IF @generationtxt <> ''
	BEGIN
		DECLARE @generationtxt_CASTED varchar(10)
		IF @generationtxt = '^'
			BEGIN
				SET @generationtxt_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @generationtxt_CASTED = CAST(@generationtxt AS varchar(10))
			END

		UPDATE EF2_MicrMatchData
			SET generationtxt = @generationtxt_CASTED
		WHERE 1=1
	END

IF @suffixtxt <> ''
	BEGIN
		DECLARE @suffixtxt_CASTED varchar(15)
		IF @suffixtxt = '^'
			BEGIN
				SET @suffixtxt_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @suffixtxt_CASTED = CAST(@suffixtxt AS varchar(15))
			END

		UPDATE EF2_MicrMatchData
			SET suffixtxt = @suffixtxt_CASTED
		WHERE 1=1
	END

IF @streetaddresstxt <> ''
	BEGIN
		DECLARE @streetaddresstxt_CASTED varchar(99)
		IF @streetaddresstxt = '^'
			BEGIN
				SET @streetaddresstxt_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @streetaddresstxt_CASTED = CAST(@streetaddresstxt AS varchar(99))
			END

		UPDATE EF2_MicrMatchData
			SET streetaddresstxt = @streetaddresstxt_CASTED
		WHERE 1=1
	END

IF @cityname <> ''
	BEGIN
		DECLARE @cityname_CASTED varchar(30)
		IF @cityname = '^'
			BEGIN
				SET @cityname_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @cityname_CASTED = CAST(@cityname AS varchar(30))
			END

		UPDATE EF2_MicrMatchData
			SET cityname = @cityname_CASTED
		WHERE 1=1
	END

IF @statecd <> ''
	BEGIN
		DECLARE @statecd_CASTED char(2)
		IF @statecd = '^'
			BEGIN
				SET @statecd_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @statecd_CASTED = CAST(@statecd AS char(2))
			END

		UPDATE EF2_MicrMatchData
			SET statecd = @statecd_CASTED
		WHERE 1=1
	END

IF @postalplusfourcd <> ''
	BEGIN
		DECLARE @postalplusfourcd_CASTED varchar(9)
		IF @postalplusfourcd = '^'
			BEGIN
				SET @postalplusfourcd_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @postalplusfourcd_CASTED = CAST(@postalplusfourcd AS varchar(9))
			END

		UPDATE EF2_MicrMatchData
			SET postalplusfourcd = @postalplusfourcd_CASTED
		WHERE 1=1
	END

IF @socialsecuritynbr <> ''
	BEGIN
		DECLARE @socialsecuritynbr_CASTED char(9)
		IF @socialsecuritynbr = '^'
			BEGIN
				SET @socialsecuritynbr_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @socialsecuritynbr_CASTED = CAST(@socialsecuritynbr AS char(9))
			END

		UPDATE EF2_MicrMatchData
			SET socialsecuritynbr = @socialsecuritynbr_CASTED
		WHERE 1=1
	END

IF @dlstatecd <> ''
	BEGIN
		DECLARE @dlstatecd_CASTED char(2)
		IF @dlstatecd = '^'
			BEGIN
				SET @dlstatecd_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @dlstatecd_CASTED = CAST(@dlstatecd AS char(2))
			END

		UPDATE EF2_MicrMatchData
			SET dlstatecd = @dlstatecd_CASTED
		WHERE 1=1
	END

IF @dlnb <> ''
	BEGIN
		DECLARE @dlnb_CASTED char(25)
		IF @dlnb = '^'
			BEGIN
				SET @dlnb_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @dlnb_CASTED = CAST(@dlnb AS char(25))
			END

		UPDATE EF2_MicrMatchData
			SET dlnb = @dlnb_CASTED
		WHERE 1=1
	END

IF @homephonenbr <> ''
	BEGIN
		DECLARE @homephonenbr_CASTED char(10)
		IF @homephonenbr = '^'
			BEGIN
				SET @homephonenbr_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @homephonenbr_CASTED = CAST(@homephonenbr AS char(10))
			END

		UPDATE EF2_MicrMatchData
			SET homephonenbr = @homephonenbr_CASTED
		WHERE 1=1
	END

IF @workphonenbr <> ''
	BEGIN
		DECLARE @workphonenbr_CASTED char(10)
		IF @workphonenbr = '^'
			BEGIN
				SET @workphonenbr_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @workphonenbr_CASTED = CAST(@workphonenbr AS char(10))
			END

		UPDATE EF2_MicrMatchData
			SET workphonenbr = @workphonenbr_CASTED
		WHERE 1=1
	END

IF @businessname <> ''
	BEGIN
		DECLARE @businessname_CASTED char(20)
		IF @businessname = '^'
			BEGIN
				SET @businessname_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @businessname_CASTED = CAST(@businessname AS char(20))
			END

		UPDATE EF2_MicrMatchData
			SET businessname = @businessname_CASTED
		WHERE 1=1
	END

IF @federaltaxid <> ''
	BEGIN
		DECLARE @federaltaxid_CASTED char(9)
		IF @federaltaxid = '^'
			BEGIN
				SET @federaltaxid_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @federaltaxid_CASTED = CAST(@federaltaxid AS char(9))
			END

		UPDATE EF2_MicrMatchData
			SET federaltaxid = @federaltaxid_CASTED
		WHERE 1=1
	END

IF @TrackingNum <> ''
	BEGIN
		DECLARE @TrackingNum_CASTED varchar(60)
		IF @TrackingNum = '^'
			BEGIN
				SET @TrackingNum_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @TrackingNum_CASTED = CAST(@TrackingNum AS varchar(60))
			END

		UPDATE EF2_MicrMatchData
			SET TrackingNum = @TrackingNum_CASTED
		WHERE 1=1
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_MicrMatchResponse_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_MicrMatchResponse_Delete]
	@TrackingNum varchar(60)
AS

DELETE FROM EF2_MicrMatchResponse
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_MicrMatchResponse_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_MicrMatchResponse_DeleteAll]
	@TrackingNum varchar(60)
AS

DELETE FROM EF2_MicrMatchResponse
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_MicrMatchResponse_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_MicrMatchResponse_Insert]
	@transactiontrackingid varchar(60),
	@receipttm char(6),
	@responsetm char(6),
	@userdefinedtransactiontext1 varchar(40),
	@userdefinedtransactiontext2 varchar(40),
	@userdefinedtransactiontext3 varchar(40),
	@TrackingNum varchar(60)
AS

INSERT INTO EF2_MicrMatchResponse
(TrackingNum, transactiontrackingid, receipttm, responsetm, userdefinedtransactiontext1, userdefinedtransactiontext2, userdefinedtransactiontext3)
VALUES
(@TrackingNum, @transactiontrackingid, @receipttm, @responsetm, @userdefinedtransactiontext1, @userdefinedtransactiontext2, @userdefinedtransactiontext3)

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_MicrMatchResponse_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_MicrMatchResponse_InsertIfNew]
	@transactiontrackingid varchar(60),
	@receipttm char(6),
	@responsetm char(6),
	@userdefinedtransactiontext1 varchar(40),
	@userdefinedtransactiontext2 varchar(40),
	@userdefinedtransactiontext3 varchar(40),
	@TrackingNum varchar(60)
AS

DECLARE @Count int
SELECT @Count = COUNT(transactiontrackingid) FROM EF2_MicrMatchResponse WHERE 1=1 AND TrackingNum = @TrackingNum

IF @Count = 0
	BEGIN
		INSERT INTO EF2_MicrMatchResponse
		(TrackingNum, transactiontrackingid, receipttm, responsetm, userdefinedtransactiontext1, userdefinedtransactiontext2, userdefinedtransactiontext3)
		VALUES
		(@TrackingNum, @transactiontrackingid, @receipttm, @responsetm, @userdefinedtransactiontext1, @userdefinedtransactiontext2, @userdefinedtransactiontext3)
	END
ELSE	BEGIN
		UPDATE EF2_MicrMatchResponse SET
			transactiontrackingid = @transactiontrackingid,
			receipttm = @receipttm,
			responsetm = @responsetm,
			userdefinedtransactiontext1 = @userdefinedtransactiontext1,
			userdefinedtransactiontext2 = @userdefinedtransactiontext2,
			userdefinedtransactiontext3 = @userdefinedtransactiontext3
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_MicrMatchResponse_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_MicrMatchResponse_Select]
	@TrackingNum varchar(60)
AS

SELECT * FROM EF2_MicrMatchResponse
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_MicrMatchResponse_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_MicrMatchResponse_SelectAll]
	@TrackingNum varchar(60)
AS

SELECT * FROM EF2_MicrMatchResponse
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_MicrMatchResponse_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_MicrMatchResponse_Update]
	@transactiontrackingid varchar(60),
	@receipttm varchar(6),
	@responsetm varchar(6),
	@userdefinedtransactiontext1 varchar(40),
	@userdefinedtransactiontext2 varchar(40),
	@userdefinedtransactiontext3 varchar(40),
	@TrackingNum varchar(60)
AS

IF @transactiontrackingid <> ''
	BEGIN
		DECLARE @transactiontrackingid_CASTED varchar(60)
		IF @transactiontrackingid = '^'
			BEGIN
				SET @transactiontrackingid_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @transactiontrackingid_CASTED = CAST(@transactiontrackingid AS varchar(60))
			END

		UPDATE EF2_MicrMatchResponse
			SET transactiontrackingid = @transactiontrackingid_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @receipttm <> ''
	BEGIN
		DECLARE @receipttm_CASTED char(6)
		IF @receipttm = '^'
			BEGIN
				SET @receipttm_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @receipttm_CASTED = CAST(@receipttm AS char(6))
			END

		UPDATE EF2_MicrMatchResponse
			SET receipttm = @receipttm_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @responsetm <> ''
	BEGIN
		DECLARE @responsetm_CASTED char(6)
		IF @responsetm = '^'
			BEGIN
				SET @responsetm_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @responsetm_CASTED = CAST(@responsetm AS char(6))
			END

		UPDATE EF2_MicrMatchResponse
			SET responsetm = @responsetm_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @userdefinedtransactiontext1 <> ''
	BEGIN
		DECLARE @userdefinedtransactiontext1_CASTED varchar(40)
		IF @userdefinedtransactiontext1 = '^'
			BEGIN
				SET @userdefinedtransactiontext1_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @userdefinedtransactiontext1_CASTED = CAST(@userdefinedtransactiontext1 AS varchar(40))
			END

		UPDATE EF2_MicrMatchResponse
			SET userdefinedtransactiontext1 = @userdefinedtransactiontext1_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @userdefinedtransactiontext2 <> ''
	BEGIN
		DECLARE @userdefinedtransactiontext2_CASTED varchar(40)
		IF @userdefinedtransactiontext2 = '^'
			BEGIN
				SET @userdefinedtransactiontext2_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @userdefinedtransactiontext2_CASTED = CAST(@userdefinedtransactiontext2 AS varchar(40))
			END

		UPDATE EF2_MicrMatchResponse
			SET userdefinedtransactiontext2 = @userdefinedtransactiontext2_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @userdefinedtransactiontext3 <> ''
	BEGIN
		DECLARE @userdefinedtransactiontext3_CASTED varchar(40)
		IF @userdefinedtransactiontext3 = '^'
			BEGIN
				SET @userdefinedtransactiontext3_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @userdefinedtransactiontext3_CASTED = CAST(@userdefinedtransactiontext3 AS varchar(40))
			END

		UPDATE EF2_MicrMatchResponse
			SET userdefinedtransactiontext3 = @userdefinedtransactiontext3_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_MicrRiskConsumer_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_MicrRiskConsumer_Delete]
AS

DELETE FROM EF2_MicrRiskConsumer
WHERE 1=1

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_MicrRiskConsumer_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_MicrRiskConsumer_DeleteAll]
AS

DELETE FROM EF2_MicrRiskConsumer
WHERE 1=1

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_MicrRiskConsumer_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_MicrRiskConsumer_Insert]
	@bankcod char(8),
	@bankcheckdigitcd char(1),
	@accountnbr varchar(20),
	@TrackingNum varchar(60)
AS

INSERT INTO EF2_MicrRiskConsumer
(bankcod, bankcheckdigitcd, accountnbr, TrackingNum)
VALUES
(@bankcod, @bankcheckdigitcd, @accountnbr, @TrackingNum)

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_MicrRiskConsumer_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_MicrRiskConsumer_InsertIfNew]
	@bankcod char(8),
	@bankcheckdigitcd char(1),
	@accountnbr varchar(20),
	@TrackingNum varchar(60)
AS

DECLARE @Count int
SELECT @Count = COUNT(bankcod) FROM EF2_MicrRiskConsumer WHERE 1=1

IF @Count = 0
	BEGIN
		INSERT INTO EF2_MicrRiskConsumer
		(bankcod, bankcheckdigitcd, accountnbr, TrackingNum)
		VALUES
		(@bankcod, @bankcheckdigitcd, @accountnbr, @TrackingNum)
	END
ELSE	BEGIN
		UPDATE EF2_MicrRiskConsumer SET
			bankcod = @bankcod,
			bankcheckdigitcd = @bankcheckdigitcd,
			accountnbr = @accountnbr,
			TrackingNum = @TrackingNum
		WHERE 1=1
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_MicrRiskConsumer_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_MicrRiskConsumer_Select]
AS

SELECT * FROM EF2_MicrRiskConsumer
WHERE 1=1

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_MicrRiskConsumer_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_MicrRiskConsumer_SelectAll]
AS

SELECT * FROM EF2_MicrRiskConsumer
WHERE 1=1

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_MicrRiskConsumer_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_MicrRiskConsumer_Update]
	@bankcod varchar(8),
	@bankcheckdigitcd varchar(1),
	@accountnbr varchar(20),
	@TrackingNum varchar(60)
AS

IF @bankcod <> ''
	BEGIN
		DECLARE @bankcod_CASTED char(8)
		IF @bankcod = '^'
			BEGIN
				SET @bankcod_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @bankcod_CASTED = CAST(@bankcod AS char(8))
			END

		UPDATE EF2_MicrRiskConsumer
			SET bankcod = @bankcod_CASTED
		WHERE 1=1
	END

IF @bankcheckdigitcd <> ''
	BEGIN
		DECLARE @bankcheckdigitcd_CASTED char(1)
		IF @bankcheckdigitcd = '^'
			BEGIN
				SET @bankcheckdigitcd_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @bankcheckdigitcd_CASTED = CAST(@bankcheckdigitcd AS char(1))
			END

		UPDATE EF2_MicrRiskConsumer
			SET bankcheckdigitcd = @bankcheckdigitcd_CASTED
		WHERE 1=1
	END

IF @accountnbr <> ''
	BEGIN
		DECLARE @accountnbr_CASTED varchar(20)
		IF @accountnbr = '^'
			BEGIN
				SET @accountnbr_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @accountnbr_CASTED = CAST(@accountnbr AS varchar(20))
			END

		UPDATE EF2_MicrRiskConsumer
			SET accountnbr = @accountnbr_CASTED
		WHERE 1=1
	END

IF @TrackingNum <> ''
	BEGIN
		DECLARE @TrackingNum_CASTED varchar(60)
		IF @TrackingNum = '^'
			BEGIN
				SET @TrackingNum_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @TrackingNum_CASTED = CAST(@TrackingNum AS varchar(60))
			END

		UPDATE EF2_MicrRiskConsumer
			SET TrackingNum = @TrackingNum_CASTED
		WHERE 1=1
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_MicrRiskData_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_MicrRiskData_Delete]
AS

DELETE FROM EF2_MicrRiskData
WHERE 1=1

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_MicrRiskData_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_MicrRiskData_DeleteAll]
AS

DELETE FROM EF2_MicrRiskData
WHERE 1=1

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_MicrRiskData_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_MicrRiskData_Insert]
	@bankcod char(8),
	@bankcheckdigitcd char(1),
	@accountnbr varchar(20),
	@TrackingNum varchar(60)
AS

INSERT INTO EF2_MicrRiskData
(bankcod, bankcheckdigitcd, accountnbr, TrackingNum)
VALUES
(@bankcod, @bankcheckdigitcd, @accountnbr, @TrackingNum)

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_MicrRiskData_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_MicrRiskData_InsertIfNew]
	@bankcod char(8),
	@bankcheckdigitcd char(1),
	@accountnbr varchar(20),
	@TrackingNum varchar(60)
AS

DECLARE @Count int
SELECT @Count = COUNT(bankcod) FROM EF2_MicrRiskData WHERE 1=1

IF @Count = 0
	BEGIN
		INSERT INTO EF2_MicrRiskData
		(bankcod, bankcheckdigitcd, accountnbr, TrackingNum)
		VALUES
		(@bankcod, @bankcheckdigitcd, @accountnbr, @TrackingNum)
	END
ELSE	BEGIN
		UPDATE EF2_MicrRiskData SET
			bankcod = @bankcod,
			bankcheckdigitcd = @bankcheckdigitcd,
			accountnbr = @accountnbr,
			TrackingNum = @TrackingNum
		WHERE 1=1
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_MicrRiskData_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_MicrRiskData_Select]
AS

SELECT * FROM EF2_MicrRiskData
WHERE 1=1

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_MicrRiskData_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_MicrRiskData_SelectAll]
AS

SELECT * FROM EF2_MicrRiskData
WHERE 1=1

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_MicrRiskData_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_MicrRiskData_Update]
	@bankcod varchar(8),
	@bankcheckdigitcd varchar(1),
	@accountnbr varchar(20),
	@TrackingNum varchar(60)
AS

IF @bankcod <> ''
	BEGIN
		DECLARE @bankcod_CASTED char(8)
		IF @bankcod = '^'
			BEGIN
				SET @bankcod_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @bankcod_CASTED = CAST(@bankcod AS char(8))
			END

		UPDATE EF2_MicrRiskData
			SET bankcod = @bankcod_CASTED
		WHERE 1=1
	END

IF @bankcheckdigitcd <> ''
	BEGIN
		DECLARE @bankcheckdigitcd_CASTED char(1)
		IF @bankcheckdigitcd = '^'
			BEGIN
				SET @bankcheckdigitcd_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @bankcheckdigitcd_CASTED = CAST(@bankcheckdigitcd AS char(1))
			END

		UPDATE EF2_MicrRiskData
			SET bankcheckdigitcd = @bankcheckdigitcd_CASTED
		WHERE 1=1
	END

IF @accountnbr <> ''
	BEGIN
		DECLARE @accountnbr_CASTED varchar(20)
		IF @accountnbr = '^'
			BEGIN
				SET @accountnbr_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @accountnbr_CASTED = CAST(@accountnbr AS varchar(20))
			END

		UPDATE EF2_MicrRiskData
			SET accountnbr = @accountnbr_CASTED
		WHERE 1=1
	END

IF @TrackingNum <> ''
	BEGIN
		DECLARE @TrackingNum_CASTED varchar(60)
		IF @TrackingNum = '^'
			BEGIN
				SET @TrackingNum_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @TrackingNum_CASTED = CAST(@TrackingNum AS varchar(60))
			END

		UPDATE EF2_MicrRiskData
			SET TrackingNum = @TrackingNum_CASTED
		WHERE 1=1
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_MicrRiskIdentification_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_MicrRiskIdentification_Delete]
	@DefaultsID int,
	@BranchID int,
	@AccountType char(2)
AS

DELETE FROM EF2_MicrRiskIdentification
WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_MicrRiskIdentification_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_MicrRiskIdentification_DeleteAll]
	@DefaultsID int,
	@BranchID int,
	@AccountType char(2)
AS

DELETE FROM EF2_MicrRiskIdentification
WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_MicrRiskIdentification_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_MicrRiskIdentification_Insert]
	@ARWebServiceURL varchar(256),
	@acquirerid int,
	@customerid char(8),
	@productcd char(2),
	@productversionnbr char(4),
	@staging char(1),
	@username varchar(40),
	@password varchar(40),
	@DefaultsID int,
	@BranchID int,
	@AccountType char(2),
	@userdefinedtransactiontext1 varchar(40)
AS

INSERT INTO EF2_MicrRiskIdentification
(DefaultsID, BranchID, AccountType, ARWebServiceURL, acquirerid, customerid, productcd, productversionnbr, staging, username, password, userdefinedtransactiontext1)
VALUES
(@DefaultsID, @BranchID, @AccountType, @ARWebServiceURL, @acquirerid, @customerid, @productcd, @productversionnbr, @staging, @username, @password, @userdefinedtransactiontext1)

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_MicrRiskIdentification_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_MicrRiskIdentification_InsertIfNew]
	@ARWebServiceURL varchar(256),
	@acquirerid int,
	@customerid char(8),
	@productcd char(2),
	@productversionnbr char(4),
	@staging char(1),
	@username varchar(40),
	@password varchar(40),
	@DefaultsID int,
	@BranchID int,
	@AccountType char(2),
	@userdefinedtransactiontext1 varchar(40)
AS

DECLARE @Count int
SELECT @Count = COUNT(ARWebServiceURL) FROM EF2_MicrRiskIdentification WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType

IF @Count = 0
	BEGIN
		INSERT INTO EF2_MicrRiskIdentification
		(DefaultsID, BranchID, AccountType, ARWebServiceURL, acquirerid, customerid, productcd, productversionnbr, staging, username, password, userdefinedtransactiontext1)
		VALUES
		(@DefaultsID, @BranchID, @AccountType, @ARWebServiceURL, @acquirerid, @customerid, @productcd, @productversionnbr, @staging, @username, @password, @userdefinedtransactiontext1)
	END
ELSE	BEGIN
		UPDATE EF2_MicrRiskIdentification SET
			ARWebServiceURL = @ARWebServiceURL,
			acquirerid = @acquirerid,
			customerid = @customerid,
			productcd = @productcd,
			productversionnbr = @productversionnbr,
			staging = @staging,
			username = @username,
			password = @password,
			userdefinedtransactiontext1 = @userdefinedtransactiontext1
		WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_MicrRiskIdentification_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_MicrRiskIdentification_Select]
	@DefaultsID int,
	@BranchID int,
	@AccountType char(2)
AS

SELECT * FROM EF2_MicrRiskIdentification
WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_MicrRiskIdentification_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_MicrRiskIdentification_SelectAll]
	@DefaultsID int,
	@BranchID int,
	@AccountType char(2)
AS

SELECT * FROM EF2_MicrRiskIdentification
WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_MicrRiskIdentification_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_MicrRiskIdentification_Update]
	@ARWebServiceURL varchar(256),
	@acquirerid varchar(100),
	@customerid varchar(8),
	@productcd varchar(2),
	@productversionnbr varchar(4),
	@staging varchar(1),
	@username varchar(40),
	@password varchar(40),
	@DefaultsID int,
	@BranchID int,
	@AccountType char(2),
	@userdefinedtransactiontext1 varchar(40)
AS

IF @ARWebServiceURL <> ''
	BEGIN
		DECLARE @ARWebServiceURL_CASTED varchar(256)
		IF @ARWebServiceURL = '^'
			BEGIN
				SET @ARWebServiceURL_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ARWebServiceURL_CASTED = CAST(@ARWebServiceURL AS varchar(256))
			END

		UPDATE EF2_MicrRiskIdentification
			SET ARWebServiceURL = @ARWebServiceURL_CASTED
		WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType
	END

IF @acquirerid <> ''
	BEGIN
		DECLARE @acquirerid_CASTED int
		IF @acquirerid = '^'
			BEGIN
				SET @acquirerid_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @acquirerid_CASTED = CAST(@acquirerid AS int)
			END

		UPDATE EF2_MicrRiskIdentification
			SET acquirerid = @acquirerid_CASTED
		WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType
	END

IF @customerid <> ''
	BEGIN
		DECLARE @customerid_CASTED char(8)
		IF @customerid = '^'
			BEGIN
				SET @customerid_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @customerid_CASTED = CAST(@customerid AS char(8))
			END

		UPDATE EF2_MicrRiskIdentification
			SET customerid = @customerid_CASTED
		WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType
	END

IF @productcd <> ''
	BEGIN
		DECLARE @productcd_CASTED char(2)
		IF @productcd = '^'
			BEGIN
				SET @productcd_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @productcd_CASTED = CAST(@productcd AS char(2))
			END

		UPDATE EF2_MicrRiskIdentification
			SET productcd = @productcd_CASTED
		WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType
	END

IF @productversionnbr <> ''
	BEGIN
		DECLARE @productversionnbr_CASTED char(4)
		IF @productversionnbr = '^'
			BEGIN
				SET @productversionnbr_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @productversionnbr_CASTED = CAST(@productversionnbr AS char(4))
			END

		UPDATE EF2_MicrRiskIdentification
			SET productversionnbr = @productversionnbr_CASTED
		WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType
	END

IF @staging <> ''
	BEGIN
		DECLARE @staging_CASTED char(1)
		IF @staging = '^'
			BEGIN
				SET @staging_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @staging_CASTED = CAST(@staging AS char(1))
			END

		UPDATE EF2_MicrRiskIdentification
			SET staging = @staging_CASTED
		WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType
	END

IF @username <> ''
	BEGIN
		DECLARE @username_CASTED varchar(40)
		IF @username = '^'
			BEGIN
				SET @username_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @username_CASTED = CAST(@username AS varchar(40))
			END

		UPDATE EF2_MicrRiskIdentification
			SET username = @username_CASTED
		WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType
	END

IF @password <> ''
	BEGIN
		DECLARE @password_CASTED varchar(40)
		IF @password = '^'
			BEGIN
				SET @password_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @password_CASTED = CAST(@password AS varchar(40))
			END

		UPDATE EF2_MicrRiskIdentification
			SET password = @password_CASTED
		WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType
	END

IF @userdefinedtransactiontext1 <> ''
	BEGIN
		DECLARE @userdefinedtransactiontext1_CASTED varchar(40)
		IF @userdefinedtransactiontext1 = '^'
			BEGIN
				SET @userdefinedtransactiontext1_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @userdefinedtransactiontext1_CASTED = CAST(@userdefinedtransactiontext1 AS varchar(40))
			END

		UPDATE EF2_MicrRiskIdentification
			SET userdefinedtransactiontext1 = @userdefinedtransactiontext1_CASTED
		WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_MicrRiskResponse_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_MicrRiskResponse_Delete]
	@TrackingNum varchar(60)
AS

DELETE FROM EF2_MicrRiskResponse
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_MicrRiskResponse_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_MicrRiskResponse_DeleteAll]
	@TrackingNum varchar(60)
AS

DELETE FROM EF2_MicrRiskResponse
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_MicrRiskResponse_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_MicrRiskResponse_Insert]
	@transactiontrackingid varchar(60),
	@receipttm char(6),
	@responsetm char(6),
	@userdefinedtransactiontext1 varchar(40),
	@MappedApprovalType char(1),
	@MappedApprovalAmount int,
	@TrackingNum varchar(60)
AS

INSERT INTO EF2_MicrRiskResponse
(TrackingNum, transactiontrackingid, receipttm, responsetm, userdefinedtransactiontext1, MappedApprovalType, MappedApprovalAmount)
VALUES
(@TrackingNum, @transactiontrackingid, @receipttm, @responsetm, @userdefinedtransactiontext1, @MappedApprovalType, @MappedApprovalAmount)

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_MicrRiskResponse_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_MicrRiskResponse_InsertIfNew]
	@transactiontrackingid varchar(60),
	@receipttm char(6),
	@responsetm char(6),
	@userdefinedtransactiontext1 varchar(40),
	@MappedApprovalType char(1),
	@MappedApprovalAmount int,
	@TrackingNum varchar(60)
AS

DECLARE @Count int
SELECT @Count = COUNT(transactiontrackingid) FROM EF2_MicrRiskResponse WHERE 1=1 AND TrackingNum = @TrackingNum

IF @Count = 0
	BEGIN
		INSERT INTO EF2_MicrRiskResponse
		(TrackingNum, transactiontrackingid, receipttm, responsetm, userdefinedtransactiontext1, MappedApprovalType, MappedApprovalAmount)
		VALUES
		(@TrackingNum, @transactiontrackingid, @receipttm, @responsetm, @userdefinedtransactiontext1, @MappedApprovalType, @MappedApprovalAmount)
	END
ELSE	BEGIN
		UPDATE EF2_MicrRiskResponse SET
			transactiontrackingid = @transactiontrackingid,
			receipttm = @receipttm,
			responsetm = @responsetm,
			userdefinedtransactiontext1 = @userdefinedtransactiontext1,
			MappedApprovalType = @MappedApprovalType,
			MappedApprovalAmount = @MappedApprovalAmount
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_MicrRiskResponse_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_MicrRiskResponse_Select]
	@TrackingNum varchar(60)
AS

SELECT * FROM EF2_MicrRiskResponse
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_MicrRiskResponse_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_MicrRiskResponse_SelectAll]
	@TrackingNum varchar(60)
AS

SELECT * FROM EF2_MicrRiskResponse
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_MicrRiskResponse_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_MicrRiskResponse_Update]
	@transactiontrackingid varchar(60),
	@receipttm varchar(6),
	@responsetm varchar(6),
	@userdefinedtransactiontext1 varchar(40),
	@MappedApprovalType varchar(1),
	@MappedApprovalAmount varchar(100),
	@TrackingNum varchar(60)
AS

IF @transactiontrackingid <> ''
	BEGIN
		DECLARE @transactiontrackingid_CASTED varchar(60)
		IF @transactiontrackingid = '^'
			BEGIN
				SET @transactiontrackingid_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @transactiontrackingid_CASTED = CAST(@transactiontrackingid AS varchar(60))
			END

		UPDATE EF2_MicrRiskResponse
			SET transactiontrackingid = @transactiontrackingid_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @receipttm <> ''
	BEGIN
		DECLARE @receipttm_CASTED char(6)
		IF @receipttm = '^'
			BEGIN
				SET @receipttm_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @receipttm_CASTED = CAST(@receipttm AS char(6))
			END

		UPDATE EF2_MicrRiskResponse
			SET receipttm = @receipttm_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @responsetm <> ''
	BEGIN
		DECLARE @responsetm_CASTED char(6)
		IF @responsetm = '^'
			BEGIN
				SET @responsetm_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @responsetm_CASTED = CAST(@responsetm AS char(6))
			END

		UPDATE EF2_MicrRiskResponse
			SET responsetm = @responsetm_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @userdefinedtransactiontext1 <> ''
	BEGIN
		DECLARE @userdefinedtransactiontext1_CASTED varchar(40)
		IF @userdefinedtransactiontext1 = '^'
			BEGIN
				SET @userdefinedtransactiontext1_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @userdefinedtransactiontext1_CASTED = CAST(@userdefinedtransactiontext1 AS varchar(40))
			END

		UPDATE EF2_MicrRiskResponse
			SET userdefinedtransactiontext1 = @userdefinedtransactiontext1_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @MappedApprovalType <> ''
	BEGIN
		DECLARE @MappedApprovalType_CASTED char(1)
		IF @MappedApprovalType = '^'
			BEGIN
				SET @MappedApprovalType_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @MappedApprovalType_CASTED = CAST(@MappedApprovalType AS char(1))
			END

		UPDATE EF2_MicrRiskResponse
			SET MappedApprovalType = @MappedApprovalType_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @MappedApprovalAmount <> ''
	BEGIN
		DECLARE @MappedApprovalAmount_CASTED int
		IF @MappedApprovalAmount = '^'
			BEGIN
				SET @MappedApprovalAmount_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @MappedApprovalAmount_CASTED = CAST(@MappedApprovalAmount AS int)
			END

		UPDATE EF2_MicrRiskResponse
			SET MappedApprovalAmount = @MappedApprovalAmount_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_MicrRiskResult_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_MicrRiskResult_Delete]
	@TrackingNum varchar(60)
AS

DELETE FROM EF2_MicrRiskResult
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_MicrRiskResult_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_MicrRiskResult_DeleteAll]
	@TrackingNum varchar(60)
AS

DELETE FROM EF2_MicrRiskResult
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_MicrRiskResult_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_MicrRiskResult_Insert]
	@acctaccepttxt char(10),
	@acctclsind char(1),
	@riskmgmtscore char(3),
	@TrackingNum varchar(60)
AS

INSERT INTO EF2_MicrRiskResult
(TrackingNum, acctaccepttxt, acctclsind, riskmgmtscore)
VALUES
(@TrackingNum, @acctaccepttxt, @acctclsind, @riskmgmtscore)

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_MicrRiskResult_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_MicrRiskResult_InsertIfNew]
	@acctaccepttxt char(10),
	@acctclsind char(1),
	@riskmgmtscore char(3),
	@TrackingNum varchar(60)
AS

DECLARE @Count int
SELECT @Count = COUNT(acctaccepttxt) FROM EF2_MicrRiskResult WHERE 1=1 AND TrackingNum = @TrackingNum

IF @Count = 0
	BEGIN
		INSERT INTO EF2_MicrRiskResult
		(TrackingNum, acctaccepttxt, acctclsind, riskmgmtscore)
		VALUES
		(@TrackingNum, @acctaccepttxt, @acctclsind, @riskmgmtscore)
	END
ELSE	BEGIN
		UPDATE EF2_MicrRiskResult SET
			acctaccepttxt = @acctaccepttxt,
			acctclsind = @acctclsind,
			riskmgmtscore = @riskmgmtscore
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_MicrRiskResult_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_MicrRiskResult_Select]
	@TrackingNum varchar(60)
AS

SELECT * FROM EF2_MicrRiskResult
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_MicrRiskResult_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_MicrRiskResult_SelectAll]
	@TrackingNum varchar(60)
AS

SELECT * FROM EF2_MicrRiskResult
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_MicrRiskResult_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_MicrRiskResult_Update]
	@acctaccepttxt varchar(10),
	@acctclsind varchar(1),
	@riskmgmtscore varchar(3),
	@TrackingNum varchar(60)
AS

IF @acctaccepttxt <> ''
	BEGIN
		DECLARE @acctaccepttxt_CASTED char(10)
		IF @acctaccepttxt = '^'
			BEGIN
				SET @acctaccepttxt_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @acctaccepttxt_CASTED = CAST(@acctaccepttxt AS char(10))
			END

		UPDATE EF2_MicrRiskResult
			SET acctaccepttxt = @acctaccepttxt_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @acctclsind <> ''
	BEGIN
		DECLARE @acctclsind_CASTED char(1)
		IF @acctclsind = '^'
			BEGIN
				SET @acctclsind_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @acctclsind_CASTED = CAST(@acctclsind AS char(1))
			END

		UPDATE EF2_MicrRiskResult
			SET acctclsind = @acctclsind_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @riskmgmtscore <> ''
	BEGIN
		DECLARE @riskmgmtscore_CASTED char(3)
		IF @riskmgmtscore = '^'
			BEGIN
				SET @riskmgmtscore_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @riskmgmtscore_CASTED = CAST(@riskmgmtscore AS char(3))
			END

		UPDATE EF2_MicrRiskResult
			SET riskmgmtscore = @riskmgmtscore_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_MicrValidationsresult_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_MicrValidationsresult_Delete]
	@TrackingNum varchar(60)
AS

DELETE FROM EF2_MicrValidationsresult
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_MicrValidationsresult_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_MicrValidationsresult_DeleteAll]
	@TrackingNum varchar(60)
AS

DELETE FROM EF2_MicrValidationsresult
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_MicrValidationsresult_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_MicrValidationsresult_Insert]
	@micrmatch char(1),
	@micrnamematch char(1),
	@micraddressmatch char(1),
	@micrgovtnbrmatch char(1),
	@micrdlmatch char(1),
	@micrhomephonematch char(1),
	@micrworkphonematch char(1),
	@TrackingNum varchar(60)
AS

INSERT INTO EF2_MicrValidationsresult
(TrackingNum, micrmatch, micrnamematch, micraddressmatch, micrgovtnbrmatch, micrdlmatch, micrhomephonematch, micrworkphonematch)
VALUES
(@TrackingNum, @micrmatch, @micrnamematch, @micraddressmatch, @micrgovtnbrmatch, @micrdlmatch, @micrhomephonematch, @micrworkphonematch)

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_MicrValidationsresult_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_MicrValidationsresult_InsertIfNew]
	@micrmatch char(1),
	@micrnamematch char(1),
	@micraddressmatch char(1),
	@micrgovtnbrmatch char(1),
	@micrdlmatch char(1),
	@micrhomephonematch char(1),
	@micrworkphonematch char(1),
	@TrackingNum varchar(60)
AS

DECLARE @Count int
SELECT @Count = COUNT(micrmatch) FROM EF2_MicrValidationsresult WHERE 1=1 AND TrackingNum = @TrackingNum

IF @Count = 0
	BEGIN
		INSERT INTO EF2_MicrValidationsresult
		(TrackingNum, micrmatch, micrnamematch, micraddressmatch, micrgovtnbrmatch, micrdlmatch, micrhomephonematch, micrworkphonematch)
		VALUES
		(@TrackingNum, @micrmatch, @micrnamematch, @micraddressmatch, @micrgovtnbrmatch, @micrdlmatch, @micrhomephonematch, @micrworkphonematch)
	END
ELSE	BEGIN
		UPDATE EF2_MicrValidationsresult SET
			micrmatch = @micrmatch,
			micrnamematch = @micrnamematch,
			micraddressmatch = @micraddressmatch,
			micrgovtnbrmatch = @micrgovtnbrmatch,
			micrdlmatch = @micrdlmatch,
			micrhomephonematch = @micrhomephonematch,
			micrworkphonematch = @micrworkphonematch
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_MicrValidationsresult_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_MicrValidationsresult_Select]
	@TrackingNum varchar(60)
AS

SELECT * FROM EF2_MicrValidationsresult
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_MicrValidationsresult_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_MicrValidationsresult_SelectAll]
	@TrackingNum varchar(60)
AS

SELECT * FROM EF2_MicrValidationsresult
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_MicrValidationsresult_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_MicrValidationsresult_Update]
	@micrmatch varchar(1),
	@micrnamematch varchar(1),
	@micraddressmatch varchar(1),
	@micrgovtnbrmatch varchar(1),
	@micrdlmatch varchar(1),
	@micrhomephonematch varchar(1),
	@micrworkphonematch varchar(1),
	@TrackingNum varchar(60)
AS

IF @micrmatch <> ''
	BEGIN
		DECLARE @micrmatch_CASTED char(1)
		IF @micrmatch = '^'
			BEGIN
				SET @micrmatch_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @micrmatch_CASTED = CAST(@micrmatch AS char(1))
			END

		UPDATE EF2_MicrValidationsresult
			SET micrmatch = @micrmatch_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @micrnamematch <> ''
	BEGIN
		DECLARE @micrnamematch_CASTED char(1)
		IF @micrnamematch = '^'
			BEGIN
				SET @micrnamematch_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @micrnamematch_CASTED = CAST(@micrnamematch AS char(1))
			END

		UPDATE EF2_MicrValidationsresult
			SET micrnamematch = @micrnamematch_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @micraddressmatch <> ''
	BEGIN
		DECLARE @micraddressmatch_CASTED char(1)
		IF @micraddressmatch = '^'
			BEGIN
				SET @micraddressmatch_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @micraddressmatch_CASTED = CAST(@micraddressmatch AS char(1))
			END

		UPDATE EF2_MicrValidationsresult
			SET micraddressmatch = @micraddressmatch_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @micrgovtnbrmatch <> ''
	BEGIN
		DECLARE @micrgovtnbrmatch_CASTED char(1)
		IF @micrgovtnbrmatch = '^'
			BEGIN
				SET @micrgovtnbrmatch_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @micrgovtnbrmatch_CASTED = CAST(@micrgovtnbrmatch AS char(1))
			END

		UPDATE EF2_MicrValidationsresult
			SET micrgovtnbrmatch = @micrgovtnbrmatch_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @micrdlmatch <> ''
	BEGIN
		DECLARE @micrdlmatch_CASTED char(1)
		IF @micrdlmatch = '^'
			BEGIN
				SET @micrdlmatch_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @micrdlmatch_CASTED = CAST(@micrdlmatch AS char(1))
			END

		UPDATE EF2_MicrValidationsresult
			SET micrdlmatch = @micrdlmatch_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @micrhomephonematch <> ''
	BEGIN
		DECLARE @micrhomephonematch_CASTED char(1)
		IF @micrhomephonematch = '^'
			BEGIN
				SET @micrhomephonematch_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @micrhomephonematch_CASTED = CAST(@micrhomephonematch AS char(1))
			END

		UPDATE EF2_MicrValidationsresult
			SET micrhomephonematch = @micrhomephonematch_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @micrworkphonematch <> ''
	BEGIN
		DECLARE @micrworkphonematch_CASTED char(1)
		IF @micrworkphonematch = '^'
			BEGIN
				SET @micrworkphonematch_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @micrworkphonematch_CASTED = CAST(@micrworkphonematch AS char(1))
			END

		UPDATE EF2_MicrValidationsresult
			SET micrworkphonematch = @micrworkphonematch_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_PersonQuery_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_PersonQuery_Delete]
	@TrackingNum int
AS

DELETE FROM IMS.EF2_PersonQuery
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_PersonQuery_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_PersonQuery_DeleteAll]
	@TrackingNum int
AS

DELETE FROM IMS.EF2_PersonQuery
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_PersonQuery_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_PersonQuery_Insert]
	@birthdt datetime,
	@citynm varchar(20),
	@compositephonenbr varchar(10),
	@countrynm varchar(50),
	@firstnm varchar(12),
	@governmentnbr varchar(9),
	@identificationstatecd char(2),
	@identificationstatenbr varchar(25),
	@lastnm varchar(20),
	@middlenm char(1),
	@postalplusfourcd varchar(9),
	@statecd char(2),
	@streetaddresstxt varchar(25),
	@userdefinedrecordtxt varchar(60),
	@TrackingNum int
AS

INSERT INTO IMS.EF2_PersonQuery
(TrackingNum, birthdt, citynm, compositephonenbr, countrynm, firstnm, governmentnbr, identificationstatecd, identificationstatenbr, lastnm, middlenm, postalplusfourcd, statecd, streetaddresstxt, userdefinedrecordtxt)
VALUES
(@TrackingNum, @birthdt, @citynm, @compositephonenbr, @countrynm, @firstnm, @governmentnbr, @identificationstatecd, @identificationstatenbr, @lastnm, @middlenm, @postalplusfourcd, @statecd, @streetaddresstxt, @userdefinedrecordtxt)

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_PersonQuery_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_PersonQuery_InsertIfNew]
	@birthdt datetime,
	@citynm varchar(20),
	@compositephonenbr varchar(10),
	@countrynm varchar(50),
	@firstnm varchar(12),
	@governmentnbr varchar(9),
	@identificationstatecd char(2),
	@identificationstatenbr varchar(25),
	@lastnm varchar(20),
	@middlenm char(1),
	@postalplusfourcd varchar(9),
	@statecd char(2),
	@streetaddresstxt varchar(25),
	@userdefinedrecordtxt varchar(60),
	@TrackingNum int
AS

DECLARE @Count int
SELECT @Count = COUNT(birthdt) FROM IMS.EF2_PersonQuery WHERE 1=1 AND TrackingNum = @TrackingNum

IF @Count = 0
	BEGIN
		INSERT INTO IMS.EF2_PersonQuery
		(TrackingNum, birthdt, citynm, compositephonenbr, countrynm, firstnm, governmentnbr, identificationstatecd, identificationstatenbr, lastnm, middlenm, postalplusfourcd, statecd, streetaddresstxt, userdefinedrecordtxt)
		VALUES
		(@TrackingNum, @birthdt, @citynm, @compositephonenbr, @countrynm, @firstnm, @governmentnbr, @identificationstatecd, @identificationstatenbr, @lastnm, @middlenm, @postalplusfourcd, @statecd, @streetaddresstxt, @userdefinedrecordtxt)
	END
ELSE	BEGIN
		UPDATE IMS.EF2_PersonQuery SET
			birthdt = @birthdt,
			citynm = @citynm,
			compositephonenbr = @compositephonenbr,
			countrynm = @countrynm,
			firstnm = @firstnm,
			governmentnbr = @governmentnbr,
			identificationstatecd = @identificationstatecd,
			identificationstatenbr = @identificationstatenbr,
			lastnm = @lastnm,
			middlenm = @middlenm,
			postalplusfourcd = @postalplusfourcd,
			statecd = @statecd,
			streetaddresstxt = @streetaddresstxt,
			userdefinedrecordtxt = @userdefinedrecordtxt
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_PersonQuery_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_PersonQuery_Select]
	@TrackingNum int
AS

SELECT * FROM IMS.EF2_PersonQuery
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_PersonQuery_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_PersonQuery_SelectAll]
	@TrackingNum int
AS

SELECT * FROM IMS.EF2_PersonQuery
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_PersonQuery_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_PersonQuery_Update]
	@birthdt varchar(100),
	@citynm varchar(20),
	@compositephonenbr varchar(10),
	@countrynm varchar(50),
	@firstnm varchar(12),
	@governmentnbr varchar(9),
	@identificationstatecd varchar(2),
	@identificationstatenbr varchar(25),
	@lastnm varchar(20),
	@middlenm varchar(1),
	@postalplusfourcd varchar(9),
	@statecd varchar(2),
	@streetaddresstxt varchar(25),
	@userdefinedrecordtxt varchar(60),
	@TrackingNum int
AS

IF @birthdt <> ''
	BEGIN
		DECLARE @birthdt_CASTED datetime
		IF @birthdt = '^'
			BEGIN
				SET @birthdt_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @birthdt_CASTED = CAST(@birthdt AS datetime)
			END

		UPDATE IMS.EF2_PersonQuery
			SET birthdt = @birthdt_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @citynm <> ''
	BEGIN
		DECLARE @citynm_CASTED varchar(20)
		IF @citynm = '^'
			BEGIN
				SET @citynm_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @citynm_CASTED = CAST(@citynm AS varchar(20))
			END

		UPDATE IMS.EF2_PersonQuery
			SET citynm = @citynm_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @compositephonenbr <> ''
	BEGIN
		DECLARE @compositephonenbr_CASTED varchar(10)
		IF @compositephonenbr = '^'
			BEGIN
				SET @compositephonenbr_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @compositephonenbr_CASTED = CAST(@compositephonenbr AS varchar(10))
			END

		UPDATE IMS.EF2_PersonQuery
			SET compositephonenbr = @compositephonenbr_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @countrynm <> ''
	BEGIN
		DECLARE @countrynm_CASTED varchar(50)
		IF @countrynm = '^'
			BEGIN
				SET @countrynm_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @countrynm_CASTED = CAST(@countrynm AS varchar(50))
			END

		UPDATE IMS.EF2_PersonQuery
			SET countrynm = @countrynm_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @firstnm <> ''
	BEGIN
		DECLARE @firstnm_CASTED varchar(12)
		IF @firstnm = '^'
			BEGIN
				SET @firstnm_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @firstnm_CASTED = CAST(@firstnm AS varchar(12))
			END

		UPDATE IMS.EF2_PersonQuery
			SET firstnm = @firstnm_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @governmentnbr <> ''
	BEGIN
		DECLARE @governmentnbr_CASTED varchar(9)
		IF @governmentnbr = '^'
			BEGIN
				SET @governmentnbr_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @governmentnbr_CASTED = CAST(@governmentnbr AS varchar(9))
			END

		UPDATE IMS.EF2_PersonQuery
			SET governmentnbr = @governmentnbr_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @identificationstatecd <> ''
	BEGIN
		DECLARE @identificationstatecd_CASTED char(2)
		IF @identificationstatecd = '^'
			BEGIN
				SET @identificationstatecd_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @identificationstatecd_CASTED = CAST(@identificationstatecd AS char(2))
			END

		UPDATE IMS.EF2_PersonQuery
			SET identificationstatecd = @identificationstatecd_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @identificationstatenbr <> ''
	BEGIN
		DECLARE @identificationstatenbr_CASTED varchar(25)
		IF @identificationstatenbr = '^'
			BEGIN
				SET @identificationstatenbr_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @identificationstatenbr_CASTED = CAST(@identificationstatenbr AS varchar(25))
			END

		UPDATE IMS.EF2_PersonQuery
			SET identificationstatenbr = @identificationstatenbr_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @lastnm <> ''
	BEGIN
		DECLARE @lastnm_CASTED varchar(20)
		IF @lastnm = '^'
			BEGIN
				SET @lastnm_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @lastnm_CASTED = CAST(@lastnm AS varchar(20))
			END

		UPDATE IMS.EF2_PersonQuery
			SET lastnm = @lastnm_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @middlenm <> ''
	BEGIN
		DECLARE @middlenm_CASTED char(1)
		IF @middlenm = '^'
			BEGIN
				SET @middlenm_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @middlenm_CASTED = CAST(@middlenm AS char(1))
			END

		UPDATE IMS.EF2_PersonQuery
			SET middlenm = @middlenm_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @postalplusfourcd <> ''
	BEGIN
		DECLARE @postalplusfourcd_CASTED varchar(9)
		IF @postalplusfourcd = '^'
			BEGIN
				SET @postalplusfourcd_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @postalplusfourcd_CASTED = CAST(@postalplusfourcd AS varchar(9))
			END

		UPDATE IMS.EF2_PersonQuery
			SET postalplusfourcd = @postalplusfourcd_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @statecd <> ''
	BEGIN
		DECLARE @statecd_CASTED char(2)
		IF @statecd = '^'
			BEGIN
				SET @statecd_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @statecd_CASTED = CAST(@statecd AS char(2))
			END

		UPDATE IMS.EF2_PersonQuery
			SET statecd = @statecd_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @streetaddresstxt <> ''
	BEGIN
		DECLARE @streetaddresstxt_CASTED varchar(25)
		IF @streetaddresstxt = '^'
			BEGIN
				SET @streetaddresstxt_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @streetaddresstxt_CASTED = CAST(@streetaddresstxt AS varchar(25))
			END

		UPDATE IMS.EF2_PersonQuery
			SET streetaddresstxt = @streetaddresstxt_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @userdefinedrecordtxt <> ''
	BEGIN
		DECLARE @userdefinedrecordtxt_CASTED varchar(60)
		IF @userdefinedrecordtxt = '^'
			BEGIN
				SET @userdefinedrecordtxt_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @userdefinedrecordtxt_CASTED = CAST(@userdefinedrecordtxt AS varchar(60))
			END

		UPDATE IMS.EF2_PersonQuery
			SET userdefinedrecordtxt = @userdefinedrecordtxt_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_ProductOffer_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_ProductOffer_Delete]
	@Sequence smallint,
	@TrackingNum int
AS

DELETE FROM IMS.EF2_ProductOffer
WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_ProductOffer_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_ProductOffer_DeleteAll]
	@Sequence smallint,
	@TrackingNum int
AS

DELETE FROM IMS.EF2_ProductOffer
WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_ProductOffer_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_ProductOffer_Insert]
	@Sequence smallint,
	@productofferlimitamt varchar(11),
	@productoffertxt varchar(32),
	@productpfferratepct varchar(5),
	@TrackingNum int
AS

INSERT INTO IMS.EF2_ProductOffer
(Sequence, TrackingNum, productofferlimitamt, productoffertxt, productpfferratepct)
VALUES
(@Sequence, @TrackingNum, @productofferlimitamt, @productoffertxt, @productpfferratepct)

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_ProductOffer_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_ProductOffer_InsertIfNew]
	@Sequence smallint,
	@productofferlimitamt varchar(11),
	@productoffertxt varchar(32),
	@productpfferratepct varchar(5),
	@TrackingNum int
AS

DECLARE @Count int
SELECT @Count = COUNT(productofferlimitamt) FROM IMS.EF2_ProductOffer WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum

IF @Count = 0
	BEGIN
		INSERT INTO IMS.EF2_ProductOffer
		(Sequence, TrackingNum, productofferlimitamt, productoffertxt, productpfferratepct)
		VALUES
		(@Sequence, @TrackingNum, @productofferlimitamt, @productoffertxt, @productpfferratepct)
	END
ELSE	BEGIN
		UPDATE IMS.EF2_ProductOffer SET
			productofferlimitamt = @productofferlimitamt,
			productoffertxt = @productoffertxt,
			productpfferratepct = @productpfferratepct
		WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_ProductOffer_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_ProductOffer_Select]
	@Sequence smallint,
	@TrackingNum int
AS

SELECT * FROM IMS.EF2_ProductOffer
WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
ORDER BY Sequence

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_ProductOffer_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_ProductOffer_SelectAll]
	@Sequence smallint,
	@TrackingNum int
AS

SELECT * FROM IMS.EF2_ProductOffer
WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
ORDER BY Sequence

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_ProductOffer_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_ProductOffer_Update]
	@Sequence smallint,
	@productofferlimitamt varchar(11),
	@productoffertxt varchar(32),
	@productpfferratepct varchar(5),
	@TrackingNum int
AS

IF @productofferlimitamt <> ''
	BEGIN
		DECLARE @productofferlimitamt_CASTED varchar(11)
		IF @productofferlimitamt = '^'
			BEGIN
				SET @productofferlimitamt_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @productofferlimitamt_CASTED = CAST(@productofferlimitamt AS varchar(11))
			END

		UPDATE IMS.EF2_ProductOffer
			SET productofferlimitamt = @productofferlimitamt_CASTED
		WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
	END

IF @productoffertxt <> ''
	BEGIN
		DECLARE @productoffertxt_CASTED varchar(32)
		IF @productoffertxt = '^'
			BEGIN
				SET @productoffertxt_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @productoffertxt_CASTED = CAST(@productoffertxt AS varchar(32))
			END

		UPDATE IMS.EF2_ProductOffer
			SET productoffertxt = @productoffertxt_CASTED
		WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
	END

IF @productpfferratepct <> ''
	BEGIN
		DECLARE @productpfferratepct_CASTED varchar(5)
		IF @productpfferratepct = '^'
			BEGIN
				SET @productpfferratepct_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @productpfferratepct_CASTED = CAST(@productpfferratepct AS varchar(5))
			END

		UPDATE IMS.EF2_ProductOffer
			SET productpfferratepct = @productpfferratepct_CASTED
		WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_QualiFileInformation_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_QualiFileInformation_Delete]
	@TrackingNum int
AS

DELETE FROM IMS.EF2_QualiFileInformation
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_QualiFileInformation_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_QualiFileInformation_DeleteAll]
	@TrackingNum int
AS

DELETE FROM IMS.EF2_QualiFileInformation
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_QualiFileInformation_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_QualiFileInformation_Insert]
	@scorenbr varchar(4),
	@TrackingNum int
AS

INSERT INTO IMS.EF2_QualiFileInformation
(TrackingNum, scorenbr)
VALUES
(@TrackingNum, @scorenbr)

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_QualiFileInformation_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_QualiFileInformation_InsertIfNew]
	@scorenbr varchar(4),
	@TrackingNum int
AS

DECLARE @Count int
SELECT @Count = COUNT(scorenbr) FROM IMS.EF2_QualiFileInformation WHERE 1=1 AND TrackingNum = @TrackingNum

IF @Count = 0
	BEGIN
		INSERT INTO IMS.EF2_QualiFileInformation
		(TrackingNum, scorenbr)
		VALUES
		(@TrackingNum, @scorenbr)
	END
ELSE	BEGIN
		UPDATE IMS.EF2_QualiFileInformation SET
			scorenbr = @scorenbr
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_QualiFileInformation_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_QualiFileInformation_Select]
	@TrackingNum int
AS

SELECT * FROM IMS.EF2_QualiFileInformation
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_QualiFileInformation_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_QualiFileInformation_SelectAll]
	@TrackingNum int
AS

SELECT * FROM IMS.EF2_QualiFileInformation
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_QualiFileInformation_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_QualiFileInformation_Update]
	@scorenbr varchar(4),
	@TrackingNum int
AS

IF @scorenbr <> ''
	BEGIN
		DECLARE @scorenbr_CASTED varchar(4)
		IF @scorenbr = '^'
			BEGIN
				SET @scorenbr_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @scorenbr_CASTED = CAST(@scorenbr AS varchar(4))
			END

		UPDATE IMS.EF2_QualiFileInformation
			SET scorenbr = @scorenbr_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_QualiFileReason_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_QualiFileReason_Delete]
	@Sequence smallint,
	@TrackingNum int
AS

DELETE FROM IMS.EF2_QualiFileReason
WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_QualiFileReason_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_QualiFileReason_DeleteAll]
	@Sequence smallint,
	@TrackingNum int
AS

DELETE FROM IMS.EF2_QualiFileReason
WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_QualiFileReason_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_QualiFileReason_Insert]
	@Sequence smallint,
	@reasoncd varchar(2),
	@reasontxt varchar(60),
	@TrackingNum int
AS

INSERT INTO IMS.EF2_QualiFileReason
(Sequence, TrackingNum, reasoncd, reasontxt)
VALUES
(@Sequence, @TrackingNum, @reasoncd, @reasontxt)

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_QualiFileReason_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_QualiFileReason_InsertIfNew]
	@Sequence smallint,
	@reasoncd varchar(2),
	@reasontxt varchar(60),
	@TrackingNum int
AS

DECLARE @Count int
SELECT @Count = COUNT(reasoncd) FROM IMS.EF2_QualiFileReason WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum

IF @Count = 0
	BEGIN
		INSERT INTO IMS.EF2_QualiFileReason
		(Sequence, TrackingNum, reasoncd, reasontxt)
		VALUES
		(@Sequence, @TrackingNum, @reasoncd, @reasontxt)
	END
ELSE	BEGIN
		UPDATE IMS.EF2_QualiFileReason SET
			reasoncd = @reasoncd,
			reasontxt = @reasontxt
		WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_QualiFileReason_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_QualiFileReason_Select]
	@Sequence smallint,
	@TrackingNum int
AS

SELECT * FROM IMS.EF2_QualiFileReason
WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_QualiFileReason_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_QualiFileReason_SelectAll]
	@Sequence smallint,
	@TrackingNum int
AS

SELECT * FROM IMS.EF2_QualiFileReason
WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_QualiFileReason_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_QualiFileReason_Update]
	@Sequence smallint,
	@reasoncd varchar(2),
	@reasontxt varchar(60),
	@TrackingNum int
AS

IF @reasoncd <> ''
	BEGIN
		DECLARE @reasoncd_CASTED varchar(2)
		IF @reasoncd = '^'
			BEGIN
				SET @reasoncd_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @reasoncd_CASTED = CAST(@reasoncd AS varchar(2))
			END

		UPDATE IMS.EF2_QualiFileReason
			SET reasoncd = @reasoncd_CASTED
		WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
	END

IF @reasontxt <> ''
	BEGIN
		DECLARE @reasontxt_CASTED varchar(60)
		IF @reasontxt = '^'
			BEGIN
				SET @reasontxt_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @reasontxt_CASTED = CAST(@reasontxt AS varchar(60))
			END

		UPDATE IMS.EF2_QualiFileReason
			SET reasontxt = @reasontxt_CASTED
		WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_QualiFileResponse_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_QualiFileResponse_Delete]
	@TrackingNum int
AS

DELETE FROM IMS.EF2_QualifileResponse
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_QualiFileResponse_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_QualiFileResponse_DeleteAll]
	@TrackingNum int
AS

DELETE FROM IMS.EF2_QualifileResponse
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_QualiFileResponse_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_QualiFileResponse_Insert]
	@errorcd varchar(4),
	@errorInformation text,
	@errortxt varchar(512),
	@qualifilenotperformedcd char(1),
	@TrackingNum int
AS

INSERT INTO IMS.EF2_QualifileResponse
(TrackingNum, errorcd, errorInformation, errortxt, qualifilenotperformedcd)
VALUES
(@TrackingNum, @errorcd, @errorInformation, @errortxt, @qualifilenotperformedcd)

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_QualiFileResponse_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_QualiFileResponse_InsertIfNew]
	@errorcd varchar(4),
	@errorInformation text,
	@errortxt varchar(512),
	@qualifilenotperformedcd char(1),
	@TrackingNum int
AS

DECLARE @Count int
SELECT @Count = COUNT(errorcd) FROM IMS.EF2_QualifileResponse WHERE 1=1 AND TrackingNum = @TrackingNum

IF @Count = 0
	BEGIN
		INSERT INTO IMS.EF2_QualifileResponse
		(TrackingNum, errorcd, errorInformation, errortxt, qualifilenotperformedcd)
		VALUES
		(@TrackingNum, @errorcd, @errorInformation, @errortxt, @qualifilenotperformedcd)
	END
ELSE	BEGIN
		UPDATE IMS.EF2_QualifileResponse SET
			errorcd = @errorcd,
			errorInformation = @errorInformation,
			errortxt = @errortxt,
			qualifilenotperformedcd = @qualifilenotperformedcd
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_QualiFileResponse_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_QualiFileResponse_Select]
	@TrackingNum int
AS

SELECT * FROM IMS.EF2_QualifileResponse
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_QualiFileResponse_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_QualiFileResponse_SelectAll]
	@TrackingNum int
AS

SELECT * FROM IMS.EF2_QualifileResponse
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_QualiFileResponse_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_QualiFileResponse_Update]
	@errorcd varchar(4),
	@errorInformation text,
	@errortxt varchar(512),
	@qualifilenotperformedcd varchar(1),
	@TrackingNum int
AS

IF @errorcd <> ''
	BEGIN
		DECLARE @errorcd_CASTED varchar(4)
		IF @errorcd = '^'
			BEGIN
				SET @errorcd_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @errorcd_CASTED = CAST(@errorcd AS varchar(4))
			END

		UPDATE IMS.EF2_QualifileResponse
			SET errorcd = @errorcd_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF CAST(@errorInformation AS varchar(100)) <> ''
	BEGIN
		IF CAST(@errorInformation AS varchar(100)) = '^'
			BEGIN
				UPDATE IMS.EF2_QualifileResponse
					SET errorInformation = NULL
				WHERE 1=1 AND TrackingNum = @TrackingNum
			END
		ELSE
			BEGIN
				UPDATE IMS.EF2_QualifileResponse
					SET errorInformation = @errorInformation
				WHERE 1=1 AND TrackingNum = @TrackingNum
			END

	END

IF @errortxt <> ''
	BEGIN
		DECLARE @errortxt_CASTED varchar(512)
		IF @errortxt = '^'
			BEGIN
				SET @errortxt_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @errortxt_CASTED = CAST(@errortxt AS varchar(512))
			END

		UPDATE IMS.EF2_QualifileResponse
			SET errortxt = @errortxt_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @qualifilenotperformedcd <> ''
	BEGIN
		DECLARE @qualifilenotperformedcd_CASTED char(1)
		IF @qualifilenotperformedcd = '^'
			BEGIN
				SET @qualifilenotperformedcd_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @qualifilenotperformedcd_CASTED = CAST(@qualifilenotperformedcd AS char(1))
			END

		UPDATE IMS.EF2_QualifileResponse
			SET qualifilenotperformedcd = @qualifilenotperformedcd_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_ReferenceInformation_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_ReferenceInformation_Delete]
	@TrackingNum int
AS

DELETE FROM IMS.EF2_ReferenceInformation
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_ReferenceInformation_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_ReferenceInformation_DeleteAll]
	@TrackingNum int
AS

DELETE FROM IMS.EF2_ReferenceInformation
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_ReferenceInformation_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_ReferenceInformation_Insert]
	@consumerdetailreferencenbr varchar(12),
	@creditbureauid varchar(3),
	@creditbureaureferencenbr varchar(19),
	@householdclustercategorycd varchar(6),
	@zipclustercategorycd varchar(6),
	@TrackingNum int
AS

INSERT INTO IMS.EF2_ReferenceInformation
(TrackingNum, consumerdetailreferencenbr, creditbureauid, creditbureaureferencenbr, householdclustercategorycd, zipclustercategorycd)
VALUES
(@TrackingNum, @consumerdetailreferencenbr, @creditbureauid, @creditbureaureferencenbr, @householdclustercategorycd, @zipclustercategorycd)

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_ReferenceInformation_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_ReferenceInformation_InsertIfNew]
	@consumerdetailreferencenbr varchar(12),
	@creditbureauid varchar(3),
	@creditbureaureferencenbr varchar(19),
	@householdclustercategorycd varchar(6),
	@zipclustercategorycd varchar(6),
	@TrackingNum int
AS

DECLARE @Count int
SELECT @Count = COUNT(consumerdetailreferencenbr) FROM IMS.EF2_ReferenceInformation WHERE 1=1 AND TrackingNum = @TrackingNum

IF @Count = 0
	BEGIN
		INSERT INTO IMS.EF2_ReferenceInformation
		(TrackingNum, consumerdetailreferencenbr, creditbureauid, creditbureaureferencenbr, householdclustercategorycd, zipclustercategorycd)
		VALUES
		(@TrackingNum, @consumerdetailreferencenbr, @creditbureauid, @creditbureaureferencenbr, @householdclustercategorycd, @zipclustercategorycd)
	END
ELSE	BEGIN
		UPDATE IMS.EF2_ReferenceInformation SET
			consumerdetailreferencenbr = @consumerdetailreferencenbr,
			creditbureauid = @creditbureauid,
			creditbureaureferencenbr = @creditbureaureferencenbr,
			householdclustercategorycd = @householdclustercategorycd,
			zipclustercategorycd = @zipclustercategorycd
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_ReferenceInformation_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_ReferenceInformation_Select]
	@TrackingNum int
AS

SELECT * FROM IMS.EF2_ReferenceInformation
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_ReferenceInformation_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_ReferenceInformation_SelectAll]
	@TrackingNum int
AS

SELECT * FROM IMS.EF2_ReferenceInformation
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_ReferenceInformation_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_ReferenceInformation_Update]
	@consumerdetailreferencenbr varchar(12),
	@creditbureauid varchar(3),
	@creditbureaureferencenbr varchar(19),
	@householdclustercategorycd varchar(6),
	@zipclustercategorycd varchar(6),
	@TrackingNum int
AS

IF @consumerdetailreferencenbr <> ''
	BEGIN
		DECLARE @consumerdetailreferencenbr_CASTED varchar(12)
		IF @consumerdetailreferencenbr = '^'
			BEGIN
				SET @consumerdetailreferencenbr_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @consumerdetailreferencenbr_CASTED = CAST(@consumerdetailreferencenbr AS varchar(12))
			END

		UPDATE IMS.EF2_ReferenceInformation
			SET consumerdetailreferencenbr = @consumerdetailreferencenbr_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @creditbureauid <> ''
	BEGIN
		DECLARE @creditbureauid_CASTED varchar(3)
		IF @creditbureauid = '^'
			BEGIN
				SET @creditbureauid_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @creditbureauid_CASTED = CAST(@creditbureauid AS varchar(3))
			END

		UPDATE IMS.EF2_ReferenceInformation
			SET creditbureauid = @creditbureauid_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @creditbureaureferencenbr <> ''
	BEGIN
		DECLARE @creditbureaureferencenbr_CASTED varchar(19)
		IF @creditbureaureferencenbr = '^'
			BEGIN
				SET @creditbureaureferencenbr_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @creditbureaureferencenbr_CASTED = CAST(@creditbureaureferencenbr AS varchar(19))
			END

		UPDATE IMS.EF2_ReferenceInformation
			SET creditbureaureferencenbr = @creditbureaureferencenbr_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @householdclustercategorycd <> ''
	BEGIN
		DECLARE @householdclustercategorycd_CASTED varchar(6)
		IF @householdclustercategorycd = '^'
			BEGIN
				SET @householdclustercategorycd_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @householdclustercategorycd_CASTED = CAST(@householdclustercategorycd AS varchar(6))
			END

		UPDATE IMS.EF2_ReferenceInformation
			SET householdclustercategorycd = @householdclustercategorycd_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @zipclustercategorycd <> ''
	BEGIN
		DECLARE @zipclustercategorycd_CASTED varchar(6)
		IF @zipclustercategorycd = '^'
			BEGIN
				SET @zipclustercategorycd_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @zipclustercategorycd_CASTED = CAST(@zipclustercategorycd AS varchar(6))
			END

		UPDATE IMS.EF2_ReferenceInformation
			SET zipclustercategorycd = @zipclustercategorycd_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_ReportReply_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_ReportReply_Delete]
	@TrackingNum int
AS

DELETE FROM IMS.EF2_ReportReply
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_ReportReply_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_ReportReply_DeleteAll]
	@TrackingNum int
AS

DELETE FROM IMS.EF2_ReportReply
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_ReportReply_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_ReportReply_Insert]
	@addressOK char(1),
	@chexid varchar(256),
	@deceased char(1),
	@dlOK char(1),
	@dobOK char(1),
	@dobafterssndate char(1),
	@errortxt varchar(512),
	@idOK char(1),
	@idcheckhadrecords char(1),
	@idvoid int,
	@idvpassed char(1),
	@nameOK char(1),
	@ofacHIT char(1),
	@ofacfailed char(1),
	@ofacoid int,
	@phoneOK char(1),
	@pleasecallcd char(1),
	@ssnOK char(1),
	@txtreport text,
	@underage char(1),
	@userdefinedtransactiontxt char(512),
	@TrackingNum int
AS

INSERT INTO IMS.EF2_ReportReply
(TrackingNum, addressOK, chexid, deceased, dlOK, dobOK, dobafterssndate, errortxt, idOK, idcheckhadrecords, idvoid, idvpassed, nameOK, ofacHIT, ofacfailed, ofacoid, phoneOK, pleasecallcd, ssnOK, txtreport, underage, userdefinedtransactiontxt)
VALUES
(@TrackingNum, @addressOK, @chexid, @deceased, @dlOK, @dobOK, @dobafterssndate, @errortxt, @idOK, @idcheckhadrecords, @idvoid, @idvpassed, @nameOK, @ofacHIT, @ofacfailed, @ofacoid, @phoneOK, @pleasecallcd, @ssnOK, @txtreport, @underage, @userdefinedtransactiontxt)

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_ReportReply_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_ReportReply_InsertIfNew]
	@addressOK char(1),
	@chexid varchar(256),
	@deceased char(1),
	@dlOK char(1),
	@dobOK char(1),
	@dobafterssndate char(1),
	@errortxt varchar(512),
	@idOK char(1),
	@idcheckhadrecords char(1),
	@idvoid int,
	@idvpassed char(1),
	@nameOK char(1),
	@ofacHIT char(1),
	@ofacfailed char(1),
	@ofacoid int,
	@phoneOK char(1),
	@pleasecallcd char(1),
	@ssnOK char(1),
	@txtreport text,
	@underage char(1),
	@userdefinedtransactiontxt char(512),
	@TrackingNum int
AS

DECLARE @Count int
SELECT @Count = COUNT(addressOK) FROM IMS.EF2_ReportReply WHERE 1=1 AND TrackingNum = @TrackingNum

IF @Count = 0
	BEGIN
		INSERT INTO IMS.EF2_ReportReply
		(TrackingNum, addressOK, chexid, deceased, dlOK, dobOK, dobafterssndate, errortxt, idOK, idcheckhadrecords, idvoid, idvpassed, nameOK, ofacHIT, ofacfailed, ofacoid, phoneOK, pleasecallcd, ssnOK, txtreport, underage, userdefinedtransactiontxt)
		VALUES
		(@TrackingNum, @addressOK, @chexid, @deceased, @dlOK, @dobOK, @dobafterssndate, @errortxt, @idOK, @idcheckhadrecords, @idvoid, @idvpassed, @nameOK, @ofacHIT, @ofacfailed, @ofacoid, @phoneOK, @pleasecallcd, @ssnOK, @txtreport, @underage, @userdefinedtransactiontxt)
	END
ELSE	BEGIN
		UPDATE IMS.EF2_ReportReply SET
			addressOK = @addressOK,
			chexid = @chexid,
			deceased = @deceased,
			dlOK = @dlOK,
			dobOK = @dobOK,
			dobafterssndate = @dobafterssndate,
			errortxt = @errortxt,
			idOK = @idOK,
			idcheckhadrecords = @idcheckhadrecords,
			idvoid = @idvoid,
			idvpassed = @idvpassed,
			nameOK = @nameOK,
			ofacHIT = @ofacHIT,
			ofacfailed = @ofacfailed,
			ofacoid = @ofacoid,
			phoneOK = @phoneOK,
			pleasecallcd = @pleasecallcd,
			ssnOK = @ssnOK,
			txtreport = @txtreport,
			underage = @underage,
			userdefinedtransactiontxt = @userdefinedtransactiontxt
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_ReportReply_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_ReportReply_Select]
	@TrackingNum int
AS

SELECT * FROM IMS.EF2_ReportReply
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_ReportReply_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_ReportReply_SelectAll]
	@TrackingNum int
AS

SELECT * FROM IMS.EF2_ReportReply
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_ReportReply_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_ReportReply_Update]
	@addressOK varchar(1),
	@chexid varchar(256),
	@deceased varchar(1),
	@dlOK varchar(1),
	@dobOK varchar(1),
	@dobafterssndate varchar(1),
	@errortxt varchar(512),
	@idOK varchar(1),
	@idcheckhadrecords varchar(1),
	@idvoid varchar(100),
	@idvpassed varchar(1),
	@nameOK varchar(1),
	@ofacHIT varchar(1),
	@ofacfailed varchar(1),
	@ofacoid varchar(100),
	@phoneOK varchar(1),
	@pleasecallcd varchar(1),
	@ssnOK varchar(1),
	@txtreport text,
	@underage varchar(1),
	@userdefinedtransactiontxt varchar(512),
	@TrackingNum int
AS

IF @addressOK <> ''
	BEGIN
		DECLARE @addressOK_CASTED char(1)
		IF @addressOK = '^'
			BEGIN
				SET @addressOK_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @addressOK_CASTED = CAST(@addressOK AS char(1))
			END

		UPDATE IMS.EF2_ReportReply
			SET addressOK = @addressOK_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @chexid <> ''
	BEGIN
		DECLARE @chexid_CASTED varchar(256)
		IF @chexid = '^'
			BEGIN
				SET @chexid_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @chexid_CASTED = CAST(@chexid AS varchar(256))
			END

		UPDATE IMS.EF2_ReportReply
			SET chexid = @chexid_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @deceased <> ''
	BEGIN
		DECLARE @deceased_CASTED char(1)
		IF @deceased = '^'
			BEGIN
				SET @deceased_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @deceased_CASTED = CAST(@deceased AS char(1))
			END

		UPDATE IMS.EF2_ReportReply
			SET deceased = @deceased_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @dlOK <> ''
	BEGIN
		DECLARE @dlOK_CASTED char(1)
		IF @dlOK = '^'
			BEGIN
				SET @dlOK_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @dlOK_CASTED = CAST(@dlOK AS char(1))
			END

		UPDATE IMS.EF2_ReportReply
			SET dlOK = @dlOK_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @dobOK <> ''
	BEGIN
		DECLARE @dobOK_CASTED char(1)
		IF @dobOK = '^'
			BEGIN
				SET @dobOK_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @dobOK_CASTED = CAST(@dobOK AS char(1))
			END

		UPDATE IMS.EF2_ReportReply
			SET dobOK = @dobOK_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @dobafterssndate <> ''
	BEGIN
		DECLARE @dobafterssndate_CASTED char(1)
		IF @dobafterssndate = '^'
			BEGIN
				SET @dobafterssndate_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @dobafterssndate_CASTED = CAST(@dobafterssndate AS char(1))
			END

		UPDATE IMS.EF2_ReportReply
			SET dobafterssndate = @dobafterssndate_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @errortxt <> ''
	BEGIN
		DECLARE @errortxt_CASTED varchar(512)
		IF @errortxt = '^'
			BEGIN
				SET @errortxt_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @errortxt_CASTED = CAST(@errortxt AS varchar(512))
			END

		UPDATE IMS.EF2_ReportReply
			SET errortxt = @errortxt_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @idOK <> ''
	BEGIN
		DECLARE @idOK_CASTED char(1)
		IF @idOK = '^'
			BEGIN
				SET @idOK_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @idOK_CASTED = CAST(@idOK AS char(1))
			END

		UPDATE IMS.EF2_ReportReply
			SET idOK = @idOK_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @idcheckhadrecords <> ''
	BEGIN
		DECLARE @idcheckhadrecords_CASTED char(1)
		IF @idcheckhadrecords = '^'
			BEGIN
				SET @idcheckhadrecords_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @idcheckhadrecords_CASTED = CAST(@idcheckhadrecords AS char(1))
			END

		UPDATE IMS.EF2_ReportReply
			SET idcheckhadrecords = @idcheckhadrecords_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @idvoid <> ''
	BEGIN
		DECLARE @idvoid_CASTED int
		IF @idvoid = '^'
			BEGIN
				SET @idvoid_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @idvoid_CASTED = CAST(@idvoid AS int)
			END

		UPDATE IMS.EF2_ReportReply
			SET idvoid = @idvoid_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @idvpassed <> ''
	BEGIN
		DECLARE @idvpassed_CASTED char(1)
		IF @idvpassed = '^'
			BEGIN
				SET @idvpassed_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @idvpassed_CASTED = CAST(@idvpassed AS char(1))
			END

		UPDATE IMS.EF2_ReportReply
			SET idvpassed = @idvpassed_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @nameOK <> ''
	BEGIN
		DECLARE @nameOK_CASTED char(1)
		IF @nameOK = '^'
			BEGIN
				SET @nameOK_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @nameOK_CASTED = CAST(@nameOK AS char(1))
			END

		UPDATE IMS.EF2_ReportReply
			SET nameOK = @nameOK_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @ofacHIT <> ''
	BEGIN
		DECLARE @ofacHIT_CASTED char(1)
		IF @ofacHIT = '^'
			BEGIN
				SET @ofacHIT_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ofacHIT_CASTED = CAST(@ofacHIT AS char(1))
			END

		UPDATE IMS.EF2_ReportReply
			SET ofacHIT = @ofacHIT_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @ofacfailed <> ''
	BEGIN
		DECLARE @ofacfailed_CASTED char(1)
		IF @ofacfailed = '^'
			BEGIN
				SET @ofacfailed_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ofacfailed_CASTED = CAST(@ofacfailed AS char(1))
			END

		UPDATE IMS.EF2_ReportReply
			SET ofacfailed = @ofacfailed_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @ofacoid <> ''
	BEGIN
		DECLARE @ofacoid_CASTED int
		IF @ofacoid = '^'
			BEGIN
				SET @ofacoid_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ofacoid_CASTED = CAST(@ofacoid AS int)
			END

		UPDATE IMS.EF2_ReportReply
			SET ofacoid = @ofacoid_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @phoneOK <> ''
	BEGIN
		DECLARE @phoneOK_CASTED char(1)
		IF @phoneOK = '^'
			BEGIN
				SET @phoneOK_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @phoneOK_CASTED = CAST(@phoneOK AS char(1))
			END

		UPDATE IMS.EF2_ReportReply
			SET phoneOK = @phoneOK_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @pleasecallcd <> ''
	BEGIN
		DECLARE @pleasecallcd_CASTED char(1)
		IF @pleasecallcd = '^'
			BEGIN
				SET @pleasecallcd_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @pleasecallcd_CASTED = CAST(@pleasecallcd AS char(1))
			END

		UPDATE IMS.EF2_ReportReply
			SET pleasecallcd = @pleasecallcd_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @ssnOK <> ''
	BEGIN
		DECLARE @ssnOK_CASTED char(1)
		IF @ssnOK = '^'
			BEGIN
				SET @ssnOK_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ssnOK_CASTED = CAST(@ssnOK AS char(1))
			END

		UPDATE IMS.EF2_ReportReply
			SET ssnOK = @ssnOK_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF CAST(@txtreport AS varchar(100)) <> ''
	BEGIN
		IF CAST(@txtreport AS varchar(100)) = '^'
			BEGIN
				UPDATE IMS.EF2_ReportReply
					SET txtreport = NULL
				WHERE 1=1 AND TrackingNum = @TrackingNum
			END
		ELSE
			BEGIN
				UPDATE IMS.EF2_ReportReply
					SET txtreport = @txtreport
				WHERE 1=1 AND TrackingNum = @TrackingNum
			END

	END

IF @underage <> ''
	BEGIN
		DECLARE @underage_CASTED char(1)
		IF @underage = '^'
			BEGIN
				SET @underage_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @underage_CASTED = CAST(@underage AS char(1))
			END

		UPDATE IMS.EF2_ReportReply
			SET underage = @underage_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @userdefinedtransactiontxt <> ''
	BEGIN
		DECLARE @userdefinedtransactiontxt_CASTED char(512)
		IF @userdefinedtransactiontxt = '^'
			BEGIN
				SET @userdefinedtransactiontxt_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @userdefinedtransactiontxt_CASTED = CAST(@userdefinedtransactiontxt AS char(512))
			END

		UPDATE IMS.EF2_ReportReply
			SET userdefinedtransactiontxt = @userdefinedtransactiontxt_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_RiskMapping_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_RiskMapping_Delete]
	@DefaultsID int,
	@BranchID int,
	@AccountType char(2)
AS

DELETE FROM EF2_RiskMapping
WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_RiskMapping_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_RiskMapping_DeleteAll]
	@DefaultsID int,
	@BranchID int,
	@AccountType char(2)
AS

DELETE FROM EF2_RiskMapping
WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_RiskMapping_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_RiskMapping_Insert]
	@Sequence smallint,
	@MicrMatchRequired char(1),
	@MinimumOtherMatches smallint,
	@MinRiskScore smallint,
	@MaxRiskScore smallint,
	@AccountClosed char(1),
	@ApprovalType char(1),
	@ApprovalAmount int,
	@AccountAcceptText char(10),
	@DefaultsID int,
	@BranchID int,
	@AccountType char(2)
AS

INSERT INTO EF2_RiskMapping
(DefaultsID, BranchID, AccountType, Sequence, MicrMatchRequired, MinimumOtherMatches, MinRiskScore, MaxRiskScore, AccountClosed, ApprovalType, ApprovalAmount, AccountAcceptText)
VALUES
(@DefaultsID, @BranchID, @AccountType, @Sequence, @MicrMatchRequired, @MinimumOtherMatches, @MinRiskScore, @MaxRiskScore, @AccountClosed, @ApprovalType, @ApprovalAmount, @AccountAcceptText)

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_RiskMapping_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_RiskMapping_InsertIfNew]
	@Sequence smallint,
	@MicrMatchRequired char(1),
	@MinimumOtherMatches smallint,
	@MinRiskScore smallint,
	@MaxRiskScore smallint,
	@AccountClosed char(1),
	@ApprovalType char(1),
	@ApprovalAmount int,
	@AccountAcceptText char(10),
	@DefaultsID int,
	@BranchID int,
	@AccountType char(2)
AS

DECLARE @Count int
SELECT @Count = COUNT(Sequence) FROM EF2_RiskMapping WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType

IF @Count = 0
	BEGIN
		INSERT INTO EF2_RiskMapping
		(DefaultsID, BranchID, AccountType, Sequence, MicrMatchRequired, MinimumOtherMatches, MinRiskScore, MaxRiskScore, AccountClosed, ApprovalType, ApprovalAmount, AccountAcceptText)
		VALUES
		(@DefaultsID, @BranchID, @AccountType, @Sequence, @MicrMatchRequired, @MinimumOtherMatches, @MinRiskScore, @MaxRiskScore, @AccountClosed, @ApprovalType, @ApprovalAmount, @AccountAcceptText)
	END
ELSE	BEGIN
		UPDATE EF2_RiskMapping SET
			Sequence = @Sequence,
			MicrMatchRequired = @MicrMatchRequired,
			MinimumOtherMatches = @MinimumOtherMatches,
			MinRiskScore = @MinRiskScore,
			MaxRiskScore = @MaxRiskScore,
			AccountClosed = @AccountClosed,
			ApprovalType = @ApprovalType,
			ApprovalAmount = @ApprovalAmount,
			AccountAcceptText = @AccountAcceptText
		WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_RiskMapping_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_RiskMapping_Select]
	@DefaultsID int,
	@BranchID int,
	@AccountType char(2)
AS

SELECT * FROM EF2_RiskMapping
WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType
ORDER BY Sequence

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_RiskMapping_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_RiskMapping_SelectAll]
	@DefaultsID int,
	@BranchID int,
	@AccountType char(2)
AS

SELECT * FROM EF2_RiskMapping
WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType
ORDER BY Sequence

GO
/****** Object:  StoredProcedure [IMS].[sp_eFunds2xlate_RiskMapping_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_eFunds2xlate_RiskMapping_Update]
	@Sequence varchar(100),
	@MicrMatchRequired varchar(1),
	@MinimumOtherMatches varchar(100),
	@MinRiskScore varchar(100),
	@MaxRiskScore varchar(100),
	@AccountClosed varchar(1),
	@ApprovalType varchar(1),
	@ApprovalAmount varchar(100),
	@AccountAcceptText varchar(10),
	@DefaultsID int,
	@BranchID int,
	@AccountType char(2)
AS

IF @Sequence <> ''
	BEGIN
		DECLARE @Sequence_CASTED smallint
		IF @Sequence = '^'
			BEGIN
				SET @Sequence_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Sequence_CASTED = CAST(@Sequence AS smallint)
			END

		UPDATE EF2_RiskMapping
			SET Sequence = @Sequence_CASTED
		WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType
	END

IF @MicrMatchRequired <> ''
	BEGIN
		DECLARE @MicrMatchRequired_CASTED char(1)
		IF @MicrMatchRequired = '^'
			BEGIN
				SET @MicrMatchRequired_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @MicrMatchRequired_CASTED = CAST(@MicrMatchRequired AS char(1))
			END

		UPDATE EF2_RiskMapping
			SET MicrMatchRequired = @MicrMatchRequired_CASTED
		WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType
	END

IF @MinimumOtherMatches <> ''
	BEGIN
		DECLARE @MinimumOtherMatches_CASTED smallint
		IF @MinimumOtherMatches = '^'
			BEGIN
				SET @MinimumOtherMatches_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @MinimumOtherMatches_CASTED = CAST(@MinimumOtherMatches AS smallint)
			END

		UPDATE EF2_RiskMapping
			SET MinimumOtherMatches = @MinimumOtherMatches_CASTED
		WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType
	END

IF @MinRiskScore <> ''
	BEGIN
		DECLARE @MinRiskScore_CASTED smallint
		IF @MinRiskScore = '^'
			BEGIN
				SET @MinRiskScore_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @MinRiskScore_CASTED = CAST(@MinRiskScore AS smallint)
			END

		UPDATE EF2_RiskMapping
			SET MinRiskScore = @MinRiskScore_CASTED
		WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType
	END

IF @MaxRiskScore <> ''
	BEGIN
		DECLARE @MaxRiskScore_CASTED smallint
		IF @MaxRiskScore = '^'
			BEGIN
				SET @MaxRiskScore_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @MaxRiskScore_CASTED = CAST(@MaxRiskScore AS smallint)
			END

		UPDATE EF2_RiskMapping
			SET MaxRiskScore = @MaxRiskScore_CASTED
		WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType
	END

IF @AccountClosed <> ''
	BEGIN
		DECLARE @AccountClosed_CASTED char(1)
		IF @AccountClosed = '^'
			BEGIN
				SET @AccountClosed_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @AccountClosed_CASTED = CAST(@AccountClosed AS char(1))
			END

		UPDATE EF2_RiskMapping
			SET AccountClosed = @AccountClosed_CASTED
		WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType
	END

IF @ApprovalType <> ''
	BEGIN
		DECLARE @ApprovalType_CASTED char(1)
		IF @ApprovalType = '^'
			BEGIN
				SET @ApprovalType_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ApprovalType_CASTED = CAST(@ApprovalType AS char(1))
			END

		UPDATE EF2_RiskMapping
			SET ApprovalType = @ApprovalType_CASTED
		WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType
	END

IF @ApprovalAmount <> ''
	BEGIN
		DECLARE @ApprovalAmount_CASTED int
		IF @ApprovalAmount = '^'
			BEGIN
				SET @ApprovalAmount_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ApprovalAmount_CASTED = CAST(@ApprovalAmount AS int)
			END

		UPDATE EF2_RiskMapping
			SET ApprovalAmount = @ApprovalAmount_CASTED
		WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType
	END

IF @AccountAcceptText <> ''
	BEGIN
		DECLARE @AccountAcceptText_CASTED char(10)
		IF @AccountAcceptText = '^'
			BEGIN
				SET @AccountAcceptText_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @AccountAcceptText_CASTED = CAST(@AccountAcceptText AS char(10))
			END

		UPDATE EF2_RiskMapping
			SET AccountAcceptText = @AccountAcceptText_CASTED
		WHERE 1=1 AND DefaultsID = @DefaultsID AND BranchID = @BranchID AND AccountType = @AccountType
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_Eligibility_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [IMS].[sp_Eligibility_Select]
	@ZipCode varchar(5),
	@CensusTract varchar(15)
AS
	DECLARE @ClientShortName varchar(10)
	SELECT @ClientShortName = ClientShortName from udt_ClientSettings

	--We are executing a string, so we have to verify that we are not executing SQL injection scripts. 
	--Because the short code is a defined value, and not a user input, we can check for ' or -- because these should never be in the name (because we control what this is). 
	--Normally I would recommend never ever ever (emphasize repeatedly) executing a string, but because our db is dristributed to client networks 
	--and we want to prevent passing other client names around, then this might be the one time that this actually makes sense to use. 
	if @ClientShortName IS NOT NULL AND CHARINDEX('''',@ClientShortName) = 0 AND CHARINDEX('--',@ClientShortName) = 0
	BEGIN
		DECLARE @ScaryExecutableString varchar(500)
		SET @ScaryExecutableString = N'IMS.sp' + @ClientShortName + '_Eligibility_Select'
		Exec @ScaryExecutableString @ZipCode, @CensusTract
	END	
GO
/****** Object:  StoredProcedure [IMS].[sp_Eligibilityxlate_Eligibility_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_Eligibilityxlate_Eligibility_Select]
	@ZipCode varchar(5),
	@CensusTract varchar(15)
AS

EXEC IMS.sp_Eligibility_Select @ZipCode, @CensusTract
GO
/****** Object:  StoredProcedure [IMS].[sp_Experian_Search]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[sp_Experian_Search]
	@SSN varchar(100),
	@OldestDate datetime
AS

SELECT * FROM ExperianCreditProfileReply
WHERE SSN = @SSN AND DatePulled >= @OldestDate
GO
/****** Object:  StoredProcedure [IMS].[sp_Experianxlate_Defaults_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_Experianxlate_Defaults_Delete]
	@DefaultsID int
AS

DELETE FROM ExperianDefaults
WHERE 1=1 AND DefaultsID = @DefaultsID

GO
/****** Object:  StoredProcedure [IMS].[sp_Experianxlate_Defaults_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_Experianxlate_Defaults_DeleteAll]
AS

DELETE FROM ExperianDefaults
WHERE 1=1

GO
/****** Object:  StoredProcedure [IMS].[sp_Experianxlate_Defaults_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_Experianxlate_Defaults_Insert]
	@DefaultsID int OUTPUT,
	@Name varchar(50),
	@FullURL varchar(200),
	@PasswordResetURL varchar(50),
	@PasswordResetURI varchar(50),
	@Username varchar(200),
	@Password varchar(200),
	@DateTimePasswordExpire datetime,
	@PasswordExpireDays int,
	@TTYHeading char(1),
	@ARFVersion char(2),
	@ARFParsed char(1),
	@ARFDemograhics char(1),
	@ARFY2K char(1),
	@ARFSegment130 char(1),
	@ParallelProfileFormatType char(1),
	@ParallelProfileHeading char(1),
	@VendorNumber varchar(3),
	@VendorVersion varchar(6),
	@OptionsJoint char(1),
	@OptionsReferenceNumber varchar(90),
	@OptionsEndUser varchar(30),
	@OptionsBrokerNumber varchar(10),
	@OptionsSB168 char(1),
	@OFACMSG char(1),
	@OFAC char(1),
	@EAI varchar(100),
	@DBHost varchar(100),
	@Preamble varchar(100),
	@SubCode varchar(100),
	@LockedOut char(1),
	@ECALSURL varchar(200),
	@AuthenticationFailure int
AS

INSERT INTO ExperianDefaults
(Name, FullURL, PasswordResetURL, PasswordResetURI, Username, Password, DateTimePasswordExpire, PasswordExpireDays, TTYHeading, ARFVersion, ARFParsed, ARFDemograhics, ARFY2K, ARFSegment130, ParallelProfileFormatType, ParallelProfileHeading, VendorNumber, VendorVersion, OptionsJoint, OptionsReferenceNumber, OptionsEndUser, OptionsBrokerNumber, OptionsSB168, OFACMSG, OFAC, EAI, DBHost, Preamble, SubCode, LockedOut, ECALSURL, AuthenticationFailure)
VALUES
(@Name, @FullURL, @PasswordResetURL, @PasswordResetURI, @Username, @Password, @DateTimePasswordExpire, @PasswordExpireDays, @TTYHeading, @ARFVersion, @ARFParsed, @ARFDemograhics, @ARFY2K, @ARFSegment130, @ParallelProfileFormatType, @ParallelProfileHeading, @VendorNumber, @VendorVersion, @OptionsJoint, @OptionsReferenceNumber, @OptionsEndUser, @OptionsBrokerNumber, @OptionsSB168, @OFACMSG, @OFAC, @EAI, @DBHost, @Preamble, @SubCode, @LockedOut, @ECALSURL, @AuthenticationFailure)

SELECT @DefaultsID = @@IDENTITY FROM ExperianDefaults

GO
/****** Object:  StoredProcedure [IMS].[sp_Experianxlate_Defaults_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_Experianxlate_Defaults_InsertIfNew]
	@DefaultsID int OUTPUT,
	@Name varchar(50),
	@FullURL varchar(200),
	@PasswordResetURL varchar(50),
	@PasswordResetURI varchar(50),
	@Username varchar(200),
	@Password varchar(200),
	@DateTimePasswordExpire datetime,
	@PasswordExpireDays int,
	@TTYHeading char(1),
	@ARFVersion char(2),
	@ARFParsed char(1),
	@ARFDemograhics char(1),
	@ARFY2K char(1),
	@ARFSegment130 char(1),
	@ParallelProfileFormatType char(1),
	@ParallelProfileHeading char(1),
	@VendorNumber varchar(3),
	@VendorVersion varchar(6),
	@OptionsJoint char(1),
	@OptionsReferenceNumber varchar(90),
	@OptionsEndUser varchar(30),
	@OptionsBrokerNumber varchar(10),
	@OptionsSB168 char(1),
	@OFACMSG char(1),
	@OFAC char(1),
	@EAI varchar(100),
	@DBHost varchar(100),
	@Preamble varchar(100),
	@SubCode varchar(100),
	@LockedOut char(1),
	@ECALSURL varchar(200),
	@AuthenticationFailure int
AS

DECLARE @Count int
SELECT @Count = COUNT(Name) FROM ExperianDefaults WHERE 1=1

IF @Count = 0
	BEGIN
		INSERT INTO ExperianDefaults
		(Name, FullURL, PasswordResetURL, PasswordResetURI, Username, Password, DateTimePasswordExpire, PasswordExpireDays, TTYHeading, ARFVersion, ARFParsed, ARFDemograhics, ARFY2K, ARFSegment130, ParallelProfileFormatType, ParallelProfileHeading, VendorNumber, VendorVersion, OptionsJoint, OptionsReferenceNumber, OptionsEndUser, OptionsBrokerNumber, OptionsSB168, OFACMSG, OFAC, EAI, DBHost, Preamble, SubCode, LockedOut, ECALSURL, AuthenticationFailure)
		VALUES
		(@Name, @FullURL, @PasswordResetURL, @PasswordResetURI, @Username, @Password, @DateTimePasswordExpire, @PasswordExpireDays, @TTYHeading, @ARFVersion, @ARFParsed, @ARFDemograhics, @ARFY2K, @ARFSegment130, @ParallelProfileFormatType, @ParallelProfileHeading, @VendorNumber, @VendorVersion, @OptionsJoint, @OptionsReferenceNumber, @OptionsEndUser, @OptionsBrokerNumber, @OptionsSB168, @OFACMSG, @OFAC, @EAI, @DBHost, @Preamble, @SubCode, @LockedOut, @ECALSURL, @AuthenticationFailure)

		SELECT @DefaultsID = @@IDENTITY FROM ExperianDefaults
	END
ELSE	BEGIN
		UPDATE ExperianDefaults SET
			Name = @Name,
			FullURL = @FullURL,
			PasswordResetURL = @PasswordResetURL,
			PasswordResetURI = @PasswordResetURI,
			Username = @Username,
			Password = @Password,
			DateTimePasswordExpire = @DateTimePasswordExpire,
			PasswordExpireDays = @PasswordExpireDays,
			TTYHeading = @TTYHeading,
			ARFVersion = @ARFVersion,
			ARFParsed = @ARFParsed,
			ARFDemograhics = @ARFDemograhics,
			ARFY2K = @ARFY2K,
			ARFSegment130 = @ARFSegment130,
			ParallelProfileFormatType = @ParallelProfileFormatType,
			ParallelProfileHeading = @ParallelProfileHeading,
			VendorNumber = @VendorNumber,
			VendorVersion = @VendorVersion,
			OptionsJoint = @OptionsJoint,
			OptionsReferenceNumber = @OptionsReferenceNumber,
			OptionsEndUser = @OptionsEndUser,
			OptionsBrokerNumber = @OptionsBrokerNumber,
			OptionsSB168 = @OptionsSB168,
			OFACMSG = @OFACMSG,
			OFAC = @OFAC,
			EAI = @EAI,
			DBHost = @DBHost,
			Preamble = @Preamble,
			SubCode = @SubCode,
			LockedOut = @LockedOut,
			ECALSURL = @ECALSURL,
			AuthenticationFailure = @AuthenticationFailure
		WHERE 1=1

		SELECT TOP 1 @DefaultsID = DefaultsID FROM ExperianDefaults
		WHERE 1=1
		ORDER BY DefaultsID DESC
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_Experianxlate_Defaults_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_Experianxlate_Defaults_Select]
	@DefaultsID int
AS

SELECT * FROM ExperianDefaults
WHERE 1=1 AND DefaultsID = @DefaultsID

GO
/****** Object:  StoredProcedure [IMS].[sp_Experianxlate_Defaults_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_Experianxlate_Defaults_SelectAll]
AS

SELECT * FROM ExperianDefaults
WHERE 1=1

GO
/****** Object:  StoredProcedure [IMS].[sp_Experianxlate_Defaults_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_Experianxlate_Defaults_Update]
	@DefaultsID int,
	@Name varchar(50),
	@FullURL varchar(200),
	@PasswordResetURL varchar(50),
	@PasswordResetURI varchar(50),
	@Username varchar(200),
	@Password varchar(200),
	@DateTimePasswordExpire varchar(100),
	@PasswordExpireDays varchar(100),
	@TTYHeading varchar(1),
	@ARFVersion varchar(2),
	@ARFParsed varchar(1),
	@ARFDemograhics varchar(1),
	@ARFY2K varchar(1),
	@ARFSegment130 varchar(1),
	@ParallelProfileFormatType varchar(1),
	@ParallelProfileHeading varchar(1),
	@VendorNumber varchar(3),
	@VendorVersion varchar(6),
	@OptionsJoint varchar(1),
	@OptionsReferenceNumber varchar(90),
	@OptionsEndUser varchar(30),
	@OptionsBrokerNumber varchar(10),
	@OptionsSB168 varchar(1),
	@OFACMSG varchar(1),
	@OFAC varchar(1),
	@EAI varchar(100),
	@DBHost varchar(100),
	@Preamble varchar(100),
	@SubCode varchar(100),
	@LockedOut varchar(1),
	@ECALSURL varchar(200),
	@AuthenticationFailure varchar(100)
AS

IF @Name <> ''
	BEGIN
		DECLARE @Name_CASTED varchar(50)
		IF @Name = '^'
			BEGIN
				SET @Name_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Name_CASTED = CAST(@Name AS varchar(50))
			END

		UPDATE ExperianDefaults
			SET Name = @Name_CASTED
		WHERE 1=1 AND DefaultsID = @DefaultsID
	END

IF @FullURL <> ''
	BEGIN
		DECLARE @FullURL_CASTED varchar(200)
		IF @FullURL = '^'
			BEGIN
				SET @FullURL_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @FullURL_CASTED = CAST(@FullURL AS varchar(200))
			END

		UPDATE ExperianDefaults
			SET FullURL = @FullURL_CASTED
		WHERE 1=1 AND DefaultsID = @DefaultsID
	END

IF @PasswordResetURL <> ''
	BEGIN
		DECLARE @PasswordResetURL_CASTED varchar(50)
		IF @PasswordResetURL = '^'
			BEGIN
				SET @PasswordResetURL_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @PasswordResetURL_CASTED = CAST(@PasswordResetURL AS varchar(50))
			END

		UPDATE ExperianDefaults
			SET PasswordResetURL = @PasswordResetURL_CASTED
		WHERE 1=1 AND DefaultsID = @DefaultsID
	END

IF @PasswordResetURI <> ''
	BEGIN
		DECLARE @PasswordResetURI_CASTED varchar(50)
		IF @PasswordResetURI = '^'
			BEGIN
				SET @PasswordResetURI_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @PasswordResetURI_CASTED = CAST(@PasswordResetURI AS varchar(50))
			END

		UPDATE ExperianDefaults
			SET PasswordResetURI = @PasswordResetURI_CASTED
		WHERE 1=1 AND DefaultsID = @DefaultsID
	END

IF @Username <> ''
	BEGIN
		DECLARE @Username_CASTED varchar(200)
		IF @Username = '^'
			BEGIN
				SET @Username_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Username_CASTED = CAST(@Username AS varchar(200))
			END

		UPDATE ExperianDefaults
			SET Username = @Username_CASTED
		WHERE 1=1 AND DefaultsID = @DefaultsID
	END

IF @Password <> ''
	BEGIN
		DECLARE @Password_CASTED varchar(200)
		IF @Password = '^'
			BEGIN
				SET @Password_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Password_CASTED = CAST(@Password AS varchar(200))
			END

		UPDATE ExperianDefaults
			SET Password = @Password_CASTED
		WHERE 1=1 AND DefaultsID = @DefaultsID
	END

IF @DateTimePasswordExpire <> ''
	BEGIN
		DECLARE @DateTimePasswordExpire_CASTED datetime
		IF @DateTimePasswordExpire = '^'
			BEGIN
				SET @DateTimePasswordExpire_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @DateTimePasswordExpire_CASTED = CAST(@DateTimePasswordExpire AS datetime)
			END

		UPDATE ExperianDefaults
			SET DateTimePasswordExpire = @DateTimePasswordExpire_CASTED
		WHERE 1=1 AND DefaultsID = @DefaultsID
	END

IF @PasswordExpireDays <> ''
	BEGIN
		DECLARE @PasswordExpireDays_CASTED int
		IF @PasswordExpireDays = '^'
			BEGIN
				SET @PasswordExpireDays_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @PasswordExpireDays_CASTED = CAST(@PasswordExpireDays AS int)
			END

		UPDATE ExperianDefaults
			SET PasswordExpireDays = @PasswordExpireDays_CASTED
		WHERE 1=1 AND DefaultsID = @DefaultsID
	END

IF @TTYHeading <> ''
	BEGIN
		DECLARE @TTYHeading_CASTED char(1)
		IF @TTYHeading = '^'
			BEGIN
				SET @TTYHeading_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @TTYHeading_CASTED = CAST(@TTYHeading AS char(1))
			END

		UPDATE ExperianDefaults
			SET TTYHeading = @TTYHeading_CASTED
		WHERE 1=1 AND DefaultsID = @DefaultsID
	END

IF @ARFVersion <> ''
	BEGIN
		DECLARE @ARFVersion_CASTED char(2)
		IF @ARFVersion = '^'
			BEGIN
				SET @ARFVersion_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ARFVersion_CASTED = CAST(@ARFVersion AS char(2))
			END

		UPDATE ExperianDefaults
			SET ARFVersion = @ARFVersion_CASTED
		WHERE 1=1 AND DefaultsID = @DefaultsID
	END

IF @ARFParsed <> ''
	BEGIN
		DECLARE @ARFParsed_CASTED char(1)
		IF @ARFParsed = '^'
			BEGIN
				SET @ARFParsed_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ARFParsed_CASTED = CAST(@ARFParsed AS char(1))
			END

		UPDATE ExperianDefaults
			SET ARFParsed = @ARFParsed_CASTED
		WHERE 1=1 AND DefaultsID = @DefaultsID
	END

IF @ARFDemograhics <> ''
	BEGIN
		DECLARE @ARFDemograhics_CASTED char(1)
		IF @ARFDemograhics = '^'
			BEGIN
				SET @ARFDemograhics_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ARFDemograhics_CASTED = CAST(@ARFDemograhics AS char(1))
			END

		UPDATE ExperianDefaults
			SET ARFDemograhics = @ARFDemograhics_CASTED
		WHERE 1=1 AND DefaultsID = @DefaultsID
	END

IF @ARFY2K <> ''
	BEGIN
		DECLARE @ARFY2K_CASTED char(1)
		IF @ARFY2K = '^'
			BEGIN
				SET @ARFY2K_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ARFY2K_CASTED = CAST(@ARFY2K AS char(1))
			END

		UPDATE ExperianDefaults
			SET ARFY2K = @ARFY2K_CASTED
		WHERE 1=1 AND DefaultsID = @DefaultsID
	END

IF @ARFSegment130 <> ''
	BEGIN
		DECLARE @ARFSegment130_CASTED char(1)
		IF @ARFSegment130 = '^'
			BEGIN
				SET @ARFSegment130_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ARFSegment130_CASTED = CAST(@ARFSegment130 AS char(1))
			END

		UPDATE ExperianDefaults
			SET ARFSegment130 = @ARFSegment130_CASTED
		WHERE 1=1 AND DefaultsID = @DefaultsID
	END

IF @ParallelProfileFormatType <> ''
	BEGIN
		DECLARE @ParallelProfileFormatType_CASTED char(1)
		IF @ParallelProfileFormatType = '^'
			BEGIN
				SET @ParallelProfileFormatType_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ParallelProfileFormatType_CASTED = CAST(@ParallelProfileFormatType AS char(1))
			END

		UPDATE ExperianDefaults
			SET ParallelProfileFormatType = @ParallelProfileFormatType_CASTED
		WHERE 1=1 AND DefaultsID = @DefaultsID
	END

IF @ParallelProfileHeading <> ''
	BEGIN
		DECLARE @ParallelProfileHeading_CASTED char(1)
		IF @ParallelProfileHeading = '^'
			BEGIN
				SET @ParallelProfileHeading_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ParallelProfileHeading_CASTED = CAST(@ParallelProfileHeading AS char(1))
			END

		UPDATE ExperianDefaults
			SET ParallelProfileHeading = @ParallelProfileHeading_CASTED
		WHERE 1=1 AND DefaultsID = @DefaultsID
	END

IF @VendorNumber <> ''
	BEGIN
		DECLARE @VendorNumber_CASTED varchar(3)
		IF @VendorNumber = '^'
			BEGIN
				SET @VendorNumber_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @VendorNumber_CASTED = CAST(@VendorNumber AS varchar(3))
			END

		UPDATE ExperianDefaults
			SET VendorNumber = @VendorNumber_CASTED
		WHERE 1=1 AND DefaultsID = @DefaultsID
	END

IF @VendorVersion <> ''
	BEGIN
		DECLARE @VendorVersion_CASTED varchar(6)
		IF @VendorVersion = '^'
			BEGIN
				SET @VendorVersion_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @VendorVersion_CASTED = CAST(@VendorVersion AS varchar(6))
			END

		UPDATE ExperianDefaults
			SET VendorVersion = @VendorVersion_CASTED
		WHERE 1=1 AND DefaultsID = @DefaultsID
	END

IF @OptionsJoint <> ''
	BEGIN
		DECLARE @OptionsJoint_CASTED char(1)
		IF @OptionsJoint = '^'
			BEGIN
				SET @OptionsJoint_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @OptionsJoint_CASTED = CAST(@OptionsJoint AS char(1))
			END

		UPDATE ExperianDefaults
			SET OptionsJoint = @OptionsJoint_CASTED
		WHERE 1=1 AND DefaultsID = @DefaultsID
	END

IF @OptionsReferenceNumber <> ''
	BEGIN
		DECLARE @OptionsReferenceNumber_CASTED varchar(90)
		IF @OptionsReferenceNumber = '^'
			BEGIN
				SET @OptionsReferenceNumber_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @OptionsReferenceNumber_CASTED = CAST(@OptionsReferenceNumber AS varchar(90))
			END

		UPDATE ExperianDefaults
			SET OptionsReferenceNumber = @OptionsReferenceNumber_CASTED
		WHERE 1=1 AND DefaultsID = @DefaultsID
	END

IF @OptionsEndUser <> ''
	BEGIN
		DECLARE @OptionsEndUser_CASTED varchar(30)
		IF @OptionsEndUser = '^'
			BEGIN
				SET @OptionsEndUser_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @OptionsEndUser_CASTED = CAST(@OptionsEndUser AS varchar(30))
			END

		UPDATE ExperianDefaults
			SET OptionsEndUser = @OptionsEndUser_CASTED
		WHERE 1=1 AND DefaultsID = @DefaultsID
	END

IF @OptionsBrokerNumber <> ''
	BEGIN
		DECLARE @OptionsBrokerNumber_CASTED varchar(10)
		IF @OptionsBrokerNumber = '^'
			BEGIN
				SET @OptionsBrokerNumber_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @OptionsBrokerNumber_CASTED = CAST(@OptionsBrokerNumber AS varchar(10))
			END

		UPDATE ExperianDefaults
			SET OptionsBrokerNumber = @OptionsBrokerNumber_CASTED
		WHERE 1=1 AND DefaultsID = @DefaultsID
	END

IF @OptionsSB168 <> ''
	BEGIN
		DECLARE @OptionsSB168_CASTED char(1)
		IF @OptionsSB168 = '^'
			BEGIN
				SET @OptionsSB168_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @OptionsSB168_CASTED = CAST(@OptionsSB168 AS char(1))
			END

		UPDATE ExperianDefaults
			SET OptionsSB168 = @OptionsSB168_CASTED
		WHERE 1=1 AND DefaultsID = @DefaultsID
	END

IF @OFACMSG <> ''
	BEGIN
		DECLARE @OFACMSG_CASTED char(1)
		IF @OFACMSG = '^'
			BEGIN
				SET @OFACMSG_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @OFACMSG_CASTED = CAST(@OFACMSG AS char(1))
			END

		UPDATE ExperianDefaults
			SET OFACMSG = @OFACMSG_CASTED
		WHERE 1=1 AND DefaultsID = @DefaultsID
	END

IF @OFAC <> ''
	BEGIN
		DECLARE @OFAC_CASTED char(1)
		IF @OFAC = '^'
			BEGIN
				SET @OFAC_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @OFAC_CASTED = CAST(@OFAC AS char(1))
			END

		UPDATE ExperianDefaults
			SET OFAC = @OFAC_CASTED
		WHERE 1=1 AND DefaultsID = @DefaultsID
	END

IF @EAI <> ''
	BEGIN
		DECLARE @EAI_CASTED varchar(100)
		IF @EAI = '^'
			BEGIN
				SET @EAI_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @EAI_CASTED = CAST(@EAI AS varchar(100))
			END

		UPDATE ExperianDefaults
			SET EAI = @EAI_CASTED
		WHERE 1=1 AND DefaultsID = @DefaultsID
	END

IF @DBHost <> ''
	BEGIN
		DECLARE @DBHost_CASTED varchar(100)
		IF @DBHost = '^'
			BEGIN
				SET @DBHost_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @DBHost_CASTED = CAST(@DBHost AS varchar(100))
			END

		UPDATE ExperianDefaults
			SET DBHost = @DBHost_CASTED
		WHERE 1=1 AND DefaultsID = @DefaultsID
	END

IF @Preamble <> ''
	BEGIN
		DECLARE @Preamble_CASTED varchar(100)
		IF @Preamble = '^'
			BEGIN
				SET @Preamble_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Preamble_CASTED = CAST(@Preamble AS varchar(100))
			END

		UPDATE ExperianDefaults
			SET Preamble = @Preamble_CASTED
		WHERE 1=1 AND DefaultsID = @DefaultsID
	END

IF @SubCode <> ''
	BEGIN
		DECLARE @SubCode_CASTED varchar(100)
		IF @SubCode = '^'
			BEGIN
				SET @SubCode_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @SubCode_CASTED = CAST(@SubCode AS varchar(100))
			END

		UPDATE ExperianDefaults
			SET SubCode = @SubCode_CASTED
		WHERE 1=1 AND DefaultsID = @DefaultsID
	END

IF @LockedOut <> ''
	BEGIN
		DECLARE @LockedOut_CASTED char(1)
		IF @LockedOut = '^'
			BEGIN
				SET @LockedOut_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @LockedOut_CASTED = CAST(@LockedOut AS char(1))
			END

		UPDATE ExperianDefaults
			SET LockedOut = @LockedOut_CASTED
		WHERE 1=1 AND DefaultsID = @DefaultsID
	END

IF @ECALSURL <> ''
	BEGIN
		DECLARE @ECALSURL_CASTED varchar(200)
		IF @ECALSURL = '^'
			BEGIN
				SET @ECALSURL_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ECALSURL_CASTED = CAST(@ECALSURL AS varchar(200))
			END

		UPDATE ExperianDefaults
			SET ECALSURL = @ECALSURL_CASTED
		WHERE 1=1 AND DefaultsID = @DefaultsID
	END

IF @AuthenticationFailure <> ''
	BEGIN
		DECLARE @AuthenticationFailure_CASTED int
		IF @AuthenticationFailure = '^'
			BEGIN
				SET @AuthenticationFailure_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @AuthenticationFailure_CASTED = CAST(@AuthenticationFailure AS int)
			END

		UPDATE ExperianDefaults
			SET AuthenticationFailure = @AuthenticationFailure_CASTED
		WHERE 1=1 AND DefaultsID = @DefaultsID
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_Experianxlate_ManualApproval_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_Experianxlate_ManualApproval_Delete]
	@TrackingNum int
AS

DELETE FROM ExperianManualApproval
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_Experianxlate_ManualApproval_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_Experianxlate_ManualApproval_DeleteAll]
	@TrackingNum int
AS

DELETE FROM ExperianManualApproval
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_Experianxlate_ManualApproval_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_Experianxlate_ManualApproval_Insert]
	@ReasonCode varchar(32),
	@Category varchar(2),
	@Description varchar(80),
	@ActionCode varchar(1),
	@DataField varchar(20),
	@TrackingNum int
AS

INSERT INTO ExperianManualApproval
(TrackingNum, ReasonCode, Category, Description, ActionCode, DataField)
VALUES
(@TrackingNum, @ReasonCode, @Category, @Description, @ActionCode, @DataField)

GO
/****** Object:  StoredProcedure [IMS].[sp_Experianxlate_ManualApproval_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_Experianxlate_ManualApproval_InsertIfNew]
	@ReasonCode varchar(32),
	@Category varchar(2),
	@Description varchar(80),
	@ActionCode varchar(1),
	@DataField varchar(20),
	@TrackingNum int
AS

DECLARE @Count int
SELECT @Count = COUNT(ReasonCode) FROM ExperianManualApproval WHERE 1=1 AND TrackingNum = @TrackingNum

IF @Count = 0
	BEGIN
		INSERT INTO ExperianManualApproval
		(TrackingNum, ReasonCode, Category, Description, ActionCode, DataField)
		VALUES
		(@TrackingNum, @ReasonCode, @Category, @Description, @ActionCode, @DataField)
	END
ELSE	BEGIN
		UPDATE ExperianManualApproval SET
			ReasonCode = @ReasonCode,
			Category = @Category,
			Description = @Description,
			ActionCode = @ActionCode,
			DataField = @DataField
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_Experianxlate_ManualApproval_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_Experianxlate_ManualApproval_Select]
	@TrackingNum int
AS

SELECT * FROM ExperianManualApproval
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_Experianxlate_ManualApproval_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_Experianxlate_ManualApproval_SelectAll]
	@TrackingNum int
AS

SELECT * FROM ExperianManualApproval
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_Experianxlate_ManualApproval_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_Experianxlate_ManualApproval_Update]
	@ReasonCode varchar(32),
	@Category varchar(2),
	@Description varchar(80),
	@ActionCode varchar(1),
	@DataField varchar(20),
	@TrackingNum int
AS

IF @ReasonCode <> ''
	BEGIN
		DECLARE @ReasonCode_CASTED varchar(32)
		IF @ReasonCode = '^'
			BEGIN
				SET @ReasonCode_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ReasonCode_CASTED = CAST(@ReasonCode AS varchar(32))
			END

		UPDATE ExperianManualApproval
			SET ReasonCode = @ReasonCode_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @Category <> ''
	BEGIN
		DECLARE @Category_CASTED varchar(2)
		IF @Category = '^'
			BEGIN
				SET @Category_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Category_CASTED = CAST(@Category AS varchar(2))
			END

		UPDATE ExperianManualApproval
			SET Category = @Category_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @Description <> ''
	BEGIN
		DECLARE @Description_CASTED varchar(80)
		IF @Description = '^'
			BEGIN
				SET @Description_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Description_CASTED = CAST(@Description AS varchar(80))
			END

		UPDATE ExperianManualApproval
			SET Description = @Description_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @ActionCode <> ''
	BEGIN
		DECLARE @ActionCode_CASTED varchar(1)
		IF @ActionCode = '^'
			BEGIN
				SET @ActionCode_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ActionCode_CASTED = CAST(@ActionCode AS varchar(1))
			END

		UPDATE ExperianManualApproval
			SET ActionCode = @ActionCode_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @DataField <> ''
	BEGIN
		DECLARE @DataField_CASTED varchar(20)
		IF @DataField = '^'
			BEGIN
				SET @DataField_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @DataField_CASTED = CAST(@DataField AS varchar(20))
			END

		UPDATE ExperianManualApproval
			SET DataField = @DataField_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_Experianxlate_ProductsCreditProfile_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_Experianxlate_ProductsCreditProfile_Delete]
	@TrackingNum int
AS

DELETE FROM ExperianCreditProfileReply
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_Experianxlate_ProductsCreditProfile_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_Experianxlate_ProductsCreditProfile_DeleteAll]
	@TrackingNum int
AS

DELETE FROM ExperianCreditProfileReply
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_Experianxlate_ProductsCreditProfile_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_Experianxlate_ProductsCreditProfile_Insert]
	@SSN varchar(100),
	@FullResponse text,
	@HumanReadable text,
	@TrackingNum int
AS

INSERT INTO ExperianCreditProfileReply
(TrackingNum, SSN, FullResponse, HumanReadable)
VALUES
(@TrackingNum, @SSN, @FullResponse, @HumanReadable)

GO
/****** Object:  StoredProcedure [IMS].[sp_Experianxlate_ProductsCreditProfile_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_Experianxlate_ProductsCreditProfile_InsertIfNew]
	@SSN varchar(100),
	@FullResponse text,
	@HumanReadable text,
	@TrackingNum int
AS

DECLARE @Count int
SELECT @Count = COUNT(SSN) FROM ExperianCreditProfileReply WHERE 1=1 AND TrackingNum = @TrackingNum

IF @Count = 0
	BEGIN
		INSERT INTO ExperianCreditProfileReply
		(TrackingNum, SSN, FullResponse, HumanReadable)
		VALUES
		(@TrackingNum, @SSN, @FullResponse, @HumanReadable)
	END
ELSE	BEGIN
		UPDATE ExperianCreditProfileReply SET
			SSN = @SSN,
			FullResponse = @FullResponse,
			HumanReadable = @HumanReadable
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_Experianxlate_ProductsCreditProfile_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_Experianxlate_ProductsCreditProfile_Select]
	@TrackingNum int
AS

SELECT * FROM ExperianCreditProfileReply
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_Experianxlate_ProductsCreditProfile_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_Experianxlate_ProductsCreditProfile_SelectAll]
	@TrackingNum int
AS

SELECT * FROM ExperianCreditProfileReply
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_Experianxlate_ProductsCreditProfile_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_Experianxlate_ProductsCreditProfile_Update]
	@SSN varchar(100),
	@FullResponse text,
	@HumanReadable text,
	@TrackingNum int
AS

IF @SSN <> ''
	BEGIN
		DECLARE @SSN_CASTED varchar(100)
		IF @SSN = '^'
			BEGIN
				SET @SSN_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @SSN_CASTED = CAST(@SSN AS varchar(100))
			END

		UPDATE ExperianCreditProfileReply
			SET SSN = @SSN_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF CAST(@FullResponse AS varchar(100)) <> ''
	BEGIN
		IF CAST(@FullResponse AS varchar(100)) = '^'
			BEGIN
				UPDATE ExperianCreditProfileReply
					SET FullResponse = NULL
				WHERE 1=1 AND TrackingNum = @TrackingNum
			END
		ELSE
			BEGIN
				UPDATE ExperianCreditProfileReply
					SET FullResponse = @FullResponse
				WHERE 1=1 AND TrackingNum = @TrackingNum
			END

	END

IF CAST(@HumanReadable AS varchar(100)) <> ''
	BEGIN
		IF CAST(@HumanReadable AS varchar(100)) = '^'
			BEGIN
				UPDATE ExperianCreditProfileReply
					SET HumanReadable = NULL
				WHERE 1=1 AND TrackingNum = @TrackingNum
			END
		ELSE
			BEGIN
				UPDATE ExperianCreditProfileReply
					SET HumanReadable = @HumanReadable
				WHERE 1=1 AND TrackingNum = @TrackingNum
			END

	END

GO
/****** Object:  StoredProcedure [IMS].[sp_Experianxlate_Search_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_Experianxlate_Search_Select]
	@SSN varchar(100),
	@OldestDate datetime
AS

EXEC IMS.sp_Experian_Search @SSN, @OldestDate

GO
/****** Object:  StoredProcedure [IMS].[sp_FDRPayEZxlate_Config_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_FDRPayEZxlate_Config_Delete]
	@ID int
AS

DELETE FROM FDRConfig
WHERE 1=1 AND ID = @ID

GO
/****** Object:  StoredProcedure [IMS].[sp_FDRPayEZxlate_Config_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_FDRPayEZxlate_Config_DeleteAll]
AS

DELETE FROM FDRConfig
WHERE 1=1

GO
/****** Object:  StoredProcedure [IMS].[sp_FDRPayEZxlate_Config_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_FDRPayEZxlate_Config_Insert]
	@ID int OUTPUT,
	@WebServiceUrl varchar(255),
	@WebServiceTimeout int,
	@CertFile varchar(255),
	@Username varchar(255),
	@Password varchar(255),
	@apikey varchar(255),
	@token varchar(255),
	@ContentType varchar(255),
	@APISecret varchar(255)
AS

INSERT INTO FDRConfig
(WebServiceUrl, WebServiceTimeout, CertFile, Username, Password, apikey, token, ContentType, APISecret)
VALUES
(@WebServiceUrl, @WebServiceTimeout, @CertFile, @Username, @Password, @apikey, @token, @ContentType, @APISecret)

SELECT @ID = SCOPE_IDENTITY()

GO
/****** Object:  StoredProcedure [IMS].[sp_FDRPayEZxlate_Config_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_FDRPayEZxlate_Config_InsertIfNew]
	@ID int OUTPUT,
	@WebServiceUrl varchar(255),
	@WebServiceTimeout int,
	@CertFile varchar(255),
	@Username varchar(255),
	@Password varchar(255),
	@apikey varchar(255),
	@token varchar(255),
	@ContentType varchar(255),
	@APISecret varchar(255)
AS

IF NOT EXISTS (SELECT * FROM FDRConfig WHERE 1=1)
	BEGIN
		INSERT INTO FDRConfig
		(WebServiceUrl, WebServiceTimeout, CertFile, Username, Password, apikey, token, ContentType, APISecret)
		VALUES
		(@WebServiceUrl, @WebServiceTimeout, @CertFile, @Username, @Password, @apikey, @token, @ContentType, @APISecret)

		SELECT @ID = SCOPE_IDENTITY()
	END
ELSE	BEGIN
		UPDATE FDRConfig SET
			WebServiceUrl = @WebServiceUrl,
			WebServiceTimeout = @WebServiceTimeout,
			CertFile = @CertFile,
			Username = @Username,
			Password = @Password,
			apikey = @apikey,
			token = @token,
			ContentType = @ContentType,
			APISecret = @APISecret
		WHERE 1=1

		SELECT TOP 1 @ID = ID FROM FDRConfig
		WHERE 1=1
		ORDER BY ID DESC
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_FDRPayEZxlate_Config_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_FDRPayEZxlate_Config_Select]
	@ID int
AS

SELECT * FROM FDRConfig
WHERE 1=1 AND ID = @ID

GO
/****** Object:  StoredProcedure [IMS].[sp_FDRPayEZxlate_Config_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_FDRPayEZxlate_Config_SelectAll]
AS

SELECT * FROM FDRConfig
WHERE 1=1

GO
/****** Object:  StoredProcedure [IMS].[sp_FDRPayEZxlate_Config_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_FDRPayEZxlate_Config_Update]
	@ID int,
	@WebServiceUrl varchar(255),
	@WebServiceTimeout varchar(100),
	@CertFile varchar(255),
	@Username varchar(255),
	@Password varchar(255),
	@apikey varchar(255),
	@token varchar(255),
	@ContentType varchar(255),
	@APISecret varchar(255)
AS

IF @WebServiceUrl <> ''
	BEGIN
		DECLARE @WebServiceUrl_CASTED varchar(255)
		IF @WebServiceUrl = '^'
			BEGIN
				SET @WebServiceUrl_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @WebServiceUrl_CASTED = CAST(@WebServiceUrl AS varchar(255))
			END

		UPDATE FDRConfig
			SET WebServiceUrl = @WebServiceUrl_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @WebServiceTimeout <> ''
	BEGIN
		DECLARE @WebServiceTimeout_CASTED int
		IF @WebServiceTimeout = '^'
			BEGIN
				SET @WebServiceTimeout_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @WebServiceTimeout_CASTED = CAST(@WebServiceTimeout AS int)
			END

		UPDATE FDRConfig
			SET WebServiceTimeout = @WebServiceTimeout_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @CertFile <> ''
	BEGIN
		DECLARE @CertFile_CASTED varchar(255)
		IF @CertFile = '^'
			BEGIN
				SET @CertFile_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @CertFile_CASTED = CAST(@CertFile AS varchar(255))
			END

		UPDATE FDRConfig
			SET CertFile = @CertFile_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @Username <> ''
	BEGIN
		DECLARE @Username_CASTED varchar(255)
		IF @Username = '^'
			BEGIN
				SET @Username_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Username_CASTED = CAST(@Username AS varchar(255))
			END

		UPDATE FDRConfig
			SET Username = @Username_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @Password <> ''
	BEGIN
		DECLARE @Password_CASTED varchar(255)
		IF @Password = '^'
			BEGIN
				SET @Password_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Password_CASTED = CAST(@Password AS varchar(255))
			END

		UPDATE FDRConfig
			SET Password = @Password_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @apikey <> ''
	BEGIN
		DECLARE @apikey_CASTED varchar(255)
		IF @apikey = '^'
			BEGIN
				SET @apikey_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @apikey_CASTED = CAST(@apikey AS varchar(255))
			END

		UPDATE FDRConfig
			SET apikey = @apikey_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @token <> ''
	BEGIN
		DECLARE @token_CASTED varchar(255)
		IF @token = '^'
			BEGIN
				SET @token_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @token_CASTED = CAST(@token AS varchar(255))
			END

		UPDATE FDRConfig
			SET token = @token_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @ContentType <> ''
	BEGIN
		DECLARE @ContentType_CASTED varchar(255)
		IF @ContentType = '^'
			BEGIN
				SET @ContentType_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ContentType_CASTED = CAST(@ContentType AS varchar(255))
			END

		UPDATE FDRConfig
			SET ContentType = @ContentType_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @APISecret <> ''
	BEGIN
		DECLARE @APISecret_CASTED varchar(255)
		IF @APISecret = '^'
			BEGIN
				SET @APISecret_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @APISecret_CASTED = CAST(@APISecret AS varchar(255))
			END

		UPDATE FDRConfig
			SET APISecret = @APISecret_CASTED
		WHERE 1=1 AND ID = @ID
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_FDRxlate_Config_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_FDRxlate_Config_Delete]
	@ID int
AS

DELETE FROM FDRConfig
WHERE 1=1 AND ID = @ID

GO
/****** Object:  StoredProcedure [IMS].[sp_FDRxlate_Config_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_FDRxlate_Config_DeleteAll]
AS

DELETE FROM FDRConfig
WHERE 1=1

GO
/****** Object:  StoredProcedure [IMS].[sp_FDRxlate_Config_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_FDRxlate_Config_Insert]
	@ID int OUTPUT,
	@WebServiceUrl varchar(255),
	@WebServiceTimeout int,
	@CertFile varchar(255),
	@Username varchar(255),
	@Password varchar(255)
AS

INSERT INTO FDRConfig
(WebServiceUrl, WebServiceTimeout, CertFile, Username, Password)
VALUES
(@WebServiceUrl, @WebServiceTimeout, @CertFile, @Username, @Password)

SELECT @ID = @@IDENTITY FROM FDRConfig

GO
/****** Object:  StoredProcedure [IMS].[sp_FDRxlate_Config_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_FDRxlate_Config_InsertIfNew]
	@ID int OUTPUT,
	@WebServiceUrl varchar(255),
	@WebServiceTimeout int,
	@CertFile varchar(255),
	@Username varchar(255),
	@Password varchar(255)
AS

DECLARE @Count int
SELECT @Count = COUNT(WebServiceUrl) FROM FDRConfig WHERE 1=1

IF @Count = 0
	BEGIN
		INSERT INTO FDRConfig
		(WebServiceUrl, WebServiceTimeout, CertFile, Username, Password)
		VALUES
		(@WebServiceUrl, @WebServiceTimeout, @CertFile, @Username, @Password)

		SELECT @ID = @@IDENTITY FROM FDRConfig
	END
ELSE	BEGIN
		UPDATE FDRConfig SET
			WebServiceUrl = @WebServiceUrl,
			WebServiceTimeout = @WebServiceTimeout,
			CertFile = @CertFile,
			Username = @Username,
			Password = @Password
		WHERE 1=1

		SELECT TOP 1 @ID = ID FROM FDRConfig
		WHERE 1=1
		ORDER BY ID DESC
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_FDRxlate_Config_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_FDRxlate_Config_Select]
	@ID int
AS

SELECT * FROM FDRConfig
WHERE 1=1 AND ID = @ID

GO
/****** Object:  StoredProcedure [IMS].[sp_FDRxlate_Config_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_FDRxlate_Config_SelectAll]
AS

SELECT * FROM FDRConfig
WHERE 1=1

GO
/****** Object:  StoredProcedure [IMS].[sp_FDRxlate_Config_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_FDRxlate_Config_Update]
	@ID int,
	@WebServiceUrl varchar(255),
	@WebServiceTimeout varchar(100),
	@CertFile varchar(255),
	@Username varchar(255),
	@Password varchar(255)
AS

IF @WebServiceUrl <> ''
	BEGIN
		DECLARE @WebServiceUrl_CASTED varchar(255)
		IF @WebServiceUrl = '^'
			BEGIN
				SET @WebServiceUrl_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @WebServiceUrl_CASTED = CAST(@WebServiceUrl AS varchar(255))
			END

		UPDATE FDRConfig
			SET WebServiceUrl = @WebServiceUrl_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @WebServiceTimeout <> ''
	BEGIN
		DECLARE @WebServiceTimeout_CASTED int
		IF @WebServiceTimeout = '^'
			BEGIN
				SET @WebServiceTimeout_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @WebServiceTimeout_CASTED = CAST(@WebServiceTimeout AS int)
			END

		UPDATE FDRConfig
			SET WebServiceTimeout = @WebServiceTimeout_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @CertFile <> ''
	BEGIN
		DECLARE @CertFile_CASTED varchar(255)
		IF @CertFile = '^'
			BEGIN
				SET @CertFile_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @CertFile_CASTED = CAST(@CertFile AS varchar(255))
			END

		UPDATE FDRConfig
			SET CertFile = @CertFile_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @Username <> ''
	BEGIN
		DECLARE @Username_CASTED varchar(255)
		IF @Username = '^'
			BEGIN
				SET @Username_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Username_CASTED = CAST(@Username AS varchar(255))
			END

		UPDATE FDRConfig
			SET Username = @Username_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @Password <> ''
	BEGIN
		DECLARE @Password_CASTED varchar(255)
		IF @Password = '^'
			BEGIN
				SET @Password_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Password_CASTED = CAST(@Password AS varchar(255))
			END

		UPDATE FDRConfig
			SET Password = @Password_CASTED
		WHERE 1=1 AND ID = @ID
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_FedReservePendingTransaction_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [IMS].[sp_FedReservePendingTransaction_Select]
	@NMRAccountNumber bigint
AS
	DECLARE @ClientShortName varchar(10)
	SELECT @ClientShortName = ClientShortName from udt_ClientSettings

	--We are executing a string, so we have to verify that we are not executing SQL injection scripts. 
	--Because the short code is a defined value, and not a user input, we can check for ' or -- because these should never be in the name (because we control what this is). 
	--Normally I would recommend never ever ever (emphasize repeatedly) executing a string, but because our db is dristributed to client networks 
	--and we want to prevent passing other client names around, then this might be the one time that this actually makes sense to use. 
	if @ClientShortName IS NOT NULL AND CHARINDEX('''',@ClientShortName) = 0 AND CHARINDEX('--',@ClientShortName) = 0
	BEGIN
		DECLARE @ScaryExecutableString varchar(500)
		SET @ScaryExecutableString = N'IMS.sp' + @ClientShortName + '_FedReservePendingTransaction_Select'
		Exec @ScaryExecutableString @NMRAccountNumber
	END	
GO
/****** Object:  StoredProcedure [IMS].[sp_FISPrePaidxlate_Config_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_FISPrePaidxlate_Config_Delete]
	@ConfigurationId int
AS

DELETE FROM FISPrePaidConfig
WHERE 1=1 AND ConfigurationId = @ConfigurationId

GO
/****** Object:  StoredProcedure [IMS].[sp_FISPrePaidxlate_Config_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_FISPrePaidxlate_Config_DeleteAll]
AS

DELETE FROM FISPrePaidConfig
WHERE 1=1

GO
/****** Object:  StoredProcedure [IMS].[sp_FISPrePaidxlate_Config_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_FISPrePaidxlate_Config_Insert]
	@ConfigurationId int OUTPUT,
	@FISPrePaidUrl varchar(255),
	@BalanceInquiryPageUrl varchar(100),
	@BalanceInquiryPageResponseType varchar(10),
	@TransactionHistoryPageUrl varchar(100),
	@TransactionHistoryPageResponseType varchar(10),
	@ReloadsPageUrl varchar(100),
	@ReloadsPageResponseType varchar(10),
	@WebServiceTimeout int
AS

INSERT INTO FISPrePaidConfig
(FISPrePaidUrl, BalanceInquiryPageUrl, BalanceInquiryPageResponseType, TransactionHistoryPageUrl, TransactionHistoryPageResponseType, ReloadsPageUrl, ReloadsPageResponseType, WebServiceTimeout)
VALUES
(@FISPrePaidUrl, @BalanceInquiryPageUrl, @BalanceInquiryPageResponseType, @TransactionHistoryPageUrl, @TransactionHistoryPageResponseType, @ReloadsPageUrl, @ReloadsPageResponseType, @WebServiceTimeout)

SELECT @ConfigurationId = @@IDENTITY FROM FISPrePaidConfig

GO
/****** Object:  StoredProcedure [IMS].[sp_FISPrePaidxlate_Config_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_FISPrePaidxlate_Config_InsertIfNew]
	@ConfigurationId int OUTPUT,
	@FISPrePaidUrl varchar(255),
	@BalanceInquiryPageUrl varchar(100),
	@BalanceInquiryPageResponseType varchar(10),
	@TransactionHistoryPageUrl varchar(100),
	@TransactionHistoryPageResponseType varchar(10),
	@ReloadsPageUrl varchar(100),
	@ReloadsPageResponseType varchar(10),
	@WebServiceTimeout int
AS

DECLARE @Count int
SELECT @Count = COUNT(FISPrePaidUrl) FROM FISPrePaidConfig WHERE 1=1

IF @Count = 0
	BEGIN
		INSERT INTO FISPrePaidConfig
		(FISPrePaidUrl, BalanceInquiryPageUrl, BalanceInquiryPageResponseType, TransactionHistoryPageUrl, TransactionHistoryPageResponseType, ReloadsPageUrl, ReloadsPageResponseType, WebServiceTimeout)
		VALUES
		(@FISPrePaidUrl, @BalanceInquiryPageUrl, @BalanceInquiryPageResponseType, @TransactionHistoryPageUrl, @TransactionHistoryPageResponseType, @ReloadsPageUrl, @ReloadsPageResponseType, @WebServiceTimeout)

		SELECT @ConfigurationId = @@IDENTITY FROM FISPrePaidConfig
	END
ELSE	BEGIN
		UPDATE FISPrePaidConfig SET
			FISPrePaidUrl = @FISPrePaidUrl,
			BalanceInquiryPageUrl = @BalanceInquiryPageUrl,
			BalanceInquiryPageResponseType = @BalanceInquiryPageResponseType,
			TransactionHistoryPageUrl = @TransactionHistoryPageUrl,
			TransactionHistoryPageResponseType = @TransactionHistoryPageResponseType,
			ReloadsPageUrl = @ReloadsPageUrl,
			ReloadsPageResponseType = @ReloadsPageResponseType,
			WebServiceTimeout = @WebServiceTimeout
		WHERE 1=1

		SELECT TOP 1 @ConfigurationId = ConfigurationId FROM FISPrePaidConfig
		WHERE 1=1
		ORDER BY ConfigurationId DESC
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_FISPrePaidxlate_Config_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_FISPrePaidxlate_Config_Select]
	@ConfigurationId int
AS

SELECT * FROM FISPrePaidConfig
WHERE 1=1 AND ConfigurationId = @ConfigurationId

GO
/****** Object:  StoredProcedure [IMS].[sp_FISPrePaidxlate_Config_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_FISPrePaidxlate_Config_SelectAll]
AS

SELECT * FROM FISPrePaidConfig
WHERE 1=1

GO
/****** Object:  StoredProcedure [IMS].[sp_FISPrePaidxlate_Config_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_FISPrePaidxlate_Config_Update]
	@ConfigurationId int,
	@FISPrePaidUrl varchar(255),
	@BalanceInquiryPageUrl varchar(100),
	@BalanceInquiryPageResponseType varchar(10),
	@TransactionHistoryPageUrl varchar(100),
	@TransactionHistoryPageResponseType varchar(10),
	@ReloadsPageUrl varchar(100),
	@ReloadsPageResponseType varchar(10),
	@WebServiceTimeout varchar(100)
AS

IF @FISPrePaidUrl <> ''
	BEGIN
		DECLARE @FISPrePaidUrl_CASTED varchar(255)
		IF @FISPrePaidUrl = '^'
			BEGIN
				SET @FISPrePaidUrl_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @FISPrePaidUrl_CASTED = CAST(@FISPrePaidUrl AS varchar(255))
			END

		UPDATE FISPrePaidConfig
			SET FISPrePaidUrl = @FISPrePaidUrl_CASTED
		WHERE 1=1 AND ConfigurationId = @ConfigurationId
	END

IF @BalanceInquiryPageUrl <> ''
	BEGIN
		DECLARE @BalanceInquiryPageUrl_CASTED varchar(100)
		IF @BalanceInquiryPageUrl = '^'
			BEGIN
				SET @BalanceInquiryPageUrl_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @BalanceInquiryPageUrl_CASTED = CAST(@BalanceInquiryPageUrl AS varchar(100))
			END

		UPDATE FISPrePaidConfig
			SET BalanceInquiryPageUrl = @BalanceInquiryPageUrl_CASTED
		WHERE 1=1 AND ConfigurationId = @ConfigurationId
	END

IF @BalanceInquiryPageResponseType <> ''
	BEGIN
		DECLARE @BalanceInquiryPageResponseType_CASTED varchar(10)
		IF @BalanceInquiryPageResponseType = '^'
			BEGIN
				SET @BalanceInquiryPageResponseType_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @BalanceInquiryPageResponseType_CASTED = CAST(@BalanceInquiryPageResponseType AS varchar(10))
			END

		UPDATE FISPrePaidConfig
			SET BalanceInquiryPageResponseType = @BalanceInquiryPageResponseType_CASTED
		WHERE 1=1 AND ConfigurationId = @ConfigurationId
	END

IF @TransactionHistoryPageUrl <> ''
	BEGIN
		DECLARE @TransactionHistoryPageUrl_CASTED varchar(100)
		IF @TransactionHistoryPageUrl = '^'
			BEGIN
				SET @TransactionHistoryPageUrl_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @TransactionHistoryPageUrl_CASTED = CAST(@TransactionHistoryPageUrl AS varchar(100))
			END

		UPDATE FISPrePaidConfig
			SET TransactionHistoryPageUrl = @TransactionHistoryPageUrl_CASTED
		WHERE 1=1 AND ConfigurationId = @ConfigurationId
	END

IF @TransactionHistoryPageResponseType <> ''
	BEGIN
		DECLARE @TransactionHistoryPageResponseType_CASTED varchar(10)
		IF @TransactionHistoryPageResponseType = '^'
			BEGIN
				SET @TransactionHistoryPageResponseType_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @TransactionHistoryPageResponseType_CASTED = CAST(@TransactionHistoryPageResponseType AS varchar(10))
			END

		UPDATE FISPrePaidConfig
			SET TransactionHistoryPageResponseType = @TransactionHistoryPageResponseType_CASTED
		WHERE 1=1 AND ConfigurationId = @ConfigurationId
	END

IF @ReloadsPageUrl <> ''
	BEGIN
		DECLARE @ReloadsPageUrl_CASTED varchar(100)
		IF @ReloadsPageUrl = '^'
			BEGIN
				SET @ReloadsPageUrl_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ReloadsPageUrl_CASTED = CAST(@ReloadsPageUrl AS varchar(100))
			END

		UPDATE FISPrePaidConfig
			SET ReloadsPageUrl = @ReloadsPageUrl_CASTED
		WHERE 1=1 AND ConfigurationId = @ConfigurationId
	END

IF @ReloadsPageResponseType <> ''
	BEGIN
		DECLARE @ReloadsPageResponseType_CASTED varchar(10)
		IF @ReloadsPageResponseType = '^'
			BEGIN
				SET @ReloadsPageResponseType_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ReloadsPageResponseType_CASTED = CAST(@ReloadsPageResponseType AS varchar(10))
			END

		UPDATE FISPrePaidConfig
			SET ReloadsPageResponseType = @ReloadsPageResponseType_CASTED
		WHERE 1=1 AND ConfigurationId = @ConfigurationId
	END

IF @WebServiceTimeout <> ''
	BEGIN
		DECLARE @WebServiceTimeout_CASTED int
		IF @WebServiceTimeout = '^'
			BEGIN
				SET @WebServiceTimeout_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @WebServiceTimeout_CASTED = CAST(@WebServiceTimeout AS int)
			END

		UPDATE FISPrePaidConfig
			SET WebServiceTimeout = @WebServiceTimeout_CASTED
		WHERE 1=1 AND ConfigurationId = @ConfigurationId
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_FlagsSelect]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE Procedure [IMS].[sp_FlagsSelect]
	@TrackingNum int
AS

SELECT * FROM [IMS].[Flags]
WHERE 1=1 AND TrackingNum = @TrackingNum
GO
/****** Object:  StoredProcedure [IMS].[sp_Flagsxlate_flag_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_Flagsxlate_flag_Delete]
	@Sequence int,
	@TrackingNum int
AS

DELETE FROM [IMS].[Flags]
WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_Flagsxlate_flag_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_Flagsxlate_flag_DeleteAll]
	@Sequence int,
	@TrackingNum int
AS

DELETE FROM [IMS].[Flags]
WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_Flagsxlate_flag_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_Flagsxlate_flag_Insert]
	@Sequence int,
	@Account int,
	@Surname char(2),
	@Suffix int,
	@FlagLevel char(1),
	@FlagType char(1),
	@FlagNumber int,
	@FlagValue int,
	@FlagDate datetime,
	@LastModified datetime,
	@Processed varchar,
	@TrackingNum int,
	@ClientIP char(15),
	@WebIP char(15),
	@ClusterID int
AS

INSERT INTO [IMS].[Flags]
(Sequence, TrackingNum, Account, Surname, Suffix, FlagLevel, FlagType, FlagNumber, FlagValue, FlagDate, LastModified, Processed, ClientIP, WebIP, ClusterID)
VALUES
(@Sequence, @TrackingNum, @Account, @Surname, @Suffix, @FlagLevel, @FlagType, @FlagNumber, @FlagValue, @FlagDate, @LastModified, @Processed, @ClientIP, @WebIP, @ClusterID)

GO
/****** Object:  StoredProcedure [IMS].[sp_Flagsxlate_flag_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_Flagsxlate_flag_InsertIfNew]
	@Sequence int,
	@Account int,
	@Surname char(2),
	@Suffix int,
	@FlagLevel char(1),
	@FlagType char(1),
	@FlagNumber int,
	@FlagValue int,
	@FlagDate datetime,
	@LastModified datetime,
	@Processed varchar,
	@TrackingNum int,
	@ClientIP char(15),
	@WebIP char(15),
	@ClusterID int
AS

DECLARE @Count int
SELECT @Count = COUNT(Account) FROM [IMS].[Flags] WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
IF @Count = 0
	BEGIN
		INSERT INTO [IMS].[Flags]
		(Sequence, TrackingNum, Account, Surname, Suffix, FlagLevel, FlagType, FlagNumber, FlagValue, FlagDate, LastModified, Processed, ClientIP, WebIP, ClusterID)
		VALUES
		(@Sequence, @TrackingNum, @Account, @Surname, @Suffix, @FlagLevel, @FlagType, @FlagNumber, @FlagValue, @FlagDate, @LastModified, @Processed, @ClientIP, @WebIP, @ClusterID)
	END
ELSE	BEGIN
		UPDATE [IMS].[Flags] SET
			Account = @Account,
			Surname = @Surname,
			Suffix = @Suffix,
			FlagLevel = @FlagLevel,
			FlagType = @FlagType,
			FlagNumber = @FlagNumber,
			FlagValue = @FlagValue,
			FlagDate = @FlagDate,
			LastModified = @LastModified,
			Processed = @Processed,
			ClientIP = @ClientIP,
			WebIP = @WebIP,
			ClusterID = @ClusterID
		WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_Flagsxlate_flag_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_Flagsxlate_flag_Select]
	@Sequence int,
	@TrackingNum int
AS

SELECT * FROM [IMS].[Flags]
WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_Flagsxlate_flag_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_Flagsxlate_flag_SelectAll]
	@Sequence int,
	@TrackingNum int
AS

SELECT * FROM [IMS].[Flags]
WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_Flagsxlate_flag_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_Flagsxlate_flag_Update]
	@Sequence int,
	@Account varchar(100),
	@Surname varchar(2),
	@Suffix varchar(100),
	@FlagLevel varchar(1),
	@FlagType varchar(1),
	@FlagNumber varchar(100),
	@FlagValue varchar(100),
	@FlagDate varchar(100),
	@LastModified varchar(100),
	@Processed varchar,
	@TrackingNum int,
	@ClientIP varchar(15),
	@WebIP varchar(15),
	@ClusterID varchar(100)
AS

IF @Account <> ''
	BEGIN
		DECLARE @Account_CASTED int
		IF @Account = '^'
			BEGIN
				SET @Account_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Account_CASTED = CAST(@Account AS int)
			END

		UPDATE [IMS].[Flags]
			SET Account = @Account_CASTED
		WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
	END

IF @Surname <> ''
	BEGIN
		DECLARE @Surname_CASTED char(2)
		IF @Surname = '^'
			BEGIN
				SET @Surname_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Surname_CASTED = CAST(@Surname AS char(2))
			END

		UPDATE [IMS].[Flags]
			SET Surname = @Surname_CASTED
		WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
	END

IF @Suffix <> ''
	BEGIN
		DECLARE @Suffix_CASTED int
		IF @Suffix = '^'
			BEGIN
				SET @Suffix_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Suffix_CASTED = CAST(@Suffix AS int)
			END

		UPDATE [IMS].[Flags]
			SET Suffix = @Suffix_CASTED
		WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
	END

IF @FlagLevel <> ''
	BEGIN
		DECLARE @FlagLevel_CASTED char(1)
		IF @FlagLevel = '^'
			BEGIN
				SET @FlagLevel_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @FlagLevel_CASTED = CAST(@FlagLevel AS char(1))
			END

		UPDATE [IMS].[Flags]
			SET FlagLevel = @FlagLevel_CASTED
		WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
	END

IF @FlagType <> ''
	BEGIN
		DECLARE @FlagType_CASTED char(1)
		IF @FlagType = '^'
			BEGIN
				SET @FlagType_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @FlagType_CASTED = CAST(@FlagType AS char(1))
			END

		UPDATE [IMS].[Flags]
			SET FlagType = @FlagType_CASTED
		WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
	END

IF @FlagNumber <> ''
	BEGIN
		DECLARE @FlagNumber_CASTED int
		IF @FlagNumber = '^'
			BEGIN
				SET @FlagNumber_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @FlagNumber_CASTED = CAST(@FlagNumber AS int)
			END

		UPDATE [IMS].[Flags]
			SET FlagNumber = @FlagNumber_CASTED
		WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
	END

IF @FlagValue <> ''
	BEGIN
		DECLARE @FlagValue_CASTED int
		IF @FlagValue = '^'
			BEGIN
				SET @FlagValue_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @FlagValue_CASTED = CAST(@FlagValue AS int)
			END

		UPDATE [IMS].[Flags]
			SET FlagValue = @FlagValue_CASTED
		WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
	END

IF @FlagDate <> ''
	BEGIN
		DECLARE @FlagDate_CASTED datetime
		IF @FlagDate = '^'
			BEGIN
				SET @FlagDate_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @FlagDate_CASTED = CAST(@FlagDate AS datetime)
			END

		UPDATE [IMS].[Flags]
			SET FlagDate = @FlagDate_CASTED
		WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
	END

IF @LastModified <> ''
	BEGIN
		DECLARE @LastModified_CASTED datetime
		IF @LastModified = '^'
			BEGIN
				SET @LastModified_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @LastModified_CASTED = CAST(@LastModified AS datetime)
			END

		UPDATE [IMS].[Flags]
			SET LastModified = @LastModified_CASTED
		WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
	END

IF @Processed <> ''
	BEGIN
		DECLARE @Processed_CASTED varchar
		IF @Processed = '^'
			BEGIN
				SET @Processed_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Processed_CASTED = CAST(@Processed AS varchar)
			END

		UPDATE [IMS].[Flags]
			SET Processed = @Processed_CASTED
		WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
	END

IF @ClientIP <> ''
	BEGIN
		DECLARE @ClientIP_CASTED char(15)
		IF @ClientIP = '^'
			BEGIN
				SET @ClientIP_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ClientIP_CASTED = CAST(@ClientIP AS char(15))
			END

		UPDATE [IMS].[Flags]
			SET ClientIP = @ClientIP_CASTED
		WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
	END

IF @WebIP <> ''
	BEGIN
		DECLARE @WebIP_CASTED char(15)
		IF @WebIP = '^'
			BEGIN
				SET @WebIP_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @WebIP_CASTED = CAST(@WebIP AS char(15))
			END

		UPDATE [IMS].[Flags]
			SET WebIP = @WebIP_CASTED
		WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
	END

IF @ClusterID <> ''
	BEGIN
		DECLARE @ClusterID_CASTED int
		IF @ClusterID = '^'
			BEGIN
				SET @ClusterID_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ClusterID_CASTED = CAST(@ClusterID AS int)
			END

		UPDATE [IMS].[Flags]
			SET ClusterID = @ClusterID_CASTED
		WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_GetBlockedIpTrackingNumberList]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [IMS].[sp_GetBlockedIpTrackingNumberList]
(
	@ip VARCHAR(20)
)
AS
	BEGIN

DECLARE @velocitylimit INT = ISNULL((SELECT TOP 1 c.VelocityLimit FROM IPBlockingConfiguration c), 0)
PRINT 'Velocity Limit: ' + CAST(@velocitylimit AS VARCHAR(20))
DECLARE @historymonths INT = ISNULL((SELECT TOP 1 c.HistoryMonths FROM IPBlockingConfiguration c), 0)
PRINT 'History Months: ' + CAST(@historymonths AS VARCHAR(20))
DECLARE @historydate DATE = DATEADD(MONTH, -@historymonths, GETDATE())
PRINT 'History Date: ' + CAST(@historydate AS VARCHAR(20))

DECLARE @ipcount INT = (SELECT COUNT(DISTINCT t.TrackingNum) FROM NewMemberRequestTracking t WHERE t.ClientIP = @ip AND t.StatusDateTime >= @historydate)
PRINT 'Tracking Number Count: ' + CAST(@ipcount AS VARCHAR(20))

IF @velocitylimit <> 0 AND @historymonths <> 0 AND @ipcount >= @velocitylimit

	SELECT DISTINCT STUFF((
		SELECT DISTINCT ',' + CAST(t.TrackingNum AS VARCHAR(20))
		FROM NewMemberRequestTracking t
		WHERE t.ClientIP = @ip
			AND t.StatusDateTime >= @historydate
		FOR XML PATH('')
	),1,1,'') AS trackingnumberlist
	FROM NewMemberRequestTracking nmrt
	WHERE nmrt.ClientIP = @ip
		AND nmrt.StatusDateTime >= @historydate
	GROUP BY TrackingNum

ELSE

	SELECT '' AS trackingnumberlist

END
GO
/****** Object:  StoredProcedure [IMS].[sp_GetHttpSettings]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [IMS].[sp_GetHttpSettings]
@scriptId varchar(100)
AS
BEGIN

	select 
	name = isnull(s.name, d.name),
	value = isnull(s.value, d.value),
	id = isnull(s.id, d.id)

	from
	(
		select s.name, s.value, s.id
		from ims.HttpSetting s
		where s.scriptId = @scriptId
	) s
	full outer join 
	(
		select s.name, s.value, s.id
		from ims.HttpSetting s
		where s.scriptId = '*'
	) d on s.name = d.name
	


END
GO
/****** Object:  StoredProcedure [IMS].[sp_GetNextTrackingNum]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [IMS].[sp_GetNextTrackingNum] AS
/******************************************************************************
**		File: 
**		Name: sp_GetNextTrackingNum
**		Desc: Sequentially updates and returns the next trackingnumber
**
**		This template can be customized:
**              
**		Return values: unique id
** 
**		Called by:   
**              
**		Parameters:
**		Input							Output
**     ----------							-----------
**
**		Auth: 
**		Date: 
*******************************************************************************
**		Change History
*******************************************************************************
**		Date:			Author:	Version		Description:
**		--------		--------	-------		-------------------------------------------
**    12/12/06		Bob G			1.0.0
*******************************************************************************/
Declare @PK int
BEGIN

			UPDATE IMS.NextTrackingNum SET @PK = TrackingNum + 1, TrackingNum = @PK
			return @PK
			
/*	SET NOCOUNT ON */
END
GO
/****** Object:  StoredProcedure [IMS].[sp_ILAApplicationSearch_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_ILAApplicationSearch_Select]
	@TrackingNum varchar(9),
	@SSN varchar(9),
	@Account varchar(9),
	@AppNumber varchar(9),
	@ApplyDate varchar(10)
AS

	DECLARE @ClientShortName varchar(10)
	SELECT @ClientShortName = ClientShortName from udt_ClientSettings

	--We are executing a string, so we have to verify that we are not executing SQL injection scripts. 
	--Because the short code is a defined value, and not a user input, we can check for ' or -- because these should never be in the name (because we control what this is). 
	--Normally I would recommend never ever ever (emphasize repeatedly) executing a string, but because our db is dristributed to client networks 
	--and we want to prevent passing other client names around, then this might be the one time that this actually makes sense to use. 
	if @ClientShortName IS NOT NULL AND CHARINDEX('''',@ClientShortName) = 0 AND CHARINDEX('--',@ClientShortName) = 0
	BEGIN
		DECLARE @ScaryExecutableString varchar(500)
		SET @ScaryExecutableString = N'IMS.sp' + @ClientShortName + '_ILAApplicationSearch_Select'
		Exec @ScaryExecutableString @TrackingNum, @SSN, @Account, @AppNumber, @ApplyDate
	END	
	

GO
/****** Object:  StoredProcedure [IMS].[sp_ILABorrower_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_ILABorrower_Select]
	@TrackingNum int,
	@BorrowerTypeCode char(1)
AS

SELECT * FROM ILA_Borrower
WHERE TrackingNum = @TrackingNum AND (@BorrowerTypeCode = '*' OR BorrowerTypeCode = @BorrowerTypeCode)
ORDER BY BorrowerNum

GO
/****** Object:  StoredProcedure [IMS].[sp_ILABorrowerAddress_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_ILABorrowerAddress_Select]
	@AddressType char(4),
	@TrackingNum int,
	@BorrowerNum smallint
AS

SELECT * FROM IMS.ILA_BorrowerAddress
WHERE TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum AND (@AddressType = '*' OR AddressTypeCode = @AddressType)
GO
/****** Object:  StoredProcedure [IMS].[sp_ILABorrowerDebt_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_ILABorrowerDebt_Select]
	@DebtTypeCode char(4),
	@TrackingNum int,
	@BorrowerNum smallint
AS

SELECT * FROM IMS.ILA_BorrowerDebt
WHERE TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum AND (@DebtTypeCode = '*' OR DebtTypeCode = @DebtTypeCode)
GO
/****** Object:  StoredProcedure [IMS].[sp_ILABorrowerEmployment_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_ILABorrowerEmployment_Select]
	@EmployerType char(4),
	@TrackingNum int,
	@BorrowerNum smallint
AS

SELECT * FROM IMS.ILA_BorrowerEmployment
WHERE TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum AND (@EmployerType = '*' OR EmployerTypeCode = @EmployerType)

GO
/****** Object:  StoredProcedure [IMS].[sp_ILABorrowerIncome_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_ILABorrowerIncome_Select]
	@IncomeTypeCode char(4),
	@TrackingNum int,
	@BorrowerNum smallint
AS

SELECT * FROM IMS.ILA_BorrowerIncome
WHERE TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum AND (@IncomeTypeCode = '*' OR IncomeTypeCode = @IncomeTypeCode)
GO
/****** Object:  StoredProcedure [IMS].[sp_ILAProductDetail_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_ILAProductDetail_Select]
	@Sequence smallint,
	@TrackingNum int
AS

SELECT * FROM ILA_ProductDetail
WHERE TrackingNum = @TrackingNum AND (@Sequence = 0 OR Sequence = @Sequence)

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAQuestionsAnswer_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_ILAQuestionsAnswer_Select]
	@Id varchar(50),
	@TrackingNum int
AS

SELECT * FROM ILA_QuestionsAnswer
WHERE TrackingNum = @TrackingNum AND (@Id = '*' OR Id = @Id)

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_AppInfo_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ILAxlate_AppInfo_Delete]
	@TrackingNum int
AS

DELETE FROM ILA_ApplicationInfo
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_AppInfo_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ILAxlate_AppInfo_DeleteAll]
	@TrackingNum int
AS

DELETE FROM ILA_ApplicationInfo
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_AppInfo_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ILAxlate_AppInfo_Insert]
	@ApplyDate datetime,
	@ApplicationType char(1),
	@AppNumber varchar(30),
	@AppStatus varchar(30),
	@Account int,
	@PrimarySSN char(9),
	@Branch smallint,
	@ClosingBranch varchar(30),
	@Notes varchar(2000),
	@Mode varchar(10),
	@AmountFinanced int,
	@ApprovedRate int,
	@ApprovedTerm smallint,
	@NMRShoppingCartID int,
	@ThirdPartyIdentifier varchar(1000),
	@OaoIlaOptions int,
	@TrackingNum int
AS

INSERT INTO ILA_ApplicationInfo
(TrackingNum, ApplyDate, ApplicationType, AppNumber, AppStatus, Account, PrimarySSN, Branch, ClosingBranch, Notes, Mode, AmountFinanced, ApprovedRate, ApprovedTerm, NMRShoppingCartID, ThirdPartyIdentifier, OaoIlaOptions)
VALUES
(@TrackingNum, @ApplyDate, @ApplicationType, @AppNumber, @AppStatus, @Account, @PrimarySSN, @Branch, @ClosingBranch, @Notes, @Mode, @AmountFinanced, @ApprovedRate, @ApprovedTerm, @NMRShoppingCartID, @ThirdPartyIdentifier, @OaoIlaOptions)

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_AppInfo_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ILAxlate_AppInfo_InsertIfNew]
	@ApplyDate datetime,
	@ApplicationType char(1),
	@AppNumber varchar(30),
	@AppStatus varchar(30),
	@Account int,
	@PrimarySSN char(9),
	@Branch smallint,
	@ClosingBranch varchar(30),
	@Notes varchar(2000),
	@Mode varchar(10),
	@AmountFinanced int,
	@ApprovedRate int,
	@ApprovedTerm smallint,
	@NMRShoppingCartID int,
	@ThirdPartyIdentifier varchar(1000),
	@OaoIlaOptions int,
	@TrackingNum int
AS

IF NOT EXISTS (SELECT * FROM ILA_ApplicationInfo WHERE 1=1 AND TrackingNum = @TrackingNum)
	BEGIN
		INSERT INTO ILA_ApplicationInfo
		(TrackingNum, ApplyDate, ApplicationType, AppNumber, AppStatus, Account, PrimarySSN, Branch, ClosingBranch, Notes, Mode, AmountFinanced, ApprovedRate, ApprovedTerm, NMRShoppingCartID, ThirdPartyIdentifier, OaoIlaOptions)
		VALUES
		(@TrackingNum, @ApplyDate, @ApplicationType, @AppNumber, @AppStatus, @Account, @PrimarySSN, @Branch, @ClosingBranch, @Notes, @Mode, @AmountFinanced, @ApprovedRate, @ApprovedTerm, @NMRShoppingCartID, @ThirdPartyIdentifier, @OaoIlaOptions)
	END
ELSE	BEGIN
		UPDATE ILA_ApplicationInfo SET
			ApplyDate = @ApplyDate,
			ApplicationType = @ApplicationType,
			AppNumber = @AppNumber,
			AppStatus = @AppStatus,
			Account = @Account,
			PrimarySSN = @PrimarySSN,
			Branch = @Branch,
			ClosingBranch = @ClosingBranch,
			Notes = @Notes,
			Mode = @Mode,
			AmountFinanced = @AmountFinanced,
			ApprovedRate = @ApprovedRate,
			ApprovedTerm = @ApprovedTerm,
			NMRShoppingCartID = @NMRShoppingCartID,
			ThirdPartyIdentifier = @ThirdPartyIdentifier,
			OaoIlaOptions = @OaoIlaOptions
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_AppInfo_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ILAxlate_AppInfo_Select]
	@TrackingNum int
AS

SELECT * FROM ILA_ApplicationInfo
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_AppInfo_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ILAxlate_AppInfo_SelectAll]
	@TrackingNum int
AS

SELECT * FROM ILA_ApplicationInfo
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_AppInfo_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ILAxlate_AppInfo_Update]
	@ApplyDate varchar(100),
	@ApplicationType varchar(1),
	@AppNumber varchar(30),
	@AppStatus varchar(30),
	@Account varchar(100),
	@PrimarySSN varchar(9),
	@Branch varchar(100),
	@ClosingBranch varchar(30),
	@Notes varchar(2000),
	@Mode varchar(10),
	@AmountFinanced varchar(100),
	@ApprovedRate varchar(100),
	@ApprovedTerm varchar(100),
	@NMRShoppingCartID varchar(100),
	@ThirdPartyIdentifier varchar(1000),
	@TrackingNum int
AS

IF @ApplyDate <> ''
	BEGIN
		DECLARE @ApplyDate_CASTED datetime
		IF @ApplyDate = '^'
			BEGIN
				SET @ApplyDate_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ApplyDate_CASTED = CAST(@ApplyDate AS datetime)
			END

		UPDATE ILA_ApplicationInfo
			SET ApplyDate = @ApplyDate_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @ApplicationType <> ''
	BEGIN
		DECLARE @ApplicationType_CASTED char(1)
		IF @ApplicationType = '^'
			BEGIN
				SET @ApplicationType_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ApplicationType_CASTED = CAST(@ApplicationType AS char(1))
			END

		UPDATE ILA_ApplicationInfo
			SET ApplicationType = @ApplicationType_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @AppNumber <> ''
	BEGIN
		DECLARE @AppNumber_CASTED varchar(30)
		IF @AppNumber = '^'
			BEGIN
				SET @AppNumber_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @AppNumber_CASTED = CAST(@AppNumber AS varchar(30))
			END

		UPDATE ILA_ApplicationInfo
			SET AppNumber = @AppNumber_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @AppStatus <> ''
	BEGIN
		DECLARE @AppStatus_CASTED varchar(30)
		IF @AppStatus = '^'
			BEGIN
				SET @AppStatus_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @AppStatus_CASTED = CAST(@AppStatus AS varchar(30))
			END

		UPDATE ILA_ApplicationInfo
			SET AppStatus = @AppStatus_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @Account <> ''
	BEGIN
		DECLARE @Account_CASTED int
		IF @Account = '^'
			BEGIN
				SET @Account_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Account_CASTED = CAST(@Account AS int)
			END

		UPDATE ILA_ApplicationInfo
			SET Account = @Account_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @PrimarySSN <> ''
	BEGIN
		DECLARE @PrimarySSN_CASTED char(9)
		IF @PrimarySSN = '^'
			BEGIN
				SET @PrimarySSN_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @PrimarySSN_CASTED = CAST(@PrimarySSN AS char(9))
			END

		UPDATE ILA_ApplicationInfo
			SET PrimarySSN = @PrimarySSN_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @Branch <> ''
	BEGIN
		DECLARE @Branch_CASTED smallint
		IF @Branch = '^'
			BEGIN
				SET @Branch_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Branch_CASTED = CAST(@Branch AS smallint)
			END

		UPDATE ILA_ApplicationInfo
			SET Branch = @Branch_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @ClosingBranch <> ''
	BEGIN
		DECLARE @ClosingBranch_CASTED varchar(30)
		IF @ClosingBranch = '^'
			BEGIN
				SET @ClosingBranch_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ClosingBranch_CASTED = CAST(@ClosingBranch AS varchar(30))
			END

		UPDATE ILA_ApplicationInfo
			SET ClosingBranch = @ClosingBranch_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @Notes <> ''
	BEGIN
		DECLARE @Notes_CASTED varchar(2000)
		IF @Notes = '^'
			BEGIN
				SET @Notes_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Notes_CASTED = CAST(@Notes AS varchar(2000))
			END

		UPDATE ILA_ApplicationInfo
			SET Notes = @Notes_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @Mode <> ''
	BEGIN
		DECLARE @Mode_CASTED varchar(10)
		IF @Mode = '^'
			BEGIN
				SET @Mode_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Mode_CASTED = CAST(@Mode AS varchar(10))
			END

		UPDATE ILA_ApplicationInfo
			SET Mode = @Mode_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @AmountFinanced <> ''
	BEGIN
		DECLARE @AmountFinanced_CASTED int
		IF @AmountFinanced = '^'
			BEGIN
				SET @AmountFinanced_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @AmountFinanced_CASTED = CAST(@AmountFinanced AS int)
			END

		UPDATE ILA_ApplicationInfo
			SET AmountFinanced = @AmountFinanced_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @ApprovedRate <> ''
	BEGIN
		DECLARE @ApprovedRate_CASTED int
		IF @ApprovedRate = '^'
			BEGIN
				SET @ApprovedRate_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ApprovedRate_CASTED = CAST(@ApprovedRate AS int)
			END

		UPDATE ILA_ApplicationInfo
			SET ApprovedRate = @ApprovedRate_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @ApprovedTerm <> ''
	BEGIN
		DECLARE @ApprovedTerm_CASTED smallint
		IF @ApprovedTerm = '^'
			BEGIN
				SET @ApprovedTerm_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ApprovedTerm_CASTED = CAST(@ApprovedTerm AS smallint)
			END

		UPDATE ILA_ApplicationInfo
			SET ApprovedTerm = @ApprovedTerm_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @NMRShoppingCartID <> ''
	BEGIN
		DECLARE @NMRShoppingCartID_CASTED int
		IF @NMRShoppingCartID = '^'
			BEGIN
				SET @NMRShoppingCartID_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @NMRShoppingCartID_CASTED = CAST(@NMRShoppingCartID AS int)
			END

		UPDATE ILA_ApplicationInfo
			SET NMRShoppingCartID = @NMRShoppingCartID_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @ThirdPartyIdentifier <> ''
	BEGIN
		DECLARE @ThirdPartyIdentifier_CASTED varchar(1000)
		IF @ThirdPartyIdentifier = '^'
			BEGIN
				SET @ThirdPartyIdentifier_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ThirdPartyIdentifier_CASTED = CAST(@ThirdPartyIdentifier AS varchar(1000))
			END

		UPDATE ILA_ApplicationInfo
			SET ThirdPartyIdentifier = @ThirdPartyIdentifier_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_Application_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ILAxlate_Application_Delete]
	@TrackingNum int
AS

DELETE FROM ILA_Application
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_Application_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ILAxlate_Application_DeleteAll]
	@TrackingNum int
AS

DELETE FROM ILA_Application
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_Application_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ILAxlate_Application_Insert]
	@TrackingNum int,
	@Password varchar(1000),
	@MemberValidatedSource varchar(100),
	@UserSessionXML varchar(Max),
	@FullLenderResponse varchar(Max),
	@ApplicationStatus varchar(500),
	@ApplicationStatusDetails varchar(500),
	@ApplicationSourceType varchar(500)
AS

INSERT INTO ILA_Application
(TrackingNum, Password, MemberValidatedSource, UserSessionXML, FullLenderResponse, ApplicationStatus, ApplicationStatusDetails, ApplicationSourceType)
VALUES
(@TrackingNum, @Password, @MemberValidatedSource, @UserSessionXML, @FullLenderResponse, @ApplicationStatus, @ApplicationStatusDetails, @ApplicationSourceType)

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_Application_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ILAxlate_Application_InsertIfNew]
	@TrackingNum int,
	@Password varchar(1000),
	@MemberValidatedSource varchar(100),
	@UserSessionXML varchar(Max),
	@FullLenderResponse varchar(Max),
	@ApplicationStatus varchar(500),
	@ApplicationStatusDetails varchar(500),
	@ApplicationSourceType varchar(500)
AS

IF NOT EXISTS (SELECT * FROM ILA_Application WHERE 1=1 AND TrackingNum = @TrackingNum)
	BEGIN
		INSERT INTO ILA_Application
		(TrackingNum, Password, MemberValidatedSource, UserSessionXML, FullLenderResponse, ApplicationStatus, ApplicationStatusDetails, ApplicationSourceType)
		VALUES
		(@TrackingNum, @Password, @MemberValidatedSource, @UserSessionXML, @FullLenderResponse, @ApplicationStatus, @ApplicationStatusDetails, @ApplicationSourceType)
	END
ELSE	BEGIN
		UPDATE ILA_Application SET
			Password = @Password,
			MemberValidatedSource = @MemberValidatedSource,
			UserSessionXML = @UserSessionXML,
			FullLenderResponse = @FullLenderResponse,
			ApplicationStatus = @ApplicationStatus,
			ApplicationStatusDetails = @ApplicationStatusDetails,
			ApplicationSourceType = @ApplicationSourceType
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_Application_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ILAxlate_Application_Select]
	@TrackingNum int
AS

SELECT * FROM ILA_Application
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_Application_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ILAxlate_Application_SelectAll]
	@TrackingNum int
AS

SELECT * FROM ILA_Application
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_Application_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ILAxlate_Application_Update]
	@TrackingNum int,
	@Password varchar(1000),
	@MemberValidatedSource varchar(100),
	@UserSessionXML varchar(Max),
	@FullLenderResponse varchar(Max),
	@ApplicationStatus varchar(500),
	@ApplicationStatusDetails varchar(500),
	@ApplicationSourceType varchar(500)
AS

IF @Password <> ''
	BEGIN
		DECLARE @Password_CASTED varchar(1000)
		IF @Password = '^'
			BEGIN
				SET @Password_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Password_CASTED = CAST(@Password AS varchar(1000))
			END

		UPDATE ILA_Application
			SET Password = @Password_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @MemberValidatedSource <> ''
	BEGIN
		DECLARE @MemberValidatedSource_CASTED varchar(100)
		IF @MemberValidatedSource = '^'
			BEGIN
				SET @MemberValidatedSource_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @MemberValidatedSource_CASTED = CAST(@MemberValidatedSource AS varchar(100))
			END

		UPDATE ILA_Application
			SET MemberValidatedSource = @MemberValidatedSource_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @UserSessionXML <> ''
	BEGIN
		DECLARE @UserSessionXML_CASTED varchar(Max)
		IF @UserSessionXML = '^'
			BEGIN
				SET @UserSessionXML_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @UserSessionXML_CASTED = CAST(@UserSessionXML AS varchar(Max))
			END

		UPDATE ILA_Application
			SET UserSessionXML = @UserSessionXML_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @FullLenderResponse <> ''
	BEGIN
		DECLARE @FullLenderResponse_CASTED varchar(Max)
		IF @FullLenderResponse = '^'
			BEGIN
				SET @FullLenderResponse_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @FullLenderResponse_CASTED = CAST(@FullLenderResponse AS varchar(Max))
			END

		UPDATE ILA_Application
			SET FullLenderResponse = @FullLenderResponse_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @ApplicationStatus <> ''
	BEGIN
		DECLARE @ApplicationStatus_CASTED varchar(500)
		IF @ApplicationStatus = '^'
			BEGIN
				SET @ApplicationStatus_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ApplicationStatus_CASTED = CAST(@ApplicationStatus AS varchar(500))
			END

		UPDATE ILA_Application
			SET ApplicationStatus = @ApplicationStatus_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @ApplicationStatusDetails <> ''
	BEGIN
		DECLARE @ApplicationStatusDetails_CASTED varchar(500)
		IF @ApplicationStatusDetails = '^'
			BEGIN
				SET @ApplicationStatusDetails_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ApplicationStatusDetails_CASTED = CAST(@ApplicationStatusDetails AS varchar(500))
			END

		UPDATE ILA_Application
			SET ApplicationStatusDetails = @ApplicationStatusDetails_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @ApplicationSourceType <> ''
	BEGIN
		DECLARE @ApplicationSourceType_CASTED varchar(500)
		IF @ApplicationSourceType = '^'
			BEGIN
				SET @ApplicationSourceType_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ApplicationSourceType_CASTED = CAST(@ApplicationSourceType AS varchar(500))
			END

		UPDATE ILA_Application
			SET ApplicationSourceType = @ApplicationSourceType_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_Borrower_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_ILAxlate_Borrower_Delete]
	@BorrowerTypeCode char(1),
	@TrackingNum int
AS

DELETE FROM ILA_Borrower
WHERE 1=1 AND BorrowerTypeCode = @BorrowerTypeCode AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_Borrower_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_ILAxlate_Borrower_DeleteAll]
	@BorrowerTypeCode char(1),
	@TrackingNum int
AS

DELETE FROM ILA_Borrower
WHERE 1=1 AND BorrowerTypeCode = @BorrowerTypeCode AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_Borrower_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ILAxlate_Borrower_Insert]
	@BorrowerTypeCode char(1),
	@BorrowerNum smallint,
	@Association varchar(20),
	@Account int,
	@HasMemberAccount varchar(20),
	@FName varchar(20),
	@LName varchar(20),
	@MInitial varchar(20),
	@SSN char(9),
	@DriversLicenseNum varchar(30),
	@DriversLicenseState char(2),
	@DriversLicenseIssueDate datetime,
	@DriversLicenseExpirationDate datetime,
	@DOB datetime,
	@MaritalStatus char(1),
	@NumDependents char(2),
	@SelfEmployed char(1),
	@Retired char(1),
	@CashAssets int,
	@Gender char(1),
	@PreferredContactMethod char(10),
	@MortgageBalance int,
	@OtherAssets int,
	@TotalDebts int,
	@LossExists char(1),
	@ThirdPartyIdentifier varchar(1000),
	@CreditScoreType1 int,
	@CreditScoreType2 int,
	@CreditScoreType3 int,
	@TrackingNum int,
	@ClientIP varchar(15),
	@WebIP varchar(15),
	@ClusterID char(10),
	@LastModified datetime
AS

INSERT INTO ILA_Borrower
(BorrowerTypeCode, TrackingNum, BorrowerNum, Association, Account, HasMemberAccount, FName, LName, MInitial, SSN, DriversLicenseNum, DriversLicenseState, DriversLicenseIssueDate, DriversLicenseExpirationDate, DOB, MaritalStatus, NumDependents, SelfEmployed, Retired, CashAssets, Gender, PreferredContactMethod, MortgageBalance, OtherAssets, TotalDebts, LossExists, ThirdPartyIdentifier, CreditScoreType1, CreditScoreType2, CreditScoreType3, ClientIP, WebIP, ClusterID, LastModified)
VALUES
(@BorrowerTypeCode, @TrackingNum, @BorrowerNum, @Association, @Account, @HasMemberAccount, @FName, @LName, @MInitial, @SSN, @DriversLicenseNum, @DriversLicenseState, @DriversLicenseIssueDate, @DriversLicenseExpirationDate, @DOB, @MaritalStatus, @NumDependents, @SelfEmployed, @Retired, @CashAssets, @Gender, @PreferredContactMethod, @MortgageBalance, @OtherAssets, @TotalDebts, @LossExists, @ThirdPartyIdentifier, @CreditScoreType1, @CreditScoreType2, @CreditScoreType3, @ClientIP, @WebIP, @ClusterID, @LastModified)

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_Borrower_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ILAxlate_Borrower_InsertIfNew]
	@BorrowerTypeCode char(1),
	@BorrowerNum smallint,
	@Association varchar(20),
	@Account int,
	@HasMemberAccount varchar(20),
	@FName varchar(20),
	@LName varchar(20),
	@MInitial varchar(20),
	@SSN char(9),
	@DriversLicenseNum varchar(30),
	@DriversLicenseState char(2),
	@DriversLicenseIssueDate datetime,
	@DriversLicenseExpirationDate datetime,
	@DOB datetime,
	@MaritalStatus char(1),
	@NumDependents char(2),
	@SelfEmployed char(1),
	@Retired char(1),
	@CashAssets int,
	@Gender char(1),
	@PreferredContactMethod char(10),
	@MortgageBalance int,
	@OtherAssets int,
	@TotalDebts int,
	@LossExists char(1),
	@ThirdPartyIdentifier varchar(1000),
	@CreditScoreType1 int,
	@CreditScoreType2 int,
	@CreditScoreType3 int,
	@TrackingNum int,
	@ClientIP varchar(15),
	@WebIP varchar(15),
	@ClusterID char(10),
	@LastModified datetime
AS

IF NOT EXISTS (SELECT * FROM ILA_Borrower WHERE 1=1 AND BorrowerTypeCode = @BorrowerTypeCode AND TrackingNum = @TrackingNum)
	BEGIN
		INSERT INTO ILA_Borrower
		(BorrowerTypeCode, TrackingNum, BorrowerNum, Association, Account, HasMemberAccount, FName, LName, MInitial, SSN, DriversLicenseNum, DriversLicenseState, DriversLicenseIssueDate, DriversLicenseExpirationDate, DOB, MaritalStatus, NumDependents, SelfEmployed, Retired, CashAssets, Gender, PreferredContactMethod, MortgageBalance, OtherAssets, TotalDebts, LossExists, ThirdPartyIdentifier, CreditScoreType1, CreditScoreType2, CreditScoreType3, ClientIP, WebIP, ClusterID, LastModified)
		VALUES
		(@BorrowerTypeCode, @TrackingNum, @BorrowerNum, @Association, @Account, @HasMemberAccount, @FName, @LName, @MInitial, @SSN, @DriversLicenseNum, @DriversLicenseState, @DriversLicenseIssueDate, @DriversLicenseExpirationDate, @DOB, @MaritalStatus, @NumDependents, @SelfEmployed, @Retired, @CashAssets, @Gender, @PreferredContactMethod, @MortgageBalance, @OtherAssets, @TotalDebts, @LossExists, @ThirdPartyIdentifier, @CreditScoreType1, @CreditScoreType2, @CreditScoreType3, @ClientIP, @WebIP, @ClusterID, @LastModified)
	END
ELSE	BEGIN
		UPDATE ILA_Borrower SET
			BorrowerNum = @BorrowerNum,
			Association = @Association,
			Account = @Account,
			HasMemberAccount = @HasMemberAccount,
			FName = @FName,
			LName = @LName,
			MInitial = @MInitial,
			SSN = @SSN,
			DriversLicenseNum = @DriversLicenseNum,
			DriversLicenseState = @DriversLicenseState,
			DriversLicenseIssueDate = @DriversLicenseIssueDate,
			DriversLicenseExpirationDate = @DriversLicenseExpirationDate,
			DOB = @DOB,
			MaritalStatus = @MaritalStatus,
			NumDependents = @NumDependents,
			SelfEmployed = @SelfEmployed,
			Retired = @Retired,
			CashAssets = @CashAssets,
			Gender = @Gender,
			PreferredContactMethod = @PreferredContactMethod,
			MortgageBalance = @MortgageBalance,
			OtherAssets = @OtherAssets,
			TotalDebts = @TotalDebts,
			LossExists = @LossExists,
			ThirdPartyIdentifier = @ThirdPartyIdentifier,
			CreditScoreType1 = @CreditScoreType1,
			CreditScoreType2 = @CreditScoreType2,
			CreditScoreType3 = @CreditScoreType3,
			ClientIP = @ClientIP,
			WebIP = @WebIP,
			ClusterID = @ClusterID,
			LastModified = @LastModified
		WHERE 1=1 AND BorrowerTypeCode = @BorrowerTypeCode AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_Borrower_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ILAxlate_Borrower_Select]
	@BorrowerTypeCode char(1),
	@TrackingNum int
AS

EXEC IMS.sp_ILABorrower_Select @TrackingNum, @BorrowerTypeCode
GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_Borrower_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ILAxlate_Borrower_Update]
	@BorrowerTypeCode char(1),
	@BorrowerNum varchar(100),
	@Association varchar(20),
	@Account varchar(100),
	@HasMemberAccount varchar(20),
	@FName varchar(20),
	@LName varchar(20),
	@MInitial varchar(20),
	@SSN varchar(9),
	@DriversLicenseNum varchar(30),
	@DriversLicenseState varchar(2),
	@DriversLicenseIssueDate varchar(100),
	@DriversLicenseExpirationDate varchar(100),
	@DOB varchar(100),
	@MaritalStatus varchar(1),
	@NumDependents varchar(2),
	@SelfEmployed varchar(1),
	@Retired varchar(1),
	@CashAssets varchar(100),
	@Gender varchar(1),
	@PreferredContactMethod varchar(10),
	@MortgageBalance varchar(100),
	@OtherAssets varchar(100),
	@TotalDebts varchar(100),
	@LossExists varchar(1),
	@ThirdPartyIdentifier varchar(1000),
	@CreditScoreType1 varchar(100),
	@CreditScoreType2 varchar(100),
	@CreditScoreType3 varchar(100),
	@TrackingNum int,
	@ClientIP varchar(15),
	@WebIP varchar(15),
	@ClusterID varchar(10),
	@LastModified varchar(100)
AS

IF @BorrowerNum <> ''
	BEGIN
		DECLARE @BorrowerNum_CASTED smallint
		IF @BorrowerNum = '^'
			BEGIN
				SET @BorrowerNum_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @BorrowerNum_CASTED = CAST(@BorrowerNum AS smallint)
			END

		UPDATE ILA_Borrower
			SET BorrowerNum = @BorrowerNum_CASTED
		WHERE 1=1 AND BorrowerTypeCode = @BorrowerTypeCode AND TrackingNum = @TrackingNum
	END

IF @Association <> ''
	BEGIN
		DECLARE @Association_CASTED varchar(20)
		IF @Association = '^'
			BEGIN
				SET @Association_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Association_CASTED = CAST(@Association AS varchar(20))
			END

		UPDATE ILA_Borrower
			SET Association = @Association_CASTED
		WHERE 1=1 AND BorrowerTypeCode = @BorrowerTypeCode AND TrackingNum = @TrackingNum
	END

IF @Account <> ''
	BEGIN
		DECLARE @Account_CASTED int
		IF @Account = '^'
			BEGIN
				SET @Account_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Account_CASTED = CAST(@Account AS int)
			END

		UPDATE ILA_Borrower
			SET Account = @Account_CASTED
		WHERE 1=1 AND BorrowerTypeCode = @BorrowerTypeCode AND TrackingNum = @TrackingNum
	END

IF @HasMemberAccount <> ''
	BEGIN
		DECLARE @HasMemberAccount_CASTED varchar(20)
		IF @HasMemberAccount = '^'
			BEGIN
				SET @HasMemberAccount_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @HasMemberAccount_CASTED = CAST(@HasMemberAccount AS varchar(20))
			END

		UPDATE ILA_Borrower
			SET HasMemberAccount = @HasMemberAccount_CASTED
		WHERE 1=1 AND BorrowerTypeCode = @BorrowerTypeCode AND TrackingNum = @TrackingNum
	END

IF @FName <> ''
	BEGIN
		DECLARE @FName_CASTED varchar(20)
		IF @FName = '^'
			BEGIN
				SET @FName_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @FName_CASTED = CAST(@FName AS varchar(20))
			END

		UPDATE ILA_Borrower
			SET FName = @FName_CASTED
		WHERE 1=1 AND BorrowerTypeCode = @BorrowerTypeCode AND TrackingNum = @TrackingNum
	END

IF @LName <> ''
	BEGIN
		DECLARE @LName_CASTED varchar(20)
		IF @LName = '^'
			BEGIN
				SET @LName_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @LName_CASTED = CAST(@LName AS varchar(20))
			END

		UPDATE ILA_Borrower
			SET LName = @LName_CASTED
		WHERE 1=1 AND BorrowerTypeCode = @BorrowerTypeCode AND TrackingNum = @TrackingNum
	END

IF @MInitial <> ''
	BEGIN
		DECLARE @MInitial_CASTED varchar(20)
		IF @MInitial = '^'
			BEGIN
				SET @MInitial_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @MInitial_CASTED = CAST(@MInitial AS varchar(20))
			END

		UPDATE ILA_Borrower
			SET MInitial = @MInitial_CASTED
		WHERE 1=1 AND BorrowerTypeCode = @BorrowerTypeCode AND TrackingNum = @TrackingNum
	END

IF @SSN <> ''
	BEGIN
		DECLARE @SSN_CASTED char(9)
		IF @SSN = '^'
			BEGIN
				SET @SSN_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @SSN_CASTED = CAST(@SSN AS char(9))
			END

		UPDATE ILA_Borrower
			SET SSN = @SSN_CASTED
		WHERE 1=1 AND BorrowerTypeCode = @BorrowerTypeCode AND TrackingNum = @TrackingNum
	END

IF @DriversLicenseNum <> ''
	BEGIN
		DECLARE @DriversLicenseNum_CASTED varchar(30)
		IF @DriversLicenseNum = '^'
			BEGIN
				SET @DriversLicenseNum_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @DriversLicenseNum_CASTED = CAST(@DriversLicenseNum AS varchar(30))
			END

		UPDATE ILA_Borrower
			SET DriversLicenseNum = @DriversLicenseNum_CASTED
		WHERE 1=1 AND BorrowerTypeCode = @BorrowerTypeCode AND TrackingNum = @TrackingNum
	END

IF @DriversLicenseState <> ''
	BEGIN
		DECLARE @DriversLicenseState_CASTED char(2)
		IF @DriversLicenseState = '^'
			BEGIN
				SET @DriversLicenseState_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @DriversLicenseState_CASTED = CAST(@DriversLicenseState AS char(2))
			END

		UPDATE ILA_Borrower
			SET DriversLicenseState = @DriversLicenseState_CASTED
		WHERE 1=1 AND BorrowerTypeCode = @BorrowerTypeCode AND TrackingNum = @TrackingNum
	END

IF @DriversLicenseIssueDate <> ''
	BEGIN
		DECLARE @DriversLicenseIssueDate_CASTED datetime
		IF @DriversLicenseIssueDate = '^'
			BEGIN
				SET @DriversLicenseIssueDate_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @DriversLicenseIssueDate_CASTED = CAST(@DriversLicenseIssueDate AS datetime)
			END

		UPDATE ILA_Borrower
			SET DriversLicenseIssueDate = @DriversLicenseIssueDate_CASTED
		WHERE 1=1 AND BorrowerTypeCode = @BorrowerTypeCode AND TrackingNum = @TrackingNum
	END

IF @DriversLicenseExpirationDate <> ''
	BEGIN
		DECLARE @DriversLicenseExpirationDate_CASTED datetime
		IF @DriversLicenseExpirationDate = '^'
			BEGIN
				SET @DriversLicenseExpirationDate_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @DriversLicenseExpirationDate_CASTED = CAST(@DriversLicenseExpirationDate AS datetime)
			END

		UPDATE ILA_Borrower
			SET DriversLicenseExpirationDate = @DriversLicenseExpirationDate_CASTED
		WHERE 1=1 AND BorrowerTypeCode = @BorrowerTypeCode AND TrackingNum = @TrackingNum
	END

IF @DOB <> ''
	BEGIN
		DECLARE @DOB_CASTED datetime
		IF @DOB = '^'
			BEGIN
				SET @DOB_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @DOB_CASTED = CAST(@DOB AS datetime)
			END

		UPDATE ILA_Borrower
			SET DOB = @DOB_CASTED
		WHERE 1=1 AND BorrowerTypeCode = @BorrowerTypeCode AND TrackingNum = @TrackingNum
	END

IF @MaritalStatus <> ''
	BEGIN
		DECLARE @MaritalStatus_CASTED char(1)
		IF @MaritalStatus = '^'
			BEGIN
				SET @MaritalStatus_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @MaritalStatus_CASTED = CAST(@MaritalStatus AS char(1))
			END

		UPDATE ILA_Borrower
			SET MaritalStatus = @MaritalStatus_CASTED
		WHERE 1=1 AND BorrowerTypeCode = @BorrowerTypeCode AND TrackingNum = @TrackingNum
	END

IF @NumDependents <> ''
	BEGIN
		DECLARE @NumDependents_CASTED char(2)
		IF @NumDependents = '^'
			BEGIN
				SET @NumDependents_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @NumDependents_CASTED = CAST(@NumDependents AS char(2))
			END

		UPDATE ILA_Borrower
			SET NumDependents = @NumDependents_CASTED
		WHERE 1=1 AND BorrowerTypeCode = @BorrowerTypeCode AND TrackingNum = @TrackingNum
	END

IF @SelfEmployed <> ''
	BEGIN
		DECLARE @SelfEmployed_CASTED char(1)
		IF @SelfEmployed = '^'
			BEGIN
				SET @SelfEmployed_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @SelfEmployed_CASTED = CAST(@SelfEmployed AS char(1))
			END

		UPDATE ILA_Borrower
			SET SelfEmployed = @SelfEmployed_CASTED
		WHERE 1=1 AND BorrowerTypeCode = @BorrowerTypeCode AND TrackingNum = @TrackingNum
	END

IF @Retired <> ''
	BEGIN
		DECLARE @Retired_CASTED char(1)
		IF @Retired = '^'
			BEGIN
				SET @Retired_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Retired_CASTED = CAST(@Retired AS char(1))
			END

		UPDATE ILA_Borrower
			SET Retired = @Retired_CASTED
		WHERE 1=1 AND BorrowerTypeCode = @BorrowerTypeCode AND TrackingNum = @TrackingNum
	END

IF @CashAssets <> ''
	BEGIN
		DECLARE @CashAssets_CASTED int
		IF @CashAssets = '^'
			BEGIN
				SET @CashAssets_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @CashAssets_CASTED = CAST(@CashAssets AS int)
			END

		UPDATE ILA_Borrower
			SET CashAssets = @CashAssets_CASTED
		WHERE 1=1 AND BorrowerTypeCode = @BorrowerTypeCode AND TrackingNum = @TrackingNum
	END

IF @Gender <> ''
	BEGIN
		DECLARE @Gender_CASTED char(1)
		IF @Gender = '^'
			BEGIN
				SET @Gender_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Gender_CASTED = CAST(@Gender AS char(1))
			END

		UPDATE ILA_Borrower
			SET Gender = @Gender_CASTED
		WHERE 1=1 AND BorrowerTypeCode = @BorrowerTypeCode AND TrackingNum = @TrackingNum
	END

IF @PreferredContactMethod <> ''
	BEGIN
		DECLARE @PreferredContactMethod_CASTED char(10)
		IF @PreferredContactMethod = '^'
			BEGIN
				SET @PreferredContactMethod_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @PreferredContactMethod_CASTED = CAST(@PreferredContactMethod AS char(10))
			END

		UPDATE ILA_Borrower
			SET PreferredContactMethod = @PreferredContactMethod_CASTED
		WHERE 1=1 AND BorrowerTypeCode = @BorrowerTypeCode AND TrackingNum = @TrackingNum
	END

IF @MortgageBalance <> ''
	BEGIN
		DECLARE @MortgageBalance_CASTED int
		IF @MortgageBalance = '^'
			BEGIN
				SET @MortgageBalance_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @MortgageBalance_CASTED = CAST(@MortgageBalance AS int)
			END

		UPDATE ILA_Borrower
			SET MortgageBalance = @MortgageBalance_CASTED
		WHERE 1=1 AND BorrowerTypeCode = @BorrowerTypeCode AND TrackingNum = @TrackingNum
	END

IF @OtherAssets <> ''
	BEGIN
		DECLARE @OtherAssets_CASTED int
		IF @OtherAssets = '^'
			BEGIN
				SET @OtherAssets_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @OtherAssets_CASTED = CAST(@OtherAssets AS int)
			END

		UPDATE ILA_Borrower
			SET OtherAssets = @OtherAssets_CASTED
		WHERE 1=1 AND BorrowerTypeCode = @BorrowerTypeCode AND TrackingNum = @TrackingNum
	END

IF @TotalDebts <> ''
	BEGIN
		DECLARE @TotalDebts_CASTED int
		IF @TotalDebts = '^'
			BEGIN
				SET @TotalDebts_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @TotalDebts_CASTED = CAST(@TotalDebts AS int)
			END

		UPDATE ILA_Borrower
			SET TotalDebts = @TotalDebts_CASTED
		WHERE 1=1 AND BorrowerTypeCode = @BorrowerTypeCode AND TrackingNum = @TrackingNum
	END

IF @LossExists <> ''
	BEGIN
		DECLARE @LossExists_CASTED char(1)
		IF @LossExists = '^'
			BEGIN
				SET @LossExists_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @LossExists_CASTED = CAST(@LossExists AS char(1))
			END

		UPDATE ILA_Borrower
			SET LossExists = @LossExists_CASTED
		WHERE 1=1 AND BorrowerTypeCode = @BorrowerTypeCode AND TrackingNum = @TrackingNum
	END

IF @ThirdPartyIdentifier <> ''
	BEGIN
		DECLARE @ThirdPartyIdentifier_CASTED varchar(1000)
		IF @ThirdPartyIdentifier = '^'
			BEGIN
				SET @ThirdPartyIdentifier_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ThirdPartyIdentifier_CASTED = CAST(@ThirdPartyIdentifier AS varchar(1000))
			END

		UPDATE ILA_Borrower
			SET ThirdPartyIdentifier = @ThirdPartyIdentifier_CASTED
		WHERE 1=1 AND BorrowerTypeCode = @BorrowerTypeCode AND TrackingNum = @TrackingNum
	END

IF @CreditScoreType1 <> ''
	BEGIN
		DECLARE @CreditScoreType1_CASTED int
		IF @CreditScoreType1 = '^'
			BEGIN
				SET @CreditScoreType1_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @CreditScoreType1_CASTED = CAST(@CreditScoreType1 AS int)
			END

		UPDATE ILA_Borrower
			SET CreditScoreType1 = @CreditScoreType1_CASTED
		WHERE 1=1 AND BorrowerTypeCode = @BorrowerTypeCode AND TrackingNum = @TrackingNum
	END

IF @CreditScoreType2 <> ''
	BEGIN
		DECLARE @CreditScoreType2_CASTED int
		IF @CreditScoreType2 = '^'
			BEGIN
				SET @CreditScoreType2_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @CreditScoreType2_CASTED = CAST(@CreditScoreType2 AS int)
			END

		UPDATE ILA_Borrower
			SET CreditScoreType2 = @CreditScoreType2_CASTED
		WHERE 1=1 AND BorrowerTypeCode = @BorrowerTypeCode AND TrackingNum = @TrackingNum
	END

IF @CreditScoreType3 <> ''
	BEGIN
		DECLARE @CreditScoreType3_CASTED int
		IF @CreditScoreType3 = '^'
			BEGIN
				SET @CreditScoreType3_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @CreditScoreType3_CASTED = CAST(@CreditScoreType3 AS int)
			END

		UPDATE ILA_Borrower
			SET CreditScoreType3 = @CreditScoreType3_CASTED
		WHERE 1=1 AND BorrowerTypeCode = @BorrowerTypeCode AND TrackingNum = @TrackingNum
	END

IF @ClientIP <> ''
	BEGIN
		DECLARE @ClientIP_CASTED varchar(15)
		IF @ClientIP = '^'
			BEGIN
				SET @ClientIP_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ClientIP_CASTED = CAST(@ClientIP AS varchar(15))
			END

		UPDATE ILA_Borrower
			SET ClientIP = @ClientIP_CASTED
		WHERE 1=1 AND BorrowerTypeCode = @BorrowerTypeCode AND TrackingNum = @TrackingNum
	END

IF @WebIP <> ''
	BEGIN
		DECLARE @WebIP_CASTED varchar(15)
		IF @WebIP = '^'
			BEGIN
				SET @WebIP_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @WebIP_CASTED = CAST(@WebIP AS varchar(15))
			END

		UPDATE ILA_Borrower
			SET WebIP = @WebIP_CASTED
		WHERE 1=1 AND BorrowerTypeCode = @BorrowerTypeCode AND TrackingNum = @TrackingNum
	END

IF @ClusterID <> ''
	BEGIN
		DECLARE @ClusterID_CASTED char(10)
		IF @ClusterID = '^'
			BEGIN
				SET @ClusterID_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ClusterID_CASTED = CAST(@ClusterID AS char(10))
			END

		UPDATE ILA_Borrower
			SET ClusterID = @ClusterID_CASTED
		WHERE 1=1 AND BorrowerTypeCode = @BorrowerTypeCode AND TrackingNum = @TrackingNum
	END

IF @LastModified <> ''
	BEGIN
		DECLARE @LastModified_CASTED datetime
		IF @LastModified = '^'
			BEGIN
				SET @LastModified_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @LastModified_CASTED = CAST(@LastModified AS datetime)
			END

		UPDATE ILA_Borrower
			SET LastModified = @LastModified_CASTED
		WHERE 1=1 AND BorrowerTypeCode = @BorrowerTypeCode AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_BorrowerAddress_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_ILAxlate_BorrowerAddress_Delete]
	@AddressTypeCode char(4),
	@TrackingNum int,
	@BorrowerNum smallint
AS

DELETE FROM ILA_BorrowerAddress
WHERE 1=1 AND AddressTypeCode = @AddressTypeCode AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_BorrowerAddress_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_ILAxlate_BorrowerAddress_DeleteAll]
	@AddressTypeCode char(4),
	@TrackingNum int,
	@BorrowerNum smallint
AS

DELETE FROM ILA_BorrowerAddress
WHERE 1=1 AND AddressTypeCode = @AddressTypeCode AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_BorrowerAddress_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_ILAxlate_BorrowerAddress_Insert]
	@AddressTypeCode char(4),
	@AddressVerified char(1),
	@Address1 varchar(30),
	@Address2 varchar(30),
	@Address3 varchar(30),
	@City varchar(20),
	@State char(2),
	@Zip char(9),
	@OccupancyStatus varchar(40),
	@PaymentAmount int,
	@AreaCode char(3),
	@Phone char(8),
	@CntryCode char(2),
	@CntryName varchar(40),
	@ResidenceYears smallint,
	@ResidenceMonths smallint,
	@ResidenceBeg datetime,
	@ResidenceEnd datetime,
	@CellPhone char(7),
	@CellPhoneAC char(3),
	@Ext char(5),
	@FaxPhone char(7),
	@FaxPhoneAC char(3),
	@PagerPhone char(7),
	@PagerPhoneAC char(3),
	@Email1 varchar(60),
	@TrackingNum int,
	@BorrowerNum smallint,
	@ClientIP varchar(15),
	@WebIP varchar(15),
	@ClusterID char(10),
	@LastModified datetime
AS

INSERT INTO ILA_BorrowerAddress
(AddressTypeCode, TrackingNum, BorrowerNum, AddressVerified, Address1, Address2, Address3, City, State, Zip, OccupancyStatus, PaymentAmount, AreaCode, Phone, CntryCode, CntryName, ResidenceYears, ResidenceMonths, ResidenceBeg, ResidenceEnd, CellPhone, CellPhoneAC, Ext, FaxPhone, FaxPhoneAC, PagerPhone, PagerPhoneAC, Email1, ClientIP, WebIP, ClusterID, LastModified)
VALUES
(@AddressTypeCode, @TrackingNum, @BorrowerNum, @AddressVerified, @Address1, @Address2, @Address3, @City, @State, @Zip, @OccupancyStatus, @PaymentAmount, @AreaCode, @Phone, @CntryCode, @CntryName, @ResidenceYears, @ResidenceMonths, @ResidenceBeg, @ResidenceEnd, @CellPhone, @CellPhoneAC, @Ext, @FaxPhone, @FaxPhoneAC, @PagerPhone, @PagerPhoneAC, @Email1, @ClientIP, @WebIP, @ClusterID, @LastModified)

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_BorrowerAddress_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_ILAxlate_BorrowerAddress_InsertIfNew]
	@AddressTypeCode char(4),
	@AddressVerified char(1),
	@Address1 varchar(30),
	@Address2 varchar(30),
	@Address3 varchar(30),
	@City varchar(20),
	@State char(2),
	@Zip char(9),
	@OccupancyStatus varchar(40),
	@PaymentAmount int,
	@AreaCode char(3),
	@Phone char(8),
	@CntryCode char(2),
	@CntryName varchar(40),
	@ResidenceYears smallint,
	@ResidenceMonths smallint,
	@ResidenceBeg datetime,
	@ResidenceEnd datetime,
	@CellPhone char(7),
	@CellPhoneAC char(3),
	@Ext char(5),
	@FaxPhone char(7),
	@FaxPhoneAC char(3),
	@PagerPhone char(7),
	@PagerPhoneAC char(3),
	@Email1 varchar(60),
	@TrackingNum int,
	@BorrowerNum smallint,
	@ClientIP varchar(15),
	@WebIP varchar(15),
	@ClusterID char(10),
	@LastModified datetime
AS

IF NOT EXISTS (SELECT * FROM ILA_BorrowerAddress WHERE 1=1 AND AddressTypeCode = @AddressTypeCode AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum)
	BEGIN
		INSERT INTO ILA_BorrowerAddress
		(AddressTypeCode, TrackingNum, BorrowerNum, AddressVerified, Address1, Address2, Address3, City, State, Zip, OccupancyStatus, PaymentAmount, AreaCode, Phone, CntryCode, CntryName, ResidenceYears, ResidenceMonths, ResidenceBeg, ResidenceEnd, CellPhone, CellPhoneAC, Ext, FaxPhone, FaxPhoneAC, PagerPhone, PagerPhoneAC, Email1, ClientIP, WebIP, ClusterID, LastModified)
		VALUES
		(@AddressTypeCode, @TrackingNum, @BorrowerNum, @AddressVerified, @Address1, @Address2, @Address3, @City, @State, @Zip, @OccupancyStatus, @PaymentAmount, @AreaCode, @Phone, @CntryCode, @CntryName, @ResidenceYears, @ResidenceMonths, @ResidenceBeg, @ResidenceEnd, @CellPhone, @CellPhoneAC, @Ext, @FaxPhone, @FaxPhoneAC, @PagerPhone, @PagerPhoneAC, @Email1, @ClientIP, @WebIP, @ClusterID, @LastModified)
	END
ELSE	BEGIN
		UPDATE ILA_BorrowerAddress SET
			AddressVerified = @AddressVerified,
			Address1 = @Address1,
			Address2 = @Address2,
			Address3 = @Address3,
			City = @City,
			State = @State,
			Zip = @Zip,
			OccupancyStatus = @OccupancyStatus,
			PaymentAmount = @PaymentAmount,
			AreaCode = @AreaCode,
			Phone = @Phone,
			CntryCode = @CntryCode,
			CntryName = @CntryName,
			ResidenceYears = @ResidenceYears,
			ResidenceMonths = @ResidenceMonths,
			ResidenceBeg = @ResidenceBeg,
			ResidenceEnd = @ResidenceEnd,
			CellPhone = @CellPhone,
			CellPhoneAC = @CellPhoneAC,
			Ext = @Ext,
			FaxPhone = @FaxPhone,
			FaxPhoneAC = @FaxPhoneAC,
			PagerPhone = @PagerPhone,
			PagerPhoneAC = @PagerPhoneAC,
			Email1 = @Email1,
			ClientIP = @ClientIP,
			WebIP = @WebIP,
			ClusterID = @ClusterID,
			LastModified = @LastModified
		WHERE 1=1 AND AddressTypeCode = @AddressTypeCode AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_BorrowerAddress_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_ILAxlate_BorrowerAddress_Select]
	@AddressTypeCode char(4),
	@TrackingNum int,
	@BorrowerNum smallint
AS

EXEC IMS.sp_ILABorrowerAddress_Select @AddressTypeCode, @TrackingNum, @BorrowerNum

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_BorrowerAddress_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_ILAxlate_BorrowerAddress_SelectAll]
	@AddressTypeCode char(4),
	@TrackingNum int,
	@BorrowerNum smallint
AS

SELECT * FROM ILA_BorrowerAddress
WHERE 1=1 AND AddressTypeCode = @AddressTypeCode AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_BorrowerAddress_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_ILAxlate_BorrowerAddress_Update]
	@AddressTypeCode char(4),
	@AddressVerified varchar(1),
	@Address1 varchar(30),
	@Address2 varchar(30),
	@Address3 varchar(30),
	@City varchar(20),
	@State varchar(2),
	@Zip varchar(9),
	@OccupancyStatus varchar(40),
	@PaymentAmount varchar(100),
	@AreaCode varchar(3),
	@Phone varchar(8),
	@CntryCode varchar(2),
	@CntryName varchar(40),
	@ResidenceYears varchar(100),
	@ResidenceMonths varchar(100),
	@ResidenceBeg varchar(100),
	@ResidenceEnd varchar(100),
	@CellPhone varchar(7),
	@CellPhoneAC varchar(3),
	@Ext varchar(5),
	@FaxPhone varchar(7),
	@FaxPhoneAC varchar(3),
	@PagerPhone varchar(7),
	@PagerPhoneAC varchar(3),
	@Email1 varchar(60),
	@TrackingNum int,
	@BorrowerNum smallint,
	@ClientIP varchar(15),
	@WebIP varchar(15),
	@ClusterID varchar(10),
	@LastModified varchar(100)
AS

IF @AddressVerified <> ''
	BEGIN
		DECLARE @AddressVerified_CASTED char(1)
		IF @AddressVerified = '^'
			BEGIN
				SET @AddressVerified_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @AddressVerified_CASTED = CAST(@AddressVerified AS char(1))
			END

		UPDATE ILA_BorrowerAddress
			SET AddressVerified = @AddressVerified_CASTED
		WHERE 1=1 AND AddressTypeCode = @AddressTypeCode AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @Address1 <> ''
	BEGIN
		DECLARE @Address1_CASTED varchar(30)
		IF @Address1 = '^'
			BEGIN
				SET @Address1_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Address1_CASTED = CAST(@Address1 AS varchar(30))
			END

		UPDATE ILA_BorrowerAddress
			SET Address1 = @Address1_CASTED
		WHERE 1=1 AND AddressTypeCode = @AddressTypeCode AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @Address2 <> ''
	BEGIN
		DECLARE @Address2_CASTED varchar(30)
		IF @Address2 = '^'
			BEGIN
				SET @Address2_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Address2_CASTED = CAST(@Address2 AS varchar(30))
			END

		UPDATE ILA_BorrowerAddress
			SET Address2 = @Address2_CASTED
		WHERE 1=1 AND AddressTypeCode = @AddressTypeCode AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @Address3 <> ''
	BEGIN
		DECLARE @Address3_CASTED varchar(30)
		IF @Address3 = '^'
			BEGIN
				SET @Address3_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Address3_CASTED = CAST(@Address3 AS varchar(30))
			END

		UPDATE ILA_BorrowerAddress
			SET Address3 = @Address3_CASTED
		WHERE 1=1 AND AddressTypeCode = @AddressTypeCode AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @City <> ''
	BEGIN
		DECLARE @City_CASTED varchar(20)
		IF @City = '^'
			BEGIN
				SET @City_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @City_CASTED = CAST(@City AS varchar(20))
			END

		UPDATE ILA_BorrowerAddress
			SET City = @City_CASTED
		WHERE 1=1 AND AddressTypeCode = @AddressTypeCode AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @State <> ''
	BEGIN
		DECLARE @State_CASTED char(2)
		IF @State = '^'
			BEGIN
				SET @State_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @State_CASTED = CAST(@State AS char(2))
			END

		UPDATE ILA_BorrowerAddress
			SET State = @State_CASTED
		WHERE 1=1 AND AddressTypeCode = @AddressTypeCode AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @Zip <> ''
	BEGIN
		DECLARE @Zip_CASTED char(9)
		IF @Zip = '^'
			BEGIN
				SET @Zip_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Zip_CASTED = CAST(@Zip AS char(9))
			END

		UPDATE ILA_BorrowerAddress
			SET Zip = @Zip_CASTED
		WHERE 1=1 AND AddressTypeCode = @AddressTypeCode AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @OccupancyStatus <> ''
	BEGIN
		DECLARE @OccupancyStatus_CASTED varchar(40)
		IF @OccupancyStatus = '^'
			BEGIN
				SET @OccupancyStatus_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @OccupancyStatus_CASTED = CAST(@OccupancyStatus AS varchar(40))
			END

		UPDATE ILA_BorrowerAddress
			SET OccupancyStatus = @OccupancyStatus_CASTED
		WHERE 1=1 AND AddressTypeCode = @AddressTypeCode AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @PaymentAmount <> ''
	BEGIN
		DECLARE @PaymentAmount_CASTED int
		IF @PaymentAmount = '^'
			BEGIN
				SET @PaymentAmount_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @PaymentAmount_CASTED = CAST(@PaymentAmount AS int)
			END

		UPDATE ILA_BorrowerAddress
			SET PaymentAmount = @PaymentAmount_CASTED
		WHERE 1=1 AND AddressTypeCode = @AddressTypeCode AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @AreaCode <> ''
	BEGIN
		DECLARE @AreaCode_CASTED char(3)
		IF @AreaCode = '^'
			BEGIN
				SET @AreaCode_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @AreaCode_CASTED = CAST(@AreaCode AS char(3))
			END

		UPDATE ILA_BorrowerAddress
			SET AreaCode = @AreaCode_CASTED
		WHERE 1=1 AND AddressTypeCode = @AddressTypeCode AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @Phone <> ''
	BEGIN
		DECLARE @Phone_CASTED char(8)
		IF @Phone = '^'
			BEGIN
				SET @Phone_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Phone_CASTED = CAST(@Phone AS char(8))
			END

		UPDATE ILA_BorrowerAddress
			SET Phone = @Phone_CASTED
		WHERE 1=1 AND AddressTypeCode = @AddressTypeCode AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @CntryCode <> ''
	BEGIN
		DECLARE @CntryCode_CASTED char(2)
		IF @CntryCode = '^'
			BEGIN
				SET @CntryCode_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @CntryCode_CASTED = CAST(@CntryCode AS char(2))
			END

		UPDATE ILA_BorrowerAddress
			SET CntryCode = @CntryCode_CASTED
		WHERE 1=1 AND AddressTypeCode = @AddressTypeCode AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @CntryName <> ''
	BEGIN
		DECLARE @CntryName_CASTED varchar(40)
		IF @CntryName = '^'
			BEGIN
				SET @CntryName_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @CntryName_CASTED = CAST(@CntryName AS varchar(40))
			END

		UPDATE ILA_BorrowerAddress
			SET CntryName = @CntryName_CASTED
		WHERE 1=1 AND AddressTypeCode = @AddressTypeCode AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @ResidenceYears <> ''
	BEGIN
		DECLARE @ResidenceYears_CASTED smallint
		IF @ResidenceYears = '^'
			BEGIN
				SET @ResidenceYears_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ResidenceYears_CASTED = CAST(@ResidenceYears AS smallint)
			END

		UPDATE ILA_BorrowerAddress
			SET ResidenceYears = @ResidenceYears_CASTED
		WHERE 1=1 AND AddressTypeCode = @AddressTypeCode AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @ResidenceMonths <> ''
	BEGIN
		DECLARE @ResidenceMonths_CASTED smallint
		IF @ResidenceMonths = '^'
			BEGIN
				SET @ResidenceMonths_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ResidenceMonths_CASTED = CAST(@ResidenceMonths AS smallint)
			END

		UPDATE ILA_BorrowerAddress
			SET ResidenceMonths = @ResidenceMonths_CASTED
		WHERE 1=1 AND AddressTypeCode = @AddressTypeCode AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @ResidenceBeg <> ''
	BEGIN
		DECLARE @ResidenceBeg_CASTED datetime
		IF @ResidenceBeg = '^'
			BEGIN
				SET @ResidenceBeg_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ResidenceBeg_CASTED = CAST(@ResidenceBeg AS datetime)
			END

		UPDATE ILA_BorrowerAddress
			SET ResidenceBeg = @ResidenceBeg_CASTED
		WHERE 1=1 AND AddressTypeCode = @AddressTypeCode AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @ResidenceEnd <> ''
	BEGIN
		DECLARE @ResidenceEnd_CASTED datetime
		IF @ResidenceEnd = '^'
			BEGIN
				SET @ResidenceEnd_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ResidenceEnd_CASTED = CAST(@ResidenceEnd AS datetime)
			END

		UPDATE ILA_BorrowerAddress
			SET ResidenceEnd = @ResidenceEnd_CASTED
		WHERE 1=1 AND AddressTypeCode = @AddressTypeCode AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @CellPhone <> ''
	BEGIN
		DECLARE @CellPhone_CASTED char(7)
		IF @CellPhone = '^'
			BEGIN
				SET @CellPhone_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @CellPhone_CASTED = CAST(@CellPhone AS char(7))
			END

		UPDATE ILA_BorrowerAddress
			SET CellPhone = @CellPhone_CASTED
		WHERE 1=1 AND AddressTypeCode = @AddressTypeCode AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @CellPhoneAC <> ''
	BEGIN
		DECLARE @CellPhoneAC_CASTED char(3)
		IF @CellPhoneAC = '^'
			BEGIN
				SET @CellPhoneAC_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @CellPhoneAC_CASTED = CAST(@CellPhoneAC AS char(3))
			END

		UPDATE ILA_BorrowerAddress
			SET CellPhoneAC = @CellPhoneAC_CASTED
		WHERE 1=1 AND AddressTypeCode = @AddressTypeCode AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @Ext <> ''
	BEGIN
		DECLARE @Ext_CASTED char(5)
		IF @Ext = '^'
			BEGIN
				SET @Ext_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Ext_CASTED = CAST(@Ext AS char(5))
			END

		UPDATE ILA_BorrowerAddress
			SET Ext = @Ext_CASTED
		WHERE 1=1 AND AddressTypeCode = @AddressTypeCode AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @FaxPhone <> ''
	BEGIN
		DECLARE @FaxPhone_CASTED char(7)
		IF @FaxPhone = '^'
			BEGIN
				SET @FaxPhone_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @FaxPhone_CASTED = CAST(@FaxPhone AS char(7))
			END

		UPDATE ILA_BorrowerAddress
			SET FaxPhone = @FaxPhone_CASTED
		WHERE 1=1 AND AddressTypeCode = @AddressTypeCode AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @FaxPhoneAC <> ''
	BEGIN
		DECLARE @FaxPhoneAC_CASTED char(3)
		IF @FaxPhoneAC = '^'
			BEGIN
				SET @FaxPhoneAC_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @FaxPhoneAC_CASTED = CAST(@FaxPhoneAC AS char(3))
			END

		UPDATE ILA_BorrowerAddress
			SET FaxPhoneAC = @FaxPhoneAC_CASTED
		WHERE 1=1 AND AddressTypeCode = @AddressTypeCode AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @PagerPhone <> ''
	BEGIN
		DECLARE @PagerPhone_CASTED char(7)
		IF @PagerPhone = '^'
			BEGIN
				SET @PagerPhone_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @PagerPhone_CASTED = CAST(@PagerPhone AS char(7))
			END

		UPDATE ILA_BorrowerAddress
			SET PagerPhone = @PagerPhone_CASTED
		WHERE 1=1 AND AddressTypeCode = @AddressTypeCode AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @PagerPhoneAC <> ''
	BEGIN
		DECLARE @PagerPhoneAC_CASTED char(3)
		IF @PagerPhoneAC = '^'
			BEGIN
				SET @PagerPhoneAC_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @PagerPhoneAC_CASTED = CAST(@PagerPhoneAC AS char(3))
			END

		UPDATE ILA_BorrowerAddress
			SET PagerPhoneAC = @PagerPhoneAC_CASTED
		WHERE 1=1 AND AddressTypeCode = @AddressTypeCode AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @Email1 <> ''
	BEGIN
		DECLARE @Email1_CASTED varchar(60)
		IF @Email1 = '^'
			BEGIN
				SET @Email1_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Email1_CASTED = CAST(@Email1 AS varchar(60))
			END

		UPDATE ILA_BorrowerAddress
			SET Email1 = @Email1_CASTED
		WHERE 1=1 AND AddressTypeCode = @AddressTypeCode AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @ClientIP <> ''
	BEGIN
		DECLARE @ClientIP_CASTED varchar(15)
		IF @ClientIP = '^'
			BEGIN
				SET @ClientIP_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ClientIP_CASTED = CAST(@ClientIP AS varchar(15))
			END

		UPDATE ILA_BorrowerAddress
			SET ClientIP = @ClientIP_CASTED
		WHERE 1=1 AND AddressTypeCode = @AddressTypeCode AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @WebIP <> ''
	BEGIN
		DECLARE @WebIP_CASTED varchar(15)
		IF @WebIP = '^'
			BEGIN
				SET @WebIP_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @WebIP_CASTED = CAST(@WebIP AS varchar(15))
			END

		UPDATE ILA_BorrowerAddress
			SET WebIP = @WebIP_CASTED
		WHERE 1=1 AND AddressTypeCode = @AddressTypeCode AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @ClusterID <> ''
	BEGIN
		DECLARE @ClusterID_CASTED char(10)
		IF @ClusterID = '^'
			BEGIN
				SET @ClusterID_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ClusterID_CASTED = CAST(@ClusterID AS char(10))
			END

		UPDATE ILA_BorrowerAddress
			SET ClusterID = @ClusterID_CASTED
		WHERE 1=1 AND AddressTypeCode = @AddressTypeCode AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @LastModified <> ''
	BEGIN
		DECLARE @LastModified_CASTED datetime
		IF @LastModified = '^'
			BEGIN
				SET @LastModified_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @LastModified_CASTED = CAST(@LastModified AS datetime)
			END

		UPDATE ILA_BorrowerAddress
			SET LastModified = @LastModified_CASTED
		WHERE 1=1 AND AddressTypeCode = @AddressTypeCode AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_BorrowerDebt_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ILAxlate_BorrowerDebt_Delete]
	@DebtTypeCode char(4),
	@TrackingNum int,
	@BorrowerNum smallint
AS

DELETE FROM ILA_BorrowerDebt
WHERE 1=1 AND DebtTypeCode = @DebtTypeCode AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_BorrowerDebt_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ILAxlate_BorrowerDebt_DeleteAll]
	@DebtTypeCode char(4),
	@TrackingNum int,
	@BorrowerNum smallint
AS

DELETE FROM ILA_BorrowerDebt
WHERE 1=1 AND DebtTypeCode = @DebtTypeCode AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_BorrowerDebt_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ILAxlate_BorrowerDebt_Insert]
	@DebtTypeCode char(4),
	@DebtSource varchar(30),
	@DebtType varchar(30),
	@Residence char(6),
	@PaymentAmount int,
	@PaymentFrequency char(1),
	@LotRent int,
	@TrackingNum int,
	@BorrowerNum smallint
AS

INSERT INTO ILA_BorrowerDebt
(DebtTypeCode, TrackingNum, BorrowerNum, DebtSource, DebtType, Residence, PaymentAmount, PaymentFrequency, LotRent)
VALUES
(@DebtTypeCode, @TrackingNum, @BorrowerNum, @DebtSource, @DebtType, @Residence, @PaymentAmount, @PaymentFrequency, @LotRent)

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_BorrowerDebt_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ILAxlate_BorrowerDebt_InsertIfNew]
	@DebtTypeCode char(4),
	@DebtSource varchar(30),
	@DebtType varchar(30),
	@Residence char(6),
	@PaymentAmount int,
	@PaymentFrequency char(1),
	@LotRent int,
	@TrackingNum int,
	@BorrowerNum smallint
AS

IF NOT EXISTS (SELECT * FROM ILA_BorrowerDebt WHERE 1=1 AND DebtTypeCode = @DebtTypeCode AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum)
	BEGIN
		INSERT INTO ILA_BorrowerDebt
		(DebtTypeCode, TrackingNum, BorrowerNum, DebtSource, DebtType, Residence, PaymentAmount, PaymentFrequency, LotRent)
		VALUES
		(@DebtTypeCode, @TrackingNum, @BorrowerNum, @DebtSource, @DebtType, @Residence, @PaymentAmount, @PaymentFrequency, @LotRent)
	END
ELSE	BEGIN
		UPDATE ILA_BorrowerDebt SET
			DebtSource = @DebtSource,
			DebtType = @DebtType,
			Residence = @Residence,
			PaymentAmount = @PaymentAmount,
			PaymentFrequency = @PaymentFrequency,
			LotRent = @LotRent
		WHERE 1=1 AND DebtTypeCode = @DebtTypeCode AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_BorrowerDebt_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ILAxlate_BorrowerDebt_Select]
	@DebtTypeCode char(4),
	@TrackingNum int,
	@BorrowerNum smallint
AS

EXEC IMS.sp_ILABorrowerDebt_Select @DebtTypeCode, @TrackingNum, @BorrowerNum

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_BorrowerDebt_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ILAxlate_BorrowerDebt_SelectAll]
	@DebtTypeCode char(4),
	@TrackingNum int,
	@BorrowerNum smallint
AS

SELECT * FROM ILA_BorrowerDebt
WHERE 1=1 AND DebtTypeCode = @DebtTypeCode AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_BorrowerDebt_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ILAxlate_BorrowerDebt_Update]
	@DebtTypeCode char(4),
	@DebtSource varchar(30),
	@DebtType varchar(30),
	@Residence varchar(6),
	@PaymentAmount varchar(100),
	@PaymentFrequency varchar(1),
	@LotRent varchar(100),
	@TrackingNum int,
	@BorrowerNum smallint
AS

IF @DebtSource <> ''
	BEGIN
		DECLARE @DebtSource_CASTED varchar(30)
		IF @DebtSource = '^'
			BEGIN
				SET @DebtSource_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @DebtSource_CASTED = CAST(@DebtSource AS varchar(30))
			END

		UPDATE ILA_BorrowerDebt
			SET DebtSource = @DebtSource_CASTED
		WHERE 1=1 AND DebtTypeCode = @DebtTypeCode AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @DebtType <> ''
	BEGIN
		DECLARE @DebtType_CASTED varchar(30)
		IF @DebtType = '^'
			BEGIN
				SET @DebtType_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @DebtType_CASTED = CAST(@DebtType AS varchar(30))
			END

		UPDATE ILA_BorrowerDebt
			SET DebtType = @DebtType_CASTED
		WHERE 1=1 AND DebtTypeCode = @DebtTypeCode AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @Residence <> ''
	BEGIN
		DECLARE @Residence_CASTED char(6)
		IF @Residence = '^'
			BEGIN
				SET @Residence_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Residence_CASTED = CAST(@Residence AS char(6))
			END

		UPDATE ILA_BorrowerDebt
			SET Residence = @Residence_CASTED
		WHERE 1=1 AND DebtTypeCode = @DebtTypeCode AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @PaymentAmount <> ''
	BEGIN
		DECLARE @PaymentAmount_CASTED int
		IF @PaymentAmount = '^'
			BEGIN
				SET @PaymentAmount_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @PaymentAmount_CASTED = CAST(@PaymentAmount AS int)
			END

		UPDATE ILA_BorrowerDebt
			SET PaymentAmount = @PaymentAmount_CASTED
		WHERE 1=1 AND DebtTypeCode = @DebtTypeCode AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @PaymentFrequency <> ''
	BEGIN
		DECLARE @PaymentFrequency_CASTED char(1)
		IF @PaymentFrequency = '^'
			BEGIN
				SET @PaymentFrequency_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @PaymentFrequency_CASTED = CAST(@PaymentFrequency AS char(1))
			END

		UPDATE ILA_BorrowerDebt
			SET PaymentFrequency = @PaymentFrequency_CASTED
		WHERE 1=1 AND DebtTypeCode = @DebtTypeCode AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @LotRent <> ''
	BEGIN
		DECLARE @LotRent_CASTED int
		IF @LotRent = '^'
			BEGIN
				SET @LotRent_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @LotRent_CASTED = CAST(@LotRent AS int)
			END

		UPDATE ILA_BorrowerDebt
			SET LotRent = @LotRent_CASTED
		WHERE 1=1 AND DebtTypeCode = @DebtTypeCode AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_BorrowerEmployment_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_ILAxlate_BorrowerEmployment_Delete]
	@EmployerTypeCode char(4),
	@TrackingNum int,
	@BorrowerNum smallint
AS

DELETE FROM ILA_BorrowerEmployment
WHERE 1=1 AND EmployerTypeCode = @EmployerTypeCode AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_BorrowerEmployment_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_ILAxlate_BorrowerEmployment_DeleteAll]
	@EmployerTypeCode char(4),
	@TrackingNum int,
	@BorrowerNum smallint
AS

DELETE FROM ILA_BorrowerEmployment
WHERE 1=1 AND EmployerTypeCode = @EmployerTypeCode AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_BorrowerEmployment_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_ILAxlate_BorrowerEmployment_Insert]
	@EmployerTypeCode char(4),
	@OccupationCode char(2),
	@EmployerName varchar(30),
	@JobTitle varchar(30),
	@HireDate datetime,
	@AreaCode char(3),
	@Phone char(8),
	@Ext char(5),
	@CanContactAtWork char(2),
	@EmploymentStatus char(10),
	@EmploymentSalary int,
	@ProfessionYears smallint,
	@ProfessionMonths smallint,
	@ProfessionTotalYears smallint,
	@ProfessionBeg datetime,
	@ProfessionEnd datetime,
	@Department varchar(20),
	@EmployeeNumber varchar(20),
	@Shift char(10),
	@TrackingNum int,
	@BorrowerNum smallint,
	@ClientIP varchar(15),
	@WebIP varchar(15),
	@ClusterID char(10),
	@LastModified datetime
AS

INSERT INTO ILA_BorrowerEmployment
(EmployerTypeCode, TrackingNum, BorrowerNum, OccupationCode, EmployerName, JobTitle, HireDate, AreaCode, Phone, Ext, CanContactAtWork, EmploymentStatus, EmploymentSalary, ProfessionYears, ProfessionMonths, ProfessionTotalYears, ProfessionBeg, ProfessionEnd, Department, EmployeeNumber, Shift, ClientIP, WebIP, ClusterID, LastModified)
VALUES
(@EmployerTypeCode, @TrackingNum, @BorrowerNum, @OccupationCode, @EmployerName, @JobTitle, @HireDate, @AreaCode, @Phone, @Ext, @CanContactAtWork, @EmploymentStatus, @EmploymentSalary, @ProfessionYears, @ProfessionMonths, @ProfessionTotalYears, @ProfessionBeg, @ProfessionEnd, @Department, @EmployeeNumber, @Shift, @ClientIP, @WebIP, @ClusterID, @LastModified)

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_BorrowerEmployment_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_ILAxlate_BorrowerEmployment_InsertIfNew]
	@EmployerTypeCode char(4),
	@OccupationCode char(2),
	@EmployerName varchar(30),
	@JobTitle varchar(30),
	@HireDate datetime,
	@AreaCode char(3),
	@Phone char(8),
	@Ext char(5),
	@CanContactAtWork char(2),
	@EmploymentStatus char(10),
	@EmploymentSalary int,
	@ProfessionYears smallint,
	@ProfessionMonths smallint,
	@ProfessionTotalYears smallint,
	@ProfessionBeg datetime,
	@ProfessionEnd datetime,
	@Department varchar(20),
	@EmployeeNumber varchar(20),
	@Shift char(10),
	@TrackingNum int,
	@BorrowerNum smallint,
	@ClientIP varchar(15),
	@WebIP varchar(15),
	@ClusterID char(10),
	@LastModified datetime
AS

IF NOT EXISTS (SELECT * FROM ILA_BorrowerEmployment WHERE 1=1 AND EmployerTypeCode = @EmployerTypeCode AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum)
	BEGIN
		INSERT INTO ILA_BorrowerEmployment
		(EmployerTypeCode, TrackingNum, BorrowerNum, OccupationCode, EmployerName, JobTitle, HireDate, AreaCode, Phone, Ext, CanContactAtWork, EmploymentStatus, EmploymentSalary, ProfessionYears, ProfessionMonths, ProfessionTotalYears, ProfessionBeg, ProfessionEnd, Department, EmployeeNumber, Shift, ClientIP, WebIP, ClusterID, LastModified)
		VALUES
		(@EmployerTypeCode, @TrackingNum, @BorrowerNum, @OccupationCode, @EmployerName, @JobTitle, @HireDate, @AreaCode, @Phone, @Ext, @CanContactAtWork, @EmploymentStatus, @EmploymentSalary, @ProfessionYears, @ProfessionMonths, @ProfessionTotalYears, @ProfessionBeg, @ProfessionEnd, @Department, @EmployeeNumber, @Shift, @ClientIP, @WebIP, @ClusterID, @LastModified)
	END
ELSE	BEGIN
		UPDATE ILA_BorrowerEmployment SET
			OccupationCode = @OccupationCode,
			EmployerName = @EmployerName,
			JobTitle = @JobTitle,
			HireDate = @HireDate,
			AreaCode = @AreaCode,
			Phone = @Phone,
			Ext = @Ext,
			CanContactAtWork = @CanContactAtWork,
			EmploymentStatus = @EmploymentStatus,
			EmploymentSalary = @EmploymentSalary,
			ProfessionYears = @ProfessionYears,
			ProfessionMonths = @ProfessionMonths,
			ProfessionTotalYears = @ProfessionTotalYears,
			ProfessionBeg = @ProfessionBeg,
			ProfessionEnd = @ProfessionEnd,
			Department = @Department,
			EmployeeNumber = @EmployeeNumber,
			Shift = @Shift,
			ClientIP = @ClientIP,
			WebIP = @WebIP,
			ClusterID = @ClusterID,
			LastModified = @LastModified
		WHERE 1=1 AND EmployerTypeCode = @EmployerTypeCode AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_BorrowerEmployment_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_ILAxlate_BorrowerEmployment_Select]
	@EmployerTypeCode char(4),
	@TrackingNum int,
	@BorrowerNum smallint
AS

EXEC IMS.sp_ILABorrowerEmployment_Select @EmployerTypeCode, @TrackingNum, @BorrowerNum

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_BorrowerEmployment_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_ILAxlate_BorrowerEmployment_SelectAll]
	@EmployerTypeCode char(4),
	@TrackingNum int,
	@BorrowerNum smallint
AS

SELECT * FROM ILA_BorrowerEmployment
WHERE 1=1 AND EmployerTypeCode = @EmployerTypeCode AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_BorrowerEmployment_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_ILAxlate_BorrowerEmployment_Update]
	@EmployerTypeCode char(4),
	@OccupationCode varchar(2),
	@EmployerName varchar(30),
	@JobTitle varchar(30),
	@HireDate varchar(100),
	@AreaCode varchar(3),
	@Phone varchar(8),
	@Ext varchar(5),
	@CanContactAtWork varchar(2),
	@EmploymentStatus varchar(10),
	@EmploymentSalary varchar(100),
	@ProfessionYears varchar(100),
	@ProfessionMonths varchar(100),
	@ProfessionTotalYears varchar(100),
	@ProfessionBeg varchar(100),
	@ProfessionEnd varchar(100),
	@Department varchar(20),
	@EmployeeNumber varchar(20),
	@Shift varchar(10),
	@TrackingNum int,
	@BorrowerNum smallint,
	@ClientIP varchar(15),
	@WebIP varchar(15),
	@ClusterID varchar(10),
	@LastModified varchar(100)
AS

IF @OccupationCode <> ''
	BEGIN
		DECLARE @OccupationCode_CASTED char(2)
		IF @OccupationCode = '^'
			BEGIN
				SET @OccupationCode_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @OccupationCode_CASTED = CAST(@OccupationCode AS char(2))
			END

		UPDATE ILA_BorrowerEmployment
			SET OccupationCode = @OccupationCode_CASTED
		WHERE 1=1 AND EmployerTypeCode = @EmployerTypeCode AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @EmployerName <> ''
	BEGIN
		DECLARE @EmployerName_CASTED varchar(30)
		IF @EmployerName = '^'
			BEGIN
				SET @EmployerName_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @EmployerName_CASTED = CAST(@EmployerName AS varchar(30))
			END

		UPDATE ILA_BorrowerEmployment
			SET EmployerName = @EmployerName_CASTED
		WHERE 1=1 AND EmployerTypeCode = @EmployerTypeCode AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @JobTitle <> ''
	BEGIN
		DECLARE @JobTitle_CASTED varchar(30)
		IF @JobTitle = '^'
			BEGIN
				SET @JobTitle_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @JobTitle_CASTED = CAST(@JobTitle AS varchar(30))
			END

		UPDATE ILA_BorrowerEmployment
			SET JobTitle = @JobTitle_CASTED
		WHERE 1=1 AND EmployerTypeCode = @EmployerTypeCode AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @HireDate <> ''
	BEGIN
		DECLARE @HireDate_CASTED datetime
		IF @HireDate = '^'
			BEGIN
				SET @HireDate_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @HireDate_CASTED = CAST(@HireDate AS datetime)
			END

		UPDATE ILA_BorrowerEmployment
			SET HireDate = @HireDate_CASTED
		WHERE 1=1 AND EmployerTypeCode = @EmployerTypeCode AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @AreaCode <> ''
	BEGIN
		DECLARE @AreaCode_CASTED char(3)
		IF @AreaCode = '^'
			BEGIN
				SET @AreaCode_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @AreaCode_CASTED = CAST(@AreaCode AS char(3))
			END

		UPDATE ILA_BorrowerEmployment
			SET AreaCode = @AreaCode_CASTED
		WHERE 1=1 AND EmployerTypeCode = @EmployerTypeCode AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @Phone <> ''
	BEGIN
		DECLARE @Phone_CASTED char(8)
		IF @Phone = '^'
			BEGIN
				SET @Phone_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Phone_CASTED = CAST(@Phone AS char(8))
			END

		UPDATE ILA_BorrowerEmployment
			SET Phone = @Phone_CASTED
		WHERE 1=1 AND EmployerTypeCode = @EmployerTypeCode AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @Ext <> ''
	BEGIN
		DECLARE @Ext_CASTED char(5)
		IF @Ext = '^'
			BEGIN
				SET @Ext_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Ext_CASTED = CAST(@Ext AS char(5))
			END

		UPDATE ILA_BorrowerEmployment
			SET Ext = @Ext_CASTED
		WHERE 1=1 AND EmployerTypeCode = @EmployerTypeCode AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @CanContactAtWork <> ''
	BEGIN
		DECLARE @CanContactAtWork_CASTED char(2)
		IF @CanContactAtWork = '^'
			BEGIN
				SET @CanContactAtWork_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @CanContactAtWork_CASTED = CAST(@CanContactAtWork AS char(2))
			END

		UPDATE ILA_BorrowerEmployment
			SET CanContactAtWork = @CanContactAtWork_CASTED
		WHERE 1=1 AND EmployerTypeCode = @EmployerTypeCode AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @EmploymentStatus <> ''
	BEGIN
		DECLARE @EmploymentStatus_CASTED char(10)
		IF @EmploymentStatus = '^'
			BEGIN
				SET @EmploymentStatus_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @EmploymentStatus_CASTED = CAST(@EmploymentStatus AS char(10))
			END

		UPDATE ILA_BorrowerEmployment
			SET EmploymentStatus = @EmploymentStatus_CASTED
		WHERE 1=1 AND EmployerTypeCode = @EmployerTypeCode AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @EmploymentSalary <> ''
	BEGIN
		DECLARE @EmploymentSalary_CASTED int
		IF @EmploymentSalary = '^'
			BEGIN
				SET @EmploymentSalary_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @EmploymentSalary_CASTED = CAST(@EmploymentSalary AS int)
			END

		UPDATE ILA_BorrowerEmployment
			SET EmploymentSalary = @EmploymentSalary_CASTED
		WHERE 1=1 AND EmployerTypeCode = @EmployerTypeCode AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @ProfessionYears <> ''
	BEGIN
		DECLARE @ProfessionYears_CASTED smallint
		IF @ProfessionYears = '^'
			BEGIN
				SET @ProfessionYears_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ProfessionYears_CASTED = CAST(@ProfessionYears AS smallint)
			END

		UPDATE ILA_BorrowerEmployment
			SET ProfessionYears = @ProfessionYears_CASTED
		WHERE 1=1 AND EmployerTypeCode = @EmployerTypeCode AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @ProfessionMonths <> ''
	BEGIN
		DECLARE @ProfessionMonths_CASTED smallint
		IF @ProfessionMonths = '^'
			BEGIN
				SET @ProfessionMonths_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ProfessionMonths_CASTED = CAST(@ProfessionMonths AS smallint)
			END

		UPDATE ILA_BorrowerEmployment
			SET ProfessionMonths = @ProfessionMonths_CASTED
		WHERE 1=1 AND EmployerTypeCode = @EmployerTypeCode AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @ProfessionTotalYears <> ''
	BEGIN
		DECLARE @ProfessionTotalYears_CASTED smallint
		IF @ProfessionTotalYears = '^'
			BEGIN
				SET @ProfessionTotalYears_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ProfessionTotalYears_CASTED = CAST(@ProfessionTotalYears AS smallint)
			END

		UPDATE ILA_BorrowerEmployment
			SET ProfessionTotalYears = @ProfessionTotalYears_CASTED
		WHERE 1=1 AND EmployerTypeCode = @EmployerTypeCode AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @ProfessionBeg <> ''
	BEGIN
		DECLARE @ProfessionBeg_CASTED datetime
		IF @ProfessionBeg = '^'
			BEGIN
				SET @ProfessionBeg_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ProfessionBeg_CASTED = CAST(@ProfessionBeg AS datetime)
			END

		UPDATE ILA_BorrowerEmployment
			SET ProfessionBeg = @ProfessionBeg_CASTED
		WHERE 1=1 AND EmployerTypeCode = @EmployerTypeCode AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @ProfessionEnd <> ''
	BEGIN
		DECLARE @ProfessionEnd_CASTED datetime
		IF @ProfessionEnd = '^'
			BEGIN
				SET @ProfessionEnd_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ProfessionEnd_CASTED = CAST(@ProfessionEnd AS datetime)
			END

		UPDATE ILA_BorrowerEmployment
			SET ProfessionEnd = @ProfessionEnd_CASTED
		WHERE 1=1 AND EmployerTypeCode = @EmployerTypeCode AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @Department <> ''
	BEGIN
		DECLARE @Department_CASTED varchar(20)
		IF @Department = '^'
			BEGIN
				SET @Department_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Department_CASTED = CAST(@Department AS varchar(20))
			END

		UPDATE ILA_BorrowerEmployment
			SET Department = @Department_CASTED
		WHERE 1=1 AND EmployerTypeCode = @EmployerTypeCode AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @EmployeeNumber <> ''
	BEGIN
		DECLARE @EmployeeNumber_CASTED varchar(20)
		IF @EmployeeNumber = '^'
			BEGIN
				SET @EmployeeNumber_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @EmployeeNumber_CASTED = CAST(@EmployeeNumber AS varchar(20))
			END

		UPDATE ILA_BorrowerEmployment
			SET EmployeeNumber = @EmployeeNumber_CASTED
		WHERE 1=1 AND EmployerTypeCode = @EmployerTypeCode AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @Shift <> ''
	BEGIN
		DECLARE @Shift_CASTED char(10)
		IF @Shift = '^'
			BEGIN
				SET @Shift_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Shift_CASTED = CAST(@Shift AS char(10))
			END

		UPDATE ILA_BorrowerEmployment
			SET Shift = @Shift_CASTED
		WHERE 1=1 AND EmployerTypeCode = @EmployerTypeCode AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @ClientIP <> ''
	BEGIN
		DECLARE @ClientIP_CASTED varchar(15)
		IF @ClientIP = '^'
			BEGIN
				SET @ClientIP_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ClientIP_CASTED = CAST(@ClientIP AS varchar(15))
			END

		UPDATE ILA_BorrowerEmployment
			SET ClientIP = @ClientIP_CASTED
		WHERE 1=1 AND EmployerTypeCode = @EmployerTypeCode AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @WebIP <> ''
	BEGIN
		DECLARE @WebIP_CASTED varchar(15)
		IF @WebIP = '^'
			BEGIN
				SET @WebIP_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @WebIP_CASTED = CAST(@WebIP AS varchar(15))
			END

		UPDATE ILA_BorrowerEmployment
			SET WebIP = @WebIP_CASTED
		WHERE 1=1 AND EmployerTypeCode = @EmployerTypeCode AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @ClusterID <> ''
	BEGIN
		DECLARE @ClusterID_CASTED char(10)
		IF @ClusterID = '^'
			BEGIN
				SET @ClusterID_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ClusterID_CASTED = CAST(@ClusterID AS char(10))
			END

		UPDATE ILA_BorrowerEmployment
			SET ClusterID = @ClusterID_CASTED
		WHERE 1=1 AND EmployerTypeCode = @EmployerTypeCode AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @LastModified <> ''
	BEGIN
		DECLARE @LastModified_CASTED datetime
		IF @LastModified = '^'
			BEGIN
				SET @LastModified_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @LastModified_CASTED = CAST(@LastModified AS datetime)
			END

		UPDATE ILA_BorrowerEmployment
			SET LastModified = @LastModified_CASTED
		WHERE 1=1 AND EmployerTypeCode = @EmployerTypeCode AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_BorrowerHMDA_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ILAxlate_BorrowerHMDA_Delete]
	@TrackingNum int,
	@BorrowerNum smallint
AS

DELETE FROM ILA_BorrowerHMDA
WHERE 1=1 AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_BorrowerHMDA_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ILAxlate_BorrowerHMDA_DeleteAll]
	@TrackingNum int,
	@BorrowerNum smallint
AS

DELETE FROM ILA_BorrowerHMDA
WHERE 1=1 AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_BorrowerHMDA_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ILAxlate_BorrowerHMDA_Insert]
	@Decline char(1),
	@RaceCode char(1),
	@Race varchar(100),
	@Gender varchar(100),
	@Age smallint,
	@Ethnicity varchar(100),
	@TrackingNum int,
	@BorrowerNum smallint,
	@ClientIP varchar(15),
	@WebIP varchar(15),
	@ClusterID char(10),
	@LastModified datetime
AS

INSERT INTO ILA_BorrowerHMDA
(TrackingNum, BorrowerNum, Decline, RaceCode, Race, Gender, Age, Ethnicity, ClientIP, WebIP, ClusterID, LastModified)
VALUES
(@TrackingNum, @BorrowerNum, @Decline, @RaceCode, @Race, @Gender, @Age, @Ethnicity, @ClientIP, @WebIP, @ClusterID, @LastModified)

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_BorrowerHMDA_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ILAxlate_BorrowerHMDA_InsertIfNew]
	@Decline char(1),
	@RaceCode char(1),
	@Race varchar(100),
	@Gender varchar(100),
	@Age smallint,
	@Ethnicity varchar(100),
	@TrackingNum int,
	@BorrowerNum smallint,
	@ClientIP varchar(15),
	@WebIP varchar(15),
	@ClusterID char(10),
	@LastModified datetime
AS

IF NOT EXISTS (SELECT * FROM ILA_BorrowerHMDA WHERE 1=1 AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum)
	BEGIN
		INSERT INTO ILA_BorrowerHMDA
		(TrackingNum, BorrowerNum, Decline, RaceCode, Race, Gender, Age, Ethnicity, ClientIP, WebIP, ClusterID, LastModified)
		VALUES
		(@TrackingNum, @BorrowerNum, @Decline, @RaceCode, @Race, @Gender, @Age, @Ethnicity, @ClientIP, @WebIP, @ClusterID, @LastModified)
	END
ELSE	BEGIN
		UPDATE ILA_BorrowerHMDA SET
			Decline = @Decline,
			RaceCode = @RaceCode,
			Race = @Race,
			Gender = @Gender,
			Age = @Age,
			Ethnicity = @Ethnicity,
			ClientIP = @ClientIP,
			WebIP = @WebIP,
			ClusterID = @ClusterID,
			LastModified = @LastModified
		WHERE 1=1 AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_BorrowerHMDA_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ILAxlate_BorrowerHMDA_Select]
	@TrackingNum int,
	@BorrowerNum smallint
AS

SELECT * FROM ILA_BorrowerHMDA
WHERE 1=1 AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_BorrowerHMDA_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ILAxlate_BorrowerHMDA_SelectAll]
	@TrackingNum int,
	@BorrowerNum smallint
AS

SELECT * FROM ILA_BorrowerHMDA
WHERE 1=1 AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_BorrowerHMDA_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ILAxlate_BorrowerHMDA_Update]
	@Decline varchar(1),
	@RaceCode varchar(1),
	@Race varchar(100),
	@Gender varchar(100),
	@Age varchar(100),
	@Ethnicity varchar(100),
	@TrackingNum int,
	@BorrowerNum smallint,
	@ClientIP varchar(15),
	@WebIP varchar(15),
	@ClusterID varchar(10),
	@LastModified varchar(100)
AS

IF @Decline <> ''
	BEGIN
		DECLARE @Decline_CASTED char(1)
		IF @Decline = '^'
			BEGIN
				SET @Decline_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Decline_CASTED = CAST(@Decline AS char(1))
			END

		UPDATE ILA_BorrowerHMDA
			SET Decline = @Decline_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @RaceCode <> ''
	BEGIN
		DECLARE @RaceCode_CASTED char(1)
		IF @RaceCode = '^'
			BEGIN
				SET @RaceCode_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @RaceCode_CASTED = CAST(@RaceCode AS char(1))
			END

		UPDATE ILA_BorrowerHMDA
			SET RaceCode = @RaceCode_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @Race <> ''
	BEGIN
		DECLARE @Race_CASTED varchar(100)
		IF @Race = '^'
			BEGIN
				SET @Race_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Race_CASTED = CAST(@Race AS varchar(100))
			END

		UPDATE ILA_BorrowerHMDA
			SET Race = @Race_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @Gender <> ''
	BEGIN
		DECLARE @Gender_CASTED varchar(100)
		IF @Gender = '^'
			BEGIN
				SET @Gender_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Gender_CASTED = CAST(@Gender AS varchar(100))
			END

		UPDATE ILA_BorrowerHMDA
			SET Gender = @Gender_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @Age <> ''
	BEGIN
		DECLARE @Age_CASTED smallint
		IF @Age = '^'
			BEGIN
				SET @Age_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Age_CASTED = CAST(@Age AS smallint)
			END

		UPDATE ILA_BorrowerHMDA
			SET Age = @Age_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @Ethnicity <> ''
	BEGIN
		DECLARE @Ethnicity_CASTED varchar(100)
		IF @Ethnicity = '^'
			BEGIN
				SET @Ethnicity_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Ethnicity_CASTED = CAST(@Ethnicity AS varchar(100))
			END

		UPDATE ILA_BorrowerHMDA
			SET Ethnicity = @Ethnicity_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @ClientIP <> ''
	BEGIN
		DECLARE @ClientIP_CASTED varchar(15)
		IF @ClientIP = '^'
			BEGIN
				SET @ClientIP_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ClientIP_CASTED = CAST(@ClientIP AS varchar(15))
			END

		UPDATE ILA_BorrowerHMDA
			SET ClientIP = @ClientIP_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @WebIP <> ''
	BEGIN
		DECLARE @WebIP_CASTED varchar(15)
		IF @WebIP = '^'
			BEGIN
				SET @WebIP_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @WebIP_CASTED = CAST(@WebIP AS varchar(15))
			END

		UPDATE ILA_BorrowerHMDA
			SET WebIP = @WebIP_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @ClusterID <> ''
	BEGIN
		DECLARE @ClusterID_CASTED char(10)
		IF @ClusterID = '^'
			BEGIN
				SET @ClusterID_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ClusterID_CASTED = CAST(@ClusterID AS char(10))
			END

		UPDATE ILA_BorrowerHMDA
			SET ClusterID = @ClusterID_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @LastModified <> ''
	BEGIN
		DECLARE @LastModified_CASTED datetime
		IF @LastModified = '^'
			BEGIN
				SET @LastModified_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @LastModified_CASTED = CAST(@LastModified AS datetime)
			END

		UPDATE ILA_BorrowerHMDA
			SET LastModified = @LastModified_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_BorrowerIncome_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ILAxlate_BorrowerIncome_Delete]
	@IncomeTypeCode char(4),
	@TrackingNum int,
	@BorrowerNum smallint
AS

DELETE FROM ILA_BorrowerIncome
WHERE 1=1 AND IncomeTypeCode = @IncomeTypeCode AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_BorrowerIncome_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ILAxlate_BorrowerIncome_Insert]
	@IncomeTypeCode char(4),
	@IncomeSource varchar(30),
	@GrossIncome int,
	@IncomeFrequency char(1),
	@TrackingNum int,
	@BorrowerNum smallint
AS

INSERT INTO ILA_BorrowerIncome
(IncomeTypeCode, TrackingNum, BorrowerNum, IncomeSource, GrossIncome, IncomeFrequency)
VALUES
(@IncomeTypeCode, @TrackingNum, @BorrowerNum, @IncomeSource, @GrossIncome, @IncomeFrequency)

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_BorrowerIncome_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ILAxlate_BorrowerIncome_InsertIfNew]
	@IncomeTypeCode char(4),
	@IncomeSource varchar(30),
	@GrossIncome int,
	@IncomeFrequency char(1),
	@TrackingNum int,
	@BorrowerNum smallint
AS

IF NOT EXISTS (SELECT * FROM ILA_BorrowerIncome WHERE 1=1 AND IncomeTypeCode = @IncomeTypeCode AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum)
	BEGIN
		INSERT INTO ILA_BorrowerIncome
		(IncomeTypeCode, TrackingNum, BorrowerNum, IncomeSource, GrossIncome, IncomeFrequency)
		VALUES
		(@IncomeTypeCode, @TrackingNum, @BorrowerNum, @IncomeSource, @GrossIncome, @IncomeFrequency)
	END
ELSE	BEGIN
		UPDATE ILA_BorrowerIncome SET
			IncomeSource = @IncomeSource,
			GrossIncome = @GrossIncome,
			IncomeFrequency = @IncomeFrequency
		WHERE 1=1 AND IncomeTypeCode = @IncomeTypeCode AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_BorrowerIncome_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ILAxlate_BorrowerIncome_Select]
	@IncomeTypeCode char(4),
	@TrackingNum int,
	@BorrowerNum smallint
AS

EXEC IMS.sp_ILABorrowerIncome_Select @IncomeTypeCode, @TrackingNum, @BorrowerNum

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_BorrowerIncome_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ILAxlate_BorrowerIncome_Update]
	@IncomeTypeCode char(4),
	@IncomeSource varchar(30),
	@GrossIncome varchar(100),
	@IncomeFrequency varchar(1),
	@TrackingNum int,
	@BorrowerNum smallint
AS

IF @IncomeSource <> ''
	BEGIN
		DECLARE @IncomeSource_CASTED varchar(30)
		IF @IncomeSource = '^'
			BEGIN
				SET @IncomeSource_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @IncomeSource_CASTED = CAST(@IncomeSource AS varchar(30))
			END

		UPDATE ILA_BorrowerIncome
			SET IncomeSource = @IncomeSource_CASTED
		WHERE 1=1 AND IncomeTypeCode = @IncomeTypeCode AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @GrossIncome <> ''
	BEGIN
		DECLARE @GrossIncome_CASTED int
		IF @GrossIncome = '^'
			BEGIN
				SET @GrossIncome_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @GrossIncome_CASTED = CAST(@GrossIncome AS int)
			END

		UPDATE ILA_BorrowerIncome
			SET GrossIncome = @GrossIncome_CASTED
		WHERE 1=1 AND IncomeTypeCode = @IncomeTypeCode AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @IncomeFrequency <> ''
	BEGIN
		DECLARE @IncomeFrequency_CASTED char(1)
		IF @IncomeFrequency = '^'
			BEGIN
				SET @IncomeFrequency_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @IncomeFrequency_CASTED = CAST(@IncomeFrequency AS char(1))
			END

		UPDATE ILA_BorrowerIncome
			SET IncomeFrequency = @IncomeFrequency_CASTED
		WHERE 1=1 AND IncomeTypeCode = @IncomeTypeCode AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_BorrowerLiability_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ILAxlate_BorrowerLiability_Insert]
	@Sequence smallint,
	@TypeCode char(4),
	@Payment int,
	@Balance int,
	@TrackingNum int,
	@BorrowerNum smallint,
	@ClientIP varchar(15),
	@WebIP varchar(15),
	@ClusterID char(10),
	@LastModified datetime
AS

INSERT INTO ILA_BorrowerLiability
(TrackingNum, BorrowerNum, Sequence, TypeCode, Payment, Balance, ClientIP, WebIP, ClusterID, LastModified)
VALUES
(@TrackingNum, @BorrowerNum, @Sequence, @TypeCode, @Payment, @Balance, @ClientIP, @WebIP, @ClusterID, @LastModified)

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_BorrowerLiability_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ILAxlate_BorrowerLiability_InsertIfNew]
	@Sequence smallint,
	@TypeCode char(4),
	@Payment int,
	@Balance int,
	@TrackingNum int,
	@BorrowerNum smallint,
	@ClientIP varchar(15),
	@WebIP varchar(15),
	@ClusterID char(10),
	@LastModified datetime
AS

IF NOT EXISTS (SELECT * FROM ILA_BorrowerLiability WHERE 1=1 AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum)
	BEGIN
		INSERT INTO ILA_BorrowerLiability
		(TrackingNum, BorrowerNum, Sequence, TypeCode, Payment, Balance, ClientIP, WebIP, ClusterID, LastModified)
		VALUES
		(@TrackingNum, @BorrowerNum, @Sequence, @TypeCode, @Payment, @Balance, @ClientIP, @WebIP, @ClusterID, @LastModified)
	END
ELSE	BEGIN
		UPDATE ILA_BorrowerLiability SET
			Sequence = @Sequence,
			TypeCode = @TypeCode,
			Payment = @Payment,
			Balance = @Balance,
			ClientIP = @ClientIP,
			WebIP = @WebIP,
			ClusterID = @ClusterID,
			LastModified = @LastModified
		WHERE 1=1 AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_BorrowerLiability_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ILAxlate_BorrowerLiability_Select]
	@TrackingNum int,
	@BorrowerNum smallint
AS

SELECT * FROM ILA_BorrowerLiability
WHERE 1=1 AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_BorrowerLiability_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ILAxlate_BorrowerLiability_Update]
	@Sequence varchar(100),
	@TypeCode varchar(4),
	@Payment varchar(100),
	@Balance varchar(100),
	@TrackingNum int,
	@BorrowerNum smallint,
	@ClientIP varchar(15),
	@WebIP varchar(15),
	@ClusterID varchar(10),
	@LastModified varchar(100)
AS

IF @Sequence <> ''
	BEGIN
		DECLARE @Sequence_CASTED smallint
		IF @Sequence = '^'
			BEGIN
				SET @Sequence_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Sequence_CASTED = CAST(@Sequence AS smallint)
			END

		UPDATE ILA_BorrowerLiability
			SET Sequence = @Sequence_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @TypeCode <> ''
	BEGIN
		DECLARE @TypeCode_CASTED char(4)
		IF @TypeCode = '^'
			BEGIN
				SET @TypeCode_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @TypeCode_CASTED = CAST(@TypeCode AS char(4))
			END

		UPDATE ILA_BorrowerLiability
			SET TypeCode = @TypeCode_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @Payment <> ''
	BEGIN
		DECLARE @Payment_CASTED int
		IF @Payment = '^'
			BEGIN
				SET @Payment_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Payment_CASTED = CAST(@Payment AS int)
			END

		UPDATE ILA_BorrowerLiability
			SET Payment = @Payment_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @Balance <> ''
	BEGIN
		DECLARE @Balance_CASTED int
		IF @Balance = '^'
			BEGIN
				SET @Balance_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Balance_CASTED = CAST(@Balance AS int)
			END

		UPDATE ILA_BorrowerLiability
			SET Balance = @Balance_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @ClientIP <> ''
	BEGIN
		DECLARE @ClientIP_CASTED varchar(15)
		IF @ClientIP = '^'
			BEGIN
				SET @ClientIP_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ClientIP_CASTED = CAST(@ClientIP AS varchar(15))
			END

		UPDATE ILA_BorrowerLiability
			SET ClientIP = @ClientIP_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @WebIP <> ''
	BEGIN
		DECLARE @WebIP_CASTED varchar(15)
		IF @WebIP = '^'
			BEGIN
				SET @WebIP_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @WebIP_CASTED = CAST(@WebIP AS varchar(15))
			END

		UPDATE ILA_BorrowerLiability
			SET WebIP = @WebIP_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @ClusterID <> ''
	BEGIN
		DECLARE @ClusterID_CASTED char(10)
		IF @ClusterID = '^'
			BEGIN
				SET @ClusterID_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ClusterID_CASTED = CAST(@ClusterID AS char(10))
			END

		UPDATE ILA_BorrowerLiability
			SET ClusterID = @ClusterID_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @LastModified <> ''
	BEGIN
		DECLARE @LastModified_CASTED datetime
		IF @LastModified = '^'
			BEGIN
				SET @LastModified_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @LastModified_CASTED = CAST(@LastModified AS datetime)
			END

		UPDATE ILA_BorrowerLiability
			SET LastModified = @LastModified_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_BorrowerMortgage_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ILAxlate_BorrowerMortgage_Insert]
	@Sequence smallint,
	@Lender varchar(40),
	@OrigAmt int,
	@Balance int,
	@Payment int,
	@TrackingNum int,
	@BorrowerNum smallint,
	@ClientIP varchar(15),
	@WebIP varchar(15),
	@ClusterID char(10),
	@LastModified datetime
AS

INSERT INTO ILA_BorrowerMortgage
(TrackingNum, BorrowerNum, Sequence, Lender, OrigAmt, Balance, Payment, ClientIP, WebIP, ClusterID, LastModified)
VALUES
(@TrackingNum, @BorrowerNum, @Sequence, @Lender, @OrigAmt, @Balance, @Payment, @ClientIP, @WebIP, @ClusterID, @LastModified)

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_BorrowerMortgage_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ILAxlate_BorrowerMortgage_InsertIfNew]
	@Sequence smallint,
	@Lender varchar(40),
	@OrigAmt int,
	@Balance int,
	@Payment int,
	@TrackingNum int,
	@BorrowerNum smallint,
	@ClientIP varchar(15),
	@WebIP varchar(15),
	@ClusterID char(10),
	@LastModified datetime
AS

IF NOT EXISTS (SELECT * FROM ILA_BorrowerMortgage WHERE 1=1 AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum)
	BEGIN
		INSERT INTO ILA_BorrowerMortgage
		(TrackingNum, BorrowerNum, Sequence, Lender, OrigAmt, Balance, Payment, ClientIP, WebIP, ClusterID, LastModified)
		VALUES
		(@TrackingNum, @BorrowerNum, @Sequence, @Lender, @OrigAmt, @Balance, @Payment, @ClientIP, @WebIP, @ClusterID, @LastModified)
	END
ELSE	BEGIN
		UPDATE ILA_BorrowerMortgage SET
			Sequence = @Sequence,
			Lender = @Lender,
			OrigAmt = @OrigAmt,
			Balance = @Balance,
			Payment = @Payment,
			ClientIP = @ClientIP,
			WebIP = @WebIP,
			ClusterID = @ClusterID,
			LastModified = @LastModified
		WHERE 1=1 AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_BorrowerMortgage_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ILAxlate_BorrowerMortgage_Select]
	@TrackingNum int,
	@BorrowerNum smallint
AS

SELECT * FROM ILA_BorrowerMortgage
WHERE 1=1 AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_BorrowerMortgage_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ILAxlate_BorrowerMortgage_Update]
	@Sequence varchar(100),
	@Lender varchar(40),
	@OrigAmt varchar(100),
	@Balance varchar(100),
	@Payment varchar(100),
	@TrackingNum int,
	@BorrowerNum smallint,
	@ClientIP varchar(15),
	@WebIP varchar(15),
	@ClusterID varchar(10),
	@LastModified varchar(100)
AS

IF @Sequence <> ''
	BEGIN
		DECLARE @Sequence_CASTED smallint
		IF @Sequence = '^'
			BEGIN
				SET @Sequence_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Sequence_CASTED = CAST(@Sequence AS smallint)
			END

		UPDATE ILA_BorrowerMortgage
			SET Sequence = @Sequence_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @Lender <> ''
	BEGIN
		DECLARE @Lender_CASTED varchar(40)
		IF @Lender = '^'
			BEGIN
				SET @Lender_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Lender_CASTED = CAST(@Lender AS varchar(40))
			END

		UPDATE ILA_BorrowerMortgage
			SET Lender = @Lender_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @OrigAmt <> ''
	BEGIN
		DECLARE @OrigAmt_CASTED int
		IF @OrigAmt = '^'
			BEGIN
				SET @OrigAmt_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @OrigAmt_CASTED = CAST(@OrigAmt AS int)
			END

		UPDATE ILA_BorrowerMortgage
			SET OrigAmt = @OrigAmt_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @Balance <> ''
	BEGIN
		DECLARE @Balance_CASTED int
		IF @Balance = '^'
			BEGIN
				SET @Balance_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Balance_CASTED = CAST(@Balance AS int)
			END

		UPDATE ILA_BorrowerMortgage
			SET Balance = @Balance_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @Payment <> ''
	BEGIN
		DECLARE @Payment_CASTED int
		IF @Payment = '^'
			BEGIN
				SET @Payment_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Payment_CASTED = CAST(@Payment AS int)
			END

		UPDATE ILA_BorrowerMortgage
			SET Payment = @Payment_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @ClientIP <> ''
	BEGIN
		DECLARE @ClientIP_CASTED varchar(15)
		IF @ClientIP = '^'
			BEGIN
				SET @ClientIP_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ClientIP_CASTED = CAST(@ClientIP AS varchar(15))
			END

		UPDATE ILA_BorrowerMortgage
			SET ClientIP = @ClientIP_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @WebIP <> ''
	BEGIN
		DECLARE @WebIP_CASTED varchar(15)
		IF @WebIP = '^'
			BEGIN
				SET @WebIP_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @WebIP_CASTED = CAST(@WebIP AS varchar(15))
			END

		UPDATE ILA_BorrowerMortgage
			SET WebIP = @WebIP_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @ClusterID <> ''
	BEGIN
		DECLARE @ClusterID_CASTED char(10)
		IF @ClusterID = '^'
			BEGIN
				SET @ClusterID_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ClusterID_CASTED = CAST(@ClusterID AS char(10))
			END

		UPDATE ILA_BorrowerMortgage
			SET ClusterID = @ClusterID_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @LastModified <> ''
	BEGIN
		DECLARE @LastModified_CASTED datetime
		IF @LastModified = '^'
			BEGIN
				SET @LastModified_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @LastModified_CASTED = CAST(@LastModified AS datetime)
			END

		UPDATE ILA_BorrowerMortgage
			SET LastModified = @LastModified_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_BorrowerPayoff_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ILAxlate_BorrowerPayoff_Insert]
	@Sequence smallint,
	@Lender varchar(40),
	@Account varchar(40),
	@Balance int,
	@Payment int,
	@TrackingNum int,
	@BorrowerNum smallint,
	@ClientIP varchar(15),
	@WebIP varchar(15),
	@ClusterID char(10),
	@LastModified datetime
AS

INSERT INTO ILA_BorrowerPayoff
(TrackingNum, BorrowerNum, Sequence, Lender, Account, Balance, Payment, ClientIP, WebIP, ClusterID, LastModified)
VALUES
(@TrackingNum, @BorrowerNum, @Sequence, @Lender, @Account, @Balance, @Payment, @ClientIP, @WebIP, @ClusterID, @LastModified)

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_BorrowerPayoff_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ILAxlate_BorrowerPayoff_InsertIfNew]
	@Sequence smallint,
	@Lender varchar(40),
	@Account varchar(40),
	@Balance int,
	@Payment int,
	@TrackingNum int,
	@BorrowerNum smallint,
	@ClientIP varchar(15),
	@WebIP varchar(15),
	@ClusterID char(10),
	@LastModified datetime
AS

IF NOT EXISTS (SELECT * FROM ILA_BorrowerPayoff WHERE 1=1 AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum)
	BEGIN
		INSERT INTO ILA_BorrowerPayoff
		(TrackingNum, BorrowerNum, Sequence, Lender, Account, Balance, Payment, ClientIP, WebIP, ClusterID, LastModified)
		VALUES
		(@TrackingNum, @BorrowerNum, @Sequence, @Lender, @Account, @Balance, @Payment, @ClientIP, @WebIP, @ClusterID, @LastModified)
	END
ELSE	BEGIN
		UPDATE ILA_BorrowerPayoff SET
			Sequence = @Sequence,
			Lender = @Lender,
			Account = @Account,
			Balance = @Balance,
			Payment = @Payment,
			ClientIP = @ClientIP,
			WebIP = @WebIP,
			ClusterID = @ClusterID,
			LastModified = @LastModified
		WHERE 1=1 AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_BorrowerPayoff_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ILAxlate_BorrowerPayoff_Select]
	@TrackingNum int,
	@BorrowerNum smallint
AS

SELECT * FROM ILA_BorrowerPayoff
WHERE 1=1 AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_BorrowerPayoff_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ILAxlate_BorrowerPayoff_Update]
	@Sequence varchar(100),
	@Lender varchar(40),
	@Account varchar(40),
	@Balance varchar(100),
	@Payment varchar(100),
	@TrackingNum int,
	@BorrowerNum smallint,
	@ClientIP varchar(15),
	@WebIP varchar(15),
	@ClusterID varchar(10),
	@LastModified varchar(100)
AS

IF @Sequence <> ''
	BEGIN
		DECLARE @Sequence_CASTED smallint
		IF @Sequence = '^'
			BEGIN
				SET @Sequence_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Sequence_CASTED = CAST(@Sequence AS smallint)
			END

		UPDATE ILA_BorrowerPayoff
			SET Sequence = @Sequence_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @Lender <> ''
	BEGIN
		DECLARE @Lender_CASTED varchar(40)
		IF @Lender = '^'
			BEGIN
				SET @Lender_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Lender_CASTED = CAST(@Lender AS varchar(40))
			END

		UPDATE ILA_BorrowerPayoff
			SET Lender = @Lender_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @Account <> ''
	BEGIN
		DECLARE @Account_CASTED varchar(40)
		IF @Account = '^'
			BEGIN
				SET @Account_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Account_CASTED = CAST(@Account AS varchar(40))
			END

		UPDATE ILA_BorrowerPayoff
			SET Account = @Account_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @Balance <> ''
	BEGIN
		DECLARE @Balance_CASTED int
		IF @Balance = '^'
			BEGIN
				SET @Balance_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Balance_CASTED = CAST(@Balance AS int)
			END

		UPDATE ILA_BorrowerPayoff
			SET Balance = @Balance_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @Payment <> ''
	BEGIN
		DECLARE @Payment_CASTED int
		IF @Payment = '^'
			BEGIN
				SET @Payment_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Payment_CASTED = CAST(@Payment AS int)
			END

		UPDATE ILA_BorrowerPayoff
			SET Payment = @Payment_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @ClientIP <> ''
	BEGIN
		DECLARE @ClientIP_CASTED varchar(15)
		IF @ClientIP = '^'
			BEGIN
				SET @ClientIP_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ClientIP_CASTED = CAST(@ClientIP AS varchar(15))
			END

		UPDATE ILA_BorrowerPayoff
			SET ClientIP = @ClientIP_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @WebIP <> ''
	BEGIN
		DECLARE @WebIP_CASTED varchar(15)
		IF @WebIP = '^'
			BEGIN
				SET @WebIP_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @WebIP_CASTED = CAST(@WebIP AS varchar(15))
			END

		UPDATE ILA_BorrowerPayoff
			SET WebIP = @WebIP_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @ClusterID <> ''
	BEGIN
		DECLARE @ClusterID_CASTED char(10)
		IF @ClusterID = '^'
			BEGIN
				SET @ClusterID_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ClusterID_CASTED = CAST(@ClusterID AS char(10))
			END

		UPDATE ILA_BorrowerPayoff
			SET ClusterID = @ClusterID_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @LastModified <> ''
	BEGIN
		DECLARE @LastModified_CASTED datetime
		IF @LastModified = '^'
			BEGIN
				SET @LastModified_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @LastModified_CASTED = CAST(@LastModified AS datetime)
			END

		UPDATE ILA_BorrowerPayoff
			SET LastModified = @LastModified_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_BorrowerQuestion_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ILAxlate_BorrowerQuestion_Insert]
	@Sequence smallint,
	@FieldName1 varchar(16),
	@FieldName2 varchar(16),
	@Answer char(1),
	@Explain varchar(80),
	@TrackingNum int,
	@BorrowerNum smallint,
	@ClientIP varchar(15),
	@WebIP varchar(15),
	@ClusterID char(10),
	@LastModified datetime
AS

INSERT INTO ILA_BorrowerQuestion
(TrackingNum, BorrowerNum, Sequence, FieldName1, FieldName2, Answer, Explain, ClientIP, WebIP, ClusterID, LastModified)
VALUES
(@TrackingNum, @BorrowerNum, @Sequence, @FieldName1, @FieldName2, @Answer, @Explain, @ClientIP, @WebIP, @ClusterID, @LastModified)

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_BorrowerQuestion_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ILAxlate_BorrowerQuestion_InsertIfNew]
	@Sequence smallint,
	@FieldName1 varchar(16),
	@FieldName2 varchar(16),
	@Answer char(1),
	@Explain varchar(80),
	@TrackingNum int,
	@BorrowerNum smallint,
	@ClientIP varchar(15),
	@WebIP varchar(15),
	@ClusterID char(10),
	@LastModified datetime
AS

IF NOT EXISTS (SELECT * FROM ILA_BorrowerQuestion WHERE 1=1 AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum)
	BEGIN
		INSERT INTO ILA_BorrowerQuestion
		(TrackingNum, BorrowerNum, Sequence, FieldName1, FieldName2, Answer, Explain, ClientIP, WebIP, ClusterID, LastModified)
		VALUES
		(@TrackingNum, @BorrowerNum, @Sequence, @FieldName1, @FieldName2, @Answer, @Explain, @ClientIP, @WebIP, @ClusterID, @LastModified)
	END
ELSE	BEGIN
		UPDATE ILA_BorrowerQuestion SET
			Sequence = @Sequence,
			FieldName1 = @FieldName1,
			FieldName2 = @FieldName2,
			Answer = @Answer,
			Explain = @Explain,
			ClientIP = @ClientIP,
			WebIP = @WebIP,
			ClusterID = @ClusterID,
			LastModified = @LastModified
		WHERE 1=1 AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_BorrowerQuestion_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ILAxlate_BorrowerQuestion_Select]
	@TrackingNum int,
	@BorrowerNum smallint
AS

SELECT * FROM ILA_BorrowerQuestion
WHERE 1=1 AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_BorrowerQuestion_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ILAxlate_BorrowerQuestion_Update]
	@Sequence varchar(100),
	@FieldName1 varchar(16),
	@FieldName2 varchar(16),
	@Answer varchar(1),
	@Explain varchar(80),
	@TrackingNum int,
	@BorrowerNum smallint,
	@ClientIP varchar(15),
	@WebIP varchar(15),
	@ClusterID varchar(10),
	@LastModified varchar(100)
AS

IF @Sequence <> ''
	BEGIN
		DECLARE @Sequence_CASTED smallint
		IF @Sequence = '^'
			BEGIN
				SET @Sequence_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Sequence_CASTED = CAST(@Sequence AS smallint)
			END

		UPDATE ILA_BorrowerQuestion
			SET Sequence = @Sequence_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @FieldName1 <> ''
	BEGIN
		DECLARE @FieldName1_CASTED varchar(16)
		IF @FieldName1 = '^'
			BEGIN
				SET @FieldName1_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @FieldName1_CASTED = CAST(@FieldName1 AS varchar(16))
			END

		UPDATE ILA_BorrowerQuestion
			SET FieldName1 = @FieldName1_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @FieldName2 <> ''
	BEGIN
		DECLARE @FieldName2_CASTED varchar(16)
		IF @FieldName2 = '^'
			BEGIN
				SET @FieldName2_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @FieldName2_CASTED = CAST(@FieldName2 AS varchar(16))
			END

		UPDATE ILA_BorrowerQuestion
			SET FieldName2 = @FieldName2_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @Answer <> ''
	BEGIN
		DECLARE @Answer_CASTED char(1)
		IF @Answer = '^'
			BEGIN
				SET @Answer_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Answer_CASTED = CAST(@Answer AS char(1))
			END

		UPDATE ILA_BorrowerQuestion
			SET Answer = @Answer_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @Explain <> ''
	BEGIN
		DECLARE @Explain_CASTED varchar(80)
		IF @Explain = '^'
			BEGIN
				SET @Explain_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Explain_CASTED = CAST(@Explain AS varchar(80))
			END

		UPDATE ILA_BorrowerQuestion
			SET Explain = @Explain_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @ClientIP <> ''
	BEGIN
		DECLARE @ClientIP_CASTED varchar(15)
		IF @ClientIP = '^'
			BEGIN
				SET @ClientIP_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ClientIP_CASTED = CAST(@ClientIP AS varchar(15))
			END

		UPDATE ILA_BorrowerQuestion
			SET ClientIP = @ClientIP_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @WebIP <> ''
	BEGIN
		DECLARE @WebIP_CASTED varchar(15)
		IF @WebIP = '^'
			BEGIN
				SET @WebIP_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @WebIP_CASTED = CAST(@WebIP AS varchar(15))
			END

		UPDATE ILA_BorrowerQuestion
			SET WebIP = @WebIP_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @ClusterID <> ''
	BEGIN
		DECLARE @ClusterID_CASTED char(10)
		IF @ClusterID = '^'
			BEGIN
				SET @ClusterID_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ClusterID_CASTED = CAST(@ClusterID AS char(10))
			END

		UPDATE ILA_BorrowerQuestion
			SET ClusterID = @ClusterID_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @LastModified <> ''
	BEGIN
		DECLARE @LastModified_CASTED datetime
		IF @LastModified = '^'
			BEGIN
				SET @LastModified_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @LastModified_CASTED = CAST(@LastModified AS datetime)
			END

		UPDATE ILA_BorrowerQuestion
			SET LastModified = @LastModified_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_BorrowerReference_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ILAxlate_BorrowerReference_Delete]
	@TrackingNum int,
	@BorrowerNum smallint
AS

DELETE FROM ILA_BorrowerReference
WHERE 1=1 AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_BorrowerReference_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ILAxlate_BorrowerReference_DeleteAll]
	@TrackingNum int,
	@BorrowerNum smallint
AS

DELETE FROM ILA_BorrowerReference
WHERE 1=1 AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_BorrowerReference_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ILAxlate_BorrowerReference_Insert]
	@Sequence smallint,
	@Relationship varchar(30),
	@FName varchar(20),
	@MInitial varchar(20),
	@LName varchar(20),
	@Address1 varchar(30),
	@Address2 varchar(30),
	@Address3 varchar(30),
	@City varchar(20),
	@State char(2),
	@Zip char(9),
	@CntryCode char(2),
	@CntryName varchar(40),
	@AreaCode char(3),
	@Phone char(8),
	@Ext char(5),
	@TrackingNum int,
	@BorrowerNum smallint,
	@ClientIP varchar(15),
	@WebIP varchar(15),
	@ClusterID char(10),
	@LastModified datetime
AS

INSERT INTO ILA_BorrowerReference
(TrackingNum, BorrowerNum, Sequence, Relationship, FName, MInitial, LName, Address1, Address2, Address3, City, State, Zip, CntryCode, CntryName, AreaCode, Phone, Ext, ClientIP, WebIP, ClusterID, LastModified)
VALUES
(@TrackingNum, @BorrowerNum, @Sequence, @Relationship, @FName, @MInitial, @LName, @Address1, @Address2, @Address3, @City, @State, @Zip, @CntryCode, @CntryName, @AreaCode, @Phone, @Ext, @ClientIP, @WebIP, @ClusterID, @LastModified)

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_BorrowerReference_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ILAxlate_BorrowerReference_InsertIfNew]
	@Sequence smallint,
	@Relationship varchar(30),
	@FName varchar(20),
	@MInitial varchar(20),
	@LName varchar(20),
	@Address1 varchar(30),
	@Address2 varchar(30),
	@Address3 varchar(30),
	@City varchar(20),
	@State char(2),
	@Zip char(9),
	@CntryCode char(2),
	@CntryName varchar(40),
	@AreaCode char(3),
	@Phone char(8),
	@Ext char(5),
	@TrackingNum int,
	@BorrowerNum smallint,
	@ClientIP varchar(15),
	@WebIP varchar(15),
	@ClusterID char(10),
	@LastModified datetime
AS

IF NOT EXISTS (SELECT * FROM ILA_BorrowerReference WHERE 1=1 AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum)
	BEGIN
		INSERT INTO ILA_BorrowerReference
		(TrackingNum, BorrowerNum, Sequence, Relationship, FName, MInitial, LName, Address1, Address2, Address3, City, State, Zip, CntryCode, CntryName, AreaCode, Phone, Ext, ClientIP, WebIP, ClusterID, LastModified)
		VALUES
		(@TrackingNum, @BorrowerNum, @Sequence, @Relationship, @FName, @MInitial, @LName, @Address1, @Address2, @Address3, @City, @State, @Zip, @CntryCode, @CntryName, @AreaCode, @Phone, @Ext, @ClientIP, @WebIP, @ClusterID, @LastModified)
	END
ELSE	BEGIN
		UPDATE ILA_BorrowerReference SET
			Sequence = @Sequence,
			Relationship = @Relationship,
			FName = @FName,
			MInitial = @MInitial,
			LName = @LName,
			Address1 = @Address1,
			Address2 = @Address2,
			Address3 = @Address3,
			City = @City,
			State = @State,
			Zip = @Zip,
			CntryCode = @CntryCode,
			CntryName = @CntryName,
			AreaCode = @AreaCode,
			Phone = @Phone,
			Ext = @Ext,
			ClientIP = @ClientIP,
			WebIP = @WebIP,
			ClusterID = @ClusterID,
			LastModified = @LastModified
		WHERE 1=1 AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_BorrowerReference_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ILAxlate_BorrowerReference_Select]
	@TrackingNum int,
	@BorrowerNum smallint
AS

SELECT * FROM ILA_BorrowerReference
WHERE 1=1 AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_BorrowerReference_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ILAxlate_BorrowerReference_SelectAll]
	@TrackingNum int,
	@BorrowerNum smallint
AS

SELECT * FROM ILA_BorrowerReference
WHERE 1=1 AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_BorrowerReference_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ILAxlate_BorrowerReference_Update]
	@Sequence varchar(100),
	@Relationship varchar(30),
	@FName varchar(20),
	@MInitial varchar(20),
	@LName varchar(20),
	@Address1 varchar(30),
	@Address2 varchar(30),
	@Address3 varchar(30),
	@City varchar(20),
	@State varchar(2),
	@Zip varchar(9),
	@CntryCode varchar(2),
	@CntryName varchar(40),
	@AreaCode varchar(3),
	@Phone varchar(8),
	@Ext varchar(5),
	@TrackingNum int,
	@BorrowerNum smallint,
	@ClientIP varchar(15),
	@WebIP varchar(15),
	@ClusterID varchar(10),
	@LastModified varchar(100)
AS

IF @Sequence <> ''
	BEGIN
		DECLARE @Sequence_CASTED smallint
		IF @Sequence = '^'
			BEGIN
				SET @Sequence_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Sequence_CASTED = CAST(@Sequence AS smallint)
			END

		UPDATE ILA_BorrowerReference
			SET Sequence = @Sequence_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @Relationship <> ''
	BEGIN
		DECLARE @Relationship_CASTED varchar(30)
		IF @Relationship = '^'
			BEGIN
				SET @Relationship_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Relationship_CASTED = CAST(@Relationship AS varchar(30))
			END

		UPDATE ILA_BorrowerReference
			SET Relationship = @Relationship_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @FName <> ''
	BEGIN
		DECLARE @FName_CASTED varchar(20)
		IF @FName = '^'
			BEGIN
				SET @FName_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @FName_CASTED = CAST(@FName AS varchar(20))
			END

		UPDATE ILA_BorrowerReference
			SET FName = @FName_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @MInitial <> ''
	BEGIN
		DECLARE @MInitial_CASTED varchar(20)
		IF @MInitial = '^'
			BEGIN
				SET @MInitial_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @MInitial_CASTED = CAST(@MInitial AS varchar(20))
			END

		UPDATE ILA_BorrowerReference
			SET MInitial = @MInitial_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @LName <> ''
	BEGIN
		DECLARE @LName_CASTED varchar(20)
		IF @LName = '^'
			BEGIN
				SET @LName_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @LName_CASTED = CAST(@LName AS varchar(20))
			END

		UPDATE ILA_BorrowerReference
			SET LName = @LName_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @Address1 <> ''
	BEGIN
		DECLARE @Address1_CASTED varchar(30)
		IF @Address1 = '^'
			BEGIN
				SET @Address1_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Address1_CASTED = CAST(@Address1 AS varchar(30))
			END

		UPDATE ILA_BorrowerReference
			SET Address1 = @Address1_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @Address2 <> ''
	BEGIN
		DECLARE @Address2_CASTED varchar(30)
		IF @Address2 = '^'
			BEGIN
				SET @Address2_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Address2_CASTED = CAST(@Address2 AS varchar(30))
			END

		UPDATE ILA_BorrowerReference
			SET Address2 = @Address2_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @Address3 <> ''
	BEGIN
		DECLARE @Address3_CASTED varchar(30)
		IF @Address3 = '^'
			BEGIN
				SET @Address3_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Address3_CASTED = CAST(@Address3 AS varchar(30))
			END

		UPDATE ILA_BorrowerReference
			SET Address3 = @Address3_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @City <> ''
	BEGIN
		DECLARE @City_CASTED varchar(20)
		IF @City = '^'
			BEGIN
				SET @City_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @City_CASTED = CAST(@City AS varchar(20))
			END

		UPDATE ILA_BorrowerReference
			SET City = @City_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @State <> ''
	BEGIN
		DECLARE @State_CASTED char(2)
		IF @State = '^'
			BEGIN
				SET @State_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @State_CASTED = CAST(@State AS char(2))
			END

		UPDATE ILA_BorrowerReference
			SET State = @State_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @Zip <> ''
	BEGIN
		DECLARE @Zip_CASTED char(9)
		IF @Zip = '^'
			BEGIN
				SET @Zip_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Zip_CASTED = CAST(@Zip AS char(9))
			END

		UPDATE ILA_BorrowerReference
			SET Zip = @Zip_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @CntryCode <> ''
	BEGIN
		DECLARE @CntryCode_CASTED char(2)
		IF @CntryCode = '^'
			BEGIN
				SET @CntryCode_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @CntryCode_CASTED = CAST(@CntryCode AS char(2))
			END

		UPDATE ILA_BorrowerReference
			SET CntryCode = @CntryCode_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @CntryName <> ''
	BEGIN
		DECLARE @CntryName_CASTED varchar(40)
		IF @CntryName = '^'
			BEGIN
				SET @CntryName_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @CntryName_CASTED = CAST(@CntryName AS varchar(40))
			END

		UPDATE ILA_BorrowerReference
			SET CntryName = @CntryName_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @AreaCode <> ''
	BEGIN
		DECLARE @AreaCode_CASTED char(3)
		IF @AreaCode = '^'
			BEGIN
				SET @AreaCode_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @AreaCode_CASTED = CAST(@AreaCode AS char(3))
			END

		UPDATE ILA_BorrowerReference
			SET AreaCode = @AreaCode_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @Phone <> ''
	BEGIN
		DECLARE @Phone_CASTED char(8)
		IF @Phone = '^'
			BEGIN
				SET @Phone_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Phone_CASTED = CAST(@Phone AS char(8))
			END

		UPDATE ILA_BorrowerReference
			SET Phone = @Phone_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @Ext <> ''
	BEGIN
		DECLARE @Ext_CASTED char(5)
		IF @Ext = '^'
			BEGIN
				SET @Ext_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Ext_CASTED = CAST(@Ext AS char(5))
			END

		UPDATE ILA_BorrowerReference
			SET Ext = @Ext_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @ClientIP <> ''
	BEGIN
		DECLARE @ClientIP_CASTED varchar(15)
		IF @ClientIP = '^'
			BEGIN
				SET @ClientIP_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ClientIP_CASTED = CAST(@ClientIP AS varchar(15))
			END

		UPDATE ILA_BorrowerReference
			SET ClientIP = @ClientIP_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @WebIP <> ''
	BEGIN
		DECLARE @WebIP_CASTED varchar(15)
		IF @WebIP = '^'
			BEGIN
				SET @WebIP_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @WebIP_CASTED = CAST(@WebIP AS varchar(15))
			END

		UPDATE ILA_BorrowerReference
			SET WebIP = @WebIP_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @ClusterID <> ''
	BEGIN
		DECLARE @ClusterID_CASTED char(10)
		IF @ClusterID = '^'
			BEGIN
				SET @ClusterID_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ClusterID_CASTED = CAST(@ClusterID AS char(10))
			END

		UPDATE ILA_BorrowerReference
			SET ClusterID = @ClusterID_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

IF @LastModified <> ''
	BEGIN
		DECLARE @LastModified_CASTED datetime
		IF @LastModified = '^'
			BEGIN
				SET @LastModified_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @LastModified_CASTED = CAST(@LastModified AS datetime)
			END

		UPDATE ILA_BorrowerReference
			SET LastModified = @LastModified_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum AND BorrowerNum = @BorrowerNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_CustomFieldMapping_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ILAxlate_CustomFieldMapping_Select]
AS

SELECT * FROM ILA_CustomFieldMapping
WHERE 1=1

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_CustomFieldMapping_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ILAxlate_CustomFieldMapping_SelectAll]
AS

SELECT * FROM ILA_CustomFieldMapping
WHERE 1=1

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_CustomFieldMapping_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ILAxlate_CustomFieldMapping_Update]
	@IlaQuestionId varchar(50),
	@CustomFieldId varchar(50),
	@Context varchar(500)
AS

IF @IlaQuestionId <> ''
	BEGIN
		DECLARE @IlaQuestionId_CASTED varchar(50)
		IF @IlaQuestionId = '^'
			BEGIN
				SET @IlaQuestionId_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @IlaQuestionId_CASTED = CAST(@IlaQuestionId AS varchar(50))
			END

		UPDATE ILA_CustomFieldMapping
			SET IlaQuestionId = @IlaQuestionId_CASTED
		WHERE 1=1
	END

IF @CustomFieldId <> ''
	BEGIN
		DECLARE @CustomFieldId_CASTED varchar(50)
		IF @CustomFieldId = '^'
			BEGIN
				SET @CustomFieldId_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @CustomFieldId_CASTED = CAST(@CustomFieldId AS varchar(50))
			END

		UPDATE ILA_CustomFieldMapping
			SET CustomFieldId = @CustomFieldId_CASTED
		WHERE 1=1
	END

IF @Context <> ''
	BEGIN
		DECLARE @Context_CASTED varchar(500)
		IF @Context = '^'
			BEGIN
				SET @Context_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Context_CASTED = CAST(@Context AS varchar(500))
			END

		UPDATE ILA_CustomFieldMapping
			SET Context = @Context_CASTED
		WHERE 1=1
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_InsuranceProduct_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ILAxlate_InsuranceProduct_Insert]
	@Description varchar(80),
	@ApproInsCode varchar(20),
	@HostInsCode varchar(20),
	@Display char(1)
AS

INSERT INTO ILA_InsuranceProduct
(Description, ApproInsCode, HostInsCode, Display)
VALUES
(@Description, @ApproInsCode, @HostInsCode, @Display)

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_InsuranceProduct_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ILAxlate_InsuranceProduct_Select]
AS

SELECT * FROM ILA_InsuranceProduct
WHERE 1=1
ORDER BY Sequence

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_InsuranceProduct_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ILAxlate_InsuranceProduct_Update]
	@Description varchar(80),
	@ApproInsCode varchar(20),
	@HostInsCode varchar(20),
	@Display varchar(1)
AS

IF @Description <> ''
	BEGIN
		DECLARE @Description_CASTED varchar(80)
		IF @Description = '^'
			BEGIN
				SET @Description_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Description_CASTED = CAST(@Description AS varchar(80))
			END

		UPDATE ILA_InsuranceProduct
			SET Description = @Description_CASTED
		WHERE 1=1
	END

IF @ApproInsCode <> ''
	BEGIN
		DECLARE @ApproInsCode_CASTED varchar(20)
		IF @ApproInsCode = '^'
			BEGIN
				SET @ApproInsCode_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ApproInsCode_CASTED = CAST(@ApproInsCode AS varchar(20))
			END

		UPDATE ILA_InsuranceProduct
			SET ApproInsCode = @ApproInsCode_CASTED
		WHERE 1=1
	END

IF @HostInsCode <> ''
	BEGIN
		DECLARE @HostInsCode_CASTED varchar(20)
		IF @HostInsCode = '^'
			BEGIN
				SET @HostInsCode_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @HostInsCode_CASTED = CAST(@HostInsCode AS varchar(20))
			END

		UPDATE ILA_InsuranceProduct
			SET HostInsCode = @HostInsCode_CASTED
		WHERE 1=1
	END

IF @Display <> ''
	BEGIN
		DECLARE @Display_CASTED char(1)
		IF @Display = '^'
			BEGIN
				SET @Display_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Display_CASTED = CAST(@Display AS char(1))
			END

		UPDATE ILA_InsuranceProduct
			SET Display = @Display_CASTED
		WHERE 1=1
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_LoanProduct_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ILAxlate_LoanProduct_Insert]
	@Description varchar(80),
	@LoanType char(6),
	@Display char(1),
	@MinAPR char(6),
	@ProductCode varchar(16),
	@ProductID int,
	@ProductTrackingNum int,
	@DisclosureCode char(2),
	@CollateralCode char(4),
	@MaxAmount varchar(13),
	@MaxAPR char(6),
	@MaxTerm char(4),
	@Terms varchar(50),
	@MinAmount varchar(13),
	@MinTerm char(4),
	@Sequence smallint
AS

INSERT INTO ILA_LoanProduct
(Description, LoanType, Display, MinAPR, ProductCode, ProductID, ProductTrackingNum, DisclosureCode, CollateralCode, MaxAmount, MaxAPR, MaxTerm, Terms, MinAmount, MinTerm, Sequence)
VALUES
(@Description, @LoanType, @Display, @MinAPR, @ProductCode, @ProductID, @ProductTrackingNum, @DisclosureCode, @CollateralCode, @MaxAmount, @MaxAPR, @MaxTerm, @Terms, @MinAmount, @MinTerm, @Sequence)

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_LoanProduct_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ILAxlate_LoanProduct_Select]
	@ProductCode varchar(16)
AS

SELECT * FROM ILA_LoanProduct
WHERE 1=1 AND ProductCode = @ProductCode
ORDER BY Sequence

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_LoanProduct_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ILAxlate_LoanProduct_SelectAll]
AS

SELECT * FROM ILA_LoanProduct
WHERE 1=1
ORDER BY Sequence

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_LoanProduct_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ILAxlate_LoanProduct_Update]
	@Description varchar(80),
	@LoanType varchar(6),
	@Display varchar(1),
	@MinAPR varchar(6),
	@ProductCode varchar(16),
	@ProductTypeID varchar(100),
	@ProductID varchar(100),
	@ModuleID varchar(100),
	@ProductTrackingNum varchar(100),
	@DisclosureCode varchar(2),
	@CollateralCode varchar(4),
	@MaxAmount varchar(13),
	@MaxAPR varchar(6),
	@MaxTerm varchar(4),
	@Terms varchar(50),
	@MinAmount varchar(13),
	@MinTerm varchar(4),
	@Sequence varchar(100),
	@LoanPurposes varchar(250)
AS

IF @Description <> ''
	BEGIN
		DECLARE @Description_CASTED varchar(80)
		IF @Description = '^'
			BEGIN
				SET @Description_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Description_CASTED = CAST(@Description AS varchar(80))
			END

		UPDATE ILA_LoanProduct
			SET Description = @Description_CASTED
		WHERE 1=1 AND ProductCode = @ProductCode
	END

IF @LoanType <> ''
	BEGIN
		DECLARE @LoanType_CASTED char(6)
		IF @LoanType = '^'
			BEGIN
				SET @LoanType_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @LoanType_CASTED = CAST(@LoanType AS char(6))
			END

		UPDATE ILA_LoanProduct
			SET LoanType = @LoanType_CASTED
		WHERE 1=1 AND ProductCode = @ProductCode
	END

IF @Display <> ''
	BEGIN
		DECLARE @Display_CASTED char(1)
		IF @Display = '^'
			BEGIN
				SET @Display_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Display_CASTED = CAST(@Display AS char(1))
			END

		UPDATE ILA_LoanProduct
			SET Display = @Display_CASTED
		WHERE 1=1 AND ProductCode = @ProductCode
	END

IF @MinAPR <> ''
	BEGIN
		DECLARE @MinAPR_CASTED char(6)
		IF @MinAPR = '^'
			BEGIN
				SET @MinAPR_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @MinAPR_CASTED = CAST(@MinAPR AS char(6))
			END

		UPDATE ILA_LoanProduct
			SET MinAPR = @MinAPR_CASTED
		WHERE 1=1 AND ProductCode = @ProductCode
	END

IF @ProductTypeID <> ''
	BEGIN
		DECLARE @ProductTypeID_CASTED int
		IF @ProductTypeID = '^'
			BEGIN
				SET @ProductTypeID_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ProductTypeID_CASTED = CAST(@ProductTypeID AS int)
			END

		UPDATE ILA_LoanProduct
			SET ProductTypeID = @ProductTypeID_CASTED
		WHERE 1=1 AND ProductCode = @ProductCode
	END

IF @ProductID <> ''
	BEGIN
		DECLARE @ProductID_CASTED int
		IF @ProductID = '^'
			BEGIN
				SET @ProductID_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ProductID_CASTED = CAST(@ProductID AS int)
			END

		UPDATE ILA_LoanProduct
			SET ProductID = @ProductID_CASTED
		WHERE 1=1 AND ProductCode = @ProductCode
	END

IF @ModuleID <> ''
	BEGIN
		DECLARE @ModuleID_CASTED int
		IF @ModuleID = '^'
			BEGIN
				SET @ModuleID_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ModuleID_CASTED = CAST(@ModuleID AS int)
			END

		UPDATE ILA_LoanProduct
			SET ModuleID = @ModuleID_CASTED
		WHERE 1=1 AND ProductCode = @ProductCode
	END

IF @ProductTrackingNum <> ''
	BEGIN
		DECLARE @ProductTrackingNum_CASTED int
		IF @ProductTrackingNum = '^'
			BEGIN
				SET @ProductTrackingNum_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ProductTrackingNum_CASTED = CAST(@ProductTrackingNum AS int)
			END

		UPDATE ILA_LoanProduct
			SET ProductTrackingNum = @ProductTrackingNum_CASTED
		WHERE 1=1 AND ProductCode = @ProductCode
	END

IF @DisclosureCode <> ''
	BEGIN
		DECLARE @DisclosureCode_CASTED char(2)
		IF @DisclosureCode = '^'
			BEGIN
				SET @DisclosureCode_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @DisclosureCode_CASTED = CAST(@DisclosureCode AS char(2))
			END

		UPDATE ILA_LoanProduct
			SET DisclosureCode = @DisclosureCode_CASTED
		WHERE 1=1 AND ProductCode = @ProductCode
	END

IF @CollateralCode <> ''
	BEGIN
		DECLARE @CollateralCode_CASTED char(4)
		IF @CollateralCode = '^'
			BEGIN
				SET @CollateralCode_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @CollateralCode_CASTED = CAST(@CollateralCode AS char(4))
			END

		UPDATE ILA_LoanProduct
			SET CollateralCode = @CollateralCode_CASTED
		WHERE 1=1 AND ProductCode = @ProductCode
	END

IF @MaxAmount <> ''
	BEGIN
		DECLARE @MaxAmount_CASTED varchar(13)
		IF @MaxAmount = '^'
			BEGIN
				SET @MaxAmount_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @MaxAmount_CASTED = CAST(@MaxAmount AS varchar(13))
			END

		UPDATE ILA_LoanProduct
			SET MaxAmount = @MaxAmount_CASTED
		WHERE 1=1 AND ProductCode = @ProductCode
	END

IF @MaxAPR <> ''
	BEGIN
		DECLARE @MaxAPR_CASTED char(6)
		IF @MaxAPR = '^'
			BEGIN
				SET @MaxAPR_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @MaxAPR_CASTED = CAST(@MaxAPR AS char(6))
			END

		UPDATE ILA_LoanProduct
			SET MaxAPR = @MaxAPR_CASTED
		WHERE 1=1 AND ProductCode = @ProductCode
	END

IF @MaxTerm <> ''
	BEGIN
		DECLARE @MaxTerm_CASTED char(4)
		IF @MaxTerm = '^'
			BEGIN
				SET @MaxTerm_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @MaxTerm_CASTED = CAST(@MaxTerm AS char(4))
			END

		UPDATE ILA_LoanProduct
			SET MaxTerm = @MaxTerm_CASTED
		WHERE 1=1 AND ProductCode = @ProductCode
	END

IF @Terms <> ''
	BEGIN
		DECLARE @Terms_CASTED varchar(50)
		IF @Terms = '^'
			BEGIN
				SET @Terms_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Terms_CASTED = CAST(@Terms AS varchar(50))
			END

		UPDATE ILA_LoanProduct
			SET Terms = @Terms_CASTED
		WHERE 1=1 AND ProductCode = @ProductCode
	END

IF @MinAmount <> ''
	BEGIN
		DECLARE @MinAmount_CASTED varchar(13)
		IF @MinAmount = '^'
			BEGIN
				SET @MinAmount_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @MinAmount_CASTED = CAST(@MinAmount AS varchar(13))
			END

		UPDATE ILA_LoanProduct
			SET MinAmount = @MinAmount_CASTED
		WHERE 1=1 AND ProductCode = @ProductCode
	END

IF @MinTerm <> ''
	BEGIN
		DECLARE @MinTerm_CASTED char(4)
		IF @MinTerm = '^'
			BEGIN
				SET @MinTerm_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @MinTerm_CASTED = CAST(@MinTerm AS char(4))
			END

		UPDATE ILA_LoanProduct
			SET MinTerm = @MinTerm_CASTED
		WHERE 1=1 AND ProductCode = @ProductCode
	END

IF @Sequence <> ''
	BEGIN
		DECLARE @Sequence_CASTED smallint
		IF @Sequence = '^'
			BEGIN
				SET @Sequence_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Sequence_CASTED = CAST(@Sequence AS smallint)
			END

		UPDATE ILA_LoanProduct
			SET Sequence = @Sequence_CASTED
		WHERE 1=1 AND ProductCode = @ProductCode
	END

IF @LoanPurposes <> ''
	BEGIN
		DECLARE @LoanPurposes_CASTED varchar(250)
		IF @LoanPurposes = '^'
			BEGIN
				SET @LoanPurposes_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @LoanPurposes_CASTED = CAST(@LoanPurposes AS varchar(250))
			END

		UPDATE ILA_LoanProduct
			SET LoanPurposes = @LoanPurposes_CASTED
		WHERE 1=1 AND ProductCode = @ProductCode
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_LoanProductTerms_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ILAxlate_LoanProductTerms_Insert]
	@CollateralCode char(4),
	@MinTerm char(4),
	@MaxTerm char(4),
	@MinAmount varchar(13),
	@MaxAmount varchar(13),
	@MinPayment varchar(13),
	@CalcAmountArg varchar(80),
	@CalcAmountOpt char(2),
	@CalcAPRArg varchar(80),
	@CalcAPROpt char(2),
	@CalcPaymentArg varchar(80),
	@CalcPaymentOpt char(2),
	@CalcTermArg varchar(80),
	@CalcTermOpt char(2),
	@DefaultAmount varchar(13),
	@DefaultAPR char(6),
	@DefaultPayment varchar(13),
	@DefaultTerm char(4),
	@DisclosureCode char(2),
	@MaxAPR char(6),
	@MaxPayment varchar(13),
	@MinAPR char(6),
	@Sequence smallint,
	@ProductCode varchar(16)
AS

INSERT INTO ILA_LoanProductTerms
(ProductCode, CollateralCode, MinTerm, MaxTerm, MinAmount, MaxAmount, MinPayment, CalcAmountArg, CalcAmountOpt, CalcAPRArg, CalcAPROpt, CalcPaymentArg, CalcPaymentOpt, CalcTermArg, CalcTermOpt, DefaultAmount, DefaultAPR, DefaultPayment, DefaultTerm, DisclosureCode, MaxAPR, MaxPayment, MinAPR, Sequence)
VALUES
(@ProductCode, @CollateralCode, @MinTerm, @MaxTerm, @MinAmount, @MaxAmount, @MinPayment, @CalcAmountArg, @CalcAmountOpt, @CalcAPRArg, @CalcAPROpt, @CalcPaymentArg, @CalcPaymentOpt, @CalcTermArg, @CalcTermOpt, @DefaultAmount, @DefaultAPR, @DefaultPayment, @DefaultTerm, @DisclosureCode, @MaxAPR, @MaxPayment, @MinAPR, @Sequence)

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_LoanProductTerms_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ILAxlate_LoanProductTerms_Select]
	@ProductCode varchar(16)
AS

SELECT * FROM ILA_LoanProductTerms
WHERE 1=1 AND ProductCode = @ProductCode

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_LoanProductTerms_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ILAxlate_LoanProductTerms_Update]
	@CollateralCode varchar(4),
	@MinTerm varchar(4),
	@MaxTerm varchar(4),
	@MinAmount varchar(13),
	@MaxAmount varchar(13),
	@MinPayment varchar(13),
	@CalcAmountArg varchar(80),
	@CalcAmountOpt varchar(2),
	@CalcAPRArg varchar(80),
	@CalcAPROpt varchar(2),
	@CalcPaymentArg varchar(80),
	@CalcPaymentOpt varchar(2),
	@CalcTermArg varchar(80),
	@CalcTermOpt varchar(2),
	@DefaultAmount varchar(13),
	@DefaultAPR varchar(6),
	@DefaultPayment varchar(13),
	@DefaultTerm varchar(4),
	@DisclosureCode varchar(2),
	@MaxAPR varchar(6),
	@MaxPayment varchar(13),
	@MinAPR varchar(6),
	@Sequence varchar(100),
	@ProductCode varchar(16)
AS

IF @CollateralCode <> ''
	BEGIN
		DECLARE @CollateralCode_CASTED char(4)
		IF @CollateralCode = '^'
			BEGIN
				SET @CollateralCode_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @CollateralCode_CASTED = CAST(@CollateralCode AS char(4))
			END

		UPDATE ILA_LoanProductTerms
			SET CollateralCode = @CollateralCode_CASTED
		WHERE 1=1 AND ProductCode = @ProductCode
	END

IF @MinTerm <> ''
	BEGIN
		DECLARE @MinTerm_CASTED char(4)
		IF @MinTerm = '^'
			BEGIN
				SET @MinTerm_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @MinTerm_CASTED = CAST(@MinTerm AS char(4))
			END

		UPDATE ILA_LoanProductTerms
			SET MinTerm = @MinTerm_CASTED
		WHERE 1=1 AND ProductCode = @ProductCode
	END

IF @MaxTerm <> ''
	BEGIN
		DECLARE @MaxTerm_CASTED char(4)
		IF @MaxTerm = '^'
			BEGIN
				SET @MaxTerm_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @MaxTerm_CASTED = CAST(@MaxTerm AS char(4))
			END

		UPDATE ILA_LoanProductTerms
			SET MaxTerm = @MaxTerm_CASTED
		WHERE 1=1 AND ProductCode = @ProductCode
	END

IF @MinAmount <> ''
	BEGIN
		DECLARE @MinAmount_CASTED varchar(13)
		IF @MinAmount = '^'
			BEGIN
				SET @MinAmount_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @MinAmount_CASTED = CAST(@MinAmount AS varchar(13))
			END

		UPDATE ILA_LoanProductTerms
			SET MinAmount = @MinAmount_CASTED
		WHERE 1=1 AND ProductCode = @ProductCode
	END

IF @MaxAmount <> ''
	BEGIN
		DECLARE @MaxAmount_CASTED varchar(13)
		IF @MaxAmount = '^'
			BEGIN
				SET @MaxAmount_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @MaxAmount_CASTED = CAST(@MaxAmount AS varchar(13))
			END

		UPDATE ILA_LoanProductTerms
			SET MaxAmount = @MaxAmount_CASTED
		WHERE 1=1 AND ProductCode = @ProductCode
	END

IF @MinPayment <> ''
	BEGIN
		DECLARE @MinPayment_CASTED varchar(13)
		IF @MinPayment = '^'
			BEGIN
				SET @MinPayment_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @MinPayment_CASTED = CAST(@MinPayment AS varchar(13))
			END

		UPDATE ILA_LoanProductTerms
			SET MinPayment = @MinPayment_CASTED
		WHERE 1=1 AND ProductCode = @ProductCode
	END

IF @CalcAmountArg <> ''
	BEGIN
		DECLARE @CalcAmountArg_CASTED varchar(80)
		IF @CalcAmountArg = '^'
			BEGIN
				SET @CalcAmountArg_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @CalcAmountArg_CASTED = CAST(@CalcAmountArg AS varchar(80))
			END

		UPDATE ILA_LoanProductTerms
			SET CalcAmountArg = @CalcAmountArg_CASTED
		WHERE 1=1 AND ProductCode = @ProductCode
	END

IF @CalcAmountOpt <> ''
	BEGIN
		DECLARE @CalcAmountOpt_CASTED char(2)
		IF @CalcAmountOpt = '^'
			BEGIN
				SET @CalcAmountOpt_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @CalcAmountOpt_CASTED = CAST(@CalcAmountOpt AS char(2))
			END

		UPDATE ILA_LoanProductTerms
			SET CalcAmountOpt = @CalcAmountOpt_CASTED
		WHERE 1=1 AND ProductCode = @ProductCode
	END

IF @CalcAPRArg <> ''
	BEGIN
		DECLARE @CalcAPRArg_CASTED varchar(80)
		IF @CalcAPRArg = '^'
			BEGIN
				SET @CalcAPRArg_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @CalcAPRArg_CASTED = CAST(@CalcAPRArg AS varchar(80))
			END

		UPDATE ILA_LoanProductTerms
			SET CalcAPRArg = @CalcAPRArg_CASTED
		WHERE 1=1 AND ProductCode = @ProductCode
	END

IF @CalcAPROpt <> ''
	BEGIN
		DECLARE @CalcAPROpt_CASTED char(2)
		IF @CalcAPROpt = '^'
			BEGIN
				SET @CalcAPROpt_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @CalcAPROpt_CASTED = CAST(@CalcAPROpt AS char(2))
			END

		UPDATE ILA_LoanProductTerms
			SET CalcAPROpt = @CalcAPROpt_CASTED
		WHERE 1=1 AND ProductCode = @ProductCode
	END

IF @CalcPaymentArg <> ''
	BEGIN
		DECLARE @CalcPaymentArg_CASTED varchar(80)
		IF @CalcPaymentArg = '^'
			BEGIN
				SET @CalcPaymentArg_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @CalcPaymentArg_CASTED = CAST(@CalcPaymentArg AS varchar(80))
			END

		UPDATE ILA_LoanProductTerms
			SET CalcPaymentArg = @CalcPaymentArg_CASTED
		WHERE 1=1 AND ProductCode = @ProductCode
	END

IF @CalcPaymentOpt <> ''
	BEGIN
		DECLARE @CalcPaymentOpt_CASTED char(2)
		IF @CalcPaymentOpt = '^'
			BEGIN
				SET @CalcPaymentOpt_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @CalcPaymentOpt_CASTED = CAST(@CalcPaymentOpt AS char(2))
			END

		UPDATE ILA_LoanProductTerms
			SET CalcPaymentOpt = @CalcPaymentOpt_CASTED
		WHERE 1=1 AND ProductCode = @ProductCode
	END

IF @CalcTermArg <> ''
	BEGIN
		DECLARE @CalcTermArg_CASTED varchar(80)
		IF @CalcTermArg = '^'
			BEGIN
				SET @CalcTermArg_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @CalcTermArg_CASTED = CAST(@CalcTermArg AS varchar(80))
			END

		UPDATE ILA_LoanProductTerms
			SET CalcTermArg = @CalcTermArg_CASTED
		WHERE 1=1 AND ProductCode = @ProductCode
	END

IF @CalcTermOpt <> ''
	BEGIN
		DECLARE @CalcTermOpt_CASTED char(2)
		IF @CalcTermOpt = '^'
			BEGIN
				SET @CalcTermOpt_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @CalcTermOpt_CASTED = CAST(@CalcTermOpt AS char(2))
			END

		UPDATE ILA_LoanProductTerms
			SET CalcTermOpt = @CalcTermOpt_CASTED
		WHERE 1=1 AND ProductCode = @ProductCode
	END

IF @DefaultAmount <> ''
	BEGIN
		DECLARE @DefaultAmount_CASTED varchar(13)
		IF @DefaultAmount = '^'
			BEGIN
				SET @DefaultAmount_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @DefaultAmount_CASTED = CAST(@DefaultAmount AS varchar(13))
			END

		UPDATE ILA_LoanProductTerms
			SET DefaultAmount = @DefaultAmount_CASTED
		WHERE 1=1 AND ProductCode = @ProductCode
	END

IF @DefaultAPR <> ''
	BEGIN
		DECLARE @DefaultAPR_CASTED char(6)
		IF @DefaultAPR = '^'
			BEGIN
				SET @DefaultAPR_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @DefaultAPR_CASTED = CAST(@DefaultAPR AS char(6))
			END

		UPDATE ILA_LoanProductTerms
			SET DefaultAPR = @DefaultAPR_CASTED
		WHERE 1=1 AND ProductCode = @ProductCode
	END

IF @DefaultPayment <> ''
	BEGIN
		DECLARE @DefaultPayment_CASTED varchar(13)
		IF @DefaultPayment = '^'
			BEGIN
				SET @DefaultPayment_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @DefaultPayment_CASTED = CAST(@DefaultPayment AS varchar(13))
			END

		UPDATE ILA_LoanProductTerms
			SET DefaultPayment = @DefaultPayment_CASTED
		WHERE 1=1 AND ProductCode = @ProductCode
	END

IF @DefaultTerm <> ''
	BEGIN
		DECLARE @DefaultTerm_CASTED char(4)
		IF @DefaultTerm = '^'
			BEGIN
				SET @DefaultTerm_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @DefaultTerm_CASTED = CAST(@DefaultTerm AS char(4))
			END

		UPDATE ILA_LoanProductTerms
			SET DefaultTerm = @DefaultTerm_CASTED
		WHERE 1=1 AND ProductCode = @ProductCode
	END

IF @DisclosureCode <> ''
	BEGIN
		DECLARE @DisclosureCode_CASTED char(2)
		IF @DisclosureCode = '^'
			BEGIN
				SET @DisclosureCode_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @DisclosureCode_CASTED = CAST(@DisclosureCode AS char(2))
			END

		UPDATE ILA_LoanProductTerms
			SET DisclosureCode = @DisclosureCode_CASTED
		WHERE 1=1 AND ProductCode = @ProductCode
	END

IF @MaxAPR <> ''
	BEGIN
		DECLARE @MaxAPR_CASTED char(6)
		IF @MaxAPR = '^'
			BEGIN
				SET @MaxAPR_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @MaxAPR_CASTED = CAST(@MaxAPR AS char(6))
			END

		UPDATE ILA_LoanProductTerms
			SET MaxAPR = @MaxAPR_CASTED
		WHERE 1=1 AND ProductCode = @ProductCode
	END

IF @MaxPayment <> ''
	BEGIN
		DECLARE @MaxPayment_CASTED varchar(13)
		IF @MaxPayment = '^'
			BEGIN
				SET @MaxPayment_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @MaxPayment_CASTED = CAST(@MaxPayment AS varchar(13))
			END

		UPDATE ILA_LoanProductTerms
			SET MaxPayment = @MaxPayment_CASTED
		WHERE 1=1 AND ProductCode = @ProductCode
	END

IF @MinAPR <> ''
	BEGIN
		DECLARE @MinAPR_CASTED char(6)
		IF @MinAPR = '^'
			BEGIN
				SET @MinAPR_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @MinAPR_CASTED = CAST(@MinAPR AS char(6))
			END

		UPDATE ILA_LoanProductTerms
			SET MinAPR = @MinAPR_CASTED
		WHERE 1=1 AND ProductCode = @ProductCode
	END

IF @Sequence <> ''
	BEGIN
		DECLARE @Sequence_CASTED smallint
		IF @Sequence = '^'
			BEGIN
				SET @Sequence_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Sequence_CASTED = CAST(@Sequence AS smallint)
			END

		UPDATE ILA_LoanProductTerms
			SET Sequence = @Sequence_CASTED
		WHERE 1=1 AND ProductCode = @ProductCode
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_LoanPurpose_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ILAxlate_LoanPurpose_Select]
	@PurposeCode varchar(20)
AS

SELECT * FROM ILA_LoanPurpose
WHERE 1=1 AND PurposeCode = @PurposeCode

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_LoanPurpose_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ILAxlate_LoanPurpose_SelectAll]
AS

SELECT * FROM ILA_LoanPurpose
WHERE 1=1

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_LoanPurpose_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ILAxlate_LoanPurpose_Update]
	@Description varchar(250),
	@PurposeCode varchar(20),
	@PurposeID varchar(100)
AS

IF @Description <> ''
	BEGIN
		DECLARE @Description_CASTED varchar(250)
		IF @Description = '^'
			BEGIN
				SET @Description_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Description_CASTED = CAST(@Description AS varchar(250))
			END

		UPDATE ILA_LoanPurpose
			SET Description = @Description_CASTED
		WHERE 1=1 AND PurposeCode = @PurposeCode
	END

IF @PurposeID <> ''
	BEGIN
		DECLARE @PurposeID_CASTED int
		IF @PurposeID = '^'
			BEGIN
				SET @PurposeID_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @PurposeID_CASTED = CAST(@PurposeID AS int)
			END

		UPDATE ILA_LoanPurpose
			SET PurposeID = @PurposeID_CASTED
		WHERE 1=1 AND PurposeCode = @PurposeCode
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_ProductDetail_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ILAxlate_ProductDetail_Delete]
	@Sequence smallint,
	@TrackingNum int
AS

DELETE FROM ILA_ProductDetail
WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_ProductDetail_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ILAxlate_ProductDetail_DeleteAll]
	@Sequence smallint,
	@TrackingNum int
AS

DELETE FROM ILA_ProductDetail
WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_ProductDetail_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_ILAxlate_ProductDetail_Insert]
	@LoanType char(6),
	@IsBoat char(1),
	@Sequence smallint,
	@ProductCode varchar(16),
	@ProductID int,
	@ProductTypeID int,
	@ModuleID int,
	@ProductTrackingNum int,
	@CollateralCode int,
	@Purpose varchar(30),
	@LoanAmount int,
	@Term char(6),
	@CreditLimit int,
	@PropertyValue int,
	@PropertyMortgageBalance int,
	@RetailValue int,
	@TradeInValue int,
	@PurchasePrice int,
	@DownPayment int,
	@AutoPayment int,
	@PurchaseDate datetime,
	@DueDate datetime,
	@PropertyType varchar(20),
	@Occupancy varchar(20),
	@LienPosition varchar(20),
	@Type char(4),
	@Year smallint,
	@Make varchar(20),
	@Model varchar(20),
	@Body varchar(20),
	@Milage int,
	@Year2 smallint,
	@Make2 varchar(20),
	@Model2 varchar(20),
	@Body2 varchar(20),
	@Year3 smallint,
	@Make3 varchar(20),
	@Model3 varchar(20),
	@Body3 varchar(20),
	@Year4 smallint,
	@Make4 varchar(20),
	@Model4 varchar(20),
	@Body4 varchar(20),
	@VIN varchar(18),
	@SaleType varchar(20),
	@DealerCode char(8),
	@Dealer varchar(30),
	@TitleDate datetime,
	@TitleNumber varchar(20),
	@License char(8),
	@PONumber char(10),
	@State char(2),
	@DisclosureCode char(2),
	@InsCode varchar(20),
	@GAP varchar(20),
	@MBP varchar(20),
	@LoanToValue char(1),
	@Color varchar(20),
	@TrackingNum int,
	@ClientIP varchar(15),
	@WebIP varchar(15),
	@ClusterID char(10),
	@LastModified datetime
AS

INSERT INTO ILA_ProductDetail
(Sequence, TrackingNum, LoanType, IsBoat, ProductCode, ProductID, ProductTypeID, ModuleID, ProductTrackingNum, CollateralCode, Purpose, LoanAmount, Term, CreditLimit, PropertyValue, PropertyMortgageBalance, RetailValue, TradeInValue, PurchasePrice, DownPayment, AutoPayment, PurchaseDate, DueDate, PropertyType, Occupancy, LienPosition, Type, Year, Make, Model, Body, Milage, Year2, Make2, Model2, Body2, Year3, Make3, Model3, Body3, Year4, Make4, Model4, Body4, VIN, SaleType, DealerCode, Dealer, TitleDate, TitleNumber, License, PONumber, State, DisclosureCode, InsCode, GAP, MBP, LoanToValue, Color, ClientIP, WebIP, ClusterID, LastModified)
VALUES
(@Sequence, @TrackingNum, @LoanType, @IsBoat, @ProductCode, @ProductID, @ProductTypeID, @ModuleID, @ProductTrackingNum, @CollateralCode, @Purpose, @LoanAmount, @Term, @CreditLimit, @PropertyValue, @PropertyMortgageBalance, @RetailValue, @TradeInValue, @PurchasePrice, @DownPayment, @AutoPayment, @PurchaseDate, @DueDate, @PropertyType, @Occupancy, @LienPosition, @Type, @Year, @Make, @Model, @Body, @Milage, @Year2, @Make2, @Model2, @Body2, @Year3, @Make3, @Model3, @Body3, @Year4, @Make4, @Model4, @Body4, @VIN, @SaleType, @DealerCode, @Dealer, @TitleDate, @TitleNumber, @License, @PONumber, @State, @DisclosureCode, @InsCode, @GAP, @MBP, @LoanToValue, @Color, @ClientIP, @WebIP, @ClusterID, @LastModified)

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_ProductDetail_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_ILAxlate_ProductDetail_InsertIfNew]
	@LoanType char(6),
	@IsBoat char(1),
	@Sequence smallint,
	@ProductCode varchar(16),
	@ProductID int,
	@ProductTypeID int,
	@ModuleID int,
	@ProductTrackingNum int,
	@CollateralCode int,
	@Purpose varchar(30),
	@LoanAmount int,
	@Term char(6),
	@CreditLimit int,
	@PropertyValue int,
	@PropertyMortgageBalance int,
	@RetailValue int,
	@TradeInValue int,
	@PurchasePrice int,
	@DownPayment int,
	@AutoPayment int,
	@PurchaseDate datetime,
	@DueDate datetime,
	@PropertyType varchar(20),
	@Occupancy varchar(20),
	@LienPosition varchar(20),
	@Type char(4),
	@Year smallint,
	@Make varchar(20),
	@Model varchar(20),
	@Body varchar(20),
	@Milage int,
	@Year2 smallint,
	@Make2 varchar(20),
	@Model2 varchar(20),
	@Body2 varchar(20),
	@Year3 smallint,
	@Make3 varchar(20),
	@Model3 varchar(20),
	@Body3 varchar(20),
	@Year4 smallint,
	@Make4 varchar(20),
	@Model4 varchar(20),
	@Body4 varchar(20),
	@VIN varchar(18),
	@SaleType varchar(20),
	@DealerCode char(8),
	@Dealer varchar(30),
	@TitleDate datetime,
	@TitleNumber varchar(20),
	@License char(8),
	@PONumber char(10),
	@State char(2),
	@DisclosureCode char(2),
	@InsCode varchar(20),
	@GAP varchar(20),
	@MBP varchar(20),
	@LoanToValue char(1),
	@Color varchar(20),
	@TrackingNum int,
	@ClientIP varchar(15),
	@WebIP varchar(15),
	@ClusterID char(10),
	@LastModified datetime
AS

IF NOT EXISTS (SELECT * FROM ILA_ProductDetail WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum)
	BEGIN
		INSERT INTO ILA_ProductDetail
		(Sequence, TrackingNum, LoanType, IsBoat, ProductCode, ProductID, ProductTypeID, ModuleID, ProductTrackingNum, CollateralCode, Purpose, LoanAmount, Term, CreditLimit, PropertyValue, PropertyMortgageBalance, RetailValue, TradeInValue, PurchasePrice, DownPayment, AutoPayment, PurchaseDate, DueDate, PropertyType, Occupancy, LienPosition, Type, Year, Make, Model, Body, Milage, Year2, Make2, Model2, Body2, Year3, Make3, Model3, Body3, Year4, Make4, Model4, Body4, VIN, SaleType, DealerCode, Dealer, TitleDate, TitleNumber, License, PONumber, State, DisclosureCode, InsCode, GAP, MBP, LoanToValue, Color, ClientIP, WebIP, ClusterID, LastModified)
		VALUES
		(@Sequence, @TrackingNum, @LoanType, @IsBoat, @ProductCode, @ProductID, @ProductTypeID, @ModuleID, @ProductTrackingNum, @CollateralCode, @Purpose, @LoanAmount, @Term, @CreditLimit, @PropertyValue, @PropertyMortgageBalance, @RetailValue, @TradeInValue, @PurchasePrice, @DownPayment, @AutoPayment, @PurchaseDate, @DueDate, @PropertyType, @Occupancy, @LienPosition, @Type, @Year, @Make, @Model, @Body, @Milage, @Year2, @Make2, @Model2, @Body2, @Year3, @Make3, @Model3, @Body3, @Year4, @Make4, @Model4, @Body4, @VIN, @SaleType, @DealerCode, @Dealer, @TitleDate, @TitleNumber, @License, @PONumber, @State, @DisclosureCode, @InsCode, @GAP, @MBP, @LoanToValue, @Color, @ClientIP, @WebIP, @ClusterID, @LastModified)
	END
ELSE	BEGIN
		UPDATE ILA_ProductDetail SET
			LoanType = @LoanType,
			IsBoat = @IsBoat,
			ProductCode = @ProductCode,
			ProductID = @ProductID,
			ProductTypeID = @ProductTypeID,
			ModuleID = @ModuleID,
			ProductTrackingNum = @ProductTrackingNum,
			CollateralCode = @CollateralCode,
			Purpose = @Purpose,
			LoanAmount = @LoanAmount,
			Term = @Term,
			CreditLimit = @CreditLimit,
			PropertyValue = @PropertyValue,
			PropertyMortgageBalance = @PropertyMortgageBalance,
			RetailValue = @RetailValue,
			TradeInValue = @TradeInValue,
			PurchasePrice = @PurchasePrice,
			DownPayment = @DownPayment,
			AutoPayment = @AutoPayment,
			PurchaseDate = @PurchaseDate,
			DueDate = @DueDate,
			PropertyType = @PropertyType,
			Occupancy = @Occupancy,
			LienPosition = @LienPosition,
			Type = @Type,
			Year = @Year,
			Make = @Make,
			Model = @Model,
			Body = @Body,
			Milage = @Milage,
			Year2 = @Year2,
			Make2 = @Make2,
			Model2 = @Model2,
			Body2 = @Body2,
			Year3 = @Year3,
			Make3 = @Make3,
			Model3 = @Model3,
			Body3 = @Body3,
			Year4 = @Year4,
			Make4 = @Make4,
			Model4 = @Model4,
			Body4 = @Body4,
			VIN = @VIN,
			SaleType = @SaleType,
			DealerCode = @DealerCode,
			Dealer = @Dealer,
			TitleDate = @TitleDate,
			TitleNumber = @TitleNumber,
			License = @License,
			PONumber = @PONumber,
			State = @State,
			DisclosureCode = @DisclosureCode,
			InsCode = @InsCode,
			GAP = @GAP,
			MBP = @MBP,
			LoanToValue = @LoanToValue,
			Color = @Color,
			ClientIP = @ClientIP,
			WebIP = @WebIP,
			ClusterID = @ClusterID,
			LastModified = @LastModified
		WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_ProductDetail_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ILAxlate_ProductDetail_Select]
	@Sequence smallint,
	@TrackingNum int
AS

EXEC IMS.sp_ILAProductDetail_Select @Sequence, @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_ProductDetail_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ILAxlate_ProductDetail_SelectAll]
	@Sequence smallint,
	@TrackingNum int
AS

SELECT * FROM ILA_ProductDetail
WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_ProductDetail_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ILAxlate_ProductDetail_Update]
	@LoanType varchar(6),
	@IsBoat varchar(1),
	@Sequence smallint,
	@ProductCode varchar(16),
	@ProductID varchar(100),
	@ProductTypeID varchar(100),
	@ModuleID varchar(100),
	@ProductTrackingNum varchar(100),
	@CollateralCode varchar(100),
	@Purpose varchar(30),
	@LoanAmount varchar(100),
	@Term varchar(6),
	@CreditLimit varchar(100),
	@PropertyValue varchar(100),
	@RetailValue varchar(100),
	@TradeInValue varchar(100),
	@PurchasePrice varchar(100),
	@DownPayment varchar(100),
	@AutoPayment varchar(100),
	@PurchaseDate varchar(100),
	@DueDate varchar(100),
	@PropertyType varchar(20),
	@Occupancy varchar(20),
	@LienPosition varchar(20),
	@Type varchar(4),
	@Year varchar(100),
	@Make varchar(20),
	@Model varchar(20),
	@Body varchar(20),
	@Milage varchar(100),
	@Year2 varchar(100),
	@Make2 varchar(20),
	@Model2 varchar(20),
	@Body2 varchar(20),
	@Year3 varchar(100),
	@Make3 varchar(20),
	@Model3 varchar(20),
	@Body3 varchar(20),
	@Year4 varchar(100),
	@Make4 varchar(20),
	@Model4 varchar(20),
	@Body4 varchar(20),
	@VIN varchar(18),
	@SaleType varchar(20),
	@DealerCode varchar(8),
	@Dealer varchar(30),
	@TitleDate varchar(100),
	@TitleNumber varchar(20),
	@License varchar(8),
	@PONumber varchar(10),
	@State varchar(2),
	@DisclosureCode varchar(2),
	@InsCode varchar(20),
	@GAP varchar(20),
	@MBP varchar(20),
	@LoanToValue varchar(1),
	@Color varchar(20),
	@TrackingNum int,
	@ClientIP varchar(15),
	@WebIP varchar(15),
	@ClusterID varchar(10),
	@LastModified varchar(100)
AS

IF @LoanType <> ''
	BEGIN
		DECLARE @LoanType_CASTED char(6)
		IF @LoanType = '^'
			BEGIN
				SET @LoanType_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @LoanType_CASTED = CAST(@LoanType AS char(6))
			END

		UPDATE ILA_ProductDetail
			SET LoanType = @LoanType_CASTED
		WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
	END

IF @IsBoat <> ''
	BEGIN
		DECLARE @IsBoat_CASTED char(1)
		IF @IsBoat = '^'
			BEGIN
				SET @IsBoat_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @IsBoat_CASTED = CAST(@IsBoat AS char(1))
			END

		UPDATE ILA_ProductDetail
			SET IsBoat = @IsBoat_CASTED
		WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
	END

IF @ProductCode <> ''
	BEGIN
		DECLARE @ProductCode_CASTED varchar(16)
		IF @ProductCode = '^'
			BEGIN
				SET @ProductCode_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ProductCode_CASTED = CAST(@ProductCode AS varchar(16))
			END

		UPDATE ILA_ProductDetail
			SET ProductCode = @ProductCode_CASTED
		WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
	END

IF @ProductID <> ''
	BEGIN
		DECLARE @ProductID_CASTED int
		IF @ProductID = '^'
			BEGIN
				SET @ProductID_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ProductID_CASTED = CAST(@ProductID AS int)
			END

		UPDATE ILA_ProductDetail
			SET ProductID = @ProductID_CASTED
		WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
	END

IF @ProductTypeID <> ''
	BEGIN
		DECLARE @ProductTypeID_CASTED int
		IF @ProductTypeID = '^'
			BEGIN
				SET @ProductTypeID_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ProductTypeID_CASTED = CAST(@ProductTypeID AS int)
			END

		UPDATE ILA_ProductDetail
			SET ProductTypeID = @ProductTypeID_CASTED
		WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
	END

IF @ModuleID <> ''
	BEGIN
		DECLARE @ModuleID_CASTED int
		IF @ModuleID = '^'
			BEGIN
				SET @ModuleID_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ModuleID_CASTED = CAST(@ModuleID AS int)
			END

		UPDATE ILA_ProductDetail
			SET ModuleID = @ModuleID_CASTED
		WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
	END

IF @ProductTrackingNum <> ''
	BEGIN
		DECLARE @ProductTrackingNum_CASTED int
		IF @ProductTrackingNum = '^'
			BEGIN
				SET @ProductTrackingNum_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ProductTrackingNum_CASTED = CAST(@ProductTrackingNum AS int)
			END

		UPDATE ILA_ProductDetail
			SET ProductTrackingNum = @ProductTrackingNum_CASTED
		WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
	END

IF @CollateralCode <> ''
	BEGIN
		DECLARE @CollateralCode_CASTED int
		IF @CollateralCode = '^'
			BEGIN
				SET @CollateralCode_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @CollateralCode_CASTED = CAST(@CollateralCode AS int)
			END

		UPDATE ILA_ProductDetail
			SET CollateralCode = @CollateralCode_CASTED
		WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
	END

IF @Purpose <> ''
	BEGIN
		DECLARE @Purpose_CASTED varchar(30)
		IF @Purpose = '^'
			BEGIN
				SET @Purpose_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Purpose_CASTED = CAST(@Purpose AS varchar(30))
			END

		UPDATE ILA_ProductDetail
			SET Purpose = @Purpose_CASTED
		WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
	END

IF @LoanAmount <> ''
	BEGIN
		DECLARE @LoanAmount_CASTED int
		IF @LoanAmount = '^'
			BEGIN
				SET @LoanAmount_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @LoanAmount_CASTED = CAST(@LoanAmount AS int)
			END

		UPDATE ILA_ProductDetail
			SET LoanAmount = @LoanAmount_CASTED
		WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
	END

IF @Term <> ''
	BEGIN
		DECLARE @Term_CASTED char(6)
		IF @Term = '^'
			BEGIN
				SET @Term_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Term_CASTED = CAST(@Term AS char(6))
			END

		UPDATE ILA_ProductDetail
			SET Term = @Term_CASTED
		WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
	END

IF @CreditLimit <> ''
	BEGIN
		DECLARE @CreditLimit_CASTED int
		IF @CreditLimit = '^'
			BEGIN
				SET @CreditLimit_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @CreditLimit_CASTED = CAST(@CreditLimit AS int)
			END

		UPDATE ILA_ProductDetail
			SET CreditLimit = @CreditLimit_CASTED
		WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
	END

IF @PropertyValue <> ''
	BEGIN
		DECLARE @PropertyValue_CASTED int
		IF @PropertyValue = '^'
			BEGIN
				SET @PropertyValue_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @PropertyValue_CASTED = CAST(@PropertyValue AS int)
			END

		UPDATE ILA_ProductDetail
			SET PropertyValue = @PropertyValue_CASTED
		WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
	END

IF @RetailValue <> ''
	BEGIN
		DECLARE @RetailValue_CASTED int
		IF @RetailValue = '^'
			BEGIN
				SET @RetailValue_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @RetailValue_CASTED = CAST(@RetailValue AS int)
			END

		UPDATE ILA_ProductDetail
			SET RetailValue = @RetailValue_CASTED
		WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
	END

IF @TradeInValue <> ''
	BEGIN
		DECLARE @TradeInValue_CASTED int
		IF @TradeInValue = '^'
			BEGIN
				SET @TradeInValue_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @TradeInValue_CASTED = CAST(@TradeInValue AS int)
			END

		UPDATE ILA_ProductDetail
			SET TradeInValue = @TradeInValue_CASTED
		WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
	END

IF @PurchasePrice <> ''
	BEGIN
		DECLARE @PurchasePrice_CASTED int
		IF @PurchasePrice = '^'
			BEGIN
				SET @PurchasePrice_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @PurchasePrice_CASTED = CAST(@PurchasePrice AS int)
			END

		UPDATE ILA_ProductDetail
			SET PurchasePrice = @PurchasePrice_CASTED
		WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
	END

IF @DownPayment <> ''
	BEGIN
		DECLARE @DownPayment_CASTED int
		IF @DownPayment = '^'
			BEGIN
				SET @DownPayment_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @DownPayment_CASTED = CAST(@DownPayment AS int)
			END

		UPDATE ILA_ProductDetail
			SET DownPayment = @DownPayment_CASTED
		WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
	END

IF @AutoPayment <> ''
	BEGIN
		DECLARE @AutoPayment_CASTED int
		IF @AutoPayment = '^'
			BEGIN
				SET @AutoPayment_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @AutoPayment_CASTED = CAST(@AutoPayment AS int)
			END

		UPDATE ILA_ProductDetail
			SET AutoPayment = @AutoPayment_CASTED
		WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
	END

IF @PurchaseDate <> ''
	BEGIN
		DECLARE @PurchaseDate_CASTED datetime
		IF @PurchaseDate = '^'
			BEGIN
				SET @PurchaseDate_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @PurchaseDate_CASTED = CAST(@PurchaseDate AS datetime)
			END

		UPDATE ILA_ProductDetail
			SET PurchaseDate = @PurchaseDate_CASTED
		WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
	END

IF @DueDate <> ''
	BEGIN
		DECLARE @DueDate_CASTED datetime
		IF @DueDate = '^'
			BEGIN
				SET @DueDate_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @DueDate_CASTED = CAST(@DueDate AS datetime)
			END

		UPDATE ILA_ProductDetail
			SET DueDate = @DueDate_CASTED
		WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
	END

IF @PropertyType <> ''
	BEGIN
		DECLARE @PropertyType_CASTED varchar(20)
		IF @PropertyType = '^'
			BEGIN
				SET @PropertyType_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @PropertyType_CASTED = CAST(@PropertyType AS varchar(20))
			END

		UPDATE ILA_ProductDetail
			SET PropertyType = @PropertyType_CASTED
		WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
	END

IF @Occupancy <> ''
	BEGIN
		DECLARE @Occupancy_CASTED varchar(20)
		IF @Occupancy = '^'
			BEGIN
				SET @Occupancy_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Occupancy_CASTED = CAST(@Occupancy AS varchar(20))
			END

		UPDATE ILA_ProductDetail
			SET Occupancy = @Occupancy_CASTED
		WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
	END

IF @LienPosition <> ''
	BEGIN
		DECLARE @LienPosition_CASTED varchar(20)
		IF @LienPosition = '^'
			BEGIN
				SET @LienPosition_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @LienPosition_CASTED = CAST(@LienPosition AS varchar(20))
			END

		UPDATE ILA_ProductDetail
			SET LienPosition = @LienPosition_CASTED
		WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
	END

IF @Type <> ''
	BEGIN
		DECLARE @Type_CASTED char(4)
		IF @Type = '^'
			BEGIN
				SET @Type_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Type_CASTED = CAST(@Type AS char(4))
			END

		UPDATE ILA_ProductDetail
			SET Type = @Type_CASTED
		WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
	END

IF @Year <> ''
	BEGIN
		DECLARE @Year_CASTED smallint
		IF @Year = '^'
			BEGIN
				SET @Year_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Year_CASTED = CAST(@Year AS smallint)
			END

		UPDATE ILA_ProductDetail
			SET Year = @Year_CASTED
		WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
	END

IF @Make <> ''
	BEGIN
		DECLARE @Make_CASTED varchar(20)
		IF @Make = '^'
			BEGIN
				SET @Make_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Make_CASTED = CAST(@Make AS varchar(20))
			END

		UPDATE ILA_ProductDetail
			SET Make = @Make_CASTED
		WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
	END

IF @Model <> ''
	BEGIN
		DECLARE @Model_CASTED varchar(20)
		IF @Model = '^'
			BEGIN
				SET @Model_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Model_CASTED = CAST(@Model AS varchar(20))
			END

		UPDATE ILA_ProductDetail
			SET Model = @Model_CASTED
		WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
	END

IF @Body <> ''
	BEGIN
		DECLARE @Body_CASTED varchar(20)
		IF @Body = '^'
			BEGIN
				SET @Body_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Body_CASTED = CAST(@Body AS varchar(20))
			END

		UPDATE ILA_ProductDetail
			SET Body = @Body_CASTED
		WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
	END

IF @Milage <> ''
	BEGIN
		DECLARE @Milage_CASTED int
		IF @Milage = '^'
			BEGIN
				SET @Milage_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Milage_CASTED = CAST(@Milage AS int)
			END

		UPDATE ILA_ProductDetail
			SET Milage = @Milage_CASTED
		WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
	END

IF @Year2 <> ''
	BEGIN
		DECLARE @Year2_CASTED smallint
		IF @Year2 = '^'
			BEGIN
				SET @Year2_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Year2_CASTED = CAST(@Year2 AS smallint)
			END

		UPDATE ILA_ProductDetail
			SET Year2 = @Year2_CASTED
		WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
	END

IF @Make2 <> ''
	BEGIN
		DECLARE @Make2_CASTED varchar(20)
		IF @Make2 = '^'
			BEGIN
				SET @Make2_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Make2_CASTED = CAST(@Make2 AS varchar(20))
			END

		UPDATE ILA_ProductDetail
			SET Make2 = @Make2_CASTED
		WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
	END

IF @Model2 <> ''
	BEGIN
		DECLARE @Model2_CASTED varchar(20)
		IF @Model2 = '^'
			BEGIN
				SET @Model2_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Model2_CASTED = CAST(@Model2 AS varchar(20))
			END

		UPDATE ILA_ProductDetail
			SET Model2 = @Model2_CASTED
		WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
	END

IF @Body2 <> ''
	BEGIN
		DECLARE @Body2_CASTED varchar(20)
		IF @Body2 = '^'
			BEGIN
				SET @Body2_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Body2_CASTED = CAST(@Body2 AS varchar(20))
			END

		UPDATE ILA_ProductDetail
			SET Body2 = @Body2_CASTED
		WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
	END

IF @Year3 <> ''
	BEGIN
		DECLARE @Year3_CASTED smallint
		IF @Year3 = '^'
			BEGIN
				SET @Year3_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Year3_CASTED = CAST(@Year3 AS smallint)
			END

		UPDATE ILA_ProductDetail
			SET Year3 = @Year3_CASTED
		WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
	END

IF @Make3 <> ''
	BEGIN
		DECLARE @Make3_CASTED varchar(20)
		IF @Make3 = '^'
			BEGIN
				SET @Make3_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Make3_CASTED = CAST(@Make3 AS varchar(20))
			END

		UPDATE ILA_ProductDetail
			SET Make3 = @Make3_CASTED
		WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
	END

IF @Model3 <> ''
	BEGIN
		DECLARE @Model3_CASTED varchar(20)
		IF @Model3 = '^'
			BEGIN
				SET @Model3_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Model3_CASTED = CAST(@Model3 AS varchar(20))
			END

		UPDATE ILA_ProductDetail
			SET Model3 = @Model3_CASTED
		WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
	END

IF @Body3 <> ''
	BEGIN
		DECLARE @Body3_CASTED varchar(20)
		IF @Body3 = '^'
			BEGIN
				SET @Body3_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Body3_CASTED = CAST(@Body3 AS varchar(20))
			END

		UPDATE ILA_ProductDetail
			SET Body3 = @Body3_CASTED
		WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
	END

IF @Year4 <> ''
	BEGIN
		DECLARE @Year4_CASTED smallint
		IF @Year4 = '^'
			BEGIN
				SET @Year4_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Year4_CASTED = CAST(@Year4 AS smallint)
			END

		UPDATE ILA_ProductDetail
			SET Year4 = @Year4_CASTED
		WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
	END

IF @Make4 <> ''
	BEGIN
		DECLARE @Make4_CASTED varchar(20)
		IF @Make4 = '^'
			BEGIN
				SET @Make4_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Make4_CASTED = CAST(@Make4 AS varchar(20))
			END

		UPDATE ILA_ProductDetail
			SET Make4 = @Make4_CASTED
		WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
	END

IF @Model4 <> ''
	BEGIN
		DECLARE @Model4_CASTED varchar(20)
		IF @Model4 = '^'
			BEGIN
				SET @Model4_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Model4_CASTED = CAST(@Model4 AS varchar(20))
			END

		UPDATE ILA_ProductDetail
			SET Model4 = @Model4_CASTED
		WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
	END

IF @Body4 <> ''
	BEGIN
		DECLARE @Body4_CASTED varchar(20)
		IF @Body4 = '^'
			BEGIN
				SET @Body4_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Body4_CASTED = CAST(@Body4 AS varchar(20))
			END

		UPDATE ILA_ProductDetail
			SET Body4 = @Body4_CASTED
		WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
	END

IF @VIN <> ''
	BEGIN
		DECLARE @VIN_CASTED varchar(18)
		IF @VIN = '^'
			BEGIN
				SET @VIN_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @VIN_CASTED = CAST(@VIN AS varchar(18))
			END

		UPDATE ILA_ProductDetail
			SET VIN = @VIN_CASTED
		WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
	END

IF @SaleType <> ''
	BEGIN
		DECLARE @SaleType_CASTED varchar(20)
		IF @SaleType = '^'
			BEGIN
				SET @SaleType_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @SaleType_CASTED = CAST(@SaleType AS varchar(20))
			END

		UPDATE ILA_ProductDetail
			SET SaleType = @SaleType_CASTED
		WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
	END

IF @DealerCode <> ''
	BEGIN
		DECLARE @DealerCode_CASTED char(8)
		IF @DealerCode = '^'
			BEGIN
				SET @DealerCode_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @DealerCode_CASTED = CAST(@DealerCode AS char(8))
			END

		UPDATE ILA_ProductDetail
			SET DealerCode = @DealerCode_CASTED
		WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
	END

IF @Dealer <> ''
	BEGIN
		DECLARE @Dealer_CASTED varchar(30)
		IF @Dealer = '^'
			BEGIN
				SET @Dealer_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Dealer_CASTED = CAST(@Dealer AS varchar(30))
			END

		UPDATE ILA_ProductDetail
			SET Dealer = @Dealer_CASTED
		WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
	END

IF @TitleDate <> ''
	BEGIN
		DECLARE @TitleDate_CASTED datetime
		IF @TitleDate = '^'
			BEGIN
				SET @TitleDate_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @TitleDate_CASTED = CAST(@TitleDate AS datetime)
			END

		UPDATE ILA_ProductDetail
			SET TitleDate = @TitleDate_CASTED
		WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
	END

IF @TitleNumber <> ''
	BEGIN
		DECLARE @TitleNumber_CASTED varchar(20)
		IF @TitleNumber = '^'
			BEGIN
				SET @TitleNumber_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @TitleNumber_CASTED = CAST(@TitleNumber AS varchar(20))
			END

		UPDATE ILA_ProductDetail
			SET TitleNumber = @TitleNumber_CASTED
		WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
	END

IF @License <> ''
	BEGIN
		DECLARE @License_CASTED char(8)
		IF @License = '^'
			BEGIN
				SET @License_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @License_CASTED = CAST(@License AS char(8))
			END

		UPDATE ILA_ProductDetail
			SET License = @License_CASTED
		WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
	END

IF @PONumber <> ''
	BEGIN
		DECLARE @PONumber_CASTED char(10)
		IF @PONumber = '^'
			BEGIN
				SET @PONumber_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @PONumber_CASTED = CAST(@PONumber AS char(10))
			END

		UPDATE ILA_ProductDetail
			SET PONumber = @PONumber_CASTED
		WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
	END

IF @State <> ''
	BEGIN
		DECLARE @State_CASTED char(2)
		IF @State = '^'
			BEGIN
				SET @State_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @State_CASTED = CAST(@State AS char(2))
			END

		UPDATE ILA_ProductDetail
			SET State = @State_CASTED
		WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
	END

IF @DisclosureCode <> ''
	BEGIN
		DECLARE @DisclosureCode_CASTED char(2)
		IF @DisclosureCode = '^'
			BEGIN
				SET @DisclosureCode_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @DisclosureCode_CASTED = CAST(@DisclosureCode AS char(2))
			END

		UPDATE ILA_ProductDetail
			SET DisclosureCode = @DisclosureCode_CASTED
		WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
	END

IF @InsCode <> ''
	BEGIN
		DECLARE @InsCode_CASTED varchar(20)
		IF @InsCode = '^'
			BEGIN
				SET @InsCode_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @InsCode_CASTED = CAST(@InsCode AS varchar(20))
			END

		UPDATE ILA_ProductDetail
			SET InsCode = @InsCode_CASTED
		WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
	END

IF @GAP <> ''
	BEGIN
		DECLARE @GAP_CASTED varchar(20)
		IF @GAP = '^'
			BEGIN
				SET @GAP_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @GAP_CASTED = CAST(@GAP AS varchar(20))
			END

		UPDATE ILA_ProductDetail
			SET GAP = @GAP_CASTED
		WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
	END

IF @MBP <> ''
	BEGIN
		DECLARE @MBP_CASTED varchar(20)
		IF @MBP = '^'
			BEGIN
				SET @MBP_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @MBP_CASTED = CAST(@MBP AS varchar(20))
			END

		UPDATE ILA_ProductDetail
			SET MBP = @MBP_CASTED
		WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
	END

IF @LoanToValue <> ''
	BEGIN
		DECLARE @LoanToValue_CASTED char(1)
		IF @LoanToValue = '^'
			BEGIN
				SET @LoanToValue_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @LoanToValue_CASTED = CAST(@LoanToValue AS char(1))
			END

		UPDATE ILA_ProductDetail
			SET LoanToValue = @LoanToValue_CASTED
		WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
	END

IF @Color <> ''
	BEGIN
		DECLARE @Color_CASTED varchar(20)
		IF @Color = '^'
			BEGIN
				SET @Color_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Color_CASTED = CAST(@Color AS varchar(20))
			END

		UPDATE ILA_ProductDetail
			SET Color = @Color_CASTED
		WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
	END

IF @ClientIP <> ''
	BEGIN
		DECLARE @ClientIP_CASTED varchar(15)
		IF @ClientIP = '^'
			BEGIN
				SET @ClientIP_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ClientIP_CASTED = CAST(@ClientIP AS varchar(15))
			END

		UPDATE ILA_ProductDetail
			SET ClientIP = @ClientIP_CASTED
		WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
	END

IF @WebIP <> ''
	BEGIN
		DECLARE @WebIP_CASTED varchar(15)
		IF @WebIP = '^'
			BEGIN
				SET @WebIP_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @WebIP_CASTED = CAST(@WebIP AS varchar(15))
			END

		UPDATE ILA_ProductDetail
			SET WebIP = @WebIP_CASTED
		WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
	END

IF @ClusterID <> ''
	BEGIN
		DECLARE @ClusterID_CASTED char(10)
		IF @ClusterID = '^'
			BEGIN
				SET @ClusterID_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ClusterID_CASTED = CAST(@ClusterID AS char(10))
			END

		UPDATE ILA_ProductDetail
			SET ClusterID = @ClusterID_CASTED
		WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
	END

IF @LastModified <> ''
	BEGIN
		DECLARE @LastModified_CASTED datetime
		IF @LastModified = '^'
			BEGIN
				SET @LastModified_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @LastModified_CASTED = CAST(@LastModified AS datetime)
			END

		UPDATE ILA_ProductDetail
			SET LastModified = @LastModified_CASTED
		WHERE 1=1 AND Sequence = @Sequence AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_QuestionsAnswer_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ILAxlate_QuestionsAnswer_InsertIfNew]
	@Id varchar(50),
	@Answer varchar(500),
	@TrackingNum int
AS

IF NOT EXISTS (SELECT * FROM ILA_QuestionsAnswer WHERE 1=1 AND Id = @Id AND TrackingNum = @TrackingNum)
	BEGIN
		INSERT INTO ILA_QuestionsAnswer
		(Id, TrackingNum, Answer)
		VALUES
		(@Id, @TrackingNum, @Answer)
	END
ELSE	BEGIN
		UPDATE ILA_QuestionsAnswer SET
			Answer = @Answer
		WHERE 1=1 AND Id = @Id AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_QuestionsAnswer_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ILAxlate_QuestionsAnswer_Select]
	@Id varchar(50),
	@TrackingNum int
AS

EXEC IMS.sp_ILAQuestionsAnswer_Select @Id, @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_QuestionsAnswer_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ILAxlate_QuestionsAnswer_Update]
	@Id varchar(50),
	@Answer varchar(500),
	@TrackingNum int
AS

IF @Answer <> ''
	BEGIN
		DECLARE @Answer_CASTED varchar(500)
		IF @Answer = '^'
			BEGIN
				SET @Answer_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Answer_CASTED = CAST(@Answer AS varchar(500))
			END

		UPDATE ILA_QuestionsAnswer
			SET Answer = @Answer_CASTED
		WHERE 1=1 AND Id = @Id AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_VelocityApplicationDetail_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ILAxlate_VelocityApplicationDetail_Delete]
	@TrackingNum int
AS

DELETE FROM ILA_VelocityApplicationDetail
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_VelocityApplicationDetail_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ILAxlate_VelocityApplicationDetail_DeleteAll]
	@TrackingNum int
AS

DELETE FROM ILA_VelocityApplicationDetail
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_VelocityApplicationDetail_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ILAxlate_VelocityApplicationDetail_Insert]
	@AppStatus varchar(100),
	@ApplicationID varchar(100),
	@AppNumber varchar(100),
	@WorkFlowTrackingID varchar(100),
	@LoanDecision varchar(100),
	@LoanRate varchar(100),
	@PreApprovalID varchar(100),
	@ErrorDescription varchar(100),
	@TrackingNum int
AS

INSERT INTO ILA_VelocityApplicationDetail
(TrackingNum, AppStatus, ApplicationID, AppNumber, WorkFlowTrackingID, LoanDecision, LoanRate, PreApprovalID, ErrorDescription)
VALUES
(@TrackingNum, @AppStatus, @ApplicationID, @AppNumber, @WorkFlowTrackingID, @LoanDecision, @LoanRate, @PreApprovalID, @ErrorDescription)

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_VelocityApplicationDetail_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ILAxlate_VelocityApplicationDetail_InsertIfNew]
	@AppStatus varchar(100),
	@ApplicationID varchar(100),
	@AppNumber varchar(100),
	@WorkFlowTrackingID varchar(100),
	@LoanDecision varchar(100),
	@LoanRate varchar(100),
	@PreApprovalID varchar(100),
	@ErrorDescription varchar(100),
	@TrackingNum int
AS

IF NOT EXISTS (SELECT * FROM ILA_VelocityApplicationDetail WHERE 1=1 AND TrackingNum = @TrackingNum)
	BEGIN
		INSERT INTO ILA_VelocityApplicationDetail
		(TrackingNum, AppStatus, ApplicationID, AppNumber, WorkFlowTrackingID, LoanDecision, LoanRate, PreApprovalID, ErrorDescription)
		VALUES
		(@TrackingNum, @AppStatus, @ApplicationID, @AppNumber, @WorkFlowTrackingID, @LoanDecision, @LoanRate, @PreApprovalID, @ErrorDescription)
	END
ELSE	BEGIN
		UPDATE ILA_VelocityApplicationDetail SET
			AppStatus = @AppStatus,
			ApplicationID = @ApplicationID,
			AppNumber = @AppNumber,
			WorkFlowTrackingID = @WorkFlowTrackingID,
			LoanDecision = @LoanDecision,
			LoanRate = @LoanRate,
			PreApprovalID = @PreApprovalID,
			ErrorDescription = @ErrorDescription
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_VelocityApplicationDetail_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ILAxlate_VelocityApplicationDetail_Select]
	@TrackingNum int
AS

SELECT * FROM ILA_VelocityApplicationDetail
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_VelocityApplicationDetail_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ILAxlate_VelocityApplicationDetail_SelectAll]
	@TrackingNum int
AS

SELECT * FROM ILA_VelocityApplicationDetail
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_ILAxlate_VelocityApplicationDetail_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ILAxlate_VelocityApplicationDetail_Update]
	@AppStatus varchar(100),
	@ApplicationID varchar(100),
	@AppNumber varchar(100),
	@WorkFlowTrackingID varchar(100),
	@LoanDecision varchar(100),
	@LoanRate varchar(100),
	@PreApprovalID varchar(100),
	@ErrorDescription varchar(100),
	@TrackingNum int
AS

IF @AppStatus <> ''
	BEGIN
		DECLARE @AppStatus_CASTED varchar(100)
		IF @AppStatus = '^'
			BEGIN
				SET @AppStatus_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @AppStatus_CASTED = CAST(@AppStatus AS varchar(100))
			END

		UPDATE ILA_VelocityApplicationDetail
			SET AppStatus = @AppStatus_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @ApplicationID <> ''
	BEGIN
		DECLARE @ApplicationID_CASTED varchar(100)
		IF @ApplicationID = '^'
			BEGIN
				SET @ApplicationID_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ApplicationID_CASTED = CAST(@ApplicationID AS varchar(100))
			END

		UPDATE ILA_VelocityApplicationDetail
			SET ApplicationID = @ApplicationID_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @AppNumber <> ''
	BEGIN
		DECLARE @AppNumber_CASTED varchar(100)
		IF @AppNumber = '^'
			BEGIN
				SET @AppNumber_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @AppNumber_CASTED = CAST(@AppNumber AS varchar(100))
			END

		UPDATE ILA_VelocityApplicationDetail
			SET AppNumber = @AppNumber_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @WorkFlowTrackingID <> ''
	BEGIN
		DECLARE @WorkFlowTrackingID_CASTED varchar(100)
		IF @WorkFlowTrackingID = '^'
			BEGIN
				SET @WorkFlowTrackingID_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @WorkFlowTrackingID_CASTED = CAST(@WorkFlowTrackingID AS varchar(100))
			END

		UPDATE ILA_VelocityApplicationDetail
			SET WorkFlowTrackingID = @WorkFlowTrackingID_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @LoanDecision <> ''
	BEGIN
		DECLARE @LoanDecision_CASTED varchar(100)
		IF @LoanDecision = '^'
			BEGIN
				SET @LoanDecision_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @LoanDecision_CASTED = CAST(@LoanDecision AS varchar(100))
			END

		UPDATE ILA_VelocityApplicationDetail
			SET LoanDecision = @LoanDecision_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @LoanRate <> ''
	BEGIN
		DECLARE @LoanRate_CASTED varchar(100)
		IF @LoanRate = '^'
			BEGIN
				SET @LoanRate_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @LoanRate_CASTED = CAST(@LoanRate AS varchar(100))
			END

		UPDATE ILA_VelocityApplicationDetail
			SET LoanRate = @LoanRate_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @PreApprovalID <> ''
	BEGIN
		DECLARE @PreApprovalID_CASTED varchar(100)
		IF @PreApprovalID = '^'
			BEGIN
				SET @PreApprovalID_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @PreApprovalID_CASTED = CAST(@PreApprovalID AS varchar(100))
			END

		UPDATE ILA_VelocityApplicationDetail
			SET PreApprovalID = @PreApprovalID_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @ErrorDescription <> ''
	BEGIN
		DECLARE @ErrorDescription_CASTED varchar(100)
		IF @ErrorDescription = '^'
			BEGIN
				SET @ErrorDescription_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ErrorDescription_CASTED = CAST(@ErrorDescription AS varchar(100))
			END

		UPDATE ILA_VelocityApplicationDetail
			SET ErrorDescription = @ErrorDescription_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_IMMxlate_Configuration_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_IMMxlate_Configuration_Select]
	@ID int
AS

SELECT * FROM IMMConfiguration
WHERE 1=1 AND ID = @ID

GO
/****** Object:  StoredProcedure [IMS].[sp_IMMxlate_RetrievePreviousSessionReply_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_IMMxlate_RetrievePreviousSessionReply_Delete]
	@TrackingNum int
AS

DELETE FROM IMMSavedSessions
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_IMMxlate_RetrievePreviousSessionReply_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_IMMxlate_RetrievePreviousSessionReply_DeleteAll]
	@TrackingNum int
AS

DELETE FROM IMMSavedSessions
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_IMMxlate_RetrievePreviousSessionReply_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_IMMxlate_RetrievePreviousSessionReply_Insert]
	@TrackingNum int,
	@DocQSessionUrl varchar(4096)
AS

INSERT INTO IMMSavedSessions
(TrackingNum, DocQSessionUrl)
VALUES
(@TrackingNum, @DocQSessionUrl)

GO
/****** Object:  StoredProcedure [IMS].[sp_IMMxlate_RetrievePreviousSessionReply_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_IMMxlate_RetrievePreviousSessionReply_InsertIfNew]
	@TrackingNum int,
	@DocQSessionUrl varchar(4096)
AS

DECLARE @Count int
SELECT @Count = COUNT(DocQSessionUrl) FROM IMMSavedSessions WHERE 1=1 AND TrackingNum = @TrackingNum

IF @Count = 0
	BEGIN
		INSERT INTO IMMSavedSessions
		(TrackingNum, DocQSessionUrl)
		VALUES
		(@TrackingNum, @DocQSessionUrl)
	END
ELSE	BEGIN
		UPDATE IMMSavedSessions SET
			DocQSessionUrl = @DocQSessionUrl
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_IMMxlate_RetrievePreviousSessionReply_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_IMMxlate_RetrievePreviousSessionReply_Select]
	@TrackingNum int
AS

SELECT * FROM IMMSavedSessions
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_IMMxlate_RetrievePreviousSessionReply_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_IMMxlate_RetrievePreviousSessionReply_SelectAll]
	@TrackingNum int
AS

SELECT * FROM IMMSavedSessions
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_IMMxlate_RetrievePreviousSessionReply_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_IMMxlate_RetrievePreviousSessionReply_Update]
	@TrackingNum int,
	@DocQSessionUrl varchar(4096)
AS

IF @DocQSessionUrl <> ''
	BEGIN
		DECLARE @DocQSessionUrl_CASTED varchar(4096)
		IF @DocQSessionUrl = '^'
			BEGIN
				SET @DocQSessionUrl_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @DocQSessionUrl_CASTED = CAST(@DocQSessionUrl AS varchar(4096))
			END

		UPDATE IMMSavedSessions
			SET DocQSessionUrl = @DocQSessionUrl_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_InfoIMAGExlate_Configuration_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_InfoIMAGExlate_Configuration_Delete]
	@ID int
AS

DELETE FROM InfoIMAGEConfiguration
WHERE 1=1 AND ID = @ID

GO
/****** Object:  StoredProcedure [IMS].[sp_InfoIMAGExlate_Configuration_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_InfoIMAGExlate_Configuration_DeleteAll]
AS

DELETE FROM InfoIMAGEConfiguration
WHERE 1=1

GO
/****** Object:  StoredProcedure [IMS].[sp_InfoIMAGExlate_Configuration_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_InfoIMAGExlate_Configuration_Insert]
	@ID int OUTPUT,
	@ClientID varchar(20),
	@URL varchar(255),
	@OAuthURL varchar(255),
	@OAuthClientID varchar(20),
	@OAuthUsername varchar(20),
	@OAuthPassword varchar(20)
AS

INSERT INTO InfoIMAGEConfiguration
(ClientID, URL, OAuthURL, OAuthClientID, OAuthUsername, OAuthPassword)
VALUES
(@ClientID, @URL, @OAuthURL, @OAuthClientID, @OAuthUsername, @OAuthPassword)

SELECT @ID = @@IDENTITY FROM InfoIMAGEConfiguration

GO
/****** Object:  StoredProcedure [IMS].[sp_InfoIMAGExlate_Configuration_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_InfoIMAGExlate_Configuration_InsertIfNew]
	@ID int OUTPUT,
	@ClientID varchar(20),
	@URL varchar(255),
	@OAuthURL varchar(255),
	@OAuthClientID varchar(20),
	@OAuthUsername varchar(20),
	@OAuthPassword varchar(20)
AS

DECLARE @Count int
SELECT @Count = COUNT(ClientID) FROM InfoIMAGEConfiguration WHERE 1=1

IF @Count = 0
	BEGIN
		INSERT INTO InfoIMAGEConfiguration
		(ClientID, URL, OAuthURL, OAuthClientID, OAuthUsername, OAuthPassword)
		VALUES
		(@ClientID, @URL, @OAuthURL, @OAuthClientID, @OAuthUsername, @OAuthPassword)

		SELECT @ID = @@IDENTITY FROM InfoIMAGEConfiguration
	END
ELSE	BEGIN
		UPDATE InfoIMAGEConfiguration SET
			ClientID = @ClientID,
			URL = @URL,
			OAuthURL = @OAuthURL,
			OAuthClientID = @OAuthClientID,
			OAuthUsername = @OAuthUsername,
			OAuthPassword = @OAuthPassword
		WHERE 1=1

		SELECT TOP 1 @ID = ID FROM InfoIMAGEConfiguration
		WHERE 1=1
		ORDER BY ID DESC
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_InfoIMAGExlate_Configuration_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_InfoIMAGExlate_Configuration_Select]
	@ID int
AS

SELECT * FROM InfoIMAGEConfiguration
WHERE 1=1 AND ID = @ID

GO
/****** Object:  StoredProcedure [IMS].[sp_InfoIMAGExlate_Configuration_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_InfoIMAGExlate_Configuration_SelectAll]
AS

SELECT * FROM InfoIMAGEConfiguration
WHERE 1=1

GO
/****** Object:  StoredProcedure [IMS].[sp_InfoIMAGExlate_Configuration_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_InfoIMAGExlate_Configuration_Update]
	@ID int,
	@ClientID varchar(20),
	@URL varchar(255),
	@OAuthURL varchar(255),
	@OAuthClientID varchar(20),
	@OAuthUsername varchar(20),
	@OAuthPassword varchar(20)
AS

IF @ClientID <> ''
	BEGIN
		DECLARE @ClientID_CASTED varchar(20)
		IF @ClientID = '^'
			BEGIN
				SET @ClientID_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ClientID_CASTED = CAST(@ClientID AS varchar(20))
			END

		UPDATE InfoIMAGEConfiguration
			SET ClientID = @ClientID_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @URL <> ''
	BEGIN
		DECLARE @URL_CASTED varchar(255)
		IF @URL = '^'
			BEGIN
				SET @URL_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @URL_CASTED = CAST(@URL AS varchar(255))
			END

		UPDATE InfoIMAGEConfiguration
			SET URL = @URL_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @OAuthURL <> ''
	BEGIN
		DECLARE @OAuthURL_CASTED varchar(255)
		IF @OAuthURL = '^'
			BEGIN
				SET @OAuthURL_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @OAuthURL_CASTED = CAST(@OAuthURL AS varchar(255))
			END

		UPDATE InfoIMAGEConfiguration
			SET OAuthURL = @OAuthURL_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @OAuthClientID <> ''
	BEGIN
		DECLARE @OAuthClientID_CASTED varchar(20)
		IF @OAuthClientID = '^'
			BEGIN
				SET @OAuthClientID_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @OAuthClientID_CASTED = CAST(@OAuthClientID AS varchar(20))
			END

		UPDATE InfoIMAGEConfiguration
			SET OAuthClientID = @OAuthClientID_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @OAuthUsername <> ''
	BEGIN
		DECLARE @OAuthUsername_CASTED varchar(20)
		IF @OAuthUsername = '^'
			BEGIN
				SET @OAuthUsername_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @OAuthUsername_CASTED = CAST(@OAuthUsername AS varchar(20))
			END

		UPDATE InfoIMAGEConfiguration
			SET OAuthUsername = @OAuthUsername_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @OAuthPassword <> ''
	BEGIN
		DECLARE @OAuthPassword_CASTED varchar(20)
		IF @OAuthPassword = '^'
			BEGIN
				SET @OAuthPassword_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @OAuthPassword_CASTED = CAST(@OAuthPassword AS varchar(20))
			END

		UPDATE InfoIMAGEConfiguration
			SET OAuthPassword = @OAuthPassword_CASTED
		WHERE 1=1 AND ID = @ID
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_InfoIMAGExlate_InfoIMAGE_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_InfoIMAGExlate_InfoIMAGE_Delete]
	@TrackingNum int
AS

DELETE FROM InfoIMAGE
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_InfoIMAGExlate_InfoIMAGE_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_InfoIMAGExlate_InfoIMAGE_DeleteAll]
	@TrackingNum int
AS

DELETE FROM InfoIMAGE
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_InfoIMAGExlate_InfoIMAGE_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_InfoIMAGExlate_InfoIMAGE_Insert]
	@TrackingNum int,
	@AccountNumber int,
	@Surname varchar(2),
	@FlagNumber int,
	@EnrollmentStatusCode varchar(1),
	@Email varchar(50),
	@Success varchar(1)
AS

INSERT INTO InfoIMAGE
(TrackingNum, AccountNumber, Surname, FlagNumber, EnrollmentStatusCode, Email, Success)
VALUES
(@TrackingNum, @AccountNumber, @Surname, @FlagNumber, @EnrollmentStatusCode, @Email, @Success)

GO
/****** Object:  StoredProcedure [IMS].[sp_InfoIMAGExlate_InfoIMAGE_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_InfoIMAGExlate_InfoIMAGE_InsertIfNew]
	@TrackingNum int,
	@AccountNumber int,
	@Surname varchar(2),
	@FlagNumber int,
	@EnrollmentStatusCode varchar(1),
	@Email varchar(50),
	@Success varchar(1)
AS

DECLARE @Count int
SELECT @Count = COUNT(AccountNumber) FROM InfoIMAGE WHERE 1=1 AND TrackingNum = @TrackingNum

IF @Count = 0
	BEGIN
		INSERT INTO InfoIMAGE
		(TrackingNum, AccountNumber, Surname, FlagNumber, EnrollmentStatusCode, Email, Success)
		VALUES
		(@TrackingNum, @AccountNumber, @Surname, @FlagNumber, @EnrollmentStatusCode, @Email, @Success)
	END
ELSE	BEGIN
		UPDATE InfoIMAGE SET
			AccountNumber = @AccountNumber,
			Surname = @Surname,
			FlagNumber = @FlagNumber,
			EnrollmentStatusCode = @EnrollmentStatusCode,
			Email = @Email,
			Success = @Success
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_InfoIMAGExlate_InfoIMAGE_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_InfoIMAGExlate_InfoIMAGE_Select]
	@TrackingNum int
AS

SELECT * FROM InfoIMAGE
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_InfoIMAGExlate_InfoIMAGE_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_InfoIMAGExlate_InfoIMAGE_SelectAll]
	@TrackingNum int
AS

SELECT * FROM InfoIMAGE
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_InfoIMAGExlate_InfoIMAGE_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_InfoIMAGExlate_InfoIMAGE_Update]
	@TrackingNum int,
	@AccountNumber varchar(100),
	@Surname varchar(2),
	@FlagNumber varchar(100),
	@EnrollmentStatusCode varchar(1),
	@Email varchar(50),
	@Success varchar(1)
AS

IF @AccountNumber <> ''
	BEGIN
		DECLARE @AccountNumber_CASTED int
		IF @AccountNumber = '^'
			BEGIN
				SET @AccountNumber_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @AccountNumber_CASTED = CAST(@AccountNumber AS int)
			END

		UPDATE InfoIMAGE
			SET AccountNumber = @AccountNumber_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @Surname <> ''
	BEGIN
		DECLARE @Surname_CASTED varchar(2)
		IF @Surname = '^'
			BEGIN
				SET @Surname_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Surname_CASTED = CAST(@Surname AS varchar(2))
			END

		UPDATE InfoIMAGE
			SET Surname = @Surname_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @FlagNumber <> ''
	BEGIN
		DECLARE @FlagNumber_CASTED int
		IF @FlagNumber = '^'
			BEGIN
				SET @FlagNumber_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @FlagNumber_CASTED = CAST(@FlagNumber AS int)
			END

		UPDATE InfoIMAGE
			SET FlagNumber = @FlagNumber_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @EnrollmentStatusCode <> ''
	BEGIN
		DECLARE @EnrollmentStatusCode_CASTED varchar(1)
		IF @EnrollmentStatusCode = '^'
			BEGIN
				SET @EnrollmentStatusCode_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @EnrollmentStatusCode_CASTED = CAST(@EnrollmentStatusCode AS varchar(1))
			END

		UPDATE InfoIMAGE
			SET EnrollmentStatusCode = @EnrollmentStatusCode_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @Email <> ''
	BEGIN
		DECLARE @Email_CASTED varchar(50)
		IF @Email = '^'
			BEGIN
				SET @Email_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Email_CASTED = CAST(@Email AS varchar(50))
			END

		UPDATE InfoIMAGE
			SET Email = @Email_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @Success <> ''
	BEGIN
		DECLARE @Success_CASTED varchar(1)
		IF @Success = '^'
			BEGIN
				SET @Success_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Success_CASTED = CAST(@Success AS varchar(1))
			END

		UPDATE InfoIMAGE
			SET Success = @Success_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_InfoIMAGExlate_InfoIMAGEHistory_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_InfoIMAGExlate_InfoIMAGEHistory_Delete]
	@ID int
AS

DELETE FROM InfoIMAGEHistory
WHERE 1=1 AND ID = @ID

GO
/****** Object:  StoredProcedure [IMS].[sp_InfoIMAGExlate_InfoIMAGEHistory_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_InfoIMAGExlate_InfoIMAGEHistory_DeleteAll]
	@ResponseDate datetime,
	@TrackingNum int
AS

DELETE FROM InfoIMAGEHistory
WHERE 1=1 AND ResponseDate = @ResponseDate AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_InfoIMAGExlate_InfoIMAGEHistory_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_InfoIMAGExlate_InfoIMAGEHistory_Insert]
	@ID int OUTPUT,
	@StatusCode varchar(4),
	@ResponseDate datetime,
	@TrackingNum int
AS

INSERT INTO InfoIMAGEHistory
(ResponseDate, TrackingNum, StatusCode)
VALUES
(@ResponseDate, @TrackingNum, @StatusCode)

SELECT @ID = @@IDENTITY FROM InfoIMAGEHistory

GO
/****** Object:  StoredProcedure [IMS].[sp_InfoIMAGExlate_InfoIMAGEHistory_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_InfoIMAGExlate_InfoIMAGEHistory_InsertIfNew]
	@ID int OUTPUT,
	@StatusCode varchar(4),
	@ResponseDate datetime,
	@TrackingNum int
AS

DECLARE @Count int
SELECT @Count = COUNT(StatusCode) FROM InfoIMAGEHistory WHERE 1=1 AND ResponseDate = @ResponseDate AND TrackingNum = @TrackingNum

IF @Count = 0
	BEGIN
		INSERT INTO InfoIMAGEHistory
		(ResponseDate, TrackingNum, StatusCode)
		VALUES
		(@ResponseDate, @TrackingNum, @StatusCode)

		SELECT @ID = @@IDENTITY FROM InfoIMAGEHistory
	END
ELSE	BEGIN
		UPDATE InfoIMAGEHistory SET
			StatusCode = @StatusCode
		WHERE 1=1 AND ResponseDate = @ResponseDate AND TrackingNum = @TrackingNum

		SELECT TOP 1 @ID = ID FROM InfoIMAGEHistory
		WHERE 1=1 AND ResponseDate = @ResponseDate AND TrackingNum = @TrackingNum
		ORDER BY ID DESC
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_InfoIMAGExlate_InfoIMAGEHistory_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_InfoIMAGExlate_InfoIMAGEHistory_Select]
	@ID int
AS

SELECT * FROM InfoIMAGEHistory
WHERE 1=1 AND ID = @ID

GO
/****** Object:  StoredProcedure [IMS].[sp_InfoIMAGExlate_InfoIMAGEHistory_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_InfoIMAGExlate_InfoIMAGEHistory_SelectAll]
	@ResponseDate datetime,
	@TrackingNum int
AS

SELECT * FROM InfoIMAGEHistory
WHERE 1=1 AND ResponseDate = @ResponseDate AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_InfoIMAGExlate_InfoIMAGEHistory_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_InfoIMAGExlate_InfoIMAGEHistory_Update]
	@ID int,
	@StatusCode varchar(4),
	@ResponseDate varchar(100),
	@TrackingNum varchar(100)
AS

IF @ResponseDate <> ''
	BEGIN
		DECLARE @ResponseDate_CASTED datetime
		IF @ResponseDate = '^'
			BEGIN
				SET @ResponseDate_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ResponseDate_CASTED = CAST(@ResponseDate AS datetime)
			END

		UPDATE InfoIMAGEHistory
			SET ResponseDate = @ResponseDate_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @TrackingNum <> ''
	BEGIN
		DECLARE @TrackingNum_CASTED int
		IF @TrackingNum = '^'
			BEGIN
				SET @TrackingNum_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @TrackingNum_CASTED = CAST(@TrackingNum AS int)
			END

		UPDATE InfoIMAGEHistory
			SET TrackingNum = @TrackingNum_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @StatusCode <> ''
	BEGIN
		DECLARE @StatusCode_CASTED varchar(4)
		IF @StatusCode = '^'
			BEGIN
				SET @StatusCode_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @StatusCode_CASTED = CAST(@StatusCode AS varchar(4))
			END

		UPDATE InfoIMAGEHistory
			SET StatusCode = @StatusCode_CASTED
		WHERE 1=1 AND ID = @ID
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_LNCatCollateralSelect]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [IMS].[sp_LNCatCollateralSelect]
(
	@Collateral int
)
AS
	BEGIN
		SELECT * FROM  LNCatCollateral WHERE Collateral = @Collateral
	END
GO
/****** Object:  StoredProcedure [IMS].[sp_MRCHxlate_Defaults_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_MRCHxlate_Defaults_Delete]
AS

DELETE FROM MRCHDefaults
WHERE 1=1

GO
/****** Object:  StoredProcedure [IMS].[sp_MRCHxlate_Defaults_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_MRCHxlate_Defaults_DeleteAll]
AS

DELETE FROM MRCHDefaults
WHERE 1=1

GO
/****** Object:  StoredProcedure [IMS].[sp_MRCHxlate_Defaults_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_MRCHxlate_Defaults_Insert]
	@URL varchar(200)
AS

INSERT INTO MRCHDefaults
(URL)
VALUES
(@URL)

GO
/****** Object:  StoredProcedure [IMS].[sp_MRCHxlate_Defaults_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_MRCHxlate_Defaults_InsertIfNew]
	@URL varchar(200)
AS

DECLARE @Count int
SELECT @Count = COUNT(URL) FROM MRCHDefaults WHERE 1=1

IF @Count = 0
	BEGIN
		INSERT INTO MRCHDefaults
		(URL)
		VALUES
		(@URL)
	END
ELSE	BEGIN
		UPDATE MRCHDefaults SET
			URL = @URL
		WHERE 1=1
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_MRCHxlate_Defaults_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_MRCHxlate_Defaults_Select]
AS

SELECT * FROM MRCHDefaults
WHERE 1=1

GO
/****** Object:  StoredProcedure [IMS].[sp_MRCHxlate_Defaults_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_MRCHxlate_Defaults_SelectAll]
AS

SELECT * FROM MRCHDefaults
WHERE 1=1

GO
/****** Object:  StoredProcedure [IMS].[sp_MRCHxlate_Defaults_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_MRCHxlate_Defaults_Update]
	@URL varchar(200)
AS

IF @URL <> ''
	BEGIN
		DECLARE @URL_CASTED varchar(200)
		IF @URL = '^'
			BEGIN
				SET @URL_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @URL_CASTED = CAST(@URL AS varchar(200))
			END

		UPDATE MRCHDefaults
			SET URL = @URL_CASTED
		WHERE 1=1
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_MSLFlagsSelect]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [IMS].[sp_MSLFlagsSelect]
	@Account int
AS

SELECT * FROM [IMS].[Flags]
WHERE 1=2 AND Account = @Account
GO
/****** Object:  StoredProcedure [IMS].[sp_NMRFundingTransaction_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_NMRFundingTransaction_SelectAll]
	@FundingBankID int,
	@FundingCardID int,
	@SourceSubAccountSeq int,
	@FundingType char(1),
	@TrackingNum int,
	@GatewayPaymentID int,
	@FundingID int = null /* Called by the ACHReconciliation directly and has not been added to the udt */
AS

BEGIN
	SELECT TOP 1000 * FROM NMRFundingTransaction
	WHERE 1=1 AND 
		(@FundingID IS NULL OR (@FundingID IS NOT NULL AND FundingBankID IN (SELECT ID FROM NMRFundingBank WHERE FundingID = @FundingID))) AND 
		(@FundingBankID IS NULL OR FundingBankID = @FundingBankID) AND 
		(@FundingCardID IS NULL OR FundingCardID = @FundingCardID) AND 
		(@SourceSubAccountSeq IS NULL OR SourceSubAccountSeq = @SourceSubAccountSeq) AND 
		(@FundingType IS NULL OR FundingType = @FundingType) AND 
		(@TrackingNum IS NULL OR TrackingNum = @TrackingNum) AND 
		(@GatewayPaymentID IS NULL OR GatewayPaymentID = @GatewayPaymentID)
END
GO
/****** Object:  StoredProcedure [IMS].[sp_NMRFundingxlate_ACHFileArchive_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_NMRFundingxlate_ACHFileArchive_Delete]
	@ID int
AS

DELETE FROM ACHFileArchive
WHERE 1=1 AND ID = @ID

GO
/****** Object:  StoredProcedure [IMS].[sp_NMRFundingxlate_ACHFileArchive_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_NMRFundingxlate_ACHFileArchive_DeleteAll]
	@DateTimeStart datetime,
	@DateTimeEnd datetime
AS

DELETE FROM ACHFileArchive
WHERE 1=1

GO
/****** Object:  StoredProcedure [IMS].[sp_NMRFundingxlate_ACHFileArchive_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_NMRFundingxlate_ACHFileArchive_Insert]
	@ID int OUTPUT,
	@ACHFileType varchar(10),
	@DateTimeStart datetime,
	@DateTimeEnd datetime,
	@DateTimeGenerated datetime,
	@ACHFileText text
AS

INSERT INTO ACHFileArchive
(ACHFileType, DateTimeGenerated, ACHFileText)
VALUES
(@ACHFileType, @DateTimeGenerated, @ACHFileText)

SELECT @ID = @@IDENTITY FROM ACHFileArchive

GO
/****** Object:  StoredProcedure [IMS].[sp_NMRFundingxlate_ACHFileArchive_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_NMRFundingxlate_ACHFileArchive_InsertIfNew]
	@ID int OUTPUT,
	@ACHFileType varchar(10),
	@DateTimeStart datetime,
	@DateTimeEnd datetime,
	@DateTimeGenerated datetime,
	@ACHFileText text
AS

DECLARE @Count int
SELECT @Count = COUNT(ACHFileType) FROM ACHFileArchive WHERE 1=1

IF @Count = 0
	BEGIN
		INSERT INTO ACHFileArchive
		(ACHFileType, DateTimeGenerated, ACHFileText)
		VALUES
		(@ACHFileType, @DateTimeGenerated, @ACHFileText)

		SELECT @ID = SCOPE_IDENTITY()
	END
ELSE	BEGIN
		UPDATE ACHFileArchive SET
			ACHFileType = @ACHFileType,
			DateTimeGenerated = @DateTimeGenerated,
			ACHFileText = @ACHFileText
		WHERE 1=1

		SELECT TOP 1 @ID = ID FROM ACHFileArchive
		WHERE 1=1
		ORDER BY ID DESC
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_NMRFundingxlate_ACHFileArchive_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_NMRFundingxlate_ACHFileArchive_Select]
	@ID int
AS

SELECT * FROM ACHFileArchive
WHERE 1=1 AND ID = @ID

GO
/****** Object:  StoredProcedure [IMS].[sp_NMRFundingxlate_ACHFileArchive_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_NMRFundingxlate_ACHFileArchive_SelectAll]
	@DateTimeStart datetime,
	@DateTimeEnd datetime
AS

EXEC IMS.sp_ACHFileArchive_SelectAll @DateTimeStart, @DateTimeEnd

GO
/****** Object:  StoredProcedure [IMS].[sp_NMRFundingxlate_ACHFileArchive_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_NMRFundingxlate_ACHFileArchive_Update]
	@ID int,
	@ACHFileType varchar(10),
	@DateTimeStart datetime,
	@DateTimeEnd datetime,
	@DateTimeGenerated varchar(100),
	@ACHFileText text
AS

IF @ACHFileType <> ''
	BEGIN
		DECLARE @ACHFileType_CASTED varchar(10)
		IF @ACHFileType = '^'
			BEGIN
				SET @ACHFileType_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ACHFileType_CASTED = CAST(@ACHFileType AS varchar(10))
			END

		UPDATE ACHFileArchive
			SET ACHFileType = @ACHFileType_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @DateTimeGenerated <> ''
	BEGIN
		DECLARE @DateTimeGenerated_CASTED datetime
		IF @DateTimeGenerated = '^'
			BEGIN
				SET @DateTimeGenerated_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @DateTimeGenerated_CASTED = CAST(@DateTimeGenerated AS datetime)
			END

		UPDATE ACHFileArchive
			SET DateTimeGenerated = @DateTimeGenerated_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF CAST(@ACHFileText AS varchar(100)) <> ''
	BEGIN
		IF CAST(@ACHFileText AS varchar(100)) = '^'
			BEGIN
				UPDATE ACHFileArchive
					SET ACHFileText = NULL
				WHERE 1=1 AND ID = @ID
			END
		ELSE
			BEGIN
				UPDATE ACHFileArchive
					SET ACHFileText = @ACHFileText
				WHERE 1=1 AND ID = @ID
			END

	END

GO
/****** Object:  StoredProcedure [IMS].[sp_NMRFundingxlate_FedReservePendingTransaction_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_NMRFundingxlate_FedReservePendingTransaction_Select]
	@NMRAccountNumber bigint
AS

EXEC sp_FedReservePendingTransaction_Select @NMRAccountNumber

GO
/****** Object:  StoredProcedure [IMS].[sp_NMRFundingxlate_NMRFunding_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_NMRFundingxlate_NMRFunding_Delete]
	@ID int
AS

DELETE FROM NMRFunding
WHERE 1=1 AND ID = @ID

GO
/****** Object:  StoredProcedure [IMS].[sp_NMRFundingxlate_NMRFunding_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_NMRFundingxlate_NMRFunding_DeleteAll]
	@TrackingNum int,
	@AccountNumber bigint
AS

DELETE FROM NMRFunding
WHERE 1=1 AND TrackingNum = @TrackingNum AND AccountNumber = @AccountNumber

GO
/****** Object:  StoredProcedure [IMS].[sp_NMRFundingxlate_NMRFunding_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_NMRFundingxlate_NMRFunding_Insert]
	@ID int OUTPUT,
	@TrackingNum int,
	@AccountNumber varchar(50),
	@GatewayCustomerID int,
	@DateTimeCreated datetime,
	@DateTimeLastTransaction datetime
AS

INSERT INTO NMRFunding
(TrackingNum, AccountNumber, GatewayCustomerID, DateTimeCreated, DateTimeLastTransaction)
VALUES
(@TrackingNum, @AccountNumber, @GatewayCustomerID, @DateTimeCreated, @DateTimeLastTransaction)

SELECT @ID = SCOPE_IDENTITY()

GO
/****** Object:  StoredProcedure [IMS].[sp_NMRFundingxlate_NMRFunding_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_NMRFundingxlate_NMRFunding_InsertIfNew]
	@ID int OUTPUT,
	@TrackingNum int,
	@AccountNumber varchar(50),
	@GatewayCustomerID int,
	@DateTimeCreated datetime,
	@DateTimeLastTransaction datetime
AS

DECLARE @Count int
SELECT @Count = COUNT(GatewayCustomerID) FROM NMRFunding WHERE 1=1 AND AccountNumber = @AccountNumber AND TrackingNum = @TrackingNum

IF @Count = 0
	BEGIN
		INSERT INTO NMRFunding
		(TrackingNum, AccountNumber, GatewayCustomerID, DateTimeCreated, DateTimeLastTransaction)
		VALUES
		(@TrackingNum, @AccountNumber, @GatewayCustomerID, @DateTimeCreated, @DateTimeLastTransaction)

		SELECT @ID = SCOPE_IDENTITY()
	END
ELSE	BEGIN
		UPDATE NMRFunding SET
			GatewayCustomerID = @GatewayCustomerID,
			DateTimeCreated = @DateTimeCreated,
			DateTimeLastTransaction = @DateTimeLastTransaction
		WHERE 1=1 AND TrackingNum = @TrackingNum AND AccountNumber = @AccountNumber

		SELECT TOP 1 @ID = ID FROM NMRFunding
		WHERE 1=1 AND TrackingNum = @TrackingNum AND AccountNumber = @AccountNumber
		ORDER BY ID DESC
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_NMRFundingxlate_NMRFunding_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_NMRFundingxlate_NMRFunding_Select]
	@ID int
AS

SELECT * FROM NMRFunding
WHERE 1=1 AND ID = @ID

GO
/****** Object:  StoredProcedure [IMS].[sp_NMRFundingxlate_NMRFunding_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_NMRFundingxlate_NMRFunding_SelectAll]
	@TrackingNum int,
	@AccountNumber bigint
AS

SELECT * FROM NMRFunding
WHERE 1=1 AND TrackingNum = @TrackingNum AND AccountNumber = @AccountNumber

GO
/****** Object:  StoredProcedure [IMS].[sp_NMRFundingxlate_NMRFunding_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_NMRFundingxlate_NMRFunding_Update]
	@ID int,
	@TrackingNum varchar(100),
	@AccountNumber varchar(100),
	@GatewayCustomerID varchar(100),
	@DateTimeCreated varchar(100),
	@DateTimeLastTransaction varchar(100)
AS

IF @TrackingNum <> ''
	BEGIN
		DECLARE @TrackingNum_CASTED int
		IF @TrackingNum = '^'
			BEGIN
				SET @TrackingNum_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @TrackingNum_CASTED = CAST(@TrackingNum AS int)
			END

		UPDATE NMRFunding
			SET TrackingNum = @TrackingNum_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @AccountNumber <> ''
	BEGIN
		DECLARE @AccountNumber_CASTED varchar(50)
		IF @AccountNumber = '^'
			BEGIN
				SET @AccountNumber_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @AccountNumber_CASTED = CAST(@AccountNumber AS varchar(50))
			END

		UPDATE NMRFunding
			SET AccountNumber = @AccountNumber_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @GatewayCustomerID <> ''
	BEGIN
		DECLARE @GatewayCustomerID_CASTED int
		IF @GatewayCustomerID = '^'
			BEGIN
				SET @GatewayCustomerID_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @GatewayCustomerID_CASTED = CAST(@GatewayCustomerID AS int)
			END

		UPDATE NMRFunding
			SET GatewayCustomerID = @GatewayCustomerID_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @DateTimeCreated <> ''
	BEGIN
		DECLARE @DateTimeCreated_CASTED datetime
		IF @DateTimeCreated = '^'
			BEGIN
				SET @DateTimeCreated_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @DateTimeCreated_CASTED = CAST(@DateTimeCreated AS datetime)
			END

		UPDATE NMRFunding
			SET DateTimeCreated = @DateTimeCreated_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @DateTimeLastTransaction <> ''
	BEGIN
		DECLARE @DateTimeLastTransaction_CASTED datetime
		IF @DateTimeLastTransaction = '^'
			BEGIN
				SET @DateTimeLastTransaction_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @DateTimeLastTransaction_CASTED = CAST(@DateTimeLastTransaction AS datetime)
			END

		UPDATE NMRFunding
			SET DateTimeLastTransaction = @DateTimeLastTransaction_CASTED
		WHERE 1=1 AND ID = @ID
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_NMRFundingxlate_NMRFundingBank_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_NMRFundingxlate_NMRFundingBank_Delete]
	@ID int
AS

DELETE FROM NMRFundingBank
WHERE 1=1 AND ID = @ID

GO
/****** Object:  StoredProcedure [IMS].[sp_NMRFundingxlate_NMRFundingBank_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_NMRFundingxlate_NMRFundingBank_DeleteAll]
	@FundingID int
AS

DELETE FROM NMRFundingBank
WHERE 1=1 AND FundingID = @FundingID

GO
/****** Object:  StoredProcedure [IMS].[sp_NMRFundingxlate_NMRFundingBank_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_NMRFundingxlate_NMRFundingBank_Insert]
	@ID int OUTPUT,
	@GatewayAccountID int,
	@TrackingNum int,
	@AccountNumberEncrypted varchar(100),
	@AccountNumberLast4 varchar(4),
	@BankName varchar(50),
	@RoutingNumber varchar(9),
	@AccountType char(1),
	@Amount1 decimal(18,2),
	@Amount2 decimal(18,2),
	@GatewayPaymentID1 varchar(25),
	@GatewayPaymentID2 varchar(25),
	@VerificationAttempts int,
	@VerificationStatus char(1),
	@PSIErrorMessage varchar(255),
	@ReconciliationUser varchar(50),
	@DateTimeCreated datetime,
	@DateTimeVerified datetime,
	@DateTimeVerificationReconciled datetime,
	@DateTimeLastReversal datetime,
	@DateTimeLastTransaction datetime,
	@DateTimeLastReconciled datetime,
	@DateTimeExported datetime,
	@ApprovedLimit int,
	@CBTracking int,
	@Nickname varchar(30),
	@MakeAvailable bit,
	@DebitAmount decimal(18,2),
	@FundingID int
AS

INSERT INTO NMRFundingBank
(FundingID, GatewayAccountID, TrackingNum, AccountNumberEncrypted, AccountNumberLast4, BankName, RoutingNumber, AccountType, Amount1, Amount2, GatewayPaymentID1, GatewayPaymentID2, VerificationAttempts, VerificationStatus, PSIErrorMessage, ReconciliationUser, DateTimeCreated, DateTimeVerified, DateTimeVerificationReconciled, DateTimeLastReversal, DateTimeLastTransaction, DateTimeLastReconciled, DateTimeExported, ApprovedLimit, CBTracking, Nickname, MakeAvailable, DebitAmount)
VALUES
(@FundingID, @GatewayAccountID, @TrackingNum, @AccountNumberEncrypted, @AccountNumberLast4, @BankName, @RoutingNumber, @AccountType, @Amount1, @Amount2, @GatewayPaymentID1, @GatewayPaymentID2, @VerificationAttempts, @VerificationStatus, @PSIErrorMessage, @ReconciliationUser, @DateTimeCreated, @DateTimeVerified, @DateTimeVerificationReconciled, @DateTimeLastReversal, @DateTimeLastTransaction, @DateTimeLastReconciled, @DateTimeExported, @ApprovedLimit, @CBTracking, @Nickname, @MakeAvailable, @DebitAmount)

SELECT @ID = SCOPE_IDENTITY()

GO
/****** Object:  StoredProcedure [IMS].[sp_NMRFundingxlate_NMRFundingBank_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_NMRFundingxlate_NMRFundingBank_InsertIfNew]
	@ID int OUTPUT,
	@GatewayAccountID int,
	@TrackingNum int,
	@AccountNumberEncrypted varchar(100),
	@AccountNumberLast4 varchar(4),
	@BankName varchar(50),
	@RoutingNumber varchar(9),
	@AccountType char(1),
	@Amount1 decimal(18,2),
	@Amount2 decimal(18,2),
	@GatewayPaymentID1 varchar(25),
	@GatewayPaymentID2 varchar(25),
	@VerificationAttempts int,
	@VerificationStatus char(1),
	@PSIErrorMessage varchar(255),
	@ReconciliationUser varchar(50),
	@DateTimeCreated datetime,
	@DateTimeVerified datetime,
	@DateTimeVerificationReconciled datetime,
	@DateTimeLastReversal datetime,
	@DateTimeLastTransaction datetime,
	@DateTimeLastReconciled datetime,
	@DateTimeExported datetime,
	@ApprovedLimit int,
	@CBTracking int,
	@Nickname varchar(30),
	@MakeAvailable bit,
	@DebitAmount decimal(18,2),
	@FundingID int
AS

DECLARE @Count int
SELECT @Count = COUNT(GatewayAccountID) FROM NMRFundingBank WHERE 1=1 AND FundingID = @FundingID

IF @Count = 0
	BEGIN
		INSERT INTO NMRFundingBank
		(FundingID, GatewayAccountID, TrackingNum, AccountNumberEncrypted, AccountNumberLast4, BankName, RoutingNumber, AccountType, Amount1, Amount2, GatewayPaymentID1, GatewayPaymentID2, VerificationAttempts, VerificationStatus, PSIErrorMessage, ReconciliationUser, DateTimeCreated, DateTimeVerified, DateTimeVerificationReconciled, DateTimeLastReversal, DateTimeLastTransaction, DateTimeLastReconciled, DateTimeExported, ApprovedLimit, CBTracking, Nickname, MakeAvailable, DebitAmount)
		VALUES
		(@FundingID, @GatewayAccountID, @TrackingNum, @AccountNumberEncrypted, @AccountNumberLast4, @BankName, @RoutingNumber, @AccountType, @Amount1, @Amount2, @GatewayPaymentID1, @GatewayPaymentID2, @VerificationAttempts, @VerificationStatus, @PSIErrorMessage, @ReconciliationUser, @DateTimeCreated, @DateTimeVerified, @DateTimeVerificationReconciled, @DateTimeLastReversal, @DateTimeLastTransaction, @DateTimeLastReconciled, @DateTimeExported, @ApprovedLimit, @CBTracking, @Nickname, @MakeAvailable, @DebitAmount)

		SELECT @ID = SCOPE_IDENTITY()
	END
ELSE	BEGIN
		UPDATE NMRFundingBank SET
			GatewayAccountID = @GatewayAccountID,
			TrackingNum = @TrackingNum,
			AccountNumberEncrypted = @AccountNumberEncrypted,
			AccountNumberLast4 = @AccountNumberLast4,
			BankName = @BankName,
			RoutingNumber = @RoutingNumber,
			AccountType = @AccountType,
			Amount1 = @Amount1,
			Amount2 = @Amount2,
			GatewayPaymentID1 = @GatewayPaymentID1,
			GatewayPaymentID2 = @GatewayPaymentID2,
			VerificationAttempts = @VerificationAttempts,
			VerificationStatus = @VerificationStatus,
			PSIErrorMessage = @PSIErrorMessage,
			ReconciliationUser = @ReconciliationUser,
			DateTimeCreated = @DateTimeCreated,
			DateTimeVerified = @DateTimeVerified,
			DateTimeVerificationReconciled = @DateTimeVerificationReconciled,
			DateTimeLastReversal = @DateTimeLastReversal,
			DateTimeLastTransaction = @DateTimeLastTransaction,
			DateTimeLastReconciled = @DateTimeLastReconciled,
			DateTimeExported = @DateTimeExported,
			ApprovedLimit = @ApprovedLimit,
			CBTracking = @CBTracking,
			Nickname = @Nickname,
			MakeAvailable = @MakeAvailable,
			DebitAmount = @DebitAmount
		WHERE 1=1 AND FundingID = @FundingID

		SELECT TOP 1 @ID = ID FROM NMRFundingBank
		WHERE 1=1 AND FundingID = @FundingID
		ORDER BY ID DESC
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_NMRFundingxlate_NMRFundingBank_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_NMRFundingxlate_NMRFundingBank_Select]
	@ID int
AS

SELECT * FROM NMRFundingBank
WHERE 1=1 AND ID = @ID

GO
/****** Object:  StoredProcedure [IMS].[sp_NMRFundingxlate_NMRFundingBank_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_NMRFundingxlate_NMRFundingBank_SelectAll]
	@FundingID int
AS

SELECT * FROM NMRFundingBank
WHERE 1=1 AND FundingID = @FundingID

GO
/****** Object:  StoredProcedure [IMS].[sp_NMRFundingxlate_NMRFundingBank_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_NMRFundingxlate_NMRFundingBank_Update]
	@ID int,
	@GatewayAccountID varchar(100),
	@TrackingNum varchar(100),
	@AccountNumberEncrypted varchar(100),
	@AccountNumberLast4 varchar(4),
	@BankName varchar(50),
	@RoutingNumber varchar(9),
	@AccountType varchar(1),
	@Amount1 varchar(100),
	@Amount2 varchar(100),
	@GatewayPaymentID1 varchar(25),
	@GatewayPaymentID2 varchar(25),
	@VerificationAttempts varchar(100),
	@VerificationStatus varchar(1),
	@PSIErrorMessage varchar(255),
	@ReconciliationUser varchar(50),
	@DateTimeCreated varchar(100),
	@DateTimeVerified varchar(100),
	@DateTimeVerificationReconciled varchar(100),
	@DateTimeLastReversal varchar(100),
	@DateTimeLastTransaction varchar(100),
	@DateTimeLastReconciled varchar(100),
	@DateTimeExported varchar(100),
	@ApprovedLimit varchar(100),
	@CBTracking varchar(100),
	@Nickname varchar(30),
	@MakeAvailable varchar(100),
	@DebitAmount varchar(100),
	@FundingID varchar(100)
AS

IF @FundingID <> ''
	BEGIN
		DECLARE @FundingID_CASTED int
		IF @FundingID = '^'
			BEGIN
				SET @FundingID_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @FundingID_CASTED = CAST(@FundingID AS int)
			END

		UPDATE NMRFundingBank
			SET FundingID = @FundingID_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @GatewayAccountID <> ''
	BEGIN
		DECLARE @GatewayAccountID_CASTED int
		IF @GatewayAccountID = '^'
			BEGIN
				SET @GatewayAccountID_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @GatewayAccountID_CASTED = CAST(@GatewayAccountID AS int)
			END

		UPDATE NMRFundingBank
			SET GatewayAccountID = @GatewayAccountID_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @TrackingNum <> ''
	BEGIN
		DECLARE @TrackingNum_CASTED int
		IF @TrackingNum = '^'
			BEGIN
				SET @TrackingNum_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @TrackingNum_CASTED = CAST(@TrackingNum AS int)
			END

		UPDATE NMRFundingBank
			SET TrackingNum = @TrackingNum_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @AccountNumberEncrypted <> ''
	BEGIN
		DECLARE @AccountNumberEncrypted_CASTED varchar(100)
		IF @AccountNumberEncrypted = '^'
			BEGIN
				SET @AccountNumberEncrypted_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @AccountNumberEncrypted_CASTED = CAST(@AccountNumberEncrypted AS varchar(100))
			END

		UPDATE NMRFundingBank
			SET AccountNumberEncrypted = @AccountNumberEncrypted_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @AccountNumberLast4 <> ''
	BEGIN
		DECLARE @AccountNumberLast4_CASTED varchar(4)
		IF @AccountNumberLast4 = '^'
			BEGIN
				SET @AccountNumberLast4_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @AccountNumberLast4_CASTED = CAST(@AccountNumberLast4 AS varchar(4))
			END

		UPDATE NMRFundingBank
			SET AccountNumberLast4 = @AccountNumberLast4_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @BankName <> ''
	BEGIN
		DECLARE @BankName_CASTED varchar(50)
		IF @BankName = '^'
			BEGIN
				SET @BankName_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @BankName_CASTED = CAST(@BankName AS varchar(50))
			END

		UPDATE NMRFundingBank
			SET BankName = @BankName_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @RoutingNumber <> ''
	BEGIN
		DECLARE @RoutingNumber_CASTED varchar(9)
		IF @RoutingNumber = '^'
			BEGIN
				SET @RoutingNumber_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @RoutingNumber_CASTED = CAST(@RoutingNumber AS varchar(9))
			END

		UPDATE NMRFundingBank
			SET RoutingNumber = @RoutingNumber_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @AccountType <> ''
	BEGIN
		DECLARE @AccountType_CASTED char(1)
		IF @AccountType = '^'
			BEGIN
				SET @AccountType_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @AccountType_CASTED = CAST(@AccountType AS char(1))
			END

		UPDATE NMRFundingBank
			SET AccountType = @AccountType_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @Amount1 <> ''
	BEGIN
		DECLARE @Amount1_CASTED decimal(18,2)
		IF @Amount1 = '^'
			BEGIN
				SET @Amount1_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Amount1_CASTED = CAST(@Amount1 AS decimal(18,2))
			END

		UPDATE NMRFundingBank
			SET Amount1 = @Amount1_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @Amount2 <> ''
	BEGIN
		DECLARE @Amount2_CASTED decimal(18,2)
		IF @Amount2 = '^'
			BEGIN
				SET @Amount2_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Amount2_CASTED = CAST(@Amount2 AS decimal(18,2))
			END

		UPDATE NMRFundingBank
			SET Amount2 = @Amount2_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @GatewayPaymentID1 <> ''
	BEGIN
		DECLARE @GatewayPaymentID1_CASTED varchar(25)
		IF @GatewayPaymentID1 = '^'
			BEGIN
				SET @GatewayPaymentID1_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @GatewayPaymentID1_CASTED = CAST(@GatewayPaymentID1 AS varchar(25))
			END

		UPDATE NMRFundingBank
			SET GatewayPaymentID1 = @GatewayPaymentID1_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @GatewayPaymentID2 <> ''
	BEGIN
		DECLARE @GatewayPaymentID2_CASTED varchar(25)
		IF @GatewayPaymentID2 = '^'
			BEGIN
				SET @GatewayPaymentID2_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @GatewayPaymentID2_CASTED = CAST(@GatewayPaymentID2 AS varchar(25))
			END

		UPDATE NMRFundingBank
			SET GatewayPaymentID2 = @GatewayPaymentID2_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @VerificationAttempts <> ''
	BEGIN
		DECLARE @VerificationAttempts_CASTED int
		IF @VerificationAttempts = '^'
			BEGIN
				SET @VerificationAttempts_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @VerificationAttempts_CASTED = CAST(@VerificationAttempts AS int)
			END

		UPDATE NMRFundingBank
			SET VerificationAttempts = @VerificationAttempts_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @VerificationStatus <> ''
	BEGIN
		DECLARE @VerificationStatus_CASTED char(1)
		IF @VerificationStatus = '^'
			BEGIN
				SET @VerificationStatus_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @VerificationStatus_CASTED = CAST(@VerificationStatus AS char(1))
			END

		UPDATE NMRFundingBank
			SET VerificationStatus = @VerificationStatus_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @PSIErrorMessage <> ''
	BEGIN
		DECLARE @PSIErrorMessage_CASTED varchar(255)
		IF @PSIErrorMessage = '^'
			BEGIN
				SET @PSIErrorMessage_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @PSIErrorMessage_CASTED = CAST(@PSIErrorMessage AS varchar(255))
			END

		UPDATE NMRFundingBank
			SET PSIErrorMessage = @PSIErrorMessage_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @ReconciliationUser <> ''
	BEGIN
		DECLARE @ReconciliationUser_CASTED varchar(50)
		IF @ReconciliationUser = '^'
			BEGIN
				SET @ReconciliationUser_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ReconciliationUser_CASTED = CAST(@ReconciliationUser AS varchar(50))
			END

		UPDATE NMRFundingBank
			SET ReconciliationUser = @ReconciliationUser_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @DateTimeCreated <> ''
	BEGIN
		DECLARE @DateTimeCreated_CASTED datetime
		IF @DateTimeCreated = '^'
			BEGIN
				SET @DateTimeCreated_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @DateTimeCreated_CASTED = CAST(@DateTimeCreated AS datetime)
			END

		UPDATE NMRFundingBank
			SET DateTimeCreated = @DateTimeCreated_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @DateTimeVerified <> ''
	BEGIN
		DECLARE @DateTimeVerified_CASTED datetime
		IF @DateTimeVerified = '^'
			BEGIN
				SET @DateTimeVerified_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @DateTimeVerified_CASTED = CAST(@DateTimeVerified AS datetime)
			END

		UPDATE NMRFundingBank
			SET DateTimeVerified = @DateTimeVerified_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @DateTimeVerificationReconciled <> ''
	BEGIN
		DECLARE @DateTimeVerificationReconciled_CASTED datetime
		IF @DateTimeVerificationReconciled = '^'
			BEGIN
				SET @DateTimeVerificationReconciled_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @DateTimeVerificationReconciled_CASTED = CAST(@DateTimeVerificationReconciled AS datetime)
			END

		UPDATE NMRFundingBank
			SET DateTimeVerificationReconciled = @DateTimeVerificationReconciled_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @DateTimeLastReversal <> ''
	BEGIN
		DECLARE @DateTimeLastReversal_CASTED datetime
		IF @DateTimeLastReversal = '^'
			BEGIN
				SET @DateTimeLastReversal_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @DateTimeLastReversal_CASTED = CAST(@DateTimeLastReversal AS datetime)
			END

		UPDATE NMRFundingBank
			SET DateTimeLastReversal = @DateTimeLastReversal_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @DateTimeLastTransaction <> ''
	BEGIN
		DECLARE @DateTimeLastTransaction_CASTED datetime
		IF @DateTimeLastTransaction = '^'
			BEGIN
				SET @DateTimeLastTransaction_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @DateTimeLastTransaction_CASTED = CAST(@DateTimeLastTransaction AS datetime)
			END

		UPDATE NMRFundingBank
			SET DateTimeLastTransaction = @DateTimeLastTransaction_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @DateTimeLastReconciled <> ''
	BEGIN
		DECLARE @DateTimeLastReconciled_CASTED datetime
		IF @DateTimeLastReconciled = '^'
			BEGIN
				SET @DateTimeLastReconciled_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @DateTimeLastReconciled_CASTED = CAST(@DateTimeLastReconciled AS datetime)
			END

		UPDATE NMRFundingBank
			SET DateTimeLastReconciled = @DateTimeLastReconciled_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @DateTimeExported <> ''
	BEGIN
		DECLARE @DateTimeExported_CASTED datetime
		IF @DateTimeExported = '^'
			BEGIN
				SET @DateTimeExported_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @DateTimeExported_CASTED = CAST(@DateTimeExported AS datetime)
			END

		UPDATE NMRFundingBank
			SET DateTimeExported = @DateTimeExported_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @ApprovedLimit <> ''
	BEGIN
		DECLARE @ApprovedLimit_CASTED int
		IF @ApprovedLimit = '^'
			BEGIN
				SET @ApprovedLimit_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ApprovedLimit_CASTED = CAST(@ApprovedLimit AS int)
			END

		UPDATE NMRFundingBank
			SET ApprovedLimit = @ApprovedLimit_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @CBTracking <> ''
	BEGIN
		DECLARE @CBTracking_CASTED int
		IF @CBTracking = '^'
			BEGIN
				SET @CBTracking_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @CBTracking_CASTED = CAST(@CBTracking AS int)
			END

		UPDATE NMRFundingBank
			SET CBTracking = @CBTracking_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @Nickname <> ''
	BEGIN
		DECLARE @Nickname_CASTED varchar(30)
		IF @Nickname = '^'
			BEGIN
				SET @Nickname_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Nickname_CASTED = CAST(@Nickname AS varchar(30))
			END

		UPDATE NMRFundingBank
			SET Nickname = @Nickname_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @MakeAvailable <> ''
	BEGIN
		DECLARE @MakeAvailable_CASTED bit
		IF @MakeAvailable = '^'
			BEGIN
				SET @MakeAvailable_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @MakeAvailable_CASTED = CAST(@MakeAvailable AS bit)
			END

		UPDATE NMRFundingBank
			SET MakeAvailable = @MakeAvailable_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @DebitAmount <> ''
	BEGIN
		DECLARE @DebitAmount_CASTED decimal(18,2)
		IF @DebitAmount = '^'
			BEGIN
				SET @DebitAmount_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @DebitAmount_CASTED = CAST(@DebitAmount AS decimal(18,2))
			END

		UPDATE NMRFundingBank
			SET DebitAmount = @DebitAmount_CASTED
		WHERE 1=1 AND ID = @ID
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_NMRFundingxlate_NMRFundingCard_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_NMRFundingxlate_NMRFundingCard_Delete]
	@ID int
AS

DELETE FROM NMRFundingCard
WHERE 1=1 AND ID = @ID

GO
/****** Object:  StoredProcedure [IMS].[sp_NMRFundingxlate_NMRFundingCard_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_NMRFundingxlate_NMRFundingCard_DeleteAll]
	@FundingID int
AS

DELETE FROM NMRFundingCard
WHERE 1=1 AND FundingID = @FundingID

GO
/****** Object:  StoredProcedure [IMS].[sp_NMRFundingxlate_NMRFundingCard_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_NMRFundingxlate_NMRFundingCard_Insert]
	@ID int OUTPUT,
	@GatewayAccountID int,
	@AuthenticationCode varchar(100),
	@TrackingNum int,
	@AccountNumberLast4 varchar(4),
	@CardType char(1),
	@DateTimeCreated datetime,
	@DateTimeLastReversal datetime,
	@DateTimeLastTransaction datetime,
	@DateTimeLastReconciled datetime,
	@FundingID int
AS

INSERT INTO NMRFundingCard
(FundingID, GatewayAccountID, AuthenticationCode, TrackingNum, AccountNumberLast4, CardType, DateTimeCreated, DateTimeLastReversal, DateTimeLastTransaction, DateTimeLastReconciled)
VALUES
(@FundingID, @GatewayAccountID, @AuthenticationCode, @TrackingNum, @AccountNumberLast4, @CardType, @DateTimeCreated, @DateTimeLastReversal, @DateTimeLastTransaction, @DateTimeLastReconciled)

SELECT @ID = SCOPE_IDENTITY()
GO
/****** Object:  StoredProcedure [IMS].[sp_NMRFundingxlate_NMRFundingCard_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_NMRFundingxlate_NMRFundingCard_InsertIfNew]
	@ID int OUTPUT,
	@GatewayAccountID int,
	@AuthenticationCode varchar(100),
	@TrackingNum int,
	@AccountNumberLast4 varchar(4),
	@CardType char(1),
	@DateTimeCreated datetime,
	@DateTimeLastReversal datetime,
	@DateTimeLastTransaction datetime,
	@DateTimeLastReconciled datetime,
	@FundingID int
AS

DECLARE @Count int
SELECT @Count = COUNT(GatewayAccountID) FROM NMRFundingCard WHERE 1=1 AND FundingID = @FundingID

IF @Count = 0
	BEGIN
		INSERT INTO NMRFundingCard
		(FundingID, GatewayAccountID, AuthenticationCode, TrackingNum, AccountNumberLast4, CardType, DateTimeCreated, DateTimeLastReversal, DateTimeLastTransaction, DateTimeLastReconciled)
		VALUES
		(@FundingID, @GatewayAccountID, @AuthenticationCode, @TrackingNum, @AccountNumberLast4, @CardType, @DateTimeCreated, @DateTimeLastReversal, @DateTimeLastTransaction, @DateTimeLastReconciled)

		SELECT @ID = SCOPE_IDENTITY()
	END
ELSE	BEGIN
		UPDATE NMRFundingCard SET
			GatewayAccountID = @GatewayAccountID,
			AuthenticationCode = @AuthenticationCode,
			TrackingNum = @TrackingNum,
			AccountNumberLast4 = @AccountNumberLast4,
			CardType = @CardType,
			DateTimeCreated = @DateTimeCreated,
			DateTimeLastReversal = @DateTimeLastReversal,
			DateTimeLastTransaction = @DateTimeLastTransaction,
			DateTimeLastReconciled = @DateTimeLastReconciled
		WHERE 1=1 AND FundingID = @FundingID

		SELECT TOP 1 @ID = ID FROM NMRFundingCard
		WHERE 1=1 AND FundingID = @FundingID
		ORDER BY ID DESC
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_NMRFundingxlate_NMRFundingCard_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_NMRFundingxlate_NMRFundingCard_Select]
	@ID int
AS

SELECT * FROM NMRFundingCard
WHERE 1=1 AND ID = @ID

GO
/****** Object:  StoredProcedure [IMS].[sp_NMRFundingxlate_NMRFundingCard_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_NMRFundingxlate_NMRFundingCard_SelectAll]
	@FundingID int
AS

SELECT * FROM NMRFundingCard
WHERE 1=1 AND FundingID = @FundingID

GO
/****** Object:  StoredProcedure [IMS].[sp_NMRFundingxlate_NMRFundingCard_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_NMRFundingxlate_NMRFundingCard_Update]
	@ID int,
	@GatewayAccountID varchar(100),
	@AuthenticationCode varchar(100),
	@TrackingNum varchar(100),
	@AccountNumberLast4 varchar(4),
	@CardType varchar(1),
	@DateTimeCreated varchar(100),
	@DateTimeLastReversal varchar(100),
	@DateTimeLastTransaction varchar(100),
	@DateTimeLastReconciled varchar(100),
	@FundingID varchar(100)
AS

IF @FundingID <> ''
	BEGIN
		DECLARE @FundingID_CASTED int
		IF @FundingID = '^'
			BEGIN
				SET @FundingID_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @FundingID_CASTED = CAST(@FundingID AS int)
			END

		UPDATE NMRFundingCard
			SET FundingID = @FundingID_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @GatewayAccountID <> ''
	BEGIN
		DECLARE @GatewayAccountID_CASTED int
		IF @GatewayAccountID = '^'
			BEGIN
				SET @GatewayAccountID_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @GatewayAccountID_CASTED = CAST(@GatewayAccountID AS int)
			END

		UPDATE NMRFundingCard
			SET GatewayAccountID = @GatewayAccountID_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @AuthenticationCode <> ''
	BEGIN
		DECLARE @AuthenticationCode_CASTED varchar(100)
		IF @AuthenticationCode = '^'
			BEGIN
				SET @AuthenticationCode_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @AuthenticationCode_CASTED = CAST(@AuthenticationCode AS varchar(100))
			END

		UPDATE NMRFundingCard
			SET AuthenticationCode = @AuthenticationCode_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @TrackingNum <> ''
	BEGIN
		DECLARE @TrackingNum_CASTED int
		IF @TrackingNum = '^'
			BEGIN
				SET @TrackingNum_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @TrackingNum_CASTED = CAST(@TrackingNum AS int)
			END

		UPDATE NMRFundingCard
			SET TrackingNum = @TrackingNum_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @AccountNumberLast4 <> ''
	BEGIN
		DECLARE @AccountNumberLast4_CASTED varchar(4)
		IF @AccountNumberLast4 = '^'
			BEGIN
				SET @AccountNumberLast4_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @AccountNumberLast4_CASTED = CAST(@AccountNumberLast4 AS varchar(4))
			END

		UPDATE NMRFundingCard
			SET AccountNumberLast4 = @AccountNumberLast4_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @CardType <> ''
	BEGIN
		DECLARE @CardType_CASTED char(1)
		IF @CardType = '^'
			BEGIN
				SET @CardType_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @CardType_CASTED = CAST(@CardType AS char(1))
			END

		UPDATE NMRFundingCard
			SET CardType = @CardType_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @DateTimeCreated <> ''
	BEGIN
		DECLARE @DateTimeCreated_CASTED datetime
		IF @DateTimeCreated = '^'
			BEGIN
				SET @DateTimeCreated_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @DateTimeCreated_CASTED = CAST(@DateTimeCreated AS datetime)
			END

		UPDATE NMRFundingCard
			SET DateTimeCreated = @DateTimeCreated_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @DateTimeLastReversal <> ''
	BEGIN
		DECLARE @DateTimeLastReversal_CASTED datetime
		IF @DateTimeLastReversal = '^'
			BEGIN
				SET @DateTimeLastReversal_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @DateTimeLastReversal_CASTED = CAST(@DateTimeLastReversal AS datetime)
			END

		UPDATE NMRFundingCard
			SET DateTimeLastReversal = @DateTimeLastReversal_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @DateTimeLastTransaction <> ''
	BEGIN
		DECLARE @DateTimeLastTransaction_CASTED datetime
		IF @DateTimeLastTransaction = '^'
			BEGIN
				SET @DateTimeLastTransaction_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @DateTimeLastTransaction_CASTED = CAST(@DateTimeLastTransaction AS datetime)
			END

		UPDATE NMRFundingCard
			SET DateTimeLastTransaction = @DateTimeLastTransaction_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @DateTimeLastReconciled <> ''
	BEGIN
		DECLARE @DateTimeLastReconciled_CASTED datetime
		IF @DateTimeLastReconciled = '^'
			BEGIN
				SET @DateTimeLastReconciled_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @DateTimeLastReconciled_CASTED = CAST(@DateTimeLastReconciled AS datetime)
			END

		UPDATE NMRFundingCard
			SET DateTimeLastReconciled = @DateTimeLastReconciled_CASTED
		WHERE 1=1 AND ID = @ID
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_NMRFundingxlate_NMRFundingTransaction_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_NMRFundingxlate_NMRFundingTransaction_Delete]
	@ID int
AS

DELETE FROM NMRFundingTransaction
WHERE 1=1 AND ID = @ID

GO
/****** Object:  StoredProcedure [IMS].[sp_NMRFundingxlate_NMRFundingTransaction_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_NMRFundingxlate_NMRFundingTransaction_DeleteAll]
	@FundingBankID int,
	@FundingCardID int,
	@SourceSubAccountSeq int,
	@FundingType char(1),
	@TrackingNum int,
	@GatewayPaymentID varchar(25)
AS

DELETE FROM NMRFundingTransaction
WHERE 1=1 AND FundingBankID = @FundingBankID AND FundingCardID = @FundingCardID AND SourceSubAccountSeq = @SourceSubAccountSeq AND FundingType = @FundingType AND TrackingNum = @TrackingNum AND GatewayPaymentID = @GatewayPaymentID

GO
/****** Object:  StoredProcedure [IMS].[sp_NMRFundingxlate_NMRFundingTransaction_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_NMRFundingxlate_NMRFundingTransaction_Insert]
	@ID int OUTPUT,
	@FundingBankID int,
	@FundingCardID int,
	@SourceSubAccountSeq int,
	@TargetSubAccountSuffix varchar(50),
	@FundingType char(1),
	@TrackingNum int,
	@GatewayPaymentID varchar(25),
	@TargetSubAccountSeq int,
	@Amount decimal(18,2),
	@DateTimeCreated datetime,
	@DateTimeLastTransaction datetime,
	@DateTimeLastReversal datetime,
	@DateTimeReconciled datetime,
	@ReconciliationUser varchar(50),
	@DateTimeExported datetime,
	@TransactionState varchar(20)
AS

INSERT INTO NMRFundingTransaction
(FundingBankID, FundingCardID, SourceSubAccountSeq, FundingType, TrackingNum, GatewayPaymentID, TargetSubAccountSuffix, TargetSubAccountSeq, Amount, DateTimeCreated, DateTimeLastTransaction, DateTimeLastReversal, DateTimeReconciled, ReconciliationUser, DateTimeExported, TransactionState)
VALUES
(@FundingBankID, @FundingCardID, @SourceSubAccountSeq, @FundingType, @TrackingNum, @GatewayPaymentID, @TargetSubAccountSuffix, @TargetSubAccountSeq, @Amount, @DateTimeCreated, @DateTimeLastTransaction, @DateTimeLastReversal, @DateTimeReconciled, @ReconciliationUser, @DateTimeExported, @TransactionState)

SELECT @ID = SCOPE_IDENTITY()

GO
/****** Object:  StoredProcedure [IMS].[sp_NMRFundingxlate_NMRFundingTransaction_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_NMRFundingxlate_NMRFundingTransaction_InsertIfNew]
	@ID int OUTPUT,
	@FundingBankID int,
	@FundingCardID int,
	@SourceSubAccountSeq int,
	@TargetSubAccountSuffix varchar(50),
	@FundingType char(1),
	@TrackingNum int,
	@GatewayPaymentID varchar(25),
	@TargetSubAccountSeq int,
	@Amount decimal(18,2),
	@DateTimeCreated datetime,
	@DateTimeLastTransaction datetime,
	@DateTimeLastReversal datetime,
	@DateTimeReconciled datetime,
	@ReconciliationUser varchar(50),
	@DateTimeExported datetime,
	@TransactionState varchar(20)
AS

DECLARE @Count int
SELECT @Count = COUNT(TargetSubAccountSuffix) FROM NMRFundingTransaction WHERE 1=1 AND FundingBankID = @FundingBankID AND FundingCardID = @FundingCardID AND SourceSubAccountSeq = @SourceSubAccountSeq AND FundingType = @FundingType AND TrackingNum = @TrackingNum AND GatewayPaymentID = @GatewayPaymentID

IF @Count = 0
	BEGIN
		INSERT INTO NMRFundingTransaction
		(FundingBankID, FundingCardID, SourceSubAccountSeq, FundingType, TrackingNum, GatewayPaymentID, TargetSubAccountSuffix, TargetSubAccountSeq, Amount, DateTimeCreated, DateTimeLastTransaction, DateTimeLastReversal, DateTimeReconciled, ReconciliationUser, DateTimeExported, TransactionState)
		VALUES
		(@FundingBankID, @FundingCardID, @SourceSubAccountSeq, @FundingType, @TrackingNum, @GatewayPaymentID, @TargetSubAccountSuffix, @TargetSubAccountSeq, @Amount, @DateTimeCreated, @DateTimeLastTransaction, @DateTimeLastReversal, @DateTimeReconciled, @ReconciliationUser, @DateTimeExported, @TransactionState)

		SELECT @ID = SCOPE_IDENTITY()
	END
ELSE	BEGIN
		UPDATE NMRFundingTransaction SET
			TargetSubAccountSuffix = @TargetSubAccountSuffix,
			TargetSubAccountSeq = @TargetSubAccountSeq,
			Amount = @Amount,
			DateTimeCreated = @DateTimeCreated,
			DateTimeLastTransaction = @DateTimeLastTransaction,
			DateTimeLastReversal = @DateTimeLastReversal,
			DateTimeReconciled = @DateTimeReconciled,
			ReconciliationUser = @ReconciliationUser,
			DateTimeExported = @DateTimeExported,
			TransactionState = @TransactionState
		WHERE 1=1 AND FundingBankID = @FundingBankID AND FundingCardID = @FundingCardID AND SourceSubAccountSeq = @SourceSubAccountSeq AND FundingType = @FundingType AND TrackingNum = @TrackingNum AND GatewayPaymentID = @GatewayPaymentID

		SELECT TOP 1 @ID = ID FROM NMRFundingTransaction
		WHERE 1=1 AND FundingBankID = @FundingBankID AND FundingCardID = @FundingCardID AND SourceSubAccountSeq = @SourceSubAccountSeq AND FundingType = @FundingType AND TrackingNum = @TrackingNum AND GatewayPaymentID = @GatewayPaymentID
		ORDER BY ID DESC
	END
GO
/****** Object:  StoredProcedure [IMS].[sp_NMRFundingxlate_NMRFundingTransaction_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_NMRFundingxlate_NMRFundingTransaction_Select]
	@ID int
AS

SELECT * FROM NMRFundingTransaction
WHERE 1=1 AND ID = @ID

GO
/****** Object:  StoredProcedure [IMS].[sp_NMRFundingxlate_NMRFundingTransaction_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_NMRFundingxlate_NMRFundingTransaction_SelectAll]
	@FundingBankID int,
	@FundingCardID int,
	@SourceSubAccountSeq int,
	@FundingType char(1),
	@TrackingNum int,
	@GatewayPaymentID varchar(25)
AS

EXEC sp_NMRFundingTransaction_SelectAll @FundingBankID, @FundingCardID, @SourceSubAccountSeq, @FundingType, @TrackingNum, @GatewayPaymentID

GO
/****** Object:  StoredProcedure [IMS].[sp_NMRFundingxlate_NMRFundingTransaction_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_NMRFundingxlate_NMRFundingTransaction_Update]
	@ID int,
	@FundingBankID varchar(100),
	@FundingCardID varchar(100),
	@SourceSubAccountSeq varchar(100),
	@TargetSubAccountSuffix varchar(50),
	@FundingType varchar(1),
	@TrackingNum varchar(100),
	@GatewayPaymentID varchar(25),
	@TargetSubAccountSeq varchar(100),
	@Amount varchar(100),
	@DateTimeCreated varchar(100),
	@DateTimeLastTransaction varchar(100),
	@DateTimeLastReversal varchar(100),
	@DateTimeReconciled varchar(100),
	@ReconciliationUser varchar(50),
	@DateTimeExported varchar(100),
	@TransactionState varchar(20)
AS

IF @FundingBankID <> ''
	BEGIN
		DECLARE @FundingBankID_CASTED int
		IF @FundingBankID = '^'
			BEGIN
				SET @FundingBankID_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @FundingBankID_CASTED = CAST(@FundingBankID AS int)
			END

		UPDATE NMRFundingTransaction
			SET FundingBankID = @FundingBankID_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @FundingCardID <> ''
	BEGIN
		DECLARE @FundingCardID_CASTED int
		IF @FundingCardID = '^'
			BEGIN
				SET @FundingCardID_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @FundingCardID_CASTED = CAST(@FundingCardID AS int)
			END

		UPDATE NMRFundingTransaction
			SET FundingCardID = @FundingCardID_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @SourceSubAccountSeq <> ''
	BEGIN
		DECLARE @SourceSubAccountSeq_CASTED int
		IF @SourceSubAccountSeq = '^'
			BEGIN
				SET @SourceSubAccountSeq_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @SourceSubAccountSeq_CASTED = CAST(@SourceSubAccountSeq AS int)
			END

		UPDATE NMRFundingTransaction
			SET SourceSubAccountSeq = @SourceSubAccountSeq_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @FundingType <> ''
	BEGIN
		DECLARE @FundingType_CASTED char(1)
		IF @FundingType = '^'
			BEGIN
				SET @FundingType_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @FundingType_CASTED = CAST(@FundingType AS char(1))
			END

		UPDATE NMRFundingTransaction
			SET FundingType = @FundingType_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @TrackingNum <> ''
	BEGIN
		DECLARE @TrackingNum_CASTED int
		IF @TrackingNum = '^'
			BEGIN
				SET @TrackingNum_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @TrackingNum_CASTED = CAST(@TrackingNum AS int)
			END

		UPDATE NMRFundingTransaction
			SET TrackingNum = @TrackingNum_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @GatewayPaymentID <> ''
	BEGIN
		DECLARE @GatewayPaymentID_CASTED varchar(25)
		IF @GatewayPaymentID = '^'
			BEGIN
				SET @GatewayPaymentID_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @GatewayPaymentID_CASTED = CAST(@GatewayPaymentID AS varchar(25))
			END

		UPDATE NMRFundingTransaction
			SET GatewayPaymentID = @GatewayPaymentID_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @TargetSubAccountSuffix <> ''
	BEGIN
		DECLARE @TargetSubAccountSuffix_CASTED varchar(50)
		IF @TargetSubAccountSuffix = '^'
			BEGIN
				SET @TargetSubAccountSuffix_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @TargetSubAccountSuffix_CASTED = CAST(@TargetSubAccountSuffix AS varchar(50))
			END

		UPDATE NMRFundingTransaction
			SET TargetSubAccountSuffix = @TargetSubAccountSuffix_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @TargetSubAccountSeq <> ''
	BEGIN
		DECLARE @TargetSubAccountSeq_CASTED int
		IF @TargetSubAccountSeq = '^'
			BEGIN
				SET @TargetSubAccountSeq_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @TargetSubAccountSeq_CASTED = CAST(@TargetSubAccountSeq AS int)
			END

		UPDATE NMRFundingTransaction
			SET TargetSubAccountSeq = @TargetSubAccountSeq_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @Amount <> ''
	BEGIN
		DECLARE @Amount_CASTED decimal(18,2)
		IF @Amount = '^'
			BEGIN
				SET @Amount_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Amount_CASTED = CAST(@Amount AS decimal(18,2))
			END

		UPDATE NMRFundingTransaction
			SET Amount = @Amount_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @DateTimeCreated <> ''
	BEGIN
		DECLARE @DateTimeCreated_CASTED datetime
		IF @DateTimeCreated = '^'
			BEGIN
				SET @DateTimeCreated_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @DateTimeCreated_CASTED = CAST(@DateTimeCreated AS datetime)
			END

		UPDATE NMRFundingTransaction
			SET DateTimeCreated = @DateTimeCreated_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @DateTimeLastTransaction <> ''
	BEGIN
		DECLARE @DateTimeLastTransaction_CASTED datetime
		IF @DateTimeLastTransaction = '^'
			BEGIN
				SET @DateTimeLastTransaction_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @DateTimeLastTransaction_CASTED = CAST(@DateTimeLastTransaction AS datetime)
			END

		UPDATE NMRFundingTransaction
			SET DateTimeLastTransaction = @DateTimeLastTransaction_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @DateTimeLastReversal <> ''
	BEGIN
		DECLARE @DateTimeLastReversal_CASTED datetime
		IF @DateTimeLastReversal = '^'
			BEGIN
				SET @DateTimeLastReversal_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @DateTimeLastReversal_CASTED = CAST(@DateTimeLastReversal AS datetime)
			END

		UPDATE NMRFundingTransaction
			SET DateTimeLastReversal = @DateTimeLastReversal_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @DateTimeReconciled <> ''
	BEGIN
		DECLARE @DateTimeReconciled_CASTED datetime
		IF @DateTimeReconciled = '^'
			BEGIN
				SET @DateTimeReconciled_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @DateTimeReconciled_CASTED = CAST(@DateTimeReconciled AS datetime)
			END

		UPDATE NMRFundingTransaction
			SET DateTimeReconciled = @DateTimeReconciled_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @ReconciliationUser <> ''
	BEGIN
		DECLARE @ReconciliationUser_CASTED varchar(50)
		IF @ReconciliationUser = '^'
			BEGIN
				SET @ReconciliationUser_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ReconciliationUser_CASTED = CAST(@ReconciliationUser AS varchar(50))
			END

		UPDATE NMRFundingTransaction
			SET ReconciliationUser = @ReconciliationUser_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @DateTimeExported <> ''
	BEGIN
		DECLARE @DateTimeExported_CASTED datetime
		IF @DateTimeExported = '^'
			BEGIN
				SET @DateTimeExported_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @DateTimeExported_CASTED = CAST(@DateTimeExported AS datetime)
			END

		UPDATE NMRFundingTransaction
			SET DateTimeExported = @DateTimeExported_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @TransactionState <> ''
	BEGIN
		DECLARE @TransactionState_CASTED varchar(20)
		IF @TransactionState = '^'
			BEGIN
				SET @TransactionState_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @TransactionState_CASTED = CAST(@TransactionState AS varchar(20))
			END

		UPDATE NMRFundingTransaction
			SET TransactionState = @TransactionState_CASTED
		WHERE 1=1 AND ID = @ID
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_NMRFundingxlate_UnreconciledFunding_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_NMRFundingxlate_UnreconciledFunding_Select]
	@AccountNumber bigint
AS

EXEC sp_UnreconciledFunding_Select @AccountNumber

GO
/****** Object:  StoredProcedure [IMS].[sp_NMRFundingxlate_UnreconciledVerification_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_NMRFundingxlate_UnreconciledVerification_Select]
	@AccountNumber bigint
AS

EXEC sp_UnreconciledVerification_Select @AccountNumber

GO
/****** Object:  StoredProcedure [IMS].[sp_NMRFundingxlate_VerifiedFundingSource_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_NMRFundingxlate_VerifiedFundingSource_SelectAll]
	@AccountNumber bigint,
	@TrackingNum int
AS

EXEC sp_VerifiedFundingSource_SelectAll @AccountNumber, @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_NMRxlate_Home_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_NMRxlate_Home_Delete]
	@TrackingNum int
AS

DELETE FROM NewMemberHome
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_NMRxlate_Home_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_NMRxlate_Home_DeleteAll]
	@TrackingNum int
AS

DELETE FROM NewMemberHome
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_NMRxlate_Home_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_NMRxlate_Home_Insert]
	@Address1 char(50),
	@Address2 char(30),
	@Address3 char(30),
	@City char(40),
	@State char(2),
	@Zip char(9),
	@CntryCode char(2),
	@CntryName char(40),
	@Latitude char(20),
	@Longitude char(20),
	@Block char(15),
	@CensusTract char(11),
	@AreaCode char(3),
	@Phone char(8),
	@Ext char(5),
	@CellPhoneAC char(3),
	@CellPhone char(7),
	@FaxPhoneAC char(3),
	@FaxPhone char(7),
	@PagerPhoneAC char(3),
	@PagerPhone char(7),
	@ResidenceYears char(2),
	@ResidenceMonths char(2),
	@ApartmentNumber char(10),
	@TrackingNum int
AS

EXEC sp_NMRxlate_Home_InsertIfNew_Expanded @TrackingNum, @Address1, @Address2, @Address3, @City, @State, @Zip, @CntryCode, @CntryName, @Latitude, @Longitude, @Block, @CensusTract, @AreaCode, @Phone, @Ext, @CellPhoneAC, @CellPhone, @FaxPhoneAC, @FaxPhone, @PagerPhoneAC, @PagerPhone, @ResidenceYears, @ResidenceMonths, @ApartmentNumber

GO
/****** Object:  StoredProcedure [IMS].[sp_NMRxlate_Home_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_NMRxlate_Home_InsertIfNew]
	@Address1 char(50),
	@Address2 char(30),
	@Address3 char(30),
	@City char(40),
	@State char(2),
	@Zip char(9),
	@CntryCode char(2),
	@CntryName char(40),
	@Latitude char(20),
	@Longitude char(20),
	@Block char(15),
	@CensusTract char(11),
	@AreaCode char(3),
	@Phone char(8),
	@Ext char(5),
	@CellPhoneAC char(3),
	@CellPhone char(7),
	@FaxPhoneAC char(3),
	@FaxPhone char(7),
	@PagerPhoneAC char(3),
	@PagerPhone char(7),
	@ResidenceYears char(2),
	@ResidenceMonths char(2),
	@ApartmentNumber char(10),
	@TrackingNum int
AS

IF NOT EXISTS (SELECT * FROM NewMemberHome WHERE 1=1 AND TrackingNum = @TrackingNum)
	BEGIN
		INSERT INTO NewMemberHome
		(TrackingNum, Address1, Address2, Address3, City, State, Zip, CntryCode, CntryName, Latitude, Longitude, Block, CensusTract, AreaCode, Phone, Ext, CellPhoneAC, CellPhone, FaxPhoneAC, FaxPhone, PagerPhoneAC, PagerPhone, ResidenceYears, ResidenceMonths, ApartmentNumber)
		VALUES
		(@TrackingNum, @Address1, @Address2, @Address3, @City, @State, @Zip, @CntryCode, @CntryName, @Latitude, @Longitude, @Block, @CensusTract, @AreaCode, @Phone, @Ext, @CellPhoneAC, @CellPhone, @FaxPhoneAC, @FaxPhone, @PagerPhoneAC, @PagerPhone, @ResidenceYears, @ResidenceMonths, @ApartmentNumber)
	END
ELSE	BEGIN
		UPDATE NewMemberHome SET
			Address1 = @Address1,
			Address2 = @Address2,
			Address3 = @Address3,
			City = @City,
			State = @State,
			Zip = @Zip,
			CntryCode = @CntryCode,
			CntryName = @CntryName,
			Latitude = @Latitude,
			Longitude = @Longitude,
			Block = @Block,
			CensusTract = @CensusTract,
			AreaCode = @AreaCode,
			Phone = @Phone,
			Ext = @Ext,
			CellPhoneAC = @CellPhoneAC,
			CellPhone = @CellPhone,
			FaxPhoneAC = @FaxPhoneAC,
			FaxPhone = @FaxPhone,
			PagerPhoneAC = @PagerPhoneAC,
			PagerPhone = @PagerPhone,
			ResidenceYears = @ResidenceYears,
			ResidenceMonths = @ResidenceMonths,
			ApartmentNumber = @ApartmentNumber
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_NMRxlate_Home_InsertIfNew_Expanded]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_NMRxlate_Home_InsertIfNew_Expanded]
	@TrackingNum int,
	@Address1 char(50),
	@Address2 char(30),
	@Address3 char(30),
	@City char(40),
	@State char(2),
	@Zip char(9),
	@CntryCode char(2),
	@CntryName char(40),
	@Latitude char(20),
	@Longitude char(20),
	@Block char(15),
	@CensusTract char(11),
	@AreaCode char(3),
	@Phone char(8),
	@Ext char(5),
	@CellPhoneAC char(3),
	@CellPhone char(7),
	@FaxPhoneAC char(3),
	@FaxPhone char(7),
	@PagerPhoneAC char(3),
	@PagerPhone char(7),
	@ResidenceYears char(2),
	@ResidenceMonths char(2),
	@ApartmentNumber char(10)
AS

DECLARE @Count int
SELECT @Count = COUNT(TrackingNum) FROM NewMemberHome WHERE 1=1 AND TrackingNum = @TrackingNum

IF @Count = 0
	BEGIN
		INSERT INTO NewMemberHome
		(TrackingNum, Address1, Address2, Address3, City, State, Zip, CntryCode, CntryName, Latitude, Longitude, Block, CensusTract, AreaCode, Phone, Ext, CellPhoneAC, CellPhone, FaxPhoneAC, FaxPhone, PagerPhoneAC, PagerPhone, ResidenceYears, ResidenceMonths, ApartmentNumber)
		VALUES
		(@TrackingNum, @Address1, @Address2, @Address3, @City, @State, @Zip, @CntryCode, @CntryName, @Latitude, @Longitude, @Block, @CensusTract, @AreaCode, @Phone, @Ext, @CellPhoneAC, @CellPhone, @FaxPhoneAC, @FaxPhone, @PagerPhoneAC, @PagerPhone, @ResidenceYears, @ResidenceMonths, @ApartmentNumber)
	END
ELSE
	BEGIN
		EXEC IMS.sp_NMRxlate_Home_Update
			@Address1,
			@Address2,
			@Address3,
			@City,
			@State,
			@Zip,
			@CntryCode,
			@CntryName,
			@Latitude,
			@Longitude,
			@Block,
			@CensusTract,
			@AreaCode,
			@Phone,
			@Ext,
			@CellPhoneAC,
			@CellPhone,
			@FaxPhoneAC,
			@FaxPhone,
			@PagerPhoneAC,
			@PagerPhone,
			@ResidenceYears,
			@ResidenceMonths,
			@ApartmentNumber,
			@TrackingNum
	END
GO
/****** Object:  StoredProcedure [IMS].[sp_NMRxlate_Home_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_NMRxlate_Home_Select]
	@TrackingNum int
AS

SELECT * FROM NewMemberHome
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_NMRxlate_Home_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_NMRxlate_Home_SelectAll]
	@TrackingNum int
AS

SELECT * FROM NewMemberHome
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_NMRxlate_Home_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_NMRxlate_Home_Update]
	@Address1 varchar(50),
	@Address2 varchar(30),
	@Address3 varchar(30),
	@City varchar(40),
	@State varchar(2),
	@Zip varchar(9),
	@CntryCode varchar(2),
	@CntryName varchar(40),
	@Latitude varchar(20),
	@Longitude varchar(20),
	@Block varchar(15),
	@CensusTract varchar(11),
	@AreaCode varchar(3),
	@Phone varchar(8),
	@Ext varchar(5),
	@CellPhoneAC varchar(3),
	@CellPhone varchar(7),
	@FaxPhoneAC varchar(3),
	@FaxPhone varchar(7),
	@PagerPhoneAC varchar(3),
	@PagerPhone varchar(7),
	@ResidenceYears varchar(2),
	@ResidenceMonths varchar(2),
	@ApartmentNumber varchar(10),
	@TrackingNum int
AS

IF @Address1 <> ''
	BEGIN
		DECLARE @Address1_CASTED char(50)
		IF @Address1 = '^'
			BEGIN
				SET @Address1_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Address1_CASTED = CAST(@Address1 AS char(50))
			END

		UPDATE NewMemberHome
			SET Address1 = @Address1_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @Address2 <> ''
	BEGIN
		DECLARE @Address2_CASTED char(30)
		IF @Address2 = '^'
			BEGIN
				SET @Address2_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Address2_CASTED = CAST(@Address2 AS char(30))
			END

		UPDATE NewMemberHome
			SET Address2 = @Address2_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @Address3 <> ''
	BEGIN
		DECLARE @Address3_CASTED char(30)
		IF @Address3 = '^'
			BEGIN
				SET @Address3_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Address3_CASTED = CAST(@Address3 AS char(30))
			END

		UPDATE NewMemberHome
			SET Address3 = @Address3_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @City <> ''
	BEGIN
		DECLARE @City_CASTED char(40)
		IF @City = '^'
			BEGIN
				SET @City_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @City_CASTED = CAST(@City AS char(40))
			END

		UPDATE NewMemberHome
			SET City = @City_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @State <> ''
	BEGIN
		DECLARE @State_CASTED char(2)
		IF @State = '^'
			BEGIN
				SET @State_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @State_CASTED = CAST(@State AS char(2))
			END

		UPDATE NewMemberHome
			SET State = @State_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @Zip <> ''
	BEGIN
		DECLARE @Zip_CASTED char(9)
		IF @Zip = '^'
			BEGIN
				SET @Zip_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Zip_CASTED = CAST(@Zip AS char(9))
			END

		UPDATE NewMemberHome
			SET Zip = @Zip_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @CntryCode <> ''
	BEGIN
		DECLARE @CntryCode_CASTED char(2)
		IF @CntryCode = '^'
			BEGIN
				SET @CntryCode_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @CntryCode_CASTED = CAST(@CntryCode AS char(2))
			END

		UPDATE NewMemberHome
			SET CntryCode = @CntryCode_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @CntryName <> ''
	BEGIN
		DECLARE @CntryName_CASTED char(40)
		IF @CntryName = '^'
			BEGIN
				SET @CntryName_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @CntryName_CASTED = CAST(@CntryName AS char(40))
			END

		UPDATE NewMemberHome
			SET CntryName = @CntryName_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @Latitude <> ''
	BEGIN
		DECLARE @Latitude_CASTED char(20)
		IF @Latitude = '^'
			BEGIN
				SET @Latitude_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Latitude_CASTED = CAST(@Latitude AS char(20))
			END

		UPDATE NewMemberHome
			SET Latitude = @Latitude_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @Longitude <> ''
	BEGIN
		DECLARE @Longitude_CASTED char(20)
		IF @Longitude = '^'
			BEGIN
				SET @Longitude_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Longitude_CASTED = CAST(@Longitude AS char(20))
			END

		UPDATE NewMemberHome
			SET Longitude = @Longitude_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @Block <> ''
	BEGIN
		DECLARE @Block_CASTED char(15)
		IF @Block = '^'
			BEGIN
				SET @Block_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Block_CASTED = CAST(@Block AS char(15))
			END

		UPDATE NewMemberHome
			SET Block = @Block_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @CensusTract <> ''
	BEGIN
		DECLARE @CensusTract_CASTED char(11)
		IF @CensusTract = '^'
			BEGIN
				SET @CensusTract_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @CensusTract_CASTED = CAST(@CensusTract AS char(11))
			END

		UPDATE NewMemberHome
			SET CensusTract = @CensusTract_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @AreaCode <> ''
	BEGIN
		DECLARE @AreaCode_CASTED char(3)
		IF @AreaCode = '^'
			BEGIN
				SET @AreaCode_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @AreaCode_CASTED = CAST(@AreaCode AS char(3))
			END

		UPDATE NewMemberHome
			SET AreaCode = @AreaCode_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @Phone <> ''
	BEGIN
		DECLARE @Phone_CASTED char(8)
		IF @Phone = '^'
			BEGIN
				SET @Phone_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Phone_CASTED = CAST(@Phone AS char(8))
			END

		UPDATE NewMemberHome
			SET Phone = @Phone_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @Ext <> ''
	BEGIN
		DECLARE @Ext_CASTED char(5)
		IF @Ext = '^'
			BEGIN
				SET @Ext_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Ext_CASTED = CAST(@Ext AS char(5))
			END

		UPDATE NewMemberHome
			SET Ext = @Ext_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @CellPhoneAC <> ''
	BEGIN
		DECLARE @CellPhoneAC_CASTED char(3)
		IF @CellPhoneAC = '^'
			BEGIN
				SET @CellPhoneAC_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @CellPhoneAC_CASTED = CAST(@CellPhoneAC AS char(3))
			END

		UPDATE NewMemberHome
			SET CellPhoneAC = @CellPhoneAC_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @CellPhone <> ''
	BEGIN
		DECLARE @CellPhone_CASTED char(7)
		IF @CellPhone = '^'
			BEGIN
				SET @CellPhone_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @CellPhone_CASTED = CAST(@CellPhone AS char(7))
			END

		UPDATE NewMemberHome
			SET CellPhone = @CellPhone_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @FaxPhoneAC <> ''
	BEGIN
		DECLARE @FaxPhoneAC_CASTED char(3)
		IF @FaxPhoneAC = '^'
			BEGIN
				SET @FaxPhoneAC_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @FaxPhoneAC_CASTED = CAST(@FaxPhoneAC AS char(3))
			END

		UPDATE NewMemberHome
			SET FaxPhoneAC = @FaxPhoneAC_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @FaxPhone <> ''
	BEGIN
		DECLARE @FaxPhone_CASTED char(7)
		IF @FaxPhone = '^'
			BEGIN
				SET @FaxPhone_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @FaxPhone_CASTED = CAST(@FaxPhone AS char(7))
			END

		UPDATE NewMemberHome
			SET FaxPhone = @FaxPhone_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @PagerPhoneAC <> ''
	BEGIN
		DECLARE @PagerPhoneAC_CASTED char(3)
		IF @PagerPhoneAC = '^'
			BEGIN
				SET @PagerPhoneAC_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @PagerPhoneAC_CASTED = CAST(@PagerPhoneAC AS char(3))
			END

		UPDATE NewMemberHome
			SET PagerPhoneAC = @PagerPhoneAC_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @PagerPhone <> ''
	BEGIN
		DECLARE @PagerPhone_CASTED char(7)
		IF @PagerPhone = '^'
			BEGIN
				SET @PagerPhone_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @PagerPhone_CASTED = CAST(@PagerPhone AS char(7))
			END

		UPDATE NewMemberHome
			SET PagerPhone = @PagerPhone_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @ResidenceYears <> ''
	BEGIN
		DECLARE @ResidenceYears_CASTED char(2)
		IF @ResidenceYears = '^'
			BEGIN
				SET @ResidenceYears_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ResidenceYears_CASTED = CAST(@ResidenceYears AS char(2))
			END

		UPDATE NewMemberHome
			SET ResidenceYears = @ResidenceYears_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @ResidenceMonths <> ''
	BEGIN
		DECLARE @ResidenceMonths_CASTED char(2)
		IF @ResidenceMonths = '^'
			BEGIN
				SET @ResidenceMonths_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ResidenceMonths_CASTED = CAST(@ResidenceMonths AS char(2))
			END

		UPDATE NewMemberHome
			SET ResidenceMonths = @ResidenceMonths_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @ApartmentNumber <> ''
	BEGIN
		DECLARE @ApartmentNumber_CASTED char(10)
		IF @ApartmentNumber = '^'
			BEGIN
				SET @ApartmentNumber_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ApartmentNumber_CASTED = CAST(@ApartmentNumber AS char(10))
			END

		UPDATE NewMemberHome
			SET ApartmentNumber = @ApartmentNumber_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_NMRxlate_LoginAttempt_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_NMRxlate_LoginAttempt_Delete]
	@AccountNumber int
AS

DELETE FROM LoginAttempt
WHERE 1=1 AND AccountNumber = @AccountNumber

GO
/****** Object:  StoredProcedure [IMS].[sp_NMRxlate_LoginAttempt_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_NMRxlate_LoginAttempt_DeleteAll]
	@AccountNumber int
AS

DELETE FROM LoginAttempt
WHERE 1=1 AND AccountNumber = @AccountNumber

GO
/****** Object:  StoredProcedure [IMS].[sp_NMRxlate_LoginAttempt_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_NMRxlate_LoginAttempt_Insert]
	@AccountNumber int,
	@FailedAttemptCount int,
	@LastAttemptDate datetime
AS

INSERT INTO LoginAttempt
(AccountNumber, FailedAttemptCount, LastAttemptDate)
VALUES
(@AccountNumber, @FailedAttemptCount, @LastAttemptDate)

GO
/****** Object:  StoredProcedure [IMS].[sp_NMRxlate_LoginAttempt_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_NMRxlate_LoginAttempt_InsertIfNew]
	@AccountNumber int,
	@FailedAttemptCount int,
	@LastAttemptDate datetime
AS

DECLARE @Count int
SELECT @Count = COUNT(IsNull(FailedAttemptCount, 0)) FROM LoginAttempt WHERE 1=1 AND AccountNumber = @AccountNumber

IF @Count = 0
	BEGIN
		INSERT INTO LoginAttempt
		(AccountNumber, FailedAttemptCount, LastAttemptDate)
		VALUES
		(@AccountNumber, @FailedAttemptCount, @LastAttemptDate)
	END
ELSE	BEGIN
		UPDATE LoginAttempt SET
			FailedAttemptCount = @FailedAttemptCount,
			LastAttemptDate = @LastAttemptDate
		WHERE 1=1 AND AccountNumber = @AccountNumber
	END
GO
/****** Object:  StoredProcedure [IMS].[sp_NMRxlate_LoginAttempt_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_NMRxlate_LoginAttempt_Select]
	@AccountNumber int
AS

SELECT * FROM LoginAttempt
WHERE 1=1 AND AccountNumber = @AccountNumber

GO
/****** Object:  StoredProcedure [IMS].[sp_NMRxlate_LoginAttempt_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_NMRxlate_LoginAttempt_SelectAll]
	@AccountNumber int
AS

SELECT * FROM LoginAttempt
WHERE 1=1 AND AccountNumber = @AccountNumber

GO
/****** Object:  StoredProcedure [IMS].[sp_NMRxlate_LoginAttempt_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_NMRxlate_LoginAttempt_Update]
	@AccountNumber int,
	@FailedAttemptCount varchar(100),
	@LastAttemptDate varchar(100)
AS

IF @FailedAttemptCount <> ''
	BEGIN
		DECLARE @FailedAttemptCount_CASTED int
		IF @FailedAttemptCount = '^'
			BEGIN
				SET @FailedAttemptCount_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @FailedAttemptCount_CASTED = CAST(@FailedAttemptCount AS int)
			END

		UPDATE LoginAttempt
			SET FailedAttemptCount = @FailedAttemptCount_CASTED
		WHERE 1=1 AND AccountNumber = @AccountNumber
	END

IF @LastAttemptDate <> ''
	BEGIN
		DECLARE @LastAttemptDate_CASTED datetime
		IF @LastAttemptDate = '^'
			BEGIN
				SET @LastAttemptDate_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @LastAttemptDate_CASTED = CAST(@LastAttemptDate AS datetime)
			END

		UPDATE LoginAttempt
			SET LastAttemptDate = @LastAttemptDate_CASTED
		WHERE 1=1 AND AccountNumber = @AccountNumber
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_NMRxlate_Reference_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_NMRxlate_Reference_Delete]
	@ID int
AS

DELETE FROM NewMemberReference
WHERE 1=1 AND ID = @ID

GO
/****** Object:  StoredProcedure [IMS].[sp_NMRxlate_Reference_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_NMRxlate_Reference_DeleteAll]
	@ReferenceType varchar(10),
	@TrackingNum int
AS

DELETE FROM NewMemberReference
WHERE 1=1 AND ReferenceType = @ReferenceType AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_NMRxlate_Reference_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_NMRxlate_Reference_Insert]
	@ID int OUTPUT,
	@ReferenceType varchar(10),
	@FName varchar(30),
	@LName varchar(30),
	@Address1 varchar(50),
	@Address2 varchar(30),
	@Address3 varchar(30),
	@City varchar(30),
	@State char(2),
	@Zip varchar(9),
	@CntryCode char(2),
	@CntryName varchar(40),
	@AreaCode varchar(3),
	@Phone varchar(8),
	@Relationship varchar(30),
	@TrackingNum int
AS

INSERT INTO NewMemberReference
(ReferenceType, TrackingNum, FName, LName, Address1, Address2, Address3, City, State, Zip, CntryCode, CntryName, AreaCode, Phone, Relationship)
VALUES
(@ReferenceType, @TrackingNum, @FName, @LName, @Address1, @Address2, @Address3, @City, @State, @Zip, @CntryCode, @CntryName, @AreaCode, @Phone, @Relationship)

SELECT @ID = @@IDENTITY FROM NewMemberReference

GO
/****** Object:  StoredProcedure [IMS].[sp_NMRxlate_Reference_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_NMRxlate_Reference_InsertIfNew]
	@ID int OUTPUT,
	@ReferenceType varchar(10),
	@FName varchar(30),
	@LName varchar(30),
	@Address1 varchar(50),
	@Address2 varchar(30),
	@Address3 varchar(30),
	@City varchar(30),
	@State char(2),
	@Zip varchar(9),
	@CntryCode char(2),
	@CntryName varchar(40),
	@AreaCode varchar(3),
	@Phone varchar(8),
	@Relationship varchar(30),
	@TrackingNum int
AS

DECLARE @Count int
SELECT @Count = COUNT(FName) FROM NewMemberReference WHERE 1=1 AND ReferenceType = @ReferenceType AND TrackingNum = @TrackingNum

IF @Count = 0
	BEGIN
		INSERT INTO NewMemberReference
		(ReferenceType, TrackingNum, FName, LName, Address1, Address2, Address3, City, State, Zip, CntryCode, CntryName, AreaCode, Phone, Relationship)
		VALUES
		(@ReferenceType, @TrackingNum, @FName, @LName, @Address1, @Address2, @Address3, @City, @State, @Zip, @CntryCode, @CntryName, @AreaCode, @Phone, @Relationship)

		SELECT @ID = @@IDENTITY FROM NewMemberReference
	END
ELSE	BEGIN
		UPDATE NewMemberReference SET
			FName = @FName,
			LName = @LName,
			Address1 = @Address1,
			Address2 = @Address2,
			Address3 = @Address3,
			City = @City,
			State = @State,
			Zip = @Zip,
			CntryCode = @CntryCode,
			CntryName = @CntryName,
			AreaCode = @AreaCode,
			Phone = @Phone,
			Relationship = @Relationship
		WHERE 1=1 AND ReferenceType = @ReferenceType AND TrackingNum = @TrackingNum

		SELECT TOP 1 @ID = ID FROM NewMemberReference
		WHERE 1=1 AND ReferenceType = @ReferenceType AND TrackingNum = @TrackingNum
		ORDER BY ID DESC
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_NMRxlate_Reference_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_NMRxlate_Reference_Select]
	@ID int
AS

SELECT * FROM NewMemberReference
WHERE 1=1 AND ID = @ID

GO
/****** Object:  StoredProcedure [IMS].[sp_NMRxlate_Reference_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_NMRxlate_Reference_SelectAll]
	@ReferenceType varchar(10),
	@TrackingNum int
AS

SELECT * FROM NewMemberReference
WHERE 1=1 AND ReferenceType = @ReferenceType AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_NMRxlate_Reference_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_NMRxlate_Reference_Update]
	@ID int,
	@ReferenceType varchar(10),
	@FName varchar(30),
	@LName varchar(30),
	@Address1 varchar(50),
	@Address2 varchar(30),
	@Address3 varchar(30),
	@City varchar(30),
	@State varchar(2),
	@Zip varchar(9),
	@CntryCode varchar(2),
	@CntryName varchar(40),
	@AreaCode varchar(3),
	@Phone varchar(8),
	@Relationship varchar(30),
	@TrackingNum varchar(100)
AS

IF @ReferenceType <> ''
	BEGIN
		DECLARE @ReferenceType_CASTED varchar(10)
		IF @ReferenceType = '^'
			BEGIN
				SET @ReferenceType_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ReferenceType_CASTED = CAST(@ReferenceType AS varchar(10))
			END

		UPDATE NewMemberReference
			SET ReferenceType = @ReferenceType_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @TrackingNum <> ''
	BEGIN
		DECLARE @TrackingNum_CASTED int
		IF @TrackingNum = '^'
			BEGIN
				SET @TrackingNum_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @TrackingNum_CASTED = CAST(@TrackingNum AS int)
			END

		UPDATE NewMemberReference
			SET TrackingNum = @TrackingNum_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @FName <> ''
	BEGIN
		DECLARE @FName_CASTED varchar(30)
		IF @FName = '^'
			BEGIN
				SET @FName_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @FName_CASTED = CAST(@FName AS varchar(30))
			END

		UPDATE NewMemberReference
			SET FName = @FName_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @LName <> ''
	BEGIN
		DECLARE @LName_CASTED varchar(30)
		IF @LName = '^'
			BEGIN
				SET @LName_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @LName_CASTED = CAST(@LName AS varchar(30))
			END

		UPDATE NewMemberReference
			SET LName = @LName_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @Address1 <> ''
	BEGIN
		DECLARE @Address1_CASTED varchar(50)
		IF @Address1 = '^'
			BEGIN
				SET @Address1_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Address1_CASTED = CAST(@Address1 AS varchar(50))
			END

		UPDATE NewMemberReference
			SET Address1 = @Address1_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @Address2 <> ''
	BEGIN
		DECLARE @Address2_CASTED varchar(30)
		IF @Address2 = '^'
			BEGIN
				SET @Address2_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Address2_CASTED = CAST(@Address2 AS varchar(30))
			END

		UPDATE NewMemberReference
			SET Address2 = @Address2_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @Address3 <> ''
	BEGIN
		DECLARE @Address3_CASTED varchar(30)
		IF @Address3 = '^'
			BEGIN
				SET @Address3_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Address3_CASTED = CAST(@Address3 AS varchar(30))
			END

		UPDATE NewMemberReference
			SET Address3 = @Address3_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @City <> ''
	BEGIN
		DECLARE @City_CASTED varchar(30)
		IF @City = '^'
			BEGIN
				SET @City_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @City_CASTED = CAST(@City AS varchar(30))
			END

		UPDATE NewMemberReference
			SET City = @City_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @State <> ''
	BEGIN
		DECLARE @State_CASTED char(2)
		IF @State = '^'
			BEGIN
				SET @State_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @State_CASTED = CAST(@State AS char(2))
			END

		UPDATE NewMemberReference
			SET State = @State_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @Zip <> ''
	BEGIN
		DECLARE @Zip_CASTED varchar(9)
		IF @Zip = '^'
			BEGIN
				SET @Zip_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Zip_CASTED = CAST(@Zip AS varchar(9))
			END

		UPDATE NewMemberReference
			SET Zip = @Zip_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @CntryCode <> ''
	BEGIN
		DECLARE @CntryCode_CASTED char(2)
		IF @CntryCode = '^'
			BEGIN
				SET @CntryCode_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @CntryCode_CASTED = CAST(@CntryCode AS char(2))
			END

		UPDATE NewMemberReference
			SET CntryCode = @CntryCode_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @CntryName <> ''
	BEGIN
		DECLARE @CntryName_CASTED varchar(40)
		IF @CntryName = '^'
			BEGIN
				SET @CntryName_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @CntryName_CASTED = CAST(@CntryName AS varchar(40))
			END

		UPDATE NewMemberReference
			SET CntryName = @CntryName_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @AreaCode <> ''
	BEGIN
		DECLARE @AreaCode_CASTED varchar(3)
		IF @AreaCode = '^'
			BEGIN
				SET @AreaCode_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @AreaCode_CASTED = CAST(@AreaCode AS varchar(3))
			END

		UPDATE NewMemberReference
			SET AreaCode = @AreaCode_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @Phone <> ''
	BEGIN
		DECLARE @Phone_CASTED varchar(8)
		IF @Phone = '^'
			BEGIN
				SET @Phone_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Phone_CASTED = CAST(@Phone AS varchar(8))
			END

		UPDATE NewMemberReference
			SET Phone = @Phone_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @Relationship <> ''
	BEGIN
		DECLARE @Relationship_CASTED varchar(30)
		IF @Relationship = '^'
			BEGIN
				SET @Relationship_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Relationship_CASTED = CAST(@Relationship AS varchar(30))
			END

		UPDATE NewMemberReference
			SET Relationship = @Relationship_CASTED
		WHERE 1=1 AND ID = @ID
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_NMRxlate_RequiredDocs_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_NMRxlate_RequiredDocs_Select]
@TrackingNum int
AS

DELETE FROM [IMS].[RequiredDocuments] WHERE TrackingNum = @TrackingNum

INSERT INTO RequiredDocuments (TrackingNum, [ID], OtherDocID, SortOrder, RequirementText, DocumentInformation)
SELECT DISTINCT NMD.TrackingNum, 0, NMD.NewMemberRequiredDocId, NMD.SortOrder, NMD.RequirementText, NMD.DocumentInformation FROM NewMemberRequiredDocs NMD
LEFT OUTER JOIN NewMemberRequest NMR ON NMR.TrackingNum = @TrackingNum 
LEFT OUTER JOIN NewMemberManualApproval NMRMA ON NMRMA.TrackingNum = @TrackingNum AND NMRMA.JointSequence = 0
LEFT OUTER JOIN ILA_ProductDetail PD ON PD.TrackingNum = @TrackingNum 
WHERE NMD.TrackingNum = @TrackingNum AND NMD.NewMemberRequiredDocId NOT IN 
(
	SELECT ISNULL(SMA.OtherDocId,0)
	FROM SecureMailAttachment SMA 
	INNER JOIN SecureMailThread SMT ON SMA.ThreadId = SMT.ThreadId
	WHERE SMT.TrackingNum = @TrackingNum
)

INSERT INTO RequiredDocuments (TrackingNum, [ID], OtherDocID, SortOrder, RequirementText, CriteriaType1, CriteriaValue1, CriteriaType2, CriteriaValue2, CriteriaType3, CriteriaValue3, DocumentInformation)
SELECT DISTINCT NMR.TrackingNum, RD.ID, 0, RD.SortOrder, RD.RequirementText, RD.CriteriaType1, RD.CriteriaValue1, RD.CriteriaType2, RD.CriteriaValue2, RD.CriteriaType3, RD.CriteriaValue3, RD.DocumentInformation FROM udt_RequiredDocs RD 
LEFT OUTER JOIN NewMemberRequest NMR ON NMR.TrackingNum = @TrackingNum 
LEFT OUTER JOIN NewMemberManualApproval NMRMA ON NMRMA.TrackingNum = @TrackingNum AND NMRMA.JointSequence = 0
LEFT OUTER JOIN ILA_ProductDetail PD ON PD.TrackingNum = @TrackingNum 
WHERE
(
	IsNull(RD.CriteriaType1, '') = '' 
	OR 
	(
		RD.CriteriaType1 = 'PREAPP' 
		AND NMR.Preapproval LIKE '%' + RD.CriteriaValue1 + '%'
	) 
	OR 
	(
		RD.CriteriaType1 = 'MANAPP' 
		AND NMRMA.ReasonCode = RD.CriteriaValue1
	)
	OR 
	(
		RD.CriteriaType1 = 'ACTYPE' 
		AND RD.CriteriaValue1 Like '%' + NMR.AccountType + '%' 
	)
	OR 
	(
		RD.CriteriaType1 = 'LNTYPE' 
		AND RD.CriteriaValue1 Like '%' + PD.LoanType + '%' 
	)
	OR 
	(
		RD.CriteriaType1 = 'ELIG' 
		AND RD.CriteriaValue1 Like '%' + 'WHAT_WOULD_GO_HERE' + '%' 
	)
	OR 
	(
		RD.CriteriaType1 = 'MITEK' 
		AND RD.CriteriaValue1 Like '%' + 'WHAT_WOULD_GO_HERE' + '%' 
	)
)
AND
(
	IsNull(RD.CriteriaType2, '') = '' 
	OR 
	(
		RD.CriteriaType2 = 'PREAPP' 
		AND NMR.Preapproval LIKE '%' + RD.CriteriaValue2 + '%'
	) 
	OR 
	(
		RD.CriteriaType2 = 'MANAPP' 
		AND NMRMA.ReasonCode = RD.CriteriaValue2
	)
	OR 
	(
		RD.CriteriaType2 = 'ACTYPE' 
		AND RD.CriteriaValue2 Like'%' + NMR.AccountType + '%' 
	)
	OR 
	(
		RD.CriteriaType2 = 'LNTYPE' 
		AND RD.CriteriaValue2 Like'%' + PD.LoanType + '%' 
	)
	OR 
	(
		RD.CriteriaType2 = 'ELIG' 
		AND RD.CriteriaValue2 Like '%' + 'WHAT_WOULD_GO_HERE' + '%' 
	)
	OR 
	(
		RD.CriteriaType2 = 'MITEK' 
		AND RD.CriteriaValue2 Like '%' + 'WHAT_WOULD_GO_HERE' + '%' 
	)
)
AND
(
	IsNull(RD.CriteriaType3, '') = '' 
	OR 
	(
		RD.CriteriaType3 = 'PREAPP' 
		AND NMR.Preapproval LIKE '%' + RD.CriteriaValue3 + '%'
	) 
	OR 
	(
		RD.CriteriaType3 = 'MANAPP' 
		AND NMRMA.ReasonCode = RD.CriteriaValue3
	)
	OR 
	(
		RD.CriteriaType3 = 'ACTYPE' 
		AND RD.CriteriaValue3 Like '%' + NMR.AccountType + '%'
	)
	OR 
	(
		RD.CriteriaType3 = 'LNTYPE' 
		AND RD.CriteriaValue3 Like '%' + PD.LoanType + '%' 
	)
	OR 
	(
		RD.CriteriaType3 = 'ELIG' 
		AND RD.CriteriaValue3 Like '%' + 'WHAT_WOULD_GO_HERE' + '%' 
	)
	OR 
	(
		RD.CriteriaType3 = 'MITEK' 
		AND RD.CriteriaValue3 Like '%' + 'WHAT_WOULD_GO_HERE' + '%' 
	)
)
AND RD.ID NOT IN 
(
	SELECT ISNULL(SMA.RequiredDocID,0)
	FROM SecureMailAttachment SMA 
	INNER JOIN SecureMailThread SMT ON SMA.ThreadId = SMT.ThreadId
	WHERE SMT.TrackingNum = @TrackingNum
)

SELECT * FROM RequiredDocuments WHERE TrackingNum = @TrackingNum
GO
/****** Object:  StoredProcedure [IMS].[sp_NMRxlate_Work_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_NMRxlate_Work_Delete]
	@TrackingNum int
AS

DELETE FROM NewMemberWork
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_NMRxlate_Work_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_NMRxlate_Work_DeleteAll]
	@TrackingNum int
AS

DELETE FROM NewMemberWork
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_NMRxlate_Work_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_NMRxlate_Work_Insert]
	@Address1 char(30),
	@Address2 char(30),
	@Address3 char(30),
	@City char(30),
	@State char(2),
	@Zip char(9),
	@CntryCode char(2),
	@CntryName char(40),
	@AreaCode char(3),
	@Phone char(8),
	@Ext char(5),
	@EmploymentStatus char(2),
	@EmployerName char(30),
	@EmployeeNumber char(20),
	@JobTitle char(45),
	@Shift char(50),
	@HireDate datetime,
	@GrossIncome int,
	@IncomeFrequency char(1),
	@OccupationCode char(2),
	@ProfessionYears smallint,
	@Department char(20),
	@TrackingNum int
AS

EXEC sp_NMRxlate_Work_InsertIfNew_Expanded @TrackingNum, @Address1, @Address2, @Address3, @City, @State, @Zip, @CntryCode, @CntryName, @AreaCode, @Phone, @Ext, @EmploymentStatus, @EmployerName, @EmployeeNumber, @JobTitle, @Shift, @HireDate, @GrossIncome, @IncomeFrequency, @OccupationCode, @ProfessionYears, @Department

GO
/****** Object:  StoredProcedure [IMS].[sp_NMRxlate_Work_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_NMRxlate_Work_InsertIfNew]
	@Address1 char(30),
	@Address2 char(30),
	@Address3 char(30),
	@City char(30),
	@State char(2),
	@Zip char(9),
	@CntryCode char(2),
	@CntryName char(40),
	@AreaCode char(3),
	@Phone char(8),
	@Ext char(5),
	@EmploymentStatus char(2),
	@EmployerName char(30),
	@EmployeeNumber char(20),
	@JobTitle char(45),
	@Shift char(50),
	@HireDate datetime,
	@GrossIncome int,
	@IncomeFrequency char(1),
	@OccupationCode char(2),
	@ProfessionYears smallint,
	@Department char(20),
	@TrackingNum int
AS

DECLARE @Count int
SELECT @Count = COUNT(Address1) FROM NewMemberWork WHERE 1=1 AND TrackingNum = @TrackingNum

IF @Count = 0
	BEGIN
		INSERT INTO NewMemberWork
		(TrackingNum, Address1, Address2, Address3, City, State, Zip, CntryCode, CntryName, AreaCode, Phone, Ext, EmploymentStatus, EmployerName, EmployeeNumber, JobTitle, Shift, HireDate, GrossIncome, IncomeFrequency, OccupationCode, ProfessionYears, Department)
		VALUES
		(@TrackingNum, @Address1, @Address2, @Address3, @City, @State, @Zip, @CntryCode, @CntryName, @AreaCode, @Phone, @Ext, @EmploymentStatus, @EmployerName, @EmployeeNumber, @JobTitle, @Shift, @HireDate, @GrossIncome, @IncomeFrequency, @OccupationCode, @ProfessionYears, @Department)
	END
ELSE	BEGIN
		UPDATE NewMemberWork SET
			Address1 = @Address1,
			Address2 = @Address2,
			Address3 = @Address3,
			City = @City,
			State = @State,
			Zip = @Zip,
			CntryCode = @CntryCode,
			CntryName = @CntryName,
			AreaCode = @AreaCode,
			Phone = @Phone,
			Ext = @Ext,
			EmploymentStatus = @EmploymentStatus,
			EmployerName = @EmployerName,
			EmployeeNumber = @EmployeeNumber,
			JobTitle = @JobTitle,
			Shift = @Shift,
			HireDate = @HireDate,
			GrossIncome = @GrossIncome,
			IncomeFrequency = @IncomeFrequency,
			OccupationCode = @OccupationCode,
			ProfessionYears = @ProfessionYears,
			Department = @Department
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_NMRxlate_Work_InsertIfNew_Expanded]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_NMRxlate_Work_InsertIfNew_Expanded]
	@TrackingNum int,
	@Address1 char(30),
	@Address2 char(30),
	@Address3 char(30),
	@City char(30),
	@State char(2),
	@Zip char(9),
	@CntryCode char(2),
	@CntryName char(40),
	@AreaCode char(3),
	@Phone char(8),
	@Ext char(5),
	@EmploymentStatus char(2),
	@EmployerName char(30),
	@EmployeeNumber char(20),
	@JobTitle char(45),
	@Shift char(50),
	@HireDate datetime,
	@GrossIncome int,
	@IncomeFrequency char(1),
	@OccupationCode char(2),
	@ProfessionYears smallint,
	@Department char(20)
AS

DECLARE @Count int
SELECT @Count = COUNT(TrackingNum) FROM NewMemberWork WHERE 1=1 AND TrackingNum = @TrackingNum

IF @Count = 0
	BEGIN
		INSERT INTO NewMemberWork
		(TrackingNum, Address1, Address2, Address3, City, State, Zip, CntryCode, CntryName, AreaCode, Phone, Ext, EmploymentStatus, EmployerName, EmployeeNumber, JobTitle, Shift, HireDate, GrossIncome, IncomeFrequency, OccupationCode, ProfessionYears, Department)
		VALUES
		(@TrackingNum, @Address1, @Address2, @Address3, @City, @State, @Zip, @CntryCode, @CntryName, @AreaCode, @Phone, @Ext, @EmploymentStatus, @EmployerName, @EmployeeNumber, @JobTitle, @Shift, @HireDate, @GrossIncome, @IncomeFrequency, @OccupationCode, @ProfessionYears, @Department)
	END
ELSE
	BEGIN
		DECLARE @GrossIncome_Casted varchar(100)
		IF @GrossIncome = 0
			BEGIN
				SET @GrossIncome_Casted = ''
			END
		ELSE
			BEGIN
				SET @GrossIncome_Casted = CAST(@GrossIncome AS varchar(100))
			END
		EXEC IMS.sp_NMRxlate_Work_Update
			@Address1,
			@Address2,
			@Address3,
			@City,
			@State,
			@Zip,
			@CntryCode,
			@CntryName,
			@AreaCode,
			@Phone,
			@Ext,
			@EmploymentStatus,
			@EmployerName,
			@EmployeeNumber,
			@JobTitle,
			@Shift,
			@HireDate,
			@GrossIncome_Casted,
			@IncomeFrequency,
			@OccupationCode,
			@ProfessionYears,
			@Department,
			@TrackingNum
	END
GO
/****** Object:  StoredProcedure [IMS].[sp_NMRxlate_Work_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_NMRxlate_Work_Select]
	@TrackingNum int
AS

SELECT * FROM NewMemberWork
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_NMRxlate_Work_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_NMRxlate_Work_SelectAll]
	@TrackingNum int
AS

SELECT * FROM NewMemberWork
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_NMRxlate_Work_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_NMRxlate_Work_Update]
	@Address1 varchar(30),
	@Address2 varchar(30),
	@Address3 varchar(30),
	@City varchar(30),
	@State varchar(2),
	@Zip varchar(9),
	@CntryCode varchar(2),
	@CntryName varchar(40),
	@AreaCode varchar(3),
	@Phone varchar(8),
	@Ext varchar(5),
	@EmploymentStatus varchar(2),
	@EmployerName varchar(30),
	@EmployeeNumber varchar(20),
	@JobTitle varchar(45),
	@Shift varchar(50),
	@HireDate varchar(100),
	@GrossIncome varchar(100),
	@IncomeFrequency varchar(1),
	@OccupationCode varchar(2),
	@ProfessionYears varchar(100),
	@Department varchar(20),
	@TrackingNum int
AS

IF @Address1 <> ''
	BEGIN
		DECLARE @Address1_CASTED char(30)
		IF @Address1 = '^'
			BEGIN
				SET @Address1_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Address1_CASTED = CAST(@Address1 AS char(30))
			END

		UPDATE NewMemberWork
			SET Address1 = @Address1_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @Address2 <> ''
	BEGIN
		DECLARE @Address2_CASTED char(30)
		IF @Address2 = '^'
			BEGIN
				SET @Address2_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Address2_CASTED = CAST(@Address2 AS char(30))
			END

		UPDATE NewMemberWork
			SET Address2 = @Address2_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @Address3 <> ''
	BEGIN
		DECLARE @Address3_CASTED char(30)
		IF @Address3 = '^'
			BEGIN
				SET @Address3_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Address3_CASTED = CAST(@Address3 AS char(30))
			END

		UPDATE NewMemberWork
			SET Address3 = @Address3_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @City <> ''
	BEGIN
		DECLARE @City_CASTED char(30)
		IF @City = '^'
			BEGIN
				SET @City_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @City_CASTED = CAST(@City AS char(30))
			END

		UPDATE NewMemberWork
			SET City = @City_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @State <> ''
	BEGIN
		DECLARE @State_CASTED char(2)
		IF @State = '^'
			BEGIN
				SET @State_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @State_CASTED = CAST(@State AS char(2))
			END

		UPDATE NewMemberWork
			SET State = @State_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @Zip <> ''
	BEGIN
		DECLARE @Zip_CASTED char(9)
		IF @Zip = '^'
			BEGIN
				SET @Zip_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Zip_CASTED = CAST(@Zip AS char(9))
			END

		UPDATE NewMemberWork
			SET Zip = @Zip_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @CntryCode <> ''
	BEGIN
		DECLARE @CntryCode_CASTED char(2)
		IF @CntryCode = '^'
			BEGIN
				SET @CntryCode_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @CntryCode_CASTED = CAST(@CntryCode AS char(2))
			END

		UPDATE NewMemberWork
			SET CntryCode = @CntryCode_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @CntryName <> ''
	BEGIN
		DECLARE @CntryName_CASTED char(40)
		IF @CntryName = '^'
			BEGIN
				SET @CntryName_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @CntryName_CASTED = CAST(@CntryName AS char(40))
			END

		UPDATE NewMemberWork
			SET CntryName = @CntryName_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @AreaCode <> ''
	BEGIN
		DECLARE @AreaCode_CASTED char(3)
		IF @AreaCode = '^'
			BEGIN
				SET @AreaCode_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @AreaCode_CASTED = CAST(@AreaCode AS char(3))
			END

		UPDATE NewMemberWork
			SET AreaCode = @AreaCode_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @Phone <> ''
	BEGIN
		DECLARE @Phone_CASTED char(8)
		IF @Phone = '^'
			BEGIN
				SET @Phone_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Phone_CASTED = CAST(@Phone AS char(8))
			END

		UPDATE NewMemberWork
			SET Phone = @Phone_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @Ext <> ''
	BEGIN
		DECLARE @Ext_CASTED char(5)
		IF @Ext = '^'
			BEGIN
				SET @Ext_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Ext_CASTED = CAST(@Ext AS char(5))
			END

		UPDATE NewMemberWork
			SET Ext = @Ext_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @EmploymentStatus <> ''
	BEGIN
		DECLARE @EmploymentStatus_CASTED char(2)
		IF @EmploymentStatus = '^'
			BEGIN
				SET @EmploymentStatus_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @EmploymentStatus_CASTED = CAST(@EmploymentStatus AS char(2))
			END

		UPDATE NewMemberWork
			SET EmploymentStatus = @EmploymentStatus_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @EmployerName <> ''
	BEGIN
		DECLARE @EmployerName_CASTED char(30)
		IF @EmployerName = '^'
			BEGIN
				SET @EmployerName_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @EmployerName_CASTED = CAST(@EmployerName AS char(30))
			END

		UPDATE NewMemberWork
			SET EmployerName = @EmployerName_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @EmployeeNumber <> ''
	BEGIN
		DECLARE @EmployeeNumber_CASTED char(20)
		IF @EmployeeNumber = '^'
			BEGIN
				SET @EmployeeNumber_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @EmployeeNumber_CASTED = CAST(@EmployeeNumber AS char(20))
			END

		UPDATE NewMemberWork
			SET EmployeeNumber = @EmployeeNumber_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @JobTitle <> ''
	BEGIN
		DECLARE @JobTitle_CASTED char(45)
		IF @JobTitle = '^'
			BEGIN
				SET @JobTitle_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @JobTitle_CASTED = CAST(@JobTitle AS char(45))
			END

		UPDATE NewMemberWork
			SET JobTitle = @JobTitle_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @Shift <> ''
	BEGIN
		DECLARE @Shift_CASTED char(50)
		IF @Shift = '^'
			BEGIN
				SET @Shift_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Shift_CASTED = CAST(@Shift AS char(50))
			END

		UPDATE NewMemberWork
			SET Shift = @Shift_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @HireDate <> ''
	BEGIN
		DECLARE @HireDate_CASTED datetime
		IF @HireDate = '^'
			BEGIN
				SET @HireDate_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @HireDate_CASTED = CAST(@HireDate AS datetime)
			END

		UPDATE NewMemberWork
			SET HireDate = @HireDate_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @GrossIncome <> ''
	BEGIN
		DECLARE @GrossIncome_CASTED int
		IF @GrossIncome = '^'
			BEGIN
				SET @GrossIncome_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @GrossIncome_CASTED = CAST(@GrossIncome AS int)
			END

		UPDATE NewMemberWork
			SET GrossIncome = @GrossIncome_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @IncomeFrequency <> ''
	BEGIN
		DECLARE @IncomeFrequency_CASTED char(1)
		IF @IncomeFrequency = '^'
			BEGIN
				SET @IncomeFrequency_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @IncomeFrequency_CASTED = CAST(@IncomeFrequency AS char(1))
			END

		UPDATE NewMemberWork
			SET IncomeFrequency = @IncomeFrequency_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @OccupationCode <> ''
	BEGIN
		DECLARE @OccupationCode_CASTED char(2)
		IF @OccupationCode = '^'
			BEGIN
				SET @OccupationCode_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @OccupationCode_CASTED = CAST(@OccupationCode AS char(2))
			END

		UPDATE NewMemberWork
			SET OccupationCode = @OccupationCode_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @ProfessionYears <> ''
	BEGIN
		DECLARE @ProfessionYears_CASTED smallint
		IF @ProfessionYears = '^'
			BEGIN
				SET @ProfessionYears_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ProfessionYears_CASTED = CAST(@ProfessionYears AS smallint)
			END

		UPDATE NewMemberWork
			SET ProfessionYears = @ProfessionYears_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @Department <> ''
	BEGIN
		DECLARE @Department_CASTED char(20)
		IF @Department = '^'
			BEGIN
				SET @Department_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Department_CASTED = CAST(@Department AS char(20))
			END

		UPDATE NewMemberWork
			SET Department = @Department_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_OAOReport_AccountDetailReport]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE Procedure [IMS].[sp_OAOReport_AccountDetailReport]
	@StartDate datetime,
	@StopDate datetime
AS

SELECT AccountNumber AS AccountNumber_New, AccountNumber AS AccountNumber_Existing, SUM(NumberOfSuffixes_New) AS NumberOfSuffixes_New, SUM(NumberOfSuffixes_Existing) AS NumberOfSuffixes_Existing, SUM(TotalDeposit_New) AS TotalDeposit_New, SUM(TotalDeposit_Existing) AS TotalDeposit_Existing FROM
(
		SELECT	NMR.Account AS AccountNumber
			,(
				SELECT COUNT(SA.TrackingNum)
				FROM IMS.NewMemberSubAccount SA
				WHERE SA.TrackingNum = NMR.TrackingNum AND SA.Created = 'Y'
			 ) AS NumberOfSuffixes_New
			,(
				SELECT SUM(SA.Amount)
				FROM IMS.NewMemberSubAccount SA
				WHERE SA.TrackingNum = NMR.TrackingNum AND SA.Created = 'Y'
			 ) AS TotalDeposit_New
			, '0' AS NumberOfSuffixes_Existing
			, '0' AS TotalDeposit_Existing
		FROM IMS.NewMemberRequest NMR
		WHERE NMR.Created = 'Y' AND NMR.Processed = 999 AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate)
UNION ALL
		SELECT	NMR.Account AS AccountNumber
			, '0' AS NumberOfSuffixes_New
			, '0' AS TotalDeposit_New
			,(
				SELECT COUNT(SA.TrackingNum)
				FROM IMS.NewMemberSubAccount SA
				WHERE SA.TrackingNum = NMR.TrackingNum AND SA.Created = 'Y'
			 ) AS NumberOfSuffixes_Existing
			,(
				SELECT SUM(SA.Amount)
				FROM IMS.NewMemberSubAccount SA
				WHERE SA.TrackingNum = NMR.TrackingNum AND SA.Created = 'Y'
			 ) AS TotalDeposit_Existing
		FROM IMS.NewMemberRequest NMR
		WHERE NMR.Created = 'I' AND NMR.Processed = 999 AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate)
) x GROUP BY AccountNumber ORDER BY AccountNumber
GO
/****** Object:  StoredProcedure [IMS].[sp_OAOReport_AdminBalanceDetailReport]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Randy Hansen
-- Create date: 04/09/2013
-- Description:	Return Data between the StartDate and StopDate used by the AdminBalanceDetailReport 
-- =============================================
CREATE PROCEDURE [IMS].[sp_OAOReport_AdminBalanceDetailReport]
	@StartDate datetime,
	@StopDate datetime
AS
BEGIN
	SET NOCOUNT ON;

	SELECT	fb.TrackingNum, 
			f.AccountNumber, 
			(RTRIM(nm.FName) + ' ' +  RTRIM(nm.LName)) AS MemberName,
			fb.RoutingNumber,
			fb.AccountNumberLast4,
			fb.AccountNumberEncrypted,
			fb.DateTimeExported AS Date_Time, 
			fb.Amount1 AS MemberCredit, 
			IsNull(fb.DebitAmount, 0) AS MemberDebit, 
			IsNull(fb.DebitAmount, 0) AS GLCredit, 
			fb.Amount1 AS GLDebit 
	FROM NMRFundingBank fb
		INNER JOIN NMRFunding f ON fb.FundingID = f.ID
		INNER JOIN NewMemberRequest nm ON fb.TrackingNum = nm.TrackingNum
	WHERE DateTimeExported >= @StartDate
		AND DateTimeExported < @StopDate

	UNION ALL
	
	SELECT	fb.TrackingNum,
			f.AccountNumber,
			(RTRIM(nm.FName) + ' ' +  RTRIM(nm.LName)) AS MemberName,
			fb.RoutingNumber,
			fb.AccountNumberLast4,
			fb.AccountNumberEncrypted,
			fb.DateTimeExported AS Date_Time,
			fb.Amount2 AS MemberCredit,
			0 AS MemberDebit,
			0 AS GLCredit,
			fb.Amount2 AS GLDebit 
	FROM NMRFundingBank fb
		INNER JOIN NMRFunding f ON fb.FundingID = f.ID
		INNER JOIN NewMemberRequest nm ON fb.TrackingNum = nm.TrackingNum
	WHERE DateTimeExported >= @StartDate
		AND DateTimeExported < @StopDate
	
	UNION ALL
	
	SELECT	ft.TrackingNum,
			ISNULL(nm.Account, 0) AS AccountNumber,
			(RTRIM(nm.FName) + ' ' +  RTRIM(nm.LName)) AS MemberName,
			fb.RoutingNumber,
			fb.AccountNumberLast4,
			fb.AccountNumberEncrypted,
			ft.DateTimeCreated AS Date_Time,
			0 AS MemberCredit,
			ft.Amount AS MemberDebit,
			ft.Amount AS GLCredit,
			0 AS GLDebit
	FROM NMRFundingTransaction ft
		INNER JOIN NMRFundingBank fb ON ft.FundingBankID = fb.ID
		INNER JOIN NewMemberRequest nm ON fb.TrackingNum = nm.TrackingNum
	WHERE COALESCE(ft.DateTimeExported, ft.DateTimeCreated) >= @StartDate
		AND COALESCE(ft.DateTimeExported, ft.DateTimeCreated) < @StopDate
		
	ORDER BY AccountNumber, Date_Time

END
GO
/****** Object:  StoredProcedure [IMS].[sp_OAOReport_AdminBalanceSummaryReport]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Randy Hansen
-- Create date: 04/10/013
-- Description:	Return Data between the StartDate and StopDate used by the AdminBalanceSummaryReport
-- =============================================
CREATE PROCEDURE [IMS].[sp_OAOReport_AdminBalanceSummaryReport]
	@StartDate datetime,
	@StopDate datetime
AS
BEGIN
	SET NOCOUNT ON;

	SELECT	Date_Year,
			Date_Month,
			Date_Day,
			SUM(MemberCredit) AS MemberCredit,
			SUM(MemberDebit) AS MemberDebit,
			SUM(GLCredit) AS GLCredit,
			SUM(GLDebit) AS GLDebit
	FROM (
		SELECT	DATEPART(Year, fb.DateTimeExported) AS Date_Year, 
				DATEPART(Month, fb.DateTimeExported) AS Date_Month, 
				DATEPART(Day, fb.DateTimeExported) AS Date_Day, 
				fb.Amount1 AS MemberCredit, 
				IsNull(fb.DebitAmount, 0) AS MemberDebit, 
				IsNull(fb.DebitAmount, 0) AS GLCredit, 
				fb.Amount1 AS GLDebit 
		FROM NMRFundingBank fb
		WHERE DateTimeExported >= @StartDate
			AND DateTimeExported < @StopDate

		UNION ALL
	
		SELECT	DATEPART(Year, fb.DateTimeExported) AS Date_Year, 
				DATEPART(Month, fb.DateTimeExported) AS Date_Month, 
				DATEPART(Day, fb.DateTimeExported) AS Date_Day, 
				fb.Amount2 AS MemberCredit,
				0 AS MemberDebit,
				0 AS GLCredit,
				fb.Amount2 AS GLDebit 
		FROM NMRFundingBank fb
		WHERE DateTimeExported >= @StartDate
			AND DateTimeExported < @StopDate
	
		UNION ALL
	
		SELECT	DATEPART(Year, COALESCE(ft.DateTimeExported, ft.DateTimeCreated)) AS Date_Year, 
				DATEPART(Month, COALESCE(ft.DateTimeExported, ft.DateTimeCreated)) AS Date_Month, 
				DATEPART(Day, COALESCE(ft.DateTimeExported, ft.DateTimeCreated)) AS Date_Day, 
				0 AS MemberCredit,
				ft.Amount AS MemberDebit,
				ft.Amount AS GLCredit,
				0 AS GLDebit
		FROM NMRFundingTransaction ft
		WHERE COALESCE(ft.DateTimeExported, ft.DateTimeCreated) >= @StartDate
			AND COALESCE(ft.DateTimeExported, ft.DateTimeCreated) < @StopDate
	) BalanceSummary
	GROUP BY Date_Year, Date_Month, Date_Day
	
END
GO
/****** Object:  StoredProcedure [IMS].[sp_OAOReport_ApplicationDetailReport]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE Procedure [IMS].[sp_OAOReport_ApplicationDetailReport]
	@StartDate datetime,
	@StopDate datetime
AS

SELECT NumberApproved, NumberDeclined, NumberCancelled, NumberCreated FROM
(
	(SELECT COUNT(NMR.TrackingNum) AS NumberApproved
	FROM IMS.NewMemberRequest NMR
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND NMR.Processed = 999 AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate)) a
		FULL OUTER JOIN
	(SELECT COUNT(NMR.TrackingNum) AS NumberDeclined
	FROM IMS.NewMemberRequest NMR
	WHERE NMR.Processed = 998 AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.ApplyDate >= @StartDate AND NMR.ApplyDate <= @StopDate)) b ON 1=1
		FULL OUTER JOIN
-- Cancelled field currently not being used
	(SELECT COUNT(NMR.TrackingNum) AS NumberCancelled
	FROM IMS.NewMemberRequest NMR
	WHERE NMR.Processed = 998 AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.ApplyDate >= @StartDate AND NMR.ApplyDate <= @StopDate)) c ON 1=1
		FULL OUTER JOIN
-- Created field currently being used to display IN PROGRESS
	(SELECT COUNT(NMR.TrackingNum) AS NumberCreated
	FROM IMS.NewMemberRequest NMR
	WHERE NMR.Processed = 1 AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.ApplyDate >= @StartDate AND NMR.ApplyDate <= @StopDate)) d ON 1=1
)
GO
/****** Object:  StoredProcedure [IMS].[sp_OAOReport_ApplicationStatusReport]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [IMS].[sp_OAOReport_ApplicationStatusReport]
	@StartDate datetime,
	@StopDate datetime
AS
	DECLARE @ClientShortName varchar(10)
	SELECT @ClientShortName = ClientShortName from udt_ClientSettings

	--We are executing a string, so we have to verify that we are not executing SQL injection scripts. 
	--Because the short code is a defined value, and not a user input, we can check for ' or -- because these should never be in the name (because we control what this is). 
	--Normally I would recommend never ever ever (emphasize repeatedly) executing a string, but because our db is dristributed to client networks 
	--and we want to prevent passing other client names around, then this might be the one time that this actually makes sense to use. 
	if @ClientShortName IS NOT NULL AND CHARINDEX('''',@ClientShortName) = 0 AND CHARINDEX('--',@ClientShortName) = 0
	BEGIN
		DECLARE @ScaryExecutableString varchar(500)
		SET @ScaryExecutableString = N'IMS.sp' + @ClientShortName + '_OAOReport_ApplicationStatusReport'
		Exec @ScaryExecutableString @StartDate, @StopDate
	END	
GO
/****** Object:  StoredProcedure [IMS].[sp_OAOReport_AverageAccountBalanceReport]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE Procedure [IMS].[sp_OAOReport_AverageAccountBalanceReport]
	@StartDate datetime,
	@StopDate datetime
AS

SELECT Product, NumberOfAccounts_New, NumberOfAccounts_Existing, TotalDeposit_New, TotalDeposit_Existing FROM
(
	SELECT 1 AS SortOrder, 'Memberships' AS Product, * FROM
	(
		(SELECT COUNT(NMR.TrackingNum) AS NumberOfAccounts_New, '' AS TotalDeposit_New
		FROM IMS.NewMemberRequest NMR
		WHERE NMR.Created = 'Y' AND NMR.Processed = 999 AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate)) a
			FULL OUTER JOIN
		(SELECT COUNT(NMR.TrackingNum) AS NumberOfAccounts_Existing, '' AS TotalDeposit_Existing
		FROM IMS.NewMemberRequest NMR
		WHERE NMR.Created = 'I' AND NMR.Processed = 999 AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate)) b ON 1=1
	)
UNION
	SELECT 2 AS SortOrder, 'Savings' AS Product, * FROM
	(
		(SELECT COUNT(SA.TrackingNum) AS NumberOfAccounts_New, SUM(SA.Amount) AS TotalDeposit_New
		FROM IMS.NewMemberSubAccount SA
		LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = SA.TrackingNum
		WHERE NMR.Created = 'Y' AND NMR.Processed = 999 AND SA.Created = 'Y' AND SA.DescAbrv IN ('BUS', 'CLN', 'LTA', 'MYN', 'MYS', 'SAV', 'TSV', 'UGM') AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (SA.CreatedOn >= @StartDate AND SA.CreatedOn <= @StopDate)) a
			FULL OUTER JOIN
		(SELECT COUNT(SA.TrackingNum) AS NumberOfAccounts_Existing, SUM(SA.Amount) AS TotalDeposit_Existing
		FROM IMS.NewMemberSubAccount SA
		LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = SA.TrackingNum
		WHERE NMR.Created = 'I' AND NMR.Processed = 999 AND SA.Created = 'Y' AND SA.DescAbrv IN ('BUS', 'CLN', 'LTA', 'MYN', 'MYS', 'SAV', 'TSV', 'UGM') AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (SA.CreatedOn >= @StartDate AND SA.CreatedOn <= @StopDate)) b ON 1=1
	)
UNION
	SELECT 3 AS SortOrder, 'Checking' AS Product, * FROM
	(
		(SELECT COUNT(SA.TrackingNum) AS NumberOfAccounts_New, SUM(SA.Amount) AS TotalDeposit_New
		FROM IMS.NewMemberSubAccount SA
		LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = SA.TrackingNum
		WHERE NMR.Created = 'Y' AND NMR.Processed = 999 AND SA.Created = 'Y' AND SA.DescAbrv IN ('BCK', 'BCP', 'CHK', 'ECK', 'ISC', 'MCC', 'MYC', 'SBA', 'SSC', 'TCK') AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (SA.CreatedOn >= @StartDate AND SA.CreatedOn <= @StopDate)) a
			FULL OUTER JOIN
		(SELECT COUNT(SA.TrackingNum) AS NumberOfAccounts_Existing, SUM(SA.Amount) AS TotalDeposit_Existing
		FROM IMS.NewMemberSubAccount SA
		LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = SA.TrackingNum
		WHERE NMR.Created = 'I' AND NMR.Processed = 999 AND SA.Created = 'Y' AND SA.DescAbrv IN ('BCK', 'BCP', 'CHK', 'ECK', 'ISC', 'MCC', 'MYC', 'SBA', 'SSC', 'TCK') AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (SA.CreatedOn >= @StartDate AND SA.CreatedOn <= @StopDate)) b ON 1=1
	)
UNION
	SELECT 4 AS SortOrder, 'Money Market' AS Product, * FROM
	(
		(SELECT COUNT(SA.TrackingNum) AS NumberOfAccounts_New, SUM(SA.Amount) AS TotalDeposit_New
		FROM IMS.NewMemberSubAccount SA
		LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = SA.TrackingNum
		WHERE NMR.Created = 'Y' AND NMR.Processed = 999 AND SA.Created = 'Y' AND SA.DescAbrv IN ('MMC') AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (SA.CreatedOn >= @StartDate AND SA.CreatedOn <= @StopDate)) a
			FULL OUTER JOIN
		(SELECT COUNT(SA.TrackingNum) AS NumberOfAccounts_Existing, SUM(SA.Amount) AS TotalDeposit_Existing
		FROM IMS.NewMemberSubAccount SA
		LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = SA.TrackingNum
		WHERE NMR.Created = 'I' AND NMR.Processed = 999 AND SA.Created = 'Y' AND SA.DescAbrv IN ('MMC') AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (SA.CreatedOn >= @StartDate AND SA.CreatedOn <= @StopDate)) b ON 1=1
	)
UNION
	SELECT 5 AS SortOrder, 'Christmas Club' AS Product, * FROM
	(
		(SELECT COUNT(SA.TrackingNum) AS NumberOfAccounts_New, SUM(SA.Amount) AS TotalDeposit_New
		FROM IMS.NewMemberSubAccount SA
		LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = SA.TrackingNum
		WHERE NMR.Created = 'Y' AND NMR.Processed = 999 AND SA.Created = 'Y' AND SA.DescAbrv IN ('XMS') AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (SA.CreatedOn >= @StartDate AND SA.CreatedOn <= @StopDate)) a
			FULL OUTER JOIN
		(SELECT COUNT(SA.TrackingNum) AS NumberOfAccounts_Existing, SUM(SA.Amount) AS TotalDeposit_Existing
		FROM IMS.NewMemberSubAccount SA
		LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = SA.TrackingNum
		WHERE NMR.Created = 'I' AND NMR.Processed = 999 AND SA.Created = 'Y' AND SA.DescAbrv IN ('XMS') AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (SA.CreatedOn >= @StartDate AND SA.CreatedOn <= @StopDate)) b ON 1=1
	)
UNION
	SELECT 6 AS SortOrder, 'Dream Club' AS Product, * FROM
	(
		(SELECT COUNT(SA.TrackingNum) AS NumberOfAccounts_New, SUM(SA.Amount) AS TotalDeposit_New
		FROM IMS.NewMemberSubAccount SA
		LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = SA.TrackingNum
		WHERE NMR.Created = 'Y' AND NMR.Processed = 999 AND SA.Created = 'Y' AND SA.DescAbrv IN ('DRM') AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (SA.CreatedOn >= @StartDate AND SA.CreatedOn <= @StopDate)) a
			FULL OUTER JOIN
		(SELECT COUNT(SA.TrackingNum) AS NumberOfAccounts_Existing, SUM(SA.Amount) AS TotalDeposit_Existing
		FROM IMS.NewMemberSubAccount SA
		LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = SA.TrackingNum
		WHERE NMR.Created = 'I' AND NMR.Processed = 999 AND SA.Created = 'Y' AND SA.DescAbrv IN ('DRM') AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (SA.CreatedOn >= @StartDate AND SA.CreatedOn <= @StopDate)) b ON 1=1
	)
) x ORDER BY SortOrder
GO
/****** Object:  StoredProcedure [IMS].[sp_OAOReport_FundingDetailReport]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[sp_OAOReport_FundingDetailReport]
	@StartDate datetime,
	@StopDate datetime
AS
	DECLARE @ClientShortName varchar(10)
	SELECT @ClientShortName = ClientShortName from udt_ClientSettings

	--We are executing a string, so we have to verify that we are not executing SQL injection scripts. 
	--Because the short code is a defined value, and not a user input, we can check for ' or -- because these should never be in the name (because we control what this is). 
	--Normally I would recommend never ever ever (emphasize repeatedly) executing a string, but because our db is dristributed to client networks 
	--and we want to prevent passing other client names around, then this might be the one time that this actually makes sense to use. 
	if @ClientShortName IS NOT NULL AND CHARINDEX('''',@ClientShortName) = 0 AND CHARINDEX('--',@ClientShortName) = 0
	BEGIN
		DECLARE @ScaryExecutableString varchar(500)
		SET @ScaryExecutableString = N'IMS.sp' + @ClientShortName + '_OAOReport_FundingDetailReport'
		Exec @ScaryExecutableString @StartDate, @StopDate
	END	
	
GO
/****** Object:  StoredProcedure [IMS].[sp_OAOReport_Marketing1Report]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE Procedure [IMS].[sp_OAOReport_Marketing1Report]
	@StartDate datetime,
	@StopDate datetime
AS

SELECT
	NMR.TrackingNum
	, ISNULL(NMR.Account, '') AS AccountNumber
	, NMR.Branch AS Branch
	, NMR.Seller AS Teller
	, CONVERT(char(10), NMR.ApplyDate, 101) AS [Date_Time]
	, RTRIM(NMR.FName) + ' ' + RTRIM(NMR.LName) AS MemberName
---- For some reason, starting 12/13/2018, the actual Text started getting stored to the database instead of the Value.
--	, CASE WHEN REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(RTRIM(NMR.Marketing1), 'NEW-HIRE', ''), 'NEW-STUDENT', ''), 'SPONSOR', ''), 'FAMILY', ''), 'FRIEND', ''), 'MARKETING', ''), 'NEWSLETTER', ''), 'ADS', ''), 'WEBSITE', '') = ''
--		THEN REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(RTRIM(NMR.Marketing1), 'NEW-HIRE', 'New Hire Orientation'), 'NEW-STUDENT', 'New Student Check-In Fair'), 'SPONSOR', 'Sponsor/Benefits Fair'), 'FAMILY', 'Family Member'), 'FRIEND', 'Co-Worker/Friend'), 'MARKETING', 'Marketing (Postcards, brochures, emails)'), 'NEWSLETTER', 'Employer or student newsletter'), 'ADS', 'Caltech specific ads and sponsorships'), 'WEBSITE', 'CEFCU website')
--		ELSE 'OTHER: ' + RTRIM(NMR.Marketing1)
--	  END + CASE WHEN ISNULL(NMR.Marketing3, '') <> '' THEN '<br>&nbsp;<b>Certificate Code:</b> ' + REPLACE(NMR.Marketing3, '99,', '') ELSE '' END AS Marketing1Value
	, CASE WHEN REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(RTRIM(NMR.Marketing1), 'New Hire Orientation', ''), 'New Student Check-In Fair', ''), 'Sponsor/Benefits Fair', ''), 'Family Member', ''), 'Co-Worker/Friend', ''), 'Marketing (Postcards, brochures, emails)', ''), 'Employer or student newsletter', ''), 'Caltech specific ads and sponsorships', ''), 'CEFCU website', '') = ''
		THEN RTRIM(NMR.Marketing1)
		ELSE 'OTHER: ' + RTRIM(NMR.Marketing1)
	  END + CASE WHEN ISNULL(NMR.Marketing3, '') <> '' THEN '<br>&nbsp;<b>Certificate Code:</b> ' + REPLACE(NMR.Marketing3, '99,', '') ELSE '' END AS Marketing1Value
	, CASE NMR.Qualification3
		WHEN 'Employer'	THEN RTRIM(NMR.Qualification3) + ': ' + RTRIM(DEPT.Description)
		WHEN 'Group'	THEN RTRIM(NMR.Qualification3) + ': ' + RTRIM(DEPT.Description)
		WHEN 'Relative'	THEN RTRIM(NMR.Qualification3) + ': ' + RTRIM(NMR.Qualification1) + ' (' + RTRIM(NMR.Relationship) + ') ' + LEFT(RTRIM(NMR.Qualification2), 3) + '-' + LEFT(RIGHT(RTRIM(NMR.Qualification2), 7), 3) + '-' + RIGHT(RTRIM(NMR.Qualification2), 4)
		WHEN 'Member'	THEN RTRIM(NMR.Qualification3) + ': ' + RTRIM(NMR.Qualification1)
		ELSE ''
	  END AS Eligibility
FROM IMS.NewMemberRequest NMR
	LEFT OUTER JOIN IMS.Departments AS DEPT ON NMR.Department = DEPT.Department
WHERE
	NMR.Processed > 0
	AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> ''
	AND (NMR.ApplyDate >= @StartDate AND NMR.ApplyDate <= @StopDate)
--ORDER BY TrackingNum DESC
ORDER BY Marketing1Value DESC
GO
/****** Object:  StoredProcedure [IMS].[sp_OAOReport_ProductCountReport]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE Procedure [IMS].[sp_OAOReport_ProductCountReport]
	@StartDate datetime,
	@StopDate datetime
AS

SELECT Product, NumberOfAccounts_New, NumberOfAccounts_Existing FROM
(
	SELECT 1 AS SortOrder, 'Memberships' AS Product, * FROM
	(
		(SELECT COUNT(NMR.TrackingNum) AS NumberOfAccounts_New
		FROM IMS.NewMemberRequest NMR
		WHERE NMR.Created = 'Y' AND NMR.Processed = 999 AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate)) a
			FULL OUTER JOIN
		(SELECT COUNT(NMR.TrackingNum) AS NumberOfAccounts_Existing
		FROM IMS.NewMemberRequest NMR
		WHERE NMR.Created = 'I' AND NMR.Processed = 999 AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate)) b ON 1=1
	)
UNION
	SELECT 2 AS SortOrder, 'Checking' AS Product, * FROM
	(
		(SELECT COUNT(SA.TrackingNum) AS NumberOfAccounts_New
		FROM IMS.NewMemberSubAccount SA
		LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = SA.TrackingNum
		WHERE NMR.Created = 'Y' AND SA.Created = 'Y' AND SA.DescAbrv IN ('BCK', 'BCP', 'CHK', 'ECK', 'ISC', 'MCC', 'MYC', 'SBA', 'SSC', 'TCK') AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (SA.CreatedOn >= @StartDate AND SA.CreatedOn <= @StopDate)) a
			FULL OUTER JOIN
		(SELECT COUNT(SA.TrackingNum) AS NumberOfAccounts_Existing
		FROM IMS.NewMemberSubAccount SA
		LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = SA.TrackingNum
		WHERE NMR.Created = 'I' AND SA.Created = 'Y' AND SA.DescAbrv IN ('BCK', 'BCP', 'CHK', 'ECK', 'ISC', 'MCC', 'MYC', 'SBA', 'SSC', 'TCK') AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (SA.CreatedOn >= @StartDate AND SA.CreatedOn <= @StopDate)) b ON 1=1
	)
UNION
	SELECT 3 AS SortOrder, 'Money Market' AS Product, * FROM
	(
		(SELECT COUNT(SA.TrackingNum) AS NumberOfAccounts_New
		FROM IMS.NewMemberSubAccount SA
		LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = SA.TrackingNum
		WHERE NMR.Created = 'Y' AND SA.Created = 'Y' AND SA.DescAbrv IN ('MMC') AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (SA.CreatedOn >= @StartDate AND SA.CreatedOn <= @StopDate)) a
			FULL OUTER JOIN
		(SELECT COUNT(SA.TrackingNum) AS NumberOfAccounts_Existing
		FROM IMS.NewMemberSubAccount SA
		LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = SA.TrackingNum
		WHERE NMR.Created = 'I' AND SA.Created = 'Y' AND SA.DescAbrv IN ('MMC') AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (SA.CreatedOn >= @StartDate AND SA.CreatedOn <= @StopDate)) b ON 1=1
	)
UNION
	SELECT 4 AS SortOrder, 'Christmas Club' AS Product, * FROM
	(
		(SELECT COUNT(SA.TrackingNum) AS NumberOfAccounts_New
		FROM IMS.NewMemberSubAccount SA
		LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = SA.TrackingNum
		WHERE NMR.Created = 'Y' AND SA.Created = 'Y' AND SA.DescAbrv IN ('XMS') AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (SA.CreatedOn >= @StartDate AND SA.CreatedOn <= @StopDate)) a
			FULL OUTER JOIN
		(SELECT COUNT(SA.TrackingNum) AS NumberOfAccounts_Existing
		FROM IMS.NewMemberSubAccount SA
		LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = SA.TrackingNum
		WHERE NMR.Created = 'I' AND SA.Created = 'Y' AND SA.DescAbrv IN ('XMS') AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (SA.CreatedOn >= @StartDate AND SA.CreatedOn <= @StopDate)) b ON 1=1
	)
UNION
	SELECT 5 AS SortOrder, 'Dream Club' AS Product, * FROM
	(
		(SELECT COUNT(SA.TrackingNum) AS NumberOfAccounts_New
		FROM IMS.NewMemberSubAccount SA
		LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = SA.TrackingNum
		WHERE NMR.Created = 'Y' AND SA.Created = 'Y' AND SA.DescAbrv IN ('DRM') AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (SA.CreatedOn >= @StartDate AND SA.CreatedOn <= @StopDate)) a
			FULL OUTER JOIN
		(SELECT COUNT(SA.TrackingNum) AS NumberOfAccounts_Existing
		FROM IMS.NewMemberSubAccount SA
		LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = SA.TrackingNum
		WHERE NMR.Created = 'I' AND SA.Created = 'Y' AND SA.DescAbrv IN ('DRM') AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (SA.CreatedOn >= @StartDate AND SA.CreatedOn <= @StopDate)) b ON 1=1
	)
UNION
	SELECT 6 AS SortOrder, 'Debit Card' AS Product, * FROM
	(
		(SELECT COUNT(PC.TrackingNum) AS NumberOfAccounts_New
		FROM IMS.NewMemberPlasticCard PC
		LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = PC.TrackingNum
		WHERE NMR.Created = 'Y' AND PC.Created = 'Y' AND PC.TypeCode IN ('C') AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (PC.CreatedOn >= @StartDate AND PC.CreatedOn <= @StopDate)) a
			FULL OUTER JOIN
		(SELECT COUNT(PC.TrackingNum) AS NumberOfAccounts_Existing
		FROM IMS.NewMemberPlasticCard PC
		LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = PC.TrackingNum
		WHERE NMR.Created = 'I' AND PC.Created = 'Y' AND PC.TypeCode IN ('C') AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (PC.CreatedOn >= @StartDate AND PC.CreatedOn <= @StopDate)) b ON 1=1
	)
UNION
	SELECT 7 AS SortOrder, 'Phone Banking' AS Product, * FROM
	(
		(SELECT COUNT(NMR.TrackingNum) AS NumberOfAccounts_New
		FROM IMS.NewMemberRequest NMR
		WHERE NMR.Created = 'Y' AND NMR.Processed = 999 AND C24Access = 'Y' AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate)) a
			FULL OUTER JOIN
		(SELECT COUNT(NMR.TrackingNum) AS NumberOfAccounts_Existing
		FROM IMS.NewMemberRequest NMR
		WHERE NMR.Created = 'I' AND NMR.Processed = 999 AND C24Access = 'Y' AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate)) b ON 1=1
	)
UNION
	SELECT 8 AS SortOrder, 'Courtesy Pay' AS Product, * FROM
	(
		(SELECT COUNT(SA.TrackingNum) AS NumberOfAccounts_New
		FROM IMS.NewMemberSubAccount SA
		LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = SA.TrackingNum
		WHERE NMR.Created = 'Y' AND SA.Created = 'Y' AND SA.OptInOptOutOptionID = 1 AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (SA.CreatedOn >= @StartDate AND SA.CreatedOn <= @StopDate)) a
			FULL OUTER JOIN
		(SELECT COUNT(SA.TrackingNum) AS NumberOfAccounts_Existing
		FROM IMS.NewMemberSubAccount SA
		LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = SA.TrackingNum
		WHERE NMR.Created = 'I' AND SA.Created = 'Y' AND SA.OptInOptOutOptionID = 1 AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (SA.CreatedOn >= @StartDate AND SA.CreatedOn <= @StopDate)) b ON 1=1
	)
UNION
	SELECT 9 AS SortOrder, 'Overdraft Transfer' AS Product, * FROM
	(
		(SELECT COUNT(OD.TrackingNum) AS NumberOfAccounts_New
		FROM IMS.NewMemberOverdraftLink OD
		LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = OD.TrackingNum
		WHERE NMR.Created = 'Y' AND OD.Created = 'Y' AND (OD.CreatedOn >= @StartDate AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND OD.CreatedOn <= @StopDate)) a
			FULL OUTER JOIN
		(SELECT COUNT(OD.TrackingNum) AS NumberOfAccounts_Existing
		FROM IMS.NewMemberOverdraftLink OD
		LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = OD.TrackingNum
		WHERE NMR.Created = 'I' AND OD.Created = 'Y' AND (OD.CreatedOn >= @StartDate AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND OD.CreatedOn <= @StopDate)) b ON 1=1
	)
) x ORDER BY SortOrder
GO
/****** Object:  StoredProcedure [IMS].[sp_ProcessQAdd]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [IMS].[sp_ProcessQAdd]
	(
		@TrackingNum int,
		@TransactionType char(32),
		@Resource char(16) = '',
		@QType char(1) = '',
		@HostError int = 0,
		@HostErrorString char(85) = '',
		@IMSError int = 0,
		@IMSErrorString char(85) = '',
		@TransactionProcessed int = 0,
		@OrigType char(32) = '',
		@ClientIP char(15)= '',
		@WebIP char(15) = '',
		@ClusterID char(10) = '',
		@TellerInitials char(3) = '',
		@TellerID char(10) = '',
		@MaxRetry int = 100,
		@sAction char(1) OUTPUT
		
	)
AS
/******************************************************************************
**		File: 
**		Name: sp_ProcessQAdd
**		Desc: 
**
**	'--- Add a new row to the procesQ table. If the row already exists then the "attemps" field will 
**	'--- be incremented by 1. If the "Attempts" field is greater than the RetryCount then the row is
**	'--- removed from the ProcessQ table.
**
**		This template can be customized:
**              
**		Return values:
** 
**		Called by:   
**              
**		Parameters:
**		Input							Output
**     ----------							-----------
**
**		Auth: 
**		Date: 
*******************************************************************************
**		Change History
*******************************************************************************
**		Date:		Author:	Version			Description:
**		--------	--------	-------			-------------------------------------------
**    3/07/07	BG			v1.0.0			
*******************************************************************************/
DECLARE @Attempts int

 SELECT @Attempts = Attempts FROM  IMS.ProcessQ WHERE TrackingNum = @TrackingNum AND TransactionType = @TransactionType AND  TransactionProcessed = @TransactionProcessed
  IF @Attempts IS NOT NULL 
  BEGIN
	 IF @Attempts >= @MaxRetry 
	 BEGIN
		DELETE IMS.ProcessQ WHERE TrackingNum = @TrackingNum AND TransactionType = @TransactionType AND  TransactionProcessed = @TransactionProcessed
		SET @sAction = 'D'
		RETURN
	 END
	 ELSE
	 BEGIN
	 	UPDATE IMS.ProcessQ SET Attempts = @Attempts + 1 WHERE TrackingNum = @TrackingNum AND TransactionType = @TransactionType AND  TransactionProcessed = @TransactionProcessed
		SET @sAction = 'C'
		RETURN
	 END
  END
  ELSE
  BEGIN
	 INSERT INTO IMS.ProcessQ (
				TrackingNum,
				TransActionType,
				Resource,
				QType,
				HostError,
				HostErrorString,
				IMSError,
				IMSErrorString,
				TransactionProcessed,
				OrigType,
				ClientIP,
				WebIP,
				ClusterID,
				TellerInitials,
				TellerID,
				Attempts,
				QDate) 
	 VALUES (
				@TrackingNum,
				@TransActionType,
				@Resource,
				@QType,
				@HostError,
				@HostErrorString,
				@IMSError,
				@IMSErrorString,
				@TransactionProcessed,
				@OrigType,
				@ClientIP,
				@WebIP,
				@ClusterID,
				@TellerInitials,
				@TellerID,
				0,
				GetDate())
 		SET @sAction = 'N'
 		RETURN
 END
	SET @sAction = 'E' /* Error occured if we make it to here */
	RETURN
GO
/****** Object:  StoredProcedure [IMS].[sp_ProcessQDelete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [IMS].[sp_ProcessQDelete]

	(
		@TrackingNum int,
		@TransactionType char(32) = '',
		@TransactionProcessed int = 0
	)

AS
BEGIN
  IF @TransactionType <> '' AND @TransactionProcessed > 0 
	 DELETE ProcessQ WHERE TrackingNum = @TrackingNum AND TransactionType = @TransactionType and TransactionProcessed = @TransactionProcessed
  ELSE IF @TransactionType = '' AND @TransactionProcessed > 0 
 	 DELETE ProcessQ WHERE TrackingNum = @TrackingNum AND TransactionProcessed = @TransactionProcessed
  ELSE IF @TransactionType <> '' AND @TransactionProcessed = 0 
 	 DELETE ProcessQ WHERE TrackingNum = @TrackingNum AND TransactionType = @TransactionType
  ELSE IF @TransactionType = '' AND @TransactionProcessed = 0 
  	 DELETE ProcessQ WHERE TrackingNum = @TrackingNum 
END
  
	/* SET NOCOUNT ON */
	RETURN
GO
/****** Object:  StoredProcedure [IMS].[sp_ProcessQSelect]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [IMS].[sp_ProcessQSelect]
	(
		@ServerType char(32) = ''
	)

AS
 SELECT * FROM ProcessQ WHERE Resource = @ServerType
GO
/****** Object:  StoredProcedure [IMS].[sp_ProductRates_Inquiry_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Jonathan Eagar
-- Create date: 03/04/2007
-- Description:	Gets a rate for a given trackinnum, SLtype, Tier, and Rate
-- =============================================
CREATE PROCEDURE [IMS].[sp_ProductRates_Inquiry_Select] 
	-- Add the parameters for the stored procedure here
	@TrackingNum int, 
	@SLType char(1),
	@Tier int,
	@Term int	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT top 1 
	IMS.udt_ProductRates.Rate	
	FROM IMS.udt_ProductRates
	WHERE @Term >= IMS.udt_ProductRates.MinTerm AND @Term <= IMS.udt_ProductRates.MaxTerm and IMS.udt_ProductRates.Tier = @Tier and IMS.udt_ProductRates.TrackingNum = @TrackingNum and IMS.udt_ProductRates.SLType = @SLType
	Order By IMS.udt_ProductRates.MinTerm ASC, IMS.udt_ProductRates.MaxTerm ASC, IMS.udt_ProductRates.AsOfDate DESC

END

GO
/****** Object:  StoredProcedure [IMS].[sp_ProductRatesxlate_Admin_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ProductRatesxlate_Admin_Delete]
	@ID int
AS

DELETE FROM udt_ProductRates
WHERE 1=1 AND ID = @ID

GO
/****** Object:  StoredProcedure [IMS].[sp_ProductRatesxlate_Admin_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ProductRatesxlate_Admin_DeleteAll]
	@TrackingNum int,
	@SLType char(1),
	@Tier int
AS

DELETE FROM udt_ProductRates
WHERE 1=1 AND TrackingNum = @TrackingNum AND SLType = @SLType AND Tier = @Tier

GO
/****** Object:  StoredProcedure [IMS].[sp_ProductRatesxlate_Admin_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ProductRatesxlate_Admin_Insert]
	@ID int OUTPUT,
	@TrackingNum int,
	@SLType char(1),
	@Tier int,
	@MinTerm int,
	@MaxTerm int,
	@Rate decimal(18,3),
	@AsOfDate datetime
AS

INSERT INTO udt_ProductRates
(TrackingNum, SLType, Tier, MinTerm, MaxTerm, Rate, AsOfDate)
VALUES
(@TrackingNum, @SLType, @Tier, @MinTerm, @MaxTerm, @Rate, @AsOfDate)

SELECT @ID = @@IDENTITY FROM udt_ProductRates

GO
/****** Object:  StoredProcedure [IMS].[sp_ProductRatesxlate_Admin_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ProductRatesxlate_Admin_InsertIfNew]
	@ID int OUTPUT,
	@TrackingNum int,
	@SLType char(1),
	@Tier int,
	@MinTerm int,
	@MaxTerm int,
	@Rate decimal(18,3),
	@AsOfDate datetime
AS

DECLARE @Count int
SELECT @Count = COUNT(MinTerm) FROM udt_ProductRates WHERE 1=1 AND TrackingNum = @TrackingNum AND SLType = @SLType AND Tier = @Tier

IF @Count = 0
	BEGIN
		INSERT INTO udt_ProductRates
		(TrackingNum, SLType, Tier, MinTerm, MaxTerm, Rate, AsOfDate)
		VALUES
		(@TrackingNum, @SLType, @Tier, @MinTerm, @MaxTerm, @Rate, @AsOfDate)

		SELECT @ID = @@IDENTITY FROM udt_ProductRates
	END
ELSE	BEGIN
		UPDATE udt_ProductRates SET
			MinTerm = @MinTerm,
			MaxTerm = @MaxTerm,
			Rate = @Rate,
			AsOfDate = @AsOfDate
		WHERE 1=1 AND TrackingNum = @TrackingNum AND SLType = @SLType AND Tier = @Tier

		SELECT TOP 1 @ID = ID FROM udt_ProductRates
		WHERE 1=1 AND TrackingNum = @TrackingNum AND SLType = @SLType AND Tier = @Tier
		ORDER BY ID DESC
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_ProductRatesxlate_Admin_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ProductRatesxlate_Admin_Select]
	@ID int
AS

SELECT * FROM udt_ProductRates
WHERE 1=1 AND ID = @ID

GO
/****** Object:  StoredProcedure [IMS].[sp_ProductRatesxlate_Admin_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ProductRatesxlate_Admin_SelectAll]
	@TrackingNum int,
	@SLType char(1),
	@Tier int
AS

SELECT * FROM udt_ProductRates
WHERE 1=1 AND TrackingNum = @TrackingNum AND SLType = @SLType AND Tier = @Tier

GO
/****** Object:  StoredProcedure [IMS].[sp_ProductRatesxlate_Admin_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ProductRatesxlate_Admin_Update]
	@ID int,
	@TrackingNum varchar(100),
	@SLType varchar(1),
	@Tier varchar(100),
	@MinTerm varchar(100),
	@MaxTerm varchar(100),
	@Rate varchar(100),
	@AsOfDate varchar(100)
AS

IF @TrackingNum <> ''
	BEGIN
		DECLARE @TrackingNum_CASTED int
		IF @TrackingNum = '^'
			BEGIN
				SET @TrackingNum_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @TrackingNum_CASTED = CAST(@TrackingNum AS int)
			END

		UPDATE udt_ProductRates
			SET TrackingNum = @TrackingNum_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @SLType <> ''
	BEGIN
		DECLARE @SLType_CASTED char(1)
		IF @SLType = '^'
			BEGIN
				SET @SLType_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @SLType_CASTED = CAST(@SLType AS char(1))
			END

		UPDATE udt_ProductRates
			SET SLType = @SLType_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @Tier <> ''
	BEGIN
		DECLARE @Tier_CASTED int
		IF @Tier = '^'
			BEGIN
				SET @Tier_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Tier_CASTED = CAST(@Tier AS int)
			END

		UPDATE udt_ProductRates
			SET Tier = @Tier_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @MinTerm <> ''
	BEGIN
		DECLARE @MinTerm_CASTED int
		IF @MinTerm = '^'
			BEGIN
				SET @MinTerm_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @MinTerm_CASTED = CAST(@MinTerm AS int)
			END

		UPDATE udt_ProductRates
			SET MinTerm = @MinTerm_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @MaxTerm <> ''
	BEGIN
		DECLARE @MaxTerm_CASTED int
		IF @MaxTerm = '^'
			BEGIN
				SET @MaxTerm_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @MaxTerm_CASTED = CAST(@MaxTerm AS int)
			END

		UPDATE udt_ProductRates
			SET MaxTerm = @MaxTerm_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @Rate <> ''
	BEGIN
		DECLARE @Rate_CASTED decimal(18,3)
		IF @Rate = '^'
			BEGIN
				SET @Rate_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Rate_CASTED = CAST(@Rate AS decimal(18,3))
			END

		UPDATE udt_ProductRates
			SET Rate = @Rate_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @AsOfDate <> ''
	BEGIN
		DECLARE @AsOfDate_CASTED datetime
		IF @AsOfDate = '^'
			BEGIN
				SET @AsOfDate_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @AsOfDate_CASTED = CAST(@AsOfDate AS datetime)
			END

		UPDATE udt_ProductRates
			SET AsOfDate = @AsOfDate_CASTED
		WHERE 1=1 AND ID = @ID
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_ProductRatesxlate_Inquiry_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ProductRatesxlate_Inquiry_Select]
	@TrackingNum int,
	@SLType char(1),
	@Tier int,
	@Term int
AS

EXEC sp_ProductRates_Inquiry_Select @TrackingNum, @SLType, @Tier, @Term

GO
/****** Object:  StoredProcedure [IMS].[sp_ReviewQueue_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [IMS].[sp_ReviewQueue_SelectAll]
	@StartDate DATETIME = NULL,
	@EndDate DATETIME = NULL,
	@StatusCode VARCHAR(2) = NULL
AS
	DECLARE @ClientShortName varchar(10)
	SELECT @ClientShortName = ClientShortName from udt_ClientSettings

	--We are executing a string, so we have to verify that we are not executing SQL injection scripts.
	--Because the short code is a defined value, and not a user input, we can check for ' or -- because these should never be in the name (because we control what this is). 
	--Normally I would recommend never ever ever (emphasize repeatedly) executing a string, but because our db is dristributed to client networks 
	--and we want to prevent passing other client names around, then this might be the one time that this actually makes sense to use. 
	if @ClientShortName IS NOT NULL AND CHARINDEX('''',@ClientShortName) = 0 AND CHARINDEX('--',@ClientShortName) = 0
	BEGIN
		DECLARE @ScaryExecutableString varchar(500)
		SET @ScaryExecutableString = N'IMS.sp' + @ClientShortName + '_ReviewQueue_SelectAll'
		Exec @ScaryExecutableString @StartDate, @EndDate, @StatusCode
	END	
GO
/****** Object:  StoredProcedure [IMS].[sp_ReviewQueuexlate_ReviewQueue_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ReviewQueuexlate_ReviewQueue_SelectAll]
	@StartDate datetime,
	@EndDate datetime,
	@StatusCode varchar(2)
AS

EXEC sp_ReviewQueue_SelectAll @StartDate, @EndDate, @StatusCode

GO
/****** Object:  StoredProcedure [IMS].[sp_ReviewQueuexlate_ReviewQueueConfig_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ReviewQueuexlate_ReviewQueueConfig_Delete]
	@ID int
AS

DELETE FROM ReviewQueueConfig
WHERE 1=1 AND ID = @ID

GO
/****** Object:  StoredProcedure [IMS].[sp_ReviewQueuexlate_ReviewQueueConfig_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ReviewQueuexlate_ReviewQueueConfig_DeleteAll]
AS

DELETE FROM ReviewQueueConfig
WHERE 1=1

GO
/****** Object:  StoredProcedure [IMS].[sp_ReviewQueuexlate_ReviewQueueConfig_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ReviewQueuexlate_ReviewQueueConfig_Insert]
	@ID int OUTPUT,
	@StatusCode varchar(2),
	@StatusName varchar(50),
	@ReasonCode varchar(50),
	@Hierarchy int
AS

INSERT INTO ReviewQueueConfig
(StatusCode, StatusName, ReasonCode, Hierarchy)
VALUES
(@StatusCode, @StatusName, @ReasonCode, @Hierarchy)

SELECT @ID = @@IDENTITY FROM ReviewQueueConfig

GO
/****** Object:  StoredProcedure [IMS].[sp_ReviewQueuexlate_ReviewQueueConfig_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ReviewQueuexlate_ReviewQueueConfig_InsertIfNew]
	@ID int OUTPUT,
	@StatusCode varchar(2),
	@StatusName varchar(50),
	@ReasonCode varchar(50),
	@Hierarchy int
AS

DECLARE @Count int
SELECT @Count = COUNT(StatusCode) FROM ReviewQueueConfig WHERE 1=1

IF @Count = 0
	BEGIN
		INSERT INTO ReviewQueueConfig
		(StatusCode, StatusName, ReasonCode, Hierarchy)
		VALUES
		(@StatusCode, @StatusName, @ReasonCode, @Hierarchy)

		SELECT @ID = @@IDENTITY FROM ReviewQueueConfig
	END
ELSE	BEGIN
		UPDATE ReviewQueueConfig SET
			StatusCode = @StatusCode,
			StatusName = @StatusName,
			ReasonCode = @ReasonCode,
			Hierarchy = @Hierarchy
		WHERE 1=1

		SELECT TOP 1 @ID = ID FROM ReviewQueueConfig
		WHERE 1=1
		ORDER BY ID DESC
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_ReviewQueuexlate_ReviewQueueConfig_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ReviewQueuexlate_ReviewQueueConfig_Select]
	@ID int
AS

SELECT * FROM ReviewQueueConfig
WHERE 1=1 AND ID = @ID
ORDER BY Hierarchy

GO
/****** Object:  StoredProcedure [IMS].[sp_ReviewQueuexlate_ReviewQueueConfig_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ReviewQueuexlate_ReviewQueueConfig_SelectAll]
AS

SELECT * FROM ReviewQueueConfig
WHERE 1=1
ORDER BY Hierarchy

GO
/****** Object:  StoredProcedure [IMS].[sp_ReviewQueuexlate_ReviewQueueConfig_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_ReviewQueuexlate_ReviewQueueConfig_Update]
	@ID int,
	@StatusCode varchar(2),
	@StatusName varchar(50),
	@ReasonCode varchar(50),
	@Hierarchy varchar(100)
AS

IF @StatusCode <> ''
	BEGIN
		DECLARE @StatusCode_CASTED varchar(2)
		IF @StatusCode = '^'
			BEGIN
				SET @StatusCode_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @StatusCode_CASTED = CAST(@StatusCode AS varchar(2))
			END

		UPDATE ReviewQueueConfig
			SET StatusCode = @StatusCode_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @StatusName <> ''
	BEGIN
		DECLARE @StatusName_CASTED varchar(50)
		IF @StatusName = '^'
			BEGIN
				SET @StatusName_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @StatusName_CASTED = CAST(@StatusName AS varchar(50))
			END

		UPDATE ReviewQueueConfig
			SET StatusName = @StatusName_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @ReasonCode <> ''
	BEGIN
		DECLARE @ReasonCode_CASTED varchar(50)
		IF @ReasonCode = '^'
			BEGIN
				SET @ReasonCode_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ReasonCode_CASTED = CAST(@ReasonCode AS varchar(50))
			END

		UPDATE ReviewQueueConfig
			SET ReasonCode = @ReasonCode_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @Hierarchy <> ''
	BEGIN
		DECLARE @Hierarchy_CASTED int
		IF @Hierarchy = '^'
			BEGIN
				SET @Hierarchy_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Hierarchy_CASTED = CAST(@Hierarchy AS int)
			END

		UPDATE ReviewQueueConfig
			SET Hierarchy = @Hierarchy_CASTED
		WHERE 1=1 AND ID = @ID
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_SecureMessagingxlate_SecureMailAttachment_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_SecureMessagingxlate_SecureMailAttachment_Delete]
	@ID int
AS

DELETE FROM SecureMailAttachment
WHERE 1=1 AND ID = @ID

GO
/****** Object:  StoredProcedure [IMS].[sp_SecureMessagingxlate_SecureMailAttachment_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_SecureMessagingxlate_SecureMailAttachment_DeleteAll]
	@ThreadId int
AS

DELETE FROM SecureMailAttachment
WHERE 1=1 AND ThreadId = @ThreadId

GO
/****** Object:  StoredProcedure [IMS].[sp_SecureMessagingxlate_SecureMailAttachment_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_SecureMessagingxlate_SecureMailAttachment_Insert]
	@ID int OUTPUT,
	@RequiredDocID int,
	@Sequence int,
	@FileName varchar(200),
	@FileData varbinary(max),
	@Status varchar(10),
	@ContentType varchar(100),
	@OtherDocID int,
	@ThreadId int
AS

INSERT INTO SecureMailAttachment
(ThreadId, RequiredDocID, Sequence, FileName, FileData, Status, ContentType, OtherDocID)
VALUES
(@ThreadId, @RequiredDocID, @Sequence, @FileName, @FileData, @Status, @ContentType, @OtherDocID)

SELECT @ID = SCOPE_IDENTITY()

GO
/****** Object:  StoredProcedure [IMS].[sp_SecureMessagingxlate_SecureMailAttachment_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_SecureMessagingxlate_SecureMailAttachment_InsertIfNew]
	@ID int OUTPUT,
	@RequiredDocID int,
	@Sequence int,
	@FileName varchar(200),
	@FileData varbinary(max),
	@Status varchar(10),
	@ContentType varchar(100),
	@OtherDocID int,
	@ThreadId int
AS

IF NOT EXISTS (SELECT * FROM SecureMailAttachment WHERE 1=1 AND ThreadId = @ThreadId)
	BEGIN
		INSERT INTO SecureMailAttachment
		(ThreadId, RequiredDocID, Sequence, FileName, FileData, Status, ContentType, OtherDocID)
		VALUES
		(@ThreadId, @RequiredDocID, @Sequence, @FileName, @FileData, @Status, @ContentType, @OtherDocID)

		SELECT @ID = SCOPE_IDENTITY()
	END
ELSE	BEGIN
		UPDATE SecureMailAttachment SET
			RequiredDocID = @RequiredDocID,
			Sequence = @Sequence,
			FileName = @FileName,
			FileData = @FileData,
			Status = @Status,
			ContentType = @ContentType,
			OtherDocID = @OtherDocID
		WHERE 1=1 AND ThreadId = @ThreadId

		SELECT TOP 1 @ID = ID FROM SecureMailAttachment
		WHERE 1=1 AND ThreadId = @ThreadId
		ORDER BY ID DESC
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_SecureMessagingxlate_SecureMailAttachment_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_SecureMessagingxlate_SecureMailAttachment_Select]
	@ID int
AS

SELECT * FROM SecureMailAttachment
WHERE 1=1 AND ID = @ID
ORDER BY Sequence

GO
/****** Object:  StoredProcedure [IMS].[sp_SecureMessagingxlate_SecureMailAttachment_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_SecureMessagingxlate_SecureMailAttachment_SelectAll]
	@ThreadId int
AS

EXEC sp_SecureMessagingxlate_SelectAllSecureMailAttachment @ThreadId

GO
/****** Object:  StoredProcedure [IMS].[sp_SecureMessagingxlate_SecureMailAttachment_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_SecureMessagingxlate_SecureMailAttachment_Update]
	@ID int,
	@RequiredDocID varchar(100),
	@Sequence varchar(100),
	@FileName varchar(200),
	@FileData varchar(100),
	@Status varchar(10),
	@ContentType varchar(100),
	@OtherDocID varchar(100),
	@ThreadId varchar(100)
AS

IF @ThreadId <> ''
	BEGIN
		DECLARE @ThreadId_CASTED int
		IF @ThreadId = '^'
			BEGIN
				SET @ThreadId_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ThreadId_CASTED = CAST(@ThreadId AS int)
			END

		UPDATE SecureMailAttachment
			SET ThreadId = @ThreadId_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @RequiredDocID <> ''
	BEGIN
		DECLARE @RequiredDocID_CASTED int
		IF @RequiredDocID = '^'
			BEGIN
				SET @RequiredDocID_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @RequiredDocID_CASTED = CAST(@RequiredDocID AS int)
			END

		UPDATE SecureMailAttachment
			SET RequiredDocID = @RequiredDocID_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @Sequence <> ''
	BEGIN
		DECLARE @Sequence_CASTED int
		IF @Sequence = '^'
			BEGIN
				SET @Sequence_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Sequence_CASTED = CAST(@Sequence AS int)
			END

		UPDATE SecureMailAttachment
			SET Sequence = @Sequence_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @FileName <> ''
	BEGIN
		DECLARE @FileName_CASTED varchar(200)
		IF @FileName = '^'
			BEGIN
				SET @FileName_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @FileName_CASTED = CAST(@FileName AS varchar(200))
			END

		UPDATE SecureMailAttachment
			SET FileName = @FileName_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @FileData <> ''
	BEGIN
		DECLARE @FileData_CASTED varbinary(max)
		IF @FileData = '^'
			BEGIN
				SET @FileData_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @FileData_CASTED = CAST(@FileData AS varbinary(max))
			END

		UPDATE SecureMailAttachment
			SET FileData = @FileData_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @Status <> ''
	BEGIN
		DECLARE @Status_CASTED varchar(10)
		IF @Status = '^'
			BEGIN
				SET @Status_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Status_CASTED = CAST(@Status AS varchar(10))
			END

		UPDATE SecureMailAttachment
			SET Status = @Status_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @ContentType <> ''
	BEGIN
		DECLARE @ContentType_CASTED varchar(100)
		IF @ContentType = '^'
			BEGIN
				SET @ContentType_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ContentType_CASTED = CAST(@ContentType AS varchar(100))
			END

		UPDATE SecureMailAttachment
			SET ContentType = @ContentType_CASTED
		WHERE 1=1 AND ID = @ID
	END

IF @OtherDocID <> ''
	BEGIN
		DECLARE @OtherDocID_CASTED int
		IF @OtherDocID = '^'
			BEGIN
				SET @OtherDocID_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @OtherDocID_CASTED = CAST(@OtherDocID AS int)
			END

		UPDATE SecureMailAttachment
			SET OtherDocID = @OtherDocID_CASTED
		WHERE 1=1 AND ID = @ID
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_SecureMessagingxlate_SecureMailHeader_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_SecureMessagingxlate_SecureMailHeader_Delete]
	@ThreadId int
AS

DELETE FROM SecureMailThread
WHERE 1=1 AND ThreadId = @ThreadId

GO
/****** Object:  StoredProcedure [IMS].[sp_SecureMessagingxlate_SecureMailHeader_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_SecureMessagingxlate_SecureMailHeader_DeleteAll]
	@TrackingNum int,
	@JointOwnerSequence int,
	@Account int
AS

DELETE FROM SecureMailThread
WHERE 1=1 AND TrackingNum = @TrackingNum AND JointOwnerSequence = @JointOwnerSequence AND Account = @Account

GO
/****** Object:  StoredProcedure [IMS].[sp_SecureMessagingxlate_SecureMailHeader_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_SecureMessagingxlate_SecureMailHeader_Insert]
	@TrackingNum int,
	@JointOwnerSequence int,
	@Account int,
	@ThreadId int OUTPUT,
	@LastUpdate datetime,
	@UserStatus char(20),
	@CSRStatus char(20),
	@Subject char(40)
AS

INSERT INTO SecureMailThread
(TrackingNum, JointOwnerSequence, Account, LastUpdate, UserStatus, CSRStatus, Subject)
VALUES
(@TrackingNum, @JointOwnerSequence, @Account, @LastUpdate, @UserStatus, @CSRStatus, @Subject)

SELECT @ThreadId = @@IDENTITY FROM SecureMailThread

GO
/****** Object:  StoredProcedure [IMS].[sp_SecureMessagingxlate_SecureMailHeader_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_SecureMessagingxlate_SecureMailHeader_InsertIfNew]
	@TrackingNum int,
	@JointOwnerSequence int,
	@Account int,
	@ThreadId int OUTPUT,
	@LastUpdate datetime,
	@UserStatus char(20),
	@CSRStatus char(20),
	@Subject char(40)
AS

IF NOT EXISTS (SELECT * FROM SecureMailThread WHERE 1=1 AND TrackingNum = @TrackingNum AND JointOwnerSequence = @JointOwnerSequence AND Account = @Account)
	BEGIN
		INSERT INTO SecureMailThread
		(TrackingNum, JointOwnerSequence, Account, LastUpdate, UserStatus, CSRStatus, Subject)
		VALUES
		(@TrackingNum, @JointOwnerSequence, @Account, @LastUpdate, @UserStatus, @CSRStatus, @Subject)

		SELECT @ThreadId = @@IDENTITY FROM SecureMailThread
	END
ELSE	BEGIN
		UPDATE SecureMailThread SET
			LastUpdate = @LastUpdate,
			UserStatus = @UserStatus,
			CSRStatus = @CSRStatus,
			Subject = @Subject
		WHERE 1=1 AND TrackingNum = @TrackingNum AND JointOwnerSequence = @JointOwnerSequence AND Account = @Account

		SELECT TOP 1 @ThreadId = ThreadId FROM SecureMailThread
		WHERE 1=1 AND TrackingNum = @TrackingNum AND JointOwnerSequence = @JointOwnerSequence AND Account = @Account
		ORDER BY ThreadId DESC
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_SecureMessagingxlate_SecureMailHeader_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_SecureMessagingxlate_SecureMailHeader_Select]
	@ThreadId int
AS

SELECT * FROM SecureMailThread
WHERE 1=1 AND ThreadId = @ThreadId
ORDER BY LastUpdate DESC

GO
/****** Object:  StoredProcedure [IMS].[sp_SecureMessagingxlate_SecureMailHeader_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_SecureMessagingxlate_SecureMailHeader_SelectAll]
	@TrackingNum int,
	@JointOwnerSequence int,
	@Account int
AS

SELECT * FROM SecureMailThread
WHERE 1=1 AND TrackingNum = @TrackingNum AND (@JointOwnerSequence < 0 Or JointOwnerSequence = @JointOwnerSequence) AND Account = @Account
ORDER BY LastUpdate DESC

GO
/****** Object:  StoredProcedure [IMS].[sp_SecureMessagingxlate_SecureMailHeader_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_SecureMessagingxlate_SecureMailHeader_Update]
	@TrackingNum varchar(100),
	@JointOwnerSequence varchar(100),
	@Account varchar(100),
	@ThreadId int,
	@LastUpdate varchar(100),
	@UserStatus varchar(20),
	@CSRStatus varchar(20),
	@Subject varchar(40)
AS

IF @TrackingNum <> ''
	BEGIN
		DECLARE @TrackingNum_CASTED int
		IF @TrackingNum = '^'
			BEGIN
				SET @TrackingNum_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @TrackingNum_CASTED = CAST(@TrackingNum AS int)
			END

		UPDATE SecureMailThread
			SET TrackingNum = @TrackingNum_CASTED
		WHERE 1=1 AND ThreadId = @ThreadId
	END

IF @JointOwnerSequence <> ''
	BEGIN
		DECLARE @JointOwnerSequence_CASTED int
		IF @JointOwnerSequence = '^'
			BEGIN
				SET @JointOwnerSequence_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @JointOwnerSequence_CASTED = CAST(@JointOwnerSequence AS int)
			END

		UPDATE SecureMailThread
			SET JointOwnerSequence = @JointOwnerSequence_CASTED
		WHERE 1=1 AND ThreadId = @ThreadId
	END

IF @Account <> ''
	BEGIN
		DECLARE @Account_CASTED int
		IF @Account = '^'
			BEGIN
				SET @Account_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Account_CASTED = CAST(@Account AS int)
			END

		UPDATE SecureMailThread
			SET Account = @Account_CASTED
		WHERE 1=1 AND ThreadId = @ThreadId
	END

IF @LastUpdate <> ''
	BEGIN
		DECLARE @LastUpdate_CASTED datetime
		IF @LastUpdate = '^'
			BEGIN
				SET @LastUpdate_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @LastUpdate_CASTED = CAST(@LastUpdate AS datetime)
			END

		UPDATE SecureMailThread
			SET LastUpdate = @LastUpdate_CASTED
		WHERE 1=1 AND ThreadId = @ThreadId
	END

IF @UserStatus <> ''
	BEGIN
		DECLARE @UserStatus_CASTED char(20)
		IF @UserStatus = '^'
			BEGIN
				SET @UserStatus_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @UserStatus_CASTED = CAST(@UserStatus AS char(20))
			END

		UPDATE SecureMailThread
			SET UserStatus = @UserStatus_CASTED
		WHERE 1=1 AND ThreadId = @ThreadId
	END

IF @CSRStatus <> ''
	BEGIN
		DECLARE @CSRStatus_CASTED char(20)
		IF @CSRStatus = '^'
			BEGIN
				SET @CSRStatus_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @CSRStatus_CASTED = CAST(@CSRStatus AS char(20))
			END

		UPDATE SecureMailThread
			SET CSRStatus = @CSRStatus_CASTED
		WHERE 1=1 AND ThreadId = @ThreadId
	END

IF @Subject <> ''
	BEGIN
		DECLARE @Subject_CASTED char(40)
		IF @Subject = '^'
			BEGIN
				SET @Subject_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Subject_CASTED = CAST(@Subject AS char(40))
			END

		UPDATE SecureMailThread
			SET Subject = @Subject_CASTED
		WHERE 1=1 AND ThreadId = @ThreadId
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_SecureMessagingxlate_SecureMailMessage_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_SecureMessagingxlate_SecureMailMessage_Delete]
	@ThreadId int
AS

DELETE FROM SecureMailMessage
WHERE 1=1 AND ThreadId = @ThreadId

GO
/****** Object:  StoredProcedure [IMS].[sp_SecureMessagingxlate_SecureMailMessage_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_SecureMessagingxlate_SecureMailMessage_DeleteAll]
	@ThreadId int
AS

DELETE FROM SecureMailMessage
WHERE 1=1 AND ThreadId = @ThreadId

GO
/****** Object:  StoredProcedure [IMS].[sp_SecureMessagingxlate_SecureMailMessage_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_SecureMessagingxlate_SecureMailMessage_Insert]
	@Sequence int,
	@TellerId char(6),
	@EmailNotifyAddress char(100),
	@SentBy char(10),
	@DateSent datetime,
	@Message char(500),
	@ThreadId int
AS

INSERT INTO SecureMailMessage
(ThreadId, Sequence, TellerId, EmailNotifyAddress, SentBy, DateSent, Message)
VALUES
(@ThreadId, @Sequence, @TellerId, @EmailNotifyAddress, @SentBy, @DateSent, @Message)

GO
/****** Object:  StoredProcedure [IMS].[sp_SecureMessagingxlate_SecureMailMessage_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_SecureMessagingxlate_SecureMailMessage_InsertIfNew]
	@Sequence int,
	@TellerId char(6),
	@EmailNotifyAddress char(100),
	@SentBy char(10),
	@DateSent datetime,
	@Message char(500),
	@ThreadId int
AS

IF NOT EXISTS (SELECT * FROM SecureMailMessage WHERE 1=1 AND ThreadId = @ThreadId)
	BEGIN
		INSERT INTO SecureMailMessage
		(ThreadId, Sequence, TellerId, EmailNotifyAddress, SentBy, DateSent, Message)
		VALUES
		(@ThreadId, @Sequence, @TellerId, @EmailNotifyAddress, @SentBy, @DateSent, @Message)
	END
ELSE	BEGIN
		UPDATE SecureMailMessage SET
			Sequence = @Sequence,
			TellerId = @TellerId,
			EmailNotifyAddress = @EmailNotifyAddress,
			SentBy = @SentBy,
			DateSent = @DateSent,
			Message = @Message
		WHERE 1=1 AND ThreadId = @ThreadId
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_SecureMessagingxlate_SecureMailMessage_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_SecureMessagingxlate_SecureMailMessage_Select]
	@ThreadId int
AS

SELECT * FROM SecureMailMessage
WHERE 1=1 AND ThreadId = @ThreadId
ORDER BY Sequence

GO
/****** Object:  StoredProcedure [IMS].[sp_SecureMessagingxlate_SecureMailMessage_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_SecureMessagingxlate_SecureMailMessage_SelectAll]
	@ThreadId int
AS

SELECT * FROM SecureMailMessage
WHERE 1=1 AND ThreadId = @ThreadId
ORDER BY Sequence

GO
/****** Object:  StoredProcedure [IMS].[sp_SecureMessagingxlate_SecureMailMessage_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_SecureMessagingxlate_SecureMailMessage_Update]
	@Sequence varchar(100),
	@TellerId varchar(6),
	@EmailNotifyAddress varchar(100),
	@SentBy varchar(10),
	@DateSent varchar(100),
	@Message varchar(500),
	@ThreadId int
AS

IF @Sequence <> ''
	BEGIN
		DECLARE @Sequence_CASTED int
		IF @Sequence = '^'
			BEGIN
				SET @Sequence_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Sequence_CASTED = CAST(@Sequence AS int)
			END

		UPDATE SecureMailMessage
			SET Sequence = @Sequence_CASTED
		WHERE 1=1 AND ThreadId = @ThreadId
	END

IF @TellerId <> ''
	BEGIN
		DECLARE @TellerId_CASTED char(6)
		IF @TellerId = '^'
			BEGIN
				SET @TellerId_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @TellerId_CASTED = CAST(@TellerId AS char(6))
			END

		UPDATE SecureMailMessage
			SET TellerId = @TellerId_CASTED
		WHERE 1=1 AND ThreadId = @ThreadId
	END

IF @EmailNotifyAddress <> ''
	BEGIN
		DECLARE @EmailNotifyAddress_CASTED char(100)
		IF @EmailNotifyAddress = '^'
			BEGIN
				SET @EmailNotifyAddress_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @EmailNotifyAddress_CASTED = CAST(@EmailNotifyAddress AS char(100))
			END

		UPDATE SecureMailMessage
			SET EmailNotifyAddress = @EmailNotifyAddress_CASTED
		WHERE 1=1 AND ThreadId = @ThreadId
	END

IF @SentBy <> ''
	BEGIN
		DECLARE @SentBy_CASTED char(10)
		IF @SentBy = '^'
			BEGIN
				SET @SentBy_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @SentBy_CASTED = CAST(@SentBy AS char(10))
			END

		UPDATE SecureMailMessage
			SET SentBy = @SentBy_CASTED
		WHERE 1=1 AND ThreadId = @ThreadId
	END

IF @DateSent <> ''
	BEGIN
		DECLARE @DateSent_CASTED datetime
		IF @DateSent = '^'
			BEGIN
				SET @DateSent_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @DateSent_CASTED = CAST(@DateSent AS datetime)
			END

		UPDATE SecureMailMessage
			SET DateSent = @DateSent_CASTED
		WHERE 1=1 AND ThreadId = @ThreadId
	END

IF @Message <> ''
	BEGIN
		DECLARE @Message_CASTED char(500)
		IF @Message = '^'
			BEGIN
				SET @Message_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Message_CASTED = CAST(@Message AS char(500))
			END

		UPDATE SecureMailMessage
			SET Message = @Message_CASTED
		WHERE 1=1 AND ThreadId = @ThreadId
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_SecureMessagingxlate_SelectAllSecureMailAttachment]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [IMS].[sp_SecureMessagingxlate_SelectAllSecureMailAttachment]
            @ThreadId int
AS

SELECT ID, RequiredDocID, OtherDocID, [Sequence], FileName, Status
FROM SecureMailAttachment
WHERE ThreadId = @ThreadId
ORDER BY Sequence

GO
/****** Object:  StoredProcedure [IMS].[sp_SelectProcedureParameter]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [IMS].[sp_SelectProcedureParameter]
(
	@procedureName varchar(100)
)
AS
SELECT NAME AS PARAMETER FROM SYSCOLUMNS WHERE ID IN(SELECT ID FROM SYSOBJECTS WHERE NAME = @procedureName AND XTYPE = 'P') ORDER BY COLID





GO
/****** Object:  StoredProcedure [IMS].[sp_ShareCatACCSelect]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [IMS].[sp_ShareCatACCSelect]
(
	@ACC int
)
AS
	BEGIN
		SELECT * FROM  SHCatACC WHERE ACC = @ACC
	END
GO
/****** Object:  StoredProcedure [IMS].[sp_SSODelete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [IMS].[sp_SSODelete]
	(
		@GUID UNIQUEIDENTIFIER 
	)
AS
/* v 1.0.0 */
BEGIN
	SET NOCOUNT ON
	SELECT * FROM udt_SingleSignOn WHERE GUID = @GUID
	
	DELETE udt_SingleSignOn WHERE SetDateTime < DATEADD(hh, - 1, GETDATE())
		 
	DELETE FROM udt_SingleSignOn Where GUID = @GUID
	RETURN 
END
GO
/****** Object:  StoredProcedure [IMS].[sp_SSOInsert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [IMS].[sp_SSOInsert]
	(
		@Account Varchar(50) = 0, 
		@LegacyIDs Varchar(200) = '',
		@AccountList Varchar(200) = ''--,
--		@RefAccount int = 0,
--		@PIN char(40) = ''
	)
/* v 1.0.0 */
AS
BEGIN
DECLARE @UniqueId as UNIQUEIDENTIFIER
SET NOCOUNT ON
	SET @UniqueId = NEWID()
--	INSERT INTO udt_SingleSignOn (Account, GUID, RefAccount, PIN, SetDateTime) VALUES (@Account, @UniqueId, @RefAccount, @PIN, GetDate())
	INSERT INTO udt_SingleSignOn (Account, GUID, SetDateTime, LegacyIDs, AccountList) VALUES (@Account, @UniqueId, GetDate(), @LegacyIDs, @AccountList)

	
	SELECT * FROM udt_SingleSignOn Where Account = @Account and GUID = @UniqueId
	RETURN 
END
GO
/****** Object:  StoredProcedure [IMS].[sp_SyncCarts]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[sp_SyncCarts]
	@TrackingNum int,
	@SyncMode varchar(1)
AS
	DECLARE @ClientShortName varchar(10)
	SELECT @ClientShortName = NULL --ClientShortName from udt_ClientSettings

	--We are executing a string, so we have to verify that we are not executing SQL injection scripts. 
	--Because the short code is a defined value, and not a user input, we can check for ' or -- because these should never be in the name (because we control what this is). 
	--Normally I would recommend never ever ever (emphasize repeatedly) executing a string, but because our db is dristributed to client networks 
	--and we want to prevent passing other client names around, then this might be the one time that this actually makes sense to use. 
	if @ClientShortName IS NOT NULL AND CHARINDEX('''',@ClientShortName) = 0 AND CHARINDEX('--',@ClientShortName) = 0
	BEGIN
		DECLARE @ScaryExecutableString varchar(500)
		SET @ScaryExecutableString = N'IMS.sp' + @ClientShortName + '_SyncCarts'
		Exec @ScaryExecutableString @TrackingNum, @SyncMode
	END	
GO
/****** Object:  StoredProcedure [IMS].[sp_TUIDMxlate_Defaults_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_TUIDMxlate_Defaults_Delete]
	@DefaultsId int
AS

DELETE FROM TUIDMDefaults
WHERE 1=1 AND DefaultsId = @DefaultsId

GO
/****** Object:  StoredProcedure [IMS].[sp_TUIDMxlate_Defaults_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_TUIDMxlate_Defaults_DeleteAll]
	@DefaultsId int
AS

DELETE FROM TUIDMDefaults
WHERE 1=1 AND DefaultsId = @DefaultsId

GO
/****** Object:  StoredProcedure [IMS].[sp_TUIDMxlate_Defaults_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_TUIDMxlate_Defaults_Insert]
	@DefaultsId int,
	@MessageType char(1),
	@inquirySource varchar(10),
	@partnerId varchar(10),
	@clientId varchar(10),
	@lenderId varchar(10),
	@customerId char(6),
	@programId char(4),
	@channelId char(1),
	@agentId varchar(10),
	@dealerId varchar(10),
	@URI varchar(50),
	@URL varchar(50)
AS

INSERT INTO TUIDMDefaults
(DefaultsId, MessageType, inquirySource, partnerId, clientId, lenderId, customerId, programId, channelId, agentId, dealerId, URI, URL)
VALUES
(@DefaultsId, @MessageType, @inquirySource, @partnerId, @clientId, @lenderId, @customerId, @programId, @channelId, @agentId, @dealerId, @URI, @URL)

GO
/****** Object:  StoredProcedure [IMS].[sp_TUIDMxlate_Defaults_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_TUIDMxlate_Defaults_InsertIfNew]
	@DefaultsId int,
	@MessageType char(1),
	@inquirySource varchar(10),
	@partnerId varchar(10),
	@clientId varchar(10),
	@lenderId varchar(10),
	@customerId char(6),
	@programId char(4),
	@channelId char(1),
	@agentId varchar(10),
	@dealerId varchar(10),
	@URI varchar(50),
	@URL varchar(50)
AS

DECLARE @Count int
SELECT @Count = COUNT(MessageType) FROM TUIDMDefaults WHERE 1=1 AND DefaultsId = @DefaultsId

IF @Count = 0
	BEGIN
		INSERT INTO TUIDMDefaults
		(DefaultsId, MessageType, inquirySource, partnerId, clientId, lenderId, customerId, programId, channelId, agentId, dealerId, URI, URL)
		VALUES
		(@DefaultsId, @MessageType, @inquirySource, @partnerId, @clientId, @lenderId, @customerId, @programId, @channelId, @agentId, @dealerId, @URI, @URL)
	END
ELSE	BEGIN
		UPDATE TUIDMDefaults SET
			MessageType = @MessageType,
			inquirySource = @inquirySource,
			partnerId = @partnerId,
			clientId = @clientId,
			lenderId = @lenderId,
			customerId = @customerId,
			programId = @programId,
			channelId = @channelId,
			agentId = @agentId,
			dealerId = @dealerId,
			URI = @URI,
			URL = @URL
		WHERE 1=1 AND DefaultsId = @DefaultsId
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_TUIDMxlate_Defaults_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_TUIDMxlate_Defaults_Select]
	@DefaultsId int
AS

SELECT * FROM TUIDMDefaults
WHERE 1=1 AND DefaultsId = @DefaultsId

GO
/****** Object:  StoredProcedure [IMS].[sp_TUIDMxlate_Defaults_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_TUIDMxlate_Defaults_SelectAll]
	@DefaultsId int
AS

SELECT * FROM TUIDMDefaults
WHERE 1=1 AND DefaultsId = @DefaultsId

GO
/****** Object:  StoredProcedure [IMS].[sp_TUIDMxlate_Defaults_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_TUIDMxlate_Defaults_Update]
	@DefaultsId int,
	@MessageType varchar(1),
	@inquirySource varchar(10),
	@partnerId varchar(10),
	@clientId varchar(10),
	@lenderId varchar(10),
	@customerId varchar(6),
	@programId varchar(4),
	@channelId varchar(1),
	@agentId varchar(10),
	@dealerId varchar(10),
	@URI varchar(50),
	@URL varchar(50)
AS

IF @MessageType <> ''
	BEGIN
		DECLARE @MessageType_CASTED char(1)
		IF @MessageType = '^'
			BEGIN
				SET @MessageType_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @MessageType_CASTED = CAST(@MessageType AS char(1))
			END

		UPDATE TUIDMDefaults
			SET MessageType = @MessageType_CASTED
		WHERE 1=1 AND DefaultsId = @DefaultsId
	END

IF @inquirySource <> ''
	BEGIN
		DECLARE @inquirySource_CASTED varchar(10)
		IF @inquirySource = '^'
			BEGIN
				SET @inquirySource_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @inquirySource_CASTED = CAST(@inquirySource AS varchar(10))
			END

		UPDATE TUIDMDefaults
			SET inquirySource = @inquirySource_CASTED
		WHERE 1=1 AND DefaultsId = @DefaultsId
	END

IF @partnerId <> ''
	BEGIN
		DECLARE @partnerId_CASTED varchar(10)
		IF @partnerId = '^'
			BEGIN
				SET @partnerId_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @partnerId_CASTED = CAST(@partnerId AS varchar(10))
			END

		UPDATE TUIDMDefaults
			SET partnerId = @partnerId_CASTED
		WHERE 1=1 AND DefaultsId = @DefaultsId
	END

IF @clientId <> ''
	BEGIN
		DECLARE @clientId_CASTED varchar(10)
		IF @clientId = '^'
			BEGIN
				SET @clientId_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @clientId_CASTED = CAST(@clientId AS varchar(10))
			END

		UPDATE TUIDMDefaults
			SET clientId = @clientId_CASTED
		WHERE 1=1 AND DefaultsId = @DefaultsId
	END

IF @lenderId <> ''
	BEGIN
		DECLARE @lenderId_CASTED varchar(10)
		IF @lenderId = '^'
			BEGIN
				SET @lenderId_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @lenderId_CASTED = CAST(@lenderId AS varchar(10))
			END

		UPDATE TUIDMDefaults
			SET lenderId = @lenderId_CASTED
		WHERE 1=1 AND DefaultsId = @DefaultsId
	END

IF @customerId <> ''
	BEGIN
		DECLARE @customerId_CASTED char(6)
		IF @customerId = '^'
			BEGIN
				SET @customerId_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @customerId_CASTED = CAST(@customerId AS char(6))
			END

		UPDATE TUIDMDefaults
			SET customerId = @customerId_CASTED
		WHERE 1=1 AND DefaultsId = @DefaultsId
	END

IF @programId <> ''
	BEGIN
		DECLARE @programId_CASTED char(4)
		IF @programId = '^'
			BEGIN
				SET @programId_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @programId_CASTED = CAST(@programId AS char(4))
			END

		UPDATE TUIDMDefaults
			SET programId = @programId_CASTED
		WHERE 1=1 AND DefaultsId = @DefaultsId
	END

IF @channelId <> ''
	BEGIN
		DECLARE @channelId_CASTED char(1)
		IF @channelId = '^'
			BEGIN
				SET @channelId_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @channelId_CASTED = CAST(@channelId AS char(1))
			END

		UPDATE TUIDMDefaults
			SET channelId = @channelId_CASTED
		WHERE 1=1 AND DefaultsId = @DefaultsId
	END

IF @agentId <> ''
	BEGIN
		DECLARE @agentId_CASTED varchar(10)
		IF @agentId = '^'
			BEGIN
				SET @agentId_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @agentId_CASTED = CAST(@agentId AS varchar(10))
			END

		UPDATE TUIDMDefaults
			SET agentId = @agentId_CASTED
		WHERE 1=1 AND DefaultsId = @DefaultsId
	END

IF @dealerId <> ''
	BEGIN
		DECLARE @dealerId_CASTED varchar(10)
		IF @dealerId = '^'
			BEGIN
				SET @dealerId_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @dealerId_CASTED = CAST(@dealerId AS varchar(10))
			END

		UPDATE TUIDMDefaults
			SET dealerId = @dealerId_CASTED
		WHERE 1=1 AND DefaultsId = @DefaultsId
	END

IF @URI <> ''
	BEGIN
		DECLARE @URI_CASTED varchar(50)
		IF @URI = '^'
			BEGIN
				SET @URI_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @URI_CASTED = CAST(@URI AS varchar(50))
			END

		UPDATE TUIDMDefaults
			SET URI = @URI_CASTED
		WHERE 1=1 AND DefaultsId = @DefaultsId
	END

IF @URL <> ''
	BEGIN
		DECLARE @URL_CASTED varchar(50)
		IF @URL = '^'
			BEGIN
				SET @URL_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @URL_CASTED = CAST(@URL AS varchar(50))
			END

		UPDATE TUIDMDefaults
			SET URL = @URL_CASTED
		WHERE 1=1 AND DefaultsId = @DefaultsId
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_UnreconciledFunding_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[sp_UnreconciledFunding_Select]
	@AccountNumber bigint
AS
	DECLARE @ClientShortName varchar(10)
	SELECT @ClientShortName = ClientShortName from udt_ClientSettings

	--We are executing a string, so we have to verify that we are not executing SQL injection scripts. 
	--Because the short code is a defined value, and not a user input, we can check for ' or -- because these should never be in the name (because we control what this is). 
	--Normally I would recommend never ever ever (emphasize repeatedly) executing a string, but because our db is dristributed to client networks 
	--and we want to prevent passing other client names around, then this might be the one time that this actually makes sense to use. 
	if @ClientShortName IS NOT NULL AND CHARINDEX('''',@ClientShortName) = 0 AND CHARINDEX('--',@ClientShortName) = 0
	BEGIN
		DECLARE @ScaryExecutableString varchar(500)
		SET @ScaryExecutableString = N'IMS.sp' + @ClientShortName + '_UnreconciledFunding_Select'
		Exec @ScaryExecutableString @AccountNumber
	END	
GO
/****** Object:  StoredProcedure [IMS].[sp_UnreconciledVerification_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[sp_UnreconciledVerification_Select]
	@AccountNumber bigint
AS
	DECLARE @ClientShortName varchar(10)
	SELECT @ClientShortName = ClientShortName from udt_ClientSettings

	--We are executing a string, so we have to verify that we are not executing SQL injection scripts. 
	--Because the short code is a defined value, and not a user input, we can check for ' or -- because these should never be in the name (because we control what this is). 
	--Normally I would recommend never ever ever (emphasize repeatedly) executing a string, but because our db is dristributed to client networks 
	--and we want to prevent passing other client names around, then this might be the one time that this actually makes sense to use. 
	if @ClientShortName IS NOT NULL AND CHARINDEX('''',@ClientShortName) = 0 AND CHARINDEX('--',@ClientShortName) = 0
	BEGIN
		DECLARE @ScaryExecutableString varchar(500)
		SET @ScaryExecutableString = N'IMS.sp' + @ClientShortName + '_UnreconciledVerification_Select'
		Exec @ScaryExecutableString @AccountNumber
	END	
GO
/****** Object:  StoredProcedure [IMS].[sp_USAePayxlate_Config_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_USAePayxlate_Config_Delete]
	@ConfigurationId int
AS

DELETE FROM USAePayConfig
WHERE 1=1 AND ConfigurationId = @ConfigurationId

GO
/****** Object:  StoredProcedure [IMS].[sp_USAePayxlate_Config_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_USAePayxlate_Config_DeleteAll]
AS

DELETE FROM USAePayConfig
WHERE 1=1

GO
/****** Object:  StoredProcedure [IMS].[sp_USAePayxlate_Config_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_USAePayxlate_Config_Insert]
	@ConfigurationId int OUTPUT,
	@SourceKey varchar(255),
	@SourcePIN varchar(255),
	@USAePayUrl varchar(255),
	@WebServiceTimeout int
AS

INSERT INTO USAePayConfig
(SourceKey, SourcePIN, USAePayUrl, WebServiceTimeout)
VALUES
(@SourceKey, @SourcePIN, @USAePayUrl, @WebServiceTimeout)

SELECT @ConfigurationId = SCOPE_IDENTITY()

GO
/****** Object:  StoredProcedure [IMS].[sp_USAePayxlate_Config_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_USAePayxlate_Config_InsertIfNew]
	@ConfigurationId int OUTPUT,
	@SourceKey varchar(255),
	@SourcePIN varchar(255),
	@USAePayUrl varchar(255),
	@WebServiceTimeout int
AS

IF NOT EXISTS (SELECT * FROM USAePayConfig WHERE 1=1)
	BEGIN
		INSERT INTO USAePayConfig
		(SourceKey, SourcePIN, USAePayUrl, WebServiceTimeout)
		VALUES
		(@SourceKey, @SourcePIN, @USAePayUrl, @WebServiceTimeout)

		SELECT @ConfigurationId = SCOPE_IDENTITY()
	END
ELSE	BEGIN
		UPDATE USAePayConfig SET
			SourceKey = @SourceKey,
			SourcePIN = @SourcePIN,
			USAePayUrl = @USAePayUrl,
			WebServiceTimeout = @WebServiceTimeout
		WHERE 1=1

		SELECT TOP 1 @ConfigurationId = ConfigurationId FROM USAePayConfig
		WHERE 1=1
		ORDER BY ConfigurationId DESC
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_USAePayxlate_Config_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_USAePayxlate_Config_Select]
	@ConfigurationId int
AS

SELECT * FROM USAePayConfig
WHERE 1=1 AND ConfigurationId = @ConfigurationId

GO
/****** Object:  StoredProcedure [IMS].[sp_USAePayxlate_Config_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_USAePayxlate_Config_SelectAll]
AS

SELECT * FROM USAePayConfig
WHERE 1=1

GO
/****** Object:  StoredProcedure [IMS].[sp_USAePayxlate_Config_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_USAePayxlate_Config_Update]
	@ConfigurationId int,
	@SourceKey varchar(255),
	@SourcePIN varchar(255),
	@USAePayUrl varchar(255),
	@WebServiceTimeout varchar(100)
AS

IF @SourceKey <> ''
	BEGIN
		DECLARE @SourceKey_CASTED varchar(255)
		IF @SourceKey = '^'
			BEGIN
				SET @SourceKey_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @SourceKey_CASTED = CAST(@SourceKey AS varchar(255))
			END

		UPDATE USAePayConfig
			SET SourceKey = @SourceKey_CASTED
		WHERE 1=1 AND ConfigurationId = @ConfigurationId
	END

IF @SourcePIN <> ''
	BEGIN
		DECLARE @SourcePIN_CASTED varchar(255)
		IF @SourcePIN = '^'
			BEGIN
				SET @SourcePIN_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @SourcePIN_CASTED = CAST(@SourcePIN AS varchar(255))
			END

		UPDATE USAePayConfig
			SET SourcePIN = @SourcePIN_CASTED
		WHERE 1=1 AND ConfigurationId = @ConfigurationId
	END

IF @USAePayUrl <> ''
	BEGIN
		DECLARE @USAePayUrl_CASTED varchar(255)
		IF @USAePayUrl = '^'
			BEGIN
				SET @USAePayUrl_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @USAePayUrl_CASTED = CAST(@USAePayUrl AS varchar(255))
			END

		UPDATE USAePayConfig
			SET USAePayUrl = @USAePayUrl_CASTED
		WHERE 1=1 AND ConfigurationId = @ConfigurationId
	END

IF @WebServiceTimeout <> ''
	BEGIN
		DECLARE @WebServiceTimeout_CASTED int
		IF @WebServiceTimeout = '^'
			BEGIN
				SET @WebServiceTimeout_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @WebServiceTimeout_CASTED = CAST(@WebServiceTimeout AS int)
			END

		UPDATE USAePayConfig
			SET WebServiceTimeout = @WebServiceTimeout_CASTED
		WHERE 1=1 AND ConfigurationId = @ConfigurationId
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_USAePayxlate_PaymentStatus_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_USAePayxlate_PaymentStatus_Delete]
	@Id int
AS

DELETE FROM USAePayPaymentStatus
WHERE 1=1 AND Id = @Id

GO
/****** Object:  StoredProcedure [IMS].[sp_USAePayxlate_PaymentStatus_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_USAePayxlate_PaymentStatus_DeleteAll]
	@PaymentId varchar(25)
AS

DELETE FROM USAePayPaymentStatus
WHERE 1=1 AND PaymentId = @PaymentId

GO
/****** Object:  StoredProcedure [IMS].[sp_USAePayxlate_PaymentStatus_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_USAePayxlate_PaymentStatus_Insert]
	@Id int OUTPUT,
	@PaymentId varchar(25),
	@PaymentStatus varchar(35),
	@LastUpdated datetime
AS

INSERT INTO USAePayPaymentStatus
(PaymentId, PaymentStatus, LastUpdated)
VALUES
(@PaymentId, @PaymentStatus, @LastUpdated)

SELECT @Id = SCOPE_IDENTITY()

GO
/****** Object:  StoredProcedure [IMS].[sp_USAePayxlate_PaymentStatus_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_USAePayxlate_PaymentStatus_InsertIfNew]
	@Id int OUTPUT,
	@PaymentId varchar(25),
	@PaymentStatus varchar(35),
	@LastUpdated datetime
AS

IF NOT EXISTS (SELECT * FROM USAePayPaymentStatus WHERE 1=1 AND PaymentId = @PaymentId)
	BEGIN
		INSERT INTO USAePayPaymentStatus
		(PaymentId, PaymentStatus, LastUpdated)
		VALUES
		(@PaymentId, @PaymentStatus, @LastUpdated)

		SELECT @Id = SCOPE_IDENTITY()
	END
ELSE	BEGIN
		UPDATE USAePayPaymentStatus SET
			PaymentStatus = @PaymentStatus,
			LastUpdated = @LastUpdated
		WHERE 1=1 AND PaymentId = @PaymentId

		SELECT TOP 1 @Id = Id FROM USAePayPaymentStatus
		WHERE 1=1 AND PaymentId = @PaymentId
		ORDER BY Id DESC
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_USAePayxlate_PaymentStatus_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_USAePayxlate_PaymentStatus_Select]
	@Id int
AS

SELECT * FROM USAePayPaymentStatus
WHERE 1=1 AND Id = @Id

GO
/****** Object:  StoredProcedure [IMS].[sp_USAePayxlate_PaymentStatus_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_USAePayxlate_PaymentStatus_SelectAll]
	@PaymentId varchar(25)
AS

SELECT * FROM USAePayPaymentStatus
WHERE 1=1 AND PaymentId = @PaymentId

GO
/****** Object:  StoredProcedure [IMS].[sp_USAePayxlate_PaymentStatus_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_USAePayxlate_PaymentStatus_Update]
	@Id int,
	@PaymentId varchar(25),
	@PaymentStatus varchar(35),
	@LastUpdated varchar(100)
AS

IF @PaymentId <> ''
	BEGIN
		DECLARE @PaymentId_CASTED varchar(25)
		IF @PaymentId = '^'
			BEGIN
				SET @PaymentId_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @PaymentId_CASTED = CAST(@PaymentId AS varchar(25))
			END

		UPDATE USAePayPaymentStatus
			SET PaymentId = @PaymentId_CASTED
		WHERE 1=1 AND Id = @Id
	END

IF @PaymentStatus <> ''
	BEGIN
		DECLARE @PaymentStatus_CASTED varchar(35)
		IF @PaymentStatus = '^'
			BEGIN
				SET @PaymentStatus_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @PaymentStatus_CASTED = CAST(@PaymentStatus AS varchar(35))
			END

		UPDATE USAePayPaymentStatus
			SET PaymentStatus = @PaymentStatus_CASTED
		WHERE 1=1 AND Id = @Id
	END

IF @LastUpdated <> ''
	BEGIN
		DECLARE @LastUpdated_CASTED datetime
		IF @LastUpdated = '^'
			BEGIN
				SET @LastUpdated_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @LastUpdated_CASTED = CAST(@LastUpdated AS datetime)
			END

		UPDATE USAePayPaymentStatus
			SET LastUpdated = @LastUpdated_CASTED
		WHERE 1=1 AND Id = @Id
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_USAePayxlate_TransactionLog_Delete]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_USAePayxlate_TransactionLog_Delete]
	@TrackingNum int
AS

DELETE FROM USAePayTransactionLog
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_USAePayxlate_TransactionLog_DeleteAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_USAePayxlate_TransactionLog_DeleteAll]
	@TrackingNum int
AS

DELETE FROM USAePayTransactionLog
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_USAePayxlate_TransactionLog_Insert]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_USAePayxlate_TransactionLog_Insert]
	@TrackingNum int,
	@TranDate datetime,
	@ClientIP varchar(15),
	@TransactionType varchar(25),
	@IgnoreDuplicate char(1),
	@InvoiceNumber varchar(10),
	@PONumber int,
	@OrderId varchar(64),
	@SalesClerk varchar(255),
	@TerminalName varchar(255),
	@Description varchar(255),
	@Comments varchar(255),
	@IsTaxable char(1),
	@AmountSubTotal varchar(25),
	@AmountTax varchar(25),
	@AmountTip varchar(25),
	@AmountShipping varchar(25),
	@AmountDiscount varchar(25),
	@CreditCardNumber varchar(25),
	@CreditCardExpiration char(4),
	@CreditCardPresent char(1),
	@BankRoutingNumber char(9),
	@BankAccountNumber varchar(25),
	@BankAccountType varchar(25),
	@FirstName varchar(255),
	@LastName varchar(255),
	@Company varchar(255),
	@BillingAddress1 varchar(255),
	@BillingAddress2 varchar(255),
	@BillingCity varchar(255),
	@BillingState char(2),
	@BillingZipCode varchar(10),
	@BillingCountry char(2),
	@BillingPhoneNumber varchar(25),
	@BillingEmailAddress varchar(255),
	@CustomerId varchar(25),
	@AccountId varchar(25),
	@PaymentId varchar(25),
	@PaymentStatus varchar(35),
	@TransactionErrorMessage varchar(255)
AS

INSERT INTO USAePayTransactionLog
(TrackingNum, TranDate, ClientIP, TransactionType, IgnoreDuplicate, InvoiceNumber, PONumber, OrderId, SalesClerk, TerminalName, Description, Comments, IsTaxable, AmountSubTotal, AmountTax, AmountTip, AmountShipping, AmountDiscount, CreditCardNumber, CreditCardExpiration, CreditCardPresent, BankRoutingNumber, BankAccountNumber, BankAccountType, FirstName, LastName, Company, BillingAddress1, BillingAddress2, BillingCity, BillingState, BillingZipCode, BillingCountry, BillingPhoneNumber, BillingEmailAddress, CustomerId, AccountId, PaymentId, PaymentStatus, TransactionErrorMessage)
VALUES
(@TrackingNum, @TranDate, @ClientIP, @TransactionType, @IgnoreDuplicate, @InvoiceNumber, @PONumber, @OrderId, @SalesClerk, @TerminalName, @Description, @Comments, @IsTaxable, @AmountSubTotal, @AmountTax, @AmountTip, @AmountShipping, @AmountDiscount, @CreditCardNumber, @CreditCardExpiration, @CreditCardPresent, @BankRoutingNumber, @BankAccountNumber, @BankAccountType, @FirstName, @LastName, @Company, @BillingAddress1, @BillingAddress2, @BillingCity, @BillingState, @BillingZipCode, @BillingCountry, @BillingPhoneNumber, @BillingEmailAddress, @CustomerId, @AccountId, @PaymentId, @PaymentStatus, @TransactionErrorMessage)

GO
/****** Object:  StoredProcedure [IMS].[sp_USAePayxlate_TransactionLog_InsertIfNew]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_USAePayxlate_TransactionLog_InsertIfNew]
	@TrackingNum int,
	@TranDate datetime,
	@ClientIP varchar(15),
	@TransactionType varchar(25),
	@IgnoreDuplicate char(1),
	@InvoiceNumber varchar(10),
	@PONumber int,
	@OrderId varchar(64),
	@SalesClerk varchar(255),
	@TerminalName varchar(255),
	@Description varchar(255),
	@Comments varchar(255),
	@IsTaxable char(1),
	@AmountSubTotal varchar(25),
	@AmountTax varchar(25),
	@AmountTip varchar(25),
	@AmountShipping varchar(25),
	@AmountDiscount varchar(25),
	@CreditCardNumber varchar(25),
	@CreditCardExpiration char(4),
	@CreditCardPresent char(1),
	@BankRoutingNumber char(9),
	@BankAccountNumber varchar(25),
	@BankAccountType varchar(25),
	@FirstName varchar(255),
	@LastName varchar(255),
	@Company varchar(255),
	@BillingAddress1 varchar(255),
	@BillingAddress2 varchar(255),
	@BillingCity varchar(255),
	@BillingState char(2),
	@BillingZipCode varchar(10),
	@BillingCountry char(2),
	@BillingPhoneNumber varchar(25),
	@BillingEmailAddress varchar(255),
	@CustomerId varchar(25),
	@AccountId varchar(25),
	@PaymentId varchar(25),
	@PaymentStatus varchar(35),
	@TransactionErrorMessage varchar(255)
AS

DECLARE @Count int
SELECT @Count = COUNT(TranDate) FROM USAePayTransactionLog WHERE 1=1 AND TrackingNum = @TrackingNum

IF @Count = 0
	BEGIN
		INSERT INTO USAePayTransactionLog
		(TrackingNum, TranDate, ClientIP, TransactionType, IgnoreDuplicate, InvoiceNumber, PONumber, OrderId, SalesClerk, TerminalName, Description, Comments, IsTaxable, AmountSubTotal, AmountTax, AmountTip, AmountShipping, AmountDiscount, CreditCardNumber, CreditCardExpiration, CreditCardPresent, BankRoutingNumber, BankAccountNumber, BankAccountType, FirstName, LastName, Company, BillingAddress1, BillingAddress2, BillingCity, BillingState, BillingZipCode, BillingCountry, BillingPhoneNumber, BillingEmailAddress, CustomerId, AccountId, PaymentId, PaymentStatus, TransactionErrorMessage)
		VALUES
		(@TrackingNum, @TranDate, @ClientIP, @TransactionType, @IgnoreDuplicate, @InvoiceNumber, @PONumber, @OrderId, @SalesClerk, @TerminalName, @Description, @Comments, @IsTaxable, @AmountSubTotal, @AmountTax, @AmountTip, @AmountShipping, @AmountDiscount, @CreditCardNumber, @CreditCardExpiration, @CreditCardPresent, @BankRoutingNumber, @BankAccountNumber, @BankAccountType, @FirstName, @LastName, @Company, @BillingAddress1, @BillingAddress2, @BillingCity, @BillingState, @BillingZipCode, @BillingCountry, @BillingPhoneNumber, @BillingEmailAddress, @CustomerId, @AccountId, @PaymentId, @PaymentStatus, @TransactionErrorMessage)
	END
ELSE	BEGIN
		UPDATE USAePayTransactionLog SET
			TranDate = @TranDate,
			ClientIP = @ClientIP,
			TransactionType = @TransactionType,
			IgnoreDuplicate = @IgnoreDuplicate,
			InvoiceNumber = @InvoiceNumber,
			PONumber = @PONumber,
			OrderId = @OrderId,
			SalesClerk = @SalesClerk,
			TerminalName = @TerminalName,
			Description = @Description,
			Comments = @Comments,
			IsTaxable = @IsTaxable,
			AmountSubTotal = @AmountSubTotal,
			AmountTax = @AmountTax,
			AmountTip = @AmountTip,
			AmountShipping = @AmountShipping,
			AmountDiscount = @AmountDiscount,
			CreditCardNumber = @CreditCardNumber,
			CreditCardExpiration = @CreditCardExpiration,
			CreditCardPresent = @CreditCardPresent,
			BankRoutingNumber = @BankRoutingNumber,
			BankAccountNumber = @BankAccountNumber,
			BankAccountType = @BankAccountType,
			FirstName = @FirstName,
			LastName = @LastName,
			Company = @Company,
			BillingAddress1 = @BillingAddress1,
			BillingAddress2 = @BillingAddress2,
			BillingCity = @BillingCity,
			BillingState = @BillingState,
			BillingZipCode = @BillingZipCode,
			BillingCountry = @BillingCountry,
			BillingPhoneNumber = @BillingPhoneNumber,
			BillingEmailAddress = @BillingEmailAddress,
			CustomerId = @CustomerId,
			AccountId = @AccountId,
			PaymentId = @PaymentId,
			PaymentStatus = @PaymentStatus,
			TransactionErrorMessage = @TransactionErrorMessage
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_USAePayxlate_TransactionLog_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_USAePayxlate_TransactionLog_Select]
	@TrackingNum int
AS

SELECT * FROM USAePayTransactionLog
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_USAePayxlate_TransactionLog_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_USAePayxlate_TransactionLog_SelectAll]
	@TrackingNum int
AS

SELECT * FROM USAePayTransactionLog
WHERE 1=1 AND TrackingNum = @TrackingNum

GO
/****** Object:  StoredProcedure [IMS].[sp_USAePayxlate_TransactionLog_Update]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [IMS].[sp_USAePayxlate_TransactionLog_Update]
	@TrackingNum int,
	@TranDate varchar(100),
	@ClientIP varchar(15),
	@TransactionType varchar(25),
	@IgnoreDuplicate varchar(1),
	@InvoiceNumber varchar(10),
	@PONumber varchar(100),
	@OrderId varchar(64),
	@SalesClerk varchar(255),
	@TerminalName varchar(255),
	@Description varchar(255),
	@Comments varchar(255),
	@IsTaxable varchar(1),
	@AmountSubTotal varchar(25),
	@AmountTax varchar(25),
	@AmountTip varchar(25),
	@AmountShipping varchar(25),
	@AmountDiscount varchar(25),
	@CreditCardNumber varchar(25),
	@CreditCardExpiration varchar(4),
	@CreditCardPresent varchar(1),
	@BankRoutingNumber varchar(9),
	@BankAccountNumber varchar(25),
	@BankAccountType varchar(25),
	@FirstName varchar(255),
	@LastName varchar(255),
	@Company varchar(255),
	@BillingAddress1 varchar(255),
	@BillingAddress2 varchar(255),
	@BillingCity varchar(255),
	@BillingState varchar(2),
	@BillingZipCode varchar(10),
	@BillingCountry varchar(2),
	@BillingPhoneNumber varchar(25),
	@BillingEmailAddress varchar(255),
	@CustomerId varchar(25),
	@AccountId varchar(25),
	@PaymentId varchar(25),
	@PaymentStatus varchar(35),
	@TransactionErrorMessage varchar(255)
AS

IF @TranDate <> ''
	BEGIN
		DECLARE @TranDate_CASTED datetime
		IF @TranDate = '^'
			BEGIN
				SET @TranDate_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @TranDate_CASTED = CAST(@TranDate AS datetime)
			END

		UPDATE USAePayTransactionLog
			SET TranDate = @TranDate_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @ClientIP <> ''
	BEGIN
		DECLARE @ClientIP_CASTED varchar(15)
		IF @ClientIP = '^'
			BEGIN
				SET @ClientIP_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @ClientIP_CASTED = CAST(@ClientIP AS varchar(15))
			END

		UPDATE USAePayTransactionLog
			SET ClientIP = @ClientIP_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @TransactionType <> ''
	BEGIN
		DECLARE @TransactionType_CASTED varchar(25)
		IF @TransactionType = '^'
			BEGIN
				SET @TransactionType_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @TransactionType_CASTED = CAST(@TransactionType AS varchar(25))
			END

		UPDATE USAePayTransactionLog
			SET TransactionType = @TransactionType_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @IgnoreDuplicate <> ''
	BEGIN
		DECLARE @IgnoreDuplicate_CASTED char(1)
		IF @IgnoreDuplicate = '^'
			BEGIN
				SET @IgnoreDuplicate_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @IgnoreDuplicate_CASTED = CAST(@IgnoreDuplicate AS char(1))
			END

		UPDATE USAePayTransactionLog
			SET IgnoreDuplicate = @IgnoreDuplicate_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @InvoiceNumber <> ''
	BEGIN
		DECLARE @InvoiceNumber_CASTED varchar(10)
		IF @InvoiceNumber = '^'
			BEGIN
				SET @InvoiceNumber_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @InvoiceNumber_CASTED = CAST(@InvoiceNumber AS varchar(10))
			END

		UPDATE USAePayTransactionLog
			SET InvoiceNumber = @InvoiceNumber_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @PONumber <> ''
	BEGIN
		DECLARE @PONumber_CASTED int
		IF @PONumber = '^'
			BEGIN
				SET @PONumber_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @PONumber_CASTED = CAST(@PONumber AS int)
			END

		UPDATE USAePayTransactionLog
			SET PONumber = @PONumber_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @OrderId <> ''
	BEGIN
		DECLARE @OrderId_CASTED varchar(64)
		IF @OrderId = '^'
			BEGIN
				SET @OrderId_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @OrderId_CASTED = CAST(@OrderId AS varchar(64))
			END

		UPDATE USAePayTransactionLog
			SET OrderId = @OrderId_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @SalesClerk <> ''
	BEGIN
		DECLARE @SalesClerk_CASTED varchar(255)
		IF @SalesClerk = '^'
			BEGIN
				SET @SalesClerk_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @SalesClerk_CASTED = CAST(@SalesClerk AS varchar(255))
			END

		UPDATE USAePayTransactionLog
			SET SalesClerk = @SalesClerk_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @TerminalName <> ''
	BEGIN
		DECLARE @TerminalName_CASTED varchar(255)
		IF @TerminalName = '^'
			BEGIN
				SET @TerminalName_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @TerminalName_CASTED = CAST(@TerminalName AS varchar(255))
			END

		UPDATE USAePayTransactionLog
			SET TerminalName = @TerminalName_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @Description <> ''
	BEGIN
		DECLARE @Description_CASTED varchar(255)
		IF @Description = '^'
			BEGIN
				SET @Description_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Description_CASTED = CAST(@Description AS varchar(255))
			END

		UPDATE USAePayTransactionLog
			SET Description = @Description_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @Comments <> ''
	BEGIN
		DECLARE @Comments_CASTED varchar(255)
		IF @Comments = '^'
			BEGIN
				SET @Comments_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Comments_CASTED = CAST(@Comments AS varchar(255))
			END

		UPDATE USAePayTransactionLog
			SET Comments = @Comments_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @IsTaxable <> ''
	BEGIN
		DECLARE @IsTaxable_CASTED char(1)
		IF @IsTaxable = '^'
			BEGIN
				SET @IsTaxable_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @IsTaxable_CASTED = CAST(@IsTaxable AS char(1))
			END

		UPDATE USAePayTransactionLog
			SET IsTaxable = @IsTaxable_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @AmountSubTotal <> ''
	BEGIN
		DECLARE @AmountSubTotal_CASTED varchar(25)
		IF @AmountSubTotal = '^'
			BEGIN
				SET @AmountSubTotal_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @AmountSubTotal_CASTED = CAST(@AmountSubTotal AS varchar(25))
			END

		UPDATE USAePayTransactionLog
			SET AmountSubTotal = @AmountSubTotal_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @AmountTax <> ''
	BEGIN
		DECLARE @AmountTax_CASTED varchar(25)
		IF @AmountTax = '^'
			BEGIN
				SET @AmountTax_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @AmountTax_CASTED = CAST(@AmountTax AS varchar(25))
			END

		UPDATE USAePayTransactionLog
			SET AmountTax = @AmountTax_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @AmountTip <> ''
	BEGIN
		DECLARE @AmountTip_CASTED varchar(25)
		IF @AmountTip = '^'
			BEGIN
				SET @AmountTip_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @AmountTip_CASTED = CAST(@AmountTip AS varchar(25))
			END

		UPDATE USAePayTransactionLog
			SET AmountTip = @AmountTip_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @AmountShipping <> ''
	BEGIN
		DECLARE @AmountShipping_CASTED varchar(25)
		IF @AmountShipping = '^'
			BEGIN
				SET @AmountShipping_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @AmountShipping_CASTED = CAST(@AmountShipping AS varchar(25))
			END

		UPDATE USAePayTransactionLog
			SET AmountShipping = @AmountShipping_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @AmountDiscount <> ''
	BEGIN
		DECLARE @AmountDiscount_CASTED varchar(25)
		IF @AmountDiscount = '^'
			BEGIN
				SET @AmountDiscount_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @AmountDiscount_CASTED = CAST(@AmountDiscount AS varchar(25))
			END

		UPDATE USAePayTransactionLog
			SET AmountDiscount = @AmountDiscount_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @CreditCardNumber <> ''
	BEGIN
		DECLARE @CreditCardNumber_CASTED varchar(25)
		IF @CreditCardNumber = '^'
			BEGIN
				SET @CreditCardNumber_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @CreditCardNumber_CASTED = CAST(@CreditCardNumber AS varchar(25))
			END

		UPDATE USAePayTransactionLog
			SET CreditCardNumber = @CreditCardNumber_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @CreditCardExpiration <> ''
	BEGIN
		DECLARE @CreditCardExpiration_CASTED char(4)
		IF @CreditCardExpiration = '^'
			BEGIN
				SET @CreditCardExpiration_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @CreditCardExpiration_CASTED = CAST(@CreditCardExpiration AS char(4))
			END

		UPDATE USAePayTransactionLog
			SET CreditCardExpiration = @CreditCardExpiration_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @CreditCardPresent <> ''
	BEGIN
		DECLARE @CreditCardPresent_CASTED char(1)
		IF @CreditCardPresent = '^'
			BEGIN
				SET @CreditCardPresent_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @CreditCardPresent_CASTED = CAST(@CreditCardPresent AS char(1))
			END

		UPDATE USAePayTransactionLog
			SET CreditCardPresent = @CreditCardPresent_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @BankRoutingNumber <> ''
	BEGIN
		DECLARE @BankRoutingNumber_CASTED char(9)
		IF @BankRoutingNumber = '^'
			BEGIN
				SET @BankRoutingNumber_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @BankRoutingNumber_CASTED = CAST(@BankRoutingNumber AS char(9))
			END

		UPDATE USAePayTransactionLog
			SET BankRoutingNumber = @BankRoutingNumber_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @BankAccountNumber <> ''
	BEGIN
		DECLARE @BankAccountNumber_CASTED varchar(25)
		IF @BankAccountNumber = '^'
			BEGIN
				SET @BankAccountNumber_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @BankAccountNumber_CASTED = CAST(@BankAccountNumber AS varchar(25))
			END

		UPDATE USAePayTransactionLog
			SET BankAccountNumber = @BankAccountNumber_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @BankAccountType <> ''
	BEGIN
		DECLARE @BankAccountType_CASTED varchar(25)
		IF @BankAccountType = '^'
			BEGIN
				SET @BankAccountType_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @BankAccountType_CASTED = CAST(@BankAccountType AS varchar(25))
			END

		UPDATE USAePayTransactionLog
			SET BankAccountType = @BankAccountType_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @FirstName <> ''
	BEGIN
		DECLARE @FirstName_CASTED varchar(255)
		IF @FirstName = '^'
			BEGIN
				SET @FirstName_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @FirstName_CASTED = CAST(@FirstName AS varchar(255))
			END

		UPDATE USAePayTransactionLog
			SET FirstName = @FirstName_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @LastName <> ''
	BEGIN
		DECLARE @LastName_CASTED varchar(255)
		IF @LastName = '^'
			BEGIN
				SET @LastName_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @LastName_CASTED = CAST(@LastName AS varchar(255))
			END

		UPDATE USAePayTransactionLog
			SET LastName = @LastName_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @Company <> ''
	BEGIN
		DECLARE @Company_CASTED varchar(255)
		IF @Company = '^'
			BEGIN
				SET @Company_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @Company_CASTED = CAST(@Company AS varchar(255))
			END

		UPDATE USAePayTransactionLog
			SET Company = @Company_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @BillingAddress1 <> ''
	BEGIN
		DECLARE @BillingAddress1_CASTED varchar(255)
		IF @BillingAddress1 = '^'
			BEGIN
				SET @BillingAddress1_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @BillingAddress1_CASTED = CAST(@BillingAddress1 AS varchar(255))
			END

		UPDATE USAePayTransactionLog
			SET BillingAddress1 = @BillingAddress1_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @BillingAddress2 <> ''
	BEGIN
		DECLARE @BillingAddress2_CASTED varchar(255)
		IF @BillingAddress2 = '^'
			BEGIN
				SET @BillingAddress2_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @BillingAddress2_CASTED = CAST(@BillingAddress2 AS varchar(255))
			END

		UPDATE USAePayTransactionLog
			SET BillingAddress2 = @BillingAddress2_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @BillingCity <> ''
	BEGIN
		DECLARE @BillingCity_CASTED varchar(255)
		IF @BillingCity = '^'
			BEGIN
				SET @BillingCity_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @BillingCity_CASTED = CAST(@BillingCity AS varchar(255))
			END

		UPDATE USAePayTransactionLog
			SET BillingCity = @BillingCity_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @BillingState <> ''
	BEGIN
		DECLARE @BillingState_CASTED char(2)
		IF @BillingState = '^'
			BEGIN
				SET @BillingState_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @BillingState_CASTED = CAST(@BillingState AS char(2))
			END

		UPDATE USAePayTransactionLog
			SET BillingState = @BillingState_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @BillingZipCode <> ''
	BEGIN
		DECLARE @BillingZipCode_CASTED varchar(10)
		IF @BillingZipCode = '^'
			BEGIN
				SET @BillingZipCode_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @BillingZipCode_CASTED = CAST(@BillingZipCode AS varchar(10))
			END

		UPDATE USAePayTransactionLog
			SET BillingZipCode = @BillingZipCode_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @BillingCountry <> ''
	BEGIN
		DECLARE @BillingCountry_CASTED char(2)
		IF @BillingCountry = '^'
			BEGIN
				SET @BillingCountry_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @BillingCountry_CASTED = CAST(@BillingCountry AS char(2))
			END

		UPDATE USAePayTransactionLog
			SET BillingCountry = @BillingCountry_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @BillingPhoneNumber <> ''
	BEGIN
		DECLARE @BillingPhoneNumber_CASTED varchar(25)
		IF @BillingPhoneNumber = '^'
			BEGIN
				SET @BillingPhoneNumber_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @BillingPhoneNumber_CASTED = CAST(@BillingPhoneNumber AS varchar(25))
			END

		UPDATE USAePayTransactionLog
			SET BillingPhoneNumber = @BillingPhoneNumber_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @BillingEmailAddress <> ''
	BEGIN
		DECLARE @BillingEmailAddress_CASTED varchar(255)
		IF @BillingEmailAddress = '^'
			BEGIN
				SET @BillingEmailAddress_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @BillingEmailAddress_CASTED = CAST(@BillingEmailAddress AS varchar(255))
			END

		UPDATE USAePayTransactionLog
			SET BillingEmailAddress = @BillingEmailAddress_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @CustomerId <> ''
	BEGIN
		DECLARE @CustomerId_CASTED varchar(25)
		IF @CustomerId = '^'
			BEGIN
				SET @CustomerId_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @CustomerId_CASTED = CAST(@CustomerId AS varchar(25))
			END

		UPDATE USAePayTransactionLog
			SET CustomerId = @CustomerId_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @AccountId <> ''
	BEGIN
		DECLARE @AccountId_CASTED varchar(25)
		IF @AccountId = '^'
			BEGIN
				SET @AccountId_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @AccountId_CASTED = CAST(@AccountId AS varchar(25))
			END

		UPDATE USAePayTransactionLog
			SET AccountId = @AccountId_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @PaymentId <> ''
	BEGIN
		DECLARE @PaymentId_CASTED varchar(25)
		IF @PaymentId = '^'
			BEGIN
				SET @PaymentId_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @PaymentId_CASTED = CAST(@PaymentId AS varchar(25))
			END

		UPDATE USAePayTransactionLog
			SET PaymentId = @PaymentId_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @PaymentStatus <> ''
	BEGIN
		DECLARE @PaymentStatus_CASTED varchar(35)
		IF @PaymentStatus = '^'
			BEGIN
				SET @PaymentStatus_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @PaymentStatus_CASTED = CAST(@PaymentStatus AS varchar(35))
			END

		UPDATE USAePayTransactionLog
			SET PaymentStatus = @PaymentStatus_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

IF @TransactionErrorMessage <> ''
	BEGIN
		DECLARE @TransactionErrorMessage_CASTED varchar(255)
		IF @TransactionErrorMessage = '^'
			BEGIN
				SET @TransactionErrorMessage_CASTED = NULL
			END
		ELSE
			BEGIN
				SET @TransactionErrorMessage_CASTED = CAST(@TransactionErrorMessage AS varchar(255))
			END

		UPDATE USAePayTransactionLog
			SET TransactionErrorMessage = @TransactionErrorMessage_CASTED
		WHERE 1=1 AND TrackingNum = @TrackingNum
	END

GO
/****** Object:  StoredProcedure [IMS].[sp_VerifiedFundingSource_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Jonathan Eagar>
-- Create date: <20091004>
-- Description:	<This sp selects all of the verified funding sources for a given account number>
-- =============================================
CREATE PROCEDURE [IMS].[sp_VerifiedFundingSource_SelectAll]
	-- Add the parameters for the stored procedure here
	@AccountNumber bigint,
	@TrackingNum int
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	SELECT FB.FundingID, F.AccountNumber, F.GatewayCustomerID, FB.ID AS FundingAccountID, FB.TrackingNum, FB.AccountNumberLast4, FB.BankName, 
	FB.AccountType AS BankAccountType, '' AS CardType, 'B' AS FundingType, FB.GatewayAccountID, FB.VerificationStatus, FB.PSIErrorMessage, FB.DateTimeCreated, 
	FB.DateTimeVerified, FB.DateTimeVerificationReconciled, FB.DateTimeLastReversal, FB.DateTimeLastTransaction, FB.DateTimeLastReconciled,
	FB.RoutingNumber, FB.AccountNumberEncrypted, FB.Nickname, FB.MakeAvailable
	FROM IMS.NMRFundingBank AS FB INNER JOIN IMS.NMRFunding AS F ON F.ID = FB.FundingID 
	WHERE F.AccountNumber > 0 -- Because we can store this as 0 and don't want 0 account numbers in this query. Middleware will pass it in as 0 if not supplied
	AND F.AccountNumber = @AccountNumber AND FB.VerificationStatus = 'V'

	UNION 

	SELECT FC.FundingID, F.AccountNumber, F.GatewayCustomerID, FC.ID AS FundingAccountID, FC.TrackingNum, FC.AccountNumberLast4, '' AS BankName, 
	'' AS BankAccountType, FC.CardType, 'C' AS FundingType, FC.GatewayAccountID, '' AS VerificationStatus, '' AS PSIErrorMessage, FC.DateTimeCreated, 
	NULL AS DateTimeVerified, NULL AS DateTimeVerificationReconciled, FC.DateTimeLastReversal, FC.DateTimeLastTransaction, FC.DateTimeLastReconciled,
	NULL AS RoutingNumber, NULL AS AccountNumberEncrypted, NULL AS Nickname, NULL AS MakeAvailable
	FROM IMS.NMRFundingCard AS FC INNER JOIN IMS.NMRFunding AS F ON F.ID = FC.FundingID 
	WHERE F.AccountNumber > 0 -- Because we can store this as 0 and don't want 0 account numbers in this query. Middleware will pass it in as 0 if not supplied
	AND F.AccountNumber = @AccountNumber

	--Next by tracking num. We use a union as it can use an index and seek, whereas an or has to scan the entire db
	UNION

	SELECT FB.FundingID, F.AccountNumber, F.GatewayCustomerID, FB.ID AS FundingAccountID, FB.TrackingNum, FB.AccountNumberLast4, FB.BankName, 
	FB.AccountType AS BankAccountType, '' AS CardType, 'B' AS FundingType, FB.GatewayAccountID, FB.VerificationStatus, FB.PSIErrorMessage, FB.DateTimeCreated, 
	FB.DateTimeVerified, FB.DateTimeVerificationReconciled, FB.DateTimeLastReversal, FB.DateTimeLastTransaction, FB.DateTimeLastReconciled,
	FB.RoutingNumber, FB.AccountNumberEncrypted, FB.Nickname, FB.MakeAvailable
	FROM IMS.NMRFundingBank AS FB INNER JOIN IMS.NMRFunding AS F ON F.ID = FB.FundingID 
	WHERE F.TrackingNum > 0 -- Because we can store this as 0 and don't want 0 tracking numbers in this query. Middleware will pass it in as 0 if not supplied
	AND F.TrackingNum = @TrackingNum AND FB.VerificationStatus = 'V' 

	UNION 

	SELECT FC.FundingID, F.AccountNumber, F.GatewayCustomerID, FC.ID AS FundingAccountID, FC.TrackingNum, FC.AccountNumberLast4, '' AS BankName, 
	'' AS BankAccountType, FC.CardType, 'C' AS FundingType, FC.GatewayAccountID, '' AS VerificationStatus, '' AS PSIErrorMessage, FC.DateTimeCreated, 
	NULL AS DateTimeVerified, NULL AS DateTimeVerificationReconciled, FC.DateTimeLastReversal, FC.DateTimeLastTransaction, FC.DateTimeLastReconciled,
	NULL AS RoutingNumber, NULL AS AccountNumberEncrypted, NULL AS Nickname, NULL AS MakeAvailable
	FROM IMS.NMRFundingCard AS FC INNER JOIN IMS.NMRFunding AS F ON F.ID = FC.FundingID 
	WHERE F.TrackingNum > 0 -- Because we can store this as 0 and don't want 0 tracking numbers in this query. Middleware will pass it in as 0 if not supplied
	AND F.TrackingNum = @TrackingNum
	
END
GO
/****** Object:  StoredProcedure [IMS].[spAltra_D99Enable]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spAltra_D99Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @docsubname CHAR(100)
DECLARE @newdocsub CHAR(100)
DECLARE @count INT
DECLARE @docindex INT
DECLARE @JOSeq INT

DECLARE curs CURSOR FOR
	SELECT 0 AS JOSeq, RTRIM(RTRIM(NMR.FName) + ' ' + RTRIM(NMR.LName) + RTRIM(NMR.OrganizationName)) AS docsubname
	FROM IMS.NewMemberRequest AS NMR LEFT JOIN
		IMS.NewMemberCreditReport CR ON NMR.TrackingNum = CR.TrackingNum AND CR.JointSequence = 0
	WHERE NMR.TrackingNum = @TrackingNum AND @Param1 = '99' AND ((PATINDEX('%SAV,%',CR.CBDecision) = 0 OR PATINDEX('%CHK,%',CR.CBDecision) = 0)
		OR (@ApplicationMode = 'EXTERNAL' AND (SELECT COUNT(*) FROM NewMemberSubAccount SA WHERE SA.TrackingNum = @TrackingNum AND SA.Approval = 'D') > 0))

	UNION

	SELECT JO.Sequence AS JOSeq, RTRIM(RTRIM(JO.FName) + ' ' + RTRIM(JO.LName)) AS docsubname
	FROM IMS.NewMemberJointOwner AS JO INNER JOIN
		IMS.NewMemberCreditReport CR ON JO.TrackingNum = CR.TrackingNum AND JO.Sequence = CR.JointSequence
	LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = JO.TrackingNum
	WHERE JO.Trackingnum = @TrackingNum AND @Param1 = '99' AND (PATINDEX('%SAV,%',CR.CBDecision) = 0 OR PATINDEX('%CHK,%',CR.CBDecision) = 0 OR JO.CreateHost = 'N') AND @ApplicationMode = ''

OPEN curs
FETCH NEXT FROM curs INTO @JOSeq, @docsubname
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count
--	IF @count = 1
--	BEGIN
		SET @docindex = @docindex + 1
		SET @newdocsub = 'Adverse Action Letter for ' + @docsubname
		INSERT INTO IMS.NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
--	END
      	FETCH NEXT FROM curs INTO @JOSeq, @docsubname

	IF @docsubname != NULL
	BEGIN
		SET @newdocsub = @newdocsub + ', ' + @docsubname
		UPDATE IMS.NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex AND TrackingNum = @TrackingNum
	END
   END
CLOSE curs
DEALLOCATE curs
SELECT *, (SELECT DocName FROM udt_Doc WHERE DocNum = 99) AS ScanName FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
DELETE FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spAltra_D99Fields]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [IMS].[spAltra_D99Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @DisplayNameTemp VARCHAR(30)
DECLARE @DisplayName VARCHAR(30)
DECLARE @JOSeqTemp INTEGER
DECLARE @JOSeq INTEGER
DECLARE @count INT

DECLARE curs2 CURSOR FOR
	SELECT 0 AS JOSeq, RTRIM(RTRIM(NMR.FName) + ' ' + RTRIM(NMR.LName) + RTRIM(NMR.OrganizationName)) AS DisplayName
	FROM IMS.NewMemberRequest AS NMR LEFT JOIN
		IMS.NewMemberCreditReport CR ON NMR.TrackingNum = CR.TrackingNum AND CR.JointSequence = 0
	WHERE NMR.TrackingNum = @TrackingNum AND @Param1 = '99' AND ((PATINDEX('%SAV,%',CR.CBDecision) = 0 OR PATINDEX('%CHK,%',CR.CBDecision) = 0)
		OR (@ApplicationMode = 'EXTERNAL' AND (SELECT COUNT(*) FROM NewMemberSubAccount SA WHERE SA.TrackingNum = @TrackingNum AND SA.Approval = 'D') > 0))

	UNION

	SELECT JO.Sequence AS JOSeq, RTRIM(RTRIM(JO.FName) + ' ' + RTRIM(JO.LName)) AS DisplayName
	FROM IMS.NewMemberJointOwner AS JO INNER JOIN
		IMS.NewMemberCreditReport CR ON JO.TrackingNum = CR.TrackingNum AND JO.Sequence = CR.JointSequence
	LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = JO.TrackingNum
	WHERE JO.Trackingnum = @TrackingNum AND @Param1 = '99' AND (PATINDEX('%SAV,%',CR.CBDecision) = 0 OR PATINDEX('%CHK,%',CR.CBDecision) = 0 OR JO.CreateHost = 'N') AND @ApplicationMode = ''

OPEN curs2
FETCH NEXT FROM curs2 INTO @JOSeqTemp, @DisplayNameTemp
SET @count = 1
PRINT @@FETCH_STATUS
	WHILE @@FETCH_STATUS = 0
	BEGIN
		IF (@count = @DocIndex)
		BEGIN
			SET @JOSeq = @JOSeqTemp
			SET @DisplayName = @DisplayNameTemp
		END
		FETCH NEXT FROM curs2 INTO @JOSeqTemp, @DisplayNameTemp
	SET @count = @count + 1
	PRINT @count
	END
CLOSE curs2
DEALLOCATE curs2

SELECT @DocIndex AS DocIndex
FROM IMS.NewMemberRequest AS NMR
WHERE NMR.TrackingNum = @TrackingNum

Return 1
GO
/****** Object:  StoredProcedure [IMS].[spAltra_DG1Enable]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spAltra_DG1Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

Return 1
GO
/****** Object:  StoredProcedure [IMS].[spAltra_DG1Fields]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spAltra_DG1Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

Select 'Applications' AS GroupName From NewMemberRequest where trackingnum = @TrackingNum
GO
/****** Object:  StoredProcedure [IMS].[spAltra_DP1Enable]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spAltra_DP1Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

Return 1
GO
/****** Object:  StoredProcedure [IMS].[spAltra_DP1Fields]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spAltra_DP1Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

SELECT NMR.TrackingNum AS TrackingNumber
	, AltAddress.Address1 AS MailingAddress
	, NMR.CurrBranch As Branch
	, Branches.Description AS BranchName
	, CONVERT(char(10), GetDate(), 101) As TodayDate
	, DATENAME(MM, GetDate()) + RIGHT(CONVERT(char(12), GetDate(), 107), 9) As TodayDateFull
	, CONVERT(char(10), NMR.CreatedOn, 101) As CreatedOn
	, NMR.Account As Account
--	, CONVERT(char(2), Home.ResidenceYears, 101) + ' yrs  ' + CONVERT(char(2), Home.ResidenceMonths, 101) + ' mos' AS HowLong
	, NMR.FName, NMR.LName, NMR.MInitial
	, CASE NMR.AccountClass WHEN 'P' THEN UPPER(RTRIM(NMR.LName) + ', ' + RTRIM(RTRIM(NMR.FName) + ' ' + RTRIM(NMR.MInitial))) ELSE RTRIM(NMR.OrganizationName) END AS RevFullName
	, CASE NMR.AccountClass WHEN 'P' THEN UPPER(RTRIM(RTRIM(NMR.FName) + ' ' + RTRIM(NMR.LName) + ' ' + NMR.MECHTag)) ELSE UPPER(RTRIM(NMR.OrganizationName)) END AS FullName
	, CASE NMR.AccountClass WHEN 'P' THEN 'Dear ' + RTRIM(RTRIM(NMR.FName) + ' ' + RTRIM(NMR.LName) + ' ' + NMR.MECHTag) + ':' ELSE 'Dear ' + RTRIM(NMR.OrganizationName) + ':' END AS DearName
	, Home.Areacode + '-' + LEFT(Home.Phone, 3) + '-' + RIGHT(RTRIM(Home.Phone), 4) AS HPhoneFull
	, Home.CellPhoneAC + '-' + LEFT(Home.CellPhone, 3) + '-' + RIGHT(RTRIM(Home.CellPhone), 4) AS CPhoneFull
	, CASE NMR.UseTodayForDOB WHEN 'Y' THEN CONVERT(char(10), NMR.CreatedOn, 101) ELSE CONVERT(char(10), NMR.DOB, 101) END AS DOB
	, CASE NMR.AccountClass WHEN 'P' THEN Left(NMR.SSN, 3) + '-' + LEFT(RIGHT(NMR.SSN, 6), 2) + '-' + RIGHT(NMR.SSN, 4) ELSE LEFT(NMR.SSN, 2) + '-' + RIGHT(NMR.SSN, 7) END AS SSN
	, RTRIM(NMR.DriversLicenseNum) + '/' + NMR.DriversLicenseState AS DL
	, CASE WHEN NMR.IDType = 'D' AND NMR.DriversLicenseState <> '' AND NMR.DriversLicenseNum <> '' THEN 'Drivers License' ELSE NMR.IDSource END AS IDType
	, CASE NMR.IDType WHEN 'D' THEN RTRIM(NMR.DriversLicenseNum) ELSE RTRIM(NMR.IDNumber) END AS IDNumber
	, CONVERT(char(10), NMR.IDIssueDate, 101) AS IDIssueDate
	, CONVERT(char(10), NMR.IDExpirationDate, 101) AS IDExpDate
	, NMR.DriversLicenseState AS IDState
	, NMR.MaidenName AS MaidenName
	, NMR.Password AS Password
	, NMR.CreatedBy AS Seller
	, NMR.Department AS Department
	, CASE WHEN NMR.Created = 'F' Or NMR.Created = 'H' Or NMR.Created = 'I' THEN '' ELSE 'X' END AS YesNewAccount
	, CASE WHEN NMR.Created = 'F' Or NMR.Created = 'H' Or NMR.Created = 'I' THEN 'X' END AS YesChangeAccount
--	, CASE WHEN NMR.Created = 'F' Or NMR.Created = 'H' Or NMR.Created = 'I' THEN NMR.Account END AS ChangeAccount
	, CASE NMR.AccountClass
		WHEN 'O' THEN RTRIM(RTRIM(Work.Address1) + CASE ISNULL(Work.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Work.Address2) END + CASE ISNULL(Work.Address3, '') WHEN '' THEN ' ' ELSE ', ' + RTRIM(Work.Address3) END)
		ELSE RTRIM(RTRIM(Home.Address1) + CASE ISNULL(Home.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Home.Address2) END + CASE ISNULL(Home.Address3, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Home.Address3) END)
	  END AS Address
	, CASE NMR.AccountClass
		WHEN 'O' THEN RTRIM(RTRIM(Work.Address1) + CASE ISNULL(Work.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Work.Address2) END + CASE ISNULL(Work.Address3, '') WHEN '' THEN ' ' ELSE ', ' + RTRIM(Work.Address3) END) + ', ' + RTRIM(Work.City) + ', ' + Work.State + ' ' + CASE LEN(Work.Zip) WHEN 9 THEN LEFT(Work.Zip, 5) + '-' + Right(Work.Zip, 4) ELSE Work.Zip END
		ELSE RTRIM(RTRIM(Home.Address1) + CASE ISNULL(Home.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Home.Address2) END + CASE ISNULL(Home.Address3, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Home.Address3) END) + ', ' + RTRIM(Home.City) + ', ' + Home.State + ' ' + CASE LEN(Home.Zip) WHEN 9 THEN LEFT(Home.Zip, 5) + '-' + Right(Home.Zip, 4) ELSE Home.Zip END
	  END AS FullAddress
	, CASE NMR.AccountClass
		WHEN 'O' THEN RTRIM(Work.city) + ', ' + Work.state + ' ' + CASE LEN(Work.Zip) WHEN 9 THEN LEFT(Work.zip, 5) + '-' + Right(Work.Zip, 4) ELSE Work.Zip END
		ELSE RTRIM(Home.city) + ', ' + Home.state + ' ' + CASE LEN(Home.Zip) WHEN 9 THEN LEFT(Home.zip, 5) + '-' + Right(Home.Zip, 4) ELSE Home.Zip END
	  END AS CityStateZip
	, CASE NMR.AccountClass
		WHEN 'O' THEN Work.City
		ELSE Home.City
	  END AS City
	, CASE NMR.AccountClass
		WHEN 'O' THEN Work.State
		ELSE Home.State
	  END AS State
	, CASE NMR.AccountClass
		WHEN 'O' THEN CASE LEN(Work.Zip) WHEN 9 THEN LEFT(Work.zip, 5) + '-' + Right(Work.Zip, 4) ELSE Work.Zip END
		ELSE CASE LEN(Home.Zip) WHEN 9 THEN LEFT(Home.zip, 5) + '-' + Right(Home.Zip, 4) ELSE Home.Zip END
	  END AS Zip		
	, RTRIM(NMR.Email1) AS Email
	, CASE NMR.AccountClass
		WHEN 'O' THEN Work.AreaCode
		ELSE Home.AreaCode
	  END AS AC
	, CASE NMR.AccountClass
		WHEN 'O' THEN LEFT(Work.Phone, 3) + '-' + RIGHT(RTRIM(Work.Phone), 4)
		ELSE LEFT(Home.Phone, 3) + '-' + RIGHT(RTRIM(Home.Phone), 4)
	  END AS Phone
	, CASE NMR.AccountClass WHEN 'P' THEN Work.EmployerName ELSE '' END AS WorkName
	, CASE NMR.AccountClass WHEN 'P' THEN Work.EmployerName ELSE '' END AS Employer
	, CASE NMR.AccountClass WHEN 'P' THEN RTRIM(Work.address1 + CASE Work.address2 WHEN '' THEN ''ELSE', ' END + Work.address2 + CASE Work.address3 WHEN '' THEN ''ELSE', ' END + Work.address3) ELSE '' END AS WorkAddress
	, CASE NMR.AccountClass WHEN 'P' THEN Work.City ELSE '' END AS WorkCity
	, CASE NMR.AccountClass WHEN 'P' THEN Work.State ELSE '' END AS WorkState
	, CASE NMR.AccountClass WHEN 'P' THEN CASE LEN(Work.Zip) WHEN 9 THEN LEFT(Work.zip, 5) + '-' + RIGHT(Work.Zip, 4) ELSE Work.Zip END ELSE '' END AS WorkZip
	, Work.AreaCode AS WorkAC, LEFT(Work.Phone, 3) + '-' + RIGHT(RTRIM(Work.Phone), 4)  AS WorkPhone
	, Work.AreaCode + '-' + LEFT(Work.Phone, 3) + '-' + RIGHT(RTRIM(Work.Phone), 4)  AS WPhoneFull
	, Work.JobTitle AS Position
	, Work.JobTitle AS Occupation
	, Work.ProfessionYears As WorkNumYears
	,  RTRIM(Work.EmployerName) + ' ' + RTRIM(Work.address1 + CASE Work.address2 WHEN '' THEN ''ELSE', ' END + Work.address2 + CASE Work.address3 WHEN '' THEN ''ELSE', ' END + Work.address3) + ', ' + RTRIM(Work.City) + ', ' + RTRIM(Work.State) + ' ' + CASE LEN(Work.Zip) WHEN 9 THEN LEFT(Work.zip, 5) + '-' + Right(Work.Zip, 4) ELSE Work.Zip END AS WorkNameAddress
	, Work.HireDate
	,   CASE Work.IncomeFrequency
	     	WHEN 'W'  THEN 'Week'
		WHEN 'B' THEN 'Bi-Week'
		WHEN 'M' THEN 'Month'
		WHEN 'S' THEN 'Semi-Month'
		WHEN 'Y' THEN 'Year'
	      END AS IncomeFrequency
	,   CASE Work.IncomeFrequency
	     	WHEN 'W'  THEN (Work.GrossIncome * 52)/100
		WHEN 'B' THEN (Work.GrossIncome * 26)/100
		WHEN 'M' THEN (Work.GrossIncome * 12)/100
		WHEN 'S' THEN (Work.GrossIncome * 24)/100
		WHEN 'Y' THEN (Work.GrossIncome)/100
	      END AS GrossIncome
	, Home.ResidenceYears AS NumYears
	, CASE NMR.AccountClass
		WHEN 'O' THEN 'Yes'
		ELSE CASE WHEN NMR.Citizenship = 'US' Or NMR.Citizenship = 'RA' THEN 'Yes' END
	  END AS YesNoUSCitizen
	, CASE NMR.AccountClass
		WHEN 'O' THEN 'X'
		ELSE CASE WHEN NMR.Citizenship = 'US' Or NMR.Citizenship = 'RA' THEN 'X' END
	  END AS YesUSCitizen
	, CASE NMR.AccountClass
		WHEN 'O' THEN ''
		ELSE CASE WHEN NMR.Citizenship != 'US' And NMR.Citizenship != 'RA' THEN 'X' END
	  END AS NoUSCitizen
--	, 'X' AS YesEligible00
	, CASE WHEN NMR.Qualification1 = 'Household' THEN 'X' END AS YesEligible01
	, CASE WHEN NMR.Qualification1 = 'Relative' OR NMR.Qualification1 = 'Household' THEN NMR.Qualification2 END AS MemberName
	, CASE WHEN NMR.Qualification1 = 'Relative' THEN NMR.Relationship END AS Relationship
	, CASE WHEN NMR.Qualification1 = 'Location' THEN 'X' END AS YesEligible10
	, CASE WHEN NMR.Qualification1 = 'Location' AND NMR.Qualification2 = 'BCOUNTY' THEN 'X' END AS YesEligible11
	, CASE WHEN NMR.Qualification1 = 'Location' AND NMR.Qualification2 = 'CLARENDON' THEN 'X' END AS YesEligible12
	, CASE WHEN NMR.Qualification1 = 'Location' AND NMR.Qualification2 = 'ORANGE' THEN 'X' END AS YesEligible13
	, CASE WHEN NMR.Qualification1 = 'Location' AND NMR.Qualification2 = 'CALHOUN' THEN 'X' END AS YesEligible14
	, CASE WHEN NMR.Qualification1 = 'Location' AND NMR.Qualification2 = 'DCOUNTY' THEN 'X' END AS YesEligible15
	, CASE WHEN NMR.Qualification1 = 'Location' AND NMR.Qualification2 = 'UNDER' THEN 'X' END AS YesEligible16
	, CASE WHEN NMR.Qualification1 = 'Location' AND NMR.Qualification2 = 'CCOUNTY' THEN 'X' END AS YesEligible17
	, CASE WHEN NMR.Qualification1 = 'Location' AND NMR.Qualification2 = 'GEO COMM' THEN 'X' END AS YesEligible18
	, RTRIM(NMR.LName) + '/' + RTRIM(RTRIM(NMR.FName) + ' ' + NMR.MInitial) AS SlashName
	, '(' + RTRIM(LTRIM(CAST(NMR.CurrBranch AS VARCHAR(2)))) + ' - ' + RTRIM(Branches.[Description]) + ')' AS SellerBranch
	, 'SOUTH CAROLINA FEDERAL CREDIT UNION' AS HCCUName
	, 'P.O. BOX 190012' AS HCCUAddress
	, 'NORTH CHARLESTON, SC  29419-9012' AS HCCUCityStateZip
	, '(800)845-0432' AS HCCUPhone
FROM NewMemberRequest As NMR
	--INNER JOIN udt_AccountTypes AS AType On NMR.AccountType = AType.TypeCode
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN NewMemberAddress As AltAddress On NMR.TrackingNum = AltAddress.TrackingNum
	LEFT OUTER JOIN Branches On NMR.CurrBranch = Branches.BranchCode
	LEFT OUTER JOIN Departments ON NMR.Department = Departments.Department
WHERE NMR.TrackingNum = @TrackingNum
GO
/****** Object:  StoredProcedure [IMS].[spAltra_Eligibility_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_Eligibility_Select
CREATE PROCEDURE [IMS].[spAltra_Eligibility_Select]
	@ZipCode varchar(5),
	@CensusTract varchar(15)
AS

IF IsNull(@CensusTract, '') = '' AND IsNull(@ZipCode, '') <> ''
BEGIN
	SELECT Department
	FROM udt_EligibilityByZip
	WHERE IsNull(ZipCode, '') = @ZipCode
END

IF IsNull(@CensusTract, '') <> '' AND IsNull(@ZipCode, '') = ''
BEGIN
	SELECT Department
	FROM udt_EligibilityByZip
	WHERE IsNull(CensusTract, '') = @CensusTract
END

IF IsNull(@CensusTract, '') <> '' AND IsNull(@ZipCode, '') <> ''
BEGIN
	SELECT Department
	FROM udt_EligibilityByZip
	WHERE (IsNull(ZipCode, '') = @ZipCode OR IsNull(ZipCode, '') = '') AND IsNull(CensusTract, '') = @CensusTract
END

IF IsNull(@CensusTract, '') = '' AND IsNull(@ZipCode, '') = ''
BEGIN
	SELECT *
	FROM udt_EligibilityByZip
END
GO
/****** Object:  StoredProcedure [IMS].[spAltra_FedReservePendingTransaction_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Jonathan Eagar
-- Create date: 8/25/2011
-- Description:	Returns all FedReserve Pending Transactions
-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_FedReservePendingTransaction_Select
-- =============================================
CREATE PROCEDURE [IMS].[spAltra_FedReservePendingTransaction_Select] 
	-- Add the parameters for the stored procedure here
	@NMRAccountNumber bigint
AS
BEGIN	
	SET @NMRAccountNumber = ISNULL(@NMRAccountNumber, 0)
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	-- Insert statements for procedure here
	
	DECLARE @TransactionSummary TABLE
	(		
		FundingBankID INT,
		TransferAmountTotal DECIMAL(18,2)		
	)
		
	IF @NMRAccountNumber = 0  
	BEGIN
	
	INSERT INTO @TransactionSummary(FundingBankID, TransferAmountTotal)	
	SELECT
		   FB.ID as FundingBankID,			  
		   SUM(FT.Amount) as TransferAmountTotal			   
	FROM IMS.NMRFundingBank FB INNER JOIN IMS.NMRFundingTransaction FT ON FB.ID = FT.FundingBankID						
	WHERE FT.DateTimeLastTransaction IS NULL AND FT.FundingType = 'B'
	GROUP BY FB.ID	
	
	SELECT  FRPT.* FROM
	( 
		(
		SELECT F.ID as FundingID,
			   F.AccountNumber as NMRAccountNumber,
			   FB.TrackingNum as NMRTrackingNumber,
			   NMR.LName + ', ' + NMR.FName as NMRMemberName,
			   FB.ID as FundingBankID,
			   0 as FundingTransactionID,
			   FB.RoutingNumber as FundingBankRouting,
			   FB.AccountNumberEncrypted as FundingBankAccountNumberEncrypted,
			   FB.AccountNumberLast4 as FundingBankAccountAccountLast4,
			   FB.BankName as FundingBankName,
			   FB.AccountType as FundingBankAccountType,
			   FB.Amount1 as VerificationAmount1,
			   FB.Amount2 as VerificationAmount2,
			   0 as TransferAmount,
			   0 as TransferAmountTotal,			   	
			   0 as TargetSubAccountSuffix,
			   0 as TargetSubAccountSeq,
			   FB.DateTimeCreated as DateTimeCreated
		FROM IMS.NMRFunding F INNER JOIN IMS.NMRFundingBank FB ON F.ID = FB.FundingID
								INNER JOIN IMS.NewMemberRequest NMR ON FB.TrackingNum = NMR.TrackingNum
		WHERE FB.VerificationStatus = 'P'	
		)
		UNION ALL
		(	
		SELECT F.ID as FundingID,
			   F.AccountNumber as NMRAccountNumber,
			   FB.TrackingNum as NMRTrackingNumber,			   
			   NMR.LName + ', ' + NMR.FName as NMRMemberName,
			   FB.ID as FundingBankID,
			   FT.ID as FundingTransactionID,
			   FB.RoutingNumber as FundingBankRouting,
			   FB.AccountNumberEncrypted as FundingBankAccountNumberEncrypted,
			   FB.AccountNumberLast4 as FundingBankAccountAccountLast4,
			   FB.BankName as FundingBankName,
			   FB.AccountType as FundingBankAccountType,
				0 as VerificationAmount1,
				0 as VerificationAmount2,
			   FT.Amount as TransferAmount,
			   TS.TransferAmountTotal as TransferAmountTotal,			
			   FT.TargetSubAccountSuffix as TargetSubAccountSuffix,
			   FT.TargetSubAccountSeq as TargetSubAccountSeq,
			   FT.DateTimeCreated as DateTimeCreated 
		FROM IMS.NMRFunding F INNER JOIN IMS.NMRFundingBank FB ON F.ID = FB.FundingID
								INNER JOIN IMS.NMRFundingTransaction FT ON FB.ID = FT.FundingBankID
									INNER JOIN IMS.NewMemberRequest NMR ON FB.TrackingNum = NMR.TrackingNum
										INNER JOIN @TransactionSummary TS ON FB.ID = TS.FundingBankID
		WHERE FT.DateTimeLastTransaction IS NULL AND FT.FundingType = 'B'
		)
	)  FRPT ORDER BY FRPT.NMRTrackingNumber, FRPT.FundingID, FRPT.FundingBankID, FRPT.FundingTransactionID	
	END	
	ELSE
	BEGIN
	
	INSERT INTO @TransactionSummary(FundingBankID, TransferAmountTotal)	
	SELECT	   		   
		   FB.ID as FundingBankID,			  
		   SUM(FT.Amount) as TransferAmountTotal			   
	FROM IMS.NMRFunding F INNER JOIN IMS.NMRFundingBank FB ON F.ID = FB.FundingID 
							INNER JOIN IMS.NMRFundingTransaction FT ON FB.ID = FT.FundingBankID						
	WHERE FT.DateTimeLastTransaction IS NULL AND 
		FT.FundingType = 'B' AND
		F.AccountNumber = @NMRAccountNumber	 
	GROUP BY FB.ID	
	  
	SELECT  FRPT.* FROM
	(   
		(
		SELECT F.ID as FundingID,
			   F.AccountNumber as NMRAccountNumber,
			   FB.TrackingNum as NMRTrackingNumber,
			   NMR.LName + ', ' + NMR.FName as NMRMemberName,
			   FB.ID as FundingBankID,
			   0 as FundingTransactionID,
			   FB.RoutingNumber as FundingBankRouting,
			   FB.AccountNumberEncrypted as FundingBankAccountNumberEncrypted,
			   FB.AccountNumberLast4 as FundingBankAccountAccountLast4,
			   FB.BankName as FundingBankName,
			   FB.AccountType as FundingBankAccountType,
			   FB.Amount1 as VerificationAmount1,
			   FB.Amount2 as VerificationAmount2,
			   0 as TransferAmount,
			   0 as TransferAmountTotal,
			   0 as TargetSubAccountSuffix,
			   0 as TargetSubAccountSeq,
			   FB.DateTimeCreated as DateTimeCreated
		FROM IMS.NMRFunding F INNER JOIN IMS.NMRFundingBank FB ON F.ID = FB.FundingID
								INNER JOIN IMS.NewMemberRequest NMR ON FB.TrackingNum = NMR.TrackingNum
		WHERE	FB.VerificationStatus = 'P' AND 
				F.AccountNumber = @NMRAccountNumber	
		)	
		UNION ALL
		(		
		SELECT F.ID as FundingID,
			   F.AccountNumber as NMRAccountNumber,
			   FB.TrackingNum as NMRTrackingNumber,
			   NMR.LName + ', ' + NMR.FName as NMRMemberName,
			   FB.ID as FundingBankID,
			   FT.ID as FundingTransactionID,
			   FB.RoutingNumber as FundingBankRouting,
			   FB.AccountNumberEncrypted as FundingBankAccountNumberEncrypted,
			   FB.AccountNumberLast4 as FundingBankAccountAccountLast4,
			   FB.BankName as FundingBankName,
			   FB.AccountType as FundingBankAccountType,
				0 as VerificationAmount1,
				0 as VerificationAmount2,
			   FT.Amount as TransferAmount,
			   TS.TransferAmountTotal as TransferAmountTotal,
			   FT.TargetSubAccountSuffix as TargetSubAccountSuffix,
			   FT.TargetSubAccountSeq as TargetSubAccountSeq,
			   FT.DateTimeCreated as DateTimeCreated
		FROM IMS.NMRFunding F 
				INNER JOIN IMS.NMRFundingBank FB ON F.ID = FB.FundingID
					INNER JOIN IMS.NMRFundingTransaction FT ON FB.ID = FT.FundingBankID
						INNER JOIN IMS.NewMemberRequest NMR ON FB.TrackingNum = NMR.TrackingNum
							INNER JOIN @TransactionSummary TS ON FB.ID = TS.FundingBankID
		WHERE	FT.DateTimeLastTransaction IS NULL AND 
				FT.FundingType = 'B' AND 
				F.AccountNumber = @NMRAccountNumber
		)
	)  FRPT	ORDER BY FRPT.NMRTrackingNumber, FRPT.FundingID, FRPT.FundingBankID, FRPT.FundingTransactionID
	END		
END

GO
/****** Object:  StoredProcedure [IMS].[spAltra_ILAApplicationSearch_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_ILAApplicationSearch_Select
CREATE Procedure [IMS].[spAltra_ILAApplicationSearch_Select]
	@TrackingNum varchar(9),
	@SSN varchar(9),
	@Account varchar(9),
	@AppNumber varchar(9)
AS

DECLARE @SQL nvarchar(1000)
SET @SQL = 'SELECT AI.*, A.UserSessionXML FROM ILA_ApplicationInfo AI INNER JOIN ILA_Application A ON A.TrackingNum = AI.TrackingNum '
IF @TrackingNum <> '*'
BEGIN
	SET @SQL = @SQL + ' AND AI.TrackingNum = @TrackingNum'
END
IF @SSN <> '*'
BEGIN
	SET @SQL = @SQL + ' AND AI.PrimarySSN = @SSN'
END
IF @Account <> '*'
BEGIN
	SET @SQL = @SQL + ' AND AI.Account = @Account'
END
IF @AppNumber <> '*'
BEGIN
	SET @SQL = @SQL + ' AND AI.AppNumber = @AppNumber'
END

Exec sp_executesql @SQL, N'@TrackingNum varchar(9),	@SSN varchar(9), @Account varchar(9), @AppNumber varchar(9)', @TrackingNum = @TrackingNum, @SSN = @SSN, @Account = @Account, @AppNumber = @AppNumber
GO
/****** Object:  StoredProcedure [IMS].[spAltra_OAOReport_ApplicationStatusReport]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_OAOReport_ApplicationStatusReport
CREATE Procedure [IMS].[spAltra_OAOReport_ApplicationStatusReport]
	@StartDate datetime,
	@StopDate datetime
AS

SELECT
	NMR.TrackingNum
	, UPPER(RTRIM(LEFT(NMR.FName, 1)) + ' ' + RTRIM(NMR.LName)) AS MemberName
	, NMR.ApplyDate AS [Date_Time]
	, NMR.CurrBranch AS Branch
	, CASE
		WHEN NMR.Processed = '1' THEN 'In-Process'
		WHEN NMR.Processed = '999' THEN 'Created'
		ELSE 'Denied'
		END AS Status
	, CASE
		WHEN (SELECT COUNT(*) FROM NMRFundingBank AS NMRFB WHERE NMRFB.TrackingNum = NMR.TrackingNum AND NMRFB.VerificationStatus <> 'X' AND NMRFB.VerificationStatus <> 'E') > 0 THEN 'ACH'
		WHEN (SELECT COUNT(*) FROM NMRFundingCard AS NMRFC WHERE NMRFC.TrackingNum = NMR.TrackingNum) > 0 THEN 'Credit Card'
		WHEN (SELECT COUNT(*) FROM NMRFundingTransaction AS NMRFT WHERE NMRFT.TrackingNum = NMR.TrackingNum AND NMRFT.SourceSubAccountSeq <> '') > 0 THEN 'Transfer'
		WHEN (SELECT FundingType FROM NMRFundingTransaction AS NMRFT WHERE NMRFT.TrackingNum = NMR.TrackingNum) = NULL THEN 'Skipped'
		ELSE 'None'
		END AS PaymentMethod
	, (SELECT SUM(Amount) FROM NMRFundingTransaction AS NMRFT WHERE NMRFT.TrackingNum = NMR.TrackingNum GROUP BY NMRFT.TrackingNum) AS InitialAmountFunded
	, NMR.Account AS AccountNumber
FROM IMS.NewMemberRequest NMR
WHERE
	NMR.Processed > 0
	AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> ''
	AND (NMR.ApplyDate >= @StartDate AND NMR.ApplyDate <= @StopDate)
GO
/****** Object:  StoredProcedure [IMS].[spAltra_OAOReport_FundingDetailReport]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_OAOReport_FundingDetailReport
CREATE Procedure [IMS].[spAltra_OAOReport_FundingDetailReport]
	@StartDate datetime,
	@StopDate datetime
AS

SELECT Bank, Card, Existing, Skipped FROM
(
	(SELECT COUNT(DISTINCT NMRFT.TrackingNum) AS Bank
	FROM IMS.NMRFundingTransaction NMRFT
	LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	INNER JOIN IMS.NMRFundingBank NMRFB ON NMRFB.ID = NMRFT.FundingBankID
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND NMRFT.FundingBankID <> '' AND NMR.Processed = 999 AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate) AND (NMRFB.VerificationStatus <> 'E') AND (NMRFB.VerificationStatus <> 'X')) a
		FULL OUTER JOIN
	(SELECT COUNT(DISTINCT NMRFT.TrackingNum) AS Card
	FROM IMS.NMRFundingTransaction NMRFT
	LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND NMRFT.FundingCardID <> '' AND NMR.Processed = 999 AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate)) b ON 1=1
		FULL OUTER JOIN
	(SELECT COUNT(DISTINCT NMRFT.TrackingNum) AS Existing
	FROM IMS.NMRFundingTransaction NMRFT
	LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND NMRFT.SourceSubAccountSeq <> '' AND NMR.Processed = 999 AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate)) c ON 1=1
		FULL OUTER JOIN
	(SELECT COUNT(DISTINCT NMR.TrackingNum) AS Skipped
	FROM IMS.NMRFundingTransaction NMRFT
	FULL OUTER JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND (NMR.Processed = 999 AND ISNULL(NMRFT.TrackingNum, 0) = 0) AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate)) d ON 1=1
)

UNION ALL

SELECT Bank, Card, Existing, Skipped FROM
(
	(SELECT COUNT(DISTINCT NMRFT.TrackingNum) AS Bank
	FROM IMS.NMRFundingTransaction NMRFT
	LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	INNER JOIN IMS.NMRFundingBank NMRFB ON NMRFB.ID = NMRFT.FundingBankID
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND NMRFT.FundingBankID <> '' AND NMR.Processed = 998 AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate) AND (NMRFB.VerificationStatus <> 'E') AND (NMRFB.VerificationStatus <> 'X')) a
		FULL OUTER JOIN
	(SELECT COUNT(DISTINCT NMRFT.TrackingNum) AS Card
	FROM IMS.NMRFundingTransaction NMRFT
	LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND NMRFT.FundingCardID <> '' AND NMR.Processed = 998 AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate)) b ON 1=1
		FULL OUTER JOIN
	(SELECT COUNT(DISTINCT NMRFT.TrackingNum) AS Existing
	FROM IMS.NMRFundingTransaction NMRFT
	LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND NMRFT.SourceSubAccountSeq <> '' AND NMR.Processed = 998 AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate)) c ON 1=1
		FULL OUTER JOIN
	(SELECT COUNT(DISTINCT NMR.TrackingNum) AS Skipped
	FROM IMS.NMRFundingTransaction NMRFT
	FULL OUTER JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND (NMR.Processed = 998 AND ISNULL(NMRFT.TrackingNum, 0) = 0) AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate)) d ON 1=1
)
GO
/****** Object:  StoredProcedure [IMS].[spAltra_ReviewQueue_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Jon Eagar
-- Create date: 7/08/2011
-- Description:	Lists the active NMR records for the Queue Review
-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_ReviewQueue_SelectAll
-- =============================================
CREATE PROCEDURE [IMS].[spAltra_ReviewQueue_SelectAll] 
	-- Add the parameters for the stored procedure here
	@StartDate DATETIME = NULL,
	@EndDate DATETIME = NULL,
	@StatusCode VARCHAR(2) = NULL
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
 
	DECLARE @Hierarchy INT
	DECLARE @StatusID INT

	IF @StartDate IS NOT NULL AND @StartDate <> ''
	BEGIN
		SET @StartDate = CONVERT(DATETIME,(CONVERT(VARCHAR(10), @StartDate, 102)))  --Set Time to beginning of Day
		SET @EndDate = CAST( CONVERT(CHAR(10), @EndDate, 101) + ' 11:59 PM' AS DATETIME) --Set Time to end of day
	END
	
	SET @StatusCode = NULLIF(@StatusCode,'')

	DECLARE @ReviewQueue TABLE
	(
		ID INT IDENTITY(1,1) PRIMARY KEY CLUSTERED,
		TrackingNum INT,	
		Name VARCHAR(90),
		EmployerName VARCHAR(30),
		Account INT,
		StatusName VARCHAR(50),
		StatusID INT,
		FundingComplete CHAR(1), 
		ApplyDate DATETIME,
		Teller VARCHAR(50),
		LastPage VARCHAR(50),
		TNExpireDate DATETIME
	)

	IF (@StatusCode IS NOT NULL)
	BEGIN
		SELECT @Hierarchy=RQC.Hierarchy, @StatusID=RQC.ID FROM IMS.ReviewQueueConfig RQC WHERE RQC.StatusCode = @StatusCode
	END

	IF (@Hierarchy > 0 OR @StatusCode IS NULL)
	BEGIN
		--IDV DECLINE
		INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, TNExpireDate)
		SELECT	DISTINCT NMR.TrackingNum, 
				LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
				RTRIM(LTRIM(NMRW.EmployerName)) as EmployerName,			 
				NMR.Account, 
				RQC.StatusName,
				RQC.ID, 
				NMR.FundingComplete, 
				NMR.ApplyDate,
				(SELECT TOP 1 CompletedBy FROM IMS.ActionLog WHERE TrackingNum = NMR.TrackingNum AND NullIf(CompletedBy, '') IS NOT NULL ORDER BY CompletedDate DESC) AS Seller,
				(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
				NMR.TNExpireDate
		FROM IMS.NewMemberRequest NMR 
				INNER JOIN 
				IMS.NewMemberManualApproval MA 
					ON NMR.TrackingNum = MA.TrackingNum 
						INNER JOIN IMS.ReviewQueueConfig RQC ON RQC.StatusCode = 'ID'
							LEFT JOIN IMS.NewMemberWork NMRW
								ON NMR.TrackingNum = NMRW.TrackingNum
		WHERE NMR.Processed NOT IN (-1, 998, 999) AND (MA.Category = 'ID' AND MA.ApprovalStatus = '') AND (@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate) AND DATALENGTH(NMR.UserSessionXML) > 0  AND NMR.UserSessionXML IS NOT NULL
		
		IF (@Hierarchy > 1 OR @StatusCode IS NULL)
		BEGIN
			--Miscellaneous Decline
			INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, TNExpireDate)
			SELECT	DISTINCT NMR.TrackingNum, 
					LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
					RTRIM(LTRIM(NMRW.EmployerName)) as EmployerName,				 
					NMR.Account, 
					RQC.StatusName,
					RQC.ID, 
					NMR.FundingComplete, 
					NMR.ApplyDate,
					(SELECT TOP 1 CompletedBy FROM IMS.ActionLog WHERE TrackingNum = NMR.TrackingNum AND NullIf(CompletedBy, '') IS NOT NULL ORDER BY CompletedDate DESC) AS Seller,
					(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
					NMR.TNExpireDate
			FROM IMS.NewMemberRequest NMR 
					INNER JOIN 
					IMS.NewMemberManualApproval MA 
						ON NMR.TrackingNum = MA.TrackingNum AND MA.JointSequence = 0
							INNER JOIN IMS.ReviewQueueConfig RQC ON RQC.StatusCode = 'MD' AND RQC.ReasonCode = LTRIM(RTRIM(MA.ReasonCode))
								LEFT JOIN IMS.NewMemberWork NMRW
									ON NMR.TrackingNum = NMRW.TrackingNum					
			WHERE NOT EXISTS(SELECT TrackingNum FROM @ReviewQueue RQ Where RQ.TrackingNum = NMR.TrackingNum) AND
				  NMR.Processed NOT IN (-1, 998, 999) AND 
				  (MA.ApprovalStatus = '') AND (@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate)AND DATALENGTH(NMR.UserSessionXML) > 0  AND NMR.UserSessionXML IS NOT NULL

			IF (@Hierarchy > 2 OR @StatusCode IS NULL)
			BEGIN
				--Joint Decline
				INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, TNExpireDate)
				SELECT	DISTINCT NMR.TrackingNum, 
						LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
						RTRIM(LTRIM(NMRW.EmployerName)) as EmployerName,				 
						NMR.Account, 
						RQC.StatusName,
						RQC.ID, 
						NMR.FundingComplete, 
						NMR.ApplyDate,
						(SELECT TOP 1 CompletedBy FROM IMS.ActionLog WHERE TrackingNum = NMR.TrackingNum AND NullIf(CompletedBy, '') IS NOT NULL ORDER BY CompletedDate DESC) AS Seller,
						(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
						NMR.TNExpireDate
				FROM IMS.NewMemberRequest NMR 
						INNER JOIN 
						IMS.NewMemberManualApproval MA 
							ON NMR.TrackingNum = MA.TrackingNum AND MA.JointSequence > 0
								INNER JOIN IMS.ReviewQueueConfig RQC ON RQC.StatusCode = 'JD' AND RQC.ReasonCode = LTRIM(RTRIM(MA.ReasonCode))
									LEFT JOIN IMS.NewMemberWork NMRW
										ON NMR.TrackingNum = NMRW.TrackingNum					
				WHERE NOT EXISTS(SELECT TrackingNum FROM @ReviewQueue RQ Where RQ.TrackingNum = NMR.TrackingNum) AND
					  NMR.Processed NOT IN (-1, 998, 999) AND 
					  (MA.ApprovalStatus = '') AND (@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate)AND DATALENGTH(NMR.UserSessionXML) > 0  AND NMR.UserSessionXML IS NOT NULL

				IF (@Hierarchy > 3 OR @StatusCode IS NULL)
				BEGIN
					--Manual Review
					INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, TNExpireDate)
					SELECT	DISTINCT NMR.TrackingNum, 
							LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
							RTRIM(LTRIM(NMRW.EmployerName)) as EmployerName,				 
							NMR.Account, 
							RQC.StatusName,
							RQC.ID, 
							NMR.FundingComplete, 
							NMR.ApplyDate,
							(SELECT TOP 1 CompletedBy FROM IMS.ActionLog WHERE TrackingNum = NMR.TrackingNum AND NullIf(CompletedBy, '') IS NOT NULL ORDER BY CompletedDate DESC) AS Seller,
							(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
							NMR.TNExpireDate
					FROM IMS.NewMemberRequest NMR 
							INNER JOIN 
							IMS.NewMemberManualApproval MA 
								ON NMR.TrackingNum = MA.TrackingNum 
									INNER JOIN IMS.ReviewQueueConfig RQC ON RQC.StatusCode = 'MR' AND RQC.ReasonCode = LTRIM(RTRIM(MA.ReasonCode))
										LEFT JOIN IMS.NewMemberWork NMRW
											ON NMR.TrackingNum = NMRW.TrackingNum		
					WHERE NOT EXISTS(SELECT TrackingNum FROM @ReviewQueue RQ Where RQ.TrackingNum = NMR.TrackingNum) AND
						  NMR.Processed NOT IN (-1, 998, 999) AND 
						  (MA.ApprovalStatus = '') AND (@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate) AND DATALENGTH(NMR.UserSessionXML) > 0 AND NMR.UserSessionXML IS NOT NULL

					IF (@Hierarchy > 4 OR @StatusCode IS NULL)
					BEGIN
						--Need Decision/Pending
						INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, TNExpireDate)
						SELECT	DISTINCT NMR.TrackingNum, 
								LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
								RTRIM(LTRIM(NMRW.EmployerName)) as EmployerName,
								NMR.Account, 
								RQC.StatusName,
								RQC.ID, 
								NMR.FundingComplete, 
								NMR.ApplyDate,
								(SELECT TOP 1 CompletedBy FROM IMS.ActionLog WHERE TrackingNum = NMR.TrackingNum AND NullIf(CompletedBy, '') IS NOT NULL ORDER BY CompletedDate DESC) AS Seller,
								(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
								NMR.TNExpireDate
						FROM IMS.NewMemberRequest NMR  
								INNER JOIN IMS.NewMemberSubAccount SA 
									ON NMR.TrackingNum = SA.TrackingNum
										INNER JOIN IMS.ReviewQueueConfig RQC ON RQC.StatusCode = 'DP'
											LEFT JOIN IMS.NewMemberWork NMRW
												ON NMR.TrackingNum = NMRW.TrackingNum
													LEFT JOIN IMS.NewMemberManualApproval MA 
														ON NMR.TrackingNum = MA.TrackingNum
						WHERE NOT EXISTS(SELECT TrackingNum FROM @ReviewQueue RQ Where RQ.TrackingNum = NMR.TrackingNum) AND
							  NMR.Processed NOT IN (-1, 998, 999) AND 
							  ((SA.Approval <> 'A' AND SA.ApprovedBy = '') OR (MA.ApprovalStatus = '')) AND 
							  (@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate) AND DATALENGTH(NMR.UserSessionXML) > 0 AND NMR.UserSessionXML IS NOT NULL

						IF (@Hierarchy > 5 OR @StatusCode IS NULL)
						BEGIN
							--In Progress
							INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, TNExpireDate)
							SELECT	DISTINCT NMR.TrackingNum, 
									LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
									RTRIM(LTRIM(NMRW.EmployerName)) as EmployerName,			 
									NMR.Account, 
									RQC.StatusName,
									RQC.ID, 
									NMR.FundingComplete, 
									NMR.ApplyDate,
									(SELECT TOP 1 CompletedBy FROM IMS.ActionLog WHERE TrackingNum = NMR.TrackingNum AND NullIf(CompletedBy, '') IS NOT NULL ORDER BY CompletedDate DESC) AS Seller,
									(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
									NMR.TNExpireDate
							FROM IMS.NewMemberRequest NMR			
									INNER JOIN IMS.ReviewQueueConfig RQC 
										ON RQC.StatusCode = 'IP'
											LEFT JOIN IMS.NewMemberWork NMRW
												ON NMR.TrackingNum = NMRW.TrackingNum
							WHERE NOT EXISTS(SELECT TrackingNum FROM @ReviewQueue RQ WHERE RQ.TrackingNum = NMR.TrackingNum) AND
								  NMR.Processed = 1 AND 
								  (SELECT COUNT(TrackingNum) FROM IMS.NewMemberManualApproval MA WHERE MA.TrackingNum = NMR.TrackingNum AND MA.ApprovalStatus = '') = 0 AND
								  (SELECT COUNT(TrackingNum) FROM IMS.NewMemberSubAccount SA WHERE SA.TrackingNum = NMR.TrackingNum) = (SELECT COUNT(TrackingNum) FROM IMS.NewMemberSubAccount SA WHERE SA.TrackingNum = NMR.TrackingNum AND (SA.Approval = 'A' OR SA.ApprovedBy <> '')) AND	 
								  (@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate) AND DATALENGTH(NMR.UserSessionXML) > 0 AND NMR.UserSessionXML IS NOT NULL

							IF (@Hierarchy > 6 OR @StatusCode IS NULL)
							BEGIN
								--Not Funded
								INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, TNExpireDate)
								SELECT	DISTINCT NMR.TrackingNum, 
										LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
										RTRIM(LTRIM(NMRW.EmployerName)) as EmployerName,			 
										NMR.Account, 
										RQC.StatusName,
										RQC.ID, 
										NMR.FundingComplete, 
										NMR.ApplyDate,
										(SELECT TOP 1 CompletedBy FROM IMS.ActionLog WHERE TrackingNum = NMR.TrackingNum AND NullIf(CompletedBy, '') IS NOT NULL ORDER BY CompletedDate DESC) AS Seller,
										(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
										NMR.TNExpireDate
								FROM IMS.NewMemberRequest NMR
									INNER JOIN IMS.ReviewQueueConfig RQC 
										ON RQC.StatusCode = 'NF'
											LEFT JOIN IMS.NewMemberWork NMRW
												ON NMR.TrackingNum = NMRW.TrackingNum
								WHERE NOT EXISTS(SELECT TrackingNum FROM @ReviewQueue RQ WHERE RQ.TrackingNum = NMR.TrackingNum) AND
									  NMR.Processed = 999 AND 
									  IsNull(FundingComplete, 'N') <> 'Y' AND
									  (@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate) AND DATALENGTH(NMR.UserSessionXML) > 0 AND NMR.UserSessionXML IS NOT NULL

							END
						END
					END	  
				END
			END
		END
		SELECT 
		TrackingNum as TrackingNumber,		 
		Name,
		EmployerName,
		Account,
		StatusName,
		CASE WHEN FundingComplete <> 'Y' THEN 'N' ELSE 'Y' END as FundingComplete,
		ApplyDate, 
		Teller, 
		LastPage, 
		TNExpireDate,
		(
			SELECT COUNT(*)
			FROM IMS.SecureMailThread SMT
			LEFT JOIN IMS.SecureMailAttachment SMA ON SMA.ThreadId = SMT.ThreadId
			WHERE SMT.TrackingNum = RQ.TrackingNum AND SMA.Status = 'U'
		) AS AttachU,
		(
			SELECT COUNT(*)
			FROM IMS.SecureMailThread SMT
			LEFT JOIN IMS.SecureMailAttachment SMA ON SMA.ThreadId = SMT.ThreadId
			WHERE SMT.TrackingNum = RQ.TrackingNum AND SMA.Status = 'V'
		) AS AttachV,
		(
			SELECT COUNT(*)
			FROM IMS.SecureMailThread SMT
			LEFT JOIN IMS.SecureMailAttachment SMA ON SMA.ThreadId = SMT.ThreadId
			WHERE SMT.TrackingNum = RQ.TrackingNum AND SMA.Status = 'Q'
		) AS AttachQU,
		(
			SELECT COUNT(*)
			FROM IMS.SecureMailThread SMT
			LEFT JOIN IMS.SecureMailAttachment SMA ON SMA.ThreadId = SMT.ThreadId
			WHERE SMT.TrackingNum = RQ.TrackingNum AND SMA.Status = 'QV'
		) AS AttachQV
		FROM @ReviewQueue RQ 
		WHERE RQ.StatusID = @StatusID OR @StatusID IS NULL order by TrackingNum		
	END
END
GO
/****** Object:  StoredProcedure [IMS].[spAltra_SignOnOAO]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.SignOnOAO 
CREATE Procedure [IMS].[spAltra_SignOnOAO]
@TrackingNum int,
@Password varchar(24),
@SSN varchar(9),
@DOB datetime
AS
BEGIN
	SELECT
		n.TrackingNum, 
		isNull(cast(n.Account as varchar(50)),'') as Account, 
		n.UserSessionXML, 
		n.AccountType,
		n.Created, 
		n.Processed, 
		n.TNExpireDate, 
		e.BadLoginAttempts
	FROM IMS.NewMemberRequest n
	JOIN IMS.NewMemberRequestExtra e on n.TrackingNum = e.TrackingNum
	WHERE 
		n.TrackingNum = @TrackingNum 
		and n.Processed IN (1, 997, 999) 
		and (
			n.Password = @Password 
			or (
				n.SSN = @SSN 
				and n.DOB = @DOB
			)
		)
END
GO
/****** Object:  StoredProcedure [IMS].[spAltra_SyncCarts]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_SyncCarts
CREATE PROCEDURE [IMS].[spAltra_SyncCarts]
@TrackingNum int,
@SyncMode varchar(1)
AS

IF @SyncMode = 'S' OR @SyncMode = 'B' OR @SyncMode = 'Y'
BEGIN
	--Delete from cart where subaccount record no longer exists
	DELETE FROM IMS.NewMemberShoppingCart
	WHERE TrackingNum = @TrackingNum AND SubAccountID IS NOT NULL AND
		SubAccountID NOT IN (SELECT ID FROM IMS.NewMemberSubAccount
					WHERE TrackingNum = @TrackingNum)
END

IF @SyncMode = 'C' OR @SyncMode = 'B' OR @SyncMode = 'Y'
BEGIN
	--Delete from subaccounts where cart record no longer exists
	DELETE FROM IMS.NewMemberSubAccount
	WHERE TrackingNum = @TrackingNum AND ShoppingCartID IS NOT NULL AND
		ShoppingCartID NOT IN (SELECT ID FROM IMS.NewMemberShoppingCart
					WHERE TrackingNum = @TrackingNum)
END

IF @SyncMode = 'S' OR @SyncMode = 'B' OR @SyncMode = 'Y'
BEGIN
	--Update cart items with changes in the subaccount records
	UPDATE IMS.NewMemberShoppingCart
	SET RequestedAmount = (SELECT Amount FROM IMS.NewMemberSubAccount
				WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberShoppingCart.SubAccountID),
		InsuranceAmount1 = NULL,
		InsuranceAmount2 = NULL
	WHERE TrackingNum = @TrackingNum AND
		SubAccountID IN (SELECT ID FROM IMS.NewMemberSubAccount WHERE TrackingNum = @TrackingNum) AND
		IsNull((SELECT LineOfCredit FROM IMS.udt_LSubAccounts WHERE UniqueID = IMS.NewMemberShoppingCart.ProductID), 'N') = 'N' AND
		(SELECT Amount FROM IMS.NewMemberSubAccount WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberShoppingCart.SubAccountID) <> IMS.NewMemberShoppingCart.RequestedAmount + IsNull(IMS.NewMemberShoppingCart.InsuranceAmount1, 0) + IsNull(IMS.NewMemberShoppingCart.InsuranceAmount2, 0)

	UPDATE IMS.NewMemberShoppingCart
	SET RequestedAmount = (SELECT CreditLimit FROM IMS.NewMemberSubAccount
				WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberShoppingCart.SubAccountID),
		InsuranceAmount1 = NULL,
		InsuranceAmount2 = NULL
	WHERE TrackingNum = @TrackingNum AND
		SubAccountID IN (SELECT ID FROM IMS.NewMemberSubAccount WHERE TrackingNum = @TrackingNum) AND
		(SELECT LineOfCredit FROM IMS.udt_LSubAccounts WHERE UniqueID = IMS.NewMemberShoppingCart.ProductID) = 'Y' AND
		(SELECT CreditLimit FROM IMS.NewMemberSubAccount WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberShoppingCart.SubAccountID) <> IMS.NewMemberShoppingCart.RequestedAmount + IsNull(IMS.NewMemberShoppingCart.InsuranceAmount1, 0) + IsNull(IMS.NewMemberShoppingCart.InsuranceAmount2, 0)

	UPDATE IMS.NewMemberShoppingCart
	SET Term = (SELECT Term FROM IMS.NewMemberSubAccount
				WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberShoppingCart.SubAccountID)
	WHERE TrackingNum = @TrackingNum AND
		SubAccountID IN (SELECT ID FROM IMS.NewMemberSubAccount WHERE TrackingNum = @TrackingNum)

	--Create cart items for new subaccount records
	INSERT INTO IMS.NewMemberShoppingCart
	(ProductID, ProductName, YesNoMaybe, SLType, Approved, TrackingNum, MasterCategoryID, CategoryID,
	Exclude, CreatedBy, CreatedOn, Created, Fulfill, LOSProductID, LOSID,
	ApprovedAmount, RequestedAmount, Requires, LoanType, LoanSubType, Term, InsCode, ClosedFlag, LossFlag, SubAccountID)
	SELECT STP.ProductID, STP.ProductDesc, 'YES', STP.SLType, 'Y', @TrackingNum AS TrackingNum, STP.MasterCategoryID, STP.CategoryID,
		Prod.Exclude, SA.CreatedBy, SA.CreatedOn, SA.Created, STP.Fulfill, STP.LOSProductID, SA.LOSID,
		CASE WHEN Prod.LineOfCredit = 'Y' THEN SA.CreditLimit
		     ELSE SA.Amount
		END AS ApprovedAmount,
		CASE WHEN Prod.LineOfCredit = 'Y' THEN SA.CreditLimit
		     ELSE SA.Amount
		END AS RequestedAmount,
		STP.Requires, STP.LoanType, STP.LoanSubType, SA.Term, SA.InsCode, SA.ClosedFlag, SA.LossFlag, SA.ID AS SubAccountID
	FROM IMS.udt_SalesToolProducts STP INNER JOIN
		IMS.NewMemberSubAccount SA ON SA.SubAccountType = STP.ProductID INNER JOIN
		IMS.NewMemberRequest NMR ON SA.TrackingNum = NMR.TrackingNum INNER JOIN
		IMS.udt_AllSubAccounts Prod ON STP.ProductID = Prod.UniqueID AND ',' + RTrim(Prod.AccountTypes) + ',' LIKE '%,' + RTrim(NMR.AccountType) + ',%'
	WHERE SA.TrackingNum = @TrackingNum AND SA.SubAccountType NOT IN (SELECT ProductID FROM IMS.NewMemberShoppingCart WHERE TrackingNum = @TrackingNum)
	
	--Delete products that require products that are no longer here
	DELETE FROM IMS.NewMemberShoppingCart
	WHERE TrackingNum = @TrackingNum AND NullIf(Requires, '') IS NOT NULL AND
		(SELECT Count(SC2.ID) FROM IMS.NewMemberShoppingCart SC2 INNER JOIN
			(SELECT DISTINCT
			        SUBSTRING(l.List, v.Number+1, CHARINDEX(',', l.List, v.Number+1) -v.Number-1) AS Requires
			   FROM Master.dbo.spt_Values v
			  CROSS JOIN
			        (SELECT ',' + RTRIM(REPLACE(Requires, ', ', ',')) + ',' AS List
				FROM IMS.NewMemberShoppingCart
				WHERE TrackingNum = @TrackingNum AND ProductID = IMS.NewMemberShoppingCart.ProductID) l
			  WHERE v.Type = 'P'
			    AND v.Number BETWEEN 1 AND LEN(l.List)-1
			    AND SUBSTRING(l.List, v.Number, 1)=',') FN ON SC2.ProductID = FN.Requires
			WHERE TrackingNum = @TrackingNum AND SC2.ProductID <> IMS.NewMemberShoppingCart.ProductID) = 0
END

IF @SyncMode = 'C' OR @SyncMode = 'B' OR @SyncMode = 'Y'
BEGIN
	--Update subaccounts with changes in the cart records
	UPDATE IMS.NewMemberSubAccount
	SET Amount = (SELECT RequestedAmount + IsNull(InsuranceAmount1, 0) + IsNull(InsuranceAmount2, 0) FROM IMS.NewMemberShoppingCart
				WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberSubAccount.ShoppingCartID)
	WHERE TrackingNum = @TrackingNum AND
		ShoppingCartID IN (SELECT ID FROM IMS.NewMemberShoppingCart WHERE TrackingNum = @TrackingNum) AND
		IsNull((SELECT LineOfCredit FROM IMS.udt_LSubAccounts WHERE UniqueID = IMS.NewMemberSubAccount.SubAccountType), 'N') = 'N' AND
		(SELECT RequestedAmount + IsNull(InsuranceAmount1, 0) + IsNull(InsuranceAmount2, 0) FROM IMS.NewMemberShoppingCart WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberSubAccount.ShoppingCartID) <> IMS.NewMemberSubAccount.Amount

	UPDATE IMS.NewMemberSubAccount
	SET CreditLimit = (SELECT RequestedAmount + IsNull(InsuranceAmount1, 0) + IsNull(InsuranceAmount2, 0) FROM IMS.NewMemberShoppingCart
				WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberSubAccount.ShoppingCartID)
	WHERE TrackingNum = @TrackingNum AND
		ShoppingCartID IN (SELECT ID FROM IMS.NewMemberShoppingCart WHERE TrackingNum = @TrackingNum) AND
		(SELECT LineOfCredit FROM IMS.udt_LSubAccounts WHERE UniqueID = IMS.NewMemberSubAccount.SubAccountType) = 'Y' AND
		(SELECT RequestedAmount + IsNull(InsuranceAmount1, 0) + IsNull(InsuranceAmount2, 0) FROM IMS.NewMemberShoppingCart WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberSubAccount.ShoppingCartID) <> IMS.NewMemberSubAccount.CreditLimit

	UPDATE IMS.NewMemberSubAccount
	SET Term = (SELECT Term FROM IMS.NewMemberShoppingCart
				WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberSubAccount.ShoppingCartID)
	WHERE TrackingNum = @TrackingNum AND
		ShoppingCartID IN (SELECT ID FROM IMS.NewMemberShoppingCart WHERE TrackingNum = @TrackingNum)

	--Create subaccount records for new cart items
	INSERT INTO IMS.NewMemberSubAccount
	(TrackingNum, Sequence, DescAbrv, SubAccountType, Description, ACC, CollateralCode, SLType, Amount,
	Approval, Created, CreatedBy, CreatedOn, ProductType,
	CreditLimit, StartSuffix, StopSuffix, APR, CashAdvanceAPR, SkipCode, Coupons, Term, Method,
	Frequency, InsCode, DisclosureCode, ReviewDate, MaturityDate, Officer, CurrBranch, StatementOrder, MaturityDisp, 
	DividendDisp, LineofCredit, PaymentPercent, AllowPlastic1, AllowPlastic2, AllowPlastic3, AllowPlastic4, 
	CreateHost, HostCommand, ServiceClass, TaxCode, JointTaxCode, W8TaxCode, KTransferLink, LoanDiscounts, 
	MICRBegin, MICREnd, MICRFormat, PromptMICR, Purpose, FundingOrder, VRLIndex, VRLMargin, 
	VRLCode, VRLFreq, LOSProductID, LOSID, LossFlag, ClosedFlag, ShoppingCartID, Action, Payment)
	SELECT @TrackingNum AS TrackingNum, (SELECT Count(ID) FROM IMS.NewMemberShoppingCart SC2 WHERE TrackingNum = @TrackingNum AND SC2.Approved = 'Y' AND 
		SC2.ProductID NOT IN (SELECT SubAccountType FROM IMS.NewMemberSubAccount SA2 WHERE TrackingNum = @TrackingNum) AND SC2.ID <= SC.ID) + 
		(SELECT IsNull(Max(Sequence), 0) FROM IMS.NewMemberSubAccount SA3 WHERE TrackingNum = @TrackingNum) AS Sequence,
	Prod.DescAbrv, Prod.UniqueID, Prod.Description, Prod.ACC, Prod.CollateralCode, Prod.SLType,
	CASE WHEN Prod.LineOfCredit = 'Y' THEN 0
	     ELSE SC.RequestedAmount + IsNull(SC.InsuranceAmount1, 0) + IsNull(SC.InsuranceAmount2, 0)
	END AS Amount, NMR.Approval, SC.Created, SC.CreatedBy, SC.CreatedOn, Prod.ProductType,
	CASE WHEN Prod.LineOfCredit = 'Y' THEN SC.RequestedAmount
	     ELSE 0
	END AS CreditLimit, Prod.StartSuffix, Prod.StopSuffix, Prod.APR, Prod.CashAdvanceAPR, Prod.SkipCode, Prod.Coupons, Prod.Term, Prod.Method,
	Prod.Frequency, Prod.InsCode, Prod.DisclosureCode, Prod.ReviewDate, Prod.MaturityDate, Prod.Officer, Prod.CurrBranch, Prod.StatementOrder, Prod.MaturityDisp, 
	Prod.DividendDisp, Prod.LineofCredit, Prod.PaymentPercent, Prod.AllowPlastic1, Prod.AllowPlastic2, Prod.AllowPlastic3, Prod.AllowPlastic4, 
	Prod.CreateHost, Prod.HostCommand, Prod.ServiceClass, Prod.TaxCode,Prod.JointTaxCode, Prod.W8TaxCode, Prod.KTransferLink, Prod.LoanDiscounts, 
	Prod.MICRBegin, Prod.MICREnd, Prod.MICRFormat, Prod.PromptMICR, Prod.Purpose, Prod.FundingOrder, Prod.VRLIndex, Prod.VRLMargin, 
	Prod.VRLCode, Prod.VRLFreq, SC.LOSProductID, SC.LOSID, SC.LossFlag, SC.ClosedFlag, SC.ID AS ShoppingCartID, Prod.Action, 0
	FROM IMS.NewMemberShoppingCart SC INNER JOIN
		IMS.NewMemberRequest NMR ON SC.TrackingNum = NMR.TrackingNum INNER JOIN
		IMS.udt_AllSubAccounts Prod ON SC.ProductID = Prod.UniqueID AND ',' + RTrim(Prod.AccountTypes) + ',' LIKE '%,' + RTrim(NMR.AccountType) + ',%'
	WHERE SC.TrackingNum = @TrackingNum AND SC.Approved = 'Y' AND SC.ProductID NOT IN (SELECT SubAccountType FROM IMS.NewMemberSubAccount WHERE TrackingNum = @TrackingNum)
	ORDER BY ID
	
	--Delete products that require products that are no longer here
	DELETE NewMemberSubAccount FROM IMS.NewMemberSubAccount SA
	WHERE TrackingNum = @TrackingNum AND
		(SELECT NullIf(Requires, '') FROM IMS.udt_AllSubAccounts WHERE UniqueID = SA.SubAccountType) IS NOT NULL AND
		(SELECT Count(SA2.ID) FROM IMS.NewMemberSubAccount SA2 INNER JOIN
			(SELECT DISTINCT
			        SUBSTRING(l.List, v.Number+1, CHARINDEX(',', l.List, v.Number+1) -v.Number-1) AS Requires
			   FROM Master.dbo.spt_Values v
			  CROSS JOIN
			        (SELECT ',' + RTRIM(REPLACE(Requires, ', ', ',')) + ',' AS List
				FROM IMS.udt_AllSubAccounts
				WHERE UniqueID = SA.SubAccountType) l
			  WHERE v.Type = 'P'
			    AND v.Number BETWEEN 1 AND LEN(l.List)-1
			    AND SUBSTRING(l.List, v.Number, 1)=',') FN ON SA2.SubAccountType = FN.Requires
			WHERE TrackingNum = @TrackingNum AND SA2.SubAccountType <> SA.SubAccountType) = 0

	--Delete subaccounts that came from shopping cart items that are no longer approved
	DELETE FROM IMS.NewMemberSubAccount
	WHERE TrackingNum = @TrackingNum AND ((ID IN (SELECT SubAccountID
		FROM IMS.NewMemberShoppingCart
		WHERE TrackingNum = @TrackingNum AND SubAccountID IS NOT NULL AND
			Approved = 'N')) OR (ShoppingCartID IS NOT NULL AND 
		ShoppingCartID IN (SELECT ID
		FROM IMS.NewMemberShoppingCart
		WHERE TrackingNum = @TrackingNum AND Approved = 'N')))

	UPDATE IMS.NewMemberShoppingCart
	SET SubAccountID = NULL
	WHERE TrackingNum = @TrackingNum AND Approved = 'N'

	--Delete plastic cards for subaccounts that no longer exist
	DELETE FROM IMS.NewMemberPlasticCard
	WHERE TrackingNum = @TrackingNum AND Sequence IN (SELECT PlasticCardSequence
		FROM IMS.NewMemberSubAccountLink
		WHERE TrackingNum = @TrackingNum AND SubSequence NOT IN (SELECT Sequence
			FROM IMS.NewMemberSubAccount
			WHERE TrackingNum = @TrackingNum))

	DELETE FROM IMS.NewMemberSubAccountLink
	WHERE TrackingNum = @TrackingNum AND SubSequence NOT IN (SELECT Sequence
		FROM IMS.NewMemberSubAccount
		WHERE TrackingNum = @TrackingNum)

	--Delete flags for subaccounts that no longer exist
	DELETE FROM IMS.NewMemberFlag
	WHERE TrackingNum = @TrackingNum AND IsNull(SubAccountSequence, 0) > 0 AND
		SubAccountSequence NOT IN (SELECT Sequence
		FROM IMS.NewMemberSubAccount
		WHERE TrackingNum = @TrackingNum)

	--Delete joint owner links for subaccounts that no longer exist
	DELETE FROM IMS.NewMemberJointLink
	WHERE TrackingNum = @TrackingNum AND SubAccountSequence NOT IN (SELECT Sequence
		FROM IMS.NewMemberSubAccount
		WHERE TrackingNum = @TrackingNum)

	--Delete overdraft links for subaccount that no longer exist
	DELETE FROM IMS.NewMemberOverdraftLink
	WHERE TrackingNum = @TrackingNum AND ((TargetSubAccount > 0 AND
		TargetSubAccount NOT IN (SELECT Sequence
		FROM IMS.NewMemberSubAccount
		WHERE TrackingNum = @TrackingNum)) OR (SourceSubAccount > 0 AND
		SourceSubAccount NOT IN (SELECT Sequence
		FROM IMS.NewMemberSubAccount
		WHERE TrackingNum = @TrackingNum)))
END

--Synchronize IDs
UPDATE IMS.NewMemberSubAccount
SET ShoppingCartID = (SELECT ID FROM IMS.NewMemberShoppingCart
			WHERE TrackingNum = @TrackingNum AND SubAccountID = IMS.NewMemberSubAccount.ID)
WHERE TrackingNum = @TrackingNum AND (SELECT ID FROM IMS.NewMemberShoppingCart
			WHERE TrackingNum = @TrackingNum AND SubAccountID = IMS.NewMemberSubAccount.ID) IS NOT NULL

UPDATE IMS.NewMemberShoppingCart
SET SubAccountID = (SELECT ID FROM IMS.NewMemberSubAccount
			WHERE TrackingNum = @TrackingNum AND ShoppingCartID = IMS.NewMemberShoppingCart.ID)
WHERE TrackingNum = @TrackingNum AND (SELECT ID FROM IMS.NewMemberSubAccount
			WHERE TrackingNum = @TrackingNum AND ShoppingCartID = IMS.NewMemberShoppingCart.ID) IS NOT NULL
GO
/****** Object:  StoredProcedure [IMS].[spAltra_UnreconciledFunding_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		Jonathan Eagar
-- Create date: 5/08/2009
-- Description:	Returns all unreconciled transactions
-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_UnreconciledFunding_Select
-- =============================================
CREATE PROCEDURE [IMS].[spAltra_UnreconciledFunding_Select] 
	-- Add the parameters for the stored procedure here
	@AccountNumber bigint
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
    -- Insert statements for procedure here
     -- Insert statements for procedure here
    IF ISNULL(@AccountNumber, 0) = 0  
    BEGIN
		SELECT	FS.AccountNumber, 
				FS.FundingTransactionID, 
				FS.TrackingNum, 
				FS.GatewayPaymentID, 
				FS.GatewayPaymentStatus, 
				FS.FundingAccountID, 
				FS.FundingType, 
				FS.TargetSubAccountSeq, 
				FS.TargetSubAccountSuffix, 
				FS.TransferAmount, 
				FS.DateTimeCreated, 
				FS.DateTimeLastTransaction,
				FS.MemberName,
				FS.SourceBankName,
				FS.SourceBankRouting,
				FS.SourceAccountLast4,
				FS.SourceCardType
		FROM
		(
			SELECT	VF.AccountNumber, 
					VF.FundingTransactionID , 
					VF.TrackingNum, 
					VF.GatewayPaymentID, 
					PS.PaymentStatus as GatewayPaymentStatus, 
					VF.FundingAccountID, 
					VF.FundingType, 
					VF.TargetSubAccountSeq, 
					VF.TargetSubAccountSuffix, 
					VF.TransferAmount, 
					VF.DateTimeCreated, 
					VF.DateTimeLastTransaction,
					VF.MemberName,
					VF.SourceBankName,
					VF.SourceBankRouting,
					VF.SourceAccountLast4,
					VF.SourceCardType
			FROM
			(	
				(
					SELECT	F.AccountNumber, 
							FT.ID as FundingTransactionID, 
							FT.TrackingNum, 
							FT.GatewayPaymentID, 
							FB.ID as FundingAccountID, 
							FT.FundingType, 
							FT.TargetSubAccountSeq,	
							FT.TargetSubAccountSuffix, 
							FT.Amount as TransferAmount, 
							FT.DateTimeCreated, 
							FT.DateTimeLastTransaction,
							NMR.FName + ' ' + NMR.LName as MemberName,
							FB.BankName as SourceBankName,
							FB.RoutingNumber as SourceBankRouting,
							FB.AccountNumberLast4 as SourceAccountLast4,
							'' as SourceCardType
					FROM IMS.NewMemberRequest as NMR 
					INNER JOIN IMS.NMRFundingTransaction AS FT ON NMR.TrackingNum = FT.TrackingNum
					INNER JOIN IMS.NMRFundingBank AS FB ON FT.FundingBankID = FB.ID 
					INNER JOIN IMS.NMRFunding as F ON F.ID = FB.FundingID 
					WHERE FT.DateTimeReconciled IS NULL
				)
				UNION ALL
				(
					SELECT F.AccountNumber, 
					FT.ID as FundingTransactionID, 
					FT.TrackingNum, 
					FT.GatewayPaymentID, 
					FC.ID as FundingAccountID, 
					FT.FundingType, 
					FT.TargetSubAccountSeq,	
					FT.TargetSubAccountSuffix, 
					FT.Amount as TransferAmount, 
					FT.DateTimeCreated, 
					FT.DateTimeLastTransaction,
					NMR.FName + ' ' + NMR.LName as MemberName,
					'' as SourceBankName,
					'' as SourceBankRouting,
					FC.AccountNumberLast4 as SourceAccountLast4,
					FC.CardType as SourceCardType
					FROM IMS.NewMemberRequest as NMR 
					INNER JOIN IMS.NMRFundingTransaction AS FT ON NMR.TrackingNum = FT.TrackingNum
					INNER JOIN IMS.NMRFundingCard AS FC ON FT.FundingCardID = FC.ID 
					INNER JOIN IMS.NMRFunding as F ON F.ID = FC.FundingID 
					WHERE FT.DateTimeReconciled IS NULL
				)
			)AS VF LEFT OUTER JOIN IMS.USAePayPaymentStatus AS PS ON VF.GatewayPaymentID = PS.PaymentId
		) AS FS	ORDER BY DateTimeCreated
    END		
    ELSE
	BEGIN    
		SELECT	FS.AccountNumber, 
				FS.FundingTransactionID, 
				FS.TrackingNum, 
				FS.GatewayPaymentID, 
				FS.GatewayPaymentStatus, 
				FS.FundingAccountID, 
				FS.FundingType, 
				FS.TargetSubAccountSeq, 
				FS.TargetSubAccountSuffix, 
				FS.TransferAmount, 
				FS.DateTimeCreated, 
				FS.DateTimeLastTransaction,
				FS.MemberName,
				FS.SourceBankName,
				FS.SourceBankRouting,
				FS.SourceAccountLast4,
				FS.SourceCardType
		FROM
		(
			SELECT	VF.AccountNumber, 
					VF.FundingTransactionID, 
					VF.TrackingNum, 
					VF.GatewayPaymentID, 
					PS.PaymentStatus as GatewayPaymentStatus, 
					VF.FundingAccountID, 
					VF.FundingType, 
					VF.TargetSubAccountSeq, 
					VF.TargetSubAccountSuffix, 
					VF.TransferAmount, 
					VF.DateTimeCreated, 
					VF.DateTimeLastTransaction,
					VF.MemberName,
					VF.SourceBankName,
					VF.SourceBankRouting,
					VF.SourceAccountLast4,
					VF.SourceCardType
			FROM
			(	
				(
					SELECT	F.AccountNumber, 
							FT.ID as FundingTransactionID, 
							FT.TrackingNum, 
							FT.GatewayPaymentID, 
							FB.ID as FundingAccountID, 
							FT.FundingType, 
							FT.TargetSubAccountSeq,	
							FT.TargetSubAccountSuffix, 
							FT.Amount as TransferAmount, 
							FT.DateTimeCreated, 
							FT.DateTimeLastTransaction,
							NMR.FName + ' ' + NMR.LName as MemberName,
							FB.BankName as SourceBankName,
							FB.RoutingNumber as SourceBankRouting,
							FB.AccountNumberLast4 as SourceAccountLast4,
							'' as SourceCardType
					FROM IMS.NewMemberRequest as NMR 
					INNER JOIN IMS.NMRFundingTransaction AS FT ON NMR.TrackingNum = FT.TrackingNum
					INNER JOIN IMS.NMRFundingBank AS FB ON FT.FundingBankID = FB.ID 
					INNER JOIN IMS.NMRFunding as F ON F.ID = FB.FundingID 
					WHERE F.AccountNumber = @AccountNumber AND FT.DateTimeReconciled IS NULL
				)
				UNION ALL
				(
					SELECT	F.AccountNumber, 
							FT.ID as FundingTransactionID, 
							FT.TrackingNum, FT.GatewayPaymentID, 
							FC.ID as FundingAccountID, 
							FT.FundingType, 
							FT.TargetSubAccountSeq,	
							FT.TargetSubAccountSuffix, 
							FT.Amount as TransferAmount, 
							FT.DateTimeCreated, 
							FT.DateTimeLastTransaction,
							NMR.FName + ' ' + NMR.LName as MemberName,
							'' as SourceBankName,
							'' as SourceBankRouting,
							FC.AccountNumberLast4 as SourceAccountLast4,
							FC.CardType as SourceCardType
					FROM IMS.NewMemberRequest as NMR 
					INNER JOIN IMS.NMRFundingTransaction AS FT ON NMR.TrackingNum = FT.TrackingNum
					INNER JOIN IMS.NMRFundingCard AS FC ON FT.FundingCardID = FC.ID 
					INNER JOIN IMS.NMRFunding as F ON F.ID = FC.FundingID 
					WHERE F.AccountNumber = @AccountNumber AND FT.DateTimeReconciled IS NULL
				)
			)AS VF LEFT OUTER JOIN IMS.USAePayPaymentStatus AS PS ON VF.GatewayPaymentID = PS.PaymentId
		) AS FS	ORDER BY DateTimeCreated
    END		
END

GO
/****** Object:  StoredProcedure [IMS].[spAltra_UnreconciledVerification_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_UnreconciledVerification_Select
CREATE PROCEDURE [IMS].[spAltra_UnreconciledVerification_Select]
	-- Add the parameters for the stored procedure here
	@AccountNumber bigint
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
    IF ISNULL(@AccountNumber, 0) = 0  
    BEGIN
		SELECT      NMRFunding.AccountNumber, NMRFundingBank.ID as FundingBankID, IMS.fnAltra_GetUSAePayPaymentStatus(NMRFundingBank.GatewayPaymentID1) as GatewayPaymentStatus1, IMS.fnAltra_GetUSAePayPaymentStatus(NMRFundingBank.GatewayPaymentID2) as GatewayPaymentStatus2, NMRFundingBank.TrackingNum, NMRFundingBank.AccountNumberLast4, 
						  NMRFundingBank.BankName, NMRFundingBank.AccountType, NMRFundingBank.Amount1, NMRFundingBank.Amount2, 
						  NMRFundingBank.PSIErrorMessage, NMRFundingBank.DateTimeCreated, NMRFundingBank.DateTimeExported
		FROM         NMRFundingBank INNER JOIN
						  NMRFunding ON NMRFundingBank.FundingID = NMRFunding.ID
		WHERE     (NMRFundingBank.DateTimeVerificationReconciled IS NULL AND NMRFundingBank.VerificationStatus = 'W')
    END
    ELSE
	BEGIN    
		SELECT      NMRFunding.AccountNumber, NMRFundingBank.ID as FundingBankID, IMS.fnAltra_GetUSAePayPaymentStatus(NMRFundingBank.GatewayPaymentID1) as GatewayPaymentStatus1, IMS.fnAltra_GetUSAePayPaymentStatus(NMRFundingBank.GatewayPaymentID2) as GatewayPaymentStatus2, NMRFundingBank.TrackingNum, NMRFundingBank.AccountNumberLast4, 
						  NMRFundingBank.BankName, NMRFundingBank.AccountType, NMRFundingBank.Amount1, NMRFundingBank.Amount2, 
						  NMRFundingBank.PSIErrorMessage, NMRFundingBank.DateTimeCreated, NMRFundingBank.DateTimeExported
		FROM         NMRFundingBank INNER JOIN
						  NMRFunding ON NMRFundingBank.FundingID = NMRFunding.ID
		WHERE     (NMRFunding.AccountNumber = @AccountNumber AND DateTimeVerificationReconciled IS NULL AND NMRFundingBank.VerificationStatus = 'W')       
    END	
END


GO
/****** Object:  StoredProcedure [IMS].[spAPGFCU_D01Enable]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spAPGFCU_D01Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @docsubname CHAR(100)
DECLARE @newdocsub CHAR(100)
DECLARE @count INT
DECLARE @docindex INT

DECLARE curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT '' AS docsubname
	FROM NewMemberRequest AS NMR
	WHERE NMR.TrackingNum = @TrackingNum AND NMR.Processed = 999 AND NMR.Created = 'Y'

OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @newdocsub = 'Membership Application ' + @docsubname
IF @docsubname Is Null
BEGIN
	SET @newdocsub = 'Membership Application'
END
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count
      	IF @count = 1
	BEGIN
		Set @docindex = @docindex + 1
     		 INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END
      	FETCH NEXT FROM curs INTO @docsubname
	PRINT @docsubname
	IF @@FETCH_STATUS = 0
	BEGIN
		SET @newdocsub = (RTRIM(@newdocsub) + ', ' + RTRIM(@docsubname))
		PRINT @newdocsub
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex
	END
   END
CLOSE curs
DEALLOCATE curs
SELECT *, (SELECT DocName FROM udt_Doc WHERE DocNum = 1) AS ScanName FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
DELETE FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spAPGFCU_D01Fields]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [IMS].[spAPGFCU_D01Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

SELECT @DocIndex As DocIndex
	, CASE WHEN SAPSA.Sequence != '' THEN 'x' ELSE '' END AS CheckRegularShare
	, CASE WHEN SASDA.Sequence != '' THEN 'x' ELSE '' END AS CheckChecking
	, '' AS CheckATMCard
	, '' AS CheckeServicesPINIssued
	, '' AS CheckCheckCard
	, '' AS CheckServicesOther
	, '' AS ServicesOther

	, '' AS CheckReplacementYes
	, '' AS CheckReplacementNo
	, '' AS ReplacementDate

	, '' AS CheckRemoveJoint
	, '' AS RemoveJoint
	, '' AS CheckAddJoint
	, '' AS AddJoint
	, '' AS CheckNameChange
	, '' AS NameChange
	, '' AS CheckReplacementOther
	, '' AS ReplacementOther

	, CASE NMR.AccountClass WHEN 'P' THEN UPPER(RTRIM(RTRIM(NMR.FName) + ' '+ RTRIM(NMR.MInitial) + ' ' + RTRIM(NMR.LName) + ' ' + NMR.MECHTag)) ELSE UPPER(RTRIM(NMR.OrganizationName)) END AS PrimaryName
	, NMR.Account AS AccountNumber
	, RTRIM(NMR.Password) AS PrimaryPassword
	, CASE NMR.AccountClass WHEN 'P' THEN LEFT(NMR.SSN, 3) + '-' + LEFT(RIGHT(NMR.SSN, 6), 2) + '-' + RIGHT(NMR.SSN, 4) ELSE LEFT(NMR.SSN, 2) + '-' + RIGHT(NMR.SSN, 7) END AS PrimarySSN
	, CASE NMR.UseTodayForDOB WHEN 'Y' THEN CONVERT(CHAR(10), NMR.CreatedOn, 101) ELSE CONVERT(CHAR(10), NMR.DOB, 101) END AS PrimaryDOB
	, CASE NMR.AccountClass
		WHEN 'O' THEN RTRIM(RTRIM(Work.Address1) + CASE ISNULL(Work.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Work.Address2) END + CASE ISNULL(Work.Address3, '') WHEN '' THEN ' ' ELSE ', ' + RTRIM(Work.Address3) END)
		ELSE RTRIM(RTRIM(Home.Address1) + CASE ISNULL(Home.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Home.Address2) END + CASE ISNULL(Home.Address3, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Home.Address3) END)
	  END AS PrimaryMailingAddress
	, CASE NMR.AccountClass
		WHEN 'O' THEN RTRIM(Work.City)
		ELSE RTRIM(Home.City)
	  END AS PrimaryMailingCity
	, CASE NMR.AccountClass
		WHEN 'O' THEN Work.State
		ELSE Home.State
	  END AS PrimaryMailingState
	, CASE NMR.AccountClass
		WHEN 'O' THEN CASE LEN(Work.Zip) WHEN 9 THEN LEFT(Work.Zip, 5) + '-' + RIGHT(Work.Zip, 4) ELSE Work.Zip END
		ELSE CASE LEN(Home.Zip) WHEN 9 THEN LEFT(Home.Zip, 5) + '-' + RIGHT(Home.Zip, 4) ELSE Home.Zip END
	  END AS PrimaryMailingZip
	, RTRIM(NMR.Email1) AS PrimaryEmail
	, CASE LEN(Home.Phone) WHEN 9 THEN Home.AreaCode + '-' + LEFT(Home.Phone, 3) + '-' + RIGHT(RTRIM(Home.Phone), 4) Else '' END AS PrimaryHPhone
	, CASE LEN(Work.Phone) WHEN 9 THEN Work.AreaCode + '-' + LEFT(Work.Phone, 3) + '-' + RIGHT(RTRIM(Work.Phone), 4) Else '' END AS PrimaryWPhone
	, CASE LEN(Home.CellPhone) WHEN 9 THEN Home.CellPhoneAC + '-' + LEFT(Home.CellPhone, 3) + '-' + RIGHT(RTRIM(Home.CellPhone), 4) Else '' END AS PrimaryCPhone
	, RTRIM(RTRIM(Address.Address1) + CASE ISNULL(Address.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Address.Address2) END + CASE ISNULL(Address.Address3, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Address.Address3) END) AS PrimaryPhysicalAddress
	, RTRIM(Address.City) AS PrimaryPhysicalCity
	, Address.State AS PrimaryPhysicalState
	, CASE LEN(Address.Zip) WHEN 9 THEN LEFT(Address.Zip, 5) + '-' + RIGHT(Address.Zip, 4) ELSE Address.Zip END AS PrimaryPhysicalZip
	, CASE NMR.IDType WHEN 'D' THEN RTRIM(NMR.DriversLicenseNum) ELSE RTRIM(NMR.IDNumber) END AS PrimaryIDNumber
	, CASE NMR.IDType WHEN 'D' THEN 'Driver License' ELSE RTRIM(NMR.IDType) END AS PrimaryIDType
	, CASE NMR.IDType WHEN 'D' THEN RTRIM(NMR.DriversLicenseState) ELSE RTRIM(NMR.IDSource) END AS PrimaryIDNumber
	, NMR.IDExpirationDate AS PrimaryIDNumber
	, RTRIM(NMR.Qualification1) AS PrimaryEligibility
	, CASE WHEN NMR.Qualification1 = 'Location' THEN RTRIM(NMR.Qualification2) END AS PrimaryEligibilityLocation
	, CASE WHEN NMR.Qualification1 = 'Family' THEN RTRIM(NMR.Qualification2) END AS PrimaryEligibilityFamily
	, NMR.Seller AS Officer

	, '' AS CheckPODTypeIndividual
	, '' AS CheckPODTypeJointWithSurvivorship
	, '' AS CheckPODTypePODProvision
	, '' AS CheckPODTypeCustodial
	, '' AS CheckPODTypeTrust
	, '' AS PODTypeTrustDate
	, '' AS CheckPODTypeOther
	, '' AS PODTypeOther

	, RTRIM(BE1.FullName) AS POD1Name
	, LEFT(BE1.SSN, 3) + '-' + LEFT(RIGHT(BE1.SSN, 6), 2) + '-' + RIGHT(BE1.SSN, 4) AS POD1SSN
	, RTRIM(BE2.FullName) AS POD2Name
	, LEFT(BE2.SSN, 3) + '-' + LEFT(RIGHT(BE2.SSN, 6), 2) + '-' + RIGHT(BE2.SSN, 4) AS POD2SSN

	, LEFT(JO1.SSN, 3) + '-' + LEFT(RIGHT(JO1.SSN, 6), 2) + '-' + RIGHT(JO1.SSN, 4) AS JO1SSN
	, JO1.DOB AS JO1DOB
	, RTRIM(JO1.FullName) AS JO1Name
	, RTRIM(JO1.Address) AS JO1MailingAddress
	, RTRIM(JO1.City) AS JO1MailingCity
	, JO1.State AS JO1MailingState
	, JO1.Zip AS JO1MailingZip
	, '' AS CheckJO1TypeJoint
	, '' AS CheckJO1TypeCustodial
	, '' AS CheckJO1TypeTrustee
	, '' AS CheckJO1TypeAdministrator
	, '' AS JO1PhysicalAddress
	, '' AS JO1PhysicalCity
	, '' AS JO1PhysicalState
	, '' AS JO1PhysicalZip
	, CASE WHEN JO1.HPhoneFull = '   -   -    ' THEN '' ELSE JO1.HPhoneFull END AS JO1Phone
	, JO1.DriversLicenseNum AS JO1IDNumber
	, 'D' AS JO1IDType
	, JO1.DriversLicenseState AS JO1IDState
	, JO1.IDExpirationDate AS JO1IDExpiration

	, LEFT(JO2.SSN, 3) + '-' + LEFT(RIGHT(JO2.SSN, 6), 2) + '-' + RIGHT(JO2.SSN, 4) AS JO2SSN
	, JO2.DOB AS JO2DOB
	, RTRIM(JO2.FullName) AS JO2Name
	, RTRIM(JO2.Address) AS JO2MailingAddress
	, RTRIM(JO2.City) AS JO2MailingCity
	, JO2.State AS JO1MailingState
	, JO2.Zip AS JO2MailingZip
	, '' AS CheckJO2TypeJoint
	, '' AS CheckJO2TypeCustodial
	, '' AS CheckJO2TypeTrustee
	, '' AS CheckJO2TypeAdministrator
	, '' AS JO2PhysicalAddress
	, '' AS JO2PhysicalCity
	, '' AS JO2PhysicalState
	, '' AS JO2PhysicalZip
	, CASE WHEN JO2.HPhoneFull = '   -   -    ' THEN '' ELSE JO2.HPhoneFull END AS JO2Phone
	, JO2.DriversLicenseNum AS JO2IDNumber
	, 'D' AS JO2IDType
	, JO2.DriversLicenseState AS JO2IDState
	, JO2.IDExpirationDate AS JO2IDExpiration

	, LEFT(JO3.SSN, 3) + '-' + LEFT(RIGHT(JO3.SSN, 6), 2) + '-' + RIGHT(JO3.SSN, 4) AS JO3SSN
	, JO3.DOB AS JO3DOB
	, RTRIM(JO3.FullName) AS JO3Name
	, RTRIM(JO3.Address) AS JO3MailingAddress
	, RTRIM(JO3.City) AS JO3MailingCity
	, JO3.State AS JO3MailingState
	, JO3.Zip AS JO3MailingZip
	, '' AS CheckJO3TypeJoint
	, '' AS CheckJO3TypeCustodial
	, '' AS CheckJO3TypeTrustee
	, '' AS CheckJO3TypeAdministrator
	, '' AS JO3PhysicalAddress
	, '' AS JO3PhysicalCity
	, '' AS JO3PhysicalState
	, '' AS JO3PhysicalZip
	, CASE WHEN JO3.HPhoneFull = '   -   -    ' THEN '' ELSE JO3.HPhoneFull END AS JO3Phone
	, JO3.DriversLicenseNum AS JO3IDNumber
	, 'D' AS JO3IDType
	, JO3.DriversLicenseState AS JO3IDState
	, JO3.IDExpirationDate AS JO3IDExpiration

FROM NewMemberRequest As NMR
	JOIN NewMemberRequestExtra As Extra on NMR.TrackingNum = Extra.TrackingNum
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN NewMemberAddress As Address On NMR.TrackingNum = Address.TrackingNum
	LEFT OUTER JOIN fnAPGFCU_GetSA(@TrackingNum, 'PSA', 'S') AS SAPSA ON NMR.TrackingNum = SAPSA.TrackingNum
	LEFT OUTER JOIN fnAPGFCU_GetSA(@TrackingNum, 'RSA', 'S') AS SARSA ON NMR.TrackingNum = SARSA.TrackingNum
	LEFT OUTER JOIN fnAPGFCU_GetSA(@TrackingNum, 'SDA', 'S') AS SASDA ON NMR.TrackingNum = SASDA.TrackingNum
	LEFT OUTER JOIN fnAPGFCU_GetJOType(@TrackingNum, 'JO', '', '', '') AS JO1 ON NMR.TrackingNum = JO1.TrackingNum AND JO1.JointSequence = 1
	LEFT OUTER JOIN fnAPGFCU_GetJOType(@TrackingNum, 'JO', '', '', '') AS JO2 ON NMR.TrackingNum = JO2.TrackingNum AND JO2.JointSequence = 2
	LEFT OUTER JOIN fnAPGFCU_GetJOType(@TrackingNum, 'JO', '', '', '') AS JO3 ON NMR.TrackingNum = JO3.TrackingNum AND JO3.JointSequence = 3
	LEFT OUTER JOIN fnAPGFCU_GetJOType(@TrackingNum, 'BE', '', '', '') AS BE1 ON NMR.TrackingNum = BE1.TrackingNum AND BE1.JointSequence = 1
	LEFT OUTER JOIN fnAPGFCU_GetJOType(@TrackingNum, 'BE', '', '', '') AS BE2 ON NMR.TrackingNum = BE2.TrackingNum AND BE2.JointSequence = 2
WHERE NMR.TrackingNum = @TrackingNum
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spAPGFCU_DG1Enable]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spAPGFCU_DG1Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

Return 1
GO
/****** Object:  StoredProcedure [IMS].[spAPGFCU_DG1Fields]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spAPGFCU_DG1Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

Select 'Applications' AS GroupName From NewMemberRequest where trackingnum = @TrackingNum
GO
/****** Object:  StoredProcedure [IMS].[spAPGFCU_DP1Enable]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [IMS].[spAPGFCU_DP1Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

Return 1
GO
/****** Object:  StoredProcedure [IMS].[spAPGFCU_DP1Fields]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO


CREATE PROCEDURE [IMS].[spAPGFCU_DP1Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

SELECT NMR.TrackingNum AS TrackingNumber
	, AltAddress.Address1 AS MailingAddress
	, NMR.CurrBranch As Branch
	, Branches.Description AS BranchName
	, CONVERT(char(10), GetDate(), 101) As TodayDate
	, DATENAME(MM, GetDate()) + RIGHT(CONVERT(char(12), GetDate(), 107), 9) As TodayDateFull
	, CONVERT(char(10), NMR.CreatedOn, 101) As CreatedOn
	, NMR.Account As Account
--	, CONVERT(char(2), Home.ResidenceYears, 101) + ' yrs  ' + CONVERT(char(2), Home.ResidenceMonths, 101) + ' mos' AS HowLong
	, NMR.FName, NMR.LName, NMR.MInitial
	, CASE NMR.AccountClass WHEN 'P' THEN UPPER(RTRIM(NMR.LName) + ', ' + RTRIM(RTRIM(NMR.FName) + ' ' + RTRIM(NMR.MInitial))) ELSE RTRIM(NMR.OrganizationName) END AS RevFullName
	, CASE NMR.AccountClass WHEN 'P' THEN UPPER(RTRIM(RTRIM(NMR.FName) + ' ' + RTRIM(NMR.LName) + ' ' + NMR.MECHTag)) ELSE UPPER(RTRIM(NMR.OrganizationName)) END AS FullName
	, CASE NMR.AccountClass WHEN 'P' THEN 'Dear ' + RTRIM(RTRIM(NMR.FName) + ' ' + RTRIM(NMR.LName) + ' ' + NMR.MECHTag) + ':' ELSE 'Dear ' + RTRIM(NMR.OrganizationName) + ':' END AS DearName
	, Home.Areacode + '-' + LEFT(Home.Phone, 3) + '-' + RIGHT(RTRIM(Home.Phone), 4) AS HPhoneFull
	, Home.CellPhoneAC + '-' + LEFT(Home.CellPhone, 3) + '-' + RIGHT(RTRIM(Home.CellPhone), 4) AS CPhoneFull
	, CASE NMR.UseTodayForDOB WHEN 'Y' THEN CONVERT(char(10), NMR.CreatedOn, 101) ELSE CONVERT(char(10), NMR.DOB, 101) END AS DOB
	, CASE NMR.AccountClass WHEN 'P' THEN Left(NMR.SSN, 3) + '-' + LEFT(RIGHT(NMR.SSN, 6), 2) + '-' + RIGHT(NMR.SSN, 4) ELSE LEFT(NMR.SSN, 2) + '-' + RIGHT(NMR.SSN, 7) END AS SSN
	, RTRIM(NMR.DriversLicenseNum) + '/' + NMR.DriversLicenseState AS DL
	, CASE WHEN NMR.IDType = 'D' AND NMR.DriversLicenseState <> '' AND NMR.DriversLicenseNum <> '' THEN 'Drivers License' ELSE NMR.IDSource END AS IDType
	, CASE NMR.IDType WHEN 'D' THEN RTRIM(NMR.DriversLicenseNum) ELSE RTRIM(NMR.IDNumber) END AS ID
	, CONVERT(char(10), NMR.IDIssueDate, 101) AS IDIssueDate
	, CONVERT(char(10), NMR.IDExpirationDate, 101) AS IDExpDate
	, NMR.DriversLicenseState AS IDState
	, NMR.MaidenName AS MaidenName
	, NMR.Password AS Password
	, NMR.CreatedBy AS Seller
	, NMR.Department AS Department
	, CASE WHEN NMR.Created = 'F' Or NMR.Created = 'H' Or NMR.Created = 'I' THEN '' ELSE 'X' END AS YesNewAccount
	, CASE WHEN NMR.Created = 'F' Or NMR.Created = 'H' Or NMR.Created = 'I' THEN 'X' END AS YesChangeAccount
--	, CASE WHEN NMR.Created = 'F' Or NMR.Created = 'H' Or NMR.Created = 'I' THEN NMR.Account END AS ChangeAccount
	, CASE NMR.AccountClass
		WHEN 'O' THEN RTRIM(RTRIM(Work.Address1) + CASE ISNULL(Work.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Work.Address2) END + CASE ISNULL(Work.Address3, '') WHEN '' THEN ' ' ELSE ', ' + RTRIM(Work.Address3) END)
		ELSE RTRIM(RTRIM(Home.Address1) + CASE ISNULL(Home.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Home.Address2) END + CASE ISNULL(Home.Address3, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Home.Address3) END)
	  END AS Address
	, CASE NMR.AccountClass
		WHEN 'O' THEN RTRIM(RTRIM(Work.Address1) + CASE ISNULL(Work.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Work.Address2) END + CASE ISNULL(Work.Address3, '') WHEN '' THEN ' ' ELSE ', ' + RTRIM(Work.Address3) END) + ', ' + RTRIM(Work.City) + ', ' + Work.State + ' ' + CASE LEN(Work.Zip) WHEN 9 THEN LEFT(Work.Zip, 5) + '-' + Right(Work.Zip, 4) ELSE Work.Zip END
		ELSE RTRIM(RTRIM(Home.Address1) + CASE ISNULL(Home.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Home.Address2) END + CASE ISNULL(Home.Address3, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Home.Address3) END) + ', ' + RTRIM(Home.City) + ', ' + Home.State + ' ' + CASE LEN(Home.Zip) WHEN 9 THEN LEFT(Home.Zip, 5) + '-' + Right(Home.Zip, 4) ELSE Home.Zip END
	  END AS FullAddress
	, CASE NMR.AccountClass
		WHEN 'O' THEN RTRIM(Work.city) + ', ' + Work.state + ' ' + CASE LEN(Work.Zip) WHEN 9 THEN LEFT(Work.zip, 5) + '-' + Right(Work.Zip, 4) ELSE Work.Zip END
		ELSE RTRIM(Home.city) + ', ' + Home.state + ' ' + CASE LEN(Home.Zip) WHEN 9 THEN LEFT(Home.zip, 5) + '-' + Right(Home.Zip, 4) ELSE Home.Zip END
	  END AS CityStateZip
	, CASE NMR.AccountClass
		WHEN 'O' THEN Work.City
		ELSE Home.City
	  END AS City
	, CASE NMR.AccountClass
		WHEN 'O' THEN Work.State
		ELSE Home.State
	  END AS State
	, CASE NMR.AccountClass
		WHEN 'O' THEN CASE LEN(Work.Zip) WHEN 9 THEN LEFT(Work.zip, 5) + '-' + Right(Work.Zip, 4) ELSE Work.Zip END
		ELSE CASE LEN(Home.Zip) WHEN 9 THEN LEFT(Home.zip, 5) + '-' + Right(Home.Zip, 4) ELSE Home.Zip END
	  END AS Zip		
	, RTRIM(NMR.Email1) AS Email
	, CASE NMR.AccountClass
		WHEN 'O' THEN Work.AreaCode
		ELSE Home.AreaCode
	  END AS AC
	, CASE NMR.AccountClass
		WHEN 'O' THEN LEFT(Work.Phone, 3) + '-' + RIGHT(RTRIM(Work.Phone), 4)
		ELSE LEFT(Home.Phone, 3) + '-' + RIGHT(RTRIM(Home.Phone), 4)
	  END AS Phone
	, CASE NMR.AccountClass WHEN 'P' THEN Work.EmployerName ELSE '' END AS WorkName
	, CASE NMR.AccountClass WHEN 'P' THEN Work.EmployerName ELSE '' END AS Employer
	, CASE NMR.AccountClass WHEN 'P' THEN RTRIM(Work.address1 + CASE Work.address2 WHEN '' THEN ''ELSE', ' END + Work.address2 + CASE Work.address3 WHEN '' THEN ''ELSE', ' END + Work.address3) ELSE '' END AS WorkAddress
	, CASE NMR.AccountClass WHEN 'P' THEN Work.City ELSE '' END AS WorkCity
	, CASE NMR.AccountClass WHEN 'P' THEN Work.State ELSE '' END AS WorkState
	, CASE NMR.AccountClass WHEN 'P' THEN CASE LEN(Work.Zip) WHEN 9 THEN LEFT(Work.zip, 5) + '-' + RIGHT(Work.Zip, 4) ELSE Work.Zip END ELSE '' END AS WorkZip
	, Work.AreaCode AS WorkAC, LEFT(Work.Phone, 3) + '-' + RIGHT(RTRIM(Work.Phone), 4)  AS WorkPhone
	, Work.AreaCode + '-' + LEFT(Work.Phone, 3) + '-' + RIGHT(RTRIM(Work.Phone), 4)  AS WPhoneFull
	, Work.JobTitle AS Position
	, Work.JobTitle AS Occupation
	, Work.ProfessionYears As WorkNumYears
	,  RTRIM(Work.EmployerName) + ' ' + RTRIM(Work.address1 + CASE Work.address2 WHEN '' THEN ''ELSE', ' END + Work.address2 + CASE Work.address3 WHEN '' THEN ''ELSE', ' END + Work.address3) + ', ' + RTRIM(Work.City) + ', ' + RTRIM(Work.State) + ' ' + CASE LEN(Work.Zip) WHEN 9 THEN LEFT(Work.zip, 5) + '-' + Right(Work.Zip, 4) ELSE Work.Zip END AS WorkNameAddress
	, Work.HireDate
	,   CASE Work.IncomeFrequency
	     	WHEN 'W'  THEN 'Week'
		WHEN 'B' THEN 'Bi-Week'
		WHEN 'M' THEN 'Month'
		WHEN 'S' THEN 'Semi-Month'
		WHEN 'Y' THEN 'Year'
	      END AS IncomeFrequency
	,   CASE Work.IncomeFrequency
	     	WHEN 'W'  THEN (Work.GrossIncome * 52)/100
		WHEN 'B' THEN (Work.GrossIncome * 26)/100
		WHEN 'M' THEN (Work.GrossIncome * 12)/100
		WHEN 'S' THEN (Work.GrossIncome * 24)/100
		WHEN 'Y' THEN (Work.GrossIncome)/100
	      END AS GrossIncome
	, Home.ResidenceYears AS NumYears
	, CASE NMR.AccountClass
		WHEN 'O' THEN 'Yes'
		ELSE CASE WHEN NMR.Citizenship = 'US' Or NMR.Citizenship = 'RA' THEN 'Yes' END
	  END AS YesNoUSCitizen
	, CASE NMR.AccountClass
		WHEN 'O' THEN 'X'
		ELSE CASE WHEN NMR.Citizenship = 'US' Or NMR.Citizenship = 'RA' THEN 'X' END
	  END AS YesUSCitizen
	, CASE NMR.AccountClass
		WHEN 'O' THEN ''
		ELSE CASE WHEN NMR.Citizenship != 'US' And NMR.Citizenship != 'RA' THEN 'X' END
	  END AS NoUSCitizen
	, 'X' AS YesEligible00
	, CASE WHEN NMR.Qualification1 = 'Household' THEN 'X' END AS YesEligible01
	, CASE WHEN NMR.Qualification1 = 'Relative' OR NMR.Qualification1 = 'Household' THEN NMR.Qualification2 END AS MemberName
	, CASE WHEN NMR.Qualification1 = 'Relative' THEN NMR.Relationship END AS Relationship
	, CASE WHEN NMR.Qualification1 = 'Location' THEN 'X' END AS YesEligible10
	, CASE WHEN NMR.Qualification1 = 'Location' AND NMR.Qualification2 = 'BCOUNTY' THEN 'X' END AS YesEligible11
	, CASE WHEN NMR.Qualification1 = 'Location' AND NMR.Qualification2 = 'CLARENDON' THEN 'X' END AS YesEligible12
	, CASE WHEN NMR.Qualification1 = 'Location' AND NMR.Qualification2 = 'ORANGE' THEN 'X' END AS YesEligible13
	, CASE WHEN NMR.Qualification1 = 'Location' AND NMR.Qualification2 = 'CALHOUN' THEN 'X' END AS YesEligible14
	, CASE WHEN NMR.Qualification1 = 'Location' AND NMR.Qualification2 = 'DCOUNTY' THEN 'X' END AS YesEligible15
	, CASE WHEN NMR.Qualification1 = 'Location' AND NMR.Qualification2 = 'UNDER' THEN 'X' END AS YesEligible16
	, CASE WHEN NMR.Qualification1 = 'Location' AND NMR.Qualification2 = 'CCOUNTY' THEN 'X' END AS YesEligible17
	, CASE WHEN NMR.Qualification1 = 'Location' AND NMR.Qualification2 = 'GEO COMM' THEN 'X' END AS YesEligible18
	, RTRIM(NMR.LName) + '/' + RTRIM(RTRIM(NMR.FName) + ' ' + NMR.MInitial) AS SlashName
	, '(' + RTRIM(LTRIM(CAST(NMR.CurrBranch AS VARCHAR(2)))) + ' - ' + RTRIM(Branches.[Description]) + ')' AS SellerBranch
	, 'SOUTH CAROLINA FEDERAL CREDIT UNION' AS HCCUName
	, 'P.O. BOX 190012' AS HCCUAddress
	, 'NORTH CHARLESTON, SC  29419-9012' AS HCCUCityStateZip
	, '(800)845-0432' AS HCCUPhone
FROM NewMemberRequest As NMR
	--INNER JOIN udt_AccountTypes AS AType On NMR.AccountType = AType.TypeCode
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN NewMemberAddress As AltAddress On NMR.TrackingNum = AltAddress.TrackingNum
	LEFT OUTER JOIN Branches On NMR.CurrBranch = Branches.BranchCode
	LEFT OUTER JOIN Departments ON NMR.Department = Departments.Department
WHERE NMR.TrackingNum = @TrackingNum
GO
/****** Object:  StoredProcedure [IMS].[spAPGFCU_Eligibility_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_Eligibility_Select
CREATE PROCEDURE [IMS].[spAPGFCU_Eligibility_Select]
	@ZipCode varchar(5),
	@CensusTract varchar(10)
AS

IF IsNull(@CensusTract, '') = '' AND IsNull(@ZipCode, '') <> ''
BEGIN
	SELECT Department
	FROM udt_EligibilityByZip
	WHERE IsNull(ZipCode, '') = @ZipCode
END

IF IsNull(@CensusTract, '') <> '' AND IsNull(@ZipCode, '') <> ''
BEGIN
	SELECT Department
	FROM udt_EligibilityByZip
	WHERE IsNull(ZipCode, '') = @ZipCode AND IsNull(CensusTract, '') = @CensusTract
END
GO
/****** Object:  StoredProcedure [IMS].[spAPGFCU_FedReservePendingTransaction_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Jonathan Eagar
-- Create date: 8/25/2011
-- Description:	Returns all FedReserve Pending Transactions
-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_FedReservePendingTransaction_Select
-- =============================================
CREATE PROCEDURE [IMS].[spAPGFCU_FedReservePendingTransaction_Select] 
	-- Add the parameters for the stored procedure here
	@NMRAccountNumber bigint
AS
BEGIN	
	SET @NMRAccountNumber = ISNULL(@NMRAccountNumber, 0)
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	-- Insert statements for procedure here
	
	DECLARE @TransactionSummary TABLE
	(		
		FundingBankID INT,
		TransferAmountTotal DECIMAL(18,2)		
	)
		
	IF @NMRAccountNumber = 0  
	BEGIN
	
	INSERT INTO @TransactionSummary(FundingBankID, TransferAmountTotal)	
	SELECT
		   FB.ID as FundingBankID,			  
		   SUM(FT.Amount) as TransferAmountTotal			   
	FROM IMS.NMRFundingBank FB INNER JOIN IMS.NMRFundingTransaction FT ON FB.ID = FT.FundingBankID						
	WHERE FT.DateTimeLastTransaction IS NULL AND FT.FundingType = 'B'
	GROUP BY FB.ID	
	
	SELECT  FRPT.* FROM
	( 
		(
		SELECT F.ID as FundingID,
			   F.AccountNumber as NMRAccountNumber,
			   FB.TrackingNum as NMRTrackingNumber,
			   NMR.LName + ', ' + NMR.FName as NMRMemberName,
			   FB.ID as FundingBankID,
			   0 as FundingTransactionID,
			   FB.RoutingNumber as FundingBankRouting,
			   FB.AccountNumberEncrypted as FundingBankAccountNumberEncrypted,
			   FB.AccountNumberLast4 as FundingBankAccountAccountLast4,
			   FB.BankName as FundingBankName,
			   FB.AccountType as FundingBankAccountType,
			   FB.Amount1 as VerificationAmount1,
			   FB.Amount2 as VerificationAmount2,
			   0 as TransferAmount,
			   0 as TransferAmountTotal,			   	
			   0 as TargetSubAccountSuffix,
			   0 as TargetSubAccountSeq,
			   FB.DateTimeCreated as DateTimeCreated
		FROM IMS.NMRFunding F INNER JOIN IMS.NMRFundingBank FB ON F.ID = FB.FundingID
								INNER JOIN IMS.NewMemberRequest NMR ON FB.TrackingNum = NMR.TrackingNum
		WHERE FB.VerificationStatus = 'P'	
		)
		UNION ALL
		(	
		SELECT F.ID as FundingID,
			   F.AccountNumber as NMRAccountNumber,
			   FB.TrackingNum as NMRTrackingNumber,			   
			   NMR.LName + ', ' + NMR.FName as NMRMemberName,
			   FB.ID as FundingBankID,
			   FT.ID as FundingTransactionID,
			   FB.RoutingNumber as FundingBankRouting,
			   FB.AccountNumberEncrypted as FundingBankAccountNumberEncrypted,
			   FB.AccountNumberLast4 as FundingBankAccountAccountLast4,
			   FB.BankName as FundingBankName,
			   FB.AccountType as FundingBankAccountType,
				0 as VerificationAmount1,
				0 as VerificationAmount2,
			   FT.Amount as TransferAmount,
			   TS.TransferAmountTotal as TransferAmountTotal,			
			   FT.TargetSubAccountSuffix as TargetSubAccountSuffix,
			   FT.TargetSubAccountSeq as TargetSubAccountSeq,
			   FT.DateTimeCreated as DateTimeCreated 
		FROM IMS.NMRFunding F INNER JOIN IMS.NMRFundingBank FB ON F.ID = FB.FundingID
								INNER JOIN IMS.NMRFundingTransaction FT ON FB.ID = FT.FundingBankID
									INNER JOIN IMS.NewMemberRequest NMR ON FB.TrackingNum = NMR.TrackingNum
										INNER JOIN @TransactionSummary TS ON FB.ID = TS.FundingBankID
		WHERE FT.DateTimeLastTransaction IS NULL AND FT.FundingType = 'B'
		)
	)  FRPT ORDER BY FRPT.NMRTrackingNumber, FRPT.FundingID, FRPT.FundingBankID, FRPT.FundingTransactionID	
	END	
	ELSE
	BEGIN
	
	INSERT INTO @TransactionSummary(FundingBankID, TransferAmountTotal)	
	SELECT	   		   
		   FB.ID as FundingBankID,			  
		   SUM(FT.Amount) as TransferAmountTotal			   
	FROM IMS.NMRFunding F INNER JOIN IMS.NMRFundingBank FB ON F.ID = FB.FundingID 
							INNER JOIN IMS.NMRFundingTransaction FT ON FB.ID = FT.FundingBankID						
	WHERE FT.DateTimeLastTransaction IS NULL AND 
		FT.FundingType = 'B' AND
		F.AccountNumber = @NMRAccountNumber	 
	GROUP BY FB.ID	
	  
	SELECT  FRPT.* FROM
	(   
		(
		SELECT F.ID as FundingID,
			   F.AccountNumber as NMRAccountNumber,
			   FB.TrackingNum as NMRTrackingNumber,
			   NMR.LName + ', ' + NMR.FName as NMRMemberName,
			   FB.ID as FundingBankID,
			   0 as FundingTransactionID,
			   FB.RoutingNumber as FundingBankRouting,
			   FB.AccountNumberEncrypted as FundingBankAccountNumberEncrypted,
			   FB.AccountNumberLast4 as FundingBankAccountAccountLast4,
			   FB.BankName as FundingBankName,
			   FB.AccountType as FundingBankAccountType,
			   FB.Amount1 as VerificationAmount1,
			   FB.Amount2 as VerificationAmount2,
			   0 as TransferAmount,
			   0 as TransferAmountTotal,
			   0 as TargetSubAccountSuffix,
			   0 as TargetSubAccountSeq,
			   FB.DateTimeCreated as DateTimeCreated
		FROM IMS.NMRFunding F INNER JOIN IMS.NMRFundingBank FB ON F.ID = FB.FundingID
								INNER JOIN IMS.NewMemberRequest NMR ON FB.TrackingNum = NMR.TrackingNum
		WHERE	FB.VerificationStatus = 'P' AND 
				F.AccountNumber = @NMRAccountNumber	
		)	
		UNION ALL
		(		
		SELECT F.ID as FundingID,
			   F.AccountNumber as NMRAccountNumber,
			   FB.TrackingNum as NMRTrackingNumber,
			   NMR.LName + ', ' + NMR.FName as NMRMemberName,
			   FB.ID as FundingBankID,
			   FT.ID as FundingTransactionID,
			   FB.RoutingNumber as FundingBankRouting,
			   FB.AccountNumberEncrypted as FundingBankAccountNumberEncrypted,
			   FB.AccountNumberLast4 as FundingBankAccountAccountLast4,
			   FB.BankName as FundingBankName,
			   FB.AccountType as FundingBankAccountType,
				0 as VerificationAmount1,
				0 as VerificationAmount2,
			   FT.Amount as TransferAmount,
			   TS.TransferAmountTotal as TransferAmountTotal,
			   FT.TargetSubAccountSuffix as TargetSubAccountSuffix,
			   FT.TargetSubAccountSeq as TargetSubAccountSeq,
			   FT.DateTimeCreated as DateTimeCreated
		FROM IMS.NMRFunding F 
				INNER JOIN IMS.NMRFundingBank FB ON F.ID = FB.FundingID
					INNER JOIN IMS.NMRFundingTransaction FT ON FB.ID = FT.FundingBankID
						INNER JOIN IMS.NewMemberRequest NMR ON FB.TrackingNum = NMR.TrackingNum
							INNER JOIN @TransactionSummary TS ON FB.ID = TS.FundingBankID
		WHERE	FT.DateTimeLastTransaction IS NULL AND 
				FT.FundingType = 'B' AND 
				F.AccountNumber = @NMRAccountNumber
		)
	)  FRPT	ORDER BY FRPT.NMRTrackingNumber, FRPT.FundingID, FRPT.FundingBankID, FRPT.FundingTransactionID
	END		
END

GO
/****** Object:  StoredProcedure [IMS].[spAPGFCU_ILAApplicationSearch_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_ILAApplicationSearch_Select
CREATE Procedure [IMS].[spAPGFCU_ILAApplicationSearch_Select]
	@TrackingNum varchar(9),
	@SSN varchar(9),
	@Account varchar(9),
	@AppNumber varchar(9),
	@ApplyDate varchar(10)
AS

DECLARE @SQL varchar(1000)
SET @SQL = 'SELECT AI.*, A.UserSessionXML FROM ILA_ApplicationInfo AI INNER JOIN ILA_Application A ON A.TrackingNum = AI.TrackingNum WHERE 1=1'
IF @TrackingNum <> '*'
BEGIN
	SET @SQL = @SQL + ' AND AI.TrackingNum = ''' + @TrackingNum + ''''
END
IF @SSN <> '*'
BEGIN
	SET @SQL = @SQL + ' AND AI.PrimarySSN = ''' + @SSN + ''''
END
IF @Account <> '*'
BEGIN
	SET @SQL = @SQL + ' AND AI.Account = ''' + @Account + ''''
END
IF @AppNumber <> '*'
BEGIN
	SET @SQL = @SQL + ' AND AI.AppNumber = ''' + @AppNumber + ''''
END
IF @ApplyDate <> '*'
BEGIN
	SET @SQL = @SQL + ' AND AI.ApplyDate >= ''' + @ApplyDate + ''''
END

EXEC(@SQL)
GO
/****** Object:  StoredProcedure [IMS].[spAPGFCU_OAOReport_ApplicationStatusReport]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_OAOReport_ApplicationStatusReport
CREATE Procedure [IMS].[spAPGFCU_OAOReport_ApplicationStatusReport]
	@StartDate datetime,
	@StopDate datetime
AS

SELECT
	NMR.TrackingNum
	, UPPER(RTRIM(LEFT(NMR.FName, 1)) + ' ' + RTRIM(NMR.LName)) AS MemberName
	, NMR.ApplyDate AS [Date_Time]
	, NMR.CurrBranch AS Branch
	, CASE
		WHEN NMR.Processed = '1' THEN 'In-Process'
		WHEN NMR.Processed = '999' THEN 'Created'
		ELSE 'Denied'
		END AS Status
	, CASE
		WHEN (SELECT COUNT(*) FROM NMRFundingBank AS NMRFB WHERE NMRFB.TrackingNum = NMR.TrackingNum AND NMRFB.VerificationStatus <> 'X' AND NMRFB.VerificationStatus <> 'E') > 0 THEN 'ACH'
		WHEN (SELECT COUNT(*) FROM NMRFundingCard AS NMRFC WHERE NMRFC.TrackingNum = NMR.TrackingNum) > 0 THEN 'Credit Card'
		WHEN (SELECT COUNT(*) FROM NMRFundingTransaction AS NMRFT WHERE NMRFT.TrackingNum = NMR.TrackingNum AND NMRFT.SourceSubAccountSeq <> '') > 0 THEN 'Transfer'
		WHEN (SELECT FundingType FROM NMRFundingTransaction AS NMRFT WHERE NMRFT.TrackingNum = NMR.TrackingNum) = NULL THEN 'Skipped'
		ELSE 'None'
		END AS PaymentMethod
	, (SELECT SUM(Amount) FROM NMRFundingTransaction AS NMRFT WHERE NMRFT.TrackingNum = NMR.TrackingNum GROUP BY NMRFT.TrackingNum) AS InitialAmountFunded
	, NMR.Account AS AccountNumber
FROM IMS.NewMemberRequest NMR
WHERE
	NMR.Processed > 0
	AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> ''
	AND (NMR.ApplyDate >= @StartDate AND NMR.ApplyDate <= @StopDate)
GO
/****** Object:  StoredProcedure [IMS].[spAPGFCU_OAOReport_FundingDetailReport]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_OAOReport_FundingDetailReport
CREATE Procedure [IMS].[spAPGFCU_OAOReport_FundingDetailReport]
	@StartDate datetime,
	@StopDate datetime
AS

SELECT Bank, Card, Existing, Skipped FROM
(
	(SELECT COUNT(DISTINCT NMRFT.TrackingNum) AS Bank
	FROM IMS.NMRFundingTransaction NMRFT
	LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	INNER JOIN IMS.NMRFundingBank NMRFB ON NMRFB.ID = NMRFT.FundingBankID
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND NMRFT.FundingBankID <> '' AND NMR.Processed = 999 AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate) AND (NMRFB.VerificationStatus <> 'E') AND (NMRFB.VerificationStatus <> 'X')) a
		FULL OUTER JOIN
	(SELECT COUNT(DISTINCT NMRFT.TrackingNum) AS Card
	FROM IMS.NMRFundingTransaction NMRFT
	LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND NMRFT.FundingCardID <> '' AND NMR.Processed = 999 AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate)) b ON 1=1
		FULL OUTER JOIN
	(SELECT COUNT(DISTINCT NMRFT.TrackingNum) AS Existing
	FROM IMS.NMRFundingTransaction NMRFT
	LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND NMRFT.SourceSubAccountSeq <> '' AND NMR.Processed = 999 AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate)) c ON 1=1
		FULL OUTER JOIN
	(SELECT COUNT(DISTINCT NMR.TrackingNum) AS Skipped
	FROM IMS.NMRFundingTransaction NMRFT
	FULL OUTER JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND (NMR.Processed = 999 AND ISNULL(NMRFT.TrackingNum, 0) = 0) AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate)) d ON 1=1
)

UNION ALL

SELECT Bank, Card, Existing, Skipped FROM
(
	(SELECT COUNT(DISTINCT NMRFT.TrackingNum) AS Bank
	FROM IMS.NMRFundingTransaction NMRFT
	LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	INNER JOIN IMS.NMRFundingBank NMRFB ON NMRFB.ID = NMRFT.FundingBankID
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND NMRFT.FundingBankID <> '' AND NMR.Processed = 998 AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate) AND (NMRFB.VerificationStatus <> 'E') AND (NMRFB.VerificationStatus <> 'X')) a
		FULL OUTER JOIN
	(SELECT COUNT(DISTINCT NMRFT.TrackingNum) AS Card
	FROM IMS.NMRFundingTransaction NMRFT
	LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND NMRFT.FundingCardID <> '' AND NMR.Processed = 998 AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate)) b ON 1=1
		FULL OUTER JOIN
	(SELECT COUNT(DISTINCT NMRFT.TrackingNum) AS Existing
	FROM IMS.NMRFundingTransaction NMRFT
	LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND NMRFT.SourceSubAccountSeq <> '' AND NMR.Processed = 998 AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate)) c ON 1=1
		FULL OUTER JOIN
	(SELECT COUNT(DISTINCT NMR.TrackingNum) AS Skipped
	FROM IMS.NMRFundingTransaction NMRFT
	FULL OUTER JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND (NMR.Processed = 998 AND ISNULL(NMRFT.TrackingNum, 0) = 0) AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate)) d ON 1=1
)
GO
/****** Object:  StoredProcedure [IMS].[spAPGFCU_ReviewQueue_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Jon Eagar
-- Create date: 7/08/2011
-- Description:	Lists the active NMR records for the Queue Review
-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_ReviewQueue_SelectAll
-- =============================================
CREATE PROCEDURE [IMS].[spAPGFCU_ReviewQueue_SelectAll] 
	-- Add the parameters for the stored procedure here
	@StartDate DATETIME = NULL,
	@EndDate DATETIME = NULL,
	@StatusCode VARCHAR(2) = NULL
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
 
	DECLARE @Hierarchy INT
	DECLARE @StatusID INT

	IF @StartDate IS NOT NULL AND @StartDate <> ''
	BEGIN
		SET @StartDate = CONVERT(DATETIME,(CONVERT(VARCHAR(10), @StartDate, 102)))  --Set Time to beginning of Day
		SET @EndDate = CAST( CONVERT(CHAR(10), @EndDate, 101) + ' 11:59 PM' AS DATETIME) --Set Time to end of day
	END
	
	SET @StatusCode = NULLIF(@StatusCode,'')

	DECLARE @ReviewQueue TABLE
	(
		ID INT IDENTITY(1,1) PRIMARY KEY CLUSTERED,
		TrackingNum INT,	
		Name VARCHAR(90),
		EmployerName VARCHAR(30),
		Account INT,
		StatusName VARCHAR(50),
		StatusID INT,
		FundingComplete CHAR(1), 
		ApplyDate DATETIME,
		Teller CHAR(3),
		LastPage VARCHAR(50),
		TNExpireDate DATETIME
	)

	IF (@StatusCode IS NOT NULL)
	BEGIN
		SELECT @Hierarchy=RQC.Hierarchy, @StatusID=RQC.ID FROM IMS.ReviewQueueConfig RQC WHERE RQC.StatusCode = @StatusCode
	END

	IF (@Hierarchy > 0 OR @StatusCode IS NULL)
	BEGIN
		--IDV DECLINE
		INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, TNExpireDate)
		SELECT	DISTINCT NMR.TrackingNum, 
				LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
				RTRIM(LTRIM(NMRW.EmployerName)) as EmployerName,			 
				NMR.Account, 
				RQC.StatusName,
				RQC.ID, 
				NMR.FundingComplete, 
				NMR.ApplyDate,
				(SELECT TOP 1 CompletedBy FROM IMS.ActionLog WHERE TrackingNum = NMR.TrackingNum AND NullIf(CompletedBy, '') IS NOT NULL ORDER BY CompletedDate DESC) AS Seller,
				(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
				NMR.TNExpireDate
		FROM IMS.NewMemberRequest NMR 
				INNER JOIN 
				IMS.NewMemberManualApproval MA 
					ON NMR.TrackingNum = MA.TrackingNum 
						INNER JOIN IMS.ReviewQueueConfig RQC ON RQC.StatusCode = 'ID'
							LEFT JOIN IMS.NewMemberWork NMRW
								ON NMR.TrackingNum = NMRW.TrackingNum
		WHERE NMR.Processed NOT IN (-1, 998, 999) AND (MA.Category = 'ID' AND MA.ApprovalStatus = '') AND (@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate) AND DATALENGTH(NMR.UserSessionXML) > 0  AND NMR.UserSessionXML IS NOT NULL
		
		IF (@Hierarchy > 1 OR @StatusCode IS NULL)
		BEGIN
			--Miscellaneous Decline
			INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, TNExpireDate)
			SELECT	DISTINCT NMR.TrackingNum, 
					LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
					RTRIM(LTRIM(NMRW.EmployerName)) as EmployerName,				 
					NMR.Account, 
					RQC.StatusName,
					RQC.ID, 
					NMR.FundingComplete, 
					NMR.ApplyDate,
					(SELECT TOP 1 CompletedBy FROM IMS.ActionLog WHERE TrackingNum = NMR.TrackingNum AND NullIf(CompletedBy, '') IS NOT NULL ORDER BY CompletedDate DESC) AS Seller,
					(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
					NMR.TNExpireDate
			FROM IMS.NewMemberRequest NMR 
					INNER JOIN 
					IMS.NewMemberManualApproval MA 
						ON NMR.TrackingNum = MA.TrackingNum AND MA.JointSequence = 0
							INNER JOIN IMS.ReviewQueueConfig RQC ON RQC.StatusCode = 'MD' AND RQC.ReasonCode = LTRIM(RTRIM(MA.ReasonCode))
								LEFT JOIN IMS.NewMemberWork NMRW
									ON NMR.TrackingNum = NMRW.TrackingNum					
			WHERE NOT EXISTS(SELECT TrackingNum FROM @ReviewQueue RQ Where RQ.TrackingNum = NMR.TrackingNum) AND
				  NMR.Processed NOT IN (-1, 998, 999) AND 
				  (MA.ApprovalStatus = '') AND (@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate)AND DATALENGTH(NMR.UserSessionXML) > 0  AND NMR.UserSessionXML IS NOT NULL

			IF (@Hierarchy > 2 OR @StatusCode IS NULL)
			BEGIN
				--Joint Decline
				INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, TNExpireDate)
				SELECT	DISTINCT NMR.TrackingNum, 
						LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
						RTRIM(LTRIM(NMRW.EmployerName)) as EmployerName,				 
						NMR.Account, 
						RQC.StatusName,
						RQC.ID, 
						NMR.FundingComplete, 
						NMR.ApplyDate,
						(SELECT TOP 1 CompletedBy FROM IMS.ActionLog WHERE TrackingNum = NMR.TrackingNum AND NullIf(CompletedBy, '') IS NOT NULL ORDER BY CompletedDate DESC) AS Seller,
						(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
						NMR.TNExpireDate
				FROM IMS.NewMemberRequest NMR 
						INNER JOIN 
						IMS.NewMemberManualApproval MA 
							ON NMR.TrackingNum = MA.TrackingNum AND MA.JointSequence > 0
								INNER JOIN IMS.ReviewQueueConfig RQC ON RQC.StatusCode = 'JD' AND RQC.ReasonCode = LTRIM(RTRIM(MA.ReasonCode))
									LEFT JOIN IMS.NewMemberWork NMRW
										ON NMR.TrackingNum = NMRW.TrackingNum					
				WHERE NOT EXISTS(SELECT TrackingNum FROM @ReviewQueue RQ Where RQ.TrackingNum = NMR.TrackingNum) AND
					  NMR.Processed NOT IN (-1, 998, 999) AND 
					  (MA.ApprovalStatus = '') AND (@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate)AND DATALENGTH(NMR.UserSessionXML) > 0  AND NMR.UserSessionXML IS NOT NULL

				IF (@Hierarchy > 3 OR @StatusCode IS NULL)
				BEGIN
					--Manual Review
					INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, TNExpireDate)
					SELECT	DISTINCT NMR.TrackingNum, 
							LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
							RTRIM(LTRIM(NMRW.EmployerName)) as EmployerName,				 
							NMR.Account, 
							RQC.StatusName,
							RQC.ID, 
							NMR.FundingComplete, 
							NMR.ApplyDate,
							(SELECT TOP 1 CompletedBy FROM IMS.ActionLog WHERE TrackingNum = NMR.TrackingNum AND NullIf(CompletedBy, '') IS NOT NULL ORDER BY CompletedDate DESC) AS Seller,
							(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
							NMR.TNExpireDate
					FROM IMS.NewMemberRequest NMR 
							INNER JOIN 
							IMS.NewMemberManualApproval MA 
								ON NMR.TrackingNum = MA.TrackingNum 
									INNER JOIN IMS.ReviewQueueConfig RQC ON RQC.StatusCode = 'MR' AND RQC.ReasonCode = LTRIM(RTRIM(MA.ReasonCode))
										LEFT JOIN IMS.NewMemberWork NMRW
											ON NMR.TrackingNum = NMRW.TrackingNum		
					WHERE NOT EXISTS(SELECT TrackingNum FROM @ReviewQueue RQ Where RQ.TrackingNum = NMR.TrackingNum) AND
						  NMR.Processed NOT IN (-1, 998, 999) AND 
						  (MA.ApprovalStatus = '') AND (@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate) AND DATALENGTH(NMR.UserSessionXML) > 0 AND NMR.UserSessionXML IS NOT NULL

					IF (@Hierarchy > 4 OR @StatusCode IS NULL)
					BEGIN
						--Need Decision/Pending
						INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, TNExpireDate)
						SELECT	DISTINCT NMR.TrackingNum, 
								LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
								RTRIM(LTRIM(NMRW.EmployerName)) as EmployerName,
								NMR.Account, 
								RQC.StatusName,
								RQC.ID, 
								NMR.FundingComplete, 
								NMR.ApplyDate,
								(SELECT TOP 1 CompletedBy FROM IMS.ActionLog WHERE TrackingNum = NMR.TrackingNum AND NullIf(CompletedBy, '') IS NOT NULL ORDER BY CompletedDate DESC) AS Seller,
								(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
								NMR.TNExpireDate
						FROM IMS.NewMemberRequest NMR  
								INNER JOIN IMS.NewMemberSubAccount SA 
									ON NMR.TrackingNum = SA.TrackingNum
										INNER JOIN IMS.ReviewQueueConfig RQC ON RQC.StatusCode = 'DP'
											LEFT JOIN IMS.NewMemberWork NMRW
												ON NMR.TrackingNum = NMRW.TrackingNum
													LEFT JOIN IMS.NewMemberManualApproval MA 
														ON NMR.TrackingNum = MA.TrackingNum
						WHERE NOT EXISTS(SELECT TrackingNum FROM @ReviewQueue RQ Where RQ.TrackingNum = NMR.TrackingNum) AND
							  NMR.Processed NOT IN (-1, 998, 999) AND 
							  ((SA.Approval <> 'A' AND SA.ApprovedBy = '') OR (MA.ApprovalStatus = '')) AND 
							  (@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate) AND DATALENGTH(NMR.UserSessionXML) > 0 AND NMR.UserSessionXML IS NOT NULL

						IF (@Hierarchy > 5 OR @StatusCode IS NULL)
						BEGIN
							--In Progress
							INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, TNExpireDate)
							SELECT	DISTINCT NMR.TrackingNum, 
									LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
									RTRIM(LTRIM(NMRW.EmployerName)) as EmployerName,			 
									NMR.Account, 
									RQC.StatusName,
									RQC.ID, 
									NMR.FundingComplete, 
									NMR.ApplyDate,
									(SELECT TOP 1 CompletedBy FROM IMS.ActionLog WHERE TrackingNum = NMR.TrackingNum AND NullIf(CompletedBy, '') IS NOT NULL ORDER BY CompletedDate DESC) AS Seller,
									(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
									NMR.TNExpireDate
							FROM IMS.NewMemberRequest NMR			
									INNER JOIN IMS.ReviewQueueConfig RQC 
										ON RQC.StatusCode = 'IP'
											LEFT JOIN IMS.NewMemberWork NMRW
												ON NMR.TrackingNum = NMRW.TrackingNum
							WHERE NOT EXISTS(SELECT TrackingNum FROM @ReviewQueue RQ WHERE RQ.TrackingNum = NMR.TrackingNum) AND
								  NMR.Processed = 1 AND 
								  (SELECT COUNT(TrackingNum) FROM IMS.NewMemberManualApproval MA WHERE MA.TrackingNum = NMR.TrackingNum AND MA.ApprovalStatus = '') = 0 AND
								  (SELECT COUNT(TrackingNum) FROM IMS.NewMemberSubAccount SA WHERE SA.TrackingNum = NMR.TrackingNum) = (SELECT COUNT(TrackingNum) FROM IMS.NewMemberSubAccount SA WHERE SA.TrackingNum = NMR.TrackingNum AND (SA.Approval = 'A' OR SA.ApprovedBy <> '')) AND	 
								  (@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate) AND DATALENGTH(NMR.UserSessionXML) > 0 AND NMR.UserSessionXML IS NOT NULL

							IF (@Hierarchy > 6 OR @StatusCode IS NULL)
							BEGIN
								--Not Funded
								INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, TNExpireDate)
								SELECT	DISTINCT NMR.TrackingNum, 
										LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
										RTRIM(LTRIM(NMRW.EmployerName)) as EmployerName,			 
										NMR.Account, 
										RQC.StatusName,
										RQC.ID, 
										NMR.FundingComplete, 
										NMR.ApplyDate,
										(SELECT TOP 1 CompletedBy FROM IMS.ActionLog WHERE TrackingNum = NMR.TrackingNum AND NullIf(CompletedBy, '') IS NOT NULL ORDER BY CompletedDate DESC) AS Seller,
										(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
										NMR.TNExpireDate
								FROM IMS.NewMemberRequest NMR
									INNER JOIN IMS.ReviewQueueConfig RQC 
										ON RQC.StatusCode = 'NF'
											LEFT JOIN IMS.NewMemberWork NMRW
												ON NMR.TrackingNum = NMRW.TrackingNum
								WHERE NOT EXISTS(SELECT TrackingNum FROM @ReviewQueue RQ WHERE RQ.TrackingNum = NMR.TrackingNum) AND
									  NMR.Processed = 999 AND 
									  IsNull(FundingComplete, 'N') <> 'Y' AND
									  (@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate) AND DATALENGTH(NMR.UserSessionXML) > 0 AND NMR.UserSessionXML IS NOT NULL

							END
						END
					END	  
				END
			END
		END
		SELECT 
		TrackingNum as TrackingNumber,		 
		Name,
		EmployerName,
		Account,
		StatusName,
		CASE WHEN FundingComplete <> 'Y' THEN 'N' ELSE 'Y' END as FundingComplete,
		ApplyDate, 
		Teller, 
		LastPage, 
		TNExpireDate,
		(
			SELECT COUNT(*)
			FROM IMS.SecureMailThread SMT
			LEFT JOIN IMS.SecureMailAttachment SMA ON SMA.ThreadId = SMT.ThreadId
			WHERE SMT.TrackingNum = RQ.TrackingNum AND SMA.Status = 'U'
		) AS AttachU,
		(
			SELECT COUNT(*)
			FROM IMS.SecureMailThread SMT
			LEFT JOIN IMS.SecureMailAttachment SMA ON SMA.ThreadId = SMT.ThreadId
			WHERE SMT.TrackingNum = RQ.TrackingNum AND SMA.Status = 'V'
		) AS AttachV,
		(
			SELECT COUNT(*)
			FROM IMS.SecureMailThread SMT
			LEFT JOIN IMS.SecureMailAttachment SMA ON SMA.ThreadId = SMT.ThreadId
			WHERE SMT.TrackingNum = RQ.TrackingNum AND SMA.Status = 'Q'
		) AS AttachQU,
		(
			SELECT COUNT(*)
			FROM IMS.SecureMailThread SMT
			LEFT JOIN IMS.SecureMailAttachment SMA ON SMA.ThreadId = SMT.ThreadId
			WHERE SMT.TrackingNum = RQ.TrackingNum AND SMA.Status = 'QV'
		) AS AttachQV
		FROM @ReviewQueue RQ 
		WHERE RQ.StatusID = @StatusID OR @StatusID IS NULL order by TrackingNum		
	END
END
GO
/****** Object:  StoredProcedure [IMS].[spAPGFCU_SignOnOAO]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.SignOnOAO 
CREATE Procedure [IMS].[spAPGFCU_SignOnOAO]
@TrackingNum int,
@Password varchar(24),
@SSN varchar(9),
@DOB datetime
AS
BEGIN
	SELECT
		n.TrackingNum, 
		ISNULL(CAST(n.Account AS VARCHAR(50)),'') AS Account, 
		n.UserSessionXML, 
		n.AccountType, 
		n.Created, 
		n.Processed, 
		n.TNExpireDate, 
		e.BadLoginAttempts
	FROM IMS.NewMemberRequest n
	JOIN IMS.NewMemberRequestExtra e ON n.TrackingNum = e.TrackingNum
	WHERE 
		n.TrackingNum = @TrackingNum 
		AND (
			(
				(n.Password = @Password COLLATE SQL_Latin1_General_CP1_CS_AS) 
				OR (
					n.SSN = @SSN 
					AND n.DOB = @DOB
				)
			) 
			AND n.Processed <> '998' 
			OR (@Password = 'MoDESTaFF')
		)
-- NOTE: The "COLLATE SQL_Latin1_General_CP1_CS_AS" above makes the password search case sensitive.
END
GO
/****** Object:  StoredProcedure [IMS].[spAPGFCU_SyncCarts]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_SyncCarts
CREATE PROCEDURE [IMS].[spAPGFCU_SyncCarts]
@TrackingNum int,
@SyncMode varchar(1)
AS

IF @SyncMode = 'S' OR @SyncMode = 'B' OR @SyncMode = 'Y'
BEGIN
	--Delete from cart where subaccount record no longer exists
	DELETE FROM IMS.NewMemberShoppingCart
	WHERE TrackingNum = @TrackingNum AND SubAccountID IS NOT NULL AND
		SubAccountID NOT IN (SELECT ID FROM IMS.NewMemberSubAccount
					WHERE TrackingNum = @TrackingNum)
END

IF @SyncMode = 'C' OR @SyncMode = 'B' OR @SyncMode = 'Y'
BEGIN
	--Delete from subaccounts where cart record no longer exists
	DELETE FROM IMS.NewMemberSubAccount
	WHERE TrackingNum = @TrackingNum AND ShoppingCartID IS NOT NULL AND
		ShoppingCartID NOT IN (SELECT ID FROM IMS.NewMemberShoppingCart
					WHERE TrackingNum = @TrackingNum)
END

IF @SyncMode = 'S' OR @SyncMode = 'B' OR @SyncMode = 'Y'
BEGIN
	--Update cart items with changes in the subaccount records
	UPDATE IMS.NewMemberShoppingCart
	SET RequestedAmount = (SELECT Amount FROM IMS.NewMemberSubAccount
				WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberShoppingCart.SubAccountID),
		InsuranceAmount1 = NULL,
		InsuranceAmount2 = NULL
	WHERE TrackingNum = @TrackingNum AND
		SubAccountID IN (SELECT ID FROM IMS.NewMemberSubAccount WHERE TrackingNum = @TrackingNum) AND
		IsNull((SELECT LineOfCredit FROM IMS.udt_LSubAccounts WHERE UniqueID = IMS.NewMemberShoppingCart.ProductID), 'N') = 'N' AND
		(SELECT Amount FROM IMS.NewMemberSubAccount WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberShoppingCart.SubAccountID) <> IMS.NewMemberShoppingCart.RequestedAmount + IsNull(IMS.NewMemberShoppingCart.InsuranceAmount1, 0) + IsNull(IMS.NewMemberShoppingCart.InsuranceAmount2, 0)

	UPDATE IMS.NewMemberShoppingCart
	SET RequestedAmount = (SELECT CreditLimit FROM IMS.NewMemberSubAccount
				WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberShoppingCart.SubAccountID),
		InsuranceAmount1 = NULL,
		InsuranceAmount2 = NULL
	WHERE TrackingNum = @TrackingNum AND
		SubAccountID IN (SELECT ID FROM IMS.NewMemberSubAccount WHERE TrackingNum = @TrackingNum) AND
		(SELECT LineOfCredit FROM IMS.udt_LSubAccounts WHERE UniqueID = IMS.NewMemberShoppingCart.ProductID) = 'Y' AND
		(SELECT CreditLimit FROM IMS.NewMemberSubAccount WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberShoppingCart.SubAccountID) <> IMS.NewMemberShoppingCart.RequestedAmount + IsNull(IMS.NewMemberShoppingCart.InsuranceAmount1, 0) + IsNull(IMS.NewMemberShoppingCart.InsuranceAmount2, 0)

	UPDATE IMS.NewMemberShoppingCart
	SET Term = (SELECT Term FROM IMS.NewMemberSubAccount
				WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberShoppingCart.SubAccountID)
	WHERE TrackingNum = @TrackingNum AND
		SubAccountID IN (SELECT ID FROM IMS.NewMemberSubAccount WHERE TrackingNum = @TrackingNum)

	--Create cart items for new subaccount records
	INSERT INTO IMS.NewMemberShoppingCart
	(ProductID, ProductName, YesNoMaybe, SLType, Approved, TrackingNum, MasterCategoryID, CategoryID,
	Exclude, CreatedBy, CreatedOn, Created, Fulfill, LOSProductID, LOSID,
	ApprovedAmount, RequestedAmount, Requires, LoanType, LoanSubType, Term, InsCode, ClosedFlag, LossFlag, SubAccountID)
	SELECT STP.ProductID, STP.ProductDesc, 'YES', STP.SLType, 'Y', @TrackingNum AS TrackingNum, STP.MasterCategoryID, STP.CategoryID,
		Prod.Exclude, SA.CreatedBy, SA.CreatedOn, SA.Created, STP.Fulfill, STP.LOSProductID, SA.LOSID,
		CASE WHEN Prod.LineOfCredit = 'Y' THEN SA.CreditLimit
		     ELSE SA.Amount
		END AS ApprovedAmount,
		CASE WHEN Prod.LineOfCredit = 'Y' THEN SA.CreditLimit
		     ELSE SA.Amount
		END AS RequestedAmount,
		STP.Requires, STP.LoanType, STP.LoanSubType, SA.Term, SA.InsCode, SA.ClosedFlag, SA.LossFlag, SA.ID AS SubAccountID
	FROM IMS.udt_SalesToolProducts STP INNER JOIN
		IMS.NewMemberSubAccount SA ON SA.SubAccountType = STP.ProductID INNER JOIN
		IMS.NewMemberRequest NMR ON SA.TrackingNum = NMR.TrackingNum INNER JOIN
		IMS.udt_AllSubAccounts Prod ON STP.ProductID = Prod.UniqueID AND ',' + RTrim(Prod.AccountTypes) + ',' LIKE '%,' + RTrim(NMR.AccountType) + ',%'
	WHERE SA.TrackingNum = @TrackingNum AND SA.SubAccountType NOT IN (SELECT ProductID FROM IMS.NewMemberShoppingCart WHERE TrackingNum = @TrackingNum)
	
	--Delete products that require products that are no longer here
	DELETE FROM IMS.NewMemberShoppingCart
	WHERE TrackingNum = @TrackingNum AND NullIf(Requires, '') IS NOT NULL AND
		(SELECT Count(SC2.ID) FROM IMS.NewMemberShoppingCart SC2 INNER JOIN
			(SELECT DISTINCT
			        SUBSTRING(l.List, v.Number+1, CHARINDEX(',', l.List, v.Number+1) -v.Number-1) AS Requires
			   FROM Master.dbo.spt_Values v
			  CROSS JOIN
			        (SELECT ',' + RTRIM(REPLACE(Requires, ', ', ',')) + ',' AS List
				FROM IMS.NewMemberShoppingCart
				WHERE TrackingNum = @TrackingNum AND ProductID = IMS.NewMemberShoppingCart.ProductID) l
			  WHERE v.Type = 'P'
			    AND v.Number BETWEEN 1 AND LEN(l.List)-1
			    AND SUBSTRING(l.List, v.Number, 1)=',') FN ON SC2.ProductID = FN.Requires
			WHERE TrackingNum = @TrackingNum AND SC2.ProductID <> IMS.NewMemberShoppingCart.ProductID) = 0
END

IF @SyncMode = 'C' OR @SyncMode = 'B' OR @SyncMode = 'Y'
BEGIN
	--Update subaccounts with changes in the cart records
	UPDATE IMS.NewMemberSubAccount
	SET Amount = (SELECT RequestedAmount + IsNull(InsuranceAmount1, 0) + IsNull(InsuranceAmount2, 0) FROM IMS.NewMemberShoppingCart
				WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberSubAccount.ShoppingCartID)
	WHERE TrackingNum = @TrackingNum AND
		ShoppingCartID IN (SELECT ID FROM IMS.NewMemberShoppingCart WHERE TrackingNum = @TrackingNum) AND
		IsNull((SELECT LineOfCredit FROM IMS.udt_LSubAccounts WHERE UniqueID = IMS.NewMemberSubAccount.SubAccountType), 'N') = 'N' AND
		(SELECT RequestedAmount + IsNull(InsuranceAmount1, 0) + IsNull(InsuranceAmount2, 0) FROM IMS.NewMemberShoppingCart WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberSubAccount.ShoppingCartID) <> IMS.NewMemberSubAccount.Amount

	UPDATE IMS.NewMemberSubAccount
	SET CreditLimit = (SELECT RequestedAmount + IsNull(InsuranceAmount1, 0) + IsNull(InsuranceAmount2, 0) FROM IMS.NewMemberShoppingCart
				WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberSubAccount.ShoppingCartID)
	WHERE TrackingNum = @TrackingNum AND
		ShoppingCartID IN (SELECT ID FROM IMS.NewMemberShoppingCart WHERE TrackingNum = @TrackingNum) AND
		(SELECT LineOfCredit FROM IMS.udt_LSubAccounts WHERE UniqueID = IMS.NewMemberSubAccount.SubAccountType) = 'Y' AND
		(SELECT RequestedAmount + IsNull(InsuranceAmount1, 0) + IsNull(InsuranceAmount2, 0) FROM IMS.NewMemberShoppingCart WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberSubAccount.ShoppingCartID) <> IMS.NewMemberSubAccount.CreditLimit

	UPDATE IMS.NewMemberSubAccount
	SET Term = (SELECT Term FROM IMS.NewMemberShoppingCart
				WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberSubAccount.ShoppingCartID)
	WHERE TrackingNum = @TrackingNum AND
		ShoppingCartID IN (SELECT ID FROM IMS.NewMemberShoppingCart WHERE TrackingNum = @TrackingNum)

	--Create subaccount records for new cart items
	INSERT INTO IMS.NewMemberSubAccount
	(TrackingNum, Sequence, DescAbrv, SubAccountType, Description, ACC, CollateralCode, SLType, Amount,
	Approval, Created, CreatedBy, CreatedOn, ProductType,
	CreditLimit, StartSuffix, StopSuffix, APR, CashAdvanceAPR, SkipCode, Coupons, Term, Method,
	Frequency, InsCode, DisclosureCode, ReviewDate, MaturityDate, Officer, CurrBranch, StatementOrder, MaturityDisp, 
	DividendDisp, LineofCredit, PaymentPercent, AllowPlastic1, AllowPlastic2, AllowPlastic3, AllowPlastic4, 
	CreateHost, HostCommand, ServiceClass, TaxCode, JointTaxCode, W8TaxCode, KTransferLink, LoanDiscounts, 
	MICRBegin, MICREnd, MICRFormat, PromptMICR, Purpose, FundingOrder, VRLIndex, VRLMargin, 
	VRLCode, VRLFreq, LOSProductID, LOSID, LossFlag, ClosedFlag, ShoppingCartID, Action, Payment)
	SELECT @TrackingNum AS TrackingNum, (SELECT Count(ID) FROM IMS.NewMemberShoppingCart SC2 WHERE TrackingNum = @TrackingNum AND SC2.Approved = 'Y' AND 
		SC2.ProductID NOT IN (SELECT SubAccountType FROM IMS.NewMemberSubAccount SA2 WHERE TrackingNum = @TrackingNum) AND SC2.ID <= SC.ID) + 
		(SELECT IsNull(Max(Sequence), 0) FROM IMS.NewMemberSubAccount SA3 WHERE TrackingNum = @TrackingNum) AS Sequence,
	Prod.DescAbrv, Prod.UniqueID, Prod.Description, Prod.ACC, Prod.CollateralCode, Prod.SLType,
	CASE WHEN Prod.LineOfCredit = 'Y' THEN 0
	     ELSE SC.RequestedAmount + IsNull(SC.InsuranceAmount1, 0) + IsNull(SC.InsuranceAmount2, 0)
	END AS Amount, NMR.Approval, SC.Created, SC.CreatedBy, SC.CreatedOn, Prod.ProductType,
	CASE WHEN Prod.LineOfCredit = 'Y' THEN SC.RequestedAmount
	     ELSE 0
	END AS CreditLimit, Prod.StartSuffix, Prod.StopSuffix, Prod.APR, Prod.CashAdvanceAPR, Prod.SkipCode, Prod.Coupons, Prod.Term, Prod.Method,
	Prod.Frequency, Prod.InsCode, Prod.DisclosureCode, Prod.ReviewDate, Prod.MaturityDate, Prod.Officer, Prod.CurrBranch, Prod.StatementOrder, Prod.MaturityDisp, 
	Prod.DividendDisp, Prod.LineofCredit, Prod.PaymentPercent, Prod.AllowPlastic1, Prod.AllowPlastic2, Prod.AllowPlastic3, Prod.AllowPlastic4, 
	Prod.CreateHost, Prod.HostCommand, Prod.ServiceClass, Prod.TaxCode,Prod.JointTaxCode, Prod.W8TaxCode, Prod.KTransferLink, Prod.LoanDiscounts, 
	Prod.MICRBegin, Prod.MICREnd, Prod.MICRFormat, Prod.PromptMICR, Prod.Purpose, Prod.FundingOrder, Prod.VRLIndex, Prod.VRLMargin, 
	Prod.VRLCode, Prod.VRLFreq, SC.LOSProductID, SC.LOSID, SC.LossFlag, SC.ClosedFlag, SC.ID AS ShoppingCartID, Prod.Action, 0
	FROM IMS.NewMemberShoppingCart SC INNER JOIN
		IMS.NewMemberRequest NMR ON SC.TrackingNum = NMR.TrackingNum INNER JOIN
		IMS.udt_AllSubAccounts Prod ON SC.ProductID = Prod.UniqueID AND ',' + RTrim(Prod.AccountTypes) + ',' LIKE '%,' + RTrim(NMR.AccountType) + ',%'
	WHERE SC.TrackingNum = @TrackingNum AND SC.Approved = 'Y' AND SC.ProductID NOT IN (SELECT SubAccountType FROM IMS.NewMemberSubAccount WHERE TrackingNum = @TrackingNum)
	ORDER BY ID
	
	--Delete products that require products that are no longer here
	/*DELETE NewMemberSubAccount FROM IMS.NewMemberSubAccount SA
	WHERE TrackingNum = @TrackingNum AND
		(SELECT NullIf(Requires, '') FROM IMS.udt_AllSubAccounts WHERE UniqueID = SA.SubAccountType) IS NOT NULL AND
		(SELECT Count(SA2.ID) FROM IMS.NewMemberSubAccount SA2 INNER JOIN
			(SELECT DISTINCT
			        SUBSTRING(l.List, v.Number+1, CHARINDEX(',', l.List, v.Number+1) -v.Number-1) AS Requires
			   FROM Master.dbo.spt_Values v
			  CROSS JOIN
			        (SELECT ',' + RTRIM(REPLACE(Requires, ', ', ',')) + ',' AS List
				FROM IMS.udt_AllSubAccounts
				WHERE UniqueID = SA.SubAccountType) l
			  WHERE v.Type = 'P'
			    AND v.Number BETWEEN 1 AND LEN(l.List)-1
			    AND SUBSTRING(l.List, v.Number, 1)=',') FN ON SA2.SubAccountType = FN.Requires
			WHERE TrackingNum = @TrackingNum AND SA2.SubAccountType <> SA.SubAccountType) = 0*/

	--Delete subaccounts that came from shopping cart items that are no longer approved
	DELETE FROM IMS.NewMemberSubAccount
	WHERE TrackingNum = @TrackingNum AND ((ID IN (SELECT SubAccountID
		FROM IMS.NewMemberShoppingCart
		WHERE TrackingNum = @TrackingNum AND SubAccountID IS NOT NULL AND
			Approved = 'N')) OR (ShoppingCartID IS NOT NULL AND 
		ShoppingCartID IN (SELECT ID
		FROM IMS.NewMemberShoppingCart
		WHERE TrackingNum = @TrackingNum AND Approved = 'N')))

	UPDATE IMS.NewMemberShoppingCart
	SET SubAccountID = NULL
	WHERE TrackingNum = @TrackingNum AND Approved = 'N'

	--Delete plastic cards for subaccounts that no longer exist
	DELETE FROM IMS.NewMemberPlasticCard
	WHERE TrackingNum = @TrackingNum AND Sequence IN (SELECT PlasticCardSequence
		FROM IMS.NewMemberSubAccountLink
		WHERE TrackingNum = @TrackingNum AND SubSequence NOT IN (SELECT Sequence
			FROM IMS.NewMemberSubAccount
			WHERE TrackingNum = @TrackingNum))

	DELETE FROM IMS.NewMemberSubAccountLink
	WHERE TrackingNum = @TrackingNum AND SubSequence NOT IN (SELECT Sequence
		FROM IMS.NewMemberSubAccount
		WHERE TrackingNum = @TrackingNum)

	--Delete flags for subaccounts that no longer exist
	DELETE FROM IMS.NewMemberFlag
	WHERE TrackingNum = @TrackingNum AND IsNull(SubAccountSequence, 0) > 0 AND
		SubAccountSequence NOT IN (SELECT Sequence
		FROM IMS.NewMemberSubAccount
		WHERE TrackingNum = @TrackingNum)

	--Delete joint owner links for subaccounts that no longer exist
	DELETE FROM IMS.NewMemberJointLink
	WHERE TrackingNum = @TrackingNum AND SubAccountSequence NOT IN (SELECT Sequence
		FROM IMS.NewMemberSubAccount
		WHERE TrackingNum = @TrackingNum)

	--Delete overdraft links for subaccount that no longer exist
	DELETE FROM IMS.NewMemberOverdraftLink
	WHERE TrackingNum = @TrackingNum AND ((TargetSubAccount > 0 AND
		TargetSubAccount NOT IN (SELECT Sequence
		FROM IMS.NewMemberSubAccount
		WHERE TrackingNum = @TrackingNum)) OR (SourceSubAccount > 0 AND
		SourceSubAccount NOT IN (SELECT Sequence
		FROM IMS.NewMemberSubAccount
		WHERE TrackingNum = @TrackingNum)))
END

--Synchronize IDs
UPDATE IMS.NewMemberSubAccount
SET ShoppingCartID = (SELECT ID FROM IMS.NewMemberShoppingCart
			WHERE TrackingNum = @TrackingNum AND SubAccountID = IMS.NewMemberSubAccount.ID)
WHERE TrackingNum = @TrackingNum AND (SELECT ID FROM IMS.NewMemberShoppingCart
			WHERE TrackingNum = @TrackingNum AND SubAccountID = IMS.NewMemberSubAccount.ID) IS NOT NULL

UPDATE IMS.NewMemberShoppingCart
SET SubAccountID = (SELECT ID FROM IMS.NewMemberSubAccount
			WHERE TrackingNum = @TrackingNum AND ShoppingCartID = IMS.NewMemberShoppingCart.ID)
WHERE TrackingNum = @TrackingNum AND (SELECT ID FROM IMS.NewMemberSubAccount
			WHERE TrackingNum = @TrackingNum AND ShoppingCartID = IMS.NewMemberShoppingCart.ID) IS NOT NULL
GO
/****** Object:  StoredProcedure [IMS].[spAPGFCU_UnreconciledFunding_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		Jonathan Eagar
-- Create date: 5/08/2009
-- Description:	Returns all unreconciled transactions
-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_UnreconciledFunding_Select
-- =============================================
CREATE PROCEDURE [IMS].[spAPGFCU_UnreconciledFunding_Select] 
	-- Add the parameters for the stored procedure here
	@AccountNumber bigint
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
    -- Insert statements for procedure here
     -- Insert statements for procedure here
    IF ISNULL(@AccountNumber, 0) = 0  
    BEGIN
		SELECT	FS.AccountNumber, 
				FS.FundingTransactionID, 
				FS.TrackingNum, 
				FS.GatewayPaymentID, 
				FS.GatewayPaymentStatus, 
				FS.FundingAccountID, 
				FS.FundingType, 
				FS.TargetSubAccountSeq, 
				FS.TargetSubAccountSuffix, 
				FS.TransferAmount, 
				FS.DateTimeCreated, 
				FS.DateTimeLastTransaction,
				FS.MemberName,
				FS.SourceBankName,
				FS.SourceBankRouting,
				FS.SourceAccountLast4,
				FS.SourceCardType
		FROM
		(
			SELECT	VF.AccountNumber, 
					VF.FundingTransactionID , 
					VF.TrackingNum, 
					VF.GatewayPaymentID, 
					PS.PaymentStatus as GatewayPaymentStatus, 
					VF.FundingAccountID, 
					VF.FundingType, 
					VF.TargetSubAccountSeq, 
					VF.TargetSubAccountSuffix, 
					VF.TransferAmount, 
					VF.DateTimeCreated, 
					VF.DateTimeLastTransaction,
					VF.MemberName,
					VF.SourceBankName,
					VF.SourceBankRouting,
					VF.SourceAccountLast4,
					VF.SourceCardType
			FROM
			(	
				(
					SELECT	F.AccountNumber, 
							FT.ID as FundingTransactionID, 
							FT.TrackingNum, 
							FT.GatewayPaymentID, 
							FB.ID as FundingAccountID, 
							FT.FundingType, 
							FT.TargetSubAccountSeq,	
							FT.TargetSubAccountSuffix, 
							FT.Amount as TransferAmount, 
							FT.DateTimeCreated, 
							FT.DateTimeLastTransaction,
							NMR.FName + ' ' + NMR.LName as MemberName,
							FB.BankName as SourceBankName,
							FB.RoutingNumber as SourceBankRouting,
							FB.AccountNumberLast4 as SourceAccountLast4,
							'' as SourceCardType
					FROM IMS.NewMemberRequest as NMR 
					INNER JOIN IMS.NMRFundingTransaction AS FT ON NMR.TrackingNum = FT.TrackingNum
					INNER JOIN IMS.NMRFundingBank AS FB ON FT.FundingBankID = FB.ID 
					INNER JOIN IMS.NMRFunding as F ON F.ID = FB.FundingID 
					WHERE FT.DateTimeReconciled IS NULL
				)
				UNION ALL
				(
					SELECT F.AccountNumber, 
					FT.ID as FundingTransactionID, 
					FT.TrackingNum, 
					FT.GatewayPaymentID, 
					FC.ID as FundingAccountID, 
					FT.FundingType, 
					FT.TargetSubAccountSeq,	
					FT.TargetSubAccountSuffix, 
					FT.Amount as TransferAmount, 
					FT.DateTimeCreated, 
					FT.DateTimeLastTransaction,
					NMR.FName + ' ' + NMR.LName as MemberName,
					'' as SourceBankName,
					'' as SourceBankRouting,
					FC.AccountNumberLast4 as SourceAccountLast4,
					FC.CardType as SourceCardType
					FROM IMS.NewMemberRequest as NMR 
					INNER JOIN IMS.NMRFundingTransaction AS FT ON NMR.TrackingNum = FT.TrackingNum
					INNER JOIN IMS.NMRFundingCard AS FC ON FT.FundingCardID = FC.ID 
					INNER JOIN IMS.NMRFunding as F ON F.ID = FC.FundingID 
					WHERE FT.DateTimeReconciled IS NULL AND UPPER(ISNULL(FC.AuthenticationCode, '')) NOT IN ('DECLINED', 'FAILED', 'FRAUD', 'ERROR', '')
				)
			)AS VF LEFT OUTER JOIN IMS.USAePayPaymentStatus AS PS ON VF.GatewayPaymentID = PS.PaymentId
		) AS FS	ORDER BY DateTimeCreated
    END		
    ELSE
	BEGIN    
		SELECT	FS.AccountNumber, 
				FS.FundingTransactionID, 
				FS.TrackingNum, 
				FS.GatewayPaymentID, 
				FS.GatewayPaymentStatus, 
				FS.FundingAccountID, 
				FS.FundingType, 
				FS.TargetSubAccountSeq, 
				FS.TargetSubAccountSuffix, 
				FS.TransferAmount, 
				FS.DateTimeCreated, 
				FS.DateTimeLastTransaction,
				FS.MemberName,
				FS.SourceBankName,
				FS.SourceBankRouting,
				FS.SourceAccountLast4,
				FS.SourceCardType
		FROM
		(
			SELECT	VF.AccountNumber, 
					VF.FundingTransactionID, 
					VF.TrackingNum, 
					VF.GatewayPaymentID, 
					PS.PaymentStatus as GatewayPaymentStatus, 
					VF.FundingAccountID, 
					VF.FundingType, 
					VF.TargetSubAccountSeq, 
					VF.TargetSubAccountSuffix, 
					VF.TransferAmount, 
					VF.DateTimeCreated, 
					VF.DateTimeLastTransaction,
					VF.MemberName,
					VF.SourceBankName,
					VF.SourceBankRouting,
					VF.SourceAccountLast4,
					VF.SourceCardType
			FROM
			(	
				(
					SELECT	F.AccountNumber, 
							FT.ID as FundingTransactionID, 
							FT.TrackingNum, 
							FT.GatewayPaymentID, 
							FB.ID as FundingAccountID, 
							FT.FundingType, 
							FT.TargetSubAccountSeq,	
							FT.TargetSubAccountSuffix, 
							FT.Amount as TransferAmount, 
							FT.DateTimeCreated, 
							FT.DateTimeLastTransaction,
							NMR.FName + ' ' + NMR.LName as MemberName,
							FB.BankName as SourceBankName,
							FB.RoutingNumber as SourceBankRouting,
							FB.AccountNumberLast4 as SourceAccountLast4,
							'' as SourceCardType
					FROM IMS.NewMemberRequest as NMR 
					INNER JOIN IMS.NMRFundingTransaction AS FT ON NMR.TrackingNum = FT.TrackingNum
					INNER JOIN IMS.NMRFundingBank AS FB ON FT.FundingBankID = FB.ID 
					INNER JOIN IMS.NMRFunding as F ON F.ID = FB.FundingID 
					WHERE F.AccountNumber = @AccountNumber AND FT.DateTimeReconciled IS NULL
				)
				UNION ALL
				(
					SELECT	F.AccountNumber, 
							FT.ID as FundingTransactionID, 
							FT.TrackingNum, FT.GatewayPaymentID, 
							FC.ID as FundingAccountID, 
							FT.FundingType, 
							FT.TargetSubAccountSeq,	
							FT.TargetSubAccountSuffix, 
							FT.Amount as TransferAmount, 
							FT.DateTimeCreated, 
							FT.DateTimeLastTransaction,
							NMR.FName + ' ' + NMR.LName as MemberName,
							'' as SourceBankName,
							'' as SourceBankRouting,
							FC.AccountNumberLast4 as SourceAccountLast4,
							FC.CardType as SourceCardType
					FROM IMS.NewMemberRequest as NMR 
					INNER JOIN IMS.NMRFundingTransaction AS FT ON NMR.TrackingNum = FT.TrackingNum
					INNER JOIN IMS.NMRFundingCard AS FC ON FT.FundingCardID = FC.ID 
					INNER JOIN IMS.NMRFunding as F ON F.ID = FC.FundingID 
					WHERE F.AccountNumber = @AccountNumber AND FT.DateTimeReconciled IS NULL AND UPPER(ISNULL(FC.AuthenticationCode, '')) NOT IN ('DECLINED', 'FAILED', 'FRAUD', 'ERROR', '')
				)
			)AS VF LEFT OUTER JOIN IMS.USAePayPaymentStatus AS PS ON VF.GatewayPaymentID = PS.PaymentId
		) AS FS	ORDER BY DateTimeCreated
    END		
END

GO
/****** Object:  StoredProcedure [IMS].[spAPGFCU_UnreconciledVerification_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_UnreconciledVerification_Select
CREATE PROCEDURE [IMS].[spAPGFCU_UnreconciledVerification_Select]
	-- Add the parameters for the stored procedure here
	@AccountNumber bigint
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
    IF ISNULL(@AccountNumber, 0) = 0  
    BEGIN
		SELECT      NMRFunding.AccountNumber, NMRFundingBank.ID as FundingBankID, IMS.fnAPGFCU_GetUSAePayPaymentStatus(NMRFundingBank.GatewayPaymentID1) as GatewayPaymentStatus1, IMS.fnAPGFCU_GetUSAePayPaymentStatus(NMRFundingBank.GatewayPaymentID2) as GatewayPaymentStatus2, NMRFundingBank.TrackingNum, NMRFundingBank.AccountNumberLast4, 
						  NMRFundingBank.BankName, NMRFundingBank.AccountType, NMRFundingBank.Amount1, NMRFundingBank.Amount2, 
						  NMRFundingBank.PSIErrorMessage, NMRFundingBank.DateTimeCreated, NMRFundingBank.DateTimeExported, NMRFundingBank.DateTimeLastTransaction
		FROM         NMRFundingBank INNER JOIN
						  NMRFunding ON NMRFundingBank.FundingID = NMRFunding.ID
		WHERE     (NMRFundingBank.DateTimeVerificationReconciled IS NULL AND NMRFundingBank.VerificationStatus = 'V' AND 1 = 0) -- Verification Amounts turned off for Citadel
    END
    ELSE
	BEGIN    
		SELECT      NMRFunding.AccountNumber, NMRFundingBank.ID as FundingBankID, IMS.fnAPGFCU_GetUSAePayPaymentStatus(NMRFundingBank.GatewayPaymentID1) as GatewayPaymentStatus1, IMS.fnAPGFCU_GetUSAePayPaymentStatus(NMRFundingBank.GatewayPaymentID2) as GatewayPaymentStatus2, NMRFundingBank.TrackingNum, NMRFundingBank.AccountNumberLast4, 
						  NMRFundingBank.BankName, NMRFundingBank.AccountType, NMRFundingBank.Amount1, NMRFundingBank.Amount2, 
						  NMRFundingBank.PSIErrorMessage, NMRFundingBank.DateTimeCreated, NMRFundingBank.DateTimeExported, NMRFundingBank.DateTimeLastTransaction
		FROM         NMRFundingBank INNER JOIN
						  NMRFunding ON NMRFundingBank.FundingID = NMRFunding.ID
		WHERE     (NMRFunding.AccountNumber = @AccountNumber AND DateTimeVerificationReconciled IS NULL AND NMRFundingBank.VerificationStatus = 'V' AND 1 = 0) -- Verification Amounts turned off for Citadel      
    END	
END


GO
/****** Object:  StoredProcedure [IMS].[spCalTech_D01Enable]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [IMS].[spCalTech_D01Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @docsubname CHAR(100)
DECLARE @newdocsub CHAR(100)
DECLARE @count INT
DECLARE @docindex INT

DECLARE curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT '' AS docsubname
	FROM NewMemberRequest AS NMR
	WHERE NMR.TrackingNum = @TrackingNum

OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @newdocsub = 'New Account Form ' + @docsubname
IF @docsubname Is Null
BEGIN
	SET @newdocsub = 'New Account Form'
END
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
	WHILE @@FETCH_STATUS = 0
	BEGIN
		SET @count = @count + 1
		PRINT @count
			IF @count = 1
		BEGIN
			Set @docindex = @docindex + 1
				 INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
		END
			FETCH NEXT FROM curs INTO @docsubname
		PRINT @docsubname
		IF @@FETCH_STATUS = 0
		BEGIN
			SET @newdocsub = (RTRIM(@newdocsub) + ', ' + RTRIM(@docsubname))
			PRINT @newdocsub
			UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex
		END
	END
CLOSE curs
DEALLOCATE curs
SELECT 'NewAccountForm' AS DocCode, * FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
DELETE FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCalTech_D01Fields]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [IMS].[spCalTech_D01Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @joseq INT
DECLARE @jotype CHAR(2)
DECLARE @jo1seq INT
DECLARE @be1seq INT
DECLARE @count INT
SET @jo1seq = 0
SET @be1seq = 0
SET @count = 0

DECLARE curs2 CURSOR FOR
	SELECT CONVERT(INT, JO.Sequence), JO.JointOwnerType
	FROM NewMemberJointOwner AS JO
	WHERE JO.TrackingNum = @TrackingNum AND (JO.JointOwnerType IN ('JP', 'JM', 'JO', 'PB')) ORDER BY JO.Sequence

OPEN curs2
FETCH NEXT FROM curs2 INTO @joseq, @jotype
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
      	IF (@jo1seq = 0 AND (@jotype = 'JP' OR @jotype = 'JM' OR @jotype = 'JO'))
		BEGIN
			Set @jo1seq = @joseq
		END
      	IF (@be1seq = 0 AND (@jotype = 'PB'))
		BEGIN
			Set @be1seq = @joseq
		END
      	FETCH NEXT FROM curs2 INTO @joseq, @jotype
	SET @count = @count + 1
	PRINT @count
   END
CLOSE curs2
DEALLOCATE curs2

SELECT @DocIndex As DocIndex
	, CASE NMR.Qualification3
		WHEN 'Employer'	THEN 'x'
		WHEN 'Group'	THEN 'x'
		ELSE ''
	  END AS Check_Eligibility1
	, CASE NMR.Qualification3
		WHEN 'Employer'	THEN DEPT.Description
		WHEN 'Group'	THEN DEPT.Description
		ELSE ''
	  END AS Eligibility1
	, CASE NMR.Qualification3
		WHEN 'Relative'	THEN 'x'
		ELSE ''
	  END AS Check_Eligibility2
	, CASE NMR.Qualification3
		WHEN 'Relative'	THEN RTRIM(NMR.Qualification1) + ' ' + RTRIM(NMR.Qualification2)
		ELSE ''
	  END AS Eligibility2
	, CASE NMR.Qualification3
		WHEN 'Relative'	THEN RTRIM(NMR.Relationship)
		ELSE ''
	  END AS Relationship
	, CASE WHEN Addr.Sequence = 1
		THEN Addr.Address1
		ELSE CASE WHEN ISNULL(Home.ApartmentNumber, '') = '' THEN RTRIM(RTRIM(Home.Address1) + ' ' + RTRIM(ISNULL(Home.Address2, '')) + ' ' + RTRIM(ISNULL(Home.Address3, ''))) ELSE RTRIM(RTRIM(Home.Address1) + ' ' + RTRIM(ISNULL(Home.Address2, '')) + ' ' + RTRIM(ISNULL(Home.Address3, ''))) + ' APT ' + Home.ApartmentNumber END
		END AS Address
	, CASE WHEN Addr.Sequence = 1
		THEN Addr.City
		ELSE Home.City
		END AS City
	, CASE WHEN Addr.Sequence = 1
		THEN Addr.State
		ELSE Home.State
		END AS State
	, CASE WHEN Addr.Sequence = 1
		THEN CASE LEN(Addr.Zip) WHEN 9 THEN LEFT(Addr.Zip, 5) + '-' + Right(Addr.Zip, 4) ELSE Addr.Zip END
		ELSE CASE LEN(Home.Zip) WHEN 9 THEN LEFT(Home.Zip, 5) + '-' + Right(Home.Zip, 4) ELSE Home.Zip END
		END AS Zip
	, CASE WHEN Addr.Sequence = 1
		THEN CASE WHEN ISNULL(Home.ApartmentNumber, '') = '' THEN RTRIM(RTRIM(Home.Address1) + ' ' + RTRIM(ISNULL(Home.Address2, '')) + ' ' + RTRIM(ISNULL(Home.Address3, ''))) ELSE RTRIM(RTRIM(Home.Address1) + ' ' + RTRIM(ISNULL(Home.Address2, '')) + ' ' + RTRIM(ISNULL(Home.Address3, ''))) + ' APT ' + Home.ApartmentNumber END
		ELSE ''
		END AS MailingAddress
	, CASE WHEN Addr.Sequence = 1
		THEN Home.City
		ELSE ''
		END AS MailingCity
	, CASE WHEN Addr.Sequence = 1
		THEN Home.State
		ELSE ''
		END AS MailingState
	, CASE WHEN Addr.Sequence = 1
		THEN CASE LEN(Home.Zip) WHEN 9 THEN LEFT(Home.Zip, 5) + '-' + Right(Home.Zip, 4) ELSE Home.Zip END
		ELSE ''
		END AS MailingZip
	, CASE WHEN @jo1seq = 0 AND @be1seq = 0 THEN 'x' ELSE '' END AS Check_Individual
	, CASE WHEN @jo1seq <> 0 THEN 'x' ELSE '' END AS Check_Joint
	, CASE WHEN @be1seq <> 0 THEN 'x' ELSE '' END AS Check_Beneficiary
	, LEFT(NMR.SSN, 3) + '-' + LEFT(RIGHT(NMR.SSN, 6), 2) + '-' + RIGHT(NMR.SSN, 4) AS SSN
	, UPPER(CASE WHEN NMR.IDType = 'D'
		THEN RTRIM(NMR.DriversLicenseNum)
		ELSE RTRIM(NMR.IDSource) + '-' + RTRIM(NMR.IDNumber)
		END) AS DLNumber
	, UPPER(CASE WHEN NMR.IDType = 'D'
		THEN RTRIM(NMR.DriversLicenseState)
		ELSE ''
		END) AS DLState
	, UPPER(RTRIM(CONVERT(CHAR(10), NMR.IDIssueDate, 101))) AS DLIssueDate
	, UPPER(RTRIM(CONVERT(CHAR(10), NMR.IDExpirationDate, 101))) AS DLExpireDate
	, Home.CellPhoneAC + '-' + LEFT(Home.CellPhone, 3) + '-' + RIGHT(RTRIM(Home.CellPhone), 4) AS CPhoneFull
--	, UPPER(RTRIM(NMR.MaidenName) + ' / ' + RTRIM(NMR.Password)) AS MaidenName_Password
	, UPPER(RTRIM(NMR.MaidenName)) AS MaidenName_Password
	, UPPER(RTRIM(Work.JobTitle)) AS JobTitle
	, UPPER(RTRIM(Work.EmployerName)) AS EmployerName

	, UPPER(RTRIM(JO1.FName)) AS JO_FName
	, UPPER(RTRIM(JO1.MInitial)) AS JO_MInitial
	, UPPER(RTRIM(JO1.LName)) AS JO_LName
	, UPPER(RTRIM(CONVERT(CHAR(10), JO1.DOB, 101))) AS JO_DOB
	, UPPER(RTRIM(JO1.Address)) AS JO_Address
	, UPPER(RTRIM(JO1.City)) AS JO_City
	, UPPER(RTRIM(JO1.State)) AS JO_State
	, UPPER(RTRIM(JO1.Zip)) AS JO_Zip
	, UPPER(RTRIM(JO1.SSN)) AS JO_SSN
	, UPPER(RTRIM(JO1.ID)) AS JO_DLNumber
	, UPPER(RTRIM(JO1.IDState)) AS JO_DLState
	, UPPER(RTRIM(JO1.IDIssueDate)) AS JO_DLIssueDate
	, UPPER(RTRIM(JO1.IDExpDate)) AS JO_DLExpireDate
	, UPPER(RTRIM(JO1.HFullPhone)) AS JO_HPhoneFull
	, UPPER(RTRIM(JO1.WFullPhone)) AS JO_WPhoneFull
	, UPPER(RTRIM(JO1.CFullPhone)) AS JO_CPhoneFull
	, UPPER(RTRIM(JO1.Email)) AS JO_Email
	, UPPER(RTRIM(JO1.JobTitle)) AS JO_JobTitle
	, UPPER(RTRIM(JO1.EmployerName)) AS JO_EmployerName

	, UPPER(RTRIM(BE1.FName)) AS BE_FName
	, UPPER(RTRIM(BE1.MInitial)) AS BE_MInitial
	, UPPER(RTRIM(BE1.LName)) AS BE_LName
	, UPPER(RTRIM(BE1.Relationship)) AS BE_Relationship
	, UPPER(RTRIM(BE1.SSN)) AS BE_SSN
	, UPPER(RTRIM(BE1.Address)) AS BE_Address
	, UPPER(RTRIM(BE1.City)) AS BE_City
	, UPPER(RTRIM(BE1.State)) AS BE_State
	, UPPER(RTRIM(BE1.Zip)) AS BE_Zip

FROM NewMemberRequest AS NMR
	LEFT OUTER JOIN NewMemberHome AS Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork AS Work On NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN NewMemberAddress AS Addr On NMR.TrackingNum = Addr.TrackingNum
	LEFT OUTER JOIN IMS.Departments AS DEPT ON NMR.Department = DEPT.Department
	LEFT OUTER JOIN fnCalTech_GetJO(@TrackingNum, @jo1seq) As JO1 ON NMR.TrackingNum = JO1.TrackingNum
	LEFT OUTER JOIN fnCalTech_GetJO(@TrackingNum, @be1seq) As BE1 ON NMR.TrackingNum = BE1.TrackingNum
WHERE NMR.TrackingNum = @TrackingNum
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCalTech_D02Enable]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [IMS].[spCalTech_D02Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @docsubname CHAR(100)
DECLARE @newdocsub CHAR(100)
DECLARE @count INT
DECLARE @docindex INT

DECLARE @jocount INT
SET @jocount = (SELECT COUNT(*) FROM IMS.NewMemberJointOwner JO WHERE JO.TrackingNum = @TrackingNum AND JO.JointOwnerType IN ('JP', 'JM', 'JO'))
PRINT 'JO Count is: ' + CAST(@jocount AS VARCHAR(2))
DECLARE @jbcount INT
SET @jbcount = (SELECT COUNT(*) FROM IMS.NewMemberJointOwner JO WHERE JO.TrackingNum = @TrackingNum AND JO.JointOwnerType IN ('PB'))
PRINT 'JB Count is: ' + CAST(@jbcount AS VARCHAR(2))
-- Ignore the first JO and first JB
SET @jocount = @jocount - 1
SET @jbcount = @jbcount - 1


SET @docindex = 0

WHILE @jocount > 0 OR @jbcount > 0
BEGIN
	SET @docindex = @docindex + 1
	SET @newdocsub = 'New Account Addendum (Page ' + CAST(@docindex AS VARCHAR(2)) + ')'
	INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	SET @jocount = @jocount - 2
	SET @jbcount = @jbcount - 3
END

SELECT 'NewAccountForm' AS DocCode, * FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
DELETE FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCalTech_D02Fields]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [IMS].[spCalTech_D02Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @joseq INT
DECLARE @jotype CHAR(2)
DECLARE @jo1seq INT
DECLARE @jo2seq INT
DECLARE @be1seq INT
DECLARE @be2seq INT
DECLARE @be3seq INT
DECLARE @count INT
SET @jo1seq = 0
SET @jo2seq = 0
SET @be1seq = 0
SET @be2seq = 0
SET @be3seq = 0

-- Get the JO information to be used
SET @count = 0
DECLARE jocurs CURSOR FOR
	SELECT CONVERT(INT, JO.Sequence)
	FROM NewMemberJointOwner AS JO
	WHERE JO.TrackingNum = @TrackingNum AND (JO.JointOwnerType IN ('JP', 'JM', 'JO'))

OPEN jocurs
FETCH NEXT FROM jocurs INTO @joseq
PRINT @@FETCH_STATUS
WHILE @@FETCH_STATUS = 0
BEGIN
	SET @count = @count + 1
	IF (@count = (@DocIndex * 2))			-- 1:2,2:4,3:6,4:8
	BEGIN
		SET @jo1seq = @joseq
	END
	IF (@count = ((@DocIndex * 2) + 1))		-- 1:3,2:5,3:7,4:9
	BEGIN
		SET @jo2seq = @joseq
	END
	FETCH NEXT FROM jocurs INTO @joseq
	PRINT @count
END
CLOSE jocurs
DEALLOCATE jocurs

-- Get the JB information to be used
SET @count = 0
DECLARE jbcurs CURSOR FOR
	SELECT CONVERT(INT, JO.Sequence)
	FROM NewMemberJointOwner AS JO
	WHERE JO.TrackingNum = @TrackingNum AND (JO.JointOwnerType IN ('PB'))

OPEN jbcurs
FETCH NEXT FROM jbcurs INTO @joseq
PRINT @@FETCH_STATUS
WHILE @@FETCH_STATUS = 0
BEGIN
	SET @count = @count + 1
	IF (@count = ((@DocIndex * 3) - 1))		-- 1:2,2:5,3:8,4:11
	BEGIN
		SET @be1seq = @joseq
	END
	IF (@count = (@DocIndex * 3))			-- 1:3,2:6,3:9,4:12
	BEGIN
		SET @be2seq = @joseq
	END
	IF (@count = ((@DocIndex * 3) + 1))		-- 1:4,2:7,3:10,4:13
	BEGIN
		SET @be3seq = @joseq
	END
	FETCH NEXT FROM jbcurs INTO @joseq
	PRINT @count
END
CLOSE jbcurs
DEALLOCATE jbcurs

SELECT @DocIndex As DocIndex
	, UPPER(RTRIM(JO1.FName)) AS JO1_FName
	, UPPER(RTRIM(JO1.MInitial)) AS JO1_MInitial
	, UPPER(RTRIM(JO1.LName)) AS JO1_LName
	, UPPER(RTRIM(CONVERT(CHAR(10), JO1.DOB, 101))) AS JO1_DOB
	, UPPER(RTRIM(JO1.Address)) AS JO1_Address
	, UPPER(RTRIM(JO1.City)) AS JO1_City
	, UPPER(RTRIM(JO1.State)) AS JO1_State
	, UPPER(RTRIM(JO1.Zip)) AS JO1_Zip
	, UPPER(RTRIM(JO1.SSN)) AS JO1_SSN
	, UPPER(RTRIM(JO1.ID)) AS JO1_DLNumber
	, UPPER(RTRIM(JO1.IDState)) AS JO1_DLState
	, UPPER(RTRIM(JO1.IDIssueDate)) AS JO1_DLIssueDate
	, UPPER(RTRIM(JO1.IDExpDate)) AS JO1_DLExpireDate
	, UPPER(RTRIM(JO1.HFullPhone)) AS JO1_HPhoneFull
	, UPPER(RTRIM(JO1.WFullPhone)) AS JO1_WPhoneFull
	, UPPER(RTRIM(JO1.CFullPhone)) AS JO1_CPhoneFull
	, UPPER(RTRIM(JO1.Email)) AS JO1_Email
	, UPPER(RTRIM(JO1.JobTitle)) AS JO1_JobTitle
	, UPPER(RTRIM(JO1.EmployerName)) AS JO1_EmployerName
	, UPPER(RTRIM(JO2.FName)) AS JO2_FName
	, UPPER(RTRIM(JO2.MInitial)) AS JO2_MInitial
	, UPPER(RTRIM(JO2.LName)) AS JO2_LName
	, UPPER(RTRIM(CONVERT(CHAR(10), JO2.DOB, 101))) AS JO2_DOB
	, UPPER(RTRIM(JO2.Address)) AS JO2_Address
	, UPPER(RTRIM(JO2.City)) AS JO2_City
	, UPPER(RTRIM(JO2.State)) AS JO2_State
	, UPPER(RTRIM(JO2.Zip)) AS JO2_Zip
	, UPPER(RTRIM(JO2.SSN)) AS JO2_SSN
	, UPPER(RTRIM(JO2.ID)) AS JO2_DLNumber
	, UPPER(RTRIM(JO2.IDState)) AS JO2_DLState
	, UPPER(RTRIM(JO2.IDIssueDate)) AS JO2_DLIssueDate
	, UPPER(RTRIM(JO2.IDExpDate)) AS JO2_DLExpireDate
	, UPPER(RTRIM(JO2.HFullPhone)) AS JO2_HPhoneFull
	, UPPER(RTRIM(JO2.WFullPhone)) AS JO2_WPhoneFull
	, UPPER(RTRIM(JO2.CFullPhone)) AS JO2_CPhoneFull
	, UPPER(RTRIM(JO2.Email)) AS JO2_Email
	, UPPER(RTRIM(JO2.JobTitle)) AS JO2_JobTitle
	, UPPER(RTRIM(JO2.EmployerName)) AS JO2_EmployerName

	, UPPER(RTRIM(BE1.FName)) AS BE1_FName
	, UPPER(RTRIM(BE1.MInitial)) AS BE1_MInitial
	, UPPER(RTRIM(BE1.LName)) AS BE1_LName
	, UPPER(RTRIM(BE1.Relationship)) AS BE1_Relationship
	, UPPER(RTRIM(BE1.SSN)) AS BE1_SSN
	, UPPER(RTRIM(BE1.Address)) AS BE1_Address
	, UPPER(RTRIM(BE1.City)) AS BE1_City
	, UPPER(RTRIM(BE1.State)) AS BE1_State
	, UPPER(RTRIM(BE1.Zip)) AS BE1_Zip
	, UPPER(RTRIM(BE2.FName)) AS BE2_FName
	, UPPER(RTRIM(BE2.MInitial)) AS BE2_MInitial
	, UPPER(RTRIM(BE2.LName)) AS BE2_LName
	, UPPER(RTRIM(BE2.Relationship)) AS BE2_Relationship
	, UPPER(RTRIM(BE2.SSN)) AS BE2_SSN
	, UPPER(RTRIM(BE2.Address)) AS BE2_Address
	, UPPER(RTRIM(BE2.City)) AS BE2_City
	, UPPER(RTRIM(BE2.State)) AS BE2_State
	, UPPER(RTRIM(BE2.Zip)) AS BE2_Zip
	, UPPER(RTRIM(BE3.FName)) AS BE3_FName
	, UPPER(RTRIM(BE3.MInitial)) AS BE3_MInitial
	, UPPER(RTRIM(BE3.LName)) AS BE3_LName
	, UPPER(RTRIM(BE3.Relationship)) AS BE3_Relationship
	, UPPER(RTRIM(BE3.SSN)) AS BE3_SSN
	, UPPER(RTRIM(BE3.Address)) AS BE3_Address
	, UPPER(RTRIM(BE3.City)) AS BE3_City
	, UPPER(RTRIM(BE3.State)) AS BE3_State
	, UPPER(RTRIM(BE3.Zip)) AS BE3_Zip

FROM NewMemberRequest AS NMR
	LEFT OUTER JOIN NewMemberHome AS Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork AS Work On NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN IMS.Departments AS DEPT ON NMR.Department = DEPT.Department
	LEFT OUTER JOIN fnCalTech_GetJO(@TrackingNum, @jo1seq) As JO1 ON NMR.TrackingNum = JO1.TrackingNum
	LEFT OUTER JOIN fnCalTech_GetJO(@TrackingNum, @jo2seq) As JO2 ON NMR.TrackingNum = JO2.TrackingNum
	LEFT OUTER JOIN fnCalTech_GetJO(@TrackingNum, @be1seq) As BE1 ON NMR.TrackingNum = BE1.TrackingNum
	LEFT OUTER JOIN fnCalTech_GetJO(@TrackingNum, @be2seq) As BE2 ON NMR.TrackingNum = BE2.TrackingNum
	LEFT OUTER JOIN fnCalTech_GetJO(@TrackingNum, @be3seq) As BE3 ON NMR.TrackingNum = BE3.TrackingNum
WHERE NMR.TrackingNum = @TrackingNum
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCalTech_D03Enable]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [IMS].[spCalTech_D03Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @docsubname CHAR(100)
DECLARE @newdocsub CHAR(100)
DECLARE @count INT
DECLARE @docindex INT

DECLARE @commentcount INT
SET @commentcount = (SELECT COUNT(*) FROM IMS.NewMemberManualApproval MA WHERE MA.TrackingNum = @TrackingNum AND comment <> '')

SET @docindex = 0

IF @commentcount > 0
BEGIN
	SET @docindex = @docindex + 1
	SET @newdocsub = 'Comments'
	INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
END

SELECT 'NewAccountComments' AS DocCode, * FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
DELETE FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Return 1

GO
/****** Object:  StoredProcedure [IMS].[spCalTech_D03Fields]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [IMS].[spCalTech_D03Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

DECLARE @Comments VARCHAR(Max);
SELECT @Comments = COALESCE(@Comments + ' <br><hr><br> ' + RTRIM(Comment), RTRIM(Comment))
FROM NewMemberManualApproval
WHERE TrackingNum = @TrackingNum AND Comment <> '';
--select @comments;

SELECT @DocIndex AS DocIndex
	  ,@TrackingNum AS TrackingNum
      ,@Comments AS HtmlContent

Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCalTech_D99Enable]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCalTech_D99Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @docsubname CHAR(100)
DECLARE @newdocsub CHAR(100)
DECLARE @count INT
DECLARE @docindex INT
DECLARE curs CURSOR LOCAL FAST_FORWARD FOR

	SELECT '' AS docsubname
	FROM NewMemberRequest AS NMR
	WHERE NMR.TrackingNum = @TrackingNum AND @ApplicationMode <> 'EXTERNAL' --AND NMR.Processed = 999 AND NMR.Created IN ('Y', 'I')

OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @newdocsub = 'Credit Report ' + @docsubname
IF @docsubname Is Null
BEGIN
	SET @newdocsub = 'Credit Report'
END
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
	WHILE @@FETCH_STATUS = 0
	BEGIN
		SET @count = @count + 1
		PRINT @count
			IF @count = 1
		BEGIN
			Set @docindex = @docindex + 1
				 INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
		END
			FETCH NEXT FROM curs INTO @docsubname
		PRINT @docsubname
		IF @@FETCH_STATUS = 0
		BEGIN
			SET @newdocsub = (RTRIM(@newdocsub) + ', ' + RTRIM(@docsubname))
			PRINT @newdocsub
			UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex
		END
	END
CLOSE curs
DEALLOCATE curs
SELECT 'CreditReport' AS DocCode, * FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
DELETE FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Return 1

GO
/****** Object:  StoredProcedure [IMS].[spCalTech_D99Fields]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create PROCEDURE [IMS].[spCalTech_D99Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

SELECT @DocIndex As DocIndex

FROM NewMemberRequest AS NMR
WHERE NMR.TrackingNum = @TrackingNum
Return 1

GO
/****** Object:  StoredProcedure [IMS].[spCalTech_DG1Enable]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCalTech_DG1Enable] @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

Return 1


GO
/****** Object:  StoredProcedure [IMS].[spCalTech_DG1Fields]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCalTech_DG1Fields] @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

Select 'Documents' AS GroupName From NewMemberRequest where trackingnum = @TrackingNum
GO
/****** Object:  StoredProcedure [IMS].[spCalTech_DP1Enable]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCalTech_DP1Enable] @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

Return 1



GO
/****** Object:  StoredProcedure [IMS].[spCalTech_DP1Fields]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCalTech_DP1Fields] @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

SELECT NMR.TrackingNum AS TrackingNumber
	, 'Tracking #: ' + RTRIM(NMR.TrackingNum) AS TrackingNum
	, AltAddress.Address1 AS MailingAddress
	, NMR.CurrBranch As Branch
	, Branches.Description AS BranchName
	, CONVERT(char(10), GetDate(), 101) As TodayDate
	, DATENAME(MM, GetDate()) + RIGHT(CONVERT(char(12), GetDate(), 107), 9) As TodayDateFull
	, CONVERT(char(10), NMR.CreatedOn, 101) As CreatedOn
	, RTRIM(NMR.Account) + '  -  00' As Account
	, 'Account #: ' + RTRIM(NMR.Account) As AccountNum
--	, CONVERT(char(2), Home.ResidenceYears, 101) + ' yrs  ' + CONVERT(char(2), Home.ResidenceMonths, 101) + ' mos' AS HowLong
	, UPPER(RTRIM(NMR.FName)) AS FName
	, UPPER(RTRIM(NMR.LName)) AS LName
	, UPPER(RTRIM(NMR.MInitial)) AS MInitial
	, UPPER(CASE NMR.AccountClass WHEN 'P' THEN UPPER(RTRIM(NMR.LName) + ', ' + RTRIM(RTRIM(NMR.FName) + ' ' + RTRIM(NMR.MInitial))) ELSE RTRIM(NMR.OrganizationName) END) AS RevFullName
	, UPPER(CASE NMR.AccountClass WHEN 'P' THEN RTRIM(RTRIM(NMR.FName) + ' ' + RTRIM(NMR.LName) + ' ' + NMR.MECHTag) ELSE RTRIM(NMR.OrganizationName) END) AS FullName
	, UPPER(CASE NMR.AccountClass WHEN 'P' THEN 'Dear ' + RTRIM(RTRIM(NMR.FName) + ' ' + RTRIM(NMR.LName) + ' ' + NMR.MECHTag) + ':' ELSE 'Dear ' + RTRIM(NMR.OrganizationName) + ':' END) AS DearName
	, CASE NMR.AccountClass
		WHEN 'O' THEN Work.Areacode + '-' + LEFT(Work.Phone, 3) + '-' + RIGHT(RTRIM(Work.Phone), 4)
		ELSE Home.Areacode + '-' + LEFT(Home.Phone, 3) + '-' + RIGHT(RTRIM(Home.Phone), 4)
	  END AS HPhoneFull
	, Home.CellPhoneAC + '-' + LEFT(Home.CellPhone, 3) + '-' + RIGHT(RTRIM(Home.CellPhone), 4) AS CPhoneFull
	, CASE NMR.UseTodayForDOB WHEN 'Y' THEN CONVERT(char(10), NMR.CreatedOn, 101) ELSE CONVERT(char(10), NMR.DOB, 101) END AS DOB
	, CASE NMR.AccountClass WHEN 'P' THEN Left(NMR.SSN, 3) + '-' + LEFT(RIGHT(NMR.SSN, 6), 2) + '-' + RIGHT(NMR.SSN, 4) ELSE LEFT(NMR.SSN, 2) + '-' + RIGHT(NMR.SSN, 7) END AS SSN
	, CASE WHEN NMR.SSN != '' THEN 'X' END AS YesSSN
	, UPPER(NMR.MaidenName) AS MaidenName
	, NMR.Password AS Password
	, UPPER(NMR.CreatedBy) AS Seller
	, UPPER(NMR.Department) AS Department
	, CASE WHEN NMR.Created = 'F' Or NMR.Created = 'H' Or NMR.Created = 'I' THEN '' ELSE 'X' END AS YesNewAccount
	, CASE WHEN NMR.Created = 'F' Or NMR.Created = 'H' Or NMR.Created = 'I' THEN 'X' END AS YesChangeAccount
--	, CASE WHEN NMR.Created = 'F' Or NMR.Created = 'H' Or NMR.Created = 'I' THEN NMR.Account END AS ChangeAccount
	, UPPER(CASE WHEN AltAddress.Address1 <> ''
		THEN
			RTRIM(AltAddress.address1 + CASE AltAddress.address2 WHEN '' THEN ''ELSE', ' END + AltAddress.address2 + CASE AltAddress.address3 WHEN '' THEN ''ELSE', ' END + AltAddress.address3)
		ELSE
			CASE NMR.AccountClass
				WHEN 'O' THEN RTRIM(RTRIM(Work.Address1) + CASE ISNULL(Work.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Work.Address2) END + CASE ISNULL(Work.Address3, '') WHEN '' THEN ' ' ELSE ', ' + RTRIM(Work.Address3) END)
				ELSE RTRIM(RTRIM(Home.Address1) + CASE ISNULL(Home.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Home.Address2) END + CASE ISNULL(Home.Address3, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Home.Address3) END)
			END
		END) AS Address
	, UPPER(RTRIM(Home.Address1)) AS Address1
	, UPPER(CASE RTRIM(ISNULL(Home.ApartmentNumber, '')) WHEN '' THEN RTRIM(Home.Address2) ELSE RTRIM(Home.ApartmentNumber) END) AS Apartment
	, UPPER(CASE NMR.AccountClass
		WHEN 'O' THEN RTRIM(RTRIM(Work.Address1) + CASE ISNULL(Work.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Work.Address2) END + CASE ISNULL(Work.Address3, '') WHEN '' THEN ' ' ELSE ', ' + RTRIM(Work.Address3) END) + ', ' + RTRIM(Work.City) + ', ' + Work.State + ' ' + CASE LEN(Work.Zip) WHEN 9 THEN LEFT(Work.Zip, 5) + '-' + Right(Work.Zip, 4) ELSE Work.Zip END
		ELSE RTRIM(RTRIM(Home.Address1) + CASE ISNULL(Home.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Home.Address2) END + CASE ISNULL(Home.Address3, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Home.Address3) END) + ', ' + RTRIM(Home.City) + ', ' + Home.State + ' ' + CASE LEN(Home.Zip) WHEN 9 THEN LEFT(Home.Zip, 5) + '-' + Right(Home.Zip, 4) ELSE Home.Zip END
	  END) AS FullAddress
	, UPPER(CASE NMR.AccountClass
		WHEN 'O' THEN RTRIM(Work.city) + ', ' + Work.state + ' ' + CASE LEN(Work.Zip) WHEN 9 THEN LEFT(Work.zip, 5) + '-' + Right(Work.Zip, 4) ELSE Work.Zip END
		ELSE RTRIM(Home.city) + ', ' + Home.state + ' ' + CASE LEN(Home.Zip) WHEN 9 THEN LEFT(Home.zip, 5) + '-' + Right(Home.Zip, 4) ELSE Home.Zip END
	  END) AS CityStateZip
	, UPPER(CASE NMR.AccountClass
		WHEN 'O' THEN Work.City
		ELSE Home.City
	  END) AS City
	, UPPER(CASE NMR.AccountClass
		WHEN 'O' THEN Work.State
		ELSE Home.State
	  END) AS State
	, UPPER(CASE NMR.AccountClass
		WHEN 'O' THEN CASE LEN(Work.Zip) WHEN 9 THEN LEFT(Work.zip, 5) + '-' + Right(Work.Zip, 4) ELSE Work.Zip END
		ELSE CASE LEN(Home.Zip) WHEN 9 THEN LEFT(Home.zip, 5) + '-' + Right(Home.Zip, 4) ELSE Home.Zip END
	  END) AS Zip		
	, UPPER(RTRIM(NMR.Email1)) AS Email
	, CASE NMR.AccountClass
		WHEN 'O' THEN Work.AreaCode
		ELSE Home.AreaCode
	  END AS AC
	, CASE NMR.AccountClass
		WHEN 'O' THEN LEFT(Work.Phone, 3) + '-' + RIGHT(RTRIM(Work.Phone), 4)
		ELSE LEFT(Home.Phone, 3) + '-' + RIGHT(RTRIM(Home.Phone), 4)
	  END AS Phone
	, UPPER(CASE NMR.AccountClass WHEN 'P' THEN Work.EmployerName ELSE '' END) AS WorkName
	, UPPER(CASE NMR.AccountClass WHEN 'P' THEN Work.EmployerName ELSE '' END) AS Employer
	, UPPER(CASE NMR.AccountClass WHEN 'P' THEN Work.EmployerName ELSE '' END) AS EmployerName
	, UPPER(CASE NMR.AccountClass WHEN 'P' THEN RTRIM(Work.address1 + CASE Work.address2 WHEN '' THEN ''ELSE', ' END + Work.address2 + CASE Work.address3 WHEN '' THEN ''ELSE', ' END + Work.address3) ELSE '' END) AS WorkAddress
	, UPPER(CASE NMR.AccountClass WHEN 'P' THEN Work.City ELSE '' END) AS WorkCity
	, UPPER(CASE NMR.AccountClass WHEN 'P' THEN Work.State ELSE '' END) AS WorkState
	, UPPER(CASE NMR.AccountClass WHEN 'P' THEN CASE LEN(Work.Zip) WHEN 9 THEN LEFT(Work.zip, 5) + '-' + RIGHT(Work.Zip, 4) ELSE Work.Zip END ELSE '' END) AS WorkZip
	, Work.AreaCode AS WorkAC, LEFT(Work.Phone, 3) + '-' + RIGHT(RTRIM(Work.Phone), 4)  AS WorkPhone
	, CASE NMR.AccountClass
		WHEN 'O' THEN Home.Areacode + '-' + LEFT(Home.Phone, 3) + '-' + RIGHT(RTRIM(Home.Phone), 4)
		ELSE Work.Areacode + '-' + LEFT(Work.Phone, 3) + '-' + RIGHT(RTRIM(Work.Phone), 4)
	  END AS WPhoneFull
	, UPPER(RTRIM(Work.JobTitle)) AS Position
	, UPPER(RTRIM(Work.JobTitle)) AS Occupation
	, Work.ProfessionYears As WorkNumYears
	, UPPER(RTRIM(Work.EmployerName) + ' ' + RTRIM(Work.address1 + CASE Work.address2 WHEN '' THEN ''ELSE', ' END + Work.address2 + CASE Work.address3 WHEN '' THEN ''ELSE', ' END + Work.address3) + ', ' + RTRIM(Work.City) + ', ' + RTRIM(Work.State) + ' ' + CASE LEN(Work.Zip) WHEN 9 THEN LEFT(Work.zip, 5) + '-' + Right(Work.Zip, 4) ELSE Work.Zip END) AS WorkNameAddress
	, Work.HireDate
	,   CASE Work.IncomeFrequency
	     	WHEN 'W'  THEN 'Week'
		WHEN 'B' THEN 'Bi-Week'
		WHEN 'M' THEN 'Month'
		WHEN 'S' THEN 'Semi-Month'
		WHEN 'Y' THEN 'Year'
	      END AS IncomeFrequency
	,   CASE Work.IncomeFrequency
	     	WHEN 'W'  THEN (Work.GrossIncome * 52)/100
		WHEN 'B' THEN (Work.GrossIncome * 26)/100
		WHEN 'M' THEN (Work.GrossIncome * 12)/100
		WHEN 'S' THEN (Work.GrossIncome * 24)/100
		WHEN 'Y' THEN (Work.GrossIncome)/100
	      END AS GrossIncome
	, Home.ResidenceYears AS NumYears
	, CASE NMR.AccountClass
		WHEN 'O' THEN 'Yes'
		ELSE CASE WHEN NMR.Citizenship = 'US' Or NMR.Citizenship = 'RA' THEN 'Yes' END
	  END AS YesNoUSCitizen
	, CASE NMR.AccountClass
		WHEN 'O' THEN 'X'
		ELSE CASE WHEN NMR.Citizenship = 'US' Or NMR.Citizenship = 'RA' THEN 'X' END
	  END AS YesUSCitizen
	, CASE NMR.AccountClass
		WHEN 'O' THEN ''
		ELSE CASE WHEN NMR.Citizenship != 'US' And NMR.Citizenship != 'RA' THEN 'X' END
	  END AS NoUSCitizen
	, CASE WHEN NMR.BackupWithholding = 'N' THEN 'X' END AS BackWith
	, 'X' AS YesEligible00
	, CASE WHEN NMR.Qualification3 = 'Location' THEN NMR.Department END AS County
	, RTRIM(NMR.LName) + '/' + RTRIM(RTRIM(NMR.FName) + ' ' + NMR.MInitial) AS SlashName
	, '(' + RTRIM(LTRIM(CAST(NMR.CurrBranch AS VARCHAR(2)))) + ' - ' + RTRIM(Branches.[Description]) + ')' AS SellerBranch
	, 'CITY AND COUNTY CREDIT UNION' AS HCCUName
	, '144 11TH STREET EAST' AS HCCUAddress
	, 'ST. PAUL, MN  44101-2380' AS HCCUCityStateZip
	, '651-225-2700 or 1-800-223-2801' AS HCCUPhone
	, 'www.cccu.com' AS HCCUURL
	, CASE WHEN NMR.SSN != '' THEN Left(NMR.SSN, 3) + '-' + LEFT(RIGHT(NMR.SSN, 6), 2) + '-' + RIGHT(NMR.SSN, 4) END AS 'IMM-CustomerNumber'
FROM NewMemberRequest As NMR
	--INNER JOIN udt_AccountTypes AS AType On NMR.AccountType = AType.TypeCode
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN NewMemberAddress As AltAddress On NMR.TrackingNum = AltAddress.TrackingNum
	LEFT OUTER JOIN Branches On NMR.CurrBranch = Branches.BranchCode
	LEFT OUTER JOIN Departments ON NMR.Department = Departments.Department
WHERE NMR.TrackingNum = @TrackingNum
GO
/****** Object:  StoredProcedure [IMS].[spCalTech_Eligibility_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_Eligibility_Select
CREATE PROCEDURE [IMS].[spCalTech_Eligibility_Select]
	@ZipCode varchar(5),
	@CensusTract varchar(10)
AS

IF IsNull(@CensusTract, '') = '' AND @ZipCode <> ''
BEGIN
	SELECT Department
	FROM udt_EligibilityByZip
	WHERE ZipCode = @ZipCode
END
GO
/****** Object:  StoredProcedure [IMS].[spCalTech_FedReservePendingTransaction_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		Jonathan Eagar
-- Create date: 8/25/2011
-- Description:	Returns all FedReserve Pending Transactions
-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_FedReservePendingTransaction_Select
-- =============================================
CREATE PROCEDURE [IMS].[spCalTech_FedReservePendingTransaction_Select] 
	-- Add the parameters for the stored procedure here
	@NMRAccountNumber bigint
AS
BEGIN	
	SET @NMRAccountNumber = ISNULL(@NMRAccountNumber, 0)
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	-- Insert statements for procedure here
	
	DECLARE @TransactionSummary TABLE
	(		
		FundingBankID INT,
		TransferAmountTotal DECIMAL(18,2)		
	)
		
	IF @NMRAccountNumber = 0  
	BEGIN
	
	INSERT INTO @TransactionSummary(FundingBankID, TransferAmountTotal)	
	SELECT
		   FB.ID as FundingBankID,			  
		   SUM(FT.Amount) as TransferAmountTotal			   
	FROM IMS.NMRFundingBank FB INNER JOIN IMS.NMRFundingTransaction FT ON FB.ID = FT.FundingBankID						
	WHERE FT.DateTimeLastTransaction IS NULL AND FT.FundingType = 'B'
	GROUP BY FB.ID	
	
	SELECT  FRPT.* FROM
	( 
		(
		SELECT F.ID as FundingID,
			   F.AccountNumber as NMRAccountNumber,
			   FB.TrackingNum as NMRTrackingNumber,
			   RTRIM(NMR.LName) + ', ' + RTRIM(NMR.FName) as NMRMemberName,
			   FB.ID as FundingBankID,
			   0 as FundingTransactionID,
			   FB.RoutingNumber as FundingBankRouting,
			   FB.AccountNumberEncrypted as FundingBankAccountNumberEncrypted,
			   FB.AccountNumberLast4 as FundingBankAccountAccountLast4,
			   FB.BankName as FundingBankName,
			   FB.AccountType as FundingBankAccountType,
			   FB.Amount1 as VerificationAmount1,
			   FB.Amount2 as VerificationAmount2,
			   0 as TransferAmount,
			   0 as TransferAmountTotal,			   	
			   0 as TargetSubAccountSuffix,
			   0 as TargetSubAccountSeq,
			   FB.DateTimeCreated as DateTimeCreated
		FROM IMS.NMRFunding F INNER JOIN IMS.NMRFundingBank FB ON F.ID = FB.FundingID
								INNER JOIN IMS.NewMemberRequest NMR ON FB.TrackingNum = NMR.TrackingNum
		WHERE FB.VerificationStatus = 'P'	
		)
		UNION ALL
		(	
		SELECT F.ID as FundingID,
			   F.AccountNumber as NMRAccountNumber,
			   FB.TrackingNum as NMRTrackingNumber,			   
			   RTRIM(NMR.LName) + ', ' + RTRIM(NMR.FName) as NMRMemberName,
			   FB.ID as FundingBankID,
			   FT.ID as FundingTransactionID,
			   FB.RoutingNumber as FundingBankRouting,
			   FB.AccountNumberEncrypted as FundingBankAccountNumberEncrypted,
			   FB.AccountNumberLast4 as FundingBankAccountAccountLast4,
			   FB.BankName as FundingBankName,
			   FB.AccountType as FundingBankAccountType,
				0 as VerificationAmount1,
				0 as VerificationAmount2,
			   FT.Amount as TransferAmount,
			   TS.TransferAmountTotal as TransferAmountTotal,			
			   FT.TargetSubAccountSuffix as TargetSubAccountSuffix,
			   FT.TargetSubAccountSeq as TargetSubAccountSeq,
			   FT.DateTimeCreated as DateTimeCreated 
		FROM IMS.NMRFunding F INNER JOIN IMS.NMRFundingBank FB ON F.ID = FB.FundingID
								INNER JOIN IMS.NMRFundingTransaction FT ON FB.ID = FT.FundingBankID
									INNER JOIN IMS.NewMemberRequest NMR ON FB.TrackingNum = NMR.TrackingNum
										INNER JOIN @TransactionSummary TS ON FB.ID = TS.FundingBankID
		WHERE FT.DateTimeLastTransaction IS NULL AND FT.FundingType = 'B'
		)
	)  FRPT ORDER BY FRPT.NMRTrackingNumber, FRPT.FundingID, FRPT.FundingBankID, FRPT.FundingTransactionID	
	END	
	ELSE
	BEGIN
	
	INSERT INTO @TransactionSummary(FundingBankID, TransferAmountTotal)	
	SELECT	   		   
		   FB.ID as FundingBankID,			  
		   SUM(FT.Amount) as TransferAmountTotal			   
	FROM IMS.NMRFunding F INNER JOIN IMS.NMRFundingBank FB ON F.ID = FB.FundingID 
							INNER JOIN IMS.NMRFundingTransaction FT ON FB.ID = FT.FundingBankID						
	WHERE FT.DateTimeLastTransaction IS NULL AND 
		FT.FundingType = 'B' AND
		F.AccountNumber = @NMRAccountNumber	 
	GROUP BY FB.ID	
	  
	SELECT  FRPT.* FROM
	(   
		(
		SELECT F.ID as FundingID,
			   F.AccountNumber as NMRAccountNumber,
			   FB.TrackingNum as NMRTrackingNumber,
			   RTRIM(NMR.LName) + ', ' + RTRIM(NMR.FName) as NMRMemberName,
			   FB.ID as FundingBankID,
			   0 as FundingTransactionID,
			   FB.RoutingNumber as FundingBankRouting,
			   FB.AccountNumberEncrypted as FundingBankAccountNumberEncrypted,
			   FB.AccountNumberLast4 as FundingBankAccountAccountLast4,
			   FB.BankName as FundingBankName,
			   FB.AccountType as FundingBankAccountType,
			   FB.Amount1 as VerificationAmount1,
			   FB.Amount2 as VerificationAmount2,
			   0 as TransferAmount,
			   0 as TransferAmountTotal,
			   0 as TargetSubAccountSuffix,
			   0 as TargetSubAccountSeq,
			   FB.DateTimeCreated as DateTimeCreated
		FROM IMS.NMRFunding F INNER JOIN IMS.NMRFundingBank FB ON F.ID = FB.FundingID
								INNER JOIN IMS.NewMemberRequest NMR ON FB.TrackingNum = NMR.TrackingNum
		WHERE	FB.VerificationStatus = 'P' AND 
				F.AccountNumber = @NMRAccountNumber	
		)	
		UNION ALL
		(		
		SELECT F.ID as FundingID,
			   F.AccountNumber as NMRAccountNumber,
			   FB.TrackingNum as NMRTrackingNumber,
			   RTRIM(NMR.LName) + ', ' + RTRIM(NMR.FName) as NMRMemberName,
			   FB.ID as FundingBankID,
			   FT.ID as FundingTransactionID,
			   FB.RoutingNumber as FundingBankRouting,
			   FB.AccountNumberEncrypted as FundingBankAccountNumberEncrypted,
			   FB.AccountNumberLast4 as FundingBankAccountAccountLast4,
			   FB.BankName as FundingBankName,
			   FB.AccountType as FundingBankAccountType,
				0 as VerificationAmount1,
				0 as VerificationAmount2,
			   FT.Amount as TransferAmount,
			   TS.TransferAmountTotal as TransferAmountTotal,
			   FT.TargetSubAccountSuffix as TargetSubAccountSuffix,
			   FT.TargetSubAccountSeq as TargetSubAccountSeq,
			   FT.DateTimeCreated as DateTimeCreated
		FROM IMS.NMRFunding F 
				INNER JOIN IMS.NMRFundingBank FB ON F.ID = FB.FundingID
					INNER JOIN IMS.NMRFundingTransaction FT ON FB.ID = FT.FundingBankID
						INNER JOIN IMS.NewMemberRequest NMR ON FB.TrackingNum = NMR.TrackingNum
							INNER JOIN @TransactionSummary TS ON FB.ID = TS.FundingBankID
		WHERE	FT.DateTimeLastTransaction IS NULL AND 
				FT.FundingType = 'B' AND 
				F.AccountNumber = @NMRAccountNumber
		)
	)  FRPT	ORDER BY FRPT.NMRTrackingNumber, FRPT.FundingID, FRPT.FundingBankID, FRPT.FundingTransactionID
	END		
END

GO
/****** Object:  StoredProcedure [IMS].[spCalTech_ILAApplicationSearch_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_ILAApplicationSearch_Select
CREATE Procedure [IMS].[spCalTech_ILAApplicationSearch_Select]
	@TrackingNum varchar(9),
	@SSN varchar(9),
	@Account varchar(9),
	@AppNumber varchar(9)
AS

DECLARE @SQL varchar(1000)
SET @SQL = 'SELECT AI.*, A.UserSessionXML FROM ILA_ApplicationInfo AI INNER JOIN ILA_Application A ON A.TrackingNum = AI.TrackingNum WHERE 1=1'
IF @TrackingNum <> '*'
BEGIN
	SET @SQL = @SQL + ' AND AI.TrackingNum = ''' + @TrackingNum + ''''
END
IF @SSN <> '*'
BEGIN
	SET @SQL = @SQL + ' AND AI.PrimarySSN = ''' + @SSN + ''''
END
IF @Account <> '*'
BEGIN
	SET @SQL = @SQL + ' AND AI.Account = ''' + @Account + ''''
END
IF @AppNumber <> '*'
BEGIN
	SET @SQL = @SQL + ' AND AI.AppNumber = ''' + @AppNumber + ''''
END

EXEC(@SQL)
GO
/****** Object:  StoredProcedure [IMS].[spCalTech_OAOReport_ApplicationStatusReport]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_OAOReport_ApplicationStatusReport
CREATE Procedure [IMS].[spCalTech_OAOReport_ApplicationStatusReport]
	@StartDate datetime,
	@StopDate datetime
AS

SELECT
	NMR.TrackingNum
	, UPPER(RTRIM(LEFT(NMR.FName, 1))) + '&nbsp;' + UPPER(RTRIM(NMR.LName)) AS MemberName
	, NMR.ApplyDate AS [Date_Time]
	, NMR.CurrBranch AS Branch
	, CASE
		WHEN NMR.FundingComplete = 'Y' AND ISNULL(NMRFT.DateTimeLastTransaction, '') <> '' THEN '<div style="padding:0; margin:-14px 4px; line-height:1.0;">Funded' + '<br />' + '<span style="font-size:9px;">(' + CONVERT(CHAR(10), NMRFT.DateTimeLastTransaction, 101) + ')</span></div>'
		WHEN NMR.FundingComplete = 'Y' AND ISNULL(NMRFT.DateTimeLastTransaction, '') = '' THEN 'Completed'
		WHEN NMR.Processed = '1' THEN 'In-Process'
		WHEN NMR.Processed = '999' THEN 'Created'
		ELSE 'Denied'
		END AS Status
	, CASE
		WHEN (SELECT COUNT(*) FROM NMRFundingBank AS NMRFB WHERE NMRFB.TrackingNum = NMR.TrackingNum AND NMRFB.VerificationStatus = 'D') > 0 THEN '<div style="padding:0; margin:-14px 4px; line-height:1.0;">ACH' + '<br />' + '<span style="font-size:9px;">(Declined)</span></div>'
		WHEN (SELECT COUNT(*) FROM NMRFundingBank AS NMRFB WHERE NMRFB.TrackingNum = NMR.TrackingNum AND NMRFB.VerificationStatus = 'E') > 0 THEN '<div style="padding:0; margin:-14px 4px; line-height:1.0;">ACH' + '<br />' + '<span style="font-size:9px;">(Error)</span></div>'
		WHEN (SELECT COUNT(*) FROM NMRFundingBank AS NMRFB WHERE NMRFB.TrackingNum = NMR.TrackingNum AND NMRFB.VerificationStatus = 'P') > 0 THEN '<div style="padding:0; margin:-14px 4px; line-height:1.0;">ACH' + '<br />' + '<span style="font-size:9px;">(Pending Export)</span></div>'
		WHEN (SELECT COUNT(*) FROM NMRFundingBank AS NMRFB WHERE NMRFB.TrackingNum = NMR.TrackingNum AND NMRFB.VerificationStatus = 'R') > 0 THEN '<div style="padding:0; margin:-14px 4px; line-height:1.0;">ACH' + '<br />' + '<span style="font-size:9px;">(MA Required)</span></div>'
		WHEN (SELECT COUNT(*) FROM NMRFundingBank AS NMRFB WHERE NMRFB.TrackingNum = NMR.TrackingNum AND NMRFB.VerificationStatus = 'V') > 0 THEN '<div style="padding:0; margin:-14px 4px; line-height:1.0;">ACH' + '<br />' + '<span style="font-size:9px;">(Verified)</span></div>'
		WHEN (SELECT COUNT(*) FROM NMRFundingBank AS NMRFB WHERE NMRFB.TrackingNum = NMR.TrackingNum AND NMRFB.VerificationStatus = 'W') > 0 THEN '<div style="padding:0; margin:-14px 4px; line-height:1.0;">ACH' + '<br />' + '<span style="font-size:9px;">(Pending)</span></div>'
		WHEN (SELECT COUNT(*) FROM NMRFundingBank AS NMRFB WHERE NMRFB.TrackingNum = NMR.TrackingNum AND NMRFB.VerificationStatus = 'X') > 0 THEN '<div style="padding:0; margin:-14px 4px; line-height:1.0;">ACH' + '<br />' + '<span style="font-size:9px;">(Cancelled)</span></div>'
		WHEN (SELECT COUNT(*) FROM NMRFundingCard AS NMRFC WHERE NMRFC.TrackingNum = NMR.TrackingNum) > 0 THEN 'Credit&nbsp;Card'
		WHEN (SELECT COUNT(*) FROM NMRFundingTransaction AS NMRFT WHERE NMRFT.TrackingNum = NMR.TrackingNum AND NMRFT.SourceSubAccountSeq <> '') > 0 THEN 'Transfer'
--		WHEN (SELECT FundingType FROM NMRFundingTransaction AS NMRFT WHERE NMRFT.TrackingNum = NMR.TrackingNum) = NULL THEN 'Skipped'
		WHEN NMR.FundingComplete = 'Y' AND ISNULL(NMRFT.DateTimeLastTransaction, '') = '' THEN 'Skipped'
		ELSE '&nbsp;'
		END AS PaymentMethod
	, (SELECT SUM(Amount) FROM NMRFundingTransaction AS NMRFT WHERE NMRFT.TrackingNum = NMR.TrackingNum GROUP BY NMRFT.TrackingNum) AS InitialAmountFunded
	, NMR.Account AS AccountNumber
FROM IMS.NewMemberRequest NMR
LEFT JOIN NMRFundingBank NMRFB ON NMRFB.TrackingNum = NMR.TrackingNum
LEFT JOIN NMRFundingCard NMRFC ON NMRFC.TrackingNum = NMR.TrackingNum
LEFT JOIN NMRFundingTransaction NMRFT ON NMRFT.TrackingNum = NMR.TrackingNum AND NMRFT.TargetSubAccountSeq = 1
WHERE
	NMR.Processed > 0
	AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> ''
	AND (NMR.ApplyDate >= @StartDate AND NMR.ApplyDate <= @StopDate)
ORDER BY
	[Date_Time] DESC
GO
/****** Object:  StoredProcedure [IMS].[spCalTech_OAOReport_FundingDetailReport]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_OAOReport_FundingDetailReport
CREATE Procedure [IMS].[spCalTech_OAOReport_FundingDetailReport]
	@StartDate datetime,
	@StopDate datetime
AS

SELECT Bank, Card, Existing, Skipped FROM
(
	(SELECT COUNT(DISTINCT NMRFT.TrackingNum) AS Bank
	FROM IMS.NMRFundingTransaction NMRFT
	LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	INNER JOIN IMS.NMRFundingBank NMRFB ON NMRFB.ID = NMRFT.FundingBankID
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND NMRFT.FundingBankID <> '' AND NMR.Processed = 999 AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate) AND (NMRFB.VerificationStatus <> 'E') AND (NMRFB.VerificationStatus <> 'X')) a
		FULL OUTER JOIN
	(SELECT COUNT(DISTINCT NMRFT.TrackingNum) AS Card
	FROM IMS.NMRFundingTransaction NMRFT
	LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND NMRFT.FundingCardID <> '' AND NMR.Processed = 999 AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate)) b ON 1=1
		FULL OUTER JOIN
	(SELECT COUNT(DISTINCT NMRFT.TrackingNum) AS Existing
	FROM IMS.NMRFundingTransaction NMRFT
	LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND NMRFT.SourceSubAccountSeq <> '' AND NMR.Processed = 999 AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate)) c ON 1=1
		FULL OUTER JOIN
	(SELECT COUNT(DISTINCT NMR.TrackingNum) AS Skipped
	FROM IMS.NMRFundingTransaction NMRFT
	FULL OUTER JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND (NMR.Processed = 999 AND ISNULL(NMRFT.TrackingNum, 0) = 0) AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate)) d ON 1=1
)

UNION ALL

SELECT Bank, Card, Existing, Skipped FROM
(
	(SELECT COUNT(DISTINCT NMRFT.TrackingNum) AS Bank
	FROM IMS.NMRFundingTransaction NMRFT
	LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	INNER JOIN IMS.NMRFundingBank NMRFB ON NMRFB.ID = NMRFT.FundingBankID
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND NMRFT.FundingBankID <> '' AND NMR.Processed = 998 AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate) AND (NMRFB.VerificationStatus <> 'E') AND (NMRFB.VerificationStatus <> 'X')) a
		FULL OUTER JOIN
	(SELECT COUNT(DISTINCT NMRFT.TrackingNum) AS Card
	FROM IMS.NMRFundingTransaction NMRFT
	LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND NMRFT.FundingCardID <> '' AND NMR.Processed = 998 AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate)) b ON 1=1
		FULL OUTER JOIN
	(SELECT COUNT(DISTINCT NMRFT.TrackingNum) AS Existing
	FROM IMS.NMRFundingTransaction NMRFT
	LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND NMRFT.SourceSubAccountSeq <> '' AND NMR.Processed = 998 AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate)) c ON 1=1
		FULL OUTER JOIN
	(SELECT COUNT(DISTINCT NMR.TrackingNum) AS Skipped
	FROM IMS.NMRFundingTransaction NMRFT
	FULL OUTER JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND (NMR.Processed = 998 AND ISNULL(NMRFT.TrackingNum, 0) = 0) AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate)) d ON 1=1
)
GO
/****** Object:  StoredProcedure [IMS].[spCalTech_ReviewQueue_SelectAll]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Jon Eagar
-- Create date: 7/08/2011
-- Description:	Lists the active NMR records for the Queue Review
-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_ReviewQueue_SelectAll
-- =============================================
CREATE PROCEDURE [IMS].[spCalTech_ReviewQueue_SelectAll] 
	-- Add the parameters for the stored procedure here
	@StartDate DATETIME = NULL,
	@EndDate DATETIME = NULL,
	@StatusCode VARCHAR(2) = NULL
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
 
	DECLARE @Hierarchy INT
	DECLARE @StatusID INT

	IF @StartDate IS NOT NULL AND @StartDate <> ''
	BEGIN
		SET @StartDate = CONVERT(DATETIME,(CONVERT(VARCHAR(10), @StartDate, 102)))  --Set Time to beginning of Day
		SET @EndDate = CAST( CONVERT(CHAR(10), @EndDate, 101) + ' 11:59 PM' AS DATETIME) --Set Time to end of day
	END
	
	SET @StatusCode = NULLIF(@StatusCode,'')

	DECLARE @ReviewQueue TABLE
	(
		ID INT IDENTITY(1,1) PRIMARY KEY CLUSTERED,
		TrackingNum INT,	
		Name VARCHAR(90),
		EmployerName VARCHAR(120),
		Email VARCHAR(60),
		Account INT,
		StatusName VARCHAR(50),
		StatusID INT,
		FundingComplete CHAR(1), 
		ApplyDate DATETIME,
		Teller CHAR(3),
		LastPage VARCHAR(50),
		Misc VARCHAR(1000),
		TNExpireDate DATETIME
	)

	IF (@StatusCode IS NOT NULL)
	BEGIN
		SELECT @Hierarchy=RQC.Hierarchy, @StatusID=RQC.ID FROM IMS.ReviewQueueConfig RQC WHERE RQC.StatusCode = @StatusCode
	END

	IF (@Hierarchy > 0 OR @StatusCode IS NULL)
	BEGIN
		--IDV DECLINE
		INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Email, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, TNExpireDate)
		SELECT	DISTINCT NMR.TrackingNum, 
				LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
--				RTRIM(LTRIM(NMRW.EmployerName)) AS EmployerName,
				RTRIM(LTRIM(LEFT(NMR.Email1 + '<br>' + 'H&nbsp;' + ISNULL(NMRH.AreaCode, '') + '-' + ISNULL(LEFT(NMRH.Phone, 3), '') + '-' + ISNULL(RIGHT(RTRIM(NMRH.Phone), 4), '') + '<br>' + 'C&nbsp;' + ISNULL(NMRH.CellPhoneAC, '') + '-' + ISNULL(LEFT(NMRH.CellPhone, 3), '') + '-' + ISNULL(RIGHT(RTRIM(NMRH.CellPhone), 4), ''), 120))) AS EmployerName,
				RTRIM(LTRIM(NMR.Email1)) AS Email,
				NMR.Account, 
				RQC.StatusName,
				RQC.ID, 
				NMR.FundingComplete, 
				NMR.ApplyDate,
				(SELECT TOP 1 CompletedBy FROM IMS.ActionLog WHERE TrackingNum = NMR.TrackingNum AND NullIf(CompletedBy, '') IS NOT NULL ORDER BY CompletedDate DESC) AS Seller,
				(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
				NMR.TNExpireDate
		FROM IMS.NewMemberRequest NMR 
				INNER JOIN 
				IMS.NewMemberManualApproval MA 
					ON NMR.TrackingNum = MA.TrackingNum 
						INNER JOIN IMS.ReviewQueueConfig RQC ON RQC.StatusCode = 'ID'
							LEFT JOIN IMS.NewMemberWork NMRW
								ON NMR.TrackingNum = NMRW.TrackingNum
							LEFT JOIN IMS.NewMemberHome NMRH
								ON NMR.TrackingNum = NMRH.TrackingNum
		WHERE NMR.Processed NOT IN (-1, 998, 999) AND (MA.Category = 'ID' AND MA.ApprovalStatus = '') AND (@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate) AND DATALENGTH(NMR.UserSessionXML) > 0  AND NMR.UserSessionXML IS NOT NULL
		
		IF (@Hierarchy > 1 OR @StatusCode IS NULL)
		BEGIN
			--Miscellaneous Decline
			INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Email, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, TNExpireDate)
			SELECT	DISTINCT NMR.TrackingNum, 
					LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
--					RTRIM(LTRIM(NMRW.EmployerName)) AS EmployerName,
					RTRIM(LTRIM(LEFT(NMR.Email1 + '<br>' + 'H&nbsp;' + ISNULL(NMRH.AreaCode, '') + '-' + ISNULL(LEFT(NMRH.Phone, 3), '') + '-' + ISNULL(RIGHT(RTRIM(NMRH.Phone), 4), '') + '<br>' + 'C&nbsp;' + ISNULL(NMRH.CellPhoneAC, '') + '-' + ISNULL(LEFT(NMRH.CellPhone, 3), '') + '-' + ISNULL(RIGHT(RTRIM(NMRH.CellPhone), 4), ''), 120))) AS EmployerName,
					RTRIM(LTRIM(NMR.Email1)) AS Email,
					NMR.Account, 
					RQC.StatusName,
					RQC.ID, 
					NMR.FundingComplete, 
					NMR.ApplyDate,
					(SELECT TOP 1 CompletedBy FROM IMS.ActionLog WHERE TrackingNum = NMR.TrackingNum AND NullIf(CompletedBy, '') IS NOT NULL ORDER BY CompletedDate DESC) AS Seller,
					(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
					NMR.TNExpireDate
			FROM IMS.NewMemberRequest NMR 
					INNER JOIN 
					IMS.NewMemberManualApproval MA 
						ON NMR.TrackingNum = MA.TrackingNum AND MA.JointSequence = 0
							INNER JOIN IMS.ReviewQueueConfig RQC ON RQC.StatusCode = 'MD' AND RQC.ReasonCode = LTRIM(RTRIM(MA.ReasonCode))
								LEFT JOIN IMS.NewMemberWork NMRW
									ON NMR.TrackingNum = NMRW.TrackingNum					
								LEFT JOIN IMS.NewMemberHome NMRH
									ON NMR.TrackingNum = NMRH.TrackingNum
			WHERE NOT EXISTS(SELECT TrackingNum FROM @ReviewQueue RQ Where RQ.TrackingNum = NMR.TrackingNum) AND
				  NMR.Processed NOT IN (-1, 998, 999) AND 
				  (MA.ApprovalStatus = '') AND (@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate)AND DATALENGTH(NMR.UserSessionXML) > 0  AND NMR.UserSessionXML IS NOT NULL

			IF (@Hierarchy > 2 OR @StatusCode IS NULL)
			BEGIN
				--Joint Decline
				INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Email, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, TNExpireDate)
				SELECT	DISTINCT NMR.TrackingNum, 
						LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
--						RTRIM(LTRIM(NMRW.EmployerName)) AS EmployerName,
						RTRIM(LTRIM(LEFT(NMR.Email1 + '<br>' + 'H&nbsp;' + ISNULL(NMRH.AreaCode, '') + '-' + ISNULL(LEFT(NMRH.Phone, 3), '') + '-' + ISNULL(RIGHT(RTRIM(NMRH.Phone), 4), '') + '<br>' + 'C&nbsp;' + ISNULL(NMRH.CellPhoneAC, '') + '-' + ISNULL(LEFT(NMRH.CellPhone, 3), '') + '-' + ISNULL(RIGHT(RTRIM(NMRH.CellPhone), 4), ''), 120))) AS EmployerName,
						RTRIM(LTRIM(NMR.Email1)) AS Email,
						NMR.Account, 
						RQC.StatusName,
						RQC.ID, 
						NMR.FundingComplete, 
						NMR.ApplyDate,
						(SELECT TOP 1 CompletedBy FROM IMS.ActionLog WHERE TrackingNum = NMR.TrackingNum AND NullIf(CompletedBy, '') IS NOT NULL ORDER BY CompletedDate DESC) AS Seller,
						(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
						NMR.TNExpireDate
				FROM IMS.NewMemberRequest NMR 
						INNER JOIN 
						IMS.NewMemberManualApproval MA 
							ON NMR.TrackingNum = MA.TrackingNum AND MA.JointSequence > 0
								INNER JOIN IMS.ReviewQueueConfig RQC ON RQC.StatusCode = 'JD' AND RQC.ReasonCode = LTRIM(RTRIM(MA.ReasonCode))
									LEFT JOIN IMS.NewMemberWork NMRW
										ON NMR.TrackingNum = NMRW.TrackingNum					
									LEFT JOIN IMS.NewMemberHome NMRH
										ON NMR.TrackingNum = NMRH.TrackingNum
				WHERE NOT EXISTS(SELECT TrackingNum FROM @ReviewQueue RQ Where RQ.TrackingNum = NMR.TrackingNum) AND
					  NMR.Processed NOT IN (-1, 998, 999) AND 
					  (MA.ApprovalStatus = '') AND (@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate)AND DATALENGTH(NMR.UserSessionXML) > 0  AND NMR.UserSessionXML IS NOT NULL

				IF (@Hierarchy > 3 OR @StatusCode IS NULL)
				BEGIN
					--Manual Review
					INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Email, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, TNExpireDate)
					SELECT	DISTINCT NMR.TrackingNum, 
							LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
--							RTRIM(LTRIM(NMRW.EmployerName)) AS EmployerName,
							RTRIM(LTRIM(LEFT(NMR.Email1 + '<br>' + 'H&nbsp;' + ISNULL(NMRH.AreaCode, '') + '-' + ISNULL(LEFT(NMRH.Phone, 3), '') + '-' + ISNULL(RIGHT(RTRIM(NMRH.Phone), 4), '') + '<br>' + 'C&nbsp;' + ISNULL(NMRH.CellPhoneAC, '') + '-' + ISNULL(LEFT(NMRH.CellPhone, 3), '') + '-' + ISNULL(RIGHT(RTRIM(NMRH.CellPhone), 4), ''), 120))) AS EmployerName,
							RTRIM(LTRIM(NMR.Email1)) AS Email,
							NMR.Account, 
							RQC.StatusName,
							RQC.ID, 
							NMR.FundingComplete, 
							NMR.ApplyDate,
							(SELECT TOP 1 CompletedBy FROM IMS.ActionLog WHERE TrackingNum = NMR.TrackingNum AND NullIf(CompletedBy, '') IS NOT NULL ORDER BY CompletedDate DESC) AS Seller,
							(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
							NMR.TNExpireDate
					FROM IMS.NewMemberRequest NMR 
							INNER JOIN 
							IMS.NewMemberManualApproval MA 
								ON NMR.TrackingNum = MA.TrackingNum 
									INNER JOIN IMS.ReviewQueueConfig RQC ON RQC.StatusCode = 'MR' AND RQC.ReasonCode = LTRIM(RTRIM(MA.ReasonCode))
										LEFT JOIN IMS.NewMemberWork NMRW
											ON NMR.TrackingNum = NMRW.TrackingNum		
										LEFT JOIN IMS.NewMemberHome NMRH
											ON NMR.TrackingNum = NMRH.TrackingNum
					WHERE NOT EXISTS(SELECT TrackingNum FROM @ReviewQueue RQ Where RQ.TrackingNum = NMR.TrackingNum) AND
						  NMR.Processed NOT IN (-1, 998, 999) AND 
						  (MA.ApprovalStatus = '') AND (@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate) AND DATALENGTH(NMR.UserSessionXML) > 0 AND NMR.UserSessionXML IS NOT NULL

					IF (@Hierarchy > 4 OR @StatusCode IS NULL)
					BEGIN
						--Need Decision/Pending
						INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Email, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, TNExpireDate)
						SELECT	DISTINCT NMR.TrackingNum, 
								LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
--								RTRIM(LTRIM(NMRW.EmployerName)) AS EmployerName,
								RTRIM(LTRIM(LEFT(NMR.Email1 + '<br>' + 'H&nbsp;' + ISNULL(NMRH.AreaCode, '') + '-' + ISNULL(LEFT(NMRH.Phone, 3), '') + '-' + ISNULL(RIGHT(RTRIM(NMRH.Phone), 4), '') + '<br>' + 'C&nbsp;' + ISNULL(NMRH.CellPhoneAC, '') + '-' + ISNULL(LEFT(NMRH.CellPhone, 3), '') + '-' + ISNULL(RIGHT(RTRIM(NMRH.CellPhone), 4), ''), 120))) AS EmployerName,
								RTRIM(LTRIM(NMR.Email1)) AS Email,
								NMR.Account, 
								RQC.StatusName,
								RQC.ID, 
								NMR.FundingComplete, 
								NMR.ApplyDate,
								(SELECT TOP 1 CompletedBy FROM IMS.ActionLog WHERE TrackingNum = NMR.TrackingNum AND NullIf(CompletedBy, '') IS NOT NULL ORDER BY CompletedDate DESC) AS Seller,
								(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
								NMR.TNExpireDate
						FROM IMS.NewMemberRequest NMR  
								INNER JOIN IMS.NewMemberSubAccount SA 
									ON NMR.TrackingNum = SA.TrackingNum
										INNER JOIN IMS.ReviewQueueConfig RQC ON RQC.StatusCode = 'DP'
											LEFT JOIN IMS.NewMemberWork NMRW
												ON NMR.TrackingNum = NMRW.TrackingNum
											LEFT JOIN IMS.NewMemberHome NMRH
												ON NMR.TrackingNum = NMRH.TrackingNum
													LEFT JOIN IMS.NewMemberManualApproval MA 
														ON NMR.TrackingNum = MA.TrackingNum
						WHERE NOT EXISTS(SELECT TrackingNum FROM @ReviewQueue RQ Where RQ.TrackingNum = NMR.TrackingNum) AND
							  NMR.Processed NOT IN (-1, 998, 999) AND 
							  ((SA.Approval <> 'A' AND SA.ApprovedBy = '') OR (MA.ApprovalStatus = '')) AND 
							  (@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate) AND DATALENGTH(NMR.UserSessionXML) > 0 AND NMR.UserSessionXML IS NOT NULL

						IF (@Hierarchy > 5 OR @StatusCode IS NULL)
						BEGIN
							--In Progress
							INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Email, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, TNExpireDate)
							SELECT	DISTINCT NMR.TrackingNum, 
									LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
--									RTRIM(LTRIM(NMRW.EmployerName)) AS EmployerName,
									RTRIM(LTRIM(LEFT(NMR.Email1 + '<br>' + 'H&nbsp;' + ISNULL(NMRH.AreaCode, '') + '-' + ISNULL(LEFT(NMRH.Phone, 3), '') + '-' + ISNULL(RIGHT(RTRIM(NMRH.Phone), 4), '') + '<br>' + 'C&nbsp;' + ISNULL(NMRH.CellPhoneAC, '') + '-' + ISNULL(LEFT(NMRH.CellPhone, 3), '') + '-' + ISNULL(RIGHT(RTRIM(NMRH.CellPhone), 4), ''), 120))) AS EmployerName,
									RTRIM(LTRIM(NMR.Email1)) AS Email,
									NMR.Account, 
									RQC.StatusName,
									RQC.ID, 
									NMR.FundingComplete, 
									NMR.ApplyDate,
									(SELECT TOP 1 CompletedBy FROM IMS.ActionLog WHERE TrackingNum = NMR.TrackingNum AND NullIf(CompletedBy, '') IS NOT NULL ORDER BY CompletedDate DESC) AS Seller,
									(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
									NMR.TNExpireDate
							FROM IMS.NewMemberRequest NMR			
									INNER JOIN IMS.ReviewQueueConfig RQC 
										ON RQC.StatusCode = 'IP'
											LEFT JOIN IMS.NewMemberWork NMRW
												ON NMR.TrackingNum = NMRW.TrackingNum
											LEFT JOIN IMS.NewMemberHome NMRH
												ON NMR.TrackingNum = NMRH.TrackingNum
							WHERE NOT EXISTS(SELECT TrackingNum FROM @ReviewQueue RQ WHERE RQ.TrackingNum = NMR.TrackingNum) AND
								  NMR.Processed = 1 AND 
								  (SELECT COUNT(TrackingNum) FROM IMS.NewMemberManualApproval MA WHERE MA.TrackingNum = NMR.TrackingNum AND MA.ApprovalStatus = '') = 0 AND
								  (SELECT COUNT(TrackingNum) FROM IMS.NewMemberSubAccount SA WHERE SA.TrackingNum = NMR.TrackingNum) = (SELECT COUNT(TrackingNum) FROM IMS.NewMemberSubAccount SA WHERE SA.TrackingNum = NMR.TrackingNum AND (SA.Approval = 'A' OR SA.ApprovedBy <> '')) AND	 
								  (@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate) AND DATALENGTH(NMR.UserSessionXML) > 0 AND NMR.UserSessionXML IS NOT NULL

							IF (@Hierarchy > 6 OR @StatusCode IS NULL)
							BEGIN
								--Not Funded
								INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Email, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, Misc, TNExpireDate)
								SELECT	DISTINCT NMR.TrackingNum, 
										LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
--										RTRIM(LTRIM(NMRW.EmployerName)) AS EmployerName,
										RTRIM(LTRIM(LEFT(NMR.Email1 + '<br>' + 'H&nbsp;' + ISNULL(NMRH.AreaCode, '') + '-' + ISNULL(LEFT(NMRH.Phone, 3), '') + '-' + ISNULL(RIGHT(RTRIM(NMRH.Phone), 4), '') + '<br>' + 'C&nbsp;' + ISNULL(NMRH.CellPhoneAC, '') + '-' + ISNULL(LEFT(NMRH.CellPhone, 3), '') + '-' + ISNULL(RIGHT(RTRIM(NMRH.CellPhone), 4), ''), 120))) AS EmployerName,
										RTRIM(LTRIM(NMR.Email1)) AS Email,
										NMR.Account, 
										RQC.StatusName,
										RQC.ID, 
										NMR.FundingComplete, 
										NMR.ApplyDate,
										(SELECT TOP 1 CompletedBy FROM IMS.ActionLog WHERE TrackingNum = NMR.TrackingNum AND NullIf(CompletedBy, '') IS NOT NULL ORDER BY CompletedDate DESC) AS Seller,
										(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
										'<b>CIT:</b>' + NMR.Citizenship AS Misc,
										NMR.TNExpireDate
								FROM IMS.NewMemberRequest NMR
									INNER JOIN IMS.ReviewQueueConfig RQC 
										ON RQC.StatusCode = 'NF'
											LEFT JOIN IMS.NewMemberWork NMRW
												ON NMR.TrackingNum = NMRW.TrackingNum
											LEFT JOIN IMS.NewMemberHome NMRH
												ON NMR.TrackingNum = NMRH.TrackingNum
								WHERE NOT EXISTS(SELECT TrackingNum FROM @ReviewQueue RQ WHERE RQ.TrackingNum = NMR.TrackingNum) AND
									  NMR.Processed = 999 AND 
									  IsNull(FundingComplete, 'N') <> 'Y' AND
									  (@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate) AND DATALENGTH(NMR.UserSessionXML) > 0 AND NMR.UserSessionXML IS NOT NULL

							END
						END
					END	  
				END
			END
		END
		SELECT 
		TrackingNum as TrackingNumber,
		REPLACE(Name, ' ', '&nbsp;') AS Name,
		EmployerName,
		Email,
		Account,
		StatusName,
		CASE WHEN FundingComplete <> 'Y' THEN 'N' ELSE 'Y' END as FundingComplete,
		ApplyDate,
		Teller,
		LastPage,
		Misc,
		TNExpireDate,
		(
			SELECT COUNT(*)
			FROM IMS.SecureMailThread SMT
			LEFT JOIN IMS.SecureMailAttachment SMA ON SMA.ThreadId = SMT.ThreadId
			WHERE SMT.TrackingNum = RQ.TrackingNum AND SMA.Status = 'U'
		) AS AttachU,
		(
			SELECT COUNT(*)
			FROM IMS.SecureMailThread SMT
			LEFT JOIN IMS.SecureMailAttachment SMA ON SMA.ThreadId = SMT.ThreadId
			WHERE SMT.TrackingNum = RQ.TrackingNum AND SMA.Status = 'V'
		) AS AttachV,
		(
			SELECT COUNT(*)
			FROM IMS.SecureMailThread SMT
			LEFT JOIN IMS.SecureMailAttachment SMA ON SMA.ThreadId = SMT.ThreadId
			WHERE SMT.TrackingNum = RQ.TrackingNum AND SMA.Status = 'Q'
		) AS AttachQU,
		(
			SELECT COUNT(*)
			FROM IMS.SecureMailThread SMT
			LEFT JOIN IMS.SecureMailAttachment SMA ON SMA.ThreadId = SMT.ThreadId
			WHERE SMT.TrackingNum = RQ.TrackingNum AND SMA.Status = 'QV'
		) AS AttachQV
		FROM @ReviewQueue RQ 
		WHERE RQ.StatusID = @StatusID OR @StatusID IS NULL order by TrackingNum		
	END
END
GO
/****** Object:  StoredProcedure [IMS].[spCalTech_SignOnOAO]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.SignOnOAO 
CREATE Procedure [IMS].[spCalTech_SignOnOAO]
@TrackingNum int,
@Password varchar(24),
@SSN varchar(9),
@DOB datetime
AS
BEGIN
	SELECT
		n.TrackingNum, 
		ISNULL(CAST(n.Account AS VARCHAR(50)),'') AS Account, 
		n.UserSessionXML, 
		n.AccountType, 
		n.Created, 
		n.Processed, 
		n.TNExpireDate, 
		e.BadLoginAttempts
	FROM IMS.NewMemberRequest n
	JOIN IMS.NewMemberRequestExtra e ON n.TrackingNum = e.TrackingNum
	WHERE 
		n.TrackingNum = @TrackingNum 
		AND (
			(
				(n.Password = @Password COLLATE SQL_Latin1_General_CP1_CS_AS) 
				OR (
					n.SSN = @SSN 
					AND n.DOB = @DOB
				)
			) 
			AND n.Processed <> '998' 
			OR (@Password = 'MoDESTaFF')
		)
-- NOTE: The "COLLATE SQL_Latin1_General_CP1_CS_AS" above makes the password search case sensitive.
END
GO
/****** Object:  StoredProcedure [IMS].[spCalTech_SyncCarts]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_SyncCarts
CREATE PROCEDURE [IMS].[spCalTech_SyncCarts]
@TrackingNum int,
@SyncMode varchar(1)
AS

IF @SyncMode = 'S' OR @SyncMode = 'B' OR @SyncMode = 'Y'
BEGIN
	--Delete from cart where subaccount record no longer exists
	DELETE FROM IMS.NewMemberShoppingCart
	WHERE TrackingNum = @TrackingNum AND SubAccountID IS NOT NULL AND
		SubAccountID NOT IN (SELECT ID FROM IMS.NewMemberSubAccount
					WHERE TrackingNum = @TrackingNum)
END

IF @SyncMode = 'C' OR @SyncMode = 'B' OR @SyncMode = 'Y'
BEGIN
	--Delete from subaccounts where cart record no longer exists
	DELETE FROM IMS.NewMemberSubAccount
	WHERE TrackingNum = @TrackingNum AND ShoppingCartID IS NOT NULL AND
		ShoppingCartID NOT IN (SELECT ID FROM IMS.NewMemberShoppingCart
					WHERE TrackingNum = @TrackingNum)
END

IF @SyncMode = 'S' OR @SyncMode = 'B' OR @SyncMode = 'Y'
BEGIN
	--Update cart items with changes in the subaccount records
	UPDATE IMS.NewMemberShoppingCart
	SET RequestedAmount = (SELECT Amount FROM IMS.NewMemberSubAccount
				WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberShoppingCart.SubAccountID),
		InsuranceAmount1 = NULL,
		InsuranceAmount2 = NULL
	WHERE TrackingNum = @TrackingNum AND
		SubAccountID IN (SELECT ID FROM IMS.NewMemberSubAccount WHERE TrackingNum = @TrackingNum) AND
		IsNull((SELECT LineOfCredit FROM IMS.udt_LSubAccounts WHERE UniqueID = IMS.NewMemberShoppingCart.ProductID), 'N') = 'N' AND
		(SELECT Amount FROM IMS.NewMemberSubAccount WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberShoppingCart.SubAccountID) <> IMS.NewMemberShoppingCart.RequestedAmount + IsNull(IMS.NewMemberShoppingCart.InsuranceAmount1, 0) + IsNull(IMS.NewMemberShoppingCart.InsuranceAmount2, 0)

	UPDATE IMS.NewMemberShoppingCart
	SET RequestedAmount = (SELECT CreditLimit FROM IMS.NewMemberSubAccount
				WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberShoppingCart.SubAccountID),
		InsuranceAmount1 = NULL,
		InsuranceAmount2 = NULL
	WHERE TrackingNum = @TrackingNum AND
		SubAccountID IN (SELECT ID FROM IMS.NewMemberSubAccount WHERE TrackingNum = @TrackingNum) AND
		(SELECT LineOfCredit FROM IMS.udt_LSubAccounts WHERE UniqueID = IMS.NewMemberShoppingCart.ProductID) = 'Y' AND
		(SELECT CreditLimit FROM IMS.NewMemberSubAccount WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberShoppingCart.SubAccountID) <> IMS.NewMemberShoppingCart.RequestedAmount + IsNull(IMS.NewMemberShoppingCart.InsuranceAmount1, 0) + IsNull(IMS.NewMemberShoppingCart.InsuranceAmount2, 0)

	UPDATE IMS.NewMemberShoppingCart
	SET Term = (SELECT Term FROM IMS.NewMemberSubAccount
				WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberShoppingCart.SubAccountID)
	WHERE TrackingNum = @TrackingNum AND
		SubAccountID IN (SELECT ID FROM IMS.NewMemberSubAccount WHERE TrackingNum = @TrackingNum)

	--Create cart items for new subaccount records
	INSERT INTO IMS.NewMemberShoppingCart
	(ProductID, ProductName, YesNoMaybe, SLType, Approved, TrackingNum, MasterCategoryID, CategoryID,
	Exclude, CreatedBy, CreatedOn, Created, Fulfill, LOSProductID, LOSID,
	ApprovedAmount, RequestedAmount, Requires, LoanType, LoanSubType, Term, InsCode, ClosedFlag, LossFlag, SubAccountID)
	SELECT STP.ProductID, STP.ProductDesc, 'YES', STP.SLType, 'Y', @TrackingNum AS TrackingNum, STP.MasterCategoryID, STP.CategoryID,
		Prod.Exclude, SA.CreatedBy, SA.CreatedOn, SA.Created, STP.Fulfill, STP.LOSProductID, SA.LOSID,
		CASE WHEN Prod.LineOfCredit = 'Y' THEN SA.CreditLimit
		     ELSE SA.Amount
		END AS ApprovedAmount,
		CASE WHEN Prod.LineOfCredit = 'Y' THEN SA.CreditLimit
		     ELSE SA.Amount
		END AS RequestedAmount,
		STP.Requires, STP.LoanType, STP.LoanSubType, SA.Term, SA.InsCode, SA.ClosedFlag, SA.LossFlag, SA.ID AS SubAccountID
	FROM IMS.udt_SalesToolProducts STP INNER JOIN
		IMS.NewMemberSubAccount SA ON SA.SubAccountType = STP.ProductID INNER JOIN
		IMS.NewMemberRequest NMR ON SA.TrackingNum = NMR.TrackingNum INNER JOIN
		IMS.udt_AllSubAccounts Prod ON STP.ProductID = Prod.UniqueID AND ',' + RTrim(Prod.AccountTypes) + ',' LIKE '%,' + RTrim(NMR.AccountType) + ',%'
	WHERE SA.TrackingNum = @TrackingNum AND SA.SubAccountType NOT IN (SELECT ProductID FROM IMS.NewMemberShoppingCart WHERE TrackingNum = @TrackingNum)
	
	--Delete products that require products that are no longer here
	DELETE FROM IMS.NewMemberShoppingCart
	WHERE TrackingNum = @TrackingNum AND NullIf(Requires, '') IS NOT NULL AND
		(SELECT Count(SC2.ID) FROM IMS.NewMemberShoppingCart SC2 INNER JOIN
			(SELECT DISTINCT
			        SUBSTRING(l.List, v.Number+1, CHARINDEX(',', l.List, v.Number+1) -v.Number-1) AS Requires
			   FROM Master.dbo.spt_Values v
			  CROSS JOIN
			        (SELECT ',' + RTRIM(REPLACE(Requires, ', ', ',')) + ',' AS List
				FROM IMS.NewMemberShoppingCart
				WHERE TrackingNum = @TrackingNum AND ProductID = IMS.NewMemberShoppingCart.ProductID) l
			  WHERE v.Type = 'P'
			    AND v.Number BETWEEN 1 AND LEN(l.List)-1
			    AND SUBSTRING(l.List, v.Number, 1)=',') FN ON SC2.ProductID = FN.Requires
			WHERE TrackingNum = @TrackingNum AND SC2.ProductID <> IMS.NewMemberShoppingCart.ProductID) = 0
END

IF @SyncMode = 'C' OR @SyncMode = 'B' OR @SyncMode = 'Y'
BEGIN
	--Update subaccounts with changes in the cart records
	UPDATE IMS.NewMemberSubAccount
	SET Amount = (SELECT RequestedAmount + IsNull(InsuranceAmount1, 0) + IsNull(InsuranceAmount2, 0) FROM IMS.NewMemberShoppingCart
				WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberSubAccount.ShoppingCartID)
	WHERE TrackingNum = @TrackingNum AND
		ShoppingCartID IN (SELECT ID FROM IMS.NewMemberShoppingCart WHERE TrackingNum = @TrackingNum) AND
		IsNull((SELECT LineOfCredit FROM IMS.udt_LSubAccounts WHERE UniqueID = IMS.NewMemberSubAccount.SubAccountType), 'N') = 'N' AND
		(SELECT RequestedAmount + IsNull(InsuranceAmount1, 0) + IsNull(InsuranceAmount2, 0) FROM IMS.NewMemberShoppingCart WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberSubAccount.ShoppingCartID) <> IMS.NewMemberSubAccount.Amount

	UPDATE IMS.NewMemberSubAccount
	SET CreditLimit = (SELECT RequestedAmount + IsNull(InsuranceAmount1, 0) + IsNull(InsuranceAmount2, 0) FROM IMS.NewMemberShoppingCart
				WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberSubAccount.ShoppingCartID)
	WHERE TrackingNum = @TrackingNum AND
		ShoppingCartID IN (SELECT ID FROM IMS.NewMemberShoppingCart WHERE TrackingNum = @TrackingNum) AND
		(SELECT LineOfCredit FROM IMS.udt_LSubAccounts WHERE UniqueID = IMS.NewMemberSubAccount.SubAccountType) = 'Y' AND
		(SELECT RequestedAmount + IsNull(InsuranceAmount1, 0) + IsNull(InsuranceAmount2, 0) FROM IMS.NewMemberShoppingCart WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberSubAccount.ShoppingCartID) <> IMS.NewMemberSubAccount.CreditLimit

	UPDATE IMS.NewMemberSubAccount
	SET Term = (SELECT Term FROM IMS.NewMemberShoppingCart
				WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberSubAccount.ShoppingCartID)
	WHERE TrackingNum = @TrackingNum AND
		ShoppingCartID IN (SELECT ID FROM IMS.NewMemberShoppingCart WHERE TrackingNum = @TrackingNum)

	--Create subaccount records for new cart items
	INSERT INTO IMS.NewMemberSubAccount
	(TrackingNum, Sequence, DescAbrv, SubAccountType, Description, ACC, CollateralCode, SLType, Amount,
	Approval, Created, CreatedBy, CreatedOn, ProductType,
	CreditLimit, StartSuffix, StopSuffix, APR, CashAdvanceAPR, SkipCode, Coupons, Term, Method,
	Frequency, InsCode, DisclosureCode, ReviewDate, MaturityDate, Officer, CurrBranch, StatementOrder, MaturityDisp, 
	DividendDisp, LineofCredit, PaymentPercent, AllowPlastic1, AllowPlastic2, AllowPlastic3, AllowPlastic4, 
	CreateHost, HostCommand, ServiceClass, TaxCode, JointTaxCode, W8TaxCode, KTransferLink, LoanDiscounts, 
	MICRBegin, MICREnd, MICRFormat, PromptMICR, Purpose, FundingOrder, VRLIndex, VRLMargin, 
	VRLCode, VRLFreq, LOSProductID, LOSID, LossFlag, ClosedFlag, ShoppingCartID, Action, Payment)
	SELECT @TrackingNum AS TrackingNum, (SELECT Count(ID) FROM IMS.NewMemberShoppingCart SC2 WHERE TrackingNum = @TrackingNum AND SC2.Approved = 'Y' AND 
		SC2.ProductID NOT IN (SELECT SubAccountType FROM IMS.NewMemberSubAccount SA2 WHERE TrackingNum = @TrackingNum) AND SC2.ID <= SC.ID) + 
		(SELECT IsNull(Max(Sequence), 0) FROM IMS.NewMemberSubAccount SA3 WHERE TrackingNum = @TrackingNum) AS Sequence,
	Prod.DescAbrv, Prod.UniqueID, Prod.Description, Prod.ACC, Prod.CollateralCode, Prod.SLType,
	CASE WHEN Prod.LineOfCredit = 'Y' THEN 0
	     ELSE SC.RequestedAmount + IsNull(SC.InsuranceAmount1, 0) + IsNull(SC.InsuranceAmount2, 0)
	END AS Amount, NMR.Approval, SC.Created, SC.CreatedBy, SC.CreatedOn, Prod.ProductType,
	CASE WHEN Prod.LineOfCredit = 'Y' THEN SC.RequestedAmount
	     ELSE 0
	END AS CreditLimit, Prod.StartSuffix, Prod.StopSuffix, Prod.APR, Prod.CashAdvanceAPR, Prod.SkipCode, Prod.Coupons, Prod.Term, Prod.Method,
	Prod.Frequency, Prod.InsCode, Prod.DisclosureCode, Prod.ReviewDate, Prod.MaturityDate, Prod.Officer, Prod.CurrBranch, Prod.StatementOrder, Prod.MaturityDisp, 
	Prod.DividendDisp, Prod.LineofCredit, Prod.PaymentPercent, Prod.AllowPlastic1, Prod.AllowPlastic2, Prod.AllowPlastic3, Prod.AllowPlastic4, 
	Prod.CreateHost, Prod.HostCommand, Prod.ServiceClass, Prod.TaxCode,Prod.JointTaxCode, Prod.W8TaxCode, Prod.KTransferLink, Prod.LoanDiscounts, 
	Prod.MICRBegin, Prod.MICREnd, Prod.MICRFormat, Prod.PromptMICR, Prod.Purpose, Prod.FundingOrder, Prod.VRLIndex, Prod.VRLMargin, 
	Prod.VRLCode, Prod.VRLFreq, SC.LOSProductID, SC.LOSID, SC.LossFlag, SC.ClosedFlag, SC.ID AS ShoppingCartID, Prod.Action, 0
	FROM IMS.NewMemberShoppingCart SC INNER JOIN
		IMS.NewMemberRequest NMR ON SC.TrackingNum = NMR.TrackingNum INNER JOIN
		IMS.udt_AllSubAccounts Prod ON SC.ProductID = Prod.UniqueID AND ',' + RTrim(Prod.AccountTypes) + ',' LIKE '%,' + RTrim(NMR.AccountType) + ',%'
	WHERE SC.TrackingNum = @TrackingNum AND SC.Approved = 'Y' AND SC.ProductID NOT IN (SELECT SubAccountType FROM IMS.NewMemberSubAccount WHERE TrackingNum = @TrackingNum)
	ORDER BY ID
	
	--Delete products that require products that are no longer here
	DELETE NewMemberSubAccount FROM IMS.NewMemberSubAccount SA
	WHERE TrackingNum = @TrackingNum AND
		(SELECT NullIf(Requires, '') FROM IMS.udt_AllSubAccounts WHERE UniqueID = SA.SubAccountType) IS NOT NULL AND
		(SELECT Count(SA2.ID) FROM IMS.NewMemberSubAccount SA2 INNER JOIN
			(SELECT DISTINCT
			        SUBSTRING(l.List, v.Number+1, CHARINDEX(',', l.List, v.Number+1) -v.Number-1) AS Requires
			   FROM Master.dbo.spt_Values v
			  CROSS JOIN
			        (SELECT ',' + RTRIM(REPLACE(Requires, ', ', ',')) + ',' AS List
				FROM IMS.udt_AllSubAccounts
				WHERE UniqueID = SA.SubAccountType) l
			  WHERE v.Type = 'P'
			    AND v.Number BETWEEN 1 AND LEN(l.List)-1
			    AND SUBSTRING(l.List, v.Number, 1)=',') FN ON SA2.SubAccountType = FN.Requires
			WHERE TrackingNum = @TrackingNum AND SA2.SubAccountType <> SA.SubAccountType) = 0

	--Delete subaccounts that came from shopping cart items that are no longer approved
	DELETE FROM IMS.NewMemberSubAccount
	WHERE TrackingNum = @TrackingNum AND ((ID IN (SELECT SubAccountID
		FROM IMS.NewMemberShoppingCart
		WHERE TrackingNum = @TrackingNum AND SubAccountID IS NOT NULL AND
			Approved = 'N')) OR (ShoppingCartID IS NOT NULL AND 
		ShoppingCartID IN (SELECT ID
		FROM IMS.NewMemberShoppingCart
		WHERE TrackingNum = @TrackingNum AND Approved = 'N')))

	UPDATE IMS.NewMemberShoppingCart
	SET SubAccountID = NULL
	WHERE TrackingNum = @TrackingNum AND Approved = 'N'

	--Delete plastic cards for subaccounts that no longer exist
	DELETE FROM IMS.NewMemberPlasticCard
	WHERE TrackingNum = @TrackingNum AND Sequence IN (SELECT PlasticCardSequence
		FROM IMS.NewMemberSubAccountLink
		WHERE TrackingNum = @TrackingNum AND SubSequence NOT IN (SELECT Sequence
			FROM IMS.NewMemberSubAccount
			WHERE TrackingNum = @TrackingNum))

	DELETE FROM IMS.NewMemberSubAccountLink
	WHERE TrackingNum = @TrackingNum AND SubSequence NOT IN (SELECT Sequence
		FROM IMS.NewMemberSubAccount
		WHERE TrackingNum = @TrackingNum)

	--Delete flags for subaccounts that no longer exist
	DELETE FROM IMS.NewMemberFlag
	WHERE TrackingNum = @TrackingNum AND IsNull(SubAccountSequence, 0) > 0 AND
		SubAccountSequence NOT IN (SELECT Sequence
		FROM IMS.NewMemberSubAccount
		WHERE TrackingNum = @TrackingNum)

	--Delete joint owner links for subaccounts that no longer exist
	DELETE FROM IMS.NewMemberJointLink
	WHERE TrackingNum = @TrackingNum AND SubAccountSequence NOT IN (SELECT Sequence
		FROM IMS.NewMemberSubAccount
		WHERE TrackingNum = @TrackingNum)

	--Delete overdraft links for subaccount that no longer exist
	DELETE FROM IMS.NewMemberOverdraftLink
	WHERE TrackingNum = @TrackingNum AND ((TargetSubAccount > 0 AND
		TargetSubAccount NOT IN (SELECT Sequence
		FROM IMS.NewMemberSubAccount
		WHERE TrackingNum = @TrackingNum)) OR (SourceSubAccount > 0 AND
		SourceSubAccount NOT IN (SELECT Sequence
		FROM IMS.NewMemberSubAccount
		WHERE TrackingNum = @TrackingNum)))
END

--Synchronize IDs
UPDATE IMS.NewMemberSubAccount
SET ShoppingCartID = (SELECT ID FROM IMS.NewMemberShoppingCart
			WHERE TrackingNum = @TrackingNum AND SubAccountID = IMS.NewMemberSubAccount.ID)
WHERE TrackingNum = @TrackingNum AND (SELECT ID FROM IMS.NewMemberShoppingCart
			WHERE TrackingNum = @TrackingNum AND SubAccountID = IMS.NewMemberSubAccount.ID) IS NOT NULL

UPDATE IMS.NewMemberShoppingCart
SET SubAccountID = (SELECT ID FROM IMS.NewMemberSubAccount
			WHERE TrackingNum = @TrackingNum AND ShoppingCartID = IMS.NewMemberShoppingCart.ID)
WHERE TrackingNum = @TrackingNum AND (SELECT ID FROM IMS.NewMemberSubAccount
			WHERE TrackingNum = @TrackingNum AND ShoppingCartID = IMS.NewMemberShoppingCart.ID) IS NOT NULL
GO
/****** Object:  StoredProcedure [IMS].[spCalTech_UnreconciledFunding_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		Jonathan Eagar
-- Create date: 5/08/2009
-- Description:	Returns all unreconciled transactions
-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_UnreconciledFunding_Select
-- =============================================
CREATE PROCEDURE [IMS].[spCalTech_UnreconciledFunding_Select] 
	-- Add the parameters for the stored procedure here
	@AccountNumber bigint
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
    -- Insert statements for procedure here
     -- Insert statements for procedure here
    IF ISNULL(@AccountNumber, 0) = 0  
    BEGIN
		SELECT	FS.AccountNumber, 
				FS.FundingTransactionID, 
				FS.TrackingNum, 
				FS.GatewayPaymentID, 
				FS.GatewayPaymentStatus, 
				FS.FundingAccountID, 
				FS.FundingType, 
				FS.TargetSubAccountSeq, 
				FS.TargetSubAccountSuffix, 
				FS.TransferAmount, 
				FS.DateTimeCreated, 
				FS.DateTimeLastTransaction,
				FS.MemberName,
				FS.SourceBankName,
				FS.SourceBankRouting,
				FS.SourceAccountLast4,
				FS.SourceCardType
		FROM
		(
			SELECT	VF.AccountNumber, 
					VF.FundingTransactionID , 
					VF.TrackingNum, 
					VF.GatewayPaymentID, 
					PS.PaymentStatus as GatewayPaymentStatus, 
					VF.FundingAccountID, 
					VF.FundingType, 
					VF.TargetSubAccountSeq, 
					VF.TargetSubAccountSuffix, 
					VF.TransferAmount, 
					VF.DateTimeCreated, 
					VF.DateTimeLastTransaction,
					VF.MemberName,
					VF.SourceBankName,
					VF.SourceBankRouting,
					VF.SourceAccountLast4,
					VF.SourceCardType
			FROM
			(	
				(
					SELECT	F.AccountNumber, 
							FT.ID as FundingTransactionID, 
							FT.TrackingNum, 
							FT.GatewayPaymentID, 
							FB.ID as FundingAccountID, 
							FT.FundingType, 
							FT.TargetSubAccountSeq,	
							FT.TargetSubAccountSuffix, 
							FT.Amount as TransferAmount, 
							FT.DateTimeCreated, 
							FT.DateTimeLastTransaction,
							NMR.FName + ' ' + NMR.LName as MemberName,
							FB.BankName as SourceBankName,
							FB.RoutingNumber as SourceBankRouting,
							FB.AccountNumberLast4 as SourceAccountLast4,
							'' as SourceCardType
					FROM IMS.NewMemberRequest as NMR 
					INNER JOIN IMS.NMRFundingTransaction AS FT ON NMR.TrackingNum = FT.TrackingNum
					INNER JOIN IMS.NMRFundingBank AS FB ON FT.FundingBankID = FB.ID 
					INNER JOIN IMS.NMRFunding as F ON F.ID = FB.FundingID 
					WHERE FT.DateTimeReconciled IS NULL
				)
				UNION ALL
				(
					SELECT F.AccountNumber, 
					FT.ID as FundingTransactionID, 
					FT.TrackingNum, 
					FT.GatewayPaymentID, 
					FC.ID as FundingAccountID, 
					FT.FundingType, 
					FT.TargetSubAccountSeq,	
					FT.TargetSubAccountSuffix, 
					FT.Amount as TransferAmount, 
					FT.DateTimeCreated, 
					FT.DateTimeLastTransaction,
					NMR.FName + ' ' + NMR.LName as MemberName,
					'' as SourceBankName,
					'' as SourceBankRouting,
					FC.AccountNumberLast4 as SourceAccountLast4,
					FC.CardType as SourceCardType
					FROM IMS.NewMemberRequest as NMR 
					INNER JOIN IMS.NMRFundingTransaction AS FT ON NMR.TrackingNum = FT.TrackingNum
					INNER JOIN IMS.NMRFundingCard AS FC ON FT.FundingCardID = FC.ID 
					INNER JOIN IMS.NMRFunding as F ON F.ID = FC.FundingID 
					WHERE FT.DateTimeReconciled IS NULL
				)
			)AS VF LEFT OUTER JOIN IMS.USAePayPaymentStatus AS PS ON VF.GatewayPaymentID = PS.PaymentId
		) AS FS	ORDER BY DateTimeCreated
    END		
    ELSE
	BEGIN    
		SELECT	FS.AccountNumber, 
				FS.FundingTransactionID, 
				FS.TrackingNum, 
				FS.GatewayPaymentID, 
				FS.GatewayPaymentStatus, 
				FS.FundingAccountID, 
				FS.FundingType, 
				FS.TargetSubAccountSeq, 
				FS.TargetSubAccountSuffix, 
				FS.TransferAmount, 
				FS.DateTimeCreated, 
				FS.DateTimeLastTransaction,
				FS.MemberName,
				FS.SourceBankName,
				FS.SourceBankRouting,
				FS.SourceAccountLast4,
				FS.SourceCardType
		FROM
		(
			SELECT	VF.AccountNumber, 
					VF.FundingTransactionID, 
					VF.TrackingNum, 
					VF.GatewayPaymentID, 
					PS.PaymentStatus as GatewayPaymentStatus, 
					VF.FundingAccountID, 
					VF.FundingType, 
					VF.TargetSubAccountSeq, 
					VF.TargetSubAccountSuffix, 
					VF.TransferAmount, 
					VF.DateTimeCreated, 
					VF.DateTimeLastTransaction,
					VF.MemberName,
					VF.SourceBankName,
					VF.SourceBankRouting,
					VF.SourceAccountLast4,
					VF.SourceCardType
			FROM
			(	
				(
					SELECT	F.AccountNumber, 
							FT.ID as FundingTransactionID, 
							FT.TrackingNum, 
							FT.GatewayPaymentID, 
							FB.ID as FundingAccountID, 
							FT.FundingType, 
							FT.TargetSubAccountSeq,	
							FT.TargetSubAccountSuffix, 
							FT.Amount as TransferAmount, 
							FT.DateTimeCreated, 
							FT.DateTimeLastTransaction,
							NMR.FName + ' ' + NMR.LName as MemberName,
							FB.BankName as SourceBankName,
							FB.RoutingNumber as SourceBankRouting,
							FB.AccountNumberLast4 as SourceAccountLast4,
							'' as SourceCardType
					FROM IMS.NewMemberRequest as NMR 
					INNER JOIN IMS.NMRFundingTransaction AS FT ON NMR.TrackingNum = FT.TrackingNum
					INNER JOIN IMS.NMRFundingBank AS FB ON FT.FundingBankID = FB.ID 
					INNER JOIN IMS.NMRFunding as F ON F.ID = FB.FundingID 
					WHERE F.AccountNumber = @AccountNumber AND FT.DateTimeReconciled IS NULL
				)
				UNION ALL
				(
					SELECT	F.AccountNumber, 
							FT.ID as FundingTransactionID, 
							FT.TrackingNum, FT.GatewayPaymentID, 
							FC.ID as FundingAccountID, 
							FT.FundingType, 
							FT.TargetSubAccountSeq,	
							FT.TargetSubAccountSuffix, 
							FT.Amount as TransferAmount, 
							FT.DateTimeCreated, 
							FT.DateTimeLastTransaction,
							NMR.FName + ' ' + NMR.LName as MemberName,
							'' as SourceBankName,
							'' as SourceBankRouting,
							FC.AccountNumberLast4 as SourceAccountLast4,
							FC.CardType as SourceCardType
					FROM IMS.NewMemberRequest as NMR 
					INNER JOIN IMS.NMRFundingTransaction AS FT ON NMR.TrackingNum = FT.TrackingNum
					INNER JOIN IMS.NMRFundingCard AS FC ON FT.FundingCardID = FC.ID 
					INNER JOIN IMS.NMRFunding as F ON F.ID = FC.FundingID 
					WHERE F.AccountNumber = @AccountNumber AND FT.DateTimeReconciled IS NULL
				)
			)AS VF LEFT OUTER JOIN IMS.USAePayPaymentStatus AS PS ON VF.GatewayPaymentID = PS.PaymentId
		) AS FS	ORDER BY DateTimeCreated
    END		
END

GO
/****** Object:  StoredProcedure [IMS].[spCalTech_UnreconciledVerification_Select]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_UnreconciledVerification_Select
CREATE PROCEDURE [IMS].[spCalTech_UnreconciledVerification_Select]
	-- Add the parameters for the stored procedure here
	@AccountNumber bigint
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
    IF ISNULL(@AccountNumber, 0) = 0  
    BEGIN
		SELECT      NMRFunding.AccountNumber, NMRFundingBank.ID as FundingBankID, IMS.fnCalTech_GetUSAePayPaymentStatus(NMRFundingBank.GatewayPaymentID1) as GatewayPaymentStatus1, IMS.fnCalTech_GetUSAePayPaymentStatus(NMRFundingBank.GatewayPaymentID2) as GatewayPaymentStatus2, NMRFundingBank.TrackingNum, NMRFundingBank.AccountNumberLast4, 
						  NMRFundingBank.BankName, NMRFundingBank.AccountType, NMRFundingBank.Amount1, NMRFundingBank.Amount2, 
						  NMRFundingBank.PSIErrorMessage, NMRFundingBank.DateTimeCreated, NMRFundingBank.DateTimeExported, NMRFundingBank.DateTimeLastTransaction
		FROM         NMRFundingBank INNER JOIN
						  NMRFunding ON NMRFundingBank.FundingID = NMRFunding.ID
		WHERE     (NMRFundingBank.DateTimeVerificationReconciled IS NULL AND NMRFundingBank.VerificationStatus = 'V')
    END
    ELSE
	BEGIN    
		SELECT      NMRFunding.AccountNumber, NMRFundingBank.ID as FundingBankID, IMS.fnCalTech_GetUSAePayPaymentStatus(NMRFundingBank.GatewayPaymentID1) as GatewayPaymentStatus1, IMS.fnCalTech_GetUSAePayPaymentStatus(NMRFundingBank.GatewayPaymentID2) as GatewayPaymentStatus2, NMRFundingBank.TrackingNum, NMRFundingBank.AccountNumberLast4, 
						  NMRFundingBank.BankName, NMRFundingBank.AccountType, NMRFundingBank.Amount1, NMRFundingBank.Amount2, 
						  NMRFundingBank.PSIErrorMessage, NMRFundingBank.DateTimeCreated, NMRFundingBank.DateTimeExported, NMRFundingBank.DateTimeLastTransaction
		FROM         NMRFundingBank INNER JOIN
						  NMRFunding ON NMRFundingBank.FundingID = NMRFunding.ID
		WHERE     (NMRFunding.AccountNumber = @AccountNumber AND DateTimeVerificationReconciled IS NULL AND NMRFundingBank.VerificationStatus = 'V')       
    END	
END


GO
/****** Object:  StoredProcedure [IMS].[spCCCU_D10Enable]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO


CREATE PROCEDURE [IMS].[spCCCU_D10Enable] @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
--Declare @TrackingNum int
--DROP TABLE #docs
--DEALLOCATE curs
--Set @TrackingNum = 1477

Declare @docsubname char(100)
Declare @newdocsub char(200)
Declare @docsuffix char(2)
Declare @docdesc char(50)
Declare @count int
Declare @docindex int


--CREATE TABLE #docs(docindex int identity Primary Key, docsubname char(100))

Declare curs CURSOR FOR
	SELECT SA.Sequence, CONVERT(char(2), SA.Suffix), SA.Description
	FROM NewMemberRequest As NMR INNER JOIN NewMemberSubAccount AS SA ON NMR.TrackingNum = SA.TrackingNum
	WHERE NMR.TrackingNum = @TrackingNum AND SA.ProductType = 'LOC' AND SA.Created = 'Y' AND '' = 'REMOVED per John Knutson 3/2/2018'

--IF @@ROWCOUNT = 0

OPEN curs
FETCH NEXT FROM curs INTO @docsubname, @docsuffix, @docdesc
SET @newdocsub = 'Consumer & VISA Application Update - ' + RTRIM(@docdesc) + ': ' + CASE LEN(@docsubname) WHEN 2 THEN @docsubname WHEN 1 THEN '0' + @docsubname ELSE 'NA' END
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count

	Set @docindex = @docindex + 1
	INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)

      	FETCH NEXT FROM curs INTO @docsubname, @docsuffix, @docdesc

	SET @newdocsub = 'Consumer & VISA Application Update - ' + RTRIM(@docdesc) + ': ' + CASE LEN(@docsubname) WHEN 2 THEN @docsubname WHEN 1 THEN '0' + @docsubname ELSE 'NA' END
   END

CLOSE curs
DEALLOCATE curs

Select *  FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Delete FROM NewMemberDoc WHERE TrackingNum = @TrackingNum

--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_D10Fields]    Script Date: 1/4/2025 10:20:31 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCCCU_D10Fields] @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
Declare @joseq int
Declare @jo1seq int
Declare @jo2seq int
Declare @jo3seq int
Declare @jo4seq int
Declare @count int
--Set @jo1seq = 1
--Set @jo2seq = 1
--Set @jo3seq = 1
--Set @jo4seq = 1
--CREATE TABLE #docs(id int identity Primary Key, docindex int, j1FullName char(100), j1FullAddress char(100), j1FullPhone char(12), j1DOB char(10), j1SSN char(11), j1ID char(20), j1IDIssueDate  char(10), j1IDExpDate  char(10), j1IDState  char(2), j2FullName char(100), j2FullAddress char(100), j2FullPhone char(11), j2DOB char(10), j2SSN char(11), j2ID char(20), j2IDIssueDate  char(10), j2IDExpDate  char(10), j2IDState  char(2), j3FullName char(100), j3FullAddress char(100), j3FullPhone char(11), j3DOB char(10), j3SSN char(11), j3ID char(20), j3IDIssueDate  char(10), j3IDExpDate  char(10), j3IDState  char(2), j4FullName char(100), j4FullAddress char(100), j4FullPhone char(11), j4DOB char(10), j4SSN char(11), j4ID char(20), j4IDIssueDate  char(10), j4IDExpDate  char(10), j4IDState  char(2))
Declare curs2 CURSOR FOR
	SELECT  CONVERT(int, JO.Sequence)
	from NewMemberJointOwner As JO
	INNER JOIN NewMemberJointLink AS JL ON JO.Sequence = JL.JointSequence AND JL.TrackingNum = @TrackingNum
	INNER JOIN NewMemberSubAccount AS SA ON JL.SubAccountSequence = SA.Sequence AND SA.TrackingNum = @TrackingNum
	WHERE JO.TrackingNum = @TrackingNum AND (JO.JointOwnerType IN ('JO', 'TR', 'CN', 'PR', 'RP', 'AS', 'CO', 'DB', 'CR', 'GN', 'GL')) AND SA.ProductType IN ('CC','CCA','IRA','LOC','MMA','PSA','RSA','SDA')
	GROUP BY CONVERT(int, JO.Sequence)
--IF @@ROWCOUNT = 0
OPEN curs2
FETCH NEXT FROM curs2 INTO @joseq
SET @count = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
      	IF (@count = 0 AND @DocIndex = 1) OR (@count = 4 AND @DocIndex = 2) OR (@count = 8 AND @DocIndex = 3)
		BEGIN
			Set @jo1seq = @joseq
		END
	IF (@count = 1 AND @DocIndex = 1) OR (@count = 5 AND @DocIndex = 2) OR (@count = 9 AND @DocIndex = 3)
		BEGIN
			Set @jo2seq = @joseq		
		END
	IF (@count = 2 AND @DocIndex = 1) OR (@count = 6 AND @DocIndex = 2) OR (@count = 10 AND @DocIndex = 3)
		BEGIN
			Set @jo3seq = @joseq		
		END
	IF (@count = 3 AND @DocIndex = 1) OR (@count = 7 AND @DocIndex = 2) OR (@count = 11 AND @DocIndex = 3)
		BEGIN
			Set @jo4seq = @joseq		
		END
      	FETCH NEXT FROM curs2 INTO @joseq
	SET @count = @count + 1
	PRINT @count
   END
CLOSE curs2
DEALLOCATE curs2
SELECT @DocIndex As DocIndex
	, '$' + RTRIM(CAST(CONVERT(MONEY, SALOC.CreditLimit *.01, 2) AS VARCHAR(10))) AS LOCAmount
	, SALOC.Description AS LOCPurpose
	, RTRIM(NMR.DriversLicenseNum) + '/' + RTRIM(NMR.DriversLicenseState) AS DriversLicenseNum
	, RTRIM(Home.AreaCode) + '-' + LEFT(RTRIM(Home.Phone), 3) + '-' + RIGHT(RTRIM(Home.Phone), 4) AS FullPhone
	, RTRIM(Work.AreaCode) + '-' + LEFT(RTRIM(Work.Phone), 3) + '-' + RIGHT(RTRIM(Work.Phone), 4) AS WorkFullPHone
	, RTRIM(Work.City) + ', ' + Work.State + ' ' + CASE LEN(Work.Zip) WHEN 9 THEN LEFT(Work.Zip, 5) + '-' + Right(Work.Zip, 4) ELSE Work.Zip END AS WorkCityStateZip
	, RTRIM(CAST(CONVERT(MONEY, Work.GrossIncome *.01, 2) AS VARCHAR(10))) AS GrossIncomeNoDollar
FROM NewMemberRequest As NMR
	LEFT OUTER JOIN NewMemberHome AS Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork AS Work On NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetSA(@TrackingNum, 'LOC', 'L') AS SALOC ON NMR.TrackingNum = SALOC.TrackingNum
WHERE NMR.TrackingNum = @TrackingNum
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_D11Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCCCU_D11Enable] @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
--Declare @TrackingNum int
--DROP TABLE #docs
--DEALLOCATE curs
--Set @TrackingNum = 1477

Declare @docsubname char(100)
Declare @newdocsub char(200)
Declare @docsuffix char(2)
Declare @count int
Declare @docindex int


--CREATE TABLE #docs(docindex int identity Primary Key, docsubname char(100))

Declare curs CURSOR FOR
	SELECT SA.Sequence, CONVERT(char(2), SA.Suffix)
	FROM NewMemberRequest As NMR INNER JOIN NewMemberSubAccount AS SA ON NMR.TrackingNum = SA.TrackingNum
	WHERE NMR.TrackingNum = @TrackingNum AND SA.ProductType = 'CC' AND SA.Created != 'H' AND '' = 'REMOVED per John Knutson 3/2/2018'

--IF @@ROWCOUNT = 0

OPEN curs
FETCH NEXT FROM curs INTO @docsubname, @docsuffix
SET @newdocsub = 'Consumer & VISA Application ' + CASE LEN(@docsubname) WHEN 2 THEN @docsubname WHEN 1 THEN '0' + @docsubname ELSE 'NA' END
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count

	Set @docindex = @docindex + 1
	INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)

      	FETCH NEXT FROM curs INTO @docsubname, @docsuffix

	SET @newdocsub = 'Consumer & VISA Application ' + CASE LEN(@docsubname) WHEN 2 THEN @docsubname WHEN 1 THEN '0' + @docsubname ELSE 'NA' END
   END

CLOSE curs
DEALLOCATE curs

Select *  FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Delete FROM NewMemberDoc WHERE TrackingNum = @TrackingNum

--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_D11Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCCCU_D11Fields] @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
Declare @joseq int
Declare @jo1seq int
Declare @jo2seq int
Declare @jo3seq int
Declare @jo4seq int
Declare @count int
--Set @jo1seq = 1
--Set @jo2seq = 1
--Set @jo3seq = 1
--Set @jo4seq = 1
--CREATE TABLE #docs(id int identity Primary Key, docindex int, j1FullName char(100), j1FullAddress char(100), j1FullPhone char(12), j1DOB char(10), j1SSN char(11), j1ID char(20), j1IDIssueDate  char(10), j1IDExpDate  char(10), j1IDState  char(2), j2FullName char(100), j2FullAddress char(100), j2FullPhone char(11), j2DOB char(10), j2SSN char(11), j2ID char(20), j2IDIssueDate  char(10), j2IDExpDate  char(10), j2IDState  char(2), j3FullName char(100), j3FullAddress char(100), j3FullPhone char(11), j3DOB char(10), j3SSN char(11), j3ID char(20), j3IDIssueDate  char(10), j3IDExpDate  char(10), j3IDState  char(2), j4FullName char(100), j4FullAddress char(100), j4FullPhone char(11), j4DOB char(10), j4SSN char(11), j4ID char(20), j4IDIssueDate  char(10), j4IDExpDate  char(10), j4IDState  char(2))
Declare curs2 CURSOR FOR
	SELECT  CONVERT(int, JO.Sequence)
	from NewMemberJointOwner As JO
	INNER JOIN NewMemberJointLink AS JL ON JO.Sequence = JL.JointSequence AND JL.TrackingNum = @TrackingNum
	INNER JOIN NewMemberSubAccount AS SA ON JL.SubAccountSequence = SA.Sequence AND SA.TrackingNum = @TrackingNum
	WHERE JO.TrackingNum = @TrackingNum AND (JO.JointOwnerType IN ('JO', 'TR', 'CN', 'PR', 'RP', 'AS', 'CO', 'DB', 'CR', 'GN', 'GL', 'CU')) AND SA.ProductType IN ('CC','CCA','IRA','LOC','MMA','PSA','RSA','SDA')
	GROUP BY CONVERT(int, JO.Sequence)
--IF @@ROWCOUNT = 0
OPEN curs2
FETCH NEXT FROM curs2 INTO @joseq
SET @count = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
      	IF (@count = 0 AND @DocIndex = 1) OR (@count = 4 AND @DocIndex = 2) OR (@count = 8 AND @DocIndex = 3)
		BEGIN
			Set @jo1seq = @joseq
		END
	IF (@count = 1 AND @DocIndex = 1) OR (@count = 5 AND @DocIndex = 2) OR (@count = 9 AND @DocIndex = 3)
		BEGIN
			Set @jo2seq = @joseq		
		END
	IF (@count = 2 AND @DocIndex = 1) OR (@count = 6 AND @DocIndex = 2) OR (@count = 10 AND @DocIndex = 3)
		BEGIN
			Set @jo3seq = @joseq		
		END
	IF (@count = 3 AND @DocIndex = 1) OR (@count = 7 AND @DocIndex = 2) OR (@count = 11 AND @DocIndex = 3)
		BEGIN
			Set @jo4seq = @joseq		
		END
      	FETCH NEXT FROM curs2 INTO @joseq
	SET @count = @count + 1
	PRINT @count
   END
CLOSE curs2
DEALLOCATE curs2
SELECT @DocIndex As DocIndex
	, '$' + RTRIM(CAST(CONVERT(MONEY, SALOC.CreditLimit *.01, 2) AS VARCHAR(10))) AS LOCAmount
	, SALOC.Description AS LOCPurpose
	, '$' + RTRIM(CAST(CONVERT(MONEY, SACC.Amount *.01, 2) AS VARCHAR(10))) AS CCPurpose
	, NMR.MaidenName AS CCMaidenName
	, RTRIM(NMR.DriversLicenseNum) + '/' + RTRIM(NMR.DriversLicenseState) AS DriversLicenseNum
	, RTRIM(Home.AreaCode) + '-' + LEFT(RTRIM(Home.Phone), 3) + '-' + RIGHT(RTRIM(Home.Phone), 4) AS FullPhone
	, RTRIM(Work.AreaCode) + '-' + LEFT(RTRIM(Work.Phone), 3) + '-' + RIGHT(RTRIM(Work.Phone), 4) AS WorkFullPHone
	, RTRIM(Work.City) + ', ' + Work.State + ' ' + CASE LEN(Work.Zip) WHEN 9 THEN LEFT(Work.Zip, 5) + '-' + Right(Work.Zip, 4) ELSE Work.Zip END AS WorkCityStateZip
	, RTRIM(CAST(CONVERT(MONEY, Work.GrossIncome *.01, 2) AS VARCHAR(10))) AS GrossIncomeNoDollar
FROM NewMemberRequest As NMR
	LEFT OUTER JOIN NewMemberHome AS Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork AS Work On NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetSA(@TrackingNum, 'LOC', 'L') AS SALOC ON NMR.TrackingNum = SALOC.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetSA(@TrackingNum, 'CC', 'L') AS SACC ON NMR.TrackingNum = SACC.TrackingNum
WHERE NMR.TrackingNum = @TrackingNum
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_D12Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO


CREATE PROCEDURE [IMS].[spCCCU_D12Enable] @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
--Declare @TrackingNum int
--DROP TABLE #docs
--DEALLOCATE curs
--Set @TrackingNum = 1477

Declare @docsubname char(100)
Declare @newdocsub char(200)
Declare @count int
Declare @docindex int


--CREATE TABLE #docs(docindex int identity Primary Key, docsubname char(100))

Declare curs CURSOR FOR
	SELECT '' AS docsubname
	FROM NewMemberRequest As NMR INNER JOIN NewMemberShoppingCart AS CART ON NMR.TrackingNum = CART.TrackingNum
	WHERE NMR.TrackingNum = @TrackingNum AND CART.ProductID = 'U-CC-1' AND CART.Created = 'Y' AND Cart.YesNoMaybe = 'YES' AND '' = 'REMOVED per John Knutson 3/2/2018'

--IF @@ROWCOUNT = 0

OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @newdocsub = 'Consumer & VISA Application '
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count

   	IF @count = 1
	BEGIN
		Set @docindex = @docindex + 1
		INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END

	FETCH NEXT FROM curs INTO @docsubname

	SET @newdocsub = 'Consumer & VISA Application '
   END

CLOSE curs
DEALLOCATE curs

Select *  FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Delete FROM NewMemberDoc WHERE TrackingNum = @TrackingNum

--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_D12Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [IMS].[spCCCU_D12Fields] @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
Declare @seq int
Declare @seq1 int
Declare @count int
--Set @jo1seq = 1
--Set @jo2seq = 1
--Set @jo3seq = 1
--Set @jo4seq = 1


--CREATE TABLE #docs(id int identity Primary Key, docindex int, j1FullName char(100), j1FullAddress char(100), j1FullPhone char(12), j1DOB char(10), j1SSN char(11), j1ID char(20), j1IDIssueDate  char(10), j1IDExpDate  char(10), j1IDState  char(2), j2FullName char(100), j2FullAddress char(100), j2FullPhone char(11), j2DOB char(10), j2SSN char(11), j2ID char(20), j2IDIssueDate  char(10), j2IDExpDate  char(10), j2IDState  char(2), j3FullName char(100), j3FullAddress char(100), j3FullPhone char(11), j3DOB char(10), j3SSN char(11), j3ID char(20), j3IDIssueDate  char(10), j3IDExpDate  char(10), j3IDState  char(2), j4FullName char(100), j4FullAddress char(100), j4FullPhone char(11), j4DOB char(10), j4SSN char(11), j4ID char(20), j4IDIssueDate  char(10), j4IDExpDate  char(10), j4IDState  char(2))

Declare curs2 CURSOR FOR
	SELECT  CONVERT(int, Sequence)
	from NewMemberRequest AS NMR INNER JOIN NewMemberSubAccount AS SA ON NMR.TrackingNum = SA.TrackingNum
	where NMR.TrackingNum = @TrackingNum And SA.SLType = 'L' And SA.CreateHost = 'Y'


--IF @@ROWCOUNT = 0

OPEN curs2
FETCH NEXT FROM curs2 INTO @seq
SET @count = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN

      	IF (@count = 0 AND @DocIndex = 1)
		BEGIN
			Set @seq1 = @seq
		END
	IF (@count = 1 AND @DocIndex = 2) 
		BEGIN
			Set @seq1 = @seq		
		END
	IF (@count = 2 AND @DocIndex = 3)
		BEGIN
			Set @seq1 = @seq		
		END
	IF (@count = 3 AND @DocIndex = 4)
		BEGIN
			Set @seq1 = @seq		
		END
	IF (@count = 4 AND @DocIndex = 5)
		BEGIN
			Set @seq1 = @seq		
		END
	IF (@count = 5 AND @DocIndex = 6)
		BEGIN
			Set @seq1 = @seq		
		END
	IF (@count = 6 AND @DocIndex = 7)
		BEGIN
			Set @seq1 = @seq		
		END
	IF (@count = 7 AND @DocIndex = 8)
		BEGIN
			Set @seq1 = @seq		
		END

      	FETCH NEXT FROM curs2 INTO @seq
	SET @count = @count + 1
	PRINT @count
   END

CLOSE curs2
DEALLOCATE curs2

SELECT @DocIndex As DocIndex
--	, RTRIM(RTRIM(CAST(NMR.Account AS VARCHAR(20)))) + '-' + RIGHT(('00' + RTRIM(SA.Suffix)),2) AS AccountPlusSuffix
--	, CAST((CAST(SA.APR AS int)*.0001)/365 AS Decimal(10,8)) AS DPR
--	, CAST(CAST(SA.APR AS int) * 0.0001 AS Decimal(10,4)) AS APR
--	, CASE WHEN SA.LineOfCredit = 'Y' THEN '0.00' ELSE RTRIM(CAST(CONVERT(money,SA.Amount *.01, 2) AS VARCHAR(10))) END AS NewBalance
--	, '0.00' AS AmountAdvanced
--	, RTRIM(CAST(CONVERT(money,SA.Payment *.01, 1) AS VARCHAR(10))) AS PaymentAmount
--	, SA.DueDate
--	,  SA.Method + '-' +
--	  CASE SA.Frequency
--	     	WHEN 'W'  THEN 'WEEKLY'
--		WHEN 'B' THEN 'BI-WEEKLY'
--		WHEN 'M' THEN 'MONTHLY'
--		WHEN 'S' THEN 'SEMI-MONTHLY'
--		WHEN 'Y' THEN 'YEARLY'
--		WHEN 'Q' THEN 'QUARTERLY'
--		WHEN '6' THEN 'SEMI-ANNUALLY'
--		WHEN 'A' THEN 'ANNUALLY'
--		WHEN '1' THEN 'SINGLE PAYMENT'
--	    END AS PaymentFrequency
--	, CASE WHEN SA.LineOfCredit = 'Y' THEN RTRIM(CAST(CONVERT(money,SA.CreditLimit *.01, 2) AS VARCHAR(10))) END AS CreditLimit
--	, CASE WHEN SA.LineOfCredit = 'Y' THEN RTRIM(CAST(CONVERT(money,SA.CreditLimit *.01, 2) AS VARCHAR(10))) END AS RemainingLimit
--	, SA.CurrBranch AS SABranch
--	, CONVERT(VARCHAR(10), SA.CreatedOn, 101) AS SACreatedOn
--	, SA.Officer AS SAOfficer
--	, fnCCCU_GetJOs(@TrackingNum, @seq1) As BorrowerNames
FROM NewMemberRequest As NMR
	--INNER JOIN udt_AccountTypes AS AType On NMR.AccountType = AType.TypeCode
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
--	LEFT OUTER JOIN fnCCCU_GetSA(@TrackingNum, @seq1) As SA ON NMR.TrackingNum = SA.TrackingNum
WHERE NMR.TrackingNum = @TrackingNum


Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_D1Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [IMS].[spCCCU_D1Enable] @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
--Declare @TrackingNum int
--DROP TABLE #docs
--DEALLOCATE curs
--Set @TrackingNum = 1477
Declare @docsubname char(100)
Declare @newdocsub char(100)
Declare @count int
Declare @docindex int
--CREATE TABLE #docs(docindex int identity Primary Key, docsubname char(100))
Declare curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT '' AS docsubname
	FROM NewMemberRequest AS NMR
	WHERE NMR.TrackingNum = @TrackingNum AND NMR.Processed = 999 AND NMR.Created = 'Y' AND NMR.AccountType IN ('M1', 'M2', 'M3', 'P', 'H') AND NMR.Citizenship <> 'NR'
--IF @@ROWCOUNT = 0
OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @newdocsub = 'Membership Card ' + @docsubname
IF @docsubname Is Null
BEGIN
	SET @newdocsub = 'Membership Card'
END
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count
      	IF @count = 1
	BEGIN
		Set @docindex = @docindex + 1
     		 INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END
      	FETCH NEXT FROM curs INTO @docsubname
	PRINT @docsubname
	IF @@FETCH_STATUS = 0
	BEGIN
		SET @newdocsub = (RTRIM(@newdocsub) + ', ' + RTRIM(@docsubname))
		PRINT @newdocsub
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex
	END
   END
CLOSE curs
DEALLOCATE curs
Select *  FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Delete FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_D1Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [IMS].[spCCCU_D1Fields] @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
Declare @joseq int
Declare @jo1seq int
Declare @jo2seq int
Declare @jo3seq int
Declare @jo4seq int
Declare @count int
--Set @jo1seq = 1
--Set @jo2seq = 1
--Set @jo3seq = 1
--Set @jo4seq = 1
--CREATE TABLE #docs(id int identity Primary Key, docindex int, j1FullName char(100), j1FullAddress char(100), j1FullPhone char(12), j1DOB char(10), j1SSN char(11), j1ID char(20), j1IDIssueDate  char(10), j1IDExpDate  char(10), j1IDState  char(2), j2FullName char(100), j2FullAddress char(100), j2FullPhone char(11), j2DOB char(10), j2SSN char(11), j2ID char(20), j2IDIssueDate  char(10), j2IDExpDate  char(10), j2IDState  char(2), j3FullName char(100), j3FullAddress char(100), j3FullPhone char(11), j3DOB char(10), j3SSN char(11), j3ID char(20), j3IDIssueDate  char(10), j3IDExpDate  char(10), j3IDState  char(2), j4FullName char(100), j4FullAddress char(100), j4FullPhone char(11), j4DOB char(10), j4SSN char(11), j4ID char(20), j4IDIssueDate  char(10), j4IDExpDate  char(10), j4IDState  char(2))
Declare curs2 CURSOR FOR
	SELECT  CONVERT(int, JO.Sequence)
	from NewMemberJointOwner As JO
	INNER JOIN NewMemberJointLink AS JL ON JO.Sequence = JL.JointSequence AND JL.TrackingNum = @TrackingNum
	INNER JOIN NewMemberSubAccount AS SA ON JL.SubAccountSequence = SA.Sequence AND SA.TrackingNum = @TrackingNum
	WHERE JO.TrackingNum = @TrackingNum AND (JO.JointOwnerType IN ('BE', 'JO', 'MI')) AND SA.ProductType IN ('PSA', 'RSA', 'SDA', 'CC')
	GROUP BY CONVERT(int, JO.Sequence)
--IF @@ROWCOUNT = 0
OPEN curs2
FETCH NEXT FROM curs2 INTO @joseq
SET @count = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
      	IF (@count = 0 AND @DocIndex = 1) OR (@count = 4 AND @DocIndex = 2) OR (@count = 8 AND @DocIndex = 3)
		BEGIN
			Set @jo1seq = @joseq
		END
	IF (@count = 1 AND @DocIndex = 1) OR (@count = 5 AND @DocIndex = 2) OR (@count = 9 AND @DocIndex = 3)
		BEGIN
			Set @jo2seq = @joseq		
		END
	IF (@count = 2 AND @DocIndex = 1) OR (@count = 6 AND @DocIndex = 2) OR (@count = 10 AND @DocIndex = 3)
		BEGIN
			Set @jo3seq = @joseq		
		END
	IF (@count = 3 AND @DocIndex = 1) OR (@count = 7 AND @DocIndex = 2) OR (@count = 11 AND @DocIndex = 3)
		BEGIN
			Set @jo4seq = @joseq		
		END
      	FETCH NEXT FROM curs2 INTO @joseq
	SET @count = @count + 1
	PRINT @count
   END
CLOSE curs2
DEALLOCATE curs2
SELECT @DocIndex As DocIndex
	, NMR.DriversLicenseState + '-' + RTRIM(NMR.DriversLicenseNum) AS DriversLicenseNum
	, CONVERT(char(10), NMR.IDExpirationDate, 101) AS DLExpirationDate
	, RTRIM(NMR.DriversLicenseNum) + '/' + NMR.DriversLicenseState AS DL
	, CASE NMR.IDType WHEN 'D' THEN 'Drivers License' ELSE NMR.IDSource END AS IDType
	, CASE NMR.IDType WHEN 'D' THEN NMR.DriversLicenseNum ELSE NMR.IDNumber END AS ID
	, NMR.IDNumber
	, CONVERT(char(10), NMR.IDIssueDate, 101) AS IDIssueDate
	, CONVERT(char(10), NMR.IDExpirationDate, 101) AS IDExpDate
	, CONVERT(char(10), NMR.IDExpirationDate, 101) AS IDExpirationDate
	, NMR.DriversLicenseState AS IDState
	, RTRIM(JO1.FName) AS JO1FName
	, RTRIM(JO1.MInitial) AS JO1MInitial
	, RTRIM(JO1.LName) AS JO1LName
	, RTRIM(JO1.Address) AS JO1Address
	, RTRIM(JO1.City) AS JO1City
	, RTRIM(JO1.State) AS JO1State
	, RTRIM(JO1.Zip) AS JO1Zip
	, JO1.DriversLicenseState + '-' + RTRIM(JO1.DriversLicenseNum) AS JO1DriversLicenseNum
	, LEFT(JO1.SSN, 3) + '-' + LEFT(RIGHT(JO1.SSN, 6),2) + '-' + RIGHT(JO1.SSN,4) AS JO1SSN
	, JO1.PhoneAC AS JO1AC
	, LEFT(JO1.Phone, 3) + '-' + RIGHT(RTRIM(JO1.Phone), 4) AS JO1Phone
	, JO1.WPhoneAC AS JO1WorkAC
	, LEFT(JO1.WPhone, 3) + '-' + RIGHT(RTRIM(JO1.WPhone), 4) AS JO1WorkPhone
	, JO1.DOB AS JO1DOB
	, RTRIM(JO2.FName) AS JO2FName
	, RTRIM(JO2.MInitial) AS JO2MInitial
	, RTRIM(JO2.LName) AS JO2LName
	, RTRIM(JO2.Address) AS JO2Address
	, RTRIM(JO2.City) AS JO2City
	, RTRIM(JO2.State) AS JO2State
	, RTRIM(JO2.Zip) AS JO2Zip
	, JO2.DriversLicenseState + '-' + RTRIM(JO2.DriversLicenseNum) AS JO2DriversLicenseNum
	, LEFT(JO2.SSN, 3) + '-' + LEFT(RIGHT(JO2.SSN, 6),2) + '-' + RIGHT(JO2.SSN,4) AS JO2SSN
	, JO2.PhoneAC AS JO2AC
	, LEFT(JO2.Phone, 3) + '-' + RIGHT(RTRIM(JO2.Phone), 4) AS JO2Phone
	, JO2.WPhoneAC AS JO2WorkAC
	, LEFT(JO2.WPhone, 3) + '-' + RIGHT(RTRIM(JO2.WPhone), 4) AS JO2WorkPhone
	, JO2.DOB AS JO2DOB
	, RTRIM(JO3.FName) AS JO3FName
	, RTRIM(JO3.MInitial) AS JO3MInitial
	, RTRIM(JO3.LName) AS JO3LName
	, RTRIM(JO3.Address) AS JO3Address
	, RTRIM(JO3.City) AS JO3City
	, RTRIM(JO3.State) AS JO3State
	, RTRIM(JO3.Zip) AS JO3Zip
	, JO3.DriversLicenseState + '-' + RTRIM(JO3.DriversLicenseNum) AS JO3DriversLicenseNum
	, LEFT(JO3.SSN, 3) + '-' + LEFT(RIGHT(JO3.SSN, 6),2) + '-' + RIGHT(JO3.SSN,4) AS JO3SSN
	, JO3.PhoneAC AS JO3AC
	, LEFT(JO3.Phone, 3) + '-' + RIGHT(RTRIM(JO3.Phone), 4) AS JO3Phone
	, JO3.WPhoneAC AS JO3WorkAC
	, LEFT(JO3.WPhone, 3) + '-' + RIGHT(RTRIM(JO3.WPhone), 4) AS JO3WorkPhone
	, JO3.DOB AS JO3DOB
	, RTRIM(JO4.FName) AS JO4FName
	, RTRIM(JO4.MInitial) AS JO4MInitial
	, RTRIM(JO4.LName) AS JO4LName
	, RTRIM(JO4.Address) AS JO4Address
	, RTRIM(JO4.City) AS JO4City
	, RTRIM(JO4.State) AS JO4State
	, RTRIM(JO4.Zip) AS JO4Zip
	, JO4.DriversLicenseState + '-' + RTRIM(JO4.DriversLicenseNum) AS JO4DriversLicenseNum
	, LEFT(JO4.SSN, 3) + '-' + LEFT(RIGHT(JO4.SSN, 6),2) + '-' + RIGHT(JO4.SSN,4) AS JO4SSN
	, JO4.PhoneAC AS JO4AC
	, LEFT(JO4.Phone, 3) + '-' + RIGHT(RTRIM(JO4.Phone), 4) AS JO4Phone
	, JO4.WPhoneAC AS JO4WorkAC
	, LEFT(JO4.WPhone, 3) + '-' + RIGHT(RTRIM(JO4.WPhone), 4) AS JO4WorkPhone
	, JO4.DOB AS JO4DOB
	, CASE WHEN SASDA.Sequence != '' THEN 'X' ELSE '' END AS CheckingYes
	, CASE WHEN SASDA.Sequence != '' THEN '' ELSE 'X' END AS CheckingNo
	, CASE WHEN LOWER(LEFT(Q1.Response, 1)) = 'y' THEN 'X' END AS YesQuestion1
	, CASE WHEN LOWER(LEFT(Q1.Response, 1)) != 'y' THEN 'X' END AS NoQuestion1
	, CASE WHEN LOWER(LEFT(Q1.Response, 1)) = 'y' THEN RTRIM(Q2.Response) END AS Question2
	, CASE WHEN LOWER(LEFT(Q3.Response, 1)) = 'y' THEN 'X' END AS YesQuestion3
	, CASE WHEN LOWER(LEFT(Q3.Response, 1)) != 'y' THEN 'X' END AS NoQuestion3
	, CASE WHEN LOWER(LEFT(Q4.Response, 1)) = 'y' THEN 'X' END AS YesQuestion4
	, CASE WHEN LOWER(LEFT(Q4.Response, 1)) != 'y' THEN 'X' END AS NoQuestion4
	,	SAODP1.Description + 
		CASE WHEN SAODP2.Description != '' THEN CHAR(13) + CHAR(10) + SAODP2.Description ELSE '' END + 
		CASE WHEN SAODP3.Description != '' THEN CHAR(13) + CHAR(10) + SAODP3.Description ELSE '' END +
		CASE WHEN SAODP4.Description != '' THEN CHAR(13) + CHAR(10) + SAODP4.Description ELSE '' END +
		CASE WHEN SAODP5.Description != '' THEN CHAR(13) + CHAR(10) + SAODP5.Description ELSE '' END +
		CASE WHEN SAODP6.Description != '' THEN CHAR(13) + CHAR(10) + SAODP6.Description ELSE '' END
		AS OverDraft
--	, CASE WHEN NMR.Qualification3 = 'Employer' THEN 'X' END AS EligEmployerYes
--	, CASE WHEN NMR.Qualification3 = 'Location' THEN 'X' END AS EligLivesYes
--	, CASE WHEN NMR.Qualification3 = 'Location' THEN 'X' END AS EligWorksYes
	, NMR.Qualification1 AS Relative
	, NMR.Qualification2 AS Relationship
	, NMR.CreatedBy AS TellerInitials
	, CASE NMR.Qualification3
		WHEN 'Location' THEN 'Lives, Works Or Worships in: ' + RTRIM(NMR.Department)
		WHEN 'Employer' THEN 'SEG Employer: ' + RTRIM(NMR.Department)
	  END AS LivesWorksWorships
	, Extra.TermsAcceptedDateTime AS MTermsDate
	, CASE WHEN ISNULL(JO1.LName, '') != '' THEN Extra.TermsAcceptedDateTime END AS J01TermsDate
	, CASE WHEN ISNULL(JO2.LName, '') != '' THEN Extra.TermsAcceptedDateTime END AS J02TermsDate
	, CASE WHEN ISNULL(JO3.LName, '') != '' THEN Extra.TermsAcceptedDateTime END AS J03TermsDate
	, CASE WHEN ISNULL(JO4.LName, '') != '' THEN Extra.TermsAcceptedDateTime END AS J04TermsDate
FROM NewMemberRequest AS NMR
	LEFT OUTER JOIN NewMemberHome AS Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork AS Work On NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN NewMemberRequestExtra AS Extra On NMR.TrackingNum = Extra.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'JO', 'MI', '') AS JO1 ON NMR.TrackingNum = JO1.TrackingNum AND JO1.JointSequence = 1
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'JO', 'MI', '') AS JO2 ON NMR.TrackingNum = JO2.TrackingNum AND JO2.JointSequence = 2
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'JO', 'MI', '') AS JO3 ON NMR.TrackingNum = JO3.TrackingNum AND JO3.JointSequence = 3
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'JO', 'MI', '') AS JO4 ON NMR.TrackingNum = JO4.TrackingNum AND JO4.JointSequence = 4
	LEFT OUTER JOIN fnCCCU_GetSA(@TrackingNum, 'SDA', 'S') AS SASDA ON NMR.TrackingNum = SASDA.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetQuestion(@TrackingNum, '1') AS Q1 ON NMR.TrackingNum = Q1.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetQuestion(@TrackingNum, '2') AS Q2 ON NMR.TrackingNum = Q2.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetQuestion(@TrackingNum, '3') AS Q3 ON NMR.TrackingNum = Q3.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetQuestion(@TrackingNum, '4') AS Q4 ON NMR.TrackingNum = Q4.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetSAODP(@TrackingNum, '1') AS SAODP1 ON NMR.TrackingNum = SAODP1.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetSAODP(@TrackingNum, '2') AS SAODP2 ON NMR.TrackingNum = SAODP2.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetSAODP(@TrackingNum, '3') AS SAODP3 ON NMR.TrackingNum = SAODP3.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetSAODP(@TrackingNum, '4') AS SAODP4 ON NMR.TrackingNum = SAODP4.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetSAODP(@TrackingNum, '5') AS SAODP5 ON NMR.TrackingNum = SAODP5.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetSAODP(@TrackingNum, '6') AS SAODP6 ON NMR.TrackingNum = SAODP6.TrackingNum
WHERE NMR.TrackingNum = @TrackingNum
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_D20Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCCCU_D20Enable] @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @docsubname CHAR(100)
DECLARE @newdocsub CHAR(100)
DECLARE @count INT
DECLARE @docindex INT

DECLARE curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT '' AS docsubname
	FROM NewMemberRequest AS NMR
	LEFT JOIN NewMemberSubAccount SA ON SA.TrackingNum = NMR.TrackingNum
	LEFT JOIN NewMemberJointOwner JO ON JO.TrackingNum = NMR.TrackingNum
	WHERE NMR.TrackingNum = @TrackingNum AND NMR.Processed = 999
		AND NMR.AccountType NOT IN ('BA', 'BC', 'BE', 'BG', 'BL', 'BN', 'BP', 'BS', 'BY')
		AND (NMR.Created = 'Y' OR (NMR.Created = 'I' AND ((SA.Created = 'Y' AND SA.ProductType <> 'CERT') OR JO.CreateHost = '')))

OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @newdocsub = 'Customer Identification Program ' + @docsubname
IF @docsubname Is Null
BEGIN
	SET @newdocsub = 'Customer Identification Program'
END
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
WHILE @@FETCH_STATUS = 0
BEGIN
	SET @count = @count + 1
	PRINT @count
		IF @count = 1
	BEGIN
		SET @docindex = @docindex + 1
		INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END
		FETCH NEXT FROM curs INTO @docsubname
	PRINT @docsubname
	IF @@FETCH_STATUS = 0
	BEGIN
		SET @newdocsub = (RTRIM(@newdocsub) + ', ' + RTRIM(@docsubname))
		PRINT @newdocsub
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex
	END
END
CLOSE curs
DEALLOCATE curs
SELECT * FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
DELETE FROM NewMemberDoc WHERE TrackingNum = @TrackingNum

Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_D20Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [IMS].[spCCCU_D20Fields] @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
Declare @joseq int
Declare @jo1seq int
Declare @jo2seq int
Declare @jo3seq int
Declare @jo4seq int
Declare @count int
--Set @jo1seq = 1
--Set @jo2seq = 1
--Set @jo3seq = 1
--Set @jo4seq = 1
--CREATE TABLE #docs(id int identity Primary Key, docindex int, j1FullName char(100), j1FullAddress char(100), j1FullPhone char(12), j1DOB char(10), j1SSN char(11), j1ID char(20), j1IDIssueDate  char(10), j1IDExpDate  char(10), j1IDState  char(2), j2FullName char(100), j2FullAddress char(100), j2FullPhone char(11), j2DOB char(10), j2SSN char(11), j2ID char(20), j2IDIssueDate  char(10), j2IDExpDate  char(10), j2IDState  char(2), j3FullName char(100), j3FullAddress char(100), j3FullPhone char(11), j3DOB char(10), j3SSN char(11), j3ID char(20), j3IDIssueDate  char(10), j3IDExpDate  char(10), j3IDState  char(2), j4FullName char(100), j4FullAddress char(100), j4FullPhone char(11), j4DOB char(10), j4SSN char(11), j4ID char(20), j4IDIssueDate  char(10), j4IDExpDate  char(10), j4IDState  char(2))
Declare curs2 CURSOR FOR
	SELECT  CONVERT(int, JO.Sequence)
	from NewMemberJointOwner As JO
	INNER JOIN NewMemberJointLink AS JL ON JO.Sequence = JL.JointSequence AND JL.TrackingNum = @TrackingNum
	INNER JOIN NewMemberSubAccount AS SA ON JL.SubAccountSequence = SA.Sequence AND SA.TrackingNum = @TrackingNum
	WHERE JO.TrackingNum = @TrackingNum AND SA.ProductType IN ('PSA', 'RSA', 'SDA', 'CC')
	GROUP BY CONVERT(int, JO.Sequence)
--IF @@ROWCOUNT = 0
OPEN curs2
FETCH NEXT FROM curs2 INTO @joseq
SET @count = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
      	IF (@count = 0 AND @DocIndex = 1) OR (@count = 4 AND @DocIndex = 2) OR (@count = 8 AND @DocIndex = 3)
		BEGIN
			Set @jo1seq = @joseq
		END
	IF (@count = 1 AND @DocIndex = 1) OR (@count = 5 AND @DocIndex = 2) OR (@count = 9 AND @DocIndex = 3)
		BEGIN
			Set @jo2seq = @joseq		
		END
	IF (@count = 2 AND @DocIndex = 1) OR (@count = 6 AND @DocIndex = 2) OR (@count = 10 AND @DocIndex = 3)
		BEGIN
			Set @jo3seq = @joseq		
		END
	IF (@count = 3 AND @DocIndex = 1) OR (@count = 7 AND @DocIndex = 2) OR (@count = 11 AND @DocIndex = 3)
		BEGIN
			Set @jo4seq = @joseq		
		END
      	FETCH NEXT FROM curs2 INTO @joseq
	SET @count = @count + 1
	PRINT @count
   END
CLOSE curs2
DEALLOCATE curs2
SELECT @DocIndex As DocIndex
	, CASE WHEN NMR.AccountType = 'M1' OR NMR.AccountType = 'MU' THEN 'X' END AS VerificationNo
	, CASE WHEN NMR.IDType = 'D' AND NMR.AccountType != 'M1' AND NMR.AccountType != 'MU' THEN 'X' END AS DriversLicenseYes
	, CASE WHEN NMR.IDType = 'D' AND NMR.AccountType != 'M1' AND NMR.AccountType != 'MU' THEN NMR.DriversLicenseNum END AS DriversLicenseNum
	, CASE WHEN NMR.IDType = 'D' AND NMR.AccountType != 'M1' AND NMR.AccountType != 'MU' THEN NMR.DriversLicenseState END AS DriversLicenseState
	, CASE WHEN NMR.IDType = 'D' AND NMR.AccountType != 'M1' AND NMR.AccountType != 'MU' THEN NMR.IDExpirationDate END AS DLExpirationDate
	, CASE WHEN NMR.IDType = 'D' AND NMR.AccountType != 'M1' AND NMR.AccountType != 'MU' THEN NMR.IDIssueDate END AS DLIssueDate
	, CASE WHEN NMR.IDType = 'O' AND NMR.AccountType != 'M1' AND NMR.AccountType != 'MU' THEN 'X' END AS OtherIDYes
	, CASE WHEN NMR.IDType = 'O' AND NMR.AccountType != 'M1' AND NMR.AccountType != 'MU' THEN NMR.IDNumber END AS IDNumber
	, CASE WHEN NMR.IDType = 'O' AND NMR.AccountType != 'M1' AND NMR.AccountType != 'MU' THEN NMR.IDIssueDate END AS IDIssueDate
	, CASE WHEN NMR.IDType = 'O' AND NMR.AccountType != 'M1' AND NMR.AccountType != 'MU' THEN NMR.IDExpirationDate END AS IDExpirationDate

	, RTRIM(JO1.FullName + ' ' + JO1.JOCHTag) AS JO1FullName
	, CASE WHEN JO1.JointOwnerType = 'MI' THEN 'X' END AS JO1VerificationNo
	, CASE WHEN RTRIM(JO1.IDSource) = 'Drivers License' AND JO1.JointOwnerType != 'MI' THEN 'X' END AS JO1DriversLicenseYes
	, CASE WHEN JO1.IDSource = 'Drivers License' AND JO1.JointOwnerType != 'MI' THEN JO1.IDNumber END AS JO1DriversLicenseNum
	, CASE WHEN JO1.IDSource = 'Drivers License' AND JO1.JointOwnerType != 'MI' THEN JO1.IDState END AS JO1DriversLicenseState
	, CASE WHEN JO1.IDSource = 'Drivers License' AND JO1.JointOwnerType != 'MI' THEN JO1.IDExpireDate END AS JO1DLExpirationDate
	, CASE WHEN JO1.IDSource = 'Drivers License' AND JO1.JointOwnerType != 'MI' THEN JO1.IDIssueDate END AS JO1DLIssueDate
	, CASE WHEN JO1.IDSource != 'Drivers License' AND JO1.IDSource != '' AND JO1.JointOwnerType != 'MI' THEN 'X' END AS JO1OtherIDYes
	, CASE WHEN JO1.IDSource != 'Drivers License' AND JO1.IDSource != '' AND JO1.JointOwnerType != 'MI' THEN JO1.IDNumber END AS JO1IDNumber
	, CASE WHEN JO1.IDSource != 'Drivers License' AND JO1.IDSource != '' AND JO1.JointOwnerType != 'MI' THEN JO1.IDIssueDate END AS JO1IDIssueDate
	, CASE WHEN JO1.IDSource != 'Drivers License' AND JO1.IDSource != '' AND JO1.JointOwnerType != 'MI' THEN JO1.IDExpireDate END AS JO1IDExpirationDate

	, RTRIM(JO2.FullName + ' ' + JO2.JOCHTag) AS JO2FullName
	, CASE WHEN JO2.JointOwnerType = 'MI' THEN 'X' END AS JO2VerificationNo
	, CASE WHEN JO2.IDSource = 'Drivers License' AND JO2.JointOwnerType != 'MI' THEN 'X' END AS JO2DriversLicenseYes
	, CASE WHEN JO2.IDSource = 'Drivers License' AND JO2.JointOwnerType != 'MI' THEN JO2.IDNumber END AS JO2DriversLicenseNum
	, CASE WHEN JO2.IDSource = 'Drivers License' AND JO2.JointOwnerType != 'MI' THEN JO2.IDState END AS JO2DriversLicenseState
	, CASE WHEN JO2.IDSource = 'Drivers License' AND JO2.JointOwnerType != 'MI' THEN JO2.IDExpireDate END AS JO2DLExpirationDate
	, CASE WHEN JO2.IDSource = 'Drivers License' AND JO2.JointOwnerType != 'MI' THEN JO2.IDIssueDate END AS JO2DLIssueDate
	, CASE WHEN JO2.IDSource != 'Drivers License' AND JO2.IDSource != '' AND JO2.JointOwnerType != 'MI' THEN 'X' END AS JO2OtherIDYes
	, CASE WHEN JO2.IDSource != 'Drivers License' AND JO2.IDSource != '' AND JO2.JointOwnerType != 'MI' THEN JO2.IDNumber END AS JO2IDNumber
	, CASE WHEN JO2.IDSource != 'Drivers License' AND JO2.IDSource != '' AND JO2.JointOwnerType != 'MI' THEN JO2.IDIssueDate END AS JO2IDIssueDate
	, CASE WHEN JO2.IDSource != 'Drivers License' AND JO2.IDSource != '' AND JO2.JointOwnerType != 'MI' THEN JO2.IDExpireDate END AS JO2IDExpirationDate

	, RTRIM(JO3.FullName + ' ' + JO3.JOCHTag) AS JO3FullName
	, CASE WHEN JO3.JointOwnerType = 'MI' THEN 'X' END AS JO3VerificationNo
	, CASE WHEN JO3.IDSource = 'Drivers License' AND JO3.JointOwnerType != 'MI' THEN 'X' END AS JO3DriversLicenseYes
	, CASE WHEN JO3.IDSource = 'Drivers License' AND JO3.JointOwnerType != 'MI' THEN JO3.IDNumber END AS JO3DriversLicenseNum
	, CASE WHEN JO3.IDSource = 'Drivers License' AND JO3.JointOwnerType != 'MI' THEN JO3.IDState END AS JO3DriversLicenseState
	, CASE WHEN JO3.IDSource = 'Drivers License' AND JO3.JointOwnerType != 'MI' THEN JO3.IDExpireDate END AS JO3DLExpirationDate
	, CASE WHEN JO3.IDSource = 'Drivers License' AND JO3.JointOwnerType != 'MI' THEN JO3.IDIssueDate END AS JO3DLIssueDate
	, CASE WHEN JO3.IDSource != 'Drivers License' AND JO3.IDSource != '' AND JO3.JointOwnerType != 'MI' THEN 'X' END AS JO3OtherIDYes
	, CASE WHEN JO3.IDSource != 'Drivers License' AND JO3.IDSource != '' AND JO3.JointOwnerType != 'MI' THEN JO3.IDNumber END AS JO3IDNumber
	, CASE WHEN JO3.IDSource != 'Drivers License' AND JO3.IDSource != '' AND JO3.JointOwnerType != 'MI' THEN JO3.IDIssueDate END AS JO3IDIssueDate
	, CASE WHEN JO3.IDSource != 'Drivers License' AND JO3.IDSource != '' AND JO3.JointOwnerType != 'MI' THEN JO3.IDExpireDate END AS JO3IDExpirationDate
FROM NewMemberRequest AS NMR
	LEFT OUTER JOIN NewMemberHome AS Home ON NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork AS Work ON NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetJO(@TrackingNum, @jo1seq) AS JO1 ON NMR.TrackingNum = JO1.TrackingNum AND JO1.JointOwnerType != 'SC' AND JO1.JointOwnerType != 'TF' AND JO1.JointOwnerType != 'BE'
	LEFT OUTER JOIN fnCCCU_GetJO(@TrackingNum, @jo2seq) AS JO2 ON NMR.TrackingNum = JO2.TrackingNum AND JO2.JointOwnerType != 'SC' AND JO2.JointOwnerType != 'TF' AND JO2.JointOwnerType != 'BE'
	LEFT OUTER JOIN fnCCCU_GetJO(@TrackingNum, @jo3seq) AS JO3 ON NMR.TrackingNum = JO3.TrackingNum AND JO3.JointOwnerType != 'SC' AND JO3.JointOwnerType != 'TF' AND JO3.JointOwnerType != 'BE'
WHERE NMR.TrackingNum = @TrackingNum


Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_D21Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCCCU_D21Enable] @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
--Declare @TrackingNum int
--DROP TABLE #docs
--DEALLOCATE curs
--Set @TrackingNum = 1477
Declare @docsubname char(100)
Declare @newdocsub char(100)
Declare @count int
Declare @docindex int
--CREATE TABLE #docs(docindex int identity Primary Key, docsubname char(100))
Declare curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT '' AS docsubname
	FROM NewMemberRequest AS NMR
	WHERE NMR.TrackingNum = @TrackingNum AND NMR.Processed = 999 AND NMR.Created = 'Y' AND NMR.AccountType IN ('BC', 'BE', 'BG', 'BL', 'BN', 'BP', 'BY') 
--IF @@ROWCOUNT = 0
OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @newdocsub = 'Business Customer Identification Program ' + @docsubname
IF @docsubname Is Null
BEGIN
	SET @newdocsub = 'Business Customer Identification Program'
END
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count
      	IF @count = 1
	BEGIN
		Set @docindex = @docindex + 1
     		 INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END
      	FETCH NEXT FROM curs INTO @docsubname
	PRINT @docsubname
	IF @@FETCH_STATUS = 0
	BEGIN
		SET @newdocsub = (RTRIM(@newdocsub) + ', ' + RTRIM(@docsubname))
		PRINT @newdocsub
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex
	END
   END
CLOSE curs
DEALLOCATE curs
Select *  FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Delete FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_D21Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCCCU_D21Fields] @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
Declare @joseq int
Declare @jo1seq int
Declare @jo2seq int
Declare @jo3seq int
Declare @jo4seq int
Declare @count int
--Set @jo1seq = 1
--Set @jo2seq = 1
--Set @jo3seq = 1
--Set @jo4seq = 1
--CREATE TABLE #docs(id int identity Primary Key, docindex int, j1FullName char(100), j1FullAddress char(100), j1FullPhone char(12), j1DOB char(10), j1SSN char(11), j1ID char(20), j1IDIssueDate  char(10), j1IDExpDate  char(10), j1IDState  char(2), j2FullName char(100), j2FullAddress char(100), j2FullPhone char(11), j2DOB char(10), j2SSN char(11), j2ID char(20), j2IDIssueDate  char(10), j2IDExpDate  char(10), j2IDState  char(2), j3FullName char(100), j3FullAddress char(100), j3FullPhone char(11), j3DOB char(10), j3SSN char(11), j3ID char(20), j3IDIssueDate  char(10), j3IDExpDate  char(10), j3IDState  char(2), j4FullName char(100), j4FullAddress char(100), j4FullPhone char(11), j4DOB char(10), j4SSN char(11), j4ID char(20), j4IDIssueDate  char(10), j4IDExpDate  char(10), j4IDState  char(2))
Declare curs2 CURSOR FOR
	SELECT  CONVERT(int, JO.Sequence)
	from NewMemberJointOwner As JO
	INNER JOIN NewMemberJointLink AS JL ON JO.Sequence = JL.JointSequence AND JL.TrackingNum = @TrackingNum
	INNER JOIN NewMemberSubAccount AS SA ON JL.SubAccountSequence = SA.Sequence AND SA.TrackingNum = @TrackingNum
	WHERE JO.TrackingNum = @TrackingNum AND SA.ProductType IN ('PSA', 'RSA', 'SDA', 'CC')
	GROUP BY CONVERT(int, JO.Sequence)
--IF @@ROWCOUNT = 0
OPEN curs2
FETCH NEXT FROM curs2 INTO @joseq
SET @count = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
      	IF (@count = 0 AND @DocIndex = 1) OR (@count = 4 AND @DocIndex = 2) OR (@count = 8 AND @DocIndex = 3)
		BEGIN
			Set @jo1seq = @joseq
		END
	IF (@count = 1 AND @DocIndex = 1) OR (@count = 5 AND @DocIndex = 2) OR (@count = 9 AND @DocIndex = 3)
		BEGIN
			Set @jo2seq = @joseq		
		END
	IF (@count = 2 AND @DocIndex = 1) OR (@count = 6 AND @DocIndex = 2) OR (@count = 10 AND @DocIndex = 3)
		BEGIN
			Set @jo3seq = @joseq		
		END
	IF (@count = 3 AND @DocIndex = 1) OR (@count = 7 AND @DocIndex = 2) OR (@count = 11 AND @DocIndex = 3)
		BEGIN
			Set @jo4seq = @joseq		
		END
      	FETCH NEXT FROM curs2 INTO @joseq
	SET @count = @count + 1
	PRINT @count
   END
CLOSE curs2
DEALLOCATE curs2
SELECT @DocIndex As DocIndex
	, CASE WHEN NMR.AccountType = 'M1' OR NMR.AccountType = 'MU' THEN 'X' END AS VerificationNo
	, CASE WHEN NMR.IDType = 'D' AND NMR.AccountType != 'M1' AND NMR.AccountType != 'MU' THEN 'X' END AS DriversLicenseYes
	, CASE WHEN NMR.IDType = 'D' AND NMR.AccountType != 'M1' AND NMR.AccountType != 'MU' THEN NMR.DriversLicenseNum END AS DriversLicenseNum
	, CASE WHEN NMR.IDType = 'D' AND NMR.AccountType != 'M1' AND NMR.AccountType != 'MU' THEN NMR.DriversLicenseState END AS DriversLicenseState
	, CASE WHEN NMR.IDType = 'D' AND NMR.AccountType != 'M1' AND NMR.AccountType != 'MU' THEN NMR.IDExpirationDate END AS DLExpirationDate
	, CASE WHEN NMR.IDType = 'O' AND NMR.AccountType != 'M1' AND NMR.AccountType != 'MU' THEN 'X' END AS OtherIDYes
	, CASE WHEN NMR.IDType = 'O' AND NMR.AccountType != 'M1' AND NMR.AccountType != 'MU' THEN NMR.IDNumber END AS IDNumber
	, CASE WHEN NMR.IDType = 'O' AND NMR.AccountType != 'M1' AND NMR.AccountType != 'MU' THEN NMR.IDIssueDate END AS IDIssueDate
	, CASE WHEN NMR.IDType = 'O' AND NMR.AccountType != 'M1' AND NMR.AccountType != 'MU' THEN NMR.IDExpirationDate END AS IDExpirationDate

	, JO1.FullName AS JO1FullName
	, CASE WHEN JO1.JointOwnerType = 'MI' THEN 'X' END AS JO1VerificationNo
	, CASE WHEN RTRIM(JO1.IDSource) = 'Drivers License' AND JO1.JointOwnerType != 'MI' THEN 'X' END AS JO1DriversLicenseYes
	, CASE WHEN JO1.IDSource = 'Drivers License' AND JO1.JointOwnerType != 'MI' THEN JO1.IDNumber END AS JO1DriversLicenseNum
	, CASE WHEN JO1.IDSource = 'Drivers License' AND JO1.JointOwnerType != 'MI' THEN JO1.IDState END AS JO1DriversLicenseState
	, CASE WHEN JO1.IDSource = 'Drivers License' AND JO1.JointOwnerType != 'MI' THEN JO1.IDExpireDate END AS JO1DLExpirationDate
	, CASE WHEN JO1.IDSource != 'Drivers License' AND JO1.IDSource != '' AND JO1.JointOwnerType != 'MI' THEN 'X' END AS JO1OtherIDYes
	, CASE WHEN JO1.IDSource != 'Drivers License' AND JO1.IDSource != '' AND JO1.JointOwnerType != 'MI' THEN JO1.IDNumber END AS JO1IDNumber
	, CASE WHEN JO1.IDSource != 'Drivers License' AND JO1.IDSource != '' AND JO1.JointOwnerType != 'MI' THEN JO1.IDIssueDate END AS JO1IDIssueDate
	, CASE WHEN JO1.IDSource != 'Drivers License' AND JO1.IDSource != '' AND JO1.JointOwnerType != 'MI' THEN JO1.IDExpireDate END AS JO1IDExpirationDate

	, JO2.FullName AS JO2FullName
	, CASE WHEN JO2.JointOwnerType = 'MI' THEN 'X' END AS JO2VerificationNo
	, CASE WHEN JO2.IDSource = 'Drivers License' AND JO2.JointOwnerType != 'MI' THEN 'X' END AS JO2DriversLicenseYes
	, CASE WHEN JO2.IDSource = 'Drivers License' AND JO2.JointOwnerType != 'MI' THEN JO2.IDNumber END AS JO2DriversLicenseNum
	, CASE WHEN JO2.IDSource = 'Drivers License' AND JO2.JointOwnerType != 'MI' THEN JO2.IDState END AS JO2DriversLicenseState
	, CASE WHEN JO2.IDSource = 'Drivers License' AND JO2.JointOwnerType != 'MI' THEN JO2.IDExpireDate END AS JO2DLExpirationDate
	, CASE WHEN JO2.IDSource != 'Drivers License' AND JO2.IDSource != '' AND JO2.JointOwnerType != 'MI' THEN 'X' END AS JO2OtherIDYes
	, CASE WHEN JO2.IDSource != 'Drivers License' AND JO2.IDSource != '' AND JO2.JointOwnerType != 'MI' THEN JO2.IDNumber END AS JO2IDNumber
	, CASE WHEN JO2.IDSource != 'Drivers License' AND JO2.IDSource != '' AND JO2.JointOwnerType != 'MI' THEN JO2.IDIssueDate END AS JO2IDIssueDate
	, CASE WHEN JO2.IDSource != 'Drivers License' AND JO2.IDSource != '' AND JO2.JointOwnerType != 'MI' THEN JO2.IDExpireDate END AS JO2IDExpirationDate

	, JO3.FullName AS JO3FullName
	, CASE WHEN JO3.JointOwnerType = 'MI' THEN 'X' END AS JO3VerificationNo
	, CASE WHEN JO3.IDSource = 'Drivers License' AND JO3.JointOwnerType != 'MI' THEN 'X' END AS JO3DriversLicenseYes
	, CASE WHEN JO3.IDSource = 'Drivers License' AND JO3.JointOwnerType != 'MI' THEN JO3.IDNumber END AS JO3DriversLicenseNum
	, CASE WHEN JO3.IDSource = 'Drivers License' AND JO3.JointOwnerType != 'MI' THEN JO3.IDState END AS JO3DriversLicenseState
	, CASE WHEN JO3.IDSource = 'Drivers License' AND JO3.JointOwnerType != 'MI' THEN JO3.IDExpireDate END AS JO3DLExpirationDate
	, CASE WHEN JO3.IDSource != 'Drivers License' AND JO3.IDSource != '' AND JO3.JointOwnerType != 'MI' THEN 'X' END AS JO3OtherIDYes
	, CASE WHEN JO3.IDSource != 'Drivers License' AND JO3.IDSource != '' AND JO3.JointOwnerType != 'MI' THEN JO3.IDNumber END AS JO3IDNumber
	, CASE WHEN JO3.IDSource != 'Drivers License' AND JO3.IDSource != '' AND JO3.JointOwnerType != 'MI' THEN JO3.IDIssueDate END AS JO3IDIssueDate
	, CASE WHEN JO3.IDSource != 'Drivers License' AND JO3.IDSource != '' AND JO3.JointOwnerType != 'MI' THEN JO3.IDExpireDate END AS JO3IDExpirationDate
FROM NewMemberRequest AS NMR
	LEFT OUTER JOIN NewMemberHome AS Home ON NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork AS Work ON NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetJO(@TrackingNum, @jo1seq) AS JO1 ON NMR.TrackingNum = JO1.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetJO(@TrackingNum, @jo2seq) AS JO2 ON NMR.TrackingNum = JO2.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetJO(@TrackingNum, @jo3seq) AS JO3 ON NMR.TrackingNum = JO3.TrackingNum
WHERE NMR.TrackingNum = @TrackingNum


Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_D22Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [IMS].[spCCCU_D22Enable] @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
--Declare @TrackingNum int
--DROP TABLE #docs
--DEALLOCATE curs
--Set @TrackingNum = 1477
Declare @docsubname char(100)
Declare @newdocsub char(100)
Declare @count int
Declare @docindex int
--CREATE TABLE #docs(docindex int identity Primary Key, docsubname char(100))
Declare curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT '' AS docsubname
	FROM NewMemberRequest AS NMR
	WHERE NMR.TrackingNum = @TrackingNum AND NMR.Processed = 999 AND NMR.Created = 'Y' AND NMR.AccountType IN ('BA', 'BS') 
--IF @@ROWCOUNT = 0
OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @newdocsub = 'Business Customer Identification Program ' + @docsubname
IF @docsubname Is Null
BEGIN
	SET @newdocsub = 'Business Customer Identification Program'
END
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count
      	IF @count = 1
	BEGIN
		Set @docindex = @docindex + 1
     		 INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END
      	FETCH NEXT FROM curs INTO @docsubname
	PRINT @docsubname
	IF @@FETCH_STATUS = 0
	BEGIN
		SET @newdocsub = (RTRIM(@newdocsub) + ', ' + RTRIM(@docsubname))
		PRINT @newdocsub
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex
	END
   END
CLOSE curs
DEALLOCATE curs
Select *  FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Delete FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_D22Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCCCU_D22Fields] @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
Declare @joseq int
Declare @jo1seq int
Declare @jo2seq int
Declare @jo3seq int
Declare @jo4seq int
Declare @count int
--Set @jo1seq = 1
--Set @jo2seq = 1
--Set @jo3seq = 1
--Set @jo4seq = 1
--CREATE TABLE #docs(id int identity Primary Key, docindex int, j1FullName char(100), j1FullAddress char(100), j1FullPhone char(12), j1DOB char(10), j1SSN char(11), j1ID char(20), j1IDIssueDate  char(10), j1IDExpDate  char(10), j1IDState  char(2), j2FullName char(100), j2FullAddress char(100), j2FullPhone char(11), j2DOB char(10), j2SSN char(11), j2ID char(20), j2IDIssueDate  char(10), j2IDExpDate  char(10), j2IDState  char(2), j3FullName char(100), j3FullAddress char(100), j3FullPhone char(11), j3DOB char(10), j3SSN char(11), j3ID char(20), j3IDIssueDate  char(10), j3IDExpDate  char(10), j3IDState  char(2), j4FullName char(100), j4FullAddress char(100), j4FullPhone char(11), j4DOB char(10), j4SSN char(11), j4ID char(20), j4IDIssueDate  char(10), j4IDExpDate  char(10), j4IDState  char(2))
Declare curs2 CURSOR FOR
	SELECT  CONVERT(int, JO.Sequence)
	from NewMemberJointOwner As JO
	INNER JOIN NewMemberJointLink AS JL ON JO.Sequence = JL.JointSequence AND JL.TrackingNum = @TrackingNum
	INNER JOIN NewMemberSubAccount AS SA ON JL.SubAccountSequence = SA.Sequence AND SA.TrackingNum = @TrackingNum
	WHERE JO.TrackingNum = @TrackingNum AND SA.ProductType IN ('PSA', 'RSA', 'SDA', 'CC')
	GROUP BY CONVERT(int, JO.Sequence)
--IF @@ROWCOUNT = 0
OPEN curs2
FETCH NEXT FROM curs2 INTO @joseq
SET @count = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
      	IF (@count = 0 AND @DocIndex = 1) OR (@count = 4 AND @DocIndex = 2) OR (@count = 8 AND @DocIndex = 3)
		BEGIN
			Set @jo1seq = @joseq
		END
	IF (@count = 1 AND @DocIndex = 1) OR (@count = 5 AND @DocIndex = 2) OR (@count = 9 AND @DocIndex = 3)
		BEGIN
			Set @jo2seq = @joseq		
		END
	IF (@count = 2 AND @DocIndex = 1) OR (@count = 6 AND @DocIndex = 2) OR (@count = 10 AND @DocIndex = 3)
		BEGIN
			Set @jo3seq = @joseq		
		END
	IF (@count = 3 AND @DocIndex = 1) OR (@count = 7 AND @DocIndex = 2) OR (@count = 11 AND @DocIndex = 3)
		BEGIN
			Set @jo4seq = @joseq		
		END
      	FETCH NEXT FROM curs2 INTO @joseq
	SET @count = @count + 1
	PRINT @count
   END
CLOSE curs2
DEALLOCATE curs2
SELECT @DocIndex As DocIndex
/*
--	Data fields are mixed up on this document
	, JO1.FullName AS JB1FullName

	, RTRIM(NMR.FName) + ' ' + RTRIM(NMR.LName) AS FullName
--	, CASE WHEN NMR.AccountType = 'M1' OR NMR.AccountType = 'MU' THEN 'X' END AS VerificationNo
	, CASE WHEN NMR.IDType = 'D' AND NMR.AccountType != 'M1' AND NMR.AccountType != 'MU' THEN 'X' END AS DriversLicenseYes
	, CASE WHEN NMR.IDType = 'D' AND NMR.AccountType != 'M1' AND NMR.AccountType != 'MU' THEN NMR.DriversLicenseNum END AS DriversLicenseNum
	, CASE WHEN NMR.IDType = 'D' AND NMR.AccountType != 'M1' AND NMR.AccountType != 'MU' THEN NMR.DriversLicenseState END AS DriversLicenseState
	, CASE WHEN NMR.IDType = 'D' AND NMR.AccountType != 'M1' AND NMR.AccountType != 'MU' THEN NMR.IDExpirationDate END AS DLExpirationDate
	, CASE WHEN NMR.IDType = 'O' AND NMR.AccountType != 'M1' AND NMR.AccountType != 'MU' THEN 'X' END AS OtherIDYes
	, CASE WHEN NMR.IDType = 'O' AND NMR.AccountType != 'M1' AND NMR.AccountType != 'MU' THEN NMR.IDNumber END AS IDNumber
	, CASE WHEN NMR.IDType = 'O' AND NMR.AccountType != 'M1' AND NMR.AccountType != 'MU' THEN NMR.IDIssueDate END AS IDIssueDate
	, CASE WHEN NMR.IDType = 'O' AND NMR.AccountType != 'M1' AND NMR.AccountType != 'MU' THEN NMR.IDExpirationDate END AS IDExpirationDate
*/
	, NMR.OrganizationName AS JB1FullName

	, JO1.FullName AS FullName
	, CASE WHEN JO1.JointOwnerType = 'MI' THEN 'X' END AS VerificationNo
	, CASE WHEN JO1.IDSource = 'Drivers License' AND JO1.JointOwnerType != 'MI' THEN 'X' END AS DriversLicenseYes
	, CASE WHEN JO1.IDSource = 'Drivers License' AND JO1.JointOwnerType != 'MI' THEN JO1.IDNumber END AS DriversLicenseNum
	, CASE WHEN JO1.IDSource = 'Drivers License' AND JO1.JointOwnerType != 'MI' THEN JO1.IDState END AS DriversLicenseState
	, CASE WHEN JO1.IDSource = 'Drivers License' AND JO1.JointOwnerType != 'MI' THEN JO1.IDIssueDate END AS DLIssueDate
	, CASE WHEN JO1.IDSource = 'Drivers License' AND JO1.JointOwnerType != 'MI' THEN JO1.IDExpireDate END AS DLExpirationDate
	, CASE WHEN JO1.IDSource != 'Drivers License' AND JO1.IDSource != '' AND JO1.JointOwnerType != 'MI' THEN 'X' END AS OtherIDYes
	, CASE WHEN JO1.IDSource != 'Drivers License' AND JO1.IDSource != '' AND JO1.JointOwnerType != 'MI' THEN JO1.IDNumber END AS IDNumber
	, CASE WHEN JO1.IDSource != 'Drivers License' AND JO1.IDSource != '' AND JO1.JointOwnerType != 'MI' THEN JO1.IDIssueDate END AS IDIssueDate
	, CASE WHEN JO1.IDSource != 'Drivers License' AND JO1.IDSource != '' AND JO1.JointOwnerType != 'MI' THEN JO1.IDExpireDate END AS IDExpirationDate

	, JO2.FullName AS JS1FullName
	, CASE WHEN JO2.JointOwnerType = 'MI' THEN 'X' END AS JO2VerificationNo
	, CASE WHEN JO2.IDSource = 'Drivers License' AND JO2.JointOwnerType != 'MI' THEN 'X' END AS JS1DriversLicenseYes
	, CASE WHEN JO2.IDSource = 'Drivers License' AND JO2.JointOwnerType != 'MI' THEN JO2.IDNumber END AS JS1DriversLicenseNum
	, CASE WHEN JO2.IDSource = 'Drivers License' AND JO2.JointOwnerType != 'MI' THEN JO2.IDState END AS JS1DriversLicenseState
	, CASE WHEN JO2.IDSource = 'Drivers License' AND JO2.JointOwnerType != 'MI' THEN JO2.IDIssueDate END AS JS1DLIssueDate
	, CASE WHEN JO2.IDSource = 'Drivers License' AND JO2.JointOwnerType != 'MI' THEN JO2.IDExpireDate END AS JS1DLExpirationDate
	, CASE WHEN JO2.IDSource != 'Drivers License' AND JO2.IDSource != '' AND JO2.JointOwnerType != 'MI' THEN 'X' END AS JS1OtherIDYes
	, CASE WHEN JO2.IDSource != 'Drivers License' AND JO2.IDSource != '' AND JO2.JointOwnerType != 'MI' THEN JO2.IDNumber END AS JS1IDNumber
	, CASE WHEN JO2.IDSource != 'Drivers License' AND JO2.IDSource != '' AND JO2.JointOwnerType != 'MI' THEN JO2.IDIssueDate END AS JS1IDIssueDate
	, CASE WHEN JO2.IDSource != 'Drivers License' AND JO2.IDSource != '' AND JO2.JointOwnerType != 'MI' THEN JO2.IDExpireDate END AS JS1IDExpirationDate

	, JO3.FullName AS JS2FullName
	, CASE WHEN JO3.JointOwnerType = 'MI' THEN 'X' END AS JO3VerificationNo
	, CASE WHEN JO3.IDSource = 'Drivers License' AND JO3.JointOwnerType != 'MI' THEN 'X' END AS JS2DriversLicenseYes
	, CASE WHEN JO3.IDSource = 'Drivers License' AND JO3.JointOwnerType != 'MI' THEN JO3.IDNumber END AS JS2DriversLicenseNum
	, CASE WHEN JO3.IDSource = 'Drivers License' AND JO3.JointOwnerType != 'MI' THEN JO3.IDState END AS JS2DriversLicenseState
	, CASE WHEN JO3.IDSource = 'Drivers License' AND JO3.JointOwnerType != 'MI' THEN JO3.IDIssueDate END AS JS2DLIssueDate
	, CASE WHEN JO3.IDSource = 'Drivers License' AND JO3.JointOwnerType != 'MI' THEN JO3.IDExpireDate END AS JS2DLExpirationDate
	, CASE WHEN JO3.IDSource != 'Drivers License' AND JO3.IDSource != '' AND JO3.JointOwnerType != 'MI' THEN 'X' END AS JS2OtherIDYes
	, CASE WHEN JO3.IDSource != 'Drivers License' AND JO3.IDSource != '' AND JO3.JointOwnerType != 'MI' THEN JO3.IDNumber END AS JS2IDNumber
	, CASE WHEN JO3.IDSource != 'Drivers License' AND JO3.IDSource != '' AND JO3.JointOwnerType != 'MI' THEN JO3.IDIssueDate END AS JS2IDIssueDate
	, CASE WHEN JO3.IDSource != 'Drivers License' AND JO3.IDSource != '' AND JO3.JointOwnerType != 'MI' THEN JO3.IDExpireDate END AS JS2IDExpirationDate
FROM NewMemberRequest AS NMR
	LEFT OUTER JOIN NewMemberHome AS Home ON NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork AS Work ON NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetJO(@TrackingNum, @jo1seq) AS JO1 ON NMR.TrackingNum = JO1.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetJO(@TrackingNum, @jo2seq) AS JO2 ON NMR.TrackingNum = JO2.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetJO(@TrackingNum, @jo3seq) AS JO3 ON NMR.TrackingNum = JO3.TrackingNum
WHERE NMR.TrackingNum = @TrackingNum


Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_D23Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [IMS].[spCCCU_D23Enable] @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @docsubname CHAR(100)
DECLARE @newdocsub CHAR(100)
DECLARE @count INT
DECLARE @docindex INT

DECLARE curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT '' AS docsubname
	FROM NewMemberJointOwner AS JO
	RIGHT OUTER JOIN NewMemberRequest AS NMR ON JO.TrackingNum = NMR.TrackingNum
	LEFT JOIN NewMemberSubAccount AS SA ON SA.TrackingNum = NMR.TrackingNum
	WHERE NMR.TrackingNum = @TrackingNum AND NMR.Processed = 999 AND JO.JointOwnerType = 'JS'
		AND (
				(NMR.Created = 'I' OR JO.CreateHost <> '')
			)

OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @newdocsub = 'Business Account Change - Add/Remove Authorized Signer(s) ' + @docsubname
IF @docsubname Is Null
BEGIN
	SET @newdocsub = 'Business Account Change - Add/Remove Authorized Signer(s)'
END
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
WHILE @@FETCH_STATUS = 0
BEGIN
	SET @count = @count + 1
	PRINT @count
		IF @count = 1
	BEGIN
		SET @docindex = @docindex + 1
		INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END
		FETCH NEXT FROM curs INTO @docsubname
	PRINT @docsubname
	IF @@FETCH_STATUS = 0
	BEGIN
		SET @newdocsub = (RTRIM(@newdocsub) + '' + RTRIM(@docsubname))
		PRINT @newdocsub
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex
	END
END
CLOSE curs
DEALLOCATE curs
SELECT * FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
DELETE FROM NewMemberDoc WHERE TrackingNum = @TrackingNum

Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_D23Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [IMS].[spCCCU_D23Fields] @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
Declare @joseq int
Declare @jo1seq int
Declare @jo2seq int
Declare @jo3seq int
Declare @jo4seq int
Declare @count int

Declare curs2 CURSOR FOR
	SELECT  CONVERT(int, JO.Sequence)
	from NewMemberJointOwner As JO
	INNER JOIN NewMemberJointLink AS JL ON JO.Sequence = JL.JointSequence AND JL.TrackingNum = @TrackingNum
	INNER JOIN NewMemberSubAccount AS SA ON JL.SubAccountSequence = SA.Sequence AND SA.TrackingNum = @TrackingNum
	WHERE JO.TrackingNum = @TrackingNum AND JO.JointOwnerType = 'JS'
	GROUP BY CONVERT(int, JO.Sequence)
--IF @@ROWCOUNT = 0
OPEN curs2
FETCH NEXT FROM curs2 INTO @joseq
SET @count = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
      	IF (@count = 0 AND @DocIndex = 1) OR (@count = 4 AND @DocIndex = 2) OR (@count = 8 AND @DocIndex = 3)
		BEGIN
			Set @jo1seq = @joseq
		END
	IF (@count = 1 AND @DocIndex = 1) OR (@count = 5 AND @DocIndex = 2) OR (@count = 9 AND @DocIndex = 3)
		BEGIN
			Set @jo2seq = @joseq		
		END
	IF (@count = 2 AND @DocIndex = 1) OR (@count = 6 AND @DocIndex = 2) OR (@count = 10 AND @DocIndex = 3)
		BEGIN
			Set @jo3seq = @joseq		
		END
	IF (@count = 3 AND @DocIndex = 1) OR (@count = 7 AND @DocIndex = 2) OR (@count = 11 AND @DocIndex = 3)
		BEGIN
			Set @jo4seq = @joseq		
		END
      	FETCH NEXT FROM curs2 INTO @joseq
	SET @count = @count + 1
	PRINT @count
   END
CLOSE curs2
DEALLOCATE curs2
SELECT @DocIndex As DocIndex
	, RTRIM(NMR.OrganizationName) AS OrgName
	, CASE NMR.AccountClass
		WHEN 'O' THEN RTRIM(Work.Address1 + CASE ISNULL(Work.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Work.Address2) END + CASE ISNULL(Work.Address3, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Work.Address3) END)
		ELSE RTRIM(Home.Address1 + CASE ISNULL(Home.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Home.Address2) END + CASE ISNULL(Home.Address3, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Home.Address3) END)
	  END AS Address
	, CASE NMR.AccountClass
		WHEN 'O' THEN Work.City
		ELSE Home.City
	  END AS City
	, CASE NMR.AccountClass
		WHEN 'O' THEN Work.State
		ELSE Home.State
	  END AS State
	, CASE NMR.AccountClass
		WHEN 'O' THEN CASE LEN(Work.Zip) WHEN 9 THEN LEFT(Work.zip, 5) + '-' + Right(Work.Zip, 4) ELSE Work.Zip END
		ELSE CASE LEN(Home.Zip) WHEN 9 THEN LEFT(Home.zip, 5) + '-' + Right(Home.Zip, 4) ELSE Home.Zip END
	  END AS Zip		
	, CASE NMR.AccountClass
		WHEN 'O' THEN Work.AreaCode
		ELSE Home.AreaCode
	  END AS AC
	, CASE NMR.AccountClass
		WHEN 'O' THEN LEFT(Work.Phone, 3) + '-' + RIGHT(RTRIM(Work.Phone), 4)
		ELSE LEFT(Home.Phone, 3) + '-' + RIGHT(RTRIM(Home.Phone), 4)
	  END AS Phone
	, CASE NMR.AccountClass
		WHEN 'O' THEN LEFT(Work.Ext, 3) + '-' + RIGHT(RTRIM(Work.Ext), 4)
		ELSE LEFT(Home.Ext, 3) + '-' + RIGHT(RTRIM(Home.Ext), 4)
	  END AS Ext
	, CASE NMR.AccountClass WHEN 'P' THEN Left(NMR.SSN, 3) + '-' + LEFT(RIGHT(NMR.SSN, 6), 2) + '-' + RIGHT(NMR.SSN, 4) ELSE LEFT(NMR.SSN, 2) + '-' + RIGHT(NMR.SSN, 7) END AS SSN

	, RTRIM(JO1.FName) AS JO1FName
	, RTRIM(JO1.MInitial) AS JO1MInitial
	, RTRIM(JO1.LName) AS JO1LName
	, LEFT(JO1.SSN, 3) + '-' + LEFT(RIGHT(JO1.SSN, 6),2) + '-' + RIGHT(JO1.SSN,4) AS JO1SSN
	, RTRIM(JO1.Address) AS JO1Address
	, RTRIM(JO1.City) AS JO1City
	, RTRIM(JO1.State) AS JO1State
	, RTRIM(JO1.Zip) AS JO1Zip
	, RTRIM(JO1.DriversLicenseNum) AS JO1DriversLicenseNum
	, JO1.PhoneAC AS JO1AC
	, LEFT(JO1.Phone, 3) + '-' + RIGHT(RTRIM(JO1.Phone), 4) AS JO1Phone
	, JO1.WPhoneAC AS JO1WorkAC
	, LEFT(JO1.WPhone, 3) + '-' + RIGHT(RTRIM(JO1.WPhone), 4) AS JO1WorkPhone
	, JO1.DOB AS JO1DOB

	, RTRIM(JO2.FName) AS JO2FName
	, RTRIM(JO2.MInitial) AS JO2MInitial
	, RTRIM(JO2.LName) AS JO2LName
	, LEFT(JO2.SSN, 3) + '-' + LEFT(RIGHT(JO2.SSN, 6),2) + '-' + RIGHT(JO2.SSN,4) AS JO2SSN
	, RTRIM(JO2.Address) AS JO2Address
	, RTRIM(JO2.City) AS JO2City
	, RTRIM(JO2.State) AS JO2State
	, RTRIM(JO2.Zip) AS JO2Zip
	, RTRIM(JO2.DriversLicenseNum) AS JO2DriversLicenseNum
	, JO2.PhoneAC AS JO2AC
	, LEFT(JO2.Phone, 3) + '-' + RIGHT(RTRIM(JO2.Phone), 4) AS JO2Phone
	, JO2.WPhoneAC AS JO2WorkAC
	, LEFT(JO2.WPhone, 3) + '-' + RIGHT(RTRIM(JO2.WPhone), 4) AS JO2WorkPhone
	, JO2.DOB AS JO2DOB

	, RTRIM(JO3.FName) AS JO3FName
	, RTRIM(JO3.MInitial) AS JO3MInitial
	, RTRIM(JO3.LName) AS JO3LName
	, LEFT(JO3.SSN, 3) + '-' + LEFT(RIGHT(JO3.SSN, 6),2) + '-' + RIGHT(JO3.SSN,4) AS JO3SSN
	, RTRIM(JO3.Address) AS JO3Address
	, RTRIM(JO3.City) AS JO3City
	, RTRIM(JO3.State) AS JO3State
	, RTRIM(JO3.Zip) AS JO3Zip
	, RTRIM(JO3.DriversLicenseNum) AS JO3DriversLicenseNum
	, JO3.PhoneAC AS JO3AC
	, LEFT(JO3.Phone, 3) + '-' + RIGHT(RTRIM(JO3.Phone), 4) AS JO3Phone
	, JO3.WPhoneAC AS JO3WorkAC
	, LEFT(JO3.WPhone, 3) + '-' + RIGHT(RTRIM(JO3.WPhone), 4) AS JO3WorkPhone
	, JO3.DOB AS JO3DOB

	, RTRIM(JO4.FName) AS JO4FName
	, RTRIM(JO4.MInitial) AS JO4MInitial
	, RTRIM(JO4.LName) AS JO4LName
	, LEFT(JO4.SSN, 3) + '-' + LEFT(RIGHT(JO4.SSN, 6),2) + '-' + RIGHT(JO4.SSN,4) AS JO4SSN
	, RTRIM(JO4.Address) AS JO4Address
	, RTRIM(JO4.City) AS JO4City
	, RTRIM(JO4.State) AS JO4State
	, RTRIM(JO4.Zip) AS JO4Zip
	, RTRIM(JO4.DriversLicenseNum) AS JO4DriversLicenseNum
	, JO4.PhoneAC AS JO4AC
	, LEFT(JO4.Phone, 3) + '-' + RIGHT(RTRIM(JO4.Phone), 4) AS JO4Phone
	, JO4.WPhoneAC AS JO4WorkAC
	, LEFT(JO4.WPhone, 3) + '-' + RIGHT(RTRIM(JO4.WPhone), 4) AS JO4WorkPhone
	, JO4.DOB AS JO4DOB

	, RTRIM(JO5.FName) AS JO5FName
	, RTRIM(JO5.MInitial) AS JO5MInitial
	, RTRIM(JO5.LName) AS JO5LName
	, LEFT(JO5.SSN, 3) + '-' + LEFT(RIGHT(JO5.SSN, 6),2) + '-' + RIGHT(JO5.SSN,4) AS JO5SSN
	, RTRIM(JO5.Address) AS JO5Address
	, RTRIM(JO5.City) AS JO5City
	, RTRIM(JO5.State) AS JO5State
	, RTRIM(JO5.Zip) AS JO5Zip
	, RTRIM(JO5.DriversLicenseNum) AS JO5DriversLicenseNum
	, JO5.PhoneAC AS JO5AC
	, LEFT(JO5.Phone, 3) + '-' + RIGHT(RTRIM(JO5.Phone), 4) AS JO5Phone
	, JO5.WPhoneAC AS JO5WorkAC
	, LEFT(JO5.WPhone, 3) + '-' + RIGHT(RTRIM(JO5.WPhone), 4) AS JO5WorkPhone
	, JO5.DOB AS JO5DOB

	, RTRIM(JO6.FName) AS JO6FName
	, RTRIM(JO6.MInitial) AS JO6MInitial
	, RTRIM(JO6.LName) AS JO6LName
	, LEFT(JO6.SSN, 3) + '-' + LEFT(RIGHT(JO6.SSN, 6),2) + '-' + RIGHT(JO6.SSN,4) AS JO6SSN
	, RTRIM(JO6.Address) AS JO6Address
	, RTRIM(JO6.City) AS JO6City
	, RTRIM(JO6.State) AS JO6State
	, RTRIM(JO6.Zip) AS JO6Zip
	, RTRIM(JO6.DriversLicenseNum) AS JO6DriversLicenseNum
	, JO6.PhoneAC AS JO6AC
	, LEFT(JO6.Phone, 3) + '-' + RIGHT(RTRIM(JO6.Phone), 4) AS JO6Phone
	, JO6.WPhoneAC AS JO4WorkAC
	, LEFT(JO6.WPhone, 3) + '-' + RIGHT(RTRIM(JO6.WPhone), 4) AS JO6WorkPhone
	, JO6.DOB AS JO6DOB

	, '' AS DelAS01Name
	, '' AS DelAS02Name
	, '' AS DelAS03Name
	, '' AS DelAS04Name

	, CASE WHEN SASDA.Sequence != '' THEN 'X' ELSE '' END AS CheckingYes
	, CASE WHEN SASDA.Sequence != '' THEN '' ELSE 'X' END AS CheckingNo
	, CASE WHEN LOWER(LEFT(Q1.Response, 1)) = 'y' THEN 'X' END AS YesQuestion1
	, CASE WHEN LOWER(LEFT(Q1.Response, 1)) != 'y' THEN 'X' END AS NoQuestion1
	, CASE WHEN LOWER(LEFT(Q1.Response, 1)) = 'y' THEN RTRIM(Q2.Response) END AS Question2
	, CASE WHEN LOWER(LEFT(Q3.Response, 1)) = 'y' THEN 'X' END AS YesQuestion3
	, CASE WHEN LOWER(LEFT(Q3.Response, 1)) != 'y' THEN 'X' END AS NoQuestion3
	, CASE WHEN LOWER(LEFT(Q4.Response, 1)) = 'y' THEN 'X' END AS YesQuestion4
	, CASE WHEN LOWER(LEFT(Q4.Response, 1)) != 'y' THEN 'X' END AS NoQuestion4
	,	SAODP1.Description + 
		CASE WHEN SAODP2.Description != '' THEN CHAR(13) + CHAR(10) + SAODP2.Description ELSE '' END + 
		CASE WHEN SAODP3.Description != '' THEN CHAR(13) + CHAR(10) + SAODP3.Description ELSE '' END +
		CASE WHEN SAODP4.Description != '' THEN CHAR(13) + CHAR(10) + SAODP4.Description ELSE '' END +
		CASE WHEN SAODP5.Description != '' THEN CHAR(13) + CHAR(10) + SAODP5.Description ELSE '' END +
		CASE WHEN SAODP6.Description != '' THEN CHAR(13) + CHAR(10) + SAODP6.Description ELSE '' END
		AS OverDraft
FROM NewMemberRequest AS NMR
	LEFT OUTER JOIN NewMemberHome AS Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork AS Work On NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'JS', '', '') AS JO1 ON NMR.TrackingNum = JO1.TrackingNum AND JO1.JointSequence = 1
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'JS', '', '') AS JO2 ON NMR.TrackingNum = JO2.TrackingNum AND JO2.JointSequence = 2
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'JS', '', '') AS JO3 ON NMR.TrackingNum = JO3.TrackingNum AND JO3.JointSequence = 3
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'JS', '', '') AS JO4 ON NMR.TrackingNum = JO4.TrackingNum AND JO4.JointSequence = 4
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'JS', '', '') AS JO5 ON NMR.TrackingNum = JO5.TrackingNum AND JO5.JointSequence = 5
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'JS', '', '') AS JO6 ON NMR.TrackingNum = JO6.TrackingNum AND JO6.JointSequence = 6
	LEFT OUTER JOIN fnCCCU_GetSA(@TrackingNum, 'SDA', 'S') AS SASDA ON NMR.TrackingNum = SASDA.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetQuestion(@TrackingNum, '1') AS Q1 ON NMR.TrackingNum = Q1.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetQuestion(@TrackingNum, '2') AS Q2 ON NMR.TrackingNum = Q2.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetQuestion(@TrackingNum, '3') AS Q3 ON NMR.TrackingNum = Q3.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetQuestion(@TrackingNum, '4') AS Q4 ON NMR.TrackingNum = Q4.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetSAODP(@TrackingNum, '1') AS SAODP1 ON NMR.TrackingNum = SAODP1.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetSAODP(@TrackingNum, '2') AS SAODP2 ON NMR.TrackingNum = SAODP2.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetSAODP(@TrackingNum, '3') AS SAODP3 ON NMR.TrackingNum = SAODP3.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetSAODP(@TrackingNum, '4') AS SAODP4 ON NMR.TrackingNum = SAODP4.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetSAODP(@TrackingNum, '5') AS SAODP5 ON NMR.TrackingNum = SAODP5.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetSAODP(@TrackingNum, '6') AS SAODP6 ON NMR.TrackingNum = SAODP6.TrackingNum
WHERE NMR.TrackingNum = @TrackingNum
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_D2Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [IMS].[spCCCU_D2Enable] @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
--Declare @TrackingNum int
--DROP TABLE #docs
--DEALLOCATE curs
--Set @TrackingNum = 1477
Declare @docsubname char(100)
Declare @newdocsub char(100)
Declare @count int
Declare @docindex int
--CREATE TABLE #docs(docindex int identity Primary Key, docsubname char(100))
Declare curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT '' AS docsubname
	FROM NewMemberRequest AS NMR
	WHERE NMR.TrackingNum = @TrackingNum AND NMR.Processed = 999 AND NMR.Created = 'Y' AND NMR.AccountType IN ('M1', 'M2', 'M3', 'P') AND NMR.Citizenship = 'NR'
--IF @@ROWCOUNT = 0
OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @newdocsub = 'W8 Account Card (for non US citizens) ' + @docsubname
IF @docsubname Is Null
BEGIN
	SET @newdocsub = 'W8 Account Card (for non US citizens)'
END
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count
      	IF @count = 1
	BEGIN
		Set @docindex = @docindex + 1
     		 INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END
      	FETCH NEXT FROM curs INTO @docsubname
	PRINT @docsubname
	IF @@FETCH_STATUS = 0
	BEGIN
		SET @newdocsub = (RTRIM(@newdocsub) + ', ' + RTRIM(@docsubname))
		PRINT @newdocsub
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex
	END
   END
CLOSE curs
DEALLOCATE curs
Select *  FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Delete FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_D2Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [IMS].[spCCCU_D2Fields] @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
Declare @joseq int
Declare @jo1seq int
Declare @jo2seq int
Declare @jo3seq int
Declare @jo4seq int
Declare @count int
--Set @jo1seq = 1
--Set @jo2seq = 1
--Set @jo3seq = 1
--Set @jo4seq = 1
--CREATE TABLE #docs(id int identity Primary Key, docindex int, j1FullName char(100), j1FullAddress char(100), j1FullPhone char(12), j1DOB char(10), j1SSN char(11), j1ID char(20), j1IDIssueDate  char(10), j1IDExpDate  char(10), j1IDState  char(2), j2FullName char(100), j2FullAddress char(100), j2FullPhone char(11), j2DOB char(10), j2SSN char(11), j2ID char(20), j2IDIssueDate  char(10), j2IDExpDate  char(10), j2IDState  char(2), j3FullName char(100), j3FullAddress char(100), j3FullPhone char(11), j3DOB char(10), j3SSN char(11), j3ID char(20), j3IDIssueDate  char(10), j3IDExpDate  char(10), j3IDState  char(2), j4FullName char(100), j4FullAddress char(100), j4FullPhone char(11), j4DOB char(10), j4SSN char(11), j4ID char(20), j4IDIssueDate  char(10), j4IDExpDate  char(10), j4IDState  char(2))
Declare curs2 CURSOR FOR
	SELECT  CONVERT(int, JO.Sequence)
	from NewMemberJointOwner As JO
	INNER JOIN NewMemberJointLink AS JL ON JO.Sequence = JL.JointSequence AND JL.TrackingNum = @TrackingNum
	INNER JOIN NewMemberSubAccount AS SA ON JL.SubAccountSequence = SA.Sequence AND SA.TrackingNum = @TrackingNum
	WHERE JO.TrackingNum = @TrackingNum AND (JO.JointOwnerType IN ('BE', 'JO', 'MI')) AND SA.ProductType IN ('PSA', 'RSA', 'SDA', 'CC')
	GROUP BY CONVERT(int, JO.Sequence)
--IF @@ROWCOUNT = 0
OPEN curs2
FETCH NEXT FROM curs2 INTO @joseq
SET @count = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
      	IF (@count = 0 AND @DocIndex = 1) OR (@count = 4 AND @DocIndex = 2) OR (@count = 8 AND @DocIndex = 3)
		BEGIN
			Set @jo1seq = @joseq
		END
	IF (@count = 1 AND @DocIndex = 1) OR (@count = 5 AND @DocIndex = 2) OR (@count = 9 AND @DocIndex = 3)
		BEGIN
			Set @jo2seq = @joseq		
		END
	IF (@count = 2 AND @DocIndex = 1) OR (@count = 6 AND @DocIndex = 2) OR (@count = 10 AND @DocIndex = 3)
		BEGIN
			Set @jo3seq = @joseq		
		END
	IF (@count = 3 AND @DocIndex = 1) OR (@count = 7 AND @DocIndex = 2) OR (@count = 11 AND @DocIndex = 3)
		BEGIN
			Set @jo4seq = @joseq		
		END
      	FETCH NEXT FROM curs2 INTO @joseq
	SET @count = @count + 1
	PRINT @count
   END
CLOSE curs2
DEALLOCATE curs2
SELECT @DocIndex As DocIndex
	, JO1.FullName AS J1FullName
	, JO1.Address AS J1Address
	, JO1.CityStateZip AS J1CityStateZip
	, JO1.HPhoneFull AS J1HPhoneFull
	, JO1.SSN AS J1SSN
	, JO1.DOB AS J1DOB
	, JO1.IDSource AS J1IDType
	, JO1.IDState AS J1IDState
	, JO1.IDNumber AS J1ID
	, JO1.IDIssueDate AS J1IDIssueDate
	, JO1.IDExpireDate AS J1IDExpireDate
	, JO1.WPhoneFull AS J1WPhoneFull
	, JO1.CPhoneFull AS J1CPhoneFull
--	, JO1.Employer AS J1Employer
	, JO1.Title AS J1Title
	, JO2.FullName AS J2FullName
	, JO2.Address AS J2Address
	, JO2.CityStateZip AS J2CityStateZip
	, JO2.HPhoneFull AS J2HPhoneFull
	, JO2.SSN AS J2SSN
	, JO2.DOB AS J2DOB
	, JO2.IDSource AS J2IDType
	, JO2.IDState AS J2IDState
	, JO2.IDNumber AS J2ID
	, JO2.IDIssueDate AS J2IDIssueDate
	, JO2.IDExpireDate AS J2IDExpireDate
	, JO2.WPhoneFull AS J2WPhoneFull
	, JO2.CPhoneFull AS J2CPhoneFull
--	, JO1.Employer AS J1Employer
	, JO1.Title AS J1Title
	, RTRIM(BE1.Suffixes) AS BE1Suffix
	, RTRIM(BE1.FullName) AS BE1FullName
	, RTRIM(BE1.Relationship) AS BE1Relationship
	, RTRIM(BE1.Address) AS BE1Address
	, RTRIM(CONVERT(CHAR(10), BE1.DOB, 101)) AS BE1DOB
	, RTRIM(BE1.CityStateZip) AS BE1CityStateZip
	, RTRIM(BE1.SSN) AS BE1SSN
	, RTRIM(BE2.Suffixes) AS BE2Suffix
	, RTRIM(BE2.FullName) AS BE2FullName
	, RTRIM(BE2.Relationship) AS BE2Relationship
	, RTRIM(BE2.Address) AS BE2Address
	, RTRIM(CONVERT(CHAR(10), BE2.DOB, 101)) AS BE2DOB
	, RTRIM(BE2.CityStateZip) AS BE2CityStateZip
	, RTRIM(BE2.SSN) AS BE2SSN
	, RTRIM(JOS1.Suffixes) AS JO1Suffix
	, RTRIM(JOS2.Suffixes) AS JO2Suffix
	, CASE WHEN RTRIM(LTRIM(JOS1.Suffixes)) != '' OR RTRIM(LTRIM(JOS2.Suffixes)) != '' THEN 'X' END AS JointYes0
	, CASE WHEN RTRIM(LTRIM(JOS1.Suffixes)) != '' THEN 'X' END AS JointYes1
	, CASE WHEN RTRIM(LTRIM(JOS2.Suffixes)) != '' THEN 'X' END AS JointYes2
	, CASE WHEN ATM.TypeCode != '' OR DEBIT.TypeCode != '' THEN 'X' END AS YesPlasticCard
	, CASE WHEN NMR.C24Access = 'Y' OR NMR.PIN = '1' THEN 'X' END AS YesC24Access
	, CASE WHEN NMR.DirectDeposit = 'Y' THEN 'X' END AS YesDirectDeposit
	, CASE WHEN NMR.AccountType = 'P' or NMR.AccountType = 'PN' THEN 'X' END AS YesLoanLiner
	, CASE WHEN SASAV.Sequence != '' OR SACLN.Sequence != '' OR SALTA.Sequence != '' OR SATSV.Sequence != '' THEN 'X' END AS YesSASAV
--	, CASE WHEN SACLN.Sequence != '' THEN 'X' END AS YesSACLN
	, CASE WHEN SAUGM.Sequence != '' THEN 'X' END AS YesSAUGM
	, CASE WHEN SAXMS.Sequence != '' OR SADRM.Sequence != '' THEN 'X' END AS YesSACLB
	, CASE WHEN SAXMS.Created = 'Y' OR SADRM.Created = 'Y' THEN ISNULL(RTRIM(SAXMS.Description), '') + ISNULL(RTRIM(SADRM.Description), '') END AS SACLBDesc
--	, CASE WHEN SAXMS.Sequence != '' THEN 'X' END AS YesSAXMS
--	, CASE WHEN SADRM.Sequence != '' THEN 'X' END AS YesSADRM
	, CASE WHEN SACHK.Sequence != '' OR SASSC.Sequence != '' OR SAMCC.Sequence != '' OR SASBA.Sequence != '' OR SATCK.Sequence != '' OR SAECK.Sequence != '' THEN 'X' END AS YesSACHK
	, CASE WHEN SACHK.Created = 'Y' OR SASSC.Created = 'Y' OR SAMCC.Created = 'Y' OR SASBA.Created = 'Y' OR SATCK.Created = 'Y' OR SAECK.Created = 'Y' THEN ISNULL(RTRIM(SACHK.Description), '') + ISNULL(RTRIM(SASSC.Description), '') + ISNULL(RTRIM(SAMCC.Description), '') + ISNULL(RTRIM(SASBA.Description), '') + ISNULL(RTRIM(SATCK.Description), '') + ISNULL(RTRIM(SAECK.Description), '') END AS SACHKDesc
--	, CASE WHEN SASSC.Sequence != '' THEN 'X' END AS YesSASSC
--	, CASE WHEN SAMCC.Sequence != '' THEN 'X' END AS YesSAMCC
	, CASE WHEN SAMMC.Sequence != '' THEN 'X' END AS YesSAMMC
	, CASE WHEN SACER.Sequence != '' THEN 'X' END AS YesSACER
--	, CASE WHEN SASBA.Sequence != '' THEN 'X' END AS YesSASBA
	, CASE WHEN SAIRA.Sequence != '' THEN 'X' END AS YesSAIRA
--	, CASE WHEN LALOC.Sequence != '' THEN 'X' END AS YesLALOC
--	, CASE WHEN LANWA.Sequence != '' OR LAUDA.Sequence != '' OR LANWB.Sequence != '' OR LAUDB.Sequence != '' OR LANWR.Sequence != '' OR LAUDR.Sequence != '' THEN 'X' END AS YesLAVEH
--	, CASE WHEN LAVSC.Sequence != '' OR LAVSG.Sequence != '' OR LAVSP.Sequence != '' THEN 'X' END AS YesLAVISA
--	, CASE WHEN LAMCC.Sequence != '' OR LAMCG.Sequence != '' THEN 'X' END AS YesLAMC
	, CASE WHEN ATM.Sequence != '' THEN 'X' END AS YesSAATM
	, CASE WHEN DEBIT.Sequence != '' THEN 'X' END AS YesSAODP
--	, CASE WHEN IVRAccess.Sequence != '' THEN 'X' END AS YesIVR
	, CASE WHEN LoanPlan.Sequence != '' THEN 'X' END AS YesLP
	, CASE WHEN LoanPlan.JointName = '' AND LoanPlan.JointSSN = '' THEN 'X' END AS YesLPIndividual
	, CASE WHEN LoanPlan.JointName != '' OR LoanPlan.JointSSN != '' THEN 'X' END AS YesLPJoint
	, CASE WHEN LoanPlan.InsuranceCode = '2' OR LoanPlan.InsuranceCode = '3' OR LoanPlan.InsuranceCode = '5' OR LoanPlan.InsuranceCode = '11' THEN 'X' END AS YesCD1
	, CASE WHEN LoanPlan.InsuranceCode != '2' AND LoanPlan.InsuranceCode != '3' AND LoanPlan.InsuranceCode != '5' AND LoanPlan.InsuranceCode != '11' THEN 'X' END AS NoCD1
	, CASE WHEN LoanPlan.InsuranceCode = '6' OR LoanPlan.InsuranceCode = '8' OR LoanPlan.InsuranceCode = '9' OR LoanPlan.InsuranceCode = '10' THEN 'X' END AS YesCD2
	, CASE WHEN LoanPlan.InsuranceCode != '6' AND LoanPlan.InsuranceCode != '8' AND LoanPlan.InsuranceCode != '9' AND LoanPlan.InsuranceCode != '10' THEN 'X' END AS NoCD2
	, CASE WHEN LoanPlan.InsuranceCode = '1' OR LoanPlan.InsuranceCode = '3' OR LoanPlan.InsuranceCode = '4' OR LoanPlan.InsuranceCode = '5' OR LoanPlan.InsuranceCode = '8' OR LoanPlan.InsuranceCode = '9' THEN 'X' END AS YesCL1
	, CASE WHEN LoanPlan.InsuranceCode != '1' AND LoanPlan.InsuranceCode != '3' AND LoanPlan.InsuranceCode != '4' AND LoanPlan.InsuranceCode != '5' AND LoanPlan.InsuranceCode != '8' AND LoanPlan.InsuranceCode != '9' THEN 'X' END AS NoCL1
	, CASE WHEN LoanPlan.InsuranceCode = '4' OR LoanPlan.InsuranceCode = '5' OR LoanPlan.InsuranceCode = '7' OR LoanPlan.InsuranceCode = '8' OR LoanPlan.InsuranceCode = '10' OR LoanPlan.InsuranceCode = '11' THEN 'X' END AS YesCL2
	, CASE WHEN LoanPlan.InsuranceCode != '4' AND LoanPlan.InsuranceCode != '5' AND LoanPlan.InsuranceCode != '7' AND LoanPlan.InsuranceCode != '8' AND LoanPlan.InsuranceCode != '10' AND LoanPlan.InsuranceCode != '11' THEN 'X' END AS NoCL2
	--, CASE WHEN SAODSAV.Sequence != '' THEN 'X' END AS YesODSAV
	--, CASE WHEN SAODSAV.Sequence != '' THEN SAODSAV.OverdraftSequence END AS ODSAVSeq
	--, CASE WHEN SAODMMA.Sequence != '' THEN 'X' END AS YesODMMA
	--, CASE WHEN SAODMMA.Sequence != '' THEN SAODMMA.OverdraftSequence END AS ODMMASeq
	--, CASE WHEN SAODPAL.Sequence != '' THEN 'X' END AS YesODPAL
	--, CASE WHEN SAODPAL.Sequence != '' THEN SAODPAL.OverdraftSequence END AS ODPALSeq
	--, CASE WHEN SAODHEQ.Sequence != '' THEN 'X' END AS YesODHEQ
	--, CASE WHEN SAODHEQ.Sequence != '' THEN SAODHEQ.OverdraftSequence END AS ODHEQSeq
	, CASE WHEN LAVSP.Sequence != '' THEN Work.EmployerName END AS CCEmployerName
	, CASE WHEN LAVSP.Sequence != '' THEN Work.JobTitle END AS CCJobTitle
	, CASE WHEN LAVSP.Sequence != '' THEN Work.ProfessionYears + ' years' END AS CCProfessionYears
	, CASE WHEN LAVSP.Sequence != '' THEN Work.GrossIncome END AS CCGrossIncome
	, CASE WHEN LoanPlan.Sequence != '' THEN 'X' END AS YesLoanPlan
	, CASE WHEN LoanPlan.Sequence != '' AND LoanPlan.JointName = '' THEN 'X' END AS IndividualLoanPlan
	, CASE WHEN LoanPlan.Sequence != '' AND LoanPlan.JointName != '' THEN 'X' END AS JointLoanPlan
	, RTRIM(LoanPlan.JointName) AS LPJointName
	, LEFT(LoanPlan.JointSSN, 3) + '-' + LEFT(RIGHT(LoanPlan.JointSSN, 6), 2) + '-' + RIGHT(LoanPlan.JointSSN, 4) AS LPJointSSN
	, NMR.Qualification3 AS SEGQualifier
FROM NewMemberRequest As NMR
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetJO(@TrackingNum, @jo1seq) As JO1 ON NMR.TrackingNum = JO1.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetJO(@TrackingNum, @jo2seq) As JO2 ON NMR.TrackingNum = JO2.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'PD', '', '') AS BE1 ON NMR.TrackingNum = BE1.TrackingNum AND BE1.JointSequence = 1
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'PD', '', '') AS BE2 ON NMR.TrackingNum = BE2.TrackingNum AND BE2.JointSequence = 2
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'JO', 'TR', 'CU') AS JOS1 ON NMR.TrackingNum = JOS1.TrackingNum AND JOS1.JointSequence = 1
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'JO', 'TR', 'CU') AS JOS2 ON NMR.TrackingNum = JOS2.TrackingNum AND JOS2.JointSequence = 2
	LEFT OUTER JOIN fnCCCU_GetPCPlastic(@TrackingNum, 1, 'P') AS ATM ON NMR.TrackingNum = ATM.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetPCPlastic(@TrackingNum, 1, 'C') AS DEBIT ON NMR.TrackingNum = DEBIT.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetSAType(@TrackingNum, 'SAV', 'S') AS SASAV ON NMR.TrackingNum = SASAV.TrackingNum	-- Savings
	LEFT OUTER JOIN fnCCCU_GetSAType(@TrackingNum, 'LTA', 'S') AS SALTA ON NMR.TrackingNum = SALTA.TrackingNum	-- Living Trust
	LEFT OUTER JOIN fnCCCU_GetSAType(@TrackingNum, 'CLN', 'S') AS SACLN ON NMR.TrackingNum = SACLN.TrackingNum	-- Clown Club Savings
	LEFT OUTER JOIN fnCCCU_GetSAType(@TrackingNum, 'TSV', 'S') AS SATSV ON NMR.TrackingNum = SATSV.TrackingNum	-- Teen Savings
	LEFT OUTER JOIN fnCCCU_GetSAType(@TrackingNum, 'CHK', 'S') AS SACHK ON NMR.TrackingNum = SACHK.TrackingNum	-- Zilch! Checking
	LEFT OUTER JOIN fnCCCU_GetSAType(@TrackingNum, 'SSC', 'S') AS SASSC ON NMR.TrackingNum = SASSC.TrackingNum	-- Senior Service Checking
	LEFT OUTER JOIN fnCCCU_GetSAType(@TrackingNum, 'MCC', 'S') AS SAMCC ON NMR.TrackingNum = SAMCC.TrackingNum	-- Member's Choice Checking
	LEFT OUTER JOIN fnCCCU_GetSAType(@TrackingNum, 'MMC', 'S') AS SAMMC ON NMR.TrackingNum = SAMMC.TrackingNum	-- Money Market Account
	LEFT OUTER JOIN fnCCCU_GetSAType(@TrackingNum, 'CER', 'S') AS SACER ON NMR.TrackingNum = SACER.TrackingNum	-- Share Certificate
	LEFT OUTER JOIN fnCCCU_GetSAType(@TrackingNum, 'SBA', 'S') AS SASBA ON NMR.TrackingNum = SASBA.TrackingNum	-- Student Banking Account
	LEFT OUTER JOIN fnCCCU_GetSAType(@TrackingNum, 'TCK', 'S') AS SATCK ON NMR.TrackingNum = SATCK.TrackingNum	-- Teen Checking Account
	LEFT OUTER JOIN fnCCCU_GetSAType(@TrackingNum, 'ECK', 'S') AS SAECK ON NMR.TrackingNum = SAECK.TrackingNum	-- eChecking Account
	LEFT OUTER JOIN fnCCCU_GetSAType(@TrackingNum, 'XMS', 'S') AS SAXMS ON NMR.TrackingNum = SAXMS.TrackingNum	-- Christmas Club
	LEFT OUTER JOIN fnCCCU_GetSAType(@TrackingNum, 'DRM', 'S') AS SADRM ON NMR.TrackingNum = SADRM.TrackingNum	-- Dream Club
	LEFT OUTER JOIN fnCCCU_GetSAType(@TrackingNum, 'UGM', 'S') AS SAUGM ON NMR.TrackingNum = SAUGM.TrackingNum	-- UGMA
	LEFT OUTER JOIN fnCCCU_GetSAType(@TrackingNum, 'IRA', 'S') AS SAIRA ON NMR.TrackingNum = SAIRA.TrackingNum	-- Individual Retirement Account
	LEFT OUTER JOIN fnCCCU_GetSAType(@TrackingNum, 'LOC', 'L') AS LALOC ON NMR.TrackingNum = LALOC.TrackingNum	-- Personal Access Line Of Credit
	LEFT OUTER JOIN fnCCCU_GetSAType(@TrackingNum, 'NWA', 'L') AS LANWA ON NMR.TrackingNum = LANWA.TrackingNum	-- New Auto
	LEFT OUTER JOIN fnCCCU_GetSAType(@TrackingNum, 'UDA', 'L') AS LAUDA ON NMR.TrackingNum = LAUDA.TrackingNum	-- Used Auto
	LEFT OUTER JOIN fnCCCU_GetSAType(@TrackingNum, 'NWB', 'L') AS LANWB ON NMR.TrackingNum = LANWB.TrackingNum	-- New Boat
	LEFT OUTER JOIN fnCCCU_GetSAType(@TrackingNum, 'UDB', 'L') AS LAUDB ON NMR.TrackingNum = LAUDB.TrackingNum	-- Used Boat
	LEFT OUTER JOIN fnCCCU_GetSAType(@TrackingNum, 'NWR', 'L') AS LANWR ON NMR.TrackingNum = LANWR.TrackingNum	-- New Recreational
	LEFT OUTER JOIN fnCCCU_GetSAType(@TrackingNum, 'UDR', 'L') AS LAUDR ON NMR.TrackingNum = LAUDR.TrackingNum	-- Used Recreational
	LEFT OUTER JOIN fnCCCU_GetSAType(@TrackingNum, 'VSC', 'L') AS LAVSC ON NMR.TrackingNum = LAVSC.TrackingNum	-- Visa Classic
	LEFT OUTER JOIN fnCCCU_GetSAType(@TrackingNum, 'VSG', 'L') AS LAVSG ON NMR.TrackingNum = LAVSG.TrackingNum	-- Visa Gold
	LEFT OUTER JOIN fnCCCU_GetSAType(@TrackingNum, 'VSP', 'L') AS LAVSP ON NMR.TrackingNum = LAVSP.TrackingNum	-- Visa Platinum
	LEFT OUTER JOIN fnCCCU_GetSAType(@TrackingNum, 'MCC', 'L') AS LAMCC ON NMR.TrackingNum = LAMCC.TrackingNum	-- MasterCard Classic
	LEFT OUTER JOIN fnCCCU_GetSAType(@TrackingNum, 'MCG', 'L') AS LAMCG ON NMR.TrackingNum = LAMCG.TrackingNum	-- MasterCard Gold
	LEFT OUTER JOIN fnCCCU_GetSAType(@TrackingNum, 'BUS', 'S') AS SABUS ON NMR.TrackingNum = SABUS.TrackingNum	-- Business/Organizational Savings
	LEFT OUTER JOIN fnCCCU_GetSAType(@TrackingNum, 'BCK', 'S') AS SABCK ON NMR.TrackingNum = SABCK.TrackingNum	-- Business/Organizational Checking
	LEFT OUTER JOIN fnCCCU_GetSAType(@TrackingNum, 'BCP', 'S') AS SABCP ON NMR.TrackingNum = SABCP.TrackingNum	-- Business/Organizational Checking Plus
	LEFT OUTER JOIN fnCCCU_GetSAType(@TrackingNum, 'xxx', 'S') AS SAxxx ON NMR.TrackingNum = SAxxx.TrackingNum	-- MasterMoney Check/ATM Card
	LEFT OUTER JOIN fnCCCU_GetIVR(@TrackingNum) AS IVRAccess ON NMR.TrackingNum = IVRAccess.TrackingNum		-- Teller Talk
	LEFT OUTER JOIN fnCCCU_GetLP(@TrackingNum) AS LoanPlan ON NMR.TrackingNum = LoanPlan.TrackingNum		-- Loan Plans
	--LEFT OUTER JOIN fnCCCu_GetSAODP(@TrackingNum, '', '', '') AS SAODP ON NMR.TrackingNum = SAODP.TrackingNum
	--LEFT OUTER JOIN fnCCCu_GetSAODP(@TrackingNum, 'PSA', '', 'S') AS SAODSAV ON NMR.TrackingNum = SAODSAV.TrackingNum
	--LEFT OUTER JOIN fnCCCu_GetSAODP(@TrackingNum, 'RSA', '', 'S') AS SAODMMA ON NMR.TrackingNum = SAODMMA.TrackingNum
	--LEFT OUTER JOIN fnCCCu_GetSAODP(@TrackingNum, 'LOC', '', 'L') AS SAODPAL ON NMR.TrackingNum = SAODPAL.TrackingNum
	--LEFT OUTER JOIN fnCCCu_GetSAODP(@TrackingNum, 'HE', '', 'L') AS SAODHEQ ON NMR.TrackingNum = SAODHEQ.TrackingNum
WHERE NMR.TrackingNum = @TrackingNum
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_D30Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCCCU_D30Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
--Declare @TrackingNum int
--DROP TABLE #docs
--DEALLOCATE curs
--Set @TrackingNum = 1477

Declare @docsubname char(100)
Declare @newdocsub char(200)
Declare @docsuffix char(2)
Declare @count int
Declare @docindex int


--CREATE TABLE #docs(docindex int identity Primary Key, docsubname char(100))

Declare curs CURSOR FOR
	SELECT SA.Sequence, CONVERT(char(2), SA.Suffix)
	FROM NewMemberRequest AS NMR INNER JOIN NewMemberSubAccount AS SA ON NMR.TrackingNum = SA.TrackingNum
	WHERE NMR.TrackingNum = @TrackingNum AND SA.SLType = 'L' AND SA.CollateralCode > 1000 AND SA.ProductType = 'CC' AND SA.Created != 'H' AND @Param1 =  ''

--IF @@ROWCOUNT = 0

OPEN curs
FETCH NEXT FROM curs INTO @docsubname, @docsuffix
SET @newdocsub = 'Credit Card Disclosure & Agreement'-- for Suffix(s) ' + CASE LEN(@docsubname) WHEN 2 THEN @docsubname WHEN 1 THEN '0' + @docsubname ELSE 'NA' END
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count

      	IF @count = 1-- or @count = 4 or @count = 7
	BEGIN
		Set @docindex = @docindex + 1
     		 INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END

      	FETCH NEXT FROM curs INTO @docsubname, @docsuffix

	IF @docsubname != NULL
	BEGIN
		SET @newdocsub = @newdocsub + ', ' + @docsubname
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex AND TrackingNum = @TrackingNum
	END
   END

CLOSE curs
DEALLOCATE curs

Select *, (SELECT DocName FROM udt_Doc WHERE DocNum = 30) AS ScanName FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Delete FROM NewMemberDoc WHERE TrackingNum = @TrackingNum

--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_D30Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCCCU_D30Fields] @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
Declare @joseq int
Declare @jo1seq int
Declare @jo2seq int
Declare @jo3seq int
Declare @jo4seq int
Declare @count int
--Set @jo1seq = 1
--Set @jo2seq = 1
--Set @jo3seq = 1
--Set @jo4seq = 1
--CREATE TABLE #docs(id int identity Primary Key, docindex int, j1FullName char(100), j1FullAddress char(100), j1FullPhone char(12), j1DOB char(10), j1SSN char(11), j1ID char(20), j1IDIssueDate  char(10), j1IDExpDate  char(10), j1IDState  char(2), j2FullName char(100), j2FullAddress char(100), j2FullPhone char(11), j2DOB char(10), j2SSN char(11), j2ID char(20), j2IDIssueDate  char(10), j2IDExpDate  char(10), j2IDState  char(2), j3FullName char(100), j3FullAddress char(100), j3FullPhone char(11), j3DOB char(10), j3SSN char(11), j3ID char(20), j3IDIssueDate  char(10), j3IDExpDate  char(10), j3IDState  char(2), j4FullName char(100), j4FullAddress char(100), j4FullPhone char(11), j4DOB char(10), j4SSN char(11), j4ID char(20), j4IDIssueDate  char(10), j4IDExpDate  char(10), j4IDState  char(2))
Declare curs2 CURSOR FOR
	SELECT  CONVERT(int, JO.Sequence)
	from NewMemberJointOwner As JO
	INNER JOIN NewMemberJointLink AS JL ON JO.Sequence = JL.JointSequence AND JL.TrackingNum = @TrackingNum
	INNER JOIN NewMemberSubAccount AS SA ON JL.SubAccountSequence = SA.Sequence AND SA.TrackingNum = @TrackingNum
	WHERE JO.TrackingNum = @TrackingNum AND SA.ProductType IN ('PSA', 'RSA', 'SDA', 'CC')
	GROUP BY CONVERT(int, JO.Sequence)
--IF @@ROWCOUNT = 0
OPEN curs2
FETCH NEXT FROM curs2 INTO @joseq
SET @count = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
      	IF (@count = 0 AND @DocIndex = 1) OR (@count = 4 AND @DocIndex = 2) OR (@count = 8 AND @DocIndex = 3)
		BEGIN
			Set @jo1seq = @joseq
		END
	IF (@count = 1 AND @DocIndex = 1) OR (@count = 5 AND @DocIndex = 2) OR (@count = 9 AND @DocIndex = 3)
		BEGIN
			Set @jo2seq = @joseq		
		END
	IF (@count = 2 AND @DocIndex = 1) OR (@count = 6 AND @DocIndex = 2) OR (@count = 10 AND @DocIndex = 3)
		BEGIN
			Set @jo3seq = @joseq		
		END
	IF (@count = 3 AND @DocIndex = 1) OR (@count = 7 AND @DocIndex = 2) OR (@count = 11 AND @DocIndex = 3)
		BEGIN
			Set @jo4seq = @joseq		
		END
      	FETCH NEXT FROM curs2 INTO @joseq
	SET @count = @count + 1
	PRINT @count
   END
CLOSE curs2
DEALLOCATE curs2
SELECT @DocIndex As DocIndex
	, RTRIM(NMR.DriversLicenseNum) AS DriversLicenseNum
	, NMR.DriversLicenseState
	, CONVERT(char(10), NMR.IDExpirationDate, 101) AS DLExpirationDate
	, RTRIM(NMR.DriversLicenseNum) + '/' + NMR.DriversLicenseState AS DL
	, CASE NMR.IDType WHEN 'D' THEN 'Drivers License' ELSE NMR.IDSource END AS IDType
	, CASE NMR.IDType WHEN 'D' THEN NMR.DriversLicenseNum ELSE NMR.IDNumber END AS ID
	, NMR.IDNumber
	, CONVERT(char(10), NMR.IDIssueDate, 101) AS IDIssueDate
	, CONVERT(char(10), NMR.IDExpirationDate, 101) AS IDExpDate
	, CONVERT(char(10), NMR.IDExpirationDate, 101) AS IDExpirationDate
	, NMR.DriversLicenseState AS IDState
	, RTRIM(JO1.FName) AS JO1FName
	, RTRIM(JO1.MInitial) AS JO1MInitial
	, RTRIM(JO1.LName) AS JO1LName
	, RTRIM(JO1.Address) AS JO1Address
	, RTRIM(JO1.City) AS JO1City
	, RTRIM(JO1.State) AS JO1State
	, RTRIM(JO1.Zip) AS JO1Zip
	, RTRIM(JO1.DriversLicenseNum) AS JO1DriversLicenseNum
	, LEFT(JO1.SSN, 3) + '-' + LEFT(RIGHT(JO1.SSN, 6),2) + '-' + RIGHT(JO1.SSN,4) AS JO1SSN
	, JO1.PhoneAC AS JO1AC
	, LEFT(JO1.Phone, 3) + '-' + RIGHT(RTRIM(JO1.Phone), 4) AS JO1Phone
	, JO1.WPhoneAC AS JO1WorkAC
	, LEFT(JO1.WPhone, 3) + '-' + RIGHT(RTRIM(JO1.WPhone), 4) AS JO1WorkPhone
	, JO1.DOB AS JO1DOB
	, RTRIM(JO2.FName) AS JO2FName
	, RTRIM(JO2.MInitial) AS JO2MInitial
	, RTRIM(JO2.LName) AS JO2LName
	, RTRIM(JO2.Address) AS JO2Address
	, RTRIM(JO2.City) AS JO2City
	, RTRIM(JO2.State) AS JO2State
	, RTRIM(JO2.Zip) AS JO2Zip
	, RTRIM(JO2.DriversLicenseNum) AS JO2DriversLicenseNum
	, LEFT(JO2.SSN, 3) + '-' + LEFT(RIGHT(JO2.SSN, 6),2) + '-' + RIGHT(JO2.SSN,4) AS JO2SSN
	, JO2.PhoneAC AS JO2AC
	, LEFT(JO2.Phone, 3) + '-' + RIGHT(RTRIM(JO2.Phone), 4) AS JO2Phone
	, JO2.WPhoneAC AS JO2WorkAC
	, LEFT(JO2.WPhone, 3) + '-' + RIGHT(RTRIM(JO2.WPhone), 4) AS JO2WorkPhone
	, JO2.DOB AS JO2DOB
	, RTRIM(JO3.FName) AS JO3FName
	, RTRIM(JO3.MInitial) AS JO3MInitial
	, RTRIM(JO3.LName) AS JO3LName
	, RTRIM(JO3.Address) AS JO3Address
	, RTRIM(JO3.City) AS JO3City
	, RTRIM(JO3.State) AS JO3State
	, RTRIM(JO3.Zip) AS JO3Zip
	, RTRIM(JO3.DriversLicenseNum) AS JO3DriversLicenseNum
	, LEFT(JO3.SSN, 3) + '-' + LEFT(RIGHT(JO3.SSN, 6),2) + '-' + RIGHT(JO3.SSN,4) AS JO3SSN
	, JO3.PhoneAC AS JO3AC
	, LEFT(JO3.Phone, 3) + '-' + RIGHT(RTRIM(JO3.Phone), 4) AS JO3Phone
	, JO3.WPhoneAC AS JO3WorkAC
	, LEFT(JO3.WPhone, 3) + '-' + RIGHT(RTRIM(JO3.WPhone), 4) AS JO3WorkPhone
	, JO3.DOB AS JO3DOB
	, RTRIM(JO4.FName) AS JO4FName
	, RTRIM(JO4.MInitial) AS JO4MInitial
	, RTRIM(JO4.LName) AS JO4LName
	, RTRIM(JO4.Address) AS JO4Address
	, RTRIM(JO4.City) AS JO4City
	, RTRIM(JO4.State) AS JO4State
	, RTRIM(JO4.Zip) AS JO4Zip
	, RTRIM(JO4.DriversLicenseNum) AS JO4DriversLicenseNum
	, LEFT(JO4.SSN, 3) + '-' + LEFT(RIGHT(JO4.SSN, 6),2) + '-' + RIGHT(JO4.SSN,4) AS JO4SSN
	, JO4.PhoneAC AS JO4AC
	, LEFT(JO4.Phone, 3) + '-' + RIGHT(RTRIM(JO4.Phone), 4) AS JO4Phone
	, JO4.WPhoneAC AS JO4WorkAC
	, LEFT(JO4.WPhone, 3) + '-' + RIGHT(RTRIM(JO4.WPhone), 4) AS JO4WorkPhone
	, JO4.DOB AS JO4DOB
	, RTRIM(JOBE1.FName) AS BE1FName
	, RTRIM(JOBE1.MInitial) AS BE1MInitial
	, RTRIM(JOBE1.LName) AS BE1LName
	, JOBE1.DOB AS BE1DOB
	, LEFT(JOBE1.SSN, 3) + '-' + LEFT(RIGHT(JOBE1.SSN, 6),2) + '-' + RIGHT(JOBE1.SSN,4) AS BE1SSN
	, RTRIM(JOBE1.Relationship) AS BE1RelToPrimary
	, CASE WHEN JOBE1.BenePercent != '' THEN RTRIM(JOBE1.BenePercent) + '%' ELSE '' END AS BE1BenePercent
	, RTRIM(JOBE2.FName) AS BE2FName
	, RTRIM(JOBE2.MInitial) AS BE2MInitial
	, RTRIM(JOBE2.LName) AS BE2LName
	, JOBE2.DOB AS BE2DOB
	, LEFT(JOBE2.SSN, 3) + '-' + LEFT(RIGHT(JOBE2.SSN, 6),2) + '-' + RIGHT(JOBE2.SSN,4) AS BE2SSN
	, RTRIM(JOBE2.Relationship) AS BE2RelToPrimary
	, CASE WHEN JOBE2.BenePercent != '' THEN RTRIM(JOBE2.BenePercent) + '%' ELSE '' END AS BE2BenePercent
	, RTRIM(JOBE3.FName) AS BE3FName
	, RTRIM(JOBE3.MInitial) AS BE3MInitial
	, RTRIM(JOBE3.LName) AS BE3LName
	, JOBE3.DOB AS BE3DOB
	, LEFT(JOBE3.SSN, 3) + '-' + LEFT(RIGHT(JOBE3.SSN, 6),2) + '-' + RIGHT(JOBE3.SSN,4) AS BE3SSN
	, RTRIM(JOBE3.Relationship) AS BE3RelToPrimary
	, CASE WHEN JOBE3.BenePercent != '' THEN RTRIM(JOBE3.BenePercent) + '%' ELSE '' END AS BE3BenePercent
	, RTRIM(JOBE4.FName) AS BE4FName
	, RTRIM(JOBE4.MInitial) AS BE4MInitial
	, RTRIM(JOBE4.LName) AS BE4LName
	, JOBE4.DOB AS BE4DOB
	, LEFT(JOBE4.SSN, 3) + '-' + LEFT(RIGHT(JOBE4.SSN, 6),2) + '-' + RIGHT(JOBE4.SSN,4) AS BE4SSN
	, RTRIM(JOBE4.Relationship) AS BE4RelToPrimary
	, CASE WHEN JOBE4.BenePercent != '' THEN RTRIM(JOBE4.BenePercent) + '%' ELSE '' END AS BE4BenePercent
	, CASE WHEN SASDA.Sequence != '' THEN 'X' ELSE '' END AS CheckingYes
	, CASE WHEN SASDA.Sequence != '' THEN '' ELSE 'X' END AS CheckingNo
	, CASE WHEN LOWER(LEFT(Q1.Response, 1)) = 'y' THEN 'X' END AS YesQuestion1
	, CASE WHEN LOWER(LEFT(Q1.Response, 1)) != 'y' THEN 'X' END AS NoQuestion1
	, CASE WHEN LOWER(LEFT(Q1.Response, 1)) = 'y' THEN RTRIM(Q2.Response) END AS Question2
	, CASE WHEN LOWER(LEFT(Q3.Response, 1)) = 'y' THEN 'X' END AS YesQuestion3
	, CASE WHEN LOWER(LEFT(Q3.Response, 1)) != 'y' THEN 'X' END AS NoQuestion3
	, CASE WHEN LOWER(LEFT(Q4.Response, 1)) = 'y' THEN 'X' END AS YesQuestion4
	, CASE WHEN LOWER(LEFT(Q4.Response, 1)) != 'y' THEN 'X' END AS NoQuestion4
	,	SAODP1.Description + 
		CASE WHEN SAODP2.Description != '' THEN CHAR(13) + CHAR(10) + SAODP2.Description ELSE '' END + 
		CASE WHEN SAODP3.Description != '' THEN CHAR(13) + CHAR(10) + SAODP3.Description ELSE '' END +
		CASE WHEN SAODP4.Description != '' THEN CHAR(13) + CHAR(10) + SAODP4.Description ELSE '' END +
		CASE WHEN SAODP5.Description != '' THEN CHAR(13) + CHAR(10) + SAODP5.Description ELSE '' END +
		CASE WHEN SAODP6.Description != '' THEN CHAR(13) + CHAR(10) + SAODP6.Description ELSE '' END
		AS OverDraft
	, CASE WHEN NMR.Qualification3 = 'Employer' THEN 'X' END AS EligEmployerYes
	, CASE WHEN NMR.Qualification3 = 'Location' THEN 'X' END AS EligLivesYes
	, CASE WHEN NMR.Qualification3 = 'Location' THEN 'X' END AS EligWorksYes
	, NMR.Qualification1 AS Relative
	, NMR.Qualification2 AS Relationship
	, NMR.CreatedBy AS TellerInitials
	, CASE NMR.Qualification3
		WHEN 'Location' THEN 'Lives, Works Or Worships in: ' + RTRIM(NMR.Department)
		WHEN 'Employer' THEN 'SEG Employer: ' + RTRIM(NMR.Department)
	  END AS LivesWorksWorships
FROM NewMemberRequest AS NMR
	LEFT OUTER JOIN NewMemberHome AS Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork AS Work On NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'JO', 'MI', '') AS JO1 ON NMR.TrackingNum = JO1.TrackingNum AND JO1.JointSequence = 1
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'JO', 'MI', '') AS JO2 ON NMR.TrackingNum = JO2.TrackingNum AND JO2.JointSequence = 2
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'JO', 'MI', '') AS JO3 ON NMR.TrackingNum = JO3.TrackingNum AND JO3.JointSequence = 3
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'JO', 'MI', '') AS JO4 ON NMR.TrackingNum = JO4.TrackingNum AND JO4.JointSequence = 4
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'BE', '', '') AS JOBE1 ON NMR.TrackingNum = JOBE1.TrackingNum AND JOBE1.JointSequence = 1
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'BE', '', '') AS JOBE2 ON NMR.TrackingNum = JOBE2.TrackingNum AND JOBE2.JointSequence = 2
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'BE', '', '') AS JOBE3 ON NMR.TrackingNum = JOBE3.TrackingNum AND JOBE3.JointSequence = 3
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'BE', '', '') AS JOBE4 ON NMR.TrackingNum = JOBE4.TrackingNum AND JOBE4.JointSequence = 4
	LEFT OUTER JOIN fnCCCU_GetSA(@TrackingNum, 'SDA', 'S') AS SASDA ON NMR.TrackingNum = SASDA.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetQuestion(@TrackingNum, '1') AS Q1 ON NMR.TrackingNum = Q1.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetQuestion(@TrackingNum, '2') AS Q2 ON NMR.TrackingNum = Q2.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetQuestion(@TrackingNum, '3') AS Q3 ON NMR.TrackingNum = Q3.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetQuestion(@TrackingNum, '4') AS Q4 ON NMR.TrackingNum = Q4.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetSAODP(@TrackingNum, '1') AS SAODP1 ON NMR.TrackingNum = SAODP1.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetSAODP(@TrackingNum, '2') AS SAODP2 ON NMR.TrackingNum = SAODP2.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetSAODP(@TrackingNum, '3') AS SAODP3 ON NMR.TrackingNum = SAODP3.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetSAODP(@TrackingNum, '4') AS SAODP4 ON NMR.TrackingNum = SAODP4.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetSAODP(@TrackingNum, '5') AS SAODP5 ON NMR.TrackingNum = SAODP5.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetSAODP(@TrackingNum, '6') AS SAODP6 ON NMR.TrackingNum = SAODP6.TrackingNum
WHERE NMR.TrackingNum = @TrackingNum
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_D31Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCCCU_D31Enable] @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
--Declare @TrackingNum int
--DROP TABLE #docs
--DEALLOCATE curs
--Set @TrackingNum = 1477
Declare @docsubname char(100)
Declare @newdocsub char(100)
Declare @count int
Declare @docindex int
--CREATE TABLE #docs(docindex int identity Primary Key, docsubname char(100))
Declare curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT '' AS docsubname
	FROM NewMemberRequest AS NMR
	WHERE NMR.TrackingNum = @TrackingNum AND NMR.Processed = 999 AND NMR.Created = 'Y' AND NMR.AccountType IN ('BE', 'BS')
--IF @@ROWCOUNT = 0
OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @newdocsub = 'Certificate of Authority/Resolution - Sole Proprietorship ' + @docsubname
IF @docsubname Is Null
BEGIN
	SET @newdocsub = 'Certificate of Authority/Resolution - Sole Proprietorship'
END
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count
      	IF @count = 1
	BEGIN
		Set @docindex = @docindex + 1
     		 INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END
      	FETCH NEXT FROM curs INTO @docsubname
	PRINT @docsubname
	IF @@FETCH_STATUS = 0
	BEGIN
		SET @newdocsub = (RTRIM(@newdocsub) + ', ' + RTRIM(@docsubname))
		PRINT @newdocsub
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex
	END
   END
CLOSE curs
DEALLOCATE curs
Select *  FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Delete FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_D31Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCCCU_D31Fields] @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
Declare @joseq int
Declare @jo1seq int
Declare @jo2seq int
Declare @jo3seq int
Declare @jo4seq int
Declare @count int
--Set @jo1seq = 1
--Set @jo2seq = 1
--Set @jo3seq = 1
--Set @jo4seq = 1
--CREATE TABLE #docs(id int identity Primary Key, docindex int, j1FullName char(100), j1FullAddress char(100), j1FullPhone char(12), j1DOB char(10), j1SSN char(11), j1ID char(20), j1IDIssueDate  char(10), j1IDExpDate  char(10), j1IDState  char(2), j2FullName char(100), j2FullAddress char(100), j2FullPhone char(11), j2DOB char(10), j2SSN char(11), j2ID char(20), j2IDIssueDate  char(10), j2IDExpDate  char(10), j2IDState  char(2), j3FullName char(100), j3FullAddress char(100), j3FullPhone char(11), j3DOB char(10), j3SSN char(11), j3ID char(20), j3IDIssueDate  char(10), j3IDExpDate  char(10), j3IDState  char(2), j4FullName char(100), j4FullAddress char(100), j4FullPhone char(11), j4DOB char(10), j4SSN char(11), j4ID char(20), j4IDIssueDate  char(10), j4IDExpDate  char(10), j4IDState  char(2))
Declare curs2 CURSOR FOR
	SELECT  CONVERT(int, JO.Sequence)
	from NewMemberJointOwner As JO
	INNER JOIN NewMemberJointLink AS JL ON JO.Sequence = JL.JointSequence AND JL.TrackingNum = @TrackingNum
	INNER JOIN NewMemberSubAccount AS SA ON JL.SubAccountSequence = SA.Sequence AND SA.TrackingNum = @TrackingNum
	WHERE JO.TrackingNum = @TrackingNum AND (JO.JointOwnerType IN ('JS')) AND SA.ProductType IN ('PSA', 'RSA', 'SDA', 'CC')
	GROUP BY CONVERT(int, JO.Sequence)
--IF @@ROWCOUNT = 0
OPEN curs2
FETCH NEXT FROM curs2 INTO @joseq
SET @count = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
      	IF (@count = 0 AND @DocIndex = 1) OR (@count = 4 AND @DocIndex = 2) OR (@count = 8 AND @DocIndex = 3)
		BEGIN
			Set @jo1seq = @joseq
		END
	IF (@count = 1 AND @DocIndex = 1) OR (@count = 5 AND @DocIndex = 2) OR (@count = 9 AND @DocIndex = 3)
		BEGIN
			Set @jo2seq = @joseq		
		END
	IF (@count = 2 AND @DocIndex = 1) OR (@count = 6 AND @DocIndex = 2) OR (@count = 10 AND @DocIndex = 3)
		BEGIN
			Set @jo3seq = @joseq		
		END
	IF (@count = 3 AND @DocIndex = 1) OR (@count = 7 AND @DocIndex = 2) OR (@count = 11 AND @DocIndex = 3)
		BEGIN
			Set @jo4seq = @joseq		
		END
      	FETCH NEXT FROM curs2 INTO @joseq
	SET @count = @count + 1
	PRINT @count
   END
CLOSE curs2
DEALLOCATE curs2
SELECT @DocIndex As DocIndex
	, NMR.OrganizationName AS OrgName
	, RTRIM(JOJS1.FullName) AS JS1FullName
	, RTRIM(JOJS1.Title) AS JO1Title
	, RTRIM(JOJS2.FullName) AS JS2FullName
	, RTRIM(JOJS2.Title) AS JO2Title
	, RTRIM(JOJS3.FullName) AS JS3FullName
	, RTRIM(JOJS3.Title) AS JO3Title
	, RTRIM(JOJS4.FullName) AS JS4FullName
	, RTRIM(JOJS4.Title) AS JO4Title
	, RTRIM(JOJS5.FullName) AS JS5FullName
	, RTRIM(JOJS5.Title) AS JO5Title
	, RTRIM(JOJS6.FullName) AS JS6FullName
	, RTRIM(JOJS6.Title) AS JO6Title
	, 'Minnesota' AS Minnesota
	, LEFT(NMR.SSN, 2) + '-' + RIGHT(NMR.SSN, 7) AS SSN
	, CASE WHEN NMR.AccountType = 'BA' OR NMR.AccountType = 'BN' THEN 'X' END AS NonProfitCorp
FROM NewMemberRequest AS NMR
	LEFT OUTER JOIN NewMemberHome AS Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork AS Work On NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'JS', '', '') AS JOJS1 ON NMR.TrackingNum = JOJS1.TrackingNum AND JOJS1.JointSequence = 1
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'JS', '', '') AS JOJS2 ON NMR.TrackingNum = JOJS2.TrackingNum AND JOJS2.JointSequence = 2
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'JS', '', '') AS JOJS3 ON NMR.TrackingNum = JOJS3.TrackingNum AND JOJS3.JointSequence = 3
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'JS', '', '') AS JOJS4 ON NMR.TrackingNum = JOJS4.TrackingNum AND JOJS4.JointSequence = 4
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'JS', '', '') AS JOJS5 ON NMR.TrackingNum = JOJS5.TrackingNum AND JOJS5.JointSequence = 5
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'JS', '', '') AS JOJS6 ON NMR.TrackingNum = JOJS6.TrackingNum AND JOJS6.JointSequence = 6
WHERE NMR.TrackingNum = @TrackingNum
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_D32Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCCCU_D32Enable] @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
--Declare @TrackingNum int
--DROP TABLE #docs
--DEALLOCATE curs
--Set @TrackingNum = 1477
Declare @docsubname char(100)
Declare @newdocsub char(100)
Declare @count int
Declare @docindex int
--CREATE TABLE #docs(docindex int identity Primary Key, docsubname char(100))
Declare curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT '' AS docsubname
	FROM NewMemberRequest AS NMR
	WHERE NMR.TrackingNum = @TrackingNum AND NMR.Processed = 999 AND NMR.Created = 'Y' AND NMR.AccountType IN ('BY')
--IF @@ROWCOUNT = 0
OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @newdocsub = 'Certificate of Authority/Resolution - Limited Liability Company ' + @docsubname
IF @docsubname Is Null
BEGIN
	SET @newdocsub = 'Certificate of Authority/Resolution - Limited Liability Company'
END
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count
      	IF @count = 1
	BEGIN
		Set @docindex = @docindex + 1
     		 INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END
      	FETCH NEXT FROM curs INTO @docsubname
	PRINT @docsubname
	IF @@FETCH_STATUS = 0
	BEGIN
		SET @newdocsub = (RTRIM(@newdocsub) + ', ' + RTRIM(@docsubname))
		PRINT @newdocsub
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex
	END
   END
CLOSE curs
DEALLOCATE curs
Select *  FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Delete FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_D32Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCCCU_D32Fields] @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
Declare @joseq int
Declare @jo1seq int
Declare @jo2seq int
Declare @jo3seq int
Declare @jo4seq int
Declare @count int
--Set @jo1seq = 1
--Set @jo2seq = 1
--Set @jo3seq = 1
--Set @jo4seq = 1
--CREATE TABLE #docs(id int identity Primary Key, docindex int, j1FullName char(100), j1FullAddress char(100), j1FullPhone char(12), j1DOB char(10), j1SSN char(11), j1ID char(20), j1IDIssueDate  char(10), j1IDExpDate  char(10), j1IDState  char(2), j2FullName char(100), j2FullAddress char(100), j2FullPhone char(11), j2DOB char(10), j2SSN char(11), j2ID char(20), j2IDIssueDate  char(10), j2IDExpDate  char(10), j2IDState  char(2), j3FullName char(100), j3FullAddress char(100), j3FullPhone char(11), j3DOB char(10), j3SSN char(11), j3ID char(20), j3IDIssueDate  char(10), j3IDExpDate  char(10), j3IDState  char(2), j4FullName char(100), j4FullAddress char(100), j4FullPhone char(11), j4DOB char(10), j4SSN char(11), j4ID char(20), j4IDIssueDate  char(10), j4IDExpDate  char(10), j4IDState  char(2))
Declare curs2 CURSOR FOR
	SELECT  CONVERT(int, JO.Sequence)
	from NewMemberJointOwner As JO
	INNER JOIN NewMemberJointLink AS JL ON JO.Sequence = JL.JointSequence AND JL.TrackingNum = @TrackingNum
	INNER JOIN NewMemberSubAccount AS SA ON JL.SubAccountSequence = SA.Sequence AND SA.TrackingNum = @TrackingNum
	WHERE JO.TrackingNum = @TrackingNum AND (JO.JointOwnerType IN ('JS')) AND SA.ProductType IN ('PSA', 'RSA', 'SDA', 'CC')
	GROUP BY CONVERT(int, JO.Sequence)
--IF @@ROWCOUNT = 0
OPEN curs2
FETCH NEXT FROM curs2 INTO @joseq
SET @count = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
      	IF (@count = 0 AND @DocIndex = 1) OR (@count = 4 AND @DocIndex = 2) OR (@count = 8 AND @DocIndex = 3)
		BEGIN
			Set @jo1seq = @joseq
		END
	IF (@count = 1 AND @DocIndex = 1) OR (@count = 5 AND @DocIndex = 2) OR (@count = 9 AND @DocIndex = 3)
		BEGIN
			Set @jo2seq = @joseq		
		END
	IF (@count = 2 AND @DocIndex = 1) OR (@count = 6 AND @DocIndex = 2) OR (@count = 10 AND @DocIndex = 3)
		BEGIN
			Set @jo3seq = @joseq		
		END
	IF (@count = 3 AND @DocIndex = 1) OR (@count = 7 AND @DocIndex = 2) OR (@count = 11 AND @DocIndex = 3)
		BEGIN
			Set @jo4seq = @joseq		
		END
      	FETCH NEXT FROM curs2 INTO @joseq
	SET @count = @count + 1
	PRINT @count
   END
CLOSE curs2
DEALLOCATE curs2
SELECT @DocIndex As DocIndex
	, NMR.OrganizationName AS OrgName
	, RTRIM(JOJS1.FullName) AS JO1FullName
	, RTRIM(JOJS1.Title) AS JO1Title
	, RTRIM(JOJS2.FullName) AS JO2FullName
	, RTRIM(JOJS2.Title) AS JO2Title
	, RTRIM(JOJS3.FullName) AS JO3FullName
	, RTRIM(JOJS3.Title) AS JO3Title
	, RTRIM(JOJS4.FullName) AS JO4FullName
	, RTRIM(JOJS4.Title) AS JO4Title
	, RTRIM(JOJS5.FullName) AS JO5FullName
	, RTRIM(JOJS5.Title) AS JO5Title
	, RTRIM(JOJS6.FullName) AS JO6FullName
	, RTRIM(JOJS6.Title) AS JO6Title
	, 'Minnesota' AS Minnesota
	, LEFT(NMR.SSN, 2) + '-' + RIGHT(NMR.SSN, 7) AS SSN
	, CASE WHEN NMR.AccountType = 'BA' OR NMR.AccountType = 'BN' THEN 'X' END AS NonProfitCorp
FROM NewMemberRequest AS NMR
	LEFT OUTER JOIN NewMemberHome AS Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork AS Work On NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'JS', '', '') AS JOJS1 ON NMR.TrackingNum = JOJS1.TrackingNum AND JOJS1.JointSequence = 1
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'JS', '', '') AS JOJS2 ON NMR.TrackingNum = JOJS2.TrackingNum AND JOJS2.JointSequence = 2
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'JS', '', '') AS JOJS3 ON NMR.TrackingNum = JOJS3.TrackingNum AND JOJS3.JointSequence = 3
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'JS', '', '') AS JOJS4 ON NMR.TrackingNum = JOJS4.TrackingNum AND JOJS4.JointSequence = 4
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'JS', '', '') AS JOJS5 ON NMR.TrackingNum = JOJS5.TrackingNum AND JOJS5.JointSequence = 5
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'JS', '', '') AS JOJS6 ON NMR.TrackingNum = JOJS6.TrackingNum AND JOJS6.JointSequence = 6
WHERE NMR.TrackingNum = @TrackingNum
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_D33Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCCCU_D33Enable] @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
--Declare @TrackingNum int
--DROP TABLE #docs
--DEALLOCATE curs
--Set @TrackingNum = 1477
Declare @docsubname char(100)
Declare @newdocsub char(100)
Declare @count int
Declare @docindex int
--CREATE TABLE #docs(docindex int identity Primary Key, docsubname char(100))
Declare curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT '' AS docsubname
	FROM NewMemberRequest AS NMR
	WHERE NMR.TrackingNum = @TrackingNum AND NMR.Processed = 999 AND NMR.Created = 'Y' AND NMR.AccountType IN ('BC')
--IF @@ROWCOUNT = 0
OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @newdocsub = 'Certificate of Authority/Resolution - Corporation ' + @docsubname
IF @docsubname Is Null
BEGIN
	SET @newdocsub = 'Certificate of Authority/Resolution - Corporation'
END
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count
      	IF @count = 1
	BEGIN
		Set @docindex = @docindex + 1
     		 INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END
      	FETCH NEXT FROM curs INTO @docsubname
	PRINT @docsubname
	IF @@FETCH_STATUS = 0
	BEGIN
		SET @newdocsub = (RTRIM(@newdocsub) + ', ' + RTRIM(@docsubname))
		PRINT @newdocsub
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex
	END
   END
CLOSE curs
DEALLOCATE curs
Select *  FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Delete FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_D33Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCCCU_D33Fields] @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
Declare @joseq int
Declare @jo1seq int
Declare @jo2seq int
Declare @jo3seq int
Declare @jo4seq int
Declare @count int
--Set @jo1seq = 1
--Set @jo2seq = 1
--Set @jo3seq = 1
--Set @jo4seq = 1
--CREATE TABLE #docs(id int identity Primary Key, docindex int, j1FullName char(100), j1FullAddress char(100), j1FullPhone char(12), j1DOB char(10), j1SSN char(11), j1ID char(20), j1IDIssueDate  char(10), j1IDExpDate  char(10), j1IDState  char(2), j2FullName char(100), j2FullAddress char(100), j2FullPhone char(11), j2DOB char(10), j2SSN char(11), j2ID char(20), j2IDIssueDate  char(10), j2IDExpDate  char(10), j2IDState  char(2), j3FullName char(100), j3FullAddress char(100), j3FullPhone char(11), j3DOB char(10), j3SSN char(11), j3ID char(20), j3IDIssueDate  char(10), j3IDExpDate  char(10), j3IDState  char(2), j4FullName char(100), j4FullAddress char(100), j4FullPhone char(11), j4DOB char(10), j4SSN char(11), j4ID char(20), j4IDIssueDate  char(10), j4IDExpDate  char(10), j4IDState  char(2))
Declare curs2 CURSOR FOR
	SELECT  CONVERT(int, JO.Sequence)
	from NewMemberJointOwner As JO
	INNER JOIN NewMemberJointLink AS JL ON JO.Sequence = JL.JointSequence AND JL.TrackingNum = @TrackingNum
	INNER JOIN NewMemberSubAccount AS SA ON JL.SubAccountSequence = SA.Sequence AND SA.TrackingNum = @TrackingNum
	WHERE JO.TrackingNum = @TrackingNum AND (JO.JointOwnerType IN ('JS')) AND SA.ProductType IN ('PSA', 'RSA', 'SDA', 'CC')
	GROUP BY CONVERT(int, JO.Sequence)
--IF @@ROWCOUNT = 0
OPEN curs2
FETCH NEXT FROM curs2 INTO @joseq
SET @count = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
      	IF (@count = 0 AND @DocIndex = 1) OR (@count = 4 AND @DocIndex = 2) OR (@count = 8 AND @DocIndex = 3)
		BEGIN
			Set @jo1seq = @joseq
		END
	IF (@count = 1 AND @DocIndex = 1) OR (@count = 5 AND @DocIndex = 2) OR (@count = 9 AND @DocIndex = 3)
		BEGIN
			Set @jo2seq = @joseq		
		END
	IF (@count = 2 AND @DocIndex = 1) OR (@count = 6 AND @DocIndex = 2) OR (@count = 10 AND @DocIndex = 3)
		BEGIN
			Set @jo3seq = @joseq		
		END
	IF (@count = 3 AND @DocIndex = 1) OR (@count = 7 AND @DocIndex = 2) OR (@count = 11 AND @DocIndex = 3)
		BEGIN
			Set @jo4seq = @joseq		
		END
      	FETCH NEXT FROM curs2 INTO @joseq
	SET @count = @count + 1
	PRINT @count
   END
CLOSE curs2
DEALLOCATE curs2
SELECT @DocIndex As DocIndex
	, NMR.OrganizationName AS OrgName
	, RTRIM(JOJS1.FullName) AS JO1FullName
	, RTRIM(JOJS1.Title) AS JO1Title
	, RTRIM(JOJS2.FullName) AS JO2FullName
	, RTRIM(JOJS2.Title) AS JO2Title
	, RTRIM(JOJS3.FullName) AS JO3FullName
	, RTRIM(JOJS3.Title) AS JO3Title
	, RTRIM(JOJS4.FullName) AS JO4FullName
	, RTRIM(JOJS4.Title) AS JO4Title
	, RTRIM(JOJS5.FullName) AS JO5FullName
	, RTRIM(JOJS5.Title) AS JO5Title
	, RTRIM(JOJS6.FullName) AS JO6FullName
	, RTRIM(JOJS6.Title) AS JO6Title
	, 'Minnesota' AS Minnesota
	, LEFT(NMR.SSN, 2) + '-' + RIGHT(NMR.SSN, 7) AS SSN
	, CASE WHEN NMR.AccountType = 'BA' OR NMR.AccountType = 'BN' THEN 'X' END AS NonProfitCorp
FROM NewMemberRequest AS NMR
	LEFT OUTER JOIN NewMemberHome AS Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork AS Work On NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'JS', '', '') AS JOJS1 ON NMR.TrackingNum = JOJS1.TrackingNum AND JOJS1.JointSequence = 1
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'JS', '', '') AS JOJS2 ON NMR.TrackingNum = JOJS2.TrackingNum AND JOJS2.JointSequence = 2
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'JS', '', '') AS JOJS3 ON NMR.TrackingNum = JOJS3.TrackingNum AND JOJS3.JointSequence = 3
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'JS', '', '') AS JOJS4 ON NMR.TrackingNum = JOJS4.TrackingNum AND JOJS4.JointSequence = 4
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'JS', '', '') AS JOJS5 ON NMR.TrackingNum = JOJS5.TrackingNum AND JOJS5.JointSequence = 5
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'JS', '', '') AS JOJS6 ON NMR.TrackingNum = JOJS6.TrackingNum AND JOJS6.JointSequence = 6
WHERE NMR.TrackingNum = @TrackingNum
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_D34Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCCCU_D34Enable] @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
--Declare @TrackingNum int
--DROP TABLE #docs
--DEALLOCATE curs
--Set @TrackingNum = 1477
Declare @docsubname char(100)
Declare @newdocsub char(100)
Declare @count int
Declare @docindex int
--CREATE TABLE #docs(docindex int identity Primary Key, docsubname char(100))
Declare curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT '' AS docsubname
	FROM NewMemberRequest AS NMR
	WHERE NMR.TrackingNum = @TrackingNum AND NMR.Processed = 999 AND NMR.Created = 'Y' AND NMR.AccountType IN ('BG', 'BL', 'BP')
--IF @@ROWCOUNT = 0
OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @newdocsub = 'Certificate of Authority/Resolution - Partnership ' + @docsubname
IF @docsubname Is Null
BEGIN
	SET @newdocsub = 'Certificate of Authority/Resolution - Partnership'
END
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count
      	IF @count = 1
	BEGIN
		Set @docindex = @docindex + 1
     		 INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END
      	FETCH NEXT FROM curs INTO @docsubname
	PRINT @docsubname
	IF @@FETCH_STATUS = 0
	BEGIN
		SET @newdocsub = (RTRIM(@newdocsub) + ', ' + RTRIM(@docsubname))
		PRINT @newdocsub
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex
	END
   END
CLOSE curs
DEALLOCATE curs
Select *  FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Delete FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_D34Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCCCU_D34Fields] @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
Declare @joseq int
Declare @jo1seq int
Declare @jo2seq int
Declare @jo3seq int
Declare @jo4seq int
Declare @count int
--Set @jo1seq = 1
--Set @jo2seq = 1
--Set @jo3seq = 1
--Set @jo4seq = 1
--CREATE TABLE #docs(id int identity Primary Key, docindex int, j1FullName char(100), j1FullAddress char(100), j1FullPhone char(12), j1DOB char(10), j1SSN char(11), j1ID char(20), j1IDIssueDate  char(10), j1IDExpDate  char(10), j1IDState  char(2), j2FullName char(100), j2FullAddress char(100), j2FullPhone char(11), j2DOB char(10), j2SSN char(11), j2ID char(20), j2IDIssueDate  char(10), j2IDExpDate  char(10), j2IDState  char(2), j3FullName char(100), j3FullAddress char(100), j3FullPhone char(11), j3DOB char(10), j3SSN char(11), j3ID char(20), j3IDIssueDate  char(10), j3IDExpDate  char(10), j3IDState  char(2), j4FullName char(100), j4FullAddress char(100), j4FullPhone char(11), j4DOB char(10), j4SSN char(11), j4ID char(20), j4IDIssueDate  char(10), j4IDExpDate  char(10), j4IDState  char(2))
Declare curs2 CURSOR FOR
	SELECT  CONVERT(int, JO.Sequence)
	from NewMemberJointOwner As JO
	INNER JOIN NewMemberJointLink AS JL ON JO.Sequence = JL.JointSequence AND JL.TrackingNum = @TrackingNum
	INNER JOIN NewMemberSubAccount AS SA ON JL.SubAccountSequence = SA.Sequence AND SA.TrackingNum = @TrackingNum
	WHERE JO.TrackingNum = @TrackingNum AND (JO.JointOwnerType IN ('JS')) AND SA.ProductType IN ('PSA', 'RSA', 'SDA', 'CC')
	GROUP BY CONVERT(int, JO.Sequence)
--IF @@ROWCOUNT = 0
OPEN curs2
FETCH NEXT FROM curs2 INTO @joseq
SET @count = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
      	IF (@count = 0 AND @DocIndex = 1) OR (@count = 4 AND @DocIndex = 2) OR (@count = 8 AND @DocIndex = 3)
		BEGIN
			Set @jo1seq = @joseq
		END
	IF (@count = 1 AND @DocIndex = 1) OR (@count = 5 AND @DocIndex = 2) OR (@count = 9 AND @DocIndex = 3)
		BEGIN
			Set @jo2seq = @joseq		
		END
	IF (@count = 2 AND @DocIndex = 1) OR (@count = 6 AND @DocIndex = 2) OR (@count = 10 AND @DocIndex = 3)
		BEGIN
			Set @jo3seq = @joseq		
		END
	IF (@count = 3 AND @DocIndex = 1) OR (@count = 7 AND @DocIndex = 2) OR (@count = 11 AND @DocIndex = 3)
		BEGIN
			Set @jo4seq = @joseq		
		END
      	FETCH NEXT FROM curs2 INTO @joseq
	SET @count = @count + 1
	PRINT @count
   END
CLOSE curs2
DEALLOCATE curs2
SELECT @DocIndex As DocIndex
	, NMR.OrganizationName AS OrgName
	, RTRIM(JOJS1.FullName) AS JO1FullName
	, RTRIM(JOJS1.Title) AS JO1Title
	, RTRIM(JOJS2.FullName) AS JO2FullName
	, RTRIM(JOJS2.Title) AS JO2Title
	, RTRIM(JOJS3.FullName) AS JO3FullName
	, RTRIM(JOJS3.Title) AS JO3Title
	, RTRIM(JOJS4.FullName) AS JO4FullName
	, RTRIM(JOJS4.Title) AS JO4Title
	, RTRIM(JOJS5.FullName) AS JO5FullName
	, RTRIM(JOJS5.Title) AS JO5Title
	, RTRIM(JOJS6.FullName) AS JO6FullName
	, RTRIM(JOJS6.Title) AS JO6Title
	, 'Minnesota' AS Minnesota
	, LEFT(NMR.SSN, 2) + '-' + RIGHT(NMR.SSN, 7) AS SSN
	, CASE WHEN NMR.AccountType = 'BA' OR NMR.AccountType = 'BN' THEN 'X' END AS NonProfitCorp
FROM NewMemberRequest AS NMR
	LEFT OUTER JOIN NewMemberHome AS Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork AS Work On NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'JS', '', '') AS JOJS1 ON NMR.TrackingNum = JOJS1.TrackingNum AND JOJS1.JointSequence = 1
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'JS', '', '') AS JOJS2 ON NMR.TrackingNum = JOJS2.TrackingNum AND JOJS2.JointSequence = 2
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'JS', '', '') AS JOJS3 ON NMR.TrackingNum = JOJS3.TrackingNum AND JOJS3.JointSequence = 3
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'JS', '', '') AS JOJS4 ON NMR.TrackingNum = JOJS4.TrackingNum AND JOJS4.JointSequence = 4
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'JS', '', '') AS JOJS5 ON NMR.TrackingNum = JOJS5.TrackingNum AND JOJS5.JointSequence = 5
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'JS', '', '') AS JOJS6 ON NMR.TrackingNum = JOJS6.TrackingNum AND JOJS6.JointSequence = 6
WHERE NMR.TrackingNum = @TrackingNum
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_D35Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCCCU_D35Enable] @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
--Declare @TrackingNum int
--DROP TABLE #docs
--DEALLOCATE curs
--Set @TrackingNum = 1477
Declare @docsubname char(100)
Declare @newdocsub char(100)
Declare @count int
Declare @docindex int
--CREATE TABLE #docs(docindex int identity Primary Key, docsubname char(100))
Declare curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT '' AS docsubname
	FROM NewMemberRequest AS NMR
	WHERE NMR.TrackingNum = @TrackingNum AND NMR.Processed = 999 AND NMR.Created = 'Y' AND NMR.AccountType IN ('BA', 'BN')
--IF @@ROWCOUNT = 0
OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @newdocsub = 'Certificate of Authority/Resolution - Of Lodge, Association or Other Similar Organization ' + @docsubname
IF @docsubname Is Null
BEGIN
	SET @newdocsub = 'Certificate of Authority/Resolution - Of Lodge, Association or Other Similar Organization'
END
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count
      	IF @count = 1
	BEGIN
		Set @docindex = @docindex + 1
     		 INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END
      	FETCH NEXT FROM curs INTO @docsubname
	PRINT @docsubname
	IF @@FETCH_STATUS = 0
	BEGIN
		SET @newdocsub = (RTRIM(@newdocsub) + ', ' + RTRIM(@docsubname))
		PRINT @newdocsub
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex
	END
   END
CLOSE curs
DEALLOCATE curs
Select *  FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Delete FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_D35Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCCCU_D35Fields] @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
Declare @joseq int
Declare @jo1seq int
Declare @jo2seq int
Declare @jo3seq int
Declare @jo4seq int
Declare @count int
--Set @jo1seq = 1
--Set @jo2seq = 1
--Set @jo3seq = 1
--Set @jo4seq = 1
--CREATE TABLE #docs(id int identity Primary Key, docindex int, j1FullName char(100), j1FullAddress char(100), j1FullPhone char(12), j1DOB char(10), j1SSN char(11), j1ID char(20), j1IDIssueDate  char(10), j1IDExpDate  char(10), j1IDState  char(2), j2FullName char(100), j2FullAddress char(100), j2FullPhone char(11), j2DOB char(10), j2SSN char(11), j2ID char(20), j2IDIssueDate  char(10), j2IDExpDate  char(10), j2IDState  char(2), j3FullName char(100), j3FullAddress char(100), j3FullPhone char(11), j3DOB char(10), j3SSN char(11), j3ID char(20), j3IDIssueDate  char(10), j3IDExpDate  char(10), j3IDState  char(2), j4FullName char(100), j4FullAddress char(100), j4FullPhone char(11), j4DOB char(10), j4SSN char(11), j4ID char(20), j4IDIssueDate  char(10), j4IDExpDate  char(10), j4IDState  char(2))
Declare curs2 CURSOR FOR
	SELECT  CONVERT(int, JO.Sequence)
	from NewMemberJointOwner As JO
	INNER JOIN NewMemberJointLink AS JL ON JO.Sequence = JL.JointSequence AND JL.TrackingNum = @TrackingNum
	INNER JOIN NewMemberSubAccount AS SA ON JL.SubAccountSequence = SA.Sequence AND SA.TrackingNum = @TrackingNum
	WHERE JO.TrackingNum = @TrackingNum AND (JO.JointOwnerType IN ('JB', 'JS')) AND SA.ProductType IN ('PSA', 'RSA', 'SDA', 'CC')
	GROUP BY CONVERT(int, JO.Sequence)
--IF @@ROWCOUNT = 0
OPEN curs2
FETCH NEXT FROM curs2 INTO @joseq
SET @count = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
      	IF (@count = 0 AND @DocIndex = 1) OR (@count = 4 AND @DocIndex = 2) OR (@count = 8 AND @DocIndex = 3)
		BEGIN
			Set @jo1seq = @joseq
		END
	IF (@count = 1 AND @DocIndex = 1) OR (@count = 5 AND @DocIndex = 2) OR (@count = 9 AND @DocIndex = 3)
		BEGIN
			Set @jo2seq = @joseq		
		END
	IF (@count = 2 AND @DocIndex = 1) OR (@count = 6 AND @DocIndex = 2) OR (@count = 10 AND @DocIndex = 3)
		BEGIN
			Set @jo3seq = @joseq		
		END
	IF (@count = 3 AND @DocIndex = 1) OR (@count = 7 AND @DocIndex = 2) OR (@count = 11 AND @DocIndex = 3)
		BEGIN
			Set @jo4seq = @joseq		
		END
      	FETCH NEXT FROM curs2 INTO @joseq
	SET @count = @count + 1
	PRINT @count
   END
CLOSE curs2
DEALLOCATE curs2
SELECT @DocIndex As DocIndex
	, CASE WHEN NMR.AccountType = 'BA' THEN RTRIM(JOJB1.FullName) ELSE RTRIM(NMR.OrganizationName) END AS OrgName
	, RTRIM(NMR.FName) + ' ' + RTRIM(NMR.LName) AS FullName
	, CASE WHEN NMR.AccountType = 'BA' THEN LEFT(NMR.SSN, 3) + '-' + LEFT(RIGHT(NMR.SSN, 6), 2) + '-' + RIGHT(NMR.SSN, 4) ELSE LEFT(NMR.SSN, 2) + '-' + RIGHT(NMR.SSN, 7) END AS SSN
	, CASE WHEN NMR.AccountType = 'BA' THEN RTRIM(NMR.FName) + ' ' + RTRIM(NMR.LName) ELSE RTRIM(JOJS1.FullName) END AS JO1FullName
	, RTRIM(JOJS1.Title) AS JO1Title
	, CASE WHEN NMR.AccountType = 'BA' THEN RTRIM(JOJS1.FullName) ELSE RTRIM(JOJS2.FullName) END AS JO2FullName
	, RTRIM(JOJS2.Title) AS JO2Title
	, CASE WHEN NMR.AccountType = 'BA' THEN RTRIM(JOJS2.FullName) ELSE RTRIM(JOJS3.FullName) END AS JO3FullName
	, RTRIM(JOJS3.Title) AS JO3Title
	, CASE WHEN NMR.AccountType = 'BA' THEN RTRIM(JOJS3.FullName) ELSE RTRIM(JOJS4.FullName) END AS JO4FullName
	, RTRIM(JOJS4.Title) AS JO4Title
	, CASE WHEN NMR.AccountType = 'BA' THEN RTRIM(JOJS4.FullName) ELSE RTRIM(JOJS5.FullName) END AS JO5FullName
	, RTRIM(JOJS5.Title) AS JO5Title
	, 'Minnesota' AS Minnesota
	--, CASE WHEN NMR.AccountType = 'BA' OR NMR.AccountType = 'BN' THEN 'X' END AS NonProfitAssoc
FROM NewMemberRequest AS NMR
	LEFT OUTER JOIN NewMemberHome AS Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork AS Work On NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'JB', '', '') AS JOJB1 ON NMR.TrackingNum = JOJB1.TrackingNum AND JOJB1.JointSequence = 1
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'JS', '', '') AS JOJS1 ON NMR.TrackingNum = JOJS1.TrackingNum AND JOJS1.JointSequence = 1
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'JS', '', '') AS JOJS2 ON NMR.TrackingNum = JOJS2.TrackingNum AND JOJS2.JointSequence = 2
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'JS', '', '') AS JOJS3 ON NMR.TrackingNum = JOJS3.TrackingNum AND JOJS3.JointSequence = 3
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'JS', '', '') AS JOJS4 ON NMR.TrackingNum = JOJS4.TrackingNum AND JOJS4.JointSequence = 4
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'JS', '', '') AS JOJS5 ON NMR.TrackingNum = JOJS5.TrackingNum AND JOJS5.JointSequence = 5
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'JS', '', '') AS JOJS6 ON NMR.TrackingNum = JOJS6.TrackingNum AND JOJS6.JointSequence = 5
WHERE NMR.TrackingNum = @TrackingNum
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_D36Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCCCU_D36Enable] @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
--Declare @TrackingNum int
--DROP TABLE #docs
--DEALLOCATE curs
--Set @TrackingNum = 1477
Declare @docsubname char(100)
Declare @newdocsub char(100)
Declare @count int
Declare @docindex int
--CREATE TABLE #docs(docindex int identity Primary Key, docsubname char(100))
Declare curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT '' AS docsubname
	FROM NewMemberRequest AS NMR
	WHERE NMR.TrackingNum = @TrackingNum AND NMR.Processed = 999 AND NMR.Created = 'Y' AND NMR.AccountType IN ('BS') AND '' = 'REMOVED per John Knutson 3/2/2018'
--IF @@ROWCOUNT = 0
OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @newdocsub = 'Certificate of Authority/Resolution - Sole Proprietorship ' + @docsubname
IF @docsubname Is Null
BEGIN
	SET @newdocsub = 'Certificate of Authority/Resolution - Sole Proprietorship'
END
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count
      	IF @count = 1
	BEGIN
		Set @docindex = @docindex + 1
     		 INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END
      	FETCH NEXT FROM curs INTO @docsubname
	PRINT @docsubname
	IF @@FETCH_STATUS = 0
	BEGIN
		SET @newdocsub = (RTRIM(@newdocsub) + ', ' + RTRIM(@docsubname))
		PRINT @newdocsub
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex
	END
   END
CLOSE curs
DEALLOCATE curs
Select *  FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Delete FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_D36Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [IMS].[spCCCU_D36Fields] @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
Declare @joseq int
Declare @jo1seq int
Declare @jo2seq int
Declare @jo3seq int
Declare @jo4seq int
Declare @count int
--Set @jo1seq = 1
--Set @jo2seq = 1
--Set @jo3seq = 1
--Set @jo4seq = 1
--CREATE TABLE #docs(id int identity Primary Key, docindex int, j1FullName char(100), j1FullAddress char(100), j1FullPhone char(12), j1DOB char(10), j1SSN char(11), j1ID char(20), j1IDIssueDate  char(10), j1IDExpDate  char(10), j1IDState  char(2), j2FullName char(100), j2FullAddress char(100), j2FullPhone char(11), j2DOB char(10), j2SSN char(11), j2ID char(20), j2IDIssueDate  char(10), j2IDExpDate  char(10), j2IDState  char(2), j3FullName char(100), j3FullAddress char(100), j3FullPhone char(11), j3DOB char(10), j3SSN char(11), j3ID char(20), j3IDIssueDate  char(10), j3IDExpDate  char(10), j3IDState  char(2), j4FullName char(100), j4FullAddress char(100), j4FullPhone char(11), j4DOB char(10), j4SSN char(11), j4ID char(20), j4IDIssueDate  char(10), j4IDExpDate  char(10), j4IDState  char(2))
Declare curs2 CURSOR FOR
	SELECT  CONVERT(int, JO.Sequence)
	from NewMemberJointOwner As JO
	INNER JOIN NewMemberJointLink AS JL ON JO.Sequence = JL.JointSequence AND JL.TrackingNum = @TrackingNum
	INNER JOIN NewMemberSubAccount AS SA ON JL.SubAccountSequence = SA.Sequence AND SA.TrackingNum = @TrackingNum
	WHERE JO.TrackingNum = @TrackingNum AND (JO.JointOwnerType IN ('JB', 'JS')) AND SA.ProductType IN ('PSA', 'RSA', 'SDA', 'CC')
	GROUP BY CONVERT(int, JO.Sequence)
--IF @@ROWCOUNT = 0
OPEN curs2
FETCH NEXT FROM curs2 INTO @joseq
SET @count = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
      	IF (@count = 0 AND @DocIndex = 1) OR (@count = 4 AND @DocIndex = 2) OR (@count = 8 AND @DocIndex = 3)
		BEGIN
			Set @jo1seq = @joseq
		END
	IF (@count = 1 AND @DocIndex = 1) OR (@count = 5 AND @DocIndex = 2) OR (@count = 9 AND @DocIndex = 3)
		BEGIN
			Set @jo2seq = @joseq		
		END
	IF (@count = 2 AND @DocIndex = 1) OR (@count = 6 AND @DocIndex = 2) OR (@count = 10 AND @DocIndex = 3)
		BEGIN
			Set @jo3seq = @joseq		
		END
	IF (@count = 3 AND @DocIndex = 1) OR (@count = 7 AND @DocIndex = 2) OR (@count = 11 AND @DocIndex = 3)
		BEGIN
			Set @jo4seq = @joseq		
		END
      	FETCH NEXT FROM curs2 INTO @joseq
	SET @count = @count + 1
	PRINT @count
   END
CLOSE curs2
DEALLOCATE curs2
SELECT @DocIndex As DocIndex
	, RTRIM(JOJB1.FullName) AS JB1FullName
	, RTRIM(NMR.FName) + ' ' + RTRIM(NMR.LName) AS FullName
	, LEFT(NMR.SSN, 3) + '-' + LEFT(RIGHT(NMR.SSN, 6), 2) + '-' + RIGHT(NMR.SSN, 4) AS SSN
	, RTRIM(JOJS1.FullName) AS JS1FullName
	, RTRIM(JOJS1.Title) AS JS1Title
	, RTRIM(JOJS2.FullName) AS JS2FullName
	, RTRIM(JOJS2.Title) AS JS2Title
	, RTRIM(JOJS3.FullName) AS JS3FullName
	, RTRIM(JOJS3.Title) AS JS3Title
	, RTRIM(JOJS4.FullName) AS JS4FullName
	, RTRIM(JOJS4.Title) AS JS4Title
	, RTRIM(JOJS5.FullName) AS JS5FullName
	, RTRIM(JOJS5.Title) AS JS5Title
	, 'Minnesota' AS Minnesota
	, CASE WHEN NMR.AccountType = 'BA' OR NMR.AccountType = 'BN' THEN 'X' END AS NonProfitCorp
FROM NewMemberRequest AS NMR
	LEFT OUTER JOIN NewMemberHome AS Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork AS Work On NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'JB', '', '') AS JOJB1 ON NMR.TrackingNum = JOJB1.TrackingNum AND JOJB1.JointSequence = 1
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'JS', '', '') AS JOJS1 ON NMR.TrackingNum = JOJS1.TrackingNum AND JOJS1.JointSequence = 1
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'JS', '', '') AS JOJS2 ON NMR.TrackingNum = JOJS2.TrackingNum AND JOJS2.JointSequence = 2
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'JS', '', '') AS JOJS3 ON NMR.TrackingNum = JOJS3.TrackingNum AND JOJS3.JointSequence = 3
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'JS', '', '') AS JOJS4 ON NMR.TrackingNum = JOJS4.TrackingNum AND JOJS4.JointSequence = 4
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'JS', '', '') AS JOJS5 ON NMR.TrackingNum = JOJS5.TrackingNum AND JOJS5.JointSequence = 5
WHERE NMR.TrackingNum = @TrackingNum
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_D37Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCCCU_D37Enable] @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @docsubname CHAR(100)
DECLARE @newdocsub CHAR(100)
DECLARE @count INT
DECLARE @docindex INT

DECLARE curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT '' AS docsubname
	FROM NewMemberJointOwner AS JO
	RIGHT OUTER JOIN NewMemberRequest AS NMR ON JO.TrackingNum = NMR.TrackingNum
	LEFT JOIN NewMemberSubAccount AS SA ON SA.TrackingNum = NMR.TrackingNum
	WHERE NMR.TrackingNum = @TrackingNum AND NMR.Processed = 999
		AND (
			JO.JointOwnerType = 'BE'
			OR (NMR.Created = 'I' AND ((SA.Created = 'Y' AND SA.ProductType <> 'CERT') OR JO.CreateHost = ''))
			OR (NMR.AccountType = 'MU' AND SA.ProductType = 'SDA')
			)

OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @newdocsub = 'Account Change Form (1) - Add Joint/Open Checking' + @docsubname
IF @docsubname Is Null
BEGIN
	SET @newdocsub = 'Account Change Form (1) - Add Joint/Open Checking'
END
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
WHILE @@FETCH_STATUS = 0
BEGIN
	SET @count = @count + 1
	PRINT @count
		IF @count = 1
	BEGIN
		SET @docindex = @docindex + 1
		INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END
		FETCH NEXT FROM curs INTO @docsubname
	PRINT @docsubname
	IF @@FETCH_STATUS = 0
	BEGIN
		SET @newdocsub = (RTRIM(@newdocsub) + '' + RTRIM(@docsubname))
		PRINT @newdocsub
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex
	END
END
CLOSE curs
DEALLOCATE curs
SELECT * FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
DELETE FROM NewMemberDoc WHERE TrackingNum = @TrackingNum

Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_D37Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCCCU_D37Fields] @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
Declare @joseq int
Declare @jo1seq int
Declare @jo2seq int
Declare @jo3seq int
Declare @jo4seq int
Declare @count int
--Set @jo1seq = 1
--Set @jo2seq = 1
--Set @jo3seq = 1
--Set @jo4seq = 1
--CREATE TABLE #docs(id int identity Primary Key, docindex int, j1FullName char(100), j1FullAddress char(100), j1FullPhone char(12), j1DOB char(10), j1SSN char(11), j1ID char(20), j1IDIssueDate  char(10), j1IDExpDate  char(10), j1IDState  char(2), j2FullName char(100), j2FullAddress char(100), j2FullPhone char(11), j2DOB char(10), j2SSN char(11), j2ID char(20), j2IDIssueDate  char(10), j2IDExpDate  char(10), j2IDState  char(2), j3FullName char(100), j3FullAddress char(100), j3FullPhone char(11), j3DOB char(10), j3SSN char(11), j3ID char(20), j3IDIssueDate  char(10), j3IDExpDate  char(10), j3IDState  char(2), j4FullName char(100), j4FullAddress char(100), j4FullPhone char(11), j4DOB char(10), j4SSN char(11), j4ID char(20), j4IDIssueDate  char(10), j4IDExpDate  char(10), j4IDState  char(2))
Declare curs2 CURSOR FOR
	SELECT  CONVERT(int, JO.Sequence)
	from NewMemberJointOwner As JO
	INNER JOIN NewMemberJointLink AS JL ON JO.Sequence = JL.JointSequence AND JL.TrackingNum = @TrackingNum
	INNER JOIN NewMemberSubAccount AS SA ON JL.SubAccountSequence = SA.Sequence AND SA.TrackingNum = @TrackingNum
	WHERE JO.TrackingNum = @TrackingNum AND SA.ProductType IN ('PSA', 'RSA', 'SDA', 'CC')
	GROUP BY CONVERT(int, JO.Sequence)
--IF @@ROWCOUNT = 0
OPEN curs2
FETCH NEXT FROM curs2 INTO @joseq
SET @count = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
      	IF (@count = 0 AND @DocIndex = 1) OR (@count = 4 AND @DocIndex = 2) OR (@count = 8 AND @DocIndex = 3)
		BEGIN
			Set @jo1seq = @joseq
		END
	IF (@count = 1 AND @DocIndex = 1) OR (@count = 5 AND @DocIndex = 2) OR (@count = 9 AND @DocIndex = 3)
		BEGIN
			Set @jo2seq = @joseq		
		END
	IF (@count = 2 AND @DocIndex = 1) OR (@count = 6 AND @DocIndex = 2) OR (@count = 10 AND @DocIndex = 3)
		BEGIN
			Set @jo3seq = @joseq		
		END
	IF (@count = 3 AND @DocIndex = 1) OR (@count = 7 AND @DocIndex = 2) OR (@count = 11 AND @DocIndex = 3)
		BEGIN
			Set @jo4seq = @joseq		
		END
      	FETCH NEXT FROM curs2 INTO @joseq
	SET @count = @count + 1
	PRINT @count
   END
CLOSE curs2
DEALLOCATE curs2
SELECT @DocIndex As DocIndex
	, RTRIM(NMR.DriversLicenseNum) AS DriversLicenseNum
	, NMR.DriversLicenseState
	, CONVERT(char(10), NMR.IDExpirationDate, 101) AS DLExpirationDate
	, RTRIM(NMR.DriversLicenseNum) + '/' + NMR.DriversLicenseState AS DL
	, CASE NMR.IDType WHEN 'D' THEN 'Drivers License' ELSE NMR.IDSource END AS IDType
	, CASE NMR.IDType WHEN 'D' THEN NMR.DriversLicenseNum ELSE NMR.IDNumber END AS ID
	, NMR.IDNumber
	, CONVERT(char(10), NMR.IDIssueDate, 101) AS IDIssueDate
	, CONVERT(char(10), NMR.IDExpirationDate, 101) AS IDExpDate
	, CONVERT(char(10), NMR.IDExpirationDate, 101) AS IDExpirationDate
	, NMR.DriversLicenseState AS IDState
	, RTRIM(Work.EmployerName) AS EmployerName
	, RTRIM(Work.Address1) AS EmployerAddress
	, RTRIM(Work.City) AS EmployerCity
	, Work.State AS EmployerState
	, CASE LEN(Work.Zip) WHEN 9 THEN LEFT(Work.zip, 5) + '-' + RIGHT(Work.Zip, 4) ELSE Work.Zip END AS EmployerZip
	, RTRIM(JO1.FName) AS JO1FName
	, RTRIM(JO1.MInitial) AS JO1MInitial
	, RTRIM(JO1.LName) AS JO1LName
	, RTRIM(JO1.Address) AS JO1Address
	, RTRIM(JO1.City) AS JO1City
	, RTRIM(JO1.State) AS JO1State
	, RTRIM(JO1.Zip) AS JO1Zip
	, RTRIM(JO1.DriversLicenseNum) AS JO1DriversLicenseNum
	, LEFT(JO1.SSN, 3) + '-' + LEFT(RIGHT(JO1.SSN, 6),2) + '-' + RIGHT(JO1.SSN,4) AS JO1SSN
	, JO1.PhoneAC AS JO1AC
	, LEFT(JO1.Phone, 3) + '-' + RIGHT(RTRIM(JO1.Phone), 4) AS JO1Phone
	, JO1.WPhoneAC AS JO1WorkAC
	, LEFT(JO1.WPhone, 3) + '-' + RIGHT(RTRIM(JO1.WPhone), 4) AS JO1WorkPhone
	, JO1.DOB AS JO1DOB
	, RTRIM(JO2.FName) AS JO2FName
	, RTRIM(JO2.MInitial) AS JO2MInitial
	, RTRIM(JO2.LName) AS JO2LName
	, RTRIM(JO2.Address) AS JO2Address
	, RTRIM(JO2.City) AS JO2City
	, RTRIM(JO2.State) AS JO2State
	, RTRIM(JO2.Zip) AS JO2Zip
	, RTRIM(JO2.DriversLicenseNum) AS JO2DriversLicenseNum
	, LEFT(JO2.SSN, 3) + '-' + LEFT(RIGHT(JO2.SSN, 6),2) + '-' + RIGHT(JO2.SSN,4) AS JO2SSN
	, JO2.PhoneAC AS JO2AC
	, LEFT(JO2.Phone, 3) + '-' + RIGHT(RTRIM(JO2.Phone), 4) AS JO2Phone
	, JO2.WPhoneAC AS JO2WorkAC
	, LEFT(JO2.WPhone, 3) + '-' + RIGHT(RTRIM(JO2.WPhone), 4) AS JO2WorkPhone
	, JO2.DOB AS JO2DOB
	, RTRIM(JO3.FName) AS JO3FName
	, RTRIM(JO3.MInitial) AS JO3MInitial
	, RTRIM(JO3.LName) AS JO3LName
	, RTRIM(JO3.Address) AS JO3Address
	, RTRIM(JO3.City) AS JO3City
	, RTRIM(JO3.State) AS JO3State
	, RTRIM(JO3.Zip) AS JO3Zip
	, RTRIM(JO3.DriversLicenseNum) AS JO3DriversLicenseNum
	, LEFT(JO3.SSN, 3) + '-' + LEFT(RIGHT(JO3.SSN, 6),2) + '-' + RIGHT(JO3.SSN,4) AS JO3SSN
	, JO3.PhoneAC AS JO3AC
	, LEFT(JO3.Phone, 3) + '-' + RIGHT(RTRIM(JO3.Phone), 4) AS JO3Phone
	, JO3.WPhoneAC AS JO3WorkAC
	, LEFT(JO3.WPhone, 3) + '-' + RIGHT(RTRIM(JO3.WPhone), 4) AS JO3WorkPhone
	, JO3.DOB AS JO3DOB
	, RTRIM(JO4.FName) AS JO4FName
	, RTRIM(JO4.MInitial) AS JO4MInitial
	, RTRIM(JO4.LName) AS JO4LName
	, RTRIM(JO4.Address) AS JO4Address
	, RTRIM(JO4.City) AS JO4City
	, RTRIM(JO4.State) AS JO4State
	, RTRIM(JO4.Zip) AS JO4Zip
	, RTRIM(JO4.DriversLicenseNum) AS JO4DriversLicenseNum
	, LEFT(JO4.SSN, 3) + '-' + LEFT(RIGHT(JO4.SSN, 6),2) + '-' + RIGHT(JO4.SSN,4) AS JO4SSN
	, JO4.PhoneAC AS JO4AC
	, LEFT(JO4.Phone, 3) + '-' + RIGHT(RTRIM(JO4.Phone), 4) AS JO4Phone
	, JO4.WPhoneAC AS JO4WorkAC
	, LEFT(JO4.WPhone, 3) + '-' + RIGHT(RTRIM(JO4.WPhone), 4) AS JO4WorkPhone
	, JO4.DOB AS JO4DOB
	, RTRIM(JOBE1.FName) AS BE1FName
	, RTRIM(JOBE1.MInitial) AS BE1MInitial
	, RTRIM(JOBE1.LName) AS BE1LName
	, JOBE1.DOB AS BE1DOB
	, LEFT(JOBE1.SSN, 3) + '-' + LEFT(RIGHT(JOBE1.SSN, 6),2) + '-' + RIGHT(JOBE1.SSN,4) AS BE1SSN
	, RTRIM(JOBE1.Relationship) AS BE1RelToPrimary
	, CASE WHEN JOBE1.BenePercent != '' THEN RTRIM(JOBE1.BenePercent) + '%' ELSE '' END AS BE1BenePercent
	, RTRIM(JOBE2.FName) AS BE2FName
	, RTRIM(JOBE2.MInitial) AS BE2MInitial
	, RTRIM(JOBE2.LName) AS BE2LName
	, JOBE2.DOB AS BE2DOB
	, LEFT(JOBE2.SSN, 3) + '-' + LEFT(RIGHT(JOBE2.SSN, 6),2) + '-' + RIGHT(JOBE2.SSN,4) AS BE2SSN
	, RTRIM(JOBE2.Relationship) AS BE2RelToPrimary
	, CASE WHEN JOBE2.BenePercent != '' THEN RTRIM(JOBE2.BenePercent) + '%' ELSE '' END AS BE2BenePercent
	, RTRIM(JOBE3.FName) AS BE3FName
	, RTRIM(JOBE3.MInitial) AS BE3MInitial
	, RTRIM(JOBE3.LName) AS BE3LName
	, JOBE3.DOB AS BE3DOB
	, LEFT(JOBE3.SSN, 3) + '-' + LEFT(RIGHT(JOBE3.SSN, 6),2) + '-' + RIGHT(JOBE3.SSN,4) AS BE3SSN
	, RTRIM(JOBE3.Relationship) AS BE3RelToPrimary
	, CASE WHEN JOBE3.BenePercent != '' THEN RTRIM(JOBE3.BenePercent) + '%' ELSE '' END AS BE3BenePercent
	, RTRIM(JOBE4.FName) AS BE4FName
	, RTRIM(JOBE4.MInitial) AS BE4MInitial
	, RTRIM(JOBE4.LName) AS BE4LName
	, JOBE4.DOB AS BE4DOB
	, LEFT(JOBE4.SSN, 3) + '-' + LEFT(RIGHT(JOBE4.SSN, 6),2) + '-' + RIGHT(JOBE4.SSN,4) AS BE4SSN
	, RTRIM(JOBE4.Relationship) AS BE4RelToPrimary
	, CASE WHEN JOBE4.BenePercent != '' THEN RTRIM(JOBE4.BenePercent) + '%' ELSE '' END AS BE4BenePercent
	, CASE WHEN SASDA.Sequence != '' THEN 'X' ELSE '' END AS CheckingYes
	, CASE WHEN SASDA.Sequence != '' THEN '' ELSE 'X' END AS CheckingNo
	, RTRIM(SASDA.Description) AS CheckingType
	, CASE WHEN LOWER(LEFT(Q1.Response, 1)) = 'y' THEN 'X' END AS YesQuestion1
	, CASE WHEN LOWER(LEFT(Q1.Response, 1)) != 'y' THEN 'X' END AS NoQuestion1
	, CASE WHEN LOWER(LEFT(Q1.Response, 1)) = 'y' THEN RTRIM(Q2.Response) END AS Question2
	, CASE WHEN LOWER(LEFT(Q3.Response, 1)) = 'y' THEN 'X' END AS YesQuestion3
	, CASE WHEN LOWER(LEFT(Q3.Response, 1)) != 'y' THEN 'X' END AS NoQuestion3
	, CASE WHEN LOWER(LEFT(Q4.Response, 1)) = 'y' THEN 'X' END AS YesQuestion4
	, CASE WHEN LOWER(LEFT(Q4.Response, 1)) != 'y' THEN 'X' END AS NoQuestion4
	,	SAODP1.Description + 
		CASE WHEN SAODP2.Description != '' THEN CHAR(13) + CHAR(10) + SAODP2.Description ELSE '' END + 
		CASE WHEN SAODP3.Description != '' THEN CHAR(13) + CHAR(10) + SAODP3.Description ELSE '' END +
		CASE WHEN SAODP4.Description != '' THEN CHAR(13) + CHAR(10) + SAODP4.Description ELSE '' END +
		CASE WHEN SAODP5.Description != '' THEN CHAR(13) + CHAR(10) + SAODP5.Description ELSE '' END +
		CASE WHEN SAODP6.Description != '' THEN CHAR(13) + CHAR(10) + SAODP6.Description ELSE '' END
		AS OverDraft
	, CASE WHEN NMR.Qualification3 = 'Employer' THEN 'X' END AS EligEmployerYes
	, CASE WHEN NMR.Qualification3 = 'Location' THEN 'X' END AS EligLivesYes
	, CASE WHEN NMR.Qualification3 = 'Location' THEN 'X' END AS EligWorksYes
	, NMR.Qualification1 AS Relative
	, NMR.Qualification2 AS Relationship
	, NMR.CreatedBy AS TellerInitials
	, CASE NMR.Qualification3
		WHEN 'Location' THEN 'Lives, Works Or Worships in: ' + RTRIM(NMR.Department)
		WHEN 'Employer' THEN 'SEG Employer: ' + RTRIM(NMR.Department)
	  END AS LivesWorksWorships
FROM NewMemberRequest AS NMR
	LEFT OUTER JOIN NewMemberHome AS Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork AS Work On NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'JO', 'MI', '') AS JO1 ON NMR.TrackingNum = JO1.TrackingNum AND JO1.JointSequence = 1
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'JO', 'MI', '') AS JO2 ON NMR.TrackingNum = JO2.TrackingNum AND JO2.JointSequence = 2
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'JO', 'MI', '') AS JO3 ON NMR.TrackingNum = JO3.TrackingNum AND JO3.JointSequence = 3
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'JO', 'MI', '') AS JO4 ON NMR.TrackingNum = JO4.TrackingNum AND JO4.JointSequence = 4
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'BE', '', '') AS JOBE1 ON NMR.TrackingNum = JOBE1.TrackingNum AND JOBE1.JointSequence = 1
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'BE', '', '') AS JOBE2 ON NMR.TrackingNum = JOBE2.TrackingNum AND JOBE2.JointSequence = 2
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'BE', '', '') AS JOBE3 ON NMR.TrackingNum = JOBE3.TrackingNum AND JOBE3.JointSequence = 3
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'BE', '', '') AS JOBE4 ON NMR.TrackingNum = JOBE4.TrackingNum AND JOBE4.JointSequence = 4
	LEFT OUTER JOIN fnCCCU_GetSA(@TrackingNum, 'SDA', 'S') AS SASDA ON NMR.TrackingNum = SASDA.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetQuestion(@TrackingNum, '1') AS Q1 ON NMR.TrackingNum = Q1.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetQuestion(@TrackingNum, '2') AS Q2 ON NMR.TrackingNum = Q2.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetQuestion(@TrackingNum, '3') AS Q3 ON NMR.TrackingNum = Q3.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetQuestion(@TrackingNum, '4') AS Q4 ON NMR.TrackingNum = Q4.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetSAODP(@TrackingNum, '1') AS SAODP1 ON NMR.TrackingNum = SAODP1.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetSAODP(@TrackingNum, '2') AS SAODP2 ON NMR.TrackingNum = SAODP2.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetSAODP(@TrackingNum, '3') AS SAODP3 ON NMR.TrackingNum = SAODP3.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetSAODP(@TrackingNum, '4') AS SAODP4 ON NMR.TrackingNum = SAODP4.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetSAODP(@TrackingNum, '5') AS SAODP5 ON NMR.TrackingNum = SAODP5.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetSAODP(@TrackingNum, '6') AS SAODP6 ON NMR.TrackingNum = SAODP6.TrackingNum
WHERE NMR.TrackingNum = @TrackingNum
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_D38Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCCCU_D38Enable] @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @docsubname CHAR(100)
DECLARE @newdocsub CHAR(100)
DECLARE @count INT
DECLARE @docindex INT

DECLARE curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT '' AS docsubname
	FROM NewMemberJointOwner AS JO
	RIGHT OUTER JOIN NewMemberRequest AS NMR ON JO.TrackingNum = NMR.TrackingNum
	LEFT JOIN NewMemberSubAccount AS SA ON SA.TrackingNum = NMR.TrackingNum
	WHERE NMR.TrackingNum = @TrackingNum AND NMR.Processed = 999
		AND (
			JO.JointOwnerType = 'BE'
			OR (NMR.Created = 'I' AND ((SA.Created = 'Y' AND SA.ProductType <> 'CERT') OR JO.CreateHost = ''))
			OR (NMR.AccountType = 'MU' AND SA.ProductType = 'SDA')
			)

OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @newdocsub = 'Account Change Form (2) - Add Beneficiary (ies) ' + @docsubname
IF @docsubname Is Null
BEGIN
	SET @newdocsub = 'Account Change Form (2) - Add Beneficiary (ies)'
END
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
WHILE @@FETCH_STATUS = 0
BEGIN
	SET @count = @count + 1
	PRINT @count
		IF @count = 1
	BEGIN
		SET @docindex = @docindex + 1
		INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END
		FETCH NEXT FROM curs INTO @docsubname
	PRINT @docsubname
	IF @@FETCH_STATUS = 0
	BEGIN
		SET @newdocsub = (RTRIM(@newdocsub) + '' + RTRIM(@docsubname))
		PRINT @newdocsub
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex
	END
END
CLOSE curs
DEALLOCATE curs
SELECT * FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
DELETE FROM NewMemberDoc WHERE TrackingNum = @TrackingNum

Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_D38Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCCCU_D38Fields] @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
Declare @joseq int
Declare @jo1seq int
Declare @jo2seq int
Declare @jo3seq int
Declare @jo4seq int
Declare @count int
--Set @jo1seq = 1
--Set @jo2seq = 1
--Set @jo3seq = 1
--Set @jo4seq = 1
--CREATE TABLE #docs(id int identity Primary Key, docindex int, j1FullName char(100), j1FullAddress char(100), j1FullPhone char(12), j1DOB char(10), j1SSN char(11), j1ID char(20), j1IDIssueDate  char(10), j1IDExpDate  char(10), j1IDState  char(2), j2FullName char(100), j2FullAddress char(100), j2FullPhone char(11), j2DOB char(10), j2SSN char(11), j2ID char(20), j2IDIssueDate  char(10), j2IDExpDate  char(10), j2IDState  char(2), j3FullName char(100), j3FullAddress char(100), j3FullPhone char(11), j3DOB char(10), j3SSN char(11), j3ID char(20), j3IDIssueDate  char(10), j3IDExpDate  char(10), j3IDState  char(2), j4FullName char(100), j4FullAddress char(100), j4FullPhone char(11), j4DOB char(10), j4SSN char(11), j4ID char(20), j4IDIssueDate  char(10), j4IDExpDate  char(10), j4IDState  char(2))
Declare curs2 CURSOR FOR
	SELECT  CONVERT(int, JO.Sequence)
	from NewMemberJointOwner As JO
	INNER JOIN NewMemberJointLink AS JL ON JO.Sequence = JL.JointSequence AND JL.TrackingNum = @TrackingNum
	INNER JOIN NewMemberSubAccount AS SA ON JL.SubAccountSequence = SA.Sequence AND SA.TrackingNum = @TrackingNum
	WHERE JO.TrackingNum = @TrackingNum AND SA.ProductType IN ('PSA', 'RSA', 'SDA', 'CC')
	GROUP BY CONVERT(int, JO.Sequence)
--IF @@ROWCOUNT = 0
OPEN curs2
FETCH NEXT FROM curs2 INTO @joseq
SET @count = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
      	IF (@count = 0 AND @DocIndex = 1) OR (@count = 4 AND @DocIndex = 2) OR (@count = 8 AND @DocIndex = 3)
		BEGIN
			Set @jo1seq = @joseq
		END
	IF (@count = 1 AND @DocIndex = 1) OR (@count = 5 AND @DocIndex = 2) OR (@count = 9 AND @DocIndex = 3)
		BEGIN
			Set @jo2seq = @joseq		
		END
	IF (@count = 2 AND @DocIndex = 1) OR (@count = 6 AND @DocIndex = 2) OR (@count = 10 AND @DocIndex = 3)
		BEGIN
			Set @jo3seq = @joseq		
		END
	IF (@count = 3 AND @DocIndex = 1) OR (@count = 7 AND @DocIndex = 2) OR (@count = 11 AND @DocIndex = 3)
		BEGIN
			Set @jo4seq = @joseq		
		END
      	FETCH NEXT FROM curs2 INTO @joseq
	SET @count = @count + 1
	PRINT @count
   END
CLOSE curs2
DEALLOCATE curs2
SELECT @DocIndex As DocIndex
	, RTRIM(NMR.DriversLicenseNum) AS DriversLicenseNum
	, NMR.DriversLicenseState
	, CONVERT(char(10), NMR.IDExpirationDate, 101) AS DLExpirationDate
	, RTRIM(NMR.DriversLicenseNum) + '/' + NMR.DriversLicenseState AS DL
	, CASE NMR.IDType WHEN 'D' THEN 'Drivers License' ELSE NMR.IDSource END AS IDType
	, CASE NMR.IDType WHEN 'D' THEN NMR.DriversLicenseNum ELSE NMR.IDNumber END AS ID
	, NMR.IDNumber
	, CONVERT(char(10), NMR.IDIssueDate, 101) AS IDIssueDate
	, CONVERT(char(10), NMR.IDExpirationDate, 101) AS IDExpDate
	, CONVERT(char(10), NMR.IDExpirationDate, 101) AS IDExpirationDate
	, NMR.DriversLicenseState AS IDState
	, RTRIM(JO1.FName) AS JO1FName
	, RTRIM(JO1.MInitial) AS JO1MInitial
	, RTRIM(JO1.LName) AS JO1LName
	, RTRIM(JO1.Address) AS JO1Address
	, RTRIM(JO1.City) AS JO1City
	, RTRIM(JO1.State) AS JO1State
	, RTRIM(JO1.Zip) AS JO1Zip
	, RTRIM(JO1.DriversLicenseNum) AS JO1DriversLicenseNum
	, LEFT(JO1.SSN, 3) + '-' + LEFT(RIGHT(JO1.SSN, 6),2) + '-' + RIGHT(JO1.SSN,4) AS JO1SSN
	, JO1.PhoneAC AS JO1AC
	, LEFT(JO1.Phone, 3) + '-' + RIGHT(RTRIM(JO1.Phone), 4) AS JO1Phone
	, JO1.WPhoneAC AS JO1WorkAC
	, LEFT(JO1.WPhone, 3) + '-' + RIGHT(RTRIM(JO1.WPhone), 4) AS JO1WorkPhone
	, JO1.DOB AS JO1DOB
	, RTRIM(JO2.FName) AS JO2FName
	, RTRIM(JO2.MInitial) AS JO2MInitial
	, RTRIM(JO2.LName) AS JO2LName
	, RTRIM(JO2.Address) AS JO2Address
	, RTRIM(JO2.City) AS JO2City
	, RTRIM(JO2.State) AS JO2State
	, RTRIM(JO2.Zip) AS JO2Zip
	, RTRIM(JO2.DriversLicenseNum) AS JO2DriversLicenseNum
	, LEFT(JO2.SSN, 3) + '-' + LEFT(RIGHT(JO2.SSN, 6),2) + '-' + RIGHT(JO2.SSN,4) AS JO2SSN
	, JO2.PhoneAC AS JO2AC
	, LEFT(JO2.Phone, 3) + '-' + RIGHT(RTRIM(JO2.Phone), 4) AS JO2Phone
	, JO2.WPhoneAC AS JO2WorkAC
	, LEFT(JO2.WPhone, 3) + '-' + RIGHT(RTRIM(JO2.WPhone), 4) AS JO2WorkPhone
	, JO2.DOB AS JO2DOB
	, RTRIM(JO3.FName) AS JO3FName
	, RTRIM(JO3.MInitial) AS JO3MInitial
	, RTRIM(JO3.LName) AS JO3LName
	, RTRIM(JO3.Address) AS JO3Address
	, RTRIM(JO3.City) AS JO3City
	, RTRIM(JO3.State) AS JO3State
	, RTRIM(JO3.Zip) AS JO3Zip
	, RTRIM(JO3.DriversLicenseNum) AS JO3DriversLicenseNum
	, LEFT(JO3.SSN, 3) + '-' + LEFT(RIGHT(JO3.SSN, 6),2) + '-' + RIGHT(JO3.SSN,4) AS JO3SSN
	, JO3.PhoneAC AS JO3AC
	, LEFT(JO3.Phone, 3) + '-' + RIGHT(RTRIM(JO3.Phone), 4) AS JO3Phone
	, JO3.WPhoneAC AS JO3WorkAC
	, LEFT(JO3.WPhone, 3) + '-' + RIGHT(RTRIM(JO3.WPhone), 4) AS JO3WorkPhone
	, JO3.DOB AS JO3DOB
	, RTRIM(JO4.FName) AS JO4FName
	, RTRIM(JO4.MInitial) AS JO4MInitial
	, RTRIM(JO4.LName) AS JO4LName
	, RTRIM(JO4.Address) AS JO4Address
	, RTRIM(JO4.City) AS JO4City
	, RTRIM(JO4.State) AS JO4State
	, RTRIM(JO4.Zip) AS JO4Zip
	, RTRIM(JO4.DriversLicenseNum) AS JO4DriversLicenseNum
	, LEFT(JO4.SSN, 3) + '-' + LEFT(RIGHT(JO4.SSN, 6),2) + '-' + RIGHT(JO4.SSN,4) AS JO4SSN
	, JO4.PhoneAC AS JO4AC
	, LEFT(JO4.Phone, 3) + '-' + RIGHT(RTRIM(JO4.Phone), 4) AS JO4Phone
	, JO4.WPhoneAC AS JO4WorkAC
	, LEFT(JO4.WPhone, 3) + '-' + RIGHT(RTRIM(JO4.WPhone), 4) AS JO4WorkPhone
	, JO4.DOB AS JO4DOB
	, RTRIM(JOBE1.FName) AS BE1FName
	, RTRIM(JOBE1.MInitial) AS BE1MInitial
	, RTRIM(JOBE1.LName) AS BE1LName
	, JOBE1.DOB AS BE1DOB
	, LEFT(JOBE1.SSN, 3) + '-' + LEFT(RIGHT(JOBE1.SSN, 6),2) + '-' + RIGHT(JOBE1.SSN,4) AS BE1SSN
	, RTRIM(JOBE1.Relationship) AS BE1RelToPrimary
	, CASE WHEN JOBE1.BenePercent != '' THEN RTRIM(JOBE1.BenePercent) + '%' ELSE '' END AS BE1BenePercent
	, RTRIM(JOBE2.FName) AS BE2FName
	, RTRIM(JOBE2.MInitial) AS BE2MInitial
	, RTRIM(JOBE2.LName) AS BE2LName
	, JOBE2.DOB AS BE2DOB
	, LEFT(JOBE2.SSN, 3) + '-' + LEFT(RIGHT(JOBE2.SSN, 6),2) + '-' + RIGHT(JOBE2.SSN,4) AS BE2SSN
	, RTRIM(JOBE2.Relationship) AS BE2RelToPrimary
	, CASE WHEN JOBE2.BenePercent != '' THEN RTRIM(JOBE2.BenePercent) + '%' ELSE '' END AS BE2BenePercent
	, RTRIM(JOBE3.FName) AS BE3FName
	, RTRIM(JOBE3.MInitial) AS BE3MInitial
	, RTRIM(JOBE3.LName) AS BE3LName
	, JOBE3.DOB AS BE3DOB
	, LEFT(JOBE3.SSN, 3) + '-' + LEFT(RIGHT(JOBE3.SSN, 6),2) + '-' + RIGHT(JOBE3.SSN,4) AS BE3SSN
	, RTRIM(JOBE3.Relationship) AS BE3RelToPrimary
	, CASE WHEN JOBE3.BenePercent != '' THEN RTRIM(JOBE3.BenePercent) + '%' ELSE '' END AS BE3BenePercent
	, RTRIM(JOBE4.FName) AS BE4FName
	, RTRIM(JOBE4.MInitial) AS BE4MInitial
	, RTRIM(JOBE4.LName) AS BE4LName
	, JOBE4.DOB AS BE4DOB
	, LEFT(JOBE4.SSN, 3) + '-' + LEFT(RIGHT(JOBE4.SSN, 6),2) + '-' + RIGHT(JOBE4.SSN,4) AS BE4SSN
	, RTRIM(JOBE4.Relationship) AS BE4RelToPrimary
	, CASE WHEN JOBE4.BenePercent != '' THEN RTRIM(JOBE4.BenePercent) + '%' ELSE '' END AS BE4BenePercent

	, '' AS CB1FName
	, '' AS CB1MInitial
	, '' AS CB1LName
	, '' AS CB1DOB
	, '' AS CB1SSN
	, '' AS CB1RelToPrimary
	, '' AS CB1BenePercent

	, '' AS CB2FName
	, '' AS CB2MInitial
	, '' AS CB2LName
	, '' AS CB2DOB
	, '' AS CB2SSN
	, '' AS CB2RelToPrimary
	, '' AS CB2BenePercent

	, CASE WHEN SASDA.Sequence != '' THEN 'X' ELSE '' END AS CheckingYes
	, CASE WHEN SASDA.Sequence != '' THEN '' ELSE 'X' END AS CheckingNo
	, CASE WHEN LOWER(LEFT(Q1.Response, 1)) = 'y' THEN 'X' END AS YesQuestion1
	, CASE WHEN LOWER(LEFT(Q1.Response, 1)) != 'y' THEN 'X' END AS NoQuestion1
	, CASE WHEN LOWER(LEFT(Q1.Response, 1)) = 'y' THEN RTRIM(Q2.Response) END AS Question2
	, CASE WHEN LOWER(LEFT(Q3.Response, 1)) = 'y' THEN 'X' END AS YesQuestion3
	, CASE WHEN LOWER(LEFT(Q3.Response, 1)) != 'y' THEN 'X' END AS NoQuestion3
	, CASE WHEN LOWER(LEFT(Q4.Response, 1)) = 'y' THEN 'X' END AS YesQuestion4
	, CASE WHEN LOWER(LEFT(Q4.Response, 1)) != 'y' THEN 'X' END AS NoQuestion4
	,	SAODP1.Description + 
		CASE WHEN SAODP2.Description != '' THEN CHAR(13) + CHAR(10) + SAODP2.Description ELSE '' END + 
		CASE WHEN SAODP3.Description != '' THEN CHAR(13) + CHAR(10) + SAODP3.Description ELSE '' END +
		CASE WHEN SAODP4.Description != '' THEN CHAR(13) + CHAR(10) + SAODP4.Description ELSE '' END +
		CASE WHEN SAODP5.Description != '' THEN CHAR(13) + CHAR(10) + SAODP5.Description ELSE '' END +
		CASE WHEN SAODP6.Description != '' THEN CHAR(13) + CHAR(10) + SAODP6.Description ELSE '' END
		AS OverDraft
	, CASE WHEN NMR.Qualification3 = 'Employer' THEN 'X' END AS EligEmployerYes
	, CASE WHEN NMR.Qualification3 = 'Location' THEN 'X' END AS EligLivesYes
	, CASE WHEN NMR.Qualification3 = 'Location' THEN 'X' END AS EligWorksYes
	, NMR.Qualification1 AS Relative
	, NMR.Qualification2 AS Relationship
	, NMR.CreatedBy AS TellerInitials
	, CASE NMR.Qualification3
		WHEN 'Location' THEN 'Lives, Works Or Worships in: ' + RTRIM(NMR.Department)
		WHEN 'Employer' THEN 'SEG Employer: ' + RTRIM(NMR.Department)
	  END AS LivesWorksWorships
FROM NewMemberRequest AS NMR
	LEFT OUTER JOIN NewMemberHome AS Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork AS Work On NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'JO', 'MI', '') AS JO1 ON NMR.TrackingNum = JO1.TrackingNum AND JO1.JointSequence = 1
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'JO', 'MI', '') AS JO2 ON NMR.TrackingNum = JO2.TrackingNum AND JO2.JointSequence = 2
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'JO', 'MI', '') AS JO3 ON NMR.TrackingNum = JO3.TrackingNum AND JO3.JointSequence = 3
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'JO', 'MI', '') AS JO4 ON NMR.TrackingNum = JO4.TrackingNum AND JO4.JointSequence = 4
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'BE', '', '') AS JOBE1 ON NMR.TrackingNum = JOBE1.TrackingNum AND JOBE1.JointSequence = 1
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'BE', '', '') AS JOBE2 ON NMR.TrackingNum = JOBE2.TrackingNum AND JOBE2.JointSequence = 2
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'BE', '', '') AS JOBE3 ON NMR.TrackingNum = JOBE3.TrackingNum AND JOBE3.JointSequence = 3
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'BE', '', '') AS JOBE4 ON NMR.TrackingNum = JOBE4.TrackingNum AND JOBE4.JointSequence = 4
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'BE', '', '') AS JOBE5 ON NMR.TrackingNum = JOBE5.TrackingNum AND JOBE5.JointSequence = 5
	LEFT OUTER JOIN fnCCCU_GetSA(@TrackingNum, 'SDA', 'S') AS SASDA ON NMR.TrackingNum = SASDA.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetQuestion(@TrackingNum, '1') AS Q1 ON NMR.TrackingNum = Q1.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetQuestion(@TrackingNum, '2') AS Q2 ON NMR.TrackingNum = Q2.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetQuestion(@TrackingNum, '3') AS Q3 ON NMR.TrackingNum = Q3.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetQuestion(@TrackingNum, '4') AS Q4 ON NMR.TrackingNum = Q4.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetSAODP(@TrackingNum, '1') AS SAODP1 ON NMR.TrackingNum = SAODP1.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetSAODP(@TrackingNum, '2') AS SAODP2 ON NMR.TrackingNum = SAODP2.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetSAODP(@TrackingNum, '3') AS SAODP3 ON NMR.TrackingNum = SAODP3.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetSAODP(@TrackingNum, '4') AS SAODP4 ON NMR.TrackingNum = SAODP4.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetSAODP(@TrackingNum, '5') AS SAODP5 ON NMR.TrackingNum = SAODP5.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetSAODP(@TrackingNum, '6') AS SAODP6 ON NMR.TrackingNum = SAODP6.TrackingNum
WHERE NMR.TrackingNum = @TrackingNum
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_D3Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCCCU_D3Enable] @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
--Declare @TrackingNum int
--DROP TABLE #docs
--DEALLOCATE curs
--Set @TrackingNum = 1477
Declare @docsubname char(100)
Declare @newdocsub char(100)
Declare @count int
Declare @docindex int
--CREATE TABLE #docs(docindex int identity Primary Key, docsubname char(100))
Declare curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT '' AS docsubname
	FROM NewMemberRequest AS NMR
	WHERE NMR.TrackingNum = @TrackingNum AND NMR.Processed = 999 AND NMR.Created = 'Y' AND NMR.AccountType IN ('BC', 'BE', 'BG', 'BL', 'BN', 'BP', 'BY','BS')
--IF @@ROWCOUNT = 0
OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @newdocsub = 'Business Account Card ' + @docsubname
IF @docsubname Is Null
BEGIN
	SET @newdocsub = 'Business Account Card'
END
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count
      	IF @count = 1
	BEGIN
		Set @docindex = @docindex + 1
     		 INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END
      	FETCH NEXT FROM curs INTO @docsubname
	PRINT @docsubname
	IF @@FETCH_STATUS = 0
	BEGIN
		SET @newdocsub = (RTRIM(@newdocsub) + ', ' + RTRIM(@docsubname))
		PRINT @newdocsub
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex
	END
   END
CLOSE curs
DEALLOCATE curs
Select *  FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Delete FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_D3Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO


CREATE PROCEDURE [IMS].[spCCCU_D3Fields] @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
Declare @joseq int
Declare @jo1seq int
Declare @jo2seq int
Declare @jo3seq int
Declare @jo4seq int
Declare @count int
--Set @jo1seq = 1
--Set @jo2seq = 1
--Set @jo3seq = 1
--Set @jo4seq = 1
--CREATE TABLE #docs(id int identity Primary Key, docindex int, j1FullName char(100), j1FullAddress char(100), j1FullPhone char(12), j1DOB char(10), j1SSN char(11), j1ID char(20), j1IDIssueDate  char(10), j1IDExpDate  char(10), j1IDState  char(2), j2FullName char(100), j2FullAddress char(100), j2FullPhone char(11), j2DOB char(10), j2SSN char(11), j2ID char(20), j2IDIssueDate  char(10), j2IDExpDate  char(10), j2IDState  char(2), j3FullName char(100), j3FullAddress char(100), j3FullPhone char(11), j3DOB char(10), j3SSN char(11), j3ID char(20), j3IDIssueDate  char(10), j3IDExpDate  char(10), j3IDState  char(2), j4FullName char(100), j4FullAddress char(100), j4FullPhone char(11), j4DOB char(10), j4SSN char(11), j4ID char(20), j4IDIssueDate  char(10), j4IDExpDate  char(10), j4IDState  char(2))
Declare curs2 CURSOR FOR
	SELECT  CONVERT(int, JO.Sequence)
	from NewMemberJointOwner As JO
	INNER JOIN NewMemberJointLink AS JL ON JO.Sequence = JL.JointSequence AND JL.TrackingNum = @TrackingNum
	INNER JOIN NewMemberSubAccount AS SA ON JL.SubAccountSequence = SA.Sequence AND SA.TrackingNum = @TrackingNum
	WHERE JO.TrackingNum = @TrackingNum AND (JO.JointOwnerType IN ('JS')) AND SA.ProductType IN ('PSA', 'RSA', 'SDA', 'CC')
	GROUP BY CONVERT(int, JO.Sequence)
--IF @@ROWCOUNT = 0
OPEN curs2
FETCH NEXT FROM curs2 INTO @joseq
SET @count = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
      	IF (@count = 0 AND @DocIndex = 1) OR (@count = 4 AND @DocIndex = 2) OR (@count = 8 AND @DocIndex = 3)
		BEGIN
			Set @jo1seq = @joseq
		END
	IF (@count = 1 AND @DocIndex = 1) OR (@count = 5 AND @DocIndex = 2) OR (@count = 9 AND @DocIndex = 3)
		BEGIN
			Set @jo2seq = @joseq		
		END
	IF (@count = 2 AND @DocIndex = 1) OR (@count = 6 AND @DocIndex = 2) OR (@count = 10 AND @DocIndex = 3)
		BEGIN
			Set @jo3seq = @joseq		
		END
	IF (@count = 3 AND @DocIndex = 1) OR (@count = 7 AND @DocIndex = 2) OR (@count = 11 AND @DocIndex = 3)
		BEGIN
			Set @jo4seq = @joseq		
		END
      	FETCH NEXT FROM curs2 INTO @joseq
	SET @count = @count + 1
	PRINT @count
   END
CLOSE curs2
DEALLOCATE curs2
SELECT @DocIndex As DocIndex
	, CASE WHEN NMR.AccountType = 'BS' OR NMR.AccountType = 'BE' THEN 'X' END AS Sole
	, CASE WHEN NMR.AccountType = 'BG' OR NMR.AccountType = 'BL' THEN 'X' END AS Partnership
	, CASE WHEN NMR.AccountType = 'BC' THEN 'X' END AS Corp
	, CASE WHEN NMR.AccountType = 'BA' OR NMR.AccountType = 'BN' OR NMR.AccountType = 'ES' THEN 'X' END AS NonProfit
	, CASE WHEN NMR.AccountType = 'BY' THEN 'X' END AS LLC
	, CASE WHEN NMR.AccountType = 'BP' THEN 'X' END AS LLPartnership
	, NMR.OrganizationName AS OrgName
	, RTRIM(JOJS1.FName) AS JS1FName
	, RTRIM(JOJS1.MInitial) AS JS1MInitial
	, RTRIM(JOJS1.LName) AS JS1LName
	, LEFT(JOJS1.SSN, 3) + '-' + LEFT(RIGHT(JOJS1.SSN, 6), 2) + '-' + RIGHT(JOJS1.SSN, 4) AS JS1SSN
	, RTRIM(JOJS1.Address) AS JS1Address
	, RTRIM(JOJS1.City) AS JS1City
	, RTRIM(JOJS1.State) AS JS1State
	, CASE LEN(JOJS1.Zip) WHEN 9 THEN LEFT(JOJS1.Zip, 5) + '-' + RIGHT(RTRIM(JOJS1.Zip), 4) ELSE JOJS1.Zip END AS JS1Zip
	, RTRIM(JOJS1.DriversLicenseNum) AS JS1DriversLicenseNum
	, JOJS1.PhoneAC AS JS1AC
	, LEFT(JOJS1.Phone, 3) + '-' + RIGHT(RTRIM(JOJS1.Phone), 4) AS JO1Phone
	, JOJS1.WPhoneAC AS JS1WorkAC
	, LEFT(JOJS1.WPhone, 3) + '-' + RIGHT(RTRIM(JOJS1.WPhone), 4) AS JS1WorkPhone
	, JOJS1.DOB AS JS1DOB
	, RTRIM(JOJS2.FName) AS JS2FName
	, RTRIM(JOJS2.MInitial) AS JS2MInitial
	, RTRIM(JOJS2.LName) AS JS2LName
	, LEFT(JOJS2.SSN, 3) + '-' + LEFT(RIGHT(JOJS2.SSN, 6), 2) + '-' + RIGHT(JOJS2.SSN, 4) AS JS2SSN
	, RTRIM(JOJS2.Address) AS JS2Address
	, RTRIM(JOJS2.City) AS JS2City
	, RTRIM(JOJS2.State) AS JS2State
	, CASE LEN(JOJS2.Zip) WHEN 9 THEN LEFT(JOJS2.Zip, 5) + '-' + RIGHT(RTRIM(JOJS2.Zip), 4) ELSE JOJS2.Zip END AS JS2Zip
	, RTRIM(JOJS2.DriversLicenseNum) AS JS2DriversLicenseNum
	, JOJS2.PhoneAC AS JS2AC
	, LEFT(JOJS2.Phone, 3) + '-' + RIGHT(RTRIM(JOJS2.Phone), 4) AS JS2Phone
	, JOJS2.WPhoneAC AS JS2WorkAC
	, LEFT(JOJS2.WPhone, 3) + '-' + RIGHT(RTRIM(JOJS2.WPhone), 4) AS JS2WorkPhone
	, JOJS2.DOB AS JS2DOB
	, RTRIM(JOJS3.FName) AS JS3FName
	, RTRIM(JOJS3.MInitial) AS JS3MInitial
	, RTRIM(JOJS3.LName) AS JS3LName
	, LEFT(JOJS3.SSN, 3) + '-' + LEFT(RIGHT(JOJS3.SSN, 6), 2) + '-' + RIGHT(JOJS3.SSN, 4) AS JS3SSN
	, RTRIM(JOJS3.Address) AS JS3Address
	, RTRIM(JOJS3.City) AS JS3City
	, RTRIM(JOJS3.State) AS JS3State
	, CASE LEN(JOJS3.Zip) WHEN 9 THEN LEFT(JOJS3.Zip, 5) + '-' + RIGHT(RTRIM(JOJS3.Zip), 4) ELSE JOJS3.Zip END AS JS3Zip
	, RTRIM(JOJS3.DriversLicenseNum) AS JS3DriversLicenseNum
	, JOJS3.PhoneAC AS JS3AC
	, LEFT(JOJS3.Phone, 3) + '-' + RIGHT(RTRIM(JOJS3.Phone), 4) AS JS3Phone
	, JOJS3.WPhoneAC AS JS3WorkAC
	, LEFT(JOJS3.WPhone, 3) + '-' + RIGHT(RTRIM(JOJS3.WPhone), 4) AS JS3WorkPhone
	, JOJS3.DOB AS JS3DOB
	, RTRIM(JOJS4.FName) AS JS4FName
	, RTRIM(JOJS4.MInitial) AS JS4MInitial
	, RTRIM(JOJS4.LName) AS JS4LName
	, LEFT(JOJS4.SSN, 3) + '-' + LEFT(RIGHT(JOJS4.SSN, 6), 2) + '-' + RIGHT(JOJS4.SSN, 4) AS JS4SSN
	, RTRIM(JOJS4.Address) AS JS4Address
	, RTRIM(JOJS4.City) AS JS4City
	, RTRIM(JOJS4.State) AS JS4State
	, CASE LEN(JOJS4.Zip) WHEN 9 THEN LEFT(JOJS4.Zip, 5) + '-' + RIGHT(RTRIM(JOJS4.Zip), 4) ELSE JOJS4.Zip END AS JS4Zip
	, RTRIM(JOJS4.DriversLicenseNum) AS JS4DriversLicenseNum
	, JOJS4.PhoneAC AS JS4AC
	, LEFT(JOJS4.Phone, 3) + '-' + RIGHT(RTRIM(JOJS4.Phone), 4) AS JS4Phone
	, JOJS4.WPhoneAC AS JS4WorkAC
	, LEFT(JOJS4.WPhone, 3) + '-' + RIGHT(RTRIM(JOJS4.WPhone), 4) AS JS4WorkPhone
	, JOJS4.DOB AS JS4DOB
	, RTRIM(JOJS5.FName) AS JS5FName
	, RTRIM(JOJS5.MInitial) AS JS5MInitial
	, RTRIM(JOJS5.LName) AS JS5LName
	, LEFT(JOJS5.SSN, 3) + '-' + LEFT(RIGHT(JOJS5.SSN, 6), 2) + '-' + RIGHT(JOJS5.SSN, 4) AS JS5SSN
	, RTRIM(JOJS5.Address) AS JS5Address
	, RTRIM(JOJS5.City) AS JS5City
	, RTRIM(JOJS5.State) AS JS5State
	, CASE LEN(JOJS5.Zip) WHEN 9 THEN LEFT(JOJS5.Zip, 5) + '-' + RIGHT(RTRIM(JOJS5.Zip), 4) ELSE JOJS5.Zip END AS JS5Zip
	, RTRIM(JOJS5.DriversLicenseNum) AS JS5DriversLicenseNum
	, JOJS5.PhoneAC AS JS5AC
	, LEFT(JOJS5.Phone, 3) + '-' + RIGHT(RTRIM(JOJS5.Phone), 4) AS JS5Phone
	, JOJS5.WPhoneAC AS JS5WorkAC
	, LEFT(JOJS5.WPhone, 3) + '-' + RIGHT(RTRIM(JOJS5.WPhone), 4) AS JS5WorkPhone
	, JOJS5.DOB AS JS5DOB
	, RTRIM(JOJS6.FName) AS JS6FName
	, RTRIM(JOJS6.MInitial) AS JS6MInitial
	, RTRIM(JOJS6.LName) AS JS6LName
	, LEFT(JOJS6.SSN, 3) + '-' + LEFT(RIGHT(JOJS6.SSN, 6), 2) + '-' + RIGHT(JOJS6.SSN, 4) AS JS6SSN
	, RTRIM(JOJS6.Address) AS JS6Address
	, RTRIM(JOJS6.City) AS JS6City
	, RTRIM(JOJS6.State) AS JS6State
	, CASE LEN(JOJS6.Zip) WHEN 9 THEN LEFT(JOJS6.Zip, 5) + '-' + RIGHT(RTRIM(JOJS6.Zip), 4) ELSE JOJS6.Zip END AS JS6Zip
	, RTRIM(JOJS6.DriversLicenseNum) AS JS6DriversLicenseNum
	, JOJS6.PhoneAC AS JS6AC
	, LEFT(JOJS6.Phone, 3) + '-' + RIGHT(RTRIM(JOJS6.Phone), 4) AS JS6Phone
	, JOJS6.WPhoneAC AS JS6WorkAC
	, LEFT(JOJS6.WPhone, 3) + '-' + RIGHT(RTRIM(JOJS6.WPhone), 4) AS JS6WorkPhone
	, JOJS6.DOB AS JS6DOB
	, CASE WHEN NMR.SSN != '' THEN 'X' END AS YesSSN
	, LEFT(NMR.SSN, 2) + '-' + RIGHT(NMR.SSN, 7) AS SSN
	, 'X' AS BackWith
	, CASE WHEN NMR.Citizenship = 'US' OR NMR.Citizenship = 'RA' OR NMR.AccountClass = 'O' THEN 'X' END AS YesUSCitizen
	, CASE WHEN NMR.Citizenship = 'NR' THEN 'X' END AS NoUSCitizen
	, CASE WHEN SASDA.Sequence != '' THEN 'X' ELSE '' END AS CheckingYes
	, CASE WHEN SASDA.Sequence != '' THEN '' ELSE 'X' END AS CheckingNo
	, CASE WHEN LOWER(LEFT(Q1.Response, 1)) = 'y' THEN 'X' END AS YesQuestion1
	, CASE WHEN LOWER(LEFT(Q1.Response, 1)) != 'y' THEN 'X' END AS NoQuestion1
	, CASE WHEN LOWER(LEFT(Q1.Response, 1)) = 'y' THEN RTRIM(Q2.Response) END AS Question2
	, CASE WHEN LOWER(LEFT(Q3.Response, 1)) = 'y' THEN 'X' END AS YesQuestion3
	, CASE WHEN LOWER(LEFT(Q3.Response, 1)) != 'y' THEN 'X' END AS NoQuestion3
	, CASE WHEN LOWER(LEFT(Q4.Response, 1)) = 'y' THEN 'X' END AS YesQuestion4
	, CASE WHEN LOWER(LEFT(Q4.Response, 1)) != 'y' THEN 'X' END AS NoQuestion4
	,	SAODP1.Description + 
		CASE WHEN SAODP2.Description != '' THEN CHAR(13) + CHAR(10) + SAODP2.Description ELSE '' END + 
		CASE WHEN SAODP3.Description != '' THEN CHAR(13) + CHAR(10) + SAODP3.Description ELSE '' END +
		CASE WHEN SAODP4.Description != '' THEN CHAR(13) + CHAR(10) + SAODP4.Description ELSE '' END +
		CASE WHEN SAODP5.Description != '' THEN CHAR(13) + CHAR(10) + SAODP5.Description ELSE '' END +
		CASE WHEN SAODP6.Description != '' THEN CHAR(13) + CHAR(10) + SAODP6.Description ELSE '' END
		AS OverDraft
	, CASE WHEN NMR.Qualification3 = 'Employer' THEN 'X' END AS EligEmployerYes
	, CASE WHEN NMR.Qualification3 = 'Location' THEN 'X' END AS EligLivesYes
	, CASE WHEN NMR.Qualification3 = 'Location' THEN 'X' END AS EligWorksYes
	, NMR.Qualification1 AS Relative
	, NMR.Qualification2 AS Relationship
	, NMR.Seller AS TellerInitials
	, CASE NMR.Qualification3
		WHEN 'Location' THEN 'Lives, Works Or Worships in: ' + RTRIM(NMR.Department)
		WHEN 'Employer' THEN 'SEG Employer: ' + RTRIM(NMR.Department)
	  END AS LivesWorksWorships
FROM NewMemberRequest AS NMR
	LEFT OUTER JOIN NewMemberHome AS Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork AS Work On NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'JS', '', '') AS JOJS1 ON NMR.TrackingNum = JOJS1.TrackingNum AND JOJS1.JointSequence = 1
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'JS', '', '') AS JOJS2 ON NMR.TrackingNum = JOJS2.TrackingNum AND JOJS2.JointSequence = 2
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'JS', '', '') AS JOJS3 ON NMR.TrackingNum = JOJS3.TrackingNum AND JOJS3.JointSequence = 3
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'JS', '', '') AS JOJS4 ON NMR.TrackingNum = JOJS4.TrackingNum AND JOJS4.JointSequence = 4
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'JS', '', '') AS JOJS5 ON NMR.TrackingNum = JOJS5.TrackingNum AND JOJS5.JointSequence = 5
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'JS', '', '') AS JOJS6 ON NMR.TrackingNum = JOJS6.TrackingNum AND JOJS6.JointSequence = 6
	LEFT OUTER JOIN fnCCCU_GetSA(@TrackingNum, 'SDA', 'S') AS SASDA ON NMR.TrackingNum = SASDA.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetQuestion(@TrackingNum, '1') AS Q1 ON NMR.TrackingNum = Q1.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetQuestion(@TrackingNum, '2') AS Q2 ON NMR.TrackingNum = Q2.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetQuestion(@TrackingNum, '3') AS Q3 ON NMR.TrackingNum = Q3.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetQuestion(@TrackingNum, '4') AS Q4 ON NMR.TrackingNum = Q4.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetSAODP(@TrackingNum, '1') AS SAODP1 ON NMR.TrackingNum = SAODP1.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetSAODP(@TrackingNum, '2') AS SAODP2 ON NMR.TrackingNum = SAODP2.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetSAODP(@TrackingNum, '3') AS SAODP3 ON NMR.TrackingNum = SAODP3.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetSAODP(@TrackingNum, '4') AS SAODP4 ON NMR.TrackingNum = SAODP4.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetSAODP(@TrackingNum, '5') AS SAODP5 ON NMR.TrackingNum = SAODP5.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetSAODP(@TrackingNum, '6') AS SAODP6 ON NMR.TrackingNum = SAODP6.TrackingNum
WHERE NMR.TrackingNum = @TrackingNum
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_D40Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCCCU_D40Enable] @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
--Declare @TrackingNum int
--DROP TABLE #docs
--DEALLOCATE curs
--Set @TrackingNum = 1477

Declare @docsubname char(100)
Declare @newdocsub char(200)
Declare @docsuffix char(2)
Declare @count int
Declare @docindex int


--CREATE TABLE #docs(docindex int identity Primary Key, docsubname char(100))

Declare curs CURSOR FOR
	SELECT SA.Sequence, CONVERT(char(2), SA.Suffix)
	FROM NewMemberRequest As NMR INNER JOIN NewMemberSubAccount AS SA ON NMR.TrackingNum = SA.TrackingNum
	WHERE NMR.TrackingNum = @TrackingNum AND SA.ProductType = 'HOME' AND SA.Created = 'Y' AND '' = 'REMOVED per John Knutson 3/2/2018'

--IF @@ROWCOUNT = 0

OPEN curs
FETCH NEXT FROM curs INTO @docsubname, @docsuffix
SET @newdocsub = 'Real Estate Call Back ' + CASE LEN(@docsubname) WHEN 2 THEN @docsubname WHEN 1 THEN '0' + @docsubname ELSE 'NA' END
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count

	Set @docindex = @docindex + 1
	INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)

      	FETCH NEXT FROM curs INTO @docsubname, @docsuffix

	SET @newdocsub = 'Real Estate Call Back ' + CASE LEN(@docsubname) WHEN 2 THEN @docsubname WHEN 1 THEN '0' + @docsubname ELSE 'NA' END
   END

CLOSE curs
DEALLOCATE curs

Select *  FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Delete FROM NewMemberDoc WHERE TrackingNum = @TrackingNum

--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_D40Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [IMS].[spCCCU_D40Fields] @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

SELECT @DocIndex As DocIndex
	--, BE1.fullname AS BE1fullname, BE1.fulladdress AS BE1fulladdress, BE1.DOB AS BE1DOB, BE1.Relationship AS BE1Relationship, CASE LEN(BE1.Suffix) WHEN 2 THEN BE1.Suffix WHEN 1 THEN '0' + BE1.Suffix ELSE 'NA' END AS BE1Suffix
	--, BE2.fullname AS BE2fullname, BE2.fulladdress AS BE2fulladdress, BE2.DOB AS BE2DOB, BE2.Relationship AS BE2Relationship, CASE LEN(BE2.Suffix) WHEN 2 THEN BE2.Suffix WHEN 1 THEN '0' + BE2.Suffix ELSE 'NA' END AS BE2Suffix
	--, BE3.fullname AS BE3fullname, BE3.fulladdress AS BE3fulladdress, BE3.DOB AS BE3DOB, BE3.Relationship AS BE3Relationship, CASE LEN(BE3.Suffix) WHEN 2 THEN BE3.Suffix WHEN 1 THEN '0' + BE3.Suffix ELSE 'NA' END AS BE3Suffix
FROM NewMemberRequest As NMR
	--INNER JOIN udt_AccountTypes AS AType On NMR.AccountType = AType.TypeCode
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
	--LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'PD', '') AS BE1 ON NMR.TrackingNum = BE1.TrackingNum AND BE1.JointSequence = 1
	--LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'PD', '') AS BE2 ON NMR.TrackingNum = BE2.TrackingNum AND BE2.JointSequence = 2
	--LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'PD', '') AS BE3 ON NMR.TrackingNum = BE3.TrackingNum AND BE3.JointSequence = 3
WHERE NMR.TrackingNum = @TrackingNum


Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_D41Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCCCU_D41Enable] @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
--Declare @TrackingNum int
--DROP TABLE #docs
--DEALLOCATE curs
--Set @TrackingNum = 1477

Declare @docsubname char(100)
Declare @newdocsub char(200)
Declare @docsuffix char(2)
Declare @count int
Declare @docindex int


--CREATE TABLE #docs(docindex int identity Primary Key, docsubname char(100))

Declare curs CURSOR FOR
	SELECT SA.Sequence, CONVERT(char(2), SA.Suffix)
	FROM NewMemberRequest As NMR INNER JOIN NewMemberSubAccount AS SA ON NMR.TrackingNum = SA.TrackingNum
	WHERE NMR.TrackingNum = @TrackingNum AND SA.SubAccountType = 'UL24' AND SA.Created = 'Y' AND '' = 'REMOVED per John Knutson 3/2/2018'

--IF @@ROWCOUNT = 0

OPEN curs
FETCH NEXT FROM curs INTO @docsubname, @docsuffix
SET @newdocsub = 'Loanliner Addendum '-- + CASE LEN(@docsubname) WHEN 2 THEN @docsubname WHEN 1 THEN '0' + @docsubname ELSE 'NA' END
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count

	Set @docindex = @docindex + 1
	INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)

      	FETCH NEXT FROM curs INTO @docsubname, @docsuffix

	SET @newdocsub = 'Loanliner Addendum '-- + CASE LEN(@docsubname) WHEN 2 THEN @docsubname WHEN 1 THEN '0' + @docsubname ELSE 'NA' END
   END

CLOSE curs
DEALLOCATE curs

Select *  FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Delete FROM NewMemberDoc WHERE TrackingNum = @TrackingNum

--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_D41Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCCCU_D41Fields] @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

SELECT @DocIndex As DocIndex
	, RTRIM(CAST(CONVERT(MONEY, SALOC.CreditLimit *.01, 2) AS VARCHAR(10))) AS CreditLimit
	, CONVERT(char(10), SALOC.CreatedOn, 101) AS EffDate
FROM NewMemberRequest As NMR
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetSA(@TrackingNum, 'LOC', 'L') AS SALOC ON NMR.TrackingNum = SALOC.TrackingNum
WHERE NMR.TrackingNum = @TrackingNum


Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_D42Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCCCU_D42Enable] @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
--Declare @TrackingNum int
--DROP TABLE #docs
--DEALLOCATE curs
--Set @TrackingNum = 1477

Declare @docsubname char(100)
Declare @newdocsub char(200)
Declare @docsuffix char(2)
Declare @count int
Declare @docindex int


--CREATE TABLE #docs(docindex int identity Primary Key, docsubname char(100))

Declare curs CURSOR FOR
	SELECT SA.Sequence, CONVERT(char(2), SA.Suffix)
	FROM NewMemberRequest As NMR INNER JOIN NewMemberSubAccount AS SA ON NMR.TrackingNum = SA.TrackingNum
	WHERE NMR.TrackingNum = @TrackingNum AND SA.SubAccountType = 'UL24' AND SA.Created = 'Y' AND SA.Created = 'Z' AND '' = 'REMOVED per John Knutson 3/2/2018'

--IF @@ROWCOUNT = 0

OPEN curs
FETCH NEXT FROM curs INTO @docsubname, @docsuffix
SET @newdocsub = 'Loanliner Addendum Supplement '-- + CASE LEN(@docsubname) WHEN 2 THEN @docsubname WHEN 1 THEN '0' + @docsubname ELSE 'NA' END
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count

	Set @docindex = @docindex + 1
	INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)

      	FETCH NEXT FROM curs INTO @docsubname, @docsuffix

	SET @newdocsub = 'Loanliner Addendum Supplement '-- + CASE LEN(@docsubname) WHEN 2 THEN @docsubname WHEN 1 THEN '0' + @docsubname ELSE 'NA' END
   END

CLOSE curs
DEALLOCATE curs

Select *  FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Delete FROM NewMemberDoc WHERE TrackingNum = @TrackingNum

--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_D42Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCCCU_D42Fields] @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

SELECT @DocIndex As DocIndex
	, '$' + RTRIM(CAST(CONVERT(MONEY, SALOC.CreditLimit *.01, 2) AS VARCHAR(10))) AS CreditLimit
	, CONVERT(char(10), SALOC.CreatedOn, 101) AS EffDate
FROM NewMemberRequest As NMR
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetSA(@TrackingNum, 'LOC', 'L') AS SALOC ON NMR.TrackingNum = SALOC.TrackingNum
WHERE NMR.TrackingNum = @TrackingNum


Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_D43Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCCCU_D43Enable] @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
--Declare @TrackingNum int
--DROP TABLE #docs
--DEALLOCATE curs
--Set @TrackingNum = 1477

Declare @docsubname char(100)
Declare @newdocsub char(200)
Declare @docsuffix char(2)
Declare @count int
Declare @docindex int


--CREATE TABLE #docs(docindex int identity Primary Key, docsubname char(100))

Declare curs CURSOR FOR
	SELECT SA.Sequence, CONVERT(char(2), SA.Suffix)
	FROM NewMemberRequest AS NMR INNER JOIN NewMemberSubAccount AS SA ON NMR.TrackingNum = SA.TrackingNum
	WHERE NMR.TrackingNum = @TrackingNum AND SA.SLType = 'L' AND SA.CollateralCode > 1000 AND SA.ProductType = 'CC' AND SA.Created != 'H' AND '' = 'REMOVED per John Knutson 3/2/2018'

--IF @@ROWCOUNT = 0

OPEN curs
FETCH NEXT FROM curs INTO @docsubname, @docsuffix
SET @newdocsub = 'Visa Electronic Payment Agreement'-- for Suffix(s) ' + CASE LEN(@docsubname) WHEN 2 THEN @docsubname WHEN 1 THEN '0' + @docsubname ELSE 'NA' END
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count

      	IF @count = 1-- or @count = 4 or @count = 7
	BEGIN
		Set @docindex = @docindex + 1
     		 INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END

      	FETCH NEXT FROM curs INTO @docsubname, @docsuffix

	IF @docsubname != NULL
	BEGIN
		SET @newdocsub = @newdocsub + ', ' + @docsubname
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex AND TrackingNum = @TrackingNum
	END
   END

CLOSE curs
DEALLOCATE curs

Select *  FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Delete FROM NewMemberDoc WHERE TrackingNum = @TrackingNum

--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_D43Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [IMS].[spCCCU_D43Fields] @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
Declare @seq int
Declare @seq1 int
Declare @count int
--Set @jo1seq = 1
--Set @jo2seq = 1
--Set @jo3seq = 1
--Set @jo4seq = 1


--CREATE TABLE #docs(id int identity Primary Key, docindex int, j1FullName char(100), j1FullAddress char(100), j1FullPhone char(12), j1DOB char(10), j1SSN char(11), j1ID char(20), j1IDIssueDate  char(10), j1IDExpDate  char(10), j1IDState  char(2), j2FullName char(100), j2FullAddress char(100), j2FullPhone char(11), j2DOB char(10), j2SSN char(11), j2ID char(20), j2IDIssueDate  char(10), j2IDExpDate  char(10), j2IDState  char(2), j3FullName char(100), j3FullAddress char(100), j3FullPhone char(11), j3DOB char(10), j3SSN char(11), j3ID char(20), j3IDIssueDate  char(10), j3IDExpDate  char(10), j3IDState  char(2), j4FullName char(100), j4FullAddress char(100), j4FullPhone char(11), j4DOB char(10), j4SSN char(11), j4ID char(20), j4IDIssueDate  char(10), j4IDExpDate  char(10), j4IDState  char(2))

Declare curs2 CURSOR FOR
	SELECT  CONVERT(int, SA.Sequence)
	FROM NewMemberRequest AS NMR
	INNER JOIN NewMemberPlasticCard AS PC ON NMR.TrackingNum = PC.TrackingNum
	INNER JOIN NewMemberSubAccount AS SA ON PC.TrackingNum = SA.TrackingNum AND PC.Sequence =  SA.PlasticCardLink
	WHERE NMR.TrackingNum = @TrackingNum AND PC.TypeCode != 'P' AND PC.TypeCode != 'C' AND PC.Created = 'Y'


--IF @@ROWCOUNT = 0

OPEN curs2
FETCH NEXT FROM curs2 INTO @seq
SET @count = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN

      	IF (@count = 0 AND @DocIndex = 1)
		BEGIN
			Set @seq1 = @seq
		END
	IF (@count = 1 AND @DocIndex = 2) 
		BEGIN
			Set @seq1 = @seq		
		END
	IF (@count = 2 AND @DocIndex = 3)
		BEGIN
			Set @seq1 = @seq		
		END
	IF (@count = 3 AND @DocIndex = 4)
		BEGIN
			Set @seq1 = @seq		
		END
	IF (@count = 4 AND @DocIndex = 5)
		BEGIN
			Set @seq1 = @seq		
		END
	IF (@count = 5 AND @DocIndex = 6)
		BEGIN
			Set @seq1 = @seq		
		END
	IF (@count = 6 AND @DocIndex = 7)
		BEGIN
			Set @seq1 = @seq		
		END
	IF (@count = 7 AND @DocIndex = 8)
		BEGIN
			Set @seq1 = @seq		
		END

      	FETCH NEXT FROM curs2 INTO @seq
	SET @count = @count + 1
	PRINT @count
   END

CLOSE curs2
DEALLOCATE curs2

SELECT @DocIndex As DocIndex
	, RTRIM(NMR.Account) + '-' + RIGHT('0' + RTRIM(LTRIM(CONVERT(char(2), SA.Suffix))), 2) AS AccountSuffix
	, RTRIM(PC.PAN) AS PAN
	, CAST(CAST(LEFT(SA.APR, 4) AS int) * 0.01 AS Decimal(10,2)) AS APR
	, CAST((CAST(LEFT(SA.APR, 4) AS int)* 0.01)/12 AS Decimal(10,4)) AS MPR
--	, RTRIM(RTRIM(CAST(NMR.Account AS VARCHAR(20)))) + '-' + RIGHT(('00' + RTRIM(SA.Suffix)),2) AS AccountPlusSuffix
--	, CAST((CAST(SA.APR AS int)*.0001)/365 AS Decimal(10,8)) AS DPR
--	, CAST(CAST(SA.APR AS int) * 0.0001 AS Decimal(10,4)) AS APR
--	, CASE WHEN SA.LineOfCredit = 'Y' THEN '0.00' ELSE RTRIM(CAST(CONVERT(money,SA.Amount *.01, 2) AS VARCHAR(10))) END AS NewBalance
--	, '0.00' AS AmountAdvanced
--	, RTRIM(CAST(CONVERT(money,SA.Payment *.01, 1) AS VARCHAR(10))) AS PaymentAmount
--	, SA.DueDate
--	,  SA.Method + '-' +
--	  CASE SA.Frequency
--	     	WHEN 'W'  THEN 'WEEKLY'
--		WHEN 'B' THEN 'BI-WEEKLY'
--		WHEN 'M' THEN 'MONTHLY'
--		WHEN 'S' THEN 'SEMI-MONTHLY'
--		WHEN 'Y' THEN 'YEARLY'
--		WHEN 'Q' THEN 'QUARTERLY'
--		WHEN '6' THEN 'SEMI-ANNUALLY'
--		WHEN 'A' THEN 'ANNUALLY'
--		WHEN '1' THEN 'SINGLE PAYMENT'
--	    END AS PaymentFrequency
--	, CASE WHEN SA.LineOfCredit = 'Y' THEN RTRIM(CAST(CONVERT(money,SA.CreditLimit *.01, 2) AS VARCHAR(10))) END AS CreditLimit
--	, CASE WHEN SA.LineOfCredit = 'Y' THEN RTRIM(CAST(CONVERT(money,SA.CreditLimit *.01, 2) AS VARCHAR(10))) END AS RemainingLimit
--	, SA.CurrBranch AS SABranch
--	, CONVERT(VARCHAR(10), SA.CreatedOn, 101) AS SACreatedOn
--	, SA.Officer AS SAOfficer
--	, fnCCCU_GetJOs(@TrackingNum, @seq1) As BorrowerNames
FROM NewMemberRequest As NMR
	--INNER JOIN udt_AccountTypes AS AType On NMR.AccountType = AType.TypeCode
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN NewMemberPlasticCard AS PC ON NMR.TrackingNum = PC.TrackingNum
	LEFT OUTER JOIN NewMemberSubAccount AS SA ON PC.TrackingNum = SA.TrackingNum AND PC.Sequence =  SA.PlasticCardLink
--	LEFT OUTER JOIN fnCCCU_GetSA(@TrackingNum, @seq1) As SA ON NMR.TrackingNum = SA.TrackingNum
WHERE NMR.TrackingNum = @TrackingNum AND PC.TypeCode != 'P' AND PC.TypeCode != 'C' AND PC.Created = 'Y'


Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_D44Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCCCU_D44Enable] @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
--Declare @TrackingNum int
--DROP TABLE #docs
--DEALLOCATE curs
--Set @TrackingNum = 1477

Declare @docsubname char(100)
Declare @newdocsub char(200)
Declare @docsuffix char(2)
Declare @docdesc char(50)
Declare @count int
Declare @docindex int


--CREATE TABLE #docs(docindex int identity Primary Key, docsubname char(100))

Declare curs CURSOR FOR
	SELECT SA.Sequence, CONVERT(char(2), SA.Suffix), RTRIM(SA.Description)
	FROM NewMemberRequest As NMR INNER JOIN NewMemberSubAccount AS SA ON NMR.TrackingNum = SA.TrackingNum
	WHERE NMR.TrackingNum = @TrackingNum AND SA.SLType = 'I' AND SA.ProductType <> 'HSA' AND SA.Created = 'Y'

--IF @@ROWCOUNT = 0

OPEN curs
FETCH NEXT FROM curs INTO @docsubname, @docsuffix, @docdesc
SET @newdocsub = 'Time Certificate of Deposit (' + RTRIM(@docdesc) + ' Suffix: ' + CASE LEN(@docsuffix) WHEN 2 THEN @docsuffix WHEN 1 THEN '0' + @docsuffix ELSE 'NA' END + ')'
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count

	Set @docindex = @docindex + 1
	INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)

      	FETCH NEXT FROM curs INTO @docsubname, @docsuffix, @docdesc

	SET @newdocsub = 'Time Certificate of Deposit (' + @docdesc + ' Suffix: ' + CASE LEN(@docsuffix) WHEN 2 THEN @docsuffix WHEN 1 THEN '0' + @docsuffix ELSE 'NA' END + ')'
   END

CLOSE curs
DEALLOCATE curs

Select *  FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Delete FROM NewMemberDoc WHERE TrackingNum = @TrackingNum

--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_D44Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCCCU_D44Fields] @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
Declare @seq int
Declare @seq1 int
Declare @count int
Declare curs2 CURSOR FOR
	SELECT DISTINCT CONVERT(int, SA.Sequence)
	FROM NewMemberRequest As NMR
	INNER JOIN NewMemberSubAccount AS SA ON NMR.TrackingNum = SA.TrackingNum
	LEFT JOIN NewMemberJointLink AS JL ON JL.TrackingNum = SA.TrackingNum AND JL.SubAccountSequence = SA.Sequence
	WHERE NMR.TrackingNum = @TrackingNum AND SA.SLType = 'I' AND SA.ProductType <> 'HSA' AND (JL.Created = 'Y' OR SA.Created = 'Y')
OPEN curs2
FETCH NEXT FROM curs2 INTO @seq
SET @count = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
      	IF (@count = 0 AND (@DocIndex = 1))
		BEGIN
			Set @seq1 = @seq
		END
	IF (@count = 1 AND (@DocIndex = 2)) 
		BEGIN
			Set @seq1 = @seq		
		END
	IF (@count = 2 AND (@DocIndex = 3))
		BEGIN
			Set @seq1 = @seq		
		END
	IF (@count = 3 AND (@DocIndex = 4))
		BEGIN
			Set @seq1 = @seq		
		END
	IF (@count = 4 AND (@DocIndex = 5))
		BEGIN
			Set @seq1 = @seq		
		END
	IF (@count = 5 AND (@DocIndex = 6))
		BEGIN
			Set @seq1 = @seq		
		END
	IF (@count = 6 AND (@DocIndex = 7))
		BEGIN
			Set @seq1 = @seq		
		END
	IF (@count = 7 AND (@DocIndex = 8))
		BEGIN
			Set @seq1 = @seq		
		END
      	FETCH NEXT FROM curs2 INTO @seq
	SET @count = @count + 1
	PRINT @count
   END
CLOSE curs2
DEALLOCATE curs2
SELECT  @DocIndex AS DocIndex
	, RIGHT('0' + RTRIM(CONVERT(CHAR(2), SA.Suffix)), 2) AS Suffix
	, NMR.CreatedOn AS IssueDate
	, SA.Term AS Term
	, '$' + RTRIM(CAST(CONVERT(MONEY, SA.Amount *.01, 2) AS VARCHAR(10))) AS Amount
	, '$' + RTRIM(CAST(CONVERT(MONEY, CONVERT(FLOAT(1),IConfig.MinBalance) * 0.01, 2) AS VARCHAR(10))) AS MinimumBalance
	, INVADD.MaturityDate AS MaturityDate
	, RTRIM(CAST(CONVERT(FLOAT(1),SA.APR) * 0.0001 AS VARCHAR(10))) + '%' AS APR
	, RTRIM(CAST(CONVERT(DECIMAL(6,4),(POWER((1 + (CONVERT(FLOAT(1), SA.APR) * 0.000001) / 12),12)-1)*100) AS VARCHAR(10))) + '%' AS APY
	, CASE INVADD.DividendDisp
		WHEN '1' THEN 'Post to this account'
		WHEN '2' THEN 'Transfer to account '-- + ISNULL(DIVDISPDATA.CrossAccount, '') + '-' + RIGHT('00' + RTRIM(CONVERT(CHAR(2), ISNULL(DIVDISPDATA.CrossSuffix, ''))), 2)
		WHEN '3' THEN 'Post and create a check'
	  END AS DivDisp
	, CASE SA.Term
		WHEN '6' THEN '60'
		WHEN '12' THEN '90'
		ELSE '180'
	  END AS PenaltyDays
	, RTRIM(NMR.Account) AS Account
	, CASE
		WHEN SA.SubAccountType = 'CAN' OR SA.SubAccountType = 'SAN' OR SA.SubAccountType = 'B06' OR SA.SubAccountType = 'SM1' THEN 'Maturity'
		WHEN SA.SubAccountType = 'M12' OR SA.SubAccountType = 'MS2' THEN 'Monthly'
		WHEN SA.SubAccountType = 'B12' OR SA.SubAccountType = 'CRW' OR SA.SubAccountType = 'C12' OR SA.SubAccountType = 'S12' OR SA.SubAccountType = 'BM1' OR SA.SubAccountType = 'SQ1' THEN 'Quarterly'
	  END AS CompFrequency
	, CASE WHEN SA.SubAccountType != 'CRW' THEN 'X' END AS DepositsNo
	, CASE WHEN SA.SubAccountType = 'CRW' THEN 'X' END AS DepositsYes
	, IMS.fnCCCU_NumberToWords(RTRIM(CAST(CONVERT(INTEGER, SA.Amount *.01, 2) AS VARCHAR(10)))) + 'and No/100' AS AmountWords
	, CASE WHEN NMR.AccountClass = 'O' THEN
		RTRIM(NMR.OrganizationName) ELSE
		RTRIM(RTRIM(NMR.FName) + ' ' + RTRIM(NMR.LName) + ' ' + RTRIM(NMR.MECHTag)) END
	  AS FullName
	, CASE WHEN JO1.FullName != '' THEN RTRIM(RTRIM(JO1.FullName) + ' ' + RTRIM(JO1.JOCHTag)) ELSE '' END +
	  CASE WHEN JO2.FullName != '' THEN CASE WHEN JO1.FullName != '' THEN CHAR(13) + CHAR(10) ELSE '' END + RTRIM(RTRIM(JO2.FullName) + ' ' + RTRIM(JO2.JOCHTag)) ELSE '' END +
	  CASE WHEN JO3.FullName != '' THEN CASE WHEN JO1.FullName != '' OR JO2.FullName != '' THEN CHAR(13) + CHAR(10) ELSE '' END + RTRIM(RTRIM(JO3.FullName) + ' ' + RTRIM(JO3.JOCHTag)) ELSE '' END AS CertJointOwners
	, RTRIM(JOBE1.FullName) AS BE1FullName
	, RTRIM(JOBE1.BenePercent) AS BE1BenePercent
	, RTRIM(JOBE2.FullName) AS BE2FullName
	, RTRIM(JOBE2.BenePercent) AS BE2BenePercent
	, RTRIM(JOBE3.FullName) AS BE3FullName
	, RTRIM(JOBE3.BenePercent) AS BE3BenePercent
	, RTRIM(JOBE4.FullName) AS BE4FullName
	, RTRIM(JOBE4.BenePercent) AS BE4BenePercent
	, RTRIM(JOBE5.FullName) AS BE5FullName
	, RTRIM(JOBE5.BenePercent) AS BE5BenePercent
	, RTRIM(JOBE6.FullName) AS BE6FullName
	, RTRIM(JOBE6.BenePercent) AS BE6BenePercent
FROM NewMemberRequest As NMR	
	LEFT OUTER JOIN fnCCCU_GetSASeq(@TrackingNum, @seq1) AS SA ON NMR.TrackingNum = SA.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetJOJL2(@TrackingNum, '0', @seq1) AS JO1 ON NMR.TrackingNum = JO1.TrackingNum AND JO1.JointOwnerType <> 'SC' AND JO1.JointOwnerType <> 'BE' AND JO1.JointOwnerType <> 'TF' AND JO1.JointSequence = 1
	LEFT OUTER JOIN fnCCCU_GetJOJL2(@TrackingNum, '1', @seq1) AS JO2 ON NMR.TrackingNum = JO2.TrackingNum AND JO2.JointOwnerType <> 'SC' AND JO2.JointOwnerType <> 'BE' AND JO2.JointOwnerType <> 'TF' AND JO2.JointSequence = 1
	LEFT OUTER JOIN fnCCCU_GetJOJL2(@TrackingNum, '2', @seq1) AS JO3 ON NMR.TrackingNum = JO3.TrackingNum AND JO3.JointOwnerType <> 'SC' AND JO3.JointOwnerType <> 'BE' AND JO3.JointOwnerType <> 'TF' AND JO3.JointSequence = 1
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'BE', '', '') AS JOBE1 ON NMR.TrackingNum = JOBE1.TrackingNum AND JOBE1.JointSequence = 1
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'BE', '', '') AS JOBE2 ON NMR.TrackingNum = JOBE2.TrackingNum AND JOBE2.JointSequence = 2
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'BE', '', '') AS JOBE3 ON NMR.TrackingNum = JOBE3.TrackingNum AND JOBE3.JointSequence = 3
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'BE', '', '') AS JOBE4 ON NMR.TrackingNum = JOBE4.TrackingNum AND JOBE4.JointSequence = 4
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'BE', '', '') AS JOBE5 ON NMR.TrackingNum = JOBE5.TrackingNum AND JOBE5.JointSequence = 5
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'BE', '', '') AS JOBE6 ON NMR.TrackingNum = JOBE6.TrackingNum AND JOBE6.JointSequence = 6
	LEFT OUTER JOIN NewMemberInvestmentAdd AS INVADD ON INVADD.TrackingNum = NMR.TrackingNum AND INVADD.SubAccountSequence = SA.Sequence
	LEFT OUTER JOIN fnCCCU_GetCL(@TrackingNum, @seq1, 'C', '') AS MATDISPDATA ON NMR.TrackingNum = MATDISPDATA.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetCL(@TrackingNum, @seq1, 'D', 'P') AS DIVDISPDATA ON NMR.TrackingNum = DIVDISPDATA.TrackingNum
	LEFT OUTER JOIN NewMemberSubAccount AS MATSA ON MATSA.TrackingNum = NMR.TrackingNum AND  MATSA.Sequence = MATDISPDATA.RelatedSequence
	LEFT OUTER JOIN NewMemberSubAccount AS DIVSA ON DIVSA.TrackingNum = NMR.TrackingNum AND DIVSA.Sequence = DIVDISPDATA.RelatedSequence
	LEFT OUTER JOIN udt_ISubAccounts AS IConfig ON IConfig.UniqueID = SA.SubAccountType
WHERE NMR.TrackingNum = @TrackingNum
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_D45Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCCCU_D45Enable] @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @docsubname CHAR(100)
DECLARE @newdocsub CHAR(100)
DECLARE @count INT
DECLARE @docindex INT

DECLARE curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT '' AS docsubname
	FROM NewMemberRequest AS NMR
	WHERE NMR.TrackingNum = @TrackingNum AND NMR.Processed = 999 AND NMR.Created = 'I' AND '' = 'REMOVED per John Knutson 3/2/2018'

OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @newdocsub = 'Expanding your Relationship ' + @docsubname
IF @docsubname Is Null
BEGIN
	SET @newdocsub = 'Expanding your Relationship'
END
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count
      	IF @count = 1
	BEGIN
		Set @docindex = @docindex + 1
     		 INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END
      	FETCH NEXT FROM curs INTO @docsubname
	PRINT @docsubname
	IF @@FETCH_STATUS = 0
	BEGIN
		SET @newdocsub = (RTRIM(@newdocsub) + ', ' + RTRIM(@docsubname))
		PRINT @newdocsub
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex
	END
   END
CLOSE curs
DEALLOCATE curs
SELECT * FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
DELETE FROM NewMemberDoc WHERE TrackingNum = @TrackingNum

Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_D45Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCCCU_D45Fields] @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
SELECT @DocIndex As DocIndex
	, CONVERT(CHAR(10), GetDate(), 101) AS TodayDate
	, 'Dear ' + RTRIM(CASE WHEN NMR.AccountClass = 'P' OR NMR.AccountType = 'BS' OR NMR.AccountType = 'BA'
		THEN IMS.fnCCCU_TitleCase(RTRIM(NMR.FName) + RTRIM(' ' + NMR.MInitial) + ' ' + RTRIM(NMR.LName))
		ELSE IMS.fnCCCU_TitleCase(RTRIM(NMR.OrganizationName))
		END) + ',' AS DearName
FROM NewMemberRequest AS NMR
WHERE NMR.TrackingNum = @TrackingNum
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_D46Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCCCU_D46Enable] @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
--Declare @TrackingNum int
--DROP TABLE #docs
--DEALLOCATE curs
--Set @TrackingNum = 1477

Declare @docsubname char(100)
Declare @newdocsub char(200)
Declare @docsuffix char(2)
Declare @docdesc char(50)
Declare @count int
Declare @docindex int


--CREATE TABLE #docs(docindex int identity Primary Key, docsubname char(100))

Declare curs CURSOR FOR
	SELECT SA.Sequence, CONVERT(char(2), SA.Suffix), RTRIM(SA.Description)
	FROM NewMemberRequest As NMR INNER JOIN NewMemberSubAccount AS SA ON NMR.TrackingNum = SA.TrackingNum
	WHERE NMR.TrackingNum = @TrackingNum AND SA.SLType = 'I' AND SA.ProductType = 'HSA' AND SA.Created = 'Y'

--IF @@ROWCOUNT = 0

OPEN curs
FETCH NEXT FROM curs INTO @docsubname, @docsuffix, @docdesc
SET @newdocsub = 'HSA Application (' + RTRIM(@docdesc) + ' Suffix: ' + CASE LEN(@docsuffix) WHEN 2 THEN @docsuffix WHEN 1 THEN '0' + @docsuffix ELSE 'NA' END + ')'
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count

	Set @docindex = @docindex + 1
	INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)

      	FETCH NEXT FROM curs INTO @docsubname, @docsuffix, @docdesc

	SET @newdocsub = 'HSA Application (' + @docdesc + ' Suffix: ' + CASE LEN(@docsuffix) WHEN 2 THEN @docsuffix WHEN 1 THEN '0' + @docsuffix ELSE 'NA' END + ')'
   END

CLOSE curs
DEALLOCATE curs

Select *  FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Delete FROM NewMemberDoc WHERE TrackingNum = @TrackingNum

--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_D46Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCCCU_D46Fields] @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
Declare @seq int
Declare @seq1 int
Declare @count int
Declare curs2 CURSOR FOR
	SELECT DISTINCT CONVERT(int, SA.Sequence)
	FROM NewMemberRequest As NMR
	INNER JOIN NewMemberSubAccount AS SA ON NMR.TrackingNum = SA.TrackingNum
	LEFT JOIN NewMemberBeneficiaryLink AS BL ON BL.TrackingNum = SA.TrackingNum AND BL.SubAccountSequence = SA.Sequence
	WHERE NMR.TrackingNum = @TrackingNum AND SA.SLType = 'I' AND SA.ProductType = 'HSA' AND (BL.Created = 'Y' OR SA.Created = 'Y')
OPEN curs2
FETCH NEXT FROM curs2 INTO @seq
SET @count = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
      	IF (@count = 0 AND (@DocIndex = 1))
		BEGIN
			Set @seq1 = @seq
		END
	IF (@count = 1 AND (@DocIndex = 2)) 
		BEGIN
			Set @seq1 = @seq		
		END
	IF (@count = 2 AND (@DocIndex = 3))
		BEGIN
			Set @seq1 = @seq		
		END
	IF (@count = 3 AND (@DocIndex = 4))
		BEGIN
			Set @seq1 = @seq		
		END
	IF (@count = 4 AND (@DocIndex = 5))
		BEGIN
			Set @seq1 = @seq		
		END
	IF (@count = 5 AND (@DocIndex = 6))
		BEGIN
			Set @seq1 = @seq		
		END
	IF (@count = 6 AND (@DocIndex = 7))
		BEGIN
			Set @seq1 = @seq		
		END
	IF (@count = 7 AND (@DocIndex = 8))
		BEGIN
			Set @seq1 = @seq		
		END
      	FETCH NEXT FROM curs2 INTO @seq
	SET @count = @count + 1
	PRINT @count
   END
CLOSE curs2
DEALLOCATE curs2
SELECT  @DocIndex AS DocIndex
	, RTRIM(RTRIM(NMR.FName) + ' ' +RTRIM(NMR.MInitial + ' ') + RTRIM(NMR.LName)) AS FullName
	, RTRIM(Home.Address1) AS Address1
	, RTRIM(Home.Address2) AS Address2
	, RTRIM(Home.City) + ', ' + Home.State + ' ' + CASE LEN(Home.Zip) WHEN 9 THEN LEFT(Home.Zip, 5) + '-' + Right(Home.Zip, 4) ELSE Home.Zip END AS CityStateZip
	, LEFT(NMR.SSN, 3) + '-' + LEFT(RIGHT(NMR.SSN, 6), 2) + '-' + RIGHT(NMR.SSN, 4) AS SSN
	, CONVERT(CHAR(10), NMR.DOB, 101) AS DOB
	, Home.Areacode + '-' + LEFT(Home.Phone, 3) + '-' + RIGHT(RTRIM(Home.Phone), 4) AS Phone
	, RTRIM(NMR.Email1) AS Email
	, NMR.Account AS AccountNumber
	, '' AS Check_Amendment
	, '' AS ContributionAmount
	, '' AS ContributionDate
	, '' AS ContributionTaxYear
	, '' AS Check_Regular
	, '' AS Check_Rollover
	, '' AS Check_Transfer

	, '' AS Check_NoBeneficiary

	, RTRIM(BE1.FullName) AS BE1FullName
	, RTRIM(BE1.FullAddress) AS BE1Address
	, RTRIM(BE1.CityStateZip) AS BE1CityStateZip
	, RTRIM(CONVERT(CHAR(10), BE1.DOB, 101)) AS BE1DOB
	, RTRIM(BE1.Relationship) AS BE1Relationship
	, RTRIM(BE1.SSN) AS BE1SSN
	, RTRIM(BE1.BenePercent) AS BE1Percent

	, RTRIM(BE2.FullName) AS BE2FullName
	, RTRIM(BE2.FullAddress) AS BE2Address
	, RTRIM(BE2.CityStateZip) AS BE2CityStateZip
	, RTRIM(CONVERT(CHAR(10), BE2.DOB, 101)) AS BE1DOB
	, RTRIM(BE2.Relationship) AS BE2Relationship
	, RTRIM(BE2.SSN) AS BE2SSN
	, RTRIM(BE2.BenePercent) AS BE2Percent

	, RTRIM(BE3.FullName) AS BE3FullName
	, RTRIM(BE3.FullAddress) AS BE3Address
	, RTRIM(BE3.CityStateZip) AS BE3CityStateZip
	, RTRIM(CONVERT(CHAR(10), BE3.DOB, 101)) AS BE1DOB
	, RTRIM(BE3.Relationship) AS BE3Relationship
	, RTRIM(BE3.SSN) AS BE3SSN
	, RTRIM(BE3.BenePercent) AS BE3Percent

	, RTRIM(BE4.FullName) AS BE4FullName
	, RTRIM(BE4.FullAddress) AS BE4Address
	, RTRIM(BE4.CityStateZip) AS BE4CityStateZip
	, RTRIM(CONVERT(CHAR(10), BE4.DOB, 101)) AS BE1DOB
	, RTRIM(BE4.Relationship) AS BE4Relationship
	, RTRIM(BE4.SSN) AS BE4SSN
	, RTRIM(BE4.BenePercent) AS BE4Percent
FROM NewMemberRequest As NMR	
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetSASeq(@TrackingNum, @seq1) AS SA ON NMR.TrackingNum = SA.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetBEType(@TrackingNum, 'BE', '', '') AS BE1 ON NMR.TrackingNum = BE1.TrackingNum AND BE1.BeneficiarySequence = 1
	LEFT OUTER JOIN fnCCCU_GetBEType(@TrackingNum, 'BE', '', '') AS BE2 ON NMR.TrackingNum = BE2.TrackingNum AND BE2.BeneficiarySequence = 2
	LEFT OUTER JOIN fnCCCU_GetBEType(@TrackingNum, 'BE', '', '') AS BE3 ON NMR.TrackingNum = BE3.TrackingNum AND BE3.BeneficiarySequence = 3
	LEFT OUTER JOIN fnCCCU_GetBEType(@TrackingNum, 'BE', '', '') AS BE4 ON NMR.TrackingNum = BE4.TrackingNum AND BE4.BeneficiarySequence = 4
	LEFT OUTER JOIN NewMemberInvestmentAdd AS INVADD ON INVADD.TrackingNum = NMR.TrackingNum AND INVADD.SubAccountSequence = SA.Sequence
	LEFT OUTER JOIN fnCCCU_GetCL(@TrackingNum, @seq1, 'C', '') AS MATDISPDATA ON NMR.TrackingNum = MATDISPDATA.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetCL(@TrackingNum, @seq1, 'D', 'P') AS DIVDISPDATA ON NMR.TrackingNum = DIVDISPDATA.TrackingNum
	LEFT OUTER JOIN NewMemberSubAccount AS MATSA ON MATSA.TrackingNum = NMR.TrackingNum AND  MATSA.Sequence = MATDISPDATA.RelatedSequence
	LEFT OUTER JOIN NewMemberSubAccount AS DIVSA ON DIVSA.TrackingNum = NMR.TrackingNum AND DIVSA.Sequence = DIVDISPDATA.RelatedSequence
	LEFT OUTER JOIN udt_ISubAccounts AS IConfig ON IConfig.UniqueID = SA.SubAccountType
WHERE NMR.TrackingNum = @TrackingNum
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_D4Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCCCU_D4Enable] @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
--Declare @TrackingNum int
--DROP TABLE #docs
--DEALLOCATE curs
--Set @TrackingNum = 1477
Declare @docsubname char(100)
Declare @newdocsub char(100)
Declare @count int
Declare @docindex int
--CREATE TABLE #docs(docindex int identity Primary Key, docsubname char(100))
Declare curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT '' AS docsubname
	FROM NewMemberRequest AS NMR
	WHERE NMR.TrackingNum = @TrackingNum AND NMR.Processed = 999 AND NMR.Created = 'Y' AND NMR.AccountType IN ('BA', 'BS') and 1=0
--IF @@ROWCOUNT = 0
OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @newdocsub = 'Business Account Card ' + @docsubname
IF @docsubname Is Null
BEGIN
	SET @newdocsub = 'Business Account Card'
END
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count
      	IF @count = 1
	BEGIN
		Set @docindex = @docindex + 1
     		 INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END
      	FETCH NEXT FROM curs INTO @docsubname
	PRINT @docsubname
	IF @@FETCH_STATUS = 0
	BEGIN
		SET @newdocsub = (RTRIM(@newdocsub) + ', ' + RTRIM(@docsubname))
		PRINT @newdocsub
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex
	END
   END
CLOSE curs
DEALLOCATE curs
Select *  FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Delete FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_D4Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCCCU_D4Fields] @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
Declare @joseq int
Declare @jo1seq int
Declare @jo2seq int
Declare @jo3seq int
Declare @jo4seq int
Declare @count int
--Set @jo1seq = 1
--Set @jo2seq = 1
--Set @jo3seq = 1
--Set @jo4seq = 1
--CREATE TABLE #docs(id int identity Primary Key, docindex int, j1FullName char(100), j1FullAddress char(100), j1FullPhone char(12), j1DOB char(10), j1SSN char(11), j1ID char(20), j1IDIssueDate  char(10), j1IDExpDate  char(10), j1IDState  char(2), j2FullName char(100), j2FullAddress char(100), j2FullPhone char(11), j2DOB char(10), j2SSN char(11), j2ID char(20), j2IDIssueDate  char(10), j2IDExpDate  char(10), j2IDState  char(2), j3FullName char(100), j3FullAddress char(100), j3FullPhone char(11), j3DOB char(10), j3SSN char(11), j3ID char(20), j3IDIssueDate  char(10), j3IDExpDate  char(10), j3IDState  char(2), j4FullName char(100), j4FullAddress char(100), j4FullPhone char(11), j4DOB char(10), j4SSN char(11), j4ID char(20), j4IDIssueDate  char(10), j4IDExpDate  char(10), j4IDState  char(2))
Declare curs2 CURSOR FOR
	SELECT  CONVERT(int, JO.Sequence)
	from NewMemberJointOwner As JO
	INNER JOIN NewMemberJointLink AS JL ON JO.Sequence = JL.JointSequence AND JL.TrackingNum = @TrackingNum
	INNER JOIN NewMemberSubAccount AS SA ON JL.SubAccountSequence = SA.Sequence AND SA.TrackingNum = @TrackingNum
	WHERE JO.TrackingNum = @TrackingNum AND (JO.JointOwnerType IN ('JB', 'JS')) AND SA.ProductType IN ('PSA', 'RSA', 'SDA', 'CC')
	GROUP BY CONVERT(int, JO.Sequence)
--IF @@ROWCOUNT = 0
OPEN curs2
FETCH NEXT FROM curs2 INTO @joseq
SET @count = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
      	IF (@count = 0 AND @DocIndex = 1) OR (@count = 4 AND @DocIndex = 2) OR (@count = 8 AND @DocIndex = 3)
		BEGIN
			Set @jo1seq = @joseq
		END
	IF (@count = 1 AND @DocIndex = 1) OR (@count = 5 AND @DocIndex = 2) OR (@count = 9 AND @DocIndex = 3)
		BEGIN
			Set @jo2seq = @joseq		
		END
	IF (@count = 2 AND @DocIndex = 1) OR (@count = 6 AND @DocIndex = 2) OR (@count = 10 AND @DocIndex = 3)
		BEGIN
			Set @jo3seq = @joseq		
		END
	IF (@count = 3 AND @DocIndex = 1) OR (@count = 7 AND @DocIndex = 2) OR (@count = 11 AND @DocIndex = 3)
		BEGIN
			Set @jo4seq = @joseq		
		END
      	FETCH NEXT FROM curs2 INTO @joseq
	SET @count = @count + 1
	PRINT @count
   END
CLOSE curs2
DEALLOCATE curs2
SELECT @DocIndex As DocIndex
	, CASE WHEN NMR.AccountType = 'BS' OR NMR.AccountType = 'BE' THEN 'X' END AS Sole
	, CASE WHEN NMR.AccountType = 'BG' OR NMR.AccountType = 'BL' THEN 'X' END AS Partnership
	, CASE WHEN NMR.AccountType = 'BC' THEN 'X' END AS Corp
	, CASE WHEN NMR.AccountType = 'BA' OR NMR.AccountType = 'BN' OR NMR.AccountType = 'ES' THEN 'X' END AS NonProfit
	, CASE WHEN NMR.AccountType = 'BY' THEN 'X' END AS LLC
	, CASE WHEN NMR.AccountType = 'BP' THEN 'X' END AS LLPartnership
	, RTRIM(JOJB1.FullName) AS JB1FullName
	, RTRIM(JOJB1.Address) AS JB1Address
	, RTRIM(JOJB1.City) AS JB1City
	, RTRIM(JOJB1.State) AS JB1State
	, RTRIM(JOJB1.Zip) AS JB1Zip
	, RTRIM(JOJB1.PhoneAC) AS JB1AC
	, LEFT(JOJB1.Phone, 3) + '-' + RIGHT(RTRIM(JOJB1.Phone), 4) AS JB1Phone
	, RTRIM(NMR.DriversLicenseNum) AS DriversLicenseNum
	, RTRIM(JOJS1.FName) AS JS1FName
	, RTRIM(JOJS1.MInitial) AS JS1MInitial
	, RTRIM(JOJS1.LName) AS JS1LName
	, LEFT(JOJS1.SSN, 3) + '-' + LEFT(RIGHT(JOJS1.SSN, 6), 2) + '-' + RIGHT(JOJS1.SSN, 4) AS JS1SSN
	, RTRIM(JOJS1.Address) AS JS1Address
	, RTRIM(JOJS1.City) AS JS1City
	, RTRIM(JOJS1.State) AS JS1State
	, RTRIM(JOJS1.Zip) AS JS1Zip
	, JOJS1.DriversLicenseNum AS JS1DriversLicenseNum
	, JOJS1.PhoneAC AS JS1AC
	, LEFT(JOJS1.Phone, 3) + '-' + RIGHT(RTRIM(JOJS1.Phone), 4) AS JS1Phone
	, JOJS1.WPhoneAC AS JS1WorkAC
	, LEFT(JOJS1.WPhone, 3) + '-' + RIGHT(RTRIM(JOJS1.WPhone), 4) AS JS1WorkPhone
	, JOJS1.DOB AS JS1DOB
	, RTRIM(JOJS2.FName) AS JS2FName
	, RTRIM(JOJS2.MInitial) AS JS2MInitial
	, RTRIM(JOJS2.LName) AS JS2LName
	, LEFT(JOJS2.SSN, 3) + '-' + LEFT(RIGHT(JOJS2.SSN, 6), 2) + '-' + RIGHT(JOJS2.SSN, 4) AS JS2SSN
	, RTRIM(JOJS2.Address) AS JS2Address
	, RTRIM(JOJS2.City) AS JS2City
	, RTRIM(JOJS2.State) AS JS2State
	, RTRIM(JOJS2.Zip) AS JS2Zip
	, JOJS2.DriversLicenseNum AS JS2DriversLicenseNum
	, JOJS2.PhoneAC AS JS2AC
	, LEFT(JOJS2.Phone, 3) + '-' + RIGHT(RTRIM(JOJS2.Phone), 4) AS JS2Phone
	, JOJS2.WPhoneAC AS JS2WorkAC
	, LEFT(JOJS2.WPhone, 3) + '-' + RIGHT(RTRIM(JOJS2.WPhone), 4) AS JS2WorkPhone
	, JOJS2.DOB AS JS2DOB
	, RTRIM(JOJS3.FName) AS JS3FName
	, RTRIM(JOJS3.MInitial) AS JS3MInitial
	, RTRIM(JOJS3.LName) AS JS3LName
	, LEFT(JOJS3.SSN, 3) + '-' + LEFT(RIGHT(JOJS3.SSN, 6), 2) + '-' + RIGHT(JOJS3.SSN, 4) AS JS3SSN
	, RTRIM(JOJS3.Address) AS JS3Address
	, RTRIM(JOJS3.City) AS JS3City
	, RTRIM(JOJS3.State) AS JS3State
	, RTRIM(JOJS3.Zip) AS JS3Zip
	, JOJS3.DriversLicenseNum AS JS3DriversLicenseNum
	, JOJS3.PhoneAC AS JS3AC
	, LEFT(JOJS3.Phone, 3) + '-' + RIGHT(RTRIM(JOJS3.Phone), 4) AS JS3Phone
	, JOJS3.WPhoneAC AS JS3WorkAC
	, LEFT(JOJS3.WPhone, 3) + '-' + RIGHT(RTRIM(JOJS3.WPhone), 4) AS JS3WorkPhone
	, JOJS3.DOB AS JS3DOB
	, RTRIM(JOJS4.FName) AS JS4FName
	, RTRIM(JOJS4.MInitial) AS JS4MInitial
	, RTRIM(JOJS4.LName) AS JS4LName
	, LEFT(JOJS4.SSN, 3) + '-' + LEFT(RIGHT(JOJS4.SSN, 6), 2) + '-' + RIGHT(JOJS4.SSN, 4) AS JS4SSN
	, RTRIM(JOJS4.Address) AS JS4Address
	, RTRIM(JOJS4.City) AS JS4City
	, RTRIM(JOJS4.State) AS JS4State
	, RTRIM(JOJS4.Zip) AS JS4Zip
	, JOJS4.DriversLicenseNum AS JS4DriversLicenseNum
	, JOJS4.PhoneAC AS JS4AC
	, LEFT(JOJS4.Phone, 3) + '-' + RIGHT(RTRIM(JOJS4.Phone), 4) AS JS4Phone
	, JOJS4.WPhoneAC AS JS4WorkAC
	, LEFT(JOJS4.WPhone, 3) + '-' + RIGHT(RTRIM(JOJS4.WPhone), 4) AS JS4WorkPhone
	, JOJS4.DOB AS JS4DOB
	, RTRIM(JOJS5.FName) AS JS5FName
	, RTRIM(JOJS5.MInitial) AS JS5MInitial
	, RTRIM(JOJS5.LName) AS JS5LName
	, LEFT(JOJS5.SSN, 3) + '-' + LEFT(RIGHT(JOJS5.SSN, 6), 2) + '-' + RIGHT(JOJS5.SSN, 4) AS JS5SSN
	, RTRIM(JOJS5.Address) AS JS5Address
	, RTRIM(JOJS5.City) AS JS5City
	, RTRIM(JOJS5.State) AS JS5State
	, RTRIM(JOJS5.Zip) AS JS5Zip
	, JOJS5.DriversLicenseNum AS JS5DriversLicenseNum
	, JOJS5.PhoneAC AS JS5AC
	, LEFT(JOJS5.Phone, 3) + '-' + RIGHT(RTRIM(JOJS5.Phone), 4) AS JS5Phone
	, JOJS5.WPhoneAC AS JS5WorkAC
	, LEFT(JOJS5.WPhone, 3) + '-' + RIGHT(RTRIM(JOJS5.WPhone), 4) AS JS5WorkPhone
	, JOJS5.DOB AS JS5DOB
	, CASE WHEN NMR.SSN != '' THEN 'X' END AS YesSSN
	, LEFT(NMR.SSN, 3) + '-' + LEFT(RIGHT(NMR.SSN, 6), 2) + '-' + RIGHT(NMR.SSN, 4) AS SSN
	, 'X' AS BackWith
	, CASE WHEN NMR.Citizenship = 'US' OR NMR.Citizenship = 'RA' OR NMR.AccountClass = 'O' THEN 'X' END AS YesUSCitizen
	, CASE WHEN NMR.Citizenship = 'NR' THEN 'X' END AS NoUSCitizen
	, CASE WHEN SASDA.Sequence != '' THEN 'X' ELSE '' END AS CheckingYes
	, CASE WHEN SASDA.Sequence != '' THEN '' ELSE 'X' END AS CheckingNo
	, CASE WHEN LOWER(LEFT(Q1.Response, 1)) = 'y' THEN 'X' END AS YesQuestion1
	, CASE WHEN LOWER(LEFT(Q1.Response, 1)) != 'y' THEN 'X' END AS NoQuestion1
	, CASE WHEN LOWER(LEFT(Q1.Response, 1)) = 'y' THEN RTRIM(Q2.Response) END AS Question2
	, CASE WHEN LOWER(LEFT(Q3.Response, 1)) = 'y' THEN 'X' END AS YesQuestion3
	, CASE WHEN LOWER(LEFT(Q3.Response, 1)) != 'y' THEN 'X' END AS NoQuestion3
	, CASE WHEN LOWER(LEFT(Q4.Response, 1)) = 'y' THEN 'X' END AS YesQuestion4
	, CASE WHEN LOWER(LEFT(Q4.Response, 1)) != 'y' THEN 'X' END AS NoQuestion4
	,	SAODP1.Description + 
		CASE WHEN SAODP2.Description != '' THEN CHAR(13) + CHAR(10) + SAODP2.Description ELSE '' END + 
		CASE WHEN SAODP3.Description != '' THEN CHAR(13) + CHAR(10) + SAODP3.Description ELSE '' END +
		CASE WHEN SAODP4.Description != '' THEN CHAR(13) + CHAR(10) + SAODP4.Description ELSE '' END +
		CASE WHEN SAODP5.Description != '' THEN CHAR(13) + CHAR(10) + SAODP5.Description ELSE '' END +
		CASE WHEN SAODP6.Description != '' THEN CHAR(13) + CHAR(10) + SAODP6.Description ELSE '' END
		AS OverDraft
	, CASE WHEN NMR.Qualification3 = 'Employer' THEN 'X' END AS EligEmployerYes
	, CASE WHEN NMR.Qualification3 = 'Location' THEN 'X' END AS EligLivesYes
	, CASE WHEN NMR.Qualification3 = 'Location' THEN 'X' END AS EligWorksYes
	, NMR.Qualification1 AS Relative
	, NMR.Qualification2 AS Relationship
	, NMR.Seller AS TellerInitials
	, CASE NMR.Qualification3
		WHEN 'Location' THEN 'Lives, Works Or Worships in: ' + RTRIM(NMR.Department)
		WHEN 'Employer' THEN 'SEG Employer: ' + RTRIM(NMR.Department)
	  END AS LivesWorksWorships
FROM NewMemberRequest AS NMR
	LEFT OUTER JOIN NewMemberHome AS Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork AS Work On NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'JB', '', '') AS JOJB1 ON NMR.TrackingNum = JOJB1.TrackingNum AND JOJB1.JointSequence = 1
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'JS', '', '') AS JOJS1 ON NMR.TrackingNum = JOJS1.TrackingNum AND JOJS1.JointSequence = 1
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'JS', '', '') AS JOJS2 ON NMR.TrackingNum = JOJS2.TrackingNum AND JOJS2.JointSequence = 2
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'JS', '', '') AS JOJS3 ON NMR.TrackingNum = JOJS3.TrackingNum AND JOJS3.JointSequence = 3
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'JS', '', '') AS JOJS4 ON NMR.TrackingNum = JOJS4.TrackingNum AND JOJS4.JointSequence = 4
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'JS', '', '') AS JOJS5 ON NMR.TrackingNum = JOJS5.TrackingNum AND JOJS5.JointSequence = 5
	LEFT OUTER JOIN fnCCCU_GetSA(@TrackingNum, 'SDA', 'S') AS SASDA ON NMR.TrackingNum = SASDA.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetQuestion(@TrackingNum, '1') AS Q1 ON NMR.TrackingNum = Q1.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetQuestion(@TrackingNum, '2') AS Q2 ON NMR.TrackingNum = Q2.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetQuestion(@TrackingNum, '3') AS Q3 ON NMR.TrackingNum = Q3.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetQuestion(@TrackingNum, '4') AS Q4 ON NMR.TrackingNum = Q4.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetSAODP(@TrackingNum, '1') AS SAODP1 ON NMR.TrackingNum = SAODP1.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetSAODP(@TrackingNum, '2') AS SAODP2 ON NMR.TrackingNum = SAODP2.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetSAODP(@TrackingNum, '3') AS SAODP3 ON NMR.TrackingNum = SAODP3.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetSAODP(@TrackingNum, '4') AS SAODP4 ON NMR.TrackingNum = SAODP4.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetSAODP(@TrackingNum, '5') AS SAODP5 ON NMR.TrackingNum = SAODP5.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetSAODP(@TrackingNum, '6') AS SAODP6 ON NMR.TrackingNum = SAODP6.TrackingNum
WHERE NMR.TrackingNum = @TrackingNum
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_D50Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCCCU_D50Enable] @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
--Declare @TrackingNum int
--DROP TABLE #docs
--DEALLOCATE curs
--Set @TrackingNum = 1477

Declare @docsubname char(100)
Declare @newdocsub char(200)
Declare @docsuffix char(2)
Declare @count int
Declare @docindex int


--CREATE TABLE #docs(docindex int identity Primary Key, docsubname char(100))

Declare curs CURSOR FOR
	SELECT TOP 1 SA.Sequence, CONVERT(char(2), SA.Suffix)
	FROM NewMemberRequest As NMR INNER JOIN NewMemberSubAccount AS SA ON NMR.TrackingNum = SA.TrackingNum
	WHERE NMR.TrackingNum = @TrackingNum AND SA.ProductType = 'PSA' AND SA.Created = 'Y' AND NMR.AccountType <> 'H' AND '' = 'REMOVED per John Knutson 3/2/2018'

--IF @@ROWCOUNT = 0

OPEN curs
FETCH NEXT FROM curs INTO @docsubname, @docsuffix
SET @newdocsub = 'Privacy '-- + CASE LEN(@docsubname) WHEN 2 THEN @docsubname WHEN 1 THEN '0' + @docsubname ELSE 'NA' END
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count

	Set @docindex = @docindex + 1
	INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)

      	FETCH NEXT FROM curs INTO @docsubname, @docsuffix

	SET @newdocsub = 'Privacy '-- + CASE LEN(@docsubname) WHEN 2 THEN @docsubname WHEN 1 THEN '0' + @docsubname ELSE 'NA' END
   END

CLOSE curs
DEALLOCATE curs

Select *  FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Delete FROM NewMemberDoc WHERE TrackingNum = @TrackingNum

--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_D50Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCCCU_D50Fields] @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

SELECT @DocIndex As DocIndex
	--, BE1.fullname AS BE1fullname, BE1.fulladdress AS BE1fulladdress, BE1.DOB AS BE1DOB, BE1.Relationship AS BE1Relationship, CASE LEN(BE1.Suffix) WHEN 2 THEN BE1.Suffix WHEN 1 THEN '0' + BE1.Suffix ELSE 'NA' END AS BE1Suffix
	--, BE2.fullname AS BE2fullname, BE2.fulladdress AS BE2fulladdress, BE2.DOB AS BE2DOB, BE2.Relationship AS BE2Relationship, CASE LEN(BE2.Suffix) WHEN 2 THEN BE2.Suffix WHEN 1 THEN '0' + BE2.Suffix ELSE 'NA' END AS BE2Suffix
	--, BE3.fullname AS BE3fullname, BE3.fulladdress AS BE3fulladdress, BE3.DOB AS BE3DOB, BE3.Relationship AS BE3Relationship, CASE LEN(BE3.Suffix) WHEN 2 THEN BE3.Suffix WHEN 1 THEN '0' + BE3.Suffix ELSE 'NA' END AS BE3Suffix
FROM NewMemberRequest As NMR
	--INNER JOIN udt_AccountTypes AS AType On NMR.AccountType = AType.TypeCode
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
	--LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'PD', '') AS BE1 ON NMR.TrackingNum = BE1.TrackingNum AND BE1.JointSequence = 1
	--LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'PD', '') AS BE2 ON NMR.TrackingNum = BE2.TrackingNum AND BE2.JointSequence = 2
	--LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'PD', '') AS BE3 ON NMR.TrackingNum = BE3.TrackingNum AND BE3.JointSequence = 3
WHERE NMR.TrackingNum = @TrackingNum


Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_D51Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCCCU_D51Enable] @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
--Declare @TrackingNum int
--DROP TABLE #docs
--DEALLOCATE curs
--Set @TrackingNum = 1477

Declare @docsubname char(100)
Declare @newdocsub char(200)
Declare @docsuffix char(2)
Declare @count int
Declare @docindex int


--CREATE TABLE #docs(docindex int identity Primary Key, docsubname char(100))

Declare curs CURSOR FOR
	SELECT TOP 1 SA.Sequence, CONVERT(char(2), SA.Suffix)
	FROM NewMemberRequest As NMR INNER JOIN NewMemberSubAccount AS SA ON NMR.TrackingNum = SA.TrackingNum
	WHERE NMR.TrackingNum = @TrackingNum AND (NMR.AccountClass = 'P' OR NMR.AccountType = 'ES') AND SA.Created = 'Y' AND NMR.AccountType <> 'H' AND '' = 'REMOVED per John Knutson 3/2/2018'

--IF @@ROWCOUNT = 0

OPEN curs
FETCH NEXT FROM curs INTO @docsubname, @docsuffix
SET @newdocsub = 'Truth in Savings '-- + CASE LEN(@docsubname) WHEN 2 THEN @docsubname WHEN 1 THEN '0' + @docsubname ELSE 'NA' END
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count

	Set @docindex = @docindex + 1
	INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)

      	FETCH NEXT FROM curs INTO @docsubname, @docsuffix

	SET @newdocsub = 'Truth in Savings '-- + CASE LEN(@docsubname) WHEN 2 THEN @docsubname WHEN 1 THEN '0' + @docsubname ELSE 'NA' END
   END

CLOSE curs
DEALLOCATE curs

Select *  FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Delete FROM NewMemberDoc WHERE TrackingNum = @TrackingNum

--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_D51Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCCCU_D51Fields] @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

SELECT @DocIndex As DocIndex
	--, BE1.fullname AS BE1fullname, BE1.fulladdress AS BE1fulladdress, BE1.DOB AS BE1DOB, BE1.Relationship AS BE1Relationship, CASE LEN(BE1.Suffix) WHEN 2 THEN BE1.Suffix WHEN 1 THEN '0' + BE1.Suffix ELSE 'NA' END AS BE1Suffix
	--, BE2.fullname AS BE2fullname, BE2.fulladdress AS BE2fulladdress, BE2.DOB AS BE2DOB, BE2.Relationship AS BE2Relationship, CASE LEN(BE2.Suffix) WHEN 2 THEN BE2.Suffix WHEN 1 THEN '0' + BE2.Suffix ELSE 'NA' END AS BE2Suffix
	--, BE3.fullname AS BE3fullname, BE3.fulladdress AS BE3fulladdress, BE3.DOB AS BE3DOB, BE3.Relationship AS BE3Relationship, CASE LEN(BE3.Suffix) WHEN 2 THEN BE3.Suffix WHEN 1 THEN '0' + BE3.Suffix ELSE 'NA' END AS BE3Suffix
FROM NewMemberRequest As NMR
	--INNER JOIN udt_AccountTypes AS AType On NMR.AccountType = AType.TypeCode
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
	--LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'PD', '') AS BE1 ON NMR.TrackingNum = BE1.TrackingNum AND BE1.JointSequence = 1
	--LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'PD', '') AS BE2 ON NMR.TrackingNum = BE2.TrackingNum AND BE2.JointSequence = 2
	--LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'PD', '') AS BE3 ON NMR.TrackingNum = BE3.TrackingNum AND BE3.JointSequence = 3
WHERE NMR.TrackingNum = @TrackingNum


Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_D52Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCCCU_D52Enable] @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
--Declare @TrackingNum int
--DROP TABLE #docs
--DEALLOCATE curs
--Set @TrackingNum = 1477

Declare @docsubname char(100)
Declare @newdocsub char(200)
Declare @docsuffix char(2)
Declare @count int
Declare @docindex int


--CREATE TABLE #docs(docindex int identity Primary Key, docsubname char(100))

Declare curs CURSOR FOR
	SELECT TOP 1 SA.Sequence, CONVERT(char(2), SA.Suffix)
	FROM NewMemberRequest As NMR INNER JOIN NewMemberSubAccount AS SA ON NMR.TrackingNum = SA.TrackingNum
	WHERE NMR.TrackingNum = @TrackingNum AND (NMR.AccountClass = 'P' OR NMR.AccountType = 'ES') AND SA.Created = 'Y' AND NMR.AccountType <> 'H' AND '' = 'REMOVED per John Knutson 3/2/2018'

--IF @@ROWCOUNT = 0

OPEN curs
FETCH NEXT FROM curs INTO @docsubname, @docsuffix
SET @newdocsub = 'Rate Chart '-- + CASE LEN(@docsubname) WHEN 2 THEN @docsubname WHEN 1 THEN '0' + @docsubname ELSE 'NA' END
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count

	Set @docindex = @docindex + 1
	INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)

      	FETCH NEXT FROM curs INTO @docsubname, @docsuffix

	SET @newdocsub = 'Rate Chart '-- + CASE LEN(@docsubname) WHEN 2 THEN @docsubname WHEN 1 THEN '0' + @docsubname ELSE 'NA' END
   END

CLOSE curs
DEALLOCATE curs

Select *  FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Delete FROM NewMemberDoc WHERE TrackingNum = @TrackingNum

--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_D52Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCCCU_D52Fields] @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

SELECT @DocIndex As DocIndex
	--, BE1.fullname AS BE1fullname, BE1.fulladdress AS BE1fulladdress, BE1.DOB AS BE1DOB, BE1.Relationship AS BE1Relationship, CASE LEN(BE1.Suffix) WHEN 2 THEN BE1.Suffix WHEN 1 THEN '0' + BE1.Suffix ELSE 'NA' END AS BE1Suffix
	--, BE2.fullname AS BE2fullname, BE2.fulladdress AS BE2fulladdress, BE2.DOB AS BE2DOB, BE2.Relationship AS BE2Relationship, CASE LEN(BE2.Suffix) WHEN 2 THEN BE2.Suffix WHEN 1 THEN '0' + BE2.Suffix ELSE 'NA' END AS BE2Suffix
	--, BE3.fullname AS BE3fullname, BE3.fulladdress AS BE3fulladdress, BE3.DOB AS BE3DOB, BE3.Relationship AS BE3Relationship, CASE LEN(BE3.Suffix) WHEN 2 THEN BE3.Suffix WHEN 1 THEN '0' + BE3.Suffix ELSE 'NA' END AS BE3Suffix
FROM NewMemberRequest As NMR
	--INNER JOIN udt_AccountTypes AS AType On NMR.AccountType = AType.TypeCode
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
	--LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'PD', '') AS BE1 ON NMR.TrackingNum = BE1.TrackingNum AND BE1.JointSequence = 1
	--LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'PD', '') AS BE2 ON NMR.TrackingNum = BE2.TrackingNum AND BE2.JointSequence = 2
	--LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'PD', '') AS BE3 ON NMR.TrackingNum = BE3.TrackingNum AND BE3.JointSequence = 3
WHERE NMR.TrackingNum = @TrackingNum


Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_D53Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCCCU_D53Enable] @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
--Declare @TrackingNum int
--DROP TABLE #docs
--DEALLOCATE curs
--Set @TrackingNum = 1477

Declare @docsubname char(100)
Declare @newdocsub char(200)
Declare @docsuffix char(2)
Declare @count int
Declare @docindex int


--CREATE TABLE #docs(docindex int identity Primary Key, docsubname char(100))

Declare curs CURSOR FOR
	SELECT TOP 1 SA.Sequence, CONVERT(char(2), SA.Suffix)
	FROM NewMemberRequest As NMR INNER JOIN NewMemberSubAccount AS SA ON NMR.TrackingNum = SA.TrackingNum
	WHERE NMR.TrackingNum = @TrackingNum AND SA.ProductType IN ('PSA', 'SDA') AND SA.Created = 'Y' AND NMR.AccountType <> 'H' AND '' = 'REMOVED per John Knutson 3/2/2018'

--IF @@ROWCOUNT = 0

OPEN curs
FETCH NEXT FROM curs INTO @docsubname, @docsuffix
SET @newdocsub = 'Terms and Conditions '-- + CASE LEN(@docsubname) WHEN 2 THEN @docsubname WHEN 1 THEN '0' + @docsubname ELSE 'NA' END
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count

	Set @docindex = @docindex + 1
	INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)

      	FETCH NEXT FROM curs INTO @docsubname, @docsuffix

	SET @newdocsub = 'Terms and Conditions '-- + CASE LEN(@docsubname) WHEN 2 THEN @docsubname WHEN 1 THEN '0' + @docsubname ELSE 'NA' END
   END

CLOSE curs
DEALLOCATE curs

Select *  FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Delete FROM NewMemberDoc WHERE TrackingNum = @TrackingNum

--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_D53Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCCCU_D53Fields] @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

SELECT @DocIndex As DocIndex
	--, BE1.fullname AS BE1fullname, BE1.fulladdress AS BE1fulladdress, BE1.DOB AS BE1DOB, BE1.Relationship AS BE1Relationship, CASE LEN(BE1.Suffix) WHEN 2 THEN BE1.Suffix WHEN 1 THEN '0' + BE1.Suffix ELSE 'NA' END AS BE1Suffix
	--, BE2.fullname AS BE2fullname, BE2.fulladdress AS BE2fulladdress, BE2.DOB AS BE2DOB, BE2.Relationship AS BE2Relationship, CASE LEN(BE2.Suffix) WHEN 2 THEN BE2.Suffix WHEN 1 THEN '0' + BE2.Suffix ELSE 'NA' END AS BE2Suffix
	--, BE3.fullname AS BE3fullname, BE3.fulladdress AS BE3fulladdress, BE3.DOB AS BE3DOB, BE3.Relationship AS BE3Relationship, CASE LEN(BE3.Suffix) WHEN 2 THEN BE3.Suffix WHEN 1 THEN '0' + BE3.Suffix ELSE 'NA' END AS BE3Suffix
FROM NewMemberRequest As NMR
	--INNER JOIN udt_AccountTypes AS AType On NMR.AccountType = AType.TypeCode
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
	--LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'PD', '') AS BE1 ON NMR.TrackingNum = BE1.TrackingNum AND BE1.JointSequence = 1
	--LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'PD', '') AS BE2 ON NMR.TrackingNum = BE2.TrackingNum AND BE2.JointSequence = 2
	--LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'PD', '') AS BE3 ON NMR.TrackingNum = BE3.TrackingNum AND BE3.JointSequence = 3
WHERE NMR.TrackingNum = @TrackingNum


Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_D54Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCCCU_D54Enable] @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
--Declare @TrackingNum int
--DROP TABLE #docs
--DEALLOCATE curs
--Set @TrackingNum = 1477

Declare @docsubname char(100)
Declare @newdocsub char(200)
Declare @docsuffix char(2)
Declare @count int
Declare @docindex int


--CREATE TABLE #docs(docindex int identity Primary Key, docsubname char(100))

Declare curs CURSOR FOR
	SELECT TOP 1 SA.Sequence, CONVERT(char(2), SA.Suffix)
	FROM NewMemberRequest As NMR INNER JOIN NewMemberSubAccount AS SA ON NMR.TrackingNum = SA.TrackingNum
	WHERE NMR.TrackingNum = @TrackingNum AND SA.ProductType IN ('PSA', 'SDA') AND SA.Created = 'Y' AND NMR.AccountType <> 'H' AND '' = 'REMOVED per John Knutson 3/2/2018'

--IF @@ROWCOUNT = 0

OPEN curs
FETCH NEXT FROM curs INTO @docsubname, @docsuffix
SET @newdocsub = 'Electronic Fund Transfers '-- + CASE LEN(@docsubname) WHEN 2 THEN @docsubname WHEN 1 THEN '0' + @docsubname ELSE 'NA' END
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count

	Set @docindex = @docindex + 1
	INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)

      	FETCH NEXT FROM curs INTO @docsubname, @docsuffix

	SET @newdocsub = 'Electronic Fund Transfers '-- + CASE LEN(@docsubname) WHEN 2 THEN @docsubname WHEN 1 THEN '0' + @docsubname ELSE 'NA' END
   END

CLOSE curs
DEALLOCATE curs

Select *  FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Delete FROM NewMemberDoc WHERE TrackingNum = @TrackingNum

--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_D54Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCCCU_D54Fields] @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

SELECT @DocIndex As DocIndex
	--, BE1.fullname AS BE1fullname, BE1.fulladdress AS BE1fulladdress, BE1.DOB AS BE1DOB, BE1.Relationship AS BE1Relationship, CASE LEN(BE1.Suffix) WHEN 2 THEN BE1.Suffix WHEN 1 THEN '0' + BE1.Suffix ELSE 'NA' END AS BE1Suffix
	--, BE2.fullname AS BE2fullname, BE2.fulladdress AS BE2fulladdress, BE2.DOB AS BE2DOB, BE2.Relationship AS BE2Relationship, CASE LEN(BE2.Suffix) WHEN 2 THEN BE2.Suffix WHEN 1 THEN '0' + BE2.Suffix ELSE 'NA' END AS BE2Suffix
	--, BE3.fullname AS BE3fullname, BE3.fulladdress AS BE3fulladdress, BE3.DOB AS BE3DOB, BE3.Relationship AS BE3Relationship, CASE LEN(BE3.Suffix) WHEN 2 THEN BE3.Suffix WHEN 1 THEN '0' + BE3.Suffix ELSE 'NA' END AS BE3Suffix
FROM NewMemberRequest As NMR
	--INNER JOIN udt_AccountTypes AS AType On NMR.AccountType = AType.TypeCode
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
	--LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'PD', '') AS BE1 ON NMR.TrackingNum = BE1.TrackingNum AND BE1.JointSequence = 1
	--LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'PD', '') AS BE2 ON NMR.TrackingNum = BE2.TrackingNum AND BE2.JointSequence = 2
	--LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'PD', '') AS BE3 ON NMR.TrackingNum = BE3.TrackingNum AND BE3.JointSequence = 3
WHERE NMR.TrackingNum = @TrackingNum


Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_D55Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCCCU_D55Enable] @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
--Declare @TrackingNum int
--DROP TABLE #docs
--DEALLOCATE curs
--Set @TrackingNum = 1477

Declare @docsubname char(100)
Declare @newdocsub char(200)
Declare @docsuffix char(2)
Declare @count int
Declare @docindex int


--CREATE TABLE #docs(docindex int identity Primary Key, docsubname char(100))

Declare curs CURSOR FOR
	SELECT TOP 1 SA.Sequence, CONVERT(char(2), SA.Suffix)
	FROM NewMemberRequest As NMR INNER JOIN NewMemberSubAccount AS SA ON NMR.TrackingNum = SA.TrackingNum
	WHERE NMR.TrackingNum = @TrackingNum AND SA.ProductType IN ('PSA', 'SDA') AND SA.Created = 'Y' AND NMR.AccountType <> 'H' AND '' = 'REMOVED per John Knutson 3/2/2018'

--IF @@ROWCOUNT = 0

OPEN curs
FETCH NEXT FROM curs INTO @docsubname, @docsuffix
SET @newdocsub = 'Ability to Withdraw Funds '-- + CASE LEN(@docsubname) WHEN 2 THEN @docsubname WHEN 1 THEN '0' + @docsubname ELSE 'NA' END
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count

	Set @docindex = @docindex + 1
	INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)

      	FETCH NEXT FROM curs INTO @docsubname, @docsuffix

	SET @newdocsub = 'Ability to Withdraw Funds '-- + CASE LEN(@docsubname) WHEN 2 THEN @docsubname WHEN 1 THEN '0' + @docsubname ELSE 'NA' END
   END

CLOSE curs
DEALLOCATE curs

Select *  FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Delete FROM NewMemberDoc WHERE TrackingNum = @TrackingNum

--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_D55Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCCCU_D55Fields] @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

SELECT @DocIndex As DocIndex
	--, BE1.fullname AS BE1fullname, BE1.fulladdress AS BE1fulladdress, BE1.DOB AS BE1DOB, BE1.Relationship AS BE1Relationship, CASE LEN(BE1.Suffix) WHEN 2 THEN BE1.Suffix WHEN 1 THEN '0' + BE1.Suffix ELSE 'NA' END AS BE1Suffix
	--, BE2.fullname AS BE2fullname, BE2.fulladdress AS BE2fulladdress, BE2.DOB AS BE2DOB, BE2.Relationship AS BE2Relationship, CASE LEN(BE2.Suffix) WHEN 2 THEN BE2.Suffix WHEN 1 THEN '0' + BE2.Suffix ELSE 'NA' END AS BE2Suffix
	--, BE3.fullname AS BE3fullname, BE3.fulladdress AS BE3fulladdress, BE3.DOB AS BE3DOB, BE3.Relationship AS BE3Relationship, CASE LEN(BE3.Suffix) WHEN 2 THEN BE3.Suffix WHEN 1 THEN '0' + BE3.Suffix ELSE 'NA' END AS BE3Suffix
FROM NewMemberRequest As NMR
	--INNER JOIN udt_AccountTypes AS AType On NMR.AccountType = AType.TypeCode
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
	--LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'PD', '') AS BE1 ON NMR.TrackingNum = BE1.TrackingNum AND BE1.JointSequence = 1
	--LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'PD', '') AS BE2 ON NMR.TrackingNum = BE2.TrackingNum AND BE2.JointSequence = 2
	--LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'PD', '') AS BE3 ON NMR.TrackingNum = BE3.TrackingNum AND BE3.JointSequence = 3
WHERE NMR.TrackingNum = @TrackingNum


Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_D56Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCCCU_D56Enable] @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
--Declare @TrackingNum int
--DROP TABLE #docs
--DEALLOCATE curs
--Set @TrackingNum = 1477

Declare @docsubname char(100)
Declare @newdocsub char(200)
Declare @docsuffix char(2)
Declare @count int
Declare @docindex int


--CREATE TABLE #docs(docindex int identity Primary Key, docsubname char(100))

Declare curs CURSOR FOR
	SELECT TOP 1 SA.Sequence, CONVERT(char(2), SA.Suffix)
	FROM NewMemberRequest As NMR INNER JOIN NewMemberSubAccount AS SA ON NMR.TrackingNum = SA.TrackingNum
	WHERE NMR.TrackingNum = @TrackingNum AND (NMR.AccountClass = 'P' OR NMR.AccountType = 'ES') AND (SA.ProductType IN ('PSA', 'SDA') OR SA.SubAccountType IN ('BMM-08', 'MMA-12')) AND SA.Created = 'Y' AND NMR.AccountType <> 'H' AND '' = 'REMOVED per John Knutson 3/2/2018'

--IF @@ROWCOUNT = 0

OPEN curs
FETCH NEXT FROM curs INTO @docsubname, @docsuffix
SET @newdocsub = 'Fee Schedule '-- + CASE LEN(@docsubname) WHEN 2 THEN @docsubname WHEN 1 THEN '0' + @docsubname ELSE 'NA' END
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count

	Set @docindex = @docindex + 1
	INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)

      	FETCH NEXT FROM curs INTO @docsubname, @docsuffix

	SET @newdocsub = 'Fee Schedule '-- + CASE LEN(@docsubname) WHEN 2 THEN @docsubname WHEN 1 THEN '0' + @docsubname ELSE 'NA' END
   END

CLOSE curs
DEALLOCATE curs

Select *  FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Delete FROM NewMemberDoc WHERE TrackingNum = @TrackingNum

--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_D56Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCCCU_D56Fields] @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

SELECT @DocIndex As DocIndex
	--, BE1.fullname AS BE1fullname, BE1.fulladdress AS BE1fulladdress, BE1.DOB AS BE1DOB, BE1.Relationship AS BE1Relationship, CASE LEN(BE1.Suffix) WHEN 2 THEN BE1.Suffix WHEN 1 THEN '0' + BE1.Suffix ELSE 'NA' END AS BE1Suffix
	--, BE2.fullname AS BE2fullname, BE2.fulladdress AS BE2fulladdress, BE2.DOB AS BE2DOB, BE2.Relationship AS BE2Relationship, CASE LEN(BE2.Suffix) WHEN 2 THEN BE2.Suffix WHEN 1 THEN '0' + BE2.Suffix ELSE 'NA' END AS BE2Suffix
	--, BE3.fullname AS BE3fullname, BE3.fulladdress AS BE3fulladdress, BE3.DOB AS BE3DOB, BE3.Relationship AS BE3Relationship, CASE LEN(BE3.Suffix) WHEN 2 THEN BE3.Suffix WHEN 1 THEN '0' + BE3.Suffix ELSE 'NA' END AS BE3Suffix
FROM NewMemberRequest As NMR
	--INNER JOIN udt_AccountTypes AS AType On NMR.AccountType = AType.TypeCode
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
	--LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'PD', '') AS BE1 ON NMR.TrackingNum = BE1.TrackingNum AND BE1.JointSequence = 1
	--LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'PD', '') AS BE2 ON NMR.TrackingNum = BE2.TrackingNum AND BE2.JointSequence = 2
	--LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'PD', '') AS BE3 ON NMR.TrackingNum = BE3.TrackingNum AND BE3.JointSequence = 3
WHERE NMR.TrackingNum = @TrackingNum


Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_D57Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCCCU_D57Enable] @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
--Declare @TrackingNum int
--DROP TABLE #docs
--DEALLOCATE curs
--Set @TrackingNum = 1477

Declare @docsubname char(100)
Declare @newdocsub char(200)
Declare @docsuffix char(2)
Declare @count int
Declare @docindex int


--CREATE TABLE #docs(docindex int identity Primary Key, docsubname char(100))

Declare curs CURSOR FOR
	SELECT TOP 1 SA.Sequence, CONVERT(char(2), SA.Suffix)
	FROM NewMemberRequest As NMR INNER JOIN NewMemberSubAccount AS SA ON NMR.TrackingNum = SA.TrackingNum
	WHERE NMR.TrackingNum = @TrackingNum AND NOT (NMR.AccountClass = 'P' OR NMR.AccountType = 'ES') AND (SA.ProductType IN ('PSA', 'SDA') OR SA.SubAccountType IN ('BMM-08', 'MMA-12')) AND SA.Created = 'Y' AND '' = 'REMOVED per John Knutson 3/2/2018'

--IF @@ROWCOUNT = 0

OPEN curs
FETCH NEXT FROM curs INTO @docsubname, @docsuffix
SET @newdocsub = 'Business Fee Schedule '-- + CASE LEN(@docsubname) WHEN 2 THEN @docsubname WHEN 1 THEN '0' + @docsubname ELSE 'NA' END
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count

	Set @docindex = @docindex + 1
	INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)

      	FETCH NEXT FROM curs INTO @docsubname, @docsuffix

	SET @newdocsub = 'Business Fee Schedule '-- + CASE LEN(@docsubname) WHEN 2 THEN @docsubname WHEN 1 THEN '0' + @docsubname ELSE 'NA' END
   END

CLOSE curs
DEALLOCATE curs

Select *  FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Delete FROM NewMemberDoc WHERE TrackingNum = @TrackingNum

--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_D57Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCCCU_D57Fields] @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

SELECT @DocIndex As DocIndex
	--, BE1.fullname AS BE1fullname, BE1.fulladdress AS BE1fulladdress, BE1.DOB AS BE1DOB, BE1.Relationship AS BE1Relationship, CASE LEN(BE1.Suffix) WHEN 2 THEN BE1.Suffix WHEN 1 THEN '0' + BE1.Suffix ELSE 'NA' END AS BE1Suffix
	--, BE2.fullname AS BE2fullname, BE2.fulladdress AS BE2fulladdress, BE2.DOB AS BE2DOB, BE2.Relationship AS BE2Relationship, CASE LEN(BE2.Suffix) WHEN 2 THEN BE2.Suffix WHEN 1 THEN '0' + BE2.Suffix ELSE 'NA' END AS BE2Suffix
	--, BE3.fullname AS BE3fullname, BE3.fulladdress AS BE3fulladdress, BE3.DOB AS BE3DOB, BE3.Relationship AS BE3Relationship, CASE LEN(BE3.Suffix) WHEN 2 THEN BE3.Suffix WHEN 1 THEN '0' + BE3.Suffix ELSE 'NA' END AS BE3Suffix
FROM NewMemberRequest As NMR
	--INNER JOIN udt_AccountTypes AS AType On NMR.AccountType = AType.TypeCode
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
	--LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'PD', '') AS BE1 ON NMR.TrackingNum = BE1.TrackingNum AND BE1.JointSequence = 1
	--LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'PD', '') AS BE2 ON NMR.TrackingNum = BE2.TrackingNum AND BE2.JointSequence = 2
	--LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'PD', '') AS BE3 ON NMR.TrackingNum = BE3.TrackingNum AND BE3.JointSequence = 3
WHERE NMR.TrackingNum = @TrackingNum


Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_D58Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCCCU_D58Enable] @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
--Declare @TrackingNum int
--DROP TABLE #docs
--DEALLOCATE curs
--Set @TrackingNum = 1477

Declare @docsubname char(100)
Declare @newdocsub char(200)
Declare @docsuffix char(2)
Declare @count int
Declare @docindex int


--CREATE TABLE #docs(docindex int identity Primary Key, docsubname char(100))

Declare curs CURSOR FOR
	SELECT TOP 1 SA.Sequence, CONVERT(char(2), SA.Suffix)
	FROM NewMemberRequest As NMR INNER JOIN NewMemberSubAccount AS SA ON NMR.TrackingNum = SA.TrackingNum
	WHERE NMR.TrackingNum = @TrackingNum AND SA.ProductType = 'CC' AND SA.Created != 'H' AND '' = 'REMOVED per John Knutson 3/2/2018'

--IF @@ROWCOUNT = 0

OPEN curs
FETCH NEXT FROM curs INTO @docsubname, @docsuffix
SET @newdocsub = 'VISA Disclosure '-- + CASE LEN(@docsubname) WHEN 2 THEN @docsubname WHEN 1 THEN '0' + @docsubname ELSE 'NA' END
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count

	Set @docindex = @docindex + 1
	INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)

      	FETCH NEXT FROM curs INTO @docsubname, @docsuffix

	SET @newdocsub = 'VISA Disclosure '-- + CASE LEN(@docsubname) WHEN 2 THEN @docsubname WHEN 1 THEN '0' + @docsubname ELSE 'NA' END
   END

CLOSE curs
DEALLOCATE curs

Select *  FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Delete FROM NewMemberDoc WHERE TrackingNum = @TrackingNum

--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_D58Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCCCU_D58Fields] @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

SELECT @DocIndex As DocIndex
	--, BE1.fullname AS BE1fullname, BE1.fulladdress AS BE1fulladdress, BE1.DOB AS BE1DOB, BE1.Relationship AS BE1Relationship, CASE LEN(BE1.Suffix) WHEN 2 THEN BE1.Suffix WHEN 1 THEN '0' + BE1.Suffix ELSE 'NA' END AS BE1Suffix
	--, BE2.fullname AS BE2fullname, BE2.fulladdress AS BE2fulladdress, BE2.DOB AS BE2DOB, BE2.Relationship AS BE2Relationship, CASE LEN(BE2.Suffix) WHEN 2 THEN BE2.Suffix WHEN 1 THEN '0' + BE2.Suffix ELSE 'NA' END AS BE2Suffix
	--, BE3.fullname AS BE3fullname, BE3.fulladdress AS BE3fulladdress, BE3.DOB AS BE3DOB, BE3.Relationship AS BE3Relationship, CASE LEN(BE3.Suffix) WHEN 2 THEN BE3.Suffix WHEN 1 THEN '0' + BE3.Suffix ELSE 'NA' END AS BE3Suffix
FROM NewMemberRequest As NMR
	--INNER JOIN udt_AccountTypes AS AType On NMR.AccountType = AType.TypeCode
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
	--LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'PD', '') AS BE1 ON NMR.TrackingNum = BE1.TrackingNum AND BE1.JointSequence = 1
	--LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'PD', '') AS BE2 ON NMR.TrackingNum = BE2.TrackingNum AND BE2.JointSequence = 2
	--LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'PD', '') AS BE3 ON NMR.TrackingNum = BE3.TrackingNum AND BE3.JointSequence = 3
WHERE NMR.TrackingNum = @TrackingNum


Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_D59Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCCCU_D59Enable] @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
--Declare @TrackingNum int
--DROP TABLE #docs
--DEALLOCATE curs
--Set @TrackingNum = 1477

Declare @docsubname char(100)
Declare @newdocsub char(200)
Declare @docsuffix char(2)
Declare @count int
Declare @docindex int


--CREATE TABLE #docs(docindex int identity Primary Key, docsubname char(100))

Declare curs CURSOR FOR
	SELECT TOP 1 SA.Sequence, CONVERT(char(2), SA.Suffix)
	FROM NewMemberRequest As NMR INNER JOIN NewMemberSubAccount AS SA ON NMR.TrackingNum = SA.TrackingNum
	WHERE NMR.TrackingNum = @TrackingNum AND SA.Created = 'Y' AND NMR.AccountType <> 'H' AND '' = 'REMOVED per John Knutson 3/2/2018'

--IF @@ROWCOUNT = 0

OPEN curs
FETCH NEXT FROM curs INTO @docsubname, @docsuffix
SET @newdocsub = 'Bill Payment Disclosure '-- + CASE LEN(@docsubname) WHEN 2 THEN @docsubname WHEN 1 THEN '0' + @docsubname ELSE 'NA' END
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count

	Set @docindex = @docindex + 1
	INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)

      	FETCH NEXT FROM curs INTO @docsubname, @docsuffix

	SET @newdocsub = 'Bill Payment Disclosure '-- + CASE LEN(@docsubname) WHEN 2 THEN @docsubname WHEN 1 THEN '0' + @docsubname ELSE 'NA' END
   END

CLOSE curs
DEALLOCATE curs

Select *  FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Delete FROM NewMemberDoc WHERE TrackingNum = @TrackingNum

--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_D59Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCCCU_D59Fields] @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

SELECT @DocIndex As DocIndex
	--, BE1.fullname AS BE1fullname, BE1.fulladdress AS BE1fulladdress, BE1.DOB AS BE1DOB, BE1.Relationship AS BE1Relationship, CASE LEN(BE1.Suffix) WHEN 2 THEN BE1.Suffix WHEN 1 THEN '0' + BE1.Suffix ELSE 'NA' END AS BE1Suffix
	--, BE2.fullname AS BE2fullname, BE2.fulladdress AS BE2fulladdress, BE2.DOB AS BE2DOB, BE2.Relationship AS BE2Relationship, CASE LEN(BE2.Suffix) WHEN 2 THEN BE2.Suffix WHEN 1 THEN '0' + BE2.Suffix ELSE 'NA' END AS BE2Suffix
	--, BE3.fullname AS BE3fullname, BE3.fulladdress AS BE3fulladdress, BE3.DOB AS BE3DOB, BE3.Relationship AS BE3Relationship, CASE LEN(BE3.Suffix) WHEN 2 THEN BE3.Suffix WHEN 1 THEN '0' + BE3.Suffix ELSE 'NA' END AS BE3Suffix
FROM NewMemberRequest As NMR
	--INNER JOIN udt_AccountTypes AS AType On NMR.AccountType = AType.TypeCode
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
	--LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'PD', '') AS BE1 ON NMR.TrackingNum = BE1.TrackingNum AND BE1.JointSequence = 1
	--LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'PD', '') AS BE2 ON NMR.TrackingNum = BE2.TrackingNum AND BE2.JointSequence = 2
	--LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'PD', '') AS BE3 ON NMR.TrackingNum = BE3.TrackingNum AND BE3.JointSequence = 3
WHERE NMR.TrackingNum = @TrackingNum


Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_D5Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCCCU_D5Enable] @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
--Declare @TrackingNum int
--DROP TABLE #docs
--DEALLOCATE curs
--Set @TrackingNum = 1477
Declare @docsubname char(100)
Declare @newdocsub char(100)
Declare @count int
Declare @docindex int
--CREATE TABLE #docs(docindex int identity Primary Key, docsubname char(100))
Declare curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT '' AS docsubname
	FROM NewMemberRequest AS NMR
	WHERE NMR.TrackingNum = @TrackingNum AND NMR.Processed = 999 AND NMR.Created = 'Y' AND NMR.AccountType IN ('MU')
--IF @@ROWCOUNT = 0
OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @newdocsub = 'MUTM Account Card ' + @docsubname
IF @docsubname Is Null
BEGIN
	SET @newdocsub = 'MUTM Account Card'
END
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count
      	IF @count = 1
	BEGIN
		Set @docindex = @docindex + 1
     		 INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END
      	FETCH NEXT FROM curs INTO @docsubname
	PRINT @docsubname
	IF @@FETCH_STATUS = 0
	BEGIN
		SET @newdocsub = (RTRIM(@newdocsub) + ', ' + RTRIM(@docsubname))
		PRINT @newdocsub
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex
	END
   END
CLOSE curs
DEALLOCATE curs
Select *  FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Delete FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_D5Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCCCU_D5Fields] @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
Declare @joseq int
Declare @jo1seq int
Declare @jo2seq int
Declare @jo3seq int
Declare @jo4seq int
Declare @count int
--Set @jo1seq = 1
--Set @jo2seq = 1
--Set @jo3seq = 1
--Set @jo4seq = 1
--CREATE TABLE #docs(id int identity Primary Key, docindex int, j1FullName char(100), j1FullAddress char(100), j1FullPhone char(12), j1DOB char(10), j1SSN char(11), j1ID char(20), j1IDIssueDate  char(10), j1IDExpDate  char(10), j1IDState  char(2), j2FullName char(100), j2FullAddress char(100), j2FullPhone char(11), j2DOB char(10), j2SSN char(11), j2ID char(20), j2IDIssueDate  char(10), j2IDExpDate  char(10), j2IDState  char(2), j3FullName char(100), j3FullAddress char(100), j3FullPhone char(11), j3DOB char(10), j3SSN char(11), j3ID char(20), j3IDIssueDate  char(10), j3IDExpDate  char(10), j3IDState  char(2), j4FullName char(100), j4FullAddress char(100), j4FullPhone char(11), j4DOB char(10), j4SSN char(11), j4ID char(20), j4IDIssueDate  char(10), j4IDExpDate  char(10), j4IDState  char(2))
Declare curs2 CURSOR FOR
	SELECT  CONVERT(int, JO.Sequence)
	from NewMemberJointOwner As JO
	INNER JOIN NewMemberJointLink AS JL ON JO.Sequence = JL.JointSequence AND JL.TrackingNum = @TrackingNum
	INNER JOIN NewMemberSubAccount AS SA ON JL.SubAccountSequence = SA.Sequence AND SA.TrackingNum = @TrackingNum
	WHERE JO.TrackingNum = @TrackingNum AND (JO.JointOwnerType IN ('JC', 'SC', 'TF')) AND SA.ProductType IN ('PSA', 'RSA', 'SDA', 'CC')
	GROUP BY CONVERT(int, JO.Sequence)
--IF @@ROWCOUNT = 0
OPEN curs2
FETCH NEXT FROM curs2 INTO @joseq
SET @count = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
      	IF (@count = 0 AND @DocIndex = 1) OR (@count = 4 AND @DocIndex = 2) OR (@count = 8 AND @DocIndex = 3)
		BEGIN
			Set @jo1seq = @joseq
		END
	IF (@count = 1 AND @DocIndex = 1) OR (@count = 5 AND @DocIndex = 2) OR (@count = 9 AND @DocIndex = 3)
		BEGIN
			Set @jo2seq = @joseq		
		END
	IF (@count = 2 AND @DocIndex = 1) OR (@count = 6 AND @DocIndex = 2) OR (@count = 10 AND @DocIndex = 3)
		BEGIN
			Set @jo3seq = @joseq		
		END
	IF (@count = 3 AND @DocIndex = 1) OR (@count = 7 AND @DocIndex = 2) OR (@count = 11 AND @DocIndex = 3)
		BEGIN
			Set @jo4seq = @joseq		
		END
      	FETCH NEXT FROM curs2 INTO @joseq
	SET @count = @count + 1
	PRINT @count
   END
CLOSE curs2
DEALLOCATE curs2
SELECT @DocIndex As DocIndex
	, RTRIM(JOTF.FullName) AS TF1FullName
	, RTRIM(JOJC.FullName) AS JC1FullName
	, RTRIM(JOJC.FName) AS JC1FName
	, RTRIM(JOJC.MInitial) AS JC1MInitial
	, RTRIM(JOJC.LName) AS JC1LName
	, RTRIM(JOJC.Address) AS JC1Address
	, RTRIM(JOJC.City) AS JC1City
	, RTRIM(JOJC.State) AS JC1State
	, RTRIM(JOJC.Zip) AS JC1Zip
	, JOJC.PhoneAC AS JC1AC
	, LEFT(JOJC.Phone, 3) + '-' + RIGHT(RTRIM(JOJC.Phone), 4) AS JC1Phone
	, JOJC.WPhoneAC AS JC1WorkAC
	, LEFT(JOJC.WPhone, 3) + '-' + RIGHT(RTRIM(JOJC.WPhone), 4) AS JC1WorkPhone
	, JOJC.DOB AS JC1DOB
	, JOJC.DriversLicenseNum AS JC1DriversLicenseNum
	, LEFT(JOJC.SSN, 3) + '-' + LEFT(RIGHT(JOJC.SSN, 6), 2) + '-' + RIGHT(JOJC.SSN, 4) AS JC1SSN
	, RTRIM(JOSC.FullName) AS SC1FullName
	, RTRIM(JOSC.FName) AS SC1FName
	, RTRIM(JOSC.MInitial) AS SC1MInitial
	, RTRIM(JOSC.LName) AS SC1LName
	, RTRIM(JOSC.Address) AS SC1Address
	, RTRIM(JOSC.City) AS SC1City
	, RTRIM(JOSC.State) AS SC1State
	, RTRIM(JOSC.Zip) AS SC1Zip
	, JOSC.PhoneAC AS SC1AC
	, LEFT(JOSC.Phone, 3) + '-' + RIGHT(RTRIM(JOSC.Phone), 4) AS SC1Phone
	, JOSC.WPhoneAC AS SC1WorkAC
	, LEFT(JOSC.WPhone, 3) + '-' + RIGHT(RTRIM(JOSC.WPhone), 4) AS SC1WorkPhone
	, JOSC.DOB AS SC1DOB
	, JOSC.DriversLicenseNum AS SC1DriversLicenseNum
	, LEFT(JOSC.SSN, 3) + '-' + LEFT(RIGHT(JOSC.SSN, 6), 2) + '-' + RIGHT(JOSC.SSN, 4) AS SC1SSN
	, CASE WHEN NMR.Qualification3 = 'Employer' THEN 'X' END AS EligEmployerYes
	, CASE WHEN NMR.Qualification3 = 'Location' THEN 'X' END AS EligLivesYes
	, CASE WHEN NMR.Qualification3 = 'Location' THEN 'X' END AS EligWorksYes
	, NMR.Qualification1 AS Relative
	, NMR.Qualification2 AS Relationship
	, NMR.Seller AS TellerInitials
	, CASE NMR.Qualification3
		WHEN 'Location' THEN 'Lives, Works Or Worships in: ' + RTRIM(NMR.Department)
		WHEN 'Employer' THEN 'SEG Employer: ' + RTRIM(NMR.Department)
	  END AS LivesWorksWorships
FROM NewMemberRequest AS NMR
	LEFT OUTER JOIN NewMemberHome AS Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork AS Work On NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'JC', '', '') AS JOJC ON NMR.TrackingNum = JOJC.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'SC', '', '') AS JOSC ON NMR.TrackingNum = JOSC.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'TF', '', '') AS JOTF ON NMR.TrackingNum = JOTF.TrackingNum
WHERE NMR.TrackingNum = @TrackingNum
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_D60Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCCCU_D60Enable] @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
--Declare @TrackingNum int
--DROP TABLE #docs
--DEALLOCATE curs
--Set @TrackingNum = 1477
Declare @docsubname char(100)
Declare @newdocsub char(100)
Declare @count int
Declare @docindex int
--CREATE TABLE #docs(docindex int identity Primary Key, docsubname char(100))
Declare curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT '' AS docsubname
	FROM NewMemberRequest AS NMR LEFT JOIN NewMemberFlag AS FLAG ON FLAG.TrackingNum = NMR.TrackingNum
	WHERE NMR.TrackingNum = @TrackingNum AND NMR.Processed = 999 AND NMR.Created = 'Y' AND FLAG.FlagNumber = 3 AND FLAG.FlagValue = 1 AND '' = 'REMOVED per John Knutson 3/2/2018'
--IF @@ROWCOUNT = 0
OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @newdocsub = 'Courtesy Pay Opt-In ' + @docsubname
IF @docsubname Is Null
BEGIN
	SET @newdocsub = 'Courtesy Pay Opt-In'
END
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count

	IF @count = 1
	BEGIN
		Set @docindex = @docindex + 1
		INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
		SET @newdocsub = 'Courtesy Pay Opt-In - Copy'
		Set @docindex = @docindex + 1
		INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END

	FETCH NEXT FROM curs INTO @docsubname
	PRINT @docsubname

	IF @@FETCH_STATUS = 0
	BEGIN
		SET @newdocsub = (RTRIM(@newdocsub) + ', ' + RTRIM(@docsubname))
		PRINT @newdocsub
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex
	END
END
CLOSE curs
DEALLOCATE curs
Select *  FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Delete FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_D60Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCCCU_D60Fields] @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

SELECT @DocIndex As DocIndex
	--, BE1.fullname AS BE1fullname, BE1.fulladdress AS BE1fulladdress, BE1.DOB AS BE1DOB, BE1.Relationship AS BE1Relationship, CASE LEN(BE1.Suffix) WHEN 2 THEN BE1.Suffix WHEN 1 THEN '0' + BE1.Suffix ELSE 'NA' END AS BE1Suffix
	--, BE2.fullname AS BE2fullname, BE2.fulladdress AS BE2fulladdress, BE2.DOB AS BE2DOB, BE2.Relationship AS BE2Relationship, CASE LEN(BE2.Suffix) WHEN 2 THEN BE2.Suffix WHEN 1 THEN '0' + BE2.Suffix ELSE 'NA' END AS BE2Suffix
	--, BE3.fullname AS BE3fullname, BE3.fulladdress AS BE3fulladdress, BE3.DOB AS BE3DOB, BE3.Relationship AS BE3Relationship, CASE LEN(BE3.Suffix) WHEN 2 THEN BE3.Suffix WHEN 1 THEN '0' + BE3.Suffix ELSE 'NA' END AS BE3Suffix
FROM NewMemberRequest As NMR
	--INNER JOIN udt_AccountTypes AS AType On NMR.AccountType = AType.TypeCode
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
	--LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'PD', '') AS BE1 ON NMR.TrackingNum = BE1.TrackingNum AND BE1.JointSequence = 1
	--LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'PD', '') AS BE2 ON NMR.TrackingNum = BE2.TrackingNum AND BE2.JointSequence = 2
	--LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'PD', '') AS BE3 ON NMR.TrackingNum = BE3.TrackingNum AND BE3.JointSequence = 3
WHERE NMR.TrackingNum = @TrackingNum


Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_D6Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCCCU_D6Enable] @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
--Declare @TrackingNum int
--DROP TABLE #docs
--DEALLOCATE curs
--Set @TrackingNum = 1477
Declare @docsubname char(100)
Declare @newdocsub char(100)
Declare @count int
Declare @docindex int
--CREATE TABLE #docs(docindex int identity Primary Key, docsubname char(100))
Declare curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT '' AS docsubname
	FROM NewMemberRequest AS NMR
	WHERE NMR.TrackingNum = @TrackingNum AND NMR.Processed = 999 AND NMR.Created = 'Y' AND NMR.AccountType IN ('TR')
--IF @@ROWCOUNT = 0
OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @newdocsub = 'Trust Account Card ' + @docsubname
IF @docsubname Is Null
BEGIN
	SET @newdocsub = 'Trust Account Card'
END
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count
      	IF @count = 1
	BEGIN
		Set @docindex = @docindex + 1
     		 INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END
      	FETCH NEXT FROM curs INTO @docsubname
	PRINT @docsubname
	IF @@FETCH_STATUS = 0
	BEGIN
		SET @newdocsub = (RTRIM(@newdocsub) + ', ' + RTRIM(@docsubname))
		PRINT @newdocsub
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex
	END
   END
CLOSE curs
DEALLOCATE curs
Select *  FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Delete FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_D6Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCCCU_D6Fields] @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
Declare @joseq int
Declare @jo1seq int
Declare @jo2seq int
Declare @jo3seq int
Declare @jo4seq int
Declare @count int
--Set @jo1seq = 1
--Set @jo2seq = 1
--Set @jo3seq = 1
--Set @jo4seq = 1
--CREATE TABLE #docs(id int identity Primary Key, docindex int, j1FullName char(100), j1FullAddress char(100), j1FullPhone char(12), j1DOB char(10), j1SSN char(11), j1ID char(20), j1IDIssueDate  char(10), j1IDExpDate  char(10), j1IDState  char(2), j2FullName char(100), j2FullAddress char(100), j2FullPhone char(11), j2DOB char(10), j2SSN char(11), j2ID char(20), j2IDIssueDate  char(10), j2IDExpDate  char(10), j2IDState  char(2), j3FullName char(100), j3FullAddress char(100), j3FullPhone char(11), j3DOB char(10), j3SSN char(11), j3ID char(20), j3IDIssueDate  char(10), j3IDExpDate  char(10), j3IDState  char(2), j4FullName char(100), j4FullAddress char(100), j4FullPhone char(11), j4DOB char(10), j4SSN char(11), j4ID char(20), j4IDIssueDate  char(10), j4IDExpDate  char(10), j4IDState  char(2))
Declare curs2 CURSOR FOR
	SELECT  CONVERT(int, JO.Sequence)
	from NewMemberJointOwner As JO
	INNER JOIN NewMemberJointLink AS JL ON JO.Sequence = JL.JointSequence AND JL.TrackingNum = @TrackingNum
	INNER JOIN NewMemberSubAccount AS SA ON JL.SubAccountSequence = SA.Sequence AND SA.TrackingNum = @TrackingNum
	WHERE JO.TrackingNum = @TrackingNum AND (JO.JointOwnerType IN ('JT', 'JE')) AND SA.ProductType IN ('PSA', 'RSA', 'SDA', 'CC')
	GROUP BY CONVERT(int, JO.Sequence)
--IF @@ROWCOUNT = 0
OPEN curs2
FETCH NEXT FROM curs2 INTO @joseq
SET @count = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
      	IF (@count = 0 AND @DocIndex = 1) OR (@count = 4 AND @DocIndex = 2) OR (@count = 8 AND @DocIndex = 3)
		BEGIN
			Set @jo1seq = @joseq
		END
	IF (@count = 1 AND @DocIndex = 1) OR (@count = 5 AND @DocIndex = 2) OR (@count = 9 AND @DocIndex = 3)
		BEGIN
			Set @jo2seq = @joseq		
		END
	IF (@count = 2 AND @DocIndex = 1) OR (@count = 6 AND @DocIndex = 2) OR (@count = 10 AND @DocIndex = 3)
		BEGIN
			Set @jo3seq = @joseq		
		END
	IF (@count = 3 AND @DocIndex = 1) OR (@count = 7 AND @DocIndex = 2) OR (@count = 11 AND @DocIndex = 3)
		BEGIN
			Set @jo4seq = @joseq		
		END
      	FETCH NEXT FROM curs2 INTO @joseq
	SET @count = @count + 1
	PRINT @count
   END
CLOSE curs2
DEALLOCATE curs2
SELECT @DocIndex As DocIndex
	, RTRIM(NMR.DriversLicenseNum) AS DriversLicenseNum
	, NMR.DriversLicenseState
	, CONVERT(char(10), NMR.IDExpirationDate, 101) AS DLExpirationDate
	, RTRIM(NMR.DriversLicenseNum) + '/' + NMR.DriversLicenseState AS DL
	, CASE NMR.IDType WHEN 'D' THEN 'Drivers License' ELSE NMR.IDSource END AS IDType
	, CASE NMR.IDType WHEN 'D' THEN NMR.DriversLicenseNum ELSE NMR.IDNumber END AS ID
	, NMR.IDNumber
	, CONVERT(char(10), NMR.IDIssueDate, 101) AS IDIssueDate
	, CONVERT(char(10), NMR.IDExpirationDate, 101) AS IDExpDate
	, CONVERT(char(10), NMR.IDExpirationDate, 101) AS IDExpirationDate
	, RTRIM(JOJT1.LName) AS JT1LName
	, RTRIM(JOJE1.FName) AS JE1FName
	, RTRIM(JOJE1.MInitial) AS JE1MInitial
	, RTRIM(JOJE1.LName) AS JE1LName
	, RTRIM(JOJE1.Address) AS JE1Address
	, RTRIM(JOJE1.City) AS JE1City
	, RTRIM(JOJE1.State) AS JE1State
	, RTRIM(JOJE1.Zip) AS JE1Zip
	, JOJE1.DriversLicenseNum AS JE1DriversLicenseNum
	, LEFT(JOJE1.SSN, 3) + '-' + LEFT(RIGHT(JOJE1.SSN, 6), 2) + '-' + RIGHT(JOJE1.SSN, 4) AS JE1SSN
	, JOJE1.PhoneAC AS JE1AC
	, LEFT(JOJE1.Phone, 3) + '-' + RIGHT(RTRIM(JOJE1.Phone), 4) AS JE1Phone
	, JOJE1.WPhoneAC AS JE1WorkAC
	, LEFT(JOJE1.WPhone, 3) + '-' + RIGHT(RTRIM(JOJE1.WPhone), 4) AS JE1WorkPhone
	, JOJE1.DOB AS JE1DOB
	, RTRIM(JOJE2.FName) AS JE2FName
	, RTRIM(JOJE2.MInitial) AS JE2MInitial
	, RTRIM(JOJE2.LName) AS JE2LName
	, RTRIM(JOJE2.Address) AS JE2Address
	, RTRIM(JOJE2.City) AS JE2City
	, RTRIM(JOJE2.State) AS JE2State
	, RTRIM(JOJE2.Zip) AS JE2Zip
	, JOJE2.DriversLicenseNum AS JE2DriversLicenseNum
	, LEFT(JOJE2.SSN, 3) + '-' + LEFT(RIGHT(JOJE2.SSN, 6), 2) + '-' + RIGHT(JOJE2.SSN, 4) AS JE2SSN
	, JOJE2.PhoneAC AS JE2AC
	, LEFT(JOJE2.Phone, 3) + '-' + RIGHT(RTRIM(JOJE2.Phone), 4) AS JE2Phone
	, JOJE2.WPhoneAC AS JE2WorkAC
	, LEFT(JOJE2.WPhone, 3) + '-' + RIGHT(RTRIM(JOJE2.WPhone), 4) AS JE2WorkPhone
	, JOJE2.DOB AS JE2DOB
	, RTRIM(JOJE3.FName) AS JE3FName
	, RTRIM(JOJE3.MInitial) AS JE3MInitial
	, RTRIM(JOJE3.LName) AS JE3LName
	, RTRIM(JOJE3.Address) AS JE3Address
	, RTRIM(JOJE3.City) AS JE3City
	, RTRIM(JOJE3.State) AS JE3State
	, RTRIM(JOJE3.Zip) AS JE3Zip
	, JOJE3.DriversLicenseNum AS JE3DriversLicenseNum
	, LEFT(JOJE3.SSN, 3) + '-' + LEFT(RIGHT(JOJE3.SSN, 6), 2) + '-' + RIGHT(JOJE3.SSN, 4) AS JE3SSN
	, JOJE3.PhoneAC AS JE3AC
	, LEFT(JOJE3.Phone, 3) + '-' + RIGHT(RTRIM(JOJE3.Phone), 4) AS JE3Phone
	, JOJE3.WPhoneAC AS JE3WorkAC
	, LEFT(JOJE3.WPhone, 3) + '-' + RIGHT(RTRIM(JOJE3.WPhone), 4) AS JE3WorkPhone
	, JOJE3.DOB AS JE3DOB
	, CASE WHEN SASDA.Sequence != '' THEN 'X' ELSE '' END AS CheckingYes
	, CASE WHEN SASDA.Sequence != '' THEN '' ELSE 'X' END AS CheckingNo
	, CASE WHEN LOWER(LEFT(Q1.Response, 1)) = 'y' THEN 'X' END AS YesQuestion1
	, CASE WHEN LOWER(LEFT(Q1.Response, 1)) != 'y' THEN 'X' END AS NoQuestion1
	, CASE WHEN LOWER(LEFT(Q1.Response, 1)) = 'y' THEN RTRIM(Q2.Response) END AS Question2
	, CASE WHEN LOWER(LEFT(Q3.Response, 1)) = 'y' THEN 'X' END AS YesQuestion3
	, CASE WHEN LOWER(LEFT(Q3.Response, 1)) != 'y' THEN 'X' END AS NoQuestion3
	, CASE WHEN LOWER(LEFT(Q4.Response, 1)) = 'y' THEN 'X' END AS YesQuestion4
	, CASE WHEN LOWER(LEFT(Q4.Response, 1)) != 'y' THEN 'X' END AS NoQuestion4
	,	SAODP1.Description + 
		CASE WHEN SAODP2.Description != '' THEN CHAR(13) + CHAR(10) + SAODP2.Description ELSE '' END + 
		CASE WHEN SAODP3.Description != '' THEN CHAR(13) + CHAR(10) + SAODP3.Description ELSE '' END +
		CASE WHEN SAODP4.Description != '' THEN CHAR(13) + CHAR(10) + SAODP4.Description ELSE '' END +
		CASE WHEN SAODP5.Description != '' THEN CHAR(13) + CHAR(10) + SAODP5.Description ELSE '' END +
		CASE WHEN SAODP6.Description != '' THEN CHAR(13) + CHAR(10) + SAODP6.Description ELSE '' END
		AS OverDraft
	, CASE WHEN NMR.Qualification3 = 'Employer' THEN 'X' END AS EligEmployerYes
	, CASE WHEN NMR.Qualification3 = 'Location' THEN 'X' END AS EligLivesYes
	, CASE WHEN NMR.Qualification3 = 'Location' THEN 'X' END AS EligWorksYes
	, NMR.Qualification1 AS Relative
	, NMR.Qualification2 AS Relationship
	, NMR.Seller AS TellerInitials
	, CASE NMR.Qualification3
		WHEN 'Location' THEN 'Lives, Works Or Worships in: ' + RTRIM(NMR.Department)
		WHEN 'Employer' THEN 'SEG Employer: ' + RTRIM(NMR.Department)
	  END AS LivesWorksWorships
FROM NewMemberRequest AS NMR
	LEFT OUTER JOIN NewMemberHome AS Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork AS Work On NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'JT', '', '') AS JOJT1 ON NMR.TrackingNum = JOJT1.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'JE', '', '') AS JOJE1 ON NMR.TrackingNum = JOJE1.TrackingNum AND JOJE1.JointSequence = 1
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'JE', '', '') AS JOJE2 ON NMR.TrackingNum = JOJE2.TrackingNum AND JOJE2.JointSequence = 2
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'JE', '', '') AS JOJE3 ON NMR.TrackingNum = JOJE3.TrackingNum AND JOJE3.JointSequence = 3
	LEFT OUTER JOIN fnCCCU_GetSA(@TrackingNum, 'SDA', 'S') AS SASDA ON NMR.TrackingNum = SASDA.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetQuestion(@TrackingNum, '1') AS Q1 ON NMR.TrackingNum = Q1.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetQuestion(@TrackingNum, '2') AS Q2 ON NMR.TrackingNum = Q2.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetQuestion(@TrackingNum, '3') AS Q3 ON NMR.TrackingNum = Q3.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetQuestion(@TrackingNum, '4') AS Q4 ON NMR.TrackingNum = Q4.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetSAODP(@TrackingNum, '1') AS SAODP1 ON NMR.TrackingNum = SAODP1.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetSAODP(@TrackingNum, '2') AS SAODP2 ON NMR.TrackingNum = SAODP2.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetSAODP(@TrackingNum, '3') AS SAODP3 ON NMR.TrackingNum = SAODP3.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetSAODP(@TrackingNum, '4') AS SAODP4 ON NMR.TrackingNum = SAODP4.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetSAODP(@TrackingNum, '5') AS SAODP5 ON NMR.TrackingNum = SAODP5.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetSAODP(@TrackingNum, '6') AS SAODP6 ON NMR.TrackingNum = SAODP6.TrackingNum
WHERE NMR.TrackingNum = @TrackingNum
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_D70Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCCCU_D70Enable] @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
--Declare @TrackingNum int
--DROP TABLE #docs
--DEALLOCATE curs
--Set @TrackingNum = 1477

Declare @docsubname char(100)
Declare @newdocsub char(200)
Declare @count int
Declare @docindex int


--CREATE TABLE #docs(docindex int identity Primary Key, docsubname char(100))

Declare curs CURSOR FOR
	SELECT '' AS docsubname
	FROM NewMemberRequest As NMR INNER JOIN NewMemberShoppingCart AS CART ON NMR.TrackingNum = CART.TrackingNum
	WHERE NMR.TrackingNum = @TrackingNum AND CART.ProductID IN ('ATLIS', 'PCFIRST') AND CART.Created = 'Y' AND Cart.YesNoMaybe = 'YES' AND '' = 'REMOVED per John Knutson 3/2/2018'

--IF @@ROWCOUNT = 0

OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @newdocsub = 'ATLIS and PC FIRST instruction guide '
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count

   	IF @count = 1
	BEGIN
		Set @docindex = @docindex + 1
		INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END

	FETCH NEXT FROM curs INTO @docsubname

	SET @newdocsub = 'ATLIS and PC FIRST instruction guide '
   END

CLOSE curs
DEALLOCATE curs

Select *  FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Delete FROM NewMemberDoc WHERE TrackingNum = @TrackingNum

--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_D70Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCCCU_D70Fields] @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

SELECT @DocIndex As DocIndex
	--, BE1.fullname AS BE1fullname, BE1.fulladdress AS BE1fulladdress, BE1.DOB AS BE1DOB, BE1.Relationship AS BE1Relationship, CASE LEN(BE1.Suffix) WHEN 2 THEN BE1.Suffix WHEN 1 THEN '0' + BE1.Suffix ELSE 'NA' END AS BE1Suffix
	--, BE2.fullname AS BE2fullname, BE2.fulladdress AS BE2fulladdress, BE2.DOB AS BE2DOB, BE2.Relationship AS BE2Relationship, CASE LEN(BE2.Suffix) WHEN 2 THEN BE2.Suffix WHEN 1 THEN '0' + BE2.Suffix ELSE 'NA' END AS BE2Suffix
	--, BE3.fullname AS BE3fullname, BE3.fulladdress AS BE3fulladdress, BE3.DOB AS BE3DOB, BE3.Relationship AS BE3Relationship, CASE LEN(BE3.Suffix) WHEN 2 THEN BE3.Suffix WHEN 1 THEN '0' + BE3.Suffix ELSE 'NA' END AS BE3Suffix
FROM NewMemberRequest As NMR
	--INNER JOIN udt_AccountTypes AS AType On NMR.AccountType = AType.TypeCode
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
	--LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'PD', '') AS BE1 ON NMR.TrackingNum = BE1.TrackingNum AND BE1.JointSequence = 1
	--LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'PD', '') AS BE2 ON NMR.TrackingNum = BE2.TrackingNum AND BE2.JointSequence = 2
	--LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'PD', '') AS BE3 ON NMR.TrackingNum = BE3.TrackingNum AND BE3.JointSequence = 3
WHERE NMR.TrackingNum = @TrackingNum


Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_D7Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCCCU_D7Enable] @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
--Declare @TrackingNum int
--DROP TABLE #docs
--DEALLOCATE curs
--Set @TrackingNum = 1477
Declare @docsubname char(100)
Declare @newdocsub char(100)
Declare @count int
Declare @docindex int
--CREATE TABLE #docs(docindex int identity Primary Key, docsubname char(100))
Declare curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT '' AS docsubname
	FROM NewMemberRequest AS NMR
	WHERE NMR.TrackingNum = @TrackingNum AND NMR.Processed = 999 AND NMR.Created = 'Y' AND NMR.AccountType IN ('ES')
--IF @@ROWCOUNT = 0
OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @newdocsub = 'Estate Account Card ' + @docsubname
IF @docsubname Is Null
BEGIN
	SET @newdocsub = 'Estate Account Card'
END
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count
      	IF @count = 1
	BEGIN
		Set @docindex = @docindex + 1
     		 INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END
      	FETCH NEXT FROM curs INTO @docsubname
	PRINT @docsubname
	IF @@FETCH_STATUS = 0
	BEGIN
		SET @newdocsub = (RTRIM(@newdocsub) + ', ' + RTRIM(@docsubname))
		PRINT @newdocsub
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex
	END
   END
CLOSE curs
DEALLOCATE curs
Select *  FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Delete FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_D7Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCCCU_D7Fields] @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
Declare @joseq int
Declare @jo1seq int
Declare @jo2seq int
Declare @jo3seq int
Declare @jo4seq int
Declare @count int
--Set @jo1seq = 1
--Set @jo2seq = 1
--Set @jo3seq = 1
--Set @jo4seq = 1
--CREATE TABLE #docs(id int identity Primary Key, docindex int, j1FullName char(100), j1FullAddress char(100), j1FullPhone char(12), j1DOB char(10), j1SSN char(11), j1ID char(20), j1IDIssueDate  char(10), j1IDExpDate  char(10), j1IDState  char(2), j2FullName char(100), j2FullAddress char(100), j2FullPhone char(11), j2DOB char(10), j2SSN char(11), j2ID char(20), j2IDIssueDate  char(10), j2IDExpDate  char(10), j2IDState  char(2), j3FullName char(100), j3FullAddress char(100), j3FullPhone char(11), j3DOB char(10), j3SSN char(11), j3ID char(20), j3IDIssueDate  char(10), j3IDExpDate  char(10), j3IDState  char(2), j4FullName char(100), j4FullAddress char(100), j4FullPhone char(11), j4DOB char(10), j4SSN char(11), j4ID char(20), j4IDIssueDate  char(10), j4IDExpDate  char(10), j4IDState  char(2))
Declare curs2 CURSOR FOR
	SELECT  CONVERT(int, JO.Sequence)
	from NewMemberJointOwner As JO
	INNER JOIN NewMemberJointLink AS JL ON JO.Sequence = JL.JointSequence AND JL.TrackingNum = @TrackingNum
	INNER JOIN NewMemberSubAccount AS SA ON JL.SubAccountSequence = SA.Sequence AND SA.TrackingNum = @TrackingNum
	WHERE JO.TrackingNum = @TrackingNum AND (JO.JointOwnerType IN ('EX')) AND SA.ProductType IN ('PSA', 'RSA', 'SDA', 'CC')
	GROUP BY CONVERT(int, JO.Sequence)
--IF @@ROWCOUNT = 0
OPEN curs2
FETCH NEXT FROM curs2 INTO @joseq
SET @count = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
      	IF (@count = 0 AND @DocIndex = 1) OR (@count = 4 AND @DocIndex = 2) OR (@count = 8 AND @DocIndex = 3)
		BEGIN
			Set @jo1seq = @joseq
		END
	IF (@count = 1 AND @DocIndex = 1) OR (@count = 5 AND @DocIndex = 2) OR (@count = 9 AND @DocIndex = 3)
		BEGIN
			Set @jo2seq = @joseq		
		END
	IF (@count = 2 AND @DocIndex = 1) OR (@count = 6 AND @DocIndex = 2) OR (@count = 10 AND @DocIndex = 3)
		BEGIN
			Set @jo3seq = @joseq		
		END
	IF (@count = 3 AND @DocIndex = 1) OR (@count = 7 AND @DocIndex = 2) OR (@count = 11 AND @DocIndex = 3)
		BEGIN
			Set @jo4seq = @joseq		
		END
      	FETCH NEXT FROM curs2 INTO @joseq
	SET @count = @count + 1
	PRINT @count
   END
CLOSE curs2
DEALLOCATE curs2
SELECT @DocIndex As DocIndex
	, RTRIM(NMR.OrganizationName) AS LName
	, RTRIM(JOEX1.FName) AS EX1FName
	, RTRIM(JOEX1.MInitial) AS EX1MInitial
	, RTRIM(JOEX1.LName) AS EX1LName
	, RTRIM(JOEX1.Address) AS EX1Address
	, RTRIM(JOEX1.City) AS EX1City
	, RTRIM(JOEX1.State) AS EX1State
	, RTRIM(JOEX1.Zip) AS EX1Zip
	, JOEX1.PhoneAC AS EX1AC
	, LEFT(JOEX1.Phone, 3) + '-' + RIGHT(RTRIM(JOEX1.Phone), 4) AS EX1Phone
	, JOEX1.WPhoneAC AS EX1WorkAC
	, LEFT(JOEX1.WPhone, 3) + '-' + RIGHT(RTRIM(JOEX1.WPhone), 4) AS EX1WorkPhone
	, JOEX1.DriversLicenseNum AS EX1DriversLicenseNum
	, LEFT(JOEX1.SSN, 3) + '-' + LEFT(RIGHT(JOEX1.SSN, 6), 2) + '-' + RIGHT(JOEX1.SSN, 4) AS EX1SSN
	, JOEX1.DOB AS EX1DOB
	, RTRIM(JOEX2.FName) AS EX2FName
	, RTRIM(JOEX2.MInitial) AS EX2MInitial
	, RTRIM(JOEX2.LName) AS EX2LName
	, RTRIM(JOEX2.Address) AS EX2Address
	, RTRIM(JOEX2.City) AS EX2City
	, RTRIM(JOEX2.State) AS EX2State
	, RTRIM(JOEX2.Zip) AS EX2Zip
	, JOEX2.PhoneAC AS EX2AC
	, LEFT(JOEX2.Phone, 3) + '-' + RIGHT(RTRIM(JOEX2.Phone), 4) AS EX2Phone
	, JOEX2.WPhoneAC AS EX2WorkAC
	, LEFT(JOEX2.WPhone, 3) + '-' + RIGHT(RTRIM(JOEX2.WPhone), 4) AS EX2WorkPhone
	, JOEX2.DriversLicenseNum AS EX2DriversLicenseNum
	, LEFT(JOEX2.SSN, 3) + '-' + LEFT(RIGHT(JOEX2.SSN, 6), 2) + '-' + RIGHT(JOEX2.SSN, 4) AS EX2SSN
	, JOEX2.DOB AS EX2DOB
	, CASE WHEN NMR.SSN != '' THEN 'X' END AS YesSSN
	, LEFT(NMR.SSN, 2) + '-' + RIGHT(NMR.SSN, 7) AS SSN
	, 'X' AS BackWith
	, CASE WHEN SASDA.Sequence != '' THEN 'X' ELSE '' END AS CheckingYes
	, CASE WHEN SASDA.Sequence != '' THEN '' ELSE 'X' END AS CheckingNo
	, CASE WHEN LOWER(LEFT(Q1.Response, 1)) = 'y' THEN 'X' END AS YesQuestion1
	, CASE WHEN LOWER(LEFT(Q1.Response, 1)) != 'y' THEN 'X' END AS NoQuestion1
	, CASE WHEN LOWER(LEFT(Q1.Response, 1)) = 'y' THEN RTRIM(Q2.Response) END AS Question2
	, CASE WHEN LOWER(LEFT(Q3.Response, 1)) = 'y' THEN 'X' END AS YesQuestion3
	, CASE WHEN LOWER(LEFT(Q3.Response, 1)) != 'y' THEN 'X' END AS NoQuestion3
	, CASE WHEN LOWER(LEFT(Q4.Response, 1)) = 'y' THEN 'X' END AS YesQuestion4
	, CASE WHEN LOWER(LEFT(Q4.Response, 1)) != 'y' THEN 'X' END AS NoQuestion4
	,	SAODP1.Description + 
		CASE WHEN SAODP2.Description != '' THEN CHAR(13) + CHAR(10) + SAODP2.Description ELSE '' END + 
		CASE WHEN SAODP3.Description != '' THEN CHAR(13) + CHAR(10) + SAODP3.Description ELSE '' END +
		CASE WHEN SAODP4.Description != '' THEN CHAR(13) + CHAR(10) + SAODP4.Description ELSE '' END +
		CASE WHEN SAODP5.Description != '' THEN CHAR(13) + CHAR(10) + SAODP5.Description ELSE '' END +
		CASE WHEN SAODP6.Description != '' THEN CHAR(13) + CHAR(10) + SAODP6.Description ELSE '' END
		AS OverDraft
	, CASE WHEN NMR.Qualification3 = 'Employer' THEN 'X' END AS EligEmployerYes
	, CASE WHEN NMR.Qualification3 = 'Location' THEN 'X' END AS EligLivesYes
	, CASE WHEN NMR.Qualification3 = 'Location' THEN 'X' END AS EligWorksYes
	, NMR.Qualification1 AS Relative
	, NMR.Qualification2 AS Relationship
	, NMR.Seller AS TellerInitials
	, CASE NMR.Qualification3
		WHEN 'Location' THEN 'Lives, Works Or Worships in: ' + RTRIM(NMR.Department)
		WHEN 'Employer' THEN 'SEG Employer: ' + RTRIM(NMR.Department)
	  END AS LivesWorksWorships
FROM NewMemberRequest AS NMR
	LEFT OUTER JOIN NewMemberHome AS Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork AS Work On NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'EX', '', '') AS JOEX1 ON NMR.TrackingNum = JOEX1.TrackingNum AND JOEX1.JointSequence = 1
	LEFT OUTER JOIN fnCCCU_GetJOType(@TrackingNum, 'EX', '', '') AS JOEX2 ON NMR.TrackingNum = JOEX2.TrackingNum AND JOEX2.JointSequence = 2
	LEFT OUTER JOIN fnCCCU_GetSA(@TrackingNum, 'SDA', 'S') AS SASDA ON NMR.TrackingNum = SASDA.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetQuestion(@TrackingNum, '1') AS Q1 ON NMR.TrackingNum = Q1.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetQuestion(@TrackingNum, '2') AS Q2 ON NMR.TrackingNum = Q2.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetQuestion(@TrackingNum, '3') AS Q3 ON NMR.TrackingNum = Q3.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetQuestion(@TrackingNum, '4') AS Q4 ON NMR.TrackingNum = Q4.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetSAODP(@TrackingNum, '1') AS SAODP1 ON NMR.TrackingNum = SAODP1.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetSAODP(@TrackingNum, '2') AS SAODP2 ON NMR.TrackingNum = SAODP2.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetSAODP(@TrackingNum, '3') AS SAODP3 ON NMR.TrackingNum = SAODP3.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetSAODP(@TrackingNum, '4') AS SAODP4 ON NMR.TrackingNum = SAODP4.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetSAODP(@TrackingNum, '5') AS SAODP5 ON NMR.TrackingNum = SAODP5.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetSAODP(@TrackingNum, '6') AS SAODP6 ON NMR.TrackingNum = SAODP6.TrackingNum
WHERE NMR.TrackingNum = @TrackingNum
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_D99Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCCCU_D99Enable] @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
--Declare @TrackingNum int
--DROP TABLE #docs
--DEALLOCATE curs
--Set @TrackingNum = 1477
Declare @docsubname char(100)
Declare @newdocsub char(100)
Declare @count int
Declare @docindex int
--CREATE TABLE #docs(docindex int identity Primary Key, docsubname char(100))
Declare curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT '' AS docsubname
	FROM NewMemberFlag
	WHERE TrackingNum = @TrackingNum AND FlagNumber = 54 AND FlagValue = 1 AND Created = 'Y' AND '' = 'REMOVED per John Knutson 3/2/2018'
--IF @@ROWCOUNT = 0
OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @newdocsub = 'eStatement Disclosure ' + @docsubname
IF @docsubname Is Null
BEGIN
	SET @newdocsub = 'eStatement Disclosure'
END
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count
      	IF @count = 1
	BEGIN
		Set @docindex = @docindex + 1
     		 INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END
      	FETCH NEXT FROM curs INTO @docsubname
	PRINT @docsubname
	IF @@FETCH_STATUS = 0
	BEGIN
		SET @newdocsub = (RTRIM(@newdocsub) + ', ' + RTRIM(@docsubname))
		PRINT @newdocsub
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex
	END
   END
CLOSE curs
DEALLOCATE curs
Select *  FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Delete FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_D99Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCCCU_D99Fields] @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

DECLARE @Output varchar(8000)
--EXEC HBDB.IMS.dbo.sp_NAOPResourceSelect 'eStatementDisclosure', @Output OUTPUT

SET @Output = Replace(Replace(Replace(@Output, '</p><p>', Char(13) + Char(10) + Char(13) + Char(10)), '<p>', ''), '</p>', '')
SET @Output = IMS.fnCCCU_WordWrap(@Output, 80)

SELECT @DocIndex AS DocIndex, @Output AS Content

Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_DG1Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCCCU_DG1Enable] @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

Return 1


GO
/****** Object:  StoredProcedure [IMS].[spCCCU_DG1Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCCCU_DG1Fields] @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

Select 'Applications' AS GroupName From NewMemberRequest where trackingnum = @TrackingNum


GO
/****** Object:  StoredProcedure [IMS].[spCCCU_DG2Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCCCU_DG2Enable] @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

Return 1


GO
/****** Object:  StoredProcedure [IMS].[spCCCU_DG2Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCCCU_DG2Fields] @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

Select 'Forms' AS GroupName From NewMemberRequest where trackingnum = @TrackingNum


GO
/****** Object:  StoredProcedure [IMS].[spCCCU_DG3Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCCCU_DG3Enable] @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

Return 1



GO
/****** Object:  StoredProcedure [IMS].[spCCCU_DG3Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCCCU_DG3Fields] @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

Select 'Disclosures' AS GroupName From NewMemberRequest where trackingnum = @TrackingNum


GO
/****** Object:  StoredProcedure [IMS].[spCCCU_DG5Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCCCU_DG5Enable] @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

Return 1


GO
/****** Object:  StoredProcedure [IMS].[spCCCU_DG5Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCCCU_DG5Fields] @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

Select 'Agreements' AS GroupName From NewMemberRequest where trackingnum = @TrackingNum


GO
/****** Object:  StoredProcedure [IMS].[spCCCU_DP1Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCCCU_DP1Enable] @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

Return 1


GO
/****** Object:  StoredProcedure [IMS].[spCCCU_DP1Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [IMS].[spCCCU_DP1Fields] @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

SELECT NMR.TrackingNum AS TrackingNumber
	, 'Tracking #: ' + RTRIM(NMR.TrackingNum) AS TrackingNum
	, AltAddress.Address1 AS MailingAddress
	, NMR.CurrBranch As Branch
	, Branches.Description AS BranchName
	, CONVERT(char(10), GetDate(), 101) As TodayDate
	, DATENAME(MM, GetDate()) + RIGHT(CONVERT(char(12), GetDate(), 107), 9) As TodayDateFull
	, CONVERT(char(10), NMR.CreatedOn, 101) As CreatedOn
	, NMR.Account As Account
	, 'Account #: ' + RTRIM(NMR.Account) As AccountNum
--	, CONVERT(char(2), Home.ResidenceYears, 101) + ' yrs  ' + CONVERT(char(2), Home.ResidenceMonths, 101) + ' mos' AS HowLong
	, RTRIM(NMR.FName) AS FName, RTRIM(NMR.LName) AS LName, RTRIM(NMR.MInitial) AS MInitial
	, CASE NMR.AccountClass WHEN 'P' THEN UPPER(RTRIM(NMR.LName) + ', ' + RTRIM(RTRIM(NMR.FName) + ' ' + RTRIM(NMR.MInitial))) ELSE RTRIM(NMR.OrganizationName) END AS RevFullName
	, CASE NMR.AccountClass WHEN 'P' THEN RTRIM(RTRIM(NMR.FName) + ' ' + RTRIM(NMR.LName) + ' ' + NMR.MECHTag) ELSE RTRIM(NMR.OrganizationName) END AS FullName
	, CASE NMR.AccountClass WHEN 'P' THEN 'Dear ' + RTRIM(RTRIM(NMR.FName) + ' ' + RTRIM(NMR.LName) + ' ' + NMR.MECHTag) + ':' ELSE 'Dear ' + RTRIM(NMR.OrganizationName) + ':' END AS DearName
	, Home.Areacode + '-' + LEFT(Home.Phone, 3) + '-' + RIGHT(RTRIM(Home.Phone), 4) AS HPhoneFull
	, Home.CellPhoneAC + '-' + LEFT(Home.CellPhone, 3) + '-' + RIGHT(RTRIM(Home.CellPhone), 4) AS CPhoneFull
	, CASE NMR.UseTodayForDOB WHEN 'Y' THEN CONVERT(char(10), NMR.CreatedOn, 101) ELSE CONVERT(char(10), NMR.DOB, 101) END AS DOB
	, CASE NMR.AccountClass WHEN 'P' THEN Left(NMR.SSN, 3) + '-' + LEFT(RIGHT(NMR.SSN, 6), 2) + '-' + RIGHT(NMR.SSN, 4) ELSE LEFT(NMR.SSN, 2) + '-' + RIGHT(NMR.SSN, 7) END AS SSN
	, CASE WHEN NMR.SSN != '' THEN 'X' END AS YesSSN
	, NMR.MaidenName AS MaidenName
	, NMR.Password AS Password
	, NMR.CreatedBy AS Seller
	, NMR.Department AS Department
	, CASE WHEN NMR.Created = 'F' Or NMR.Created = 'H' Or NMR.Created = 'I' THEN '' ELSE 'X' END AS YesNewAccount
	, CASE WHEN NMR.Created = 'F' Or NMR.Created = 'H' Or NMR.Created = 'I' THEN 'X' END AS YesChangeAccount
--	, CASE WHEN NMR.Created = 'F' Or NMR.Created = 'H' Or NMR.Created = 'I' THEN NMR.Account END AS ChangeAccount
	, CASE WHEN ISNULL(AltAddress.Address1, '') <> ''
		THEN
			RTRIM(AltAddress.address1 + CASE ISNULL(AltAddress.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(AltAddress.Address2) END + CASE ISNULL(AltAddress.Address3, '') WHEN '' THEN '' ELSE ', ' + RTRIM(AltAddress.Address3) END)
		ELSE
			CASE NMR.AccountClass
				WHEN 'O' THEN RTRIM(Work.Address1 + CASE ISNULL(Work.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Work.Address2) END + CASE ISNULL(Work.Address3, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Work.Address3) END)
				ELSE RTRIM(Home.Address1 + CASE ISNULL(Home.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Home.Address2) END + CASE ISNULL(Home.Address3, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Home.Address3) END)
			END
		END AS Address
	, CASE NMR.AccountClass
		WHEN 'O' THEN RTRIM(Work.address1 + CASE Work.address2 WHEN '' THEN ''ELSE', ' END + Work.address2 + CASE Work.address3 WHEN '' THEN ''ELSE', ' END + Work.address3) + ', ' + RTRIM(Work.city) + ', ' + Work.state + ' ' + CASE LEN(Work.Zip) WHEN 9 THEN LEFT(Work.zip, 5) + '-' + Right(Work.Zip, 4) ELSE Work.Zip END
		ELSE RTRIM(Home.address1 + CASE Home.address2 WHEN '' THEN ''ELSE', ' END + Home.address2 + CASE Home.address3 WHEN '' THEN ''ELSE', ' END + Home.address3) + ', ' + RTRIM(Home.city) + ', ' + Home.state + ' ' + CASE LEN(Home.Zip) WHEN 9 THEN LEFT(Home.zip, 5) + '-' + Right(Home.Zip, 4) ELSE Home.Zip END
	  END AS FullAddress
	, CASE NMR.AccountClass
		WHEN 'O' THEN RTRIM(Work.city) + ', ' + Work.state + ' ' + CASE LEN(Work.Zip) WHEN 9 THEN LEFT(Work.zip, 5) + '-' + Right(Work.Zip, 4) ELSE Work.Zip END
		ELSE RTRIM(Home.city) + ', ' + Home.state + ' ' + CASE LEN(Home.Zip) WHEN 9 THEN LEFT(Home.zip, 5) + '-' + Right(Home.Zip, 4) ELSE Home.Zip END
	  END AS CityStateZip
	, CASE NMR.AccountClass
		WHEN 'O' THEN Work.City
		ELSE Home.City
	  END AS City
	, CASE NMR.AccountClass
		WHEN 'O' THEN Work.State
		ELSE Home.State
	  END AS State
	, CASE NMR.AccountClass
		WHEN 'O' THEN CASE LEN(Work.Zip) WHEN 9 THEN LEFT(Work.zip, 5) + '-' + Right(Work.Zip, 4) ELSE Work.Zip END
		ELSE CASE LEN(Home.Zip) WHEN 9 THEN LEFT(Home.zip, 5) + '-' + Right(Home.Zip, 4) ELSE Home.Zip END
	  END AS Zip		
	, RTRIM(NMR.Email1) AS Email
	, CASE NMR.AccountClass
		WHEN 'O' THEN Work.AreaCode
		ELSE Home.AreaCode
	  END AS AC
	, CASE NMR.AccountClass
		WHEN 'O' THEN LEFT(Work.Phone, 3) + '-' + RIGHT(RTRIM(Work.Phone), 4)
		ELSE LEFT(Home.Phone, 3) + '-' + RIGHT(RTRIM(Home.Phone), 4)
	  END AS Phone
	, CASE NMR.AccountClass WHEN 'P' THEN Work.EmployerName ELSE '' END AS WorkName
	, CASE NMR.AccountClass WHEN 'P' THEN Work.EmployerName ELSE '' END AS Employer
	, CASE NMR.AccountClass WHEN 'P' THEN Work.EmployerName ELSE '' END AS EmployerName
	, CASE NMR.AccountClass WHEN 'P' THEN RTRIM(Work.Address1 + CASE ISNULL(Work.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Work.Address2) END + CASE ISNULL(Work.Address3, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Work.address3) END) ELSE '' END AS WorkAddress
	, CASE NMR.AccountClass WHEN 'P' THEN Work.City ELSE '' END AS WorkCity
	, CASE NMR.AccountClass WHEN 'P' THEN Work.State ELSE '' END AS WorkState
	, CASE NMR.AccountClass WHEN 'P' THEN CASE LEN(Work.Zip) WHEN 9 THEN LEFT(Work.zip, 5) + '-' + RIGHT(Work.Zip, 4) ELSE Work.Zip END ELSE '' END AS WorkZip
	, Work.AreaCode AS WorkAC, LEFT(Work.Phone, 3) + '-' + RIGHT(RTRIM(Work.Phone), 4)  AS WorkPhone
	, Work.AreaCode + '-' + LEFT(Work.Phone, 3) + '-' + RIGHT(RTRIM(Work.Phone), 4)  AS WPhoneFull
	, Work.JobTitle AS Position
	, Work.JobTitle AS Occupation
	, Work.ProfessionYears As WorkNumYears
	,  RTRIM(Work.EmployerName) + ' ' + RTRIM(Work.address1 + CASE Work.address2 WHEN '' THEN ''ELSE', ' END + Work.address2 + CASE Work.address3 WHEN '' THEN ''ELSE', ' END + Work.address3) + ', ' + RTRIM(Work.City) + ', ' + RTRIM(Work.State) + ' ' + CASE LEN(Work.Zip) WHEN 9 THEN LEFT(Work.zip, 5) + '-' + Right(Work.Zip, 4) ELSE Work.Zip END AS WorkNameAddress
	, Work.HireDate
	,   CASE Work.IncomeFrequency
	     	WHEN 'W'  THEN 'Week'
		WHEN 'B' THEN 'Bi-Week'
		WHEN 'M' THEN 'Month'
		WHEN 'S' THEN 'Semi-Month'
		WHEN 'Y' THEN 'Year'
	      END AS IncomeFrequency
	,   CASE Work.IncomeFrequency
	     	WHEN 'W'  THEN (Work.GrossIncome * 52)/100
		WHEN 'B' THEN (Work.GrossIncome * 26)/100
		WHEN 'M' THEN (Work.GrossIncome * 12)/100
		WHEN 'S' THEN (Work.GrossIncome * 24)/100
		WHEN 'Y' THEN (Work.GrossIncome)/100
	      END AS GrossIncome
	, Home.ResidenceYears AS NumYears
	, CASE NMR.AccountClass
		WHEN 'O' THEN 'Yes'
		ELSE CASE WHEN NMR.Citizenship = 'US' Or NMR.Citizenship = 'RA' THEN 'Yes' END
	  END AS YesNoUSCitizen
	, CASE NMR.AccountClass
		WHEN 'O' THEN 'X'
		ELSE CASE WHEN NMR.Citizenship = 'US' Or NMR.Citizenship = 'RA' THEN 'X' END
	  END AS YesUSCitizen
	, CASE NMR.AccountClass
		WHEN 'O' THEN ''
		ELSE CASE WHEN NMR.Citizenship != 'US' And NMR.Citizenship != 'RA' THEN 'X' END
	  END AS NoUSCitizen
	, CASE WHEN NMR.BackupWithholding = 'N' THEN 'X' END AS BackWith
	, 'X' AS YesEligible00
	, CASE WHEN NMR.Qualification3 = 'Location' THEN NMR.Department END AS County
	, RTRIM(NMR.LName) + '/' + RTRIM(RTRIM(NMR.FName) + ' ' + NMR.MInitial) AS SlashName
	, '(' + RTRIM(LTRIM(CAST(NMR.CurrBranch AS VARCHAR(2)))) + ' - ' + RTRIM(Branches.[Description]) + ')' AS SellerBranch
	, 'CITY AND COUNTY CREDIT UNION' AS HCCUName
	, '144 11TH STREET EAST' AS HCCUAddress
	, 'ST. PAUL, MN  55101-2380' AS HCCUCityStateZip
	, '651-225-2700 or 1-800-223-2801' AS HCCUPhone
	, 'www.cccu.com' AS HCCUURL
FROM NewMemberRequest As NMR
	--INNER JOIN udt_AccountTypes AS AType On NMR.AccountType = AType.TypeCode
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN NewMemberAddress As AltAddress On NMR.TrackingNum = AltAddress.TrackingNum
	LEFT OUTER JOIN Branches On NMR.CurrBranch = Branches.BranchCode
	LEFT OUTER JOIN Departments ON NMR.Department = Departments.Department
WHERE NMR.TrackingNum = @TrackingNum
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_DWelcomeLetterEnable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [IMS].[spCCCU_DWelcomeLetterEnable] @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

SELECT 1 AS DocIndex, 'Welcome Letter' AS DocSubname
FROM NewMemberRequest
WHERE TrackingNum = @TrackingNum AND '' = 'REMOVED per John Knutson 3/2/2018'

Return 1

GO
/****** Object:  StoredProcedure [IMS].[spCCCU_DWelcomeLetterFields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCCCU_DWelcomeLetterFields] @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS 
SELECT @DocIndex AS DocIndex, @TrackingNum AS TrackingNum
	, 'Dear ' + CASE WHEN NMR.AccountClass = 'P' OR NMR.AccountType = 'BS' OR NMR.AccountType = 'BA'
		THEN RTRIM(NMR.FName) + RTRIM(' ' + NMR.MInitial) + ' ' + RTRIM(NMR.LName)
		ELSE RTRIM(NMR.OrganizationName)
		END + ',' AS DearName
	, CASE WHEN NMR.Created = 'Y'	THEN 'Congratulations on your decision to become one of our member/owners.  We appreciate'
									ELSE ''
		END AS Line001
	, CASE WHEN NMR.Created = 'Y'	THEN 'this opportunity to assist you.  City & County''s mission is to "provide quality products and'
									ELSE ''
		END AS Line002
	, CASE WHEN NMR.Created = 'Y'	THEN 'services that meet your changing financial needs."  In addition, our entire staff, including'
									ELSE 'Congratulations on your decision to expand your relationship with City & County Credit'
		END AS Line003
	, CASE WHEN NMR.Created = 'Y'	THEN 'me, has made these service commitments to each of our members:'
									ELSE 'Union!  Our Mission is to "provide quality products and services to meet your changing'
		END AS Line004
	, CASE WHEN NMR.Created = 'Y'	THEN '    1.    I will treat you with respect.'
									ELSE 'financial needs."  We appreciate this opportunity.'
		END AS Line005
	, CASE WHEN NMR.Created = 'Y'	THEN '    2.    I will provide you with accurate information in a timely manner.'
									ELSE ''
		END AS Line006
	, CASE WHEN NMR.Created = 'Y'	THEN '    3.    I will work with you to identify your needs and offer solutions.'
									ELSE 'If you have questions about your experience today, or would like more information about'
		END AS Line007
	, CASE WHEN NMR.Created = 'Y'	THEN '    4.    I will maintain the highest level of security with your personal information.'
									ELSE 'other products and services, please call me at the number listed below.  Or, call our'
		END AS Line008
	, CASE WHEN NMR.Created = 'Y'	THEN '    5.    I will exhibit an extra effort attitude.'
									ELSE 'TeleCenter at 651-225-2700 or 1-800-223-2801.  You can also access us on the Web 24'
		END AS Line009
	, CASE WHEN NMR.Created = 'Y'	THEN 'From time to time you may receive a survey asking how well the person who assisted you'
									ELSE 'hours a day at www.cccu.com.'
		END AS Line010
	, CASE WHEN NMR.Created = 'Y'	THEN 'has met these standards.  Your input will be valuable.'
									ELSE ''
		END AS Line011
	, CASE WHEN NMR.Created = 'Y'	THEN ''
									ELSE 'City & County is proud to be your Credit Union!'
		END AS Line012
	, CASE WHEN NMR.Created = 'Y'	THEN 'If you have questions about your membership or would like more information about other'
									ELSE ''
		END AS Line013
	, CASE WHEN NMR.Created = 'Y'	THEN 'products and services, please call me at the telephone number listed below.  Or, call our'
									ELSE ''
		END AS Line014
	, CASE WHEN NMR.Created = 'Y'	THEN 'Telecenter at 651-225-2700 or 1-800-223-2801.  You can also access your accounts or'
									ELSE ''
		END AS Line015
	, CASE WHEN NMR.Created = 'Y'	THEN 'obtain product information on the Web 24 hours a day at www.cccu.com.'
									ELSE ''
		END AS Line016
	, CASE WHEN NMR.Created = 'Y'	THEN ''
									ELSE ''
		END AS Line017
	, CASE WHEN NMR.Created = 'Y'	THEN 'Thank you for choosing City & County Credit Union!'
									ELSE ''
		END AS Line018
	, CASE WHEN NMR.Created = 'Y'	THEN ''
									ELSE ''
		END AS Line019
	, 'Sincerely,' AS Sincerely
	, RTRIM(Staff.CSFrom) AS StaffFrom
	, RTRIM(Staff.CSCenter) AS StaffCenter
	, RTRIM(Staff.CSPhone) AS StaffPhone
	, RTRIM(Staff.CSEmail) AS StaffEmail
	, CASE WHEN HAVE001.ProductName != '' THEN CHAR(149) + ' '+ RTRIM(HAVE001.ProductName) ELSE '' END AS HAVE001
	, CASE WHEN HAVE002.ProductName != '' THEN CHAR(149) + ' '+ RTRIM(HAVE002.ProductName) ELSE '' END AS HAVE002
	, CASE WHEN HAVE003.ProductName != '' THEN CHAR(149) + ' '+ RTRIM(HAVE003.ProductName) ELSE '' END AS HAVE003
	, CASE WHEN HAVE004.ProductName != '' THEN CHAR(149) + ' '+ RTRIM(HAVE004.ProductName) ELSE '' END AS HAVE004
	, CASE WHEN HAVE005.ProductName != '' THEN CHAR(149) + ' '+ RTRIM(HAVE005.ProductName) ELSE '' END AS HAVE005
	, CASE WHEN HAVE006.ProductName != '' THEN CHAR(149) + ' '+ RTRIM(HAVE006.ProductName) ELSE '' END AS HAVE006
	, CASE WHEN HAVE007.ProductName != '' THEN CHAR(149) + ' '+ RTRIM(HAVE007.ProductName) ELSE '' END AS HAVE007
	, CASE WHEN HAVE008.ProductName != '' THEN CHAR(149) + ' '+ RTRIM(HAVE008.ProductName) ELSE '' END AS HAVE008
	, CASE WHEN HAVE009.ProductName != '' THEN CHAR(149) + ' '+ RTRIM(HAVE009.ProductName) ELSE '' END AS HAVE009
	, CASE WHEN HAVE010.ProductName != '' THEN CHAR(149) + ' '+ RTRIM(HAVE010.ProductName) ELSE '' END AS HAVE010
	, CASE WHEN HAVE011.ProductName != '' THEN CHAR(149) + ' '+ RTRIM(HAVE011.ProductName) ELSE '' END AS HAVE011
	, CASE WHEN HAVE012.ProductName != '' THEN CHAR(149) + ' '+ RTRIM(HAVE012.ProductName) ELSE '' END AS HAVE012
	, CASE WHEN HAVE013.ProductName != '' THEN CHAR(149) + ' '+ RTRIM(HAVE013.ProductName) ELSE '' END AS HAVE013
	, CASE WHEN HAVE014.ProductName != '' THEN CHAR(149) + ' '+ RTRIM(HAVE014.ProductName) ELSE '' END AS HAVE014
	, CASE WHEN WILL001.ProductName != '' THEN CHAR(149) + ' '+ RTRIM(WILL001.ProductName) ELSE '' END AS WILL001
	, CASE WHEN WILL002.ProductName != '' THEN CHAR(149) + ' '+ RTRIM(WILL002.ProductName) ELSE '' END AS WILL002
	, CASE WHEN WILL003.ProductName != '' THEN CHAR(149) + ' '+ RTRIM(WILL003.ProductName) ELSE '' END AS WILL003
	, CASE WHEN WILL004.ProductName != '' THEN CHAR(149) + ' '+ RTRIM(WILL004.ProductName) ELSE '' END AS WILL004
	, CASE WHEN WILL005.ProductName != '' THEN CHAR(149) + ' '+ RTRIM(WILL005.ProductName) ELSE '' END AS WILL005
	, CASE WHEN WILL006.ProductName != '' THEN CHAR(149) + ' '+ RTRIM(WILL006.ProductName) ELSE '' END AS WILL006
	, CASE WHEN WILL007.ProductName != '' THEN CHAR(149) + ' '+ RTRIM(WILL007.ProductName) ELSE '' END AS WILL007
	, CASE WHEN WILL008.ProductName != '' THEN CHAR(149) + ' '+ RTRIM(WILL008.ProductName) ELSE '' END AS WILL008
	, CASE WHEN WILL009.ProductName != '' THEN CHAR(149) + ' '+ RTRIM(WILL009.ProductName) ELSE '' END AS WILL009
	, CASE WHEN WILL010.ProductName != '' THEN CHAR(149) + ' '+ RTRIM(WILL010.ProductName) ELSE '' END AS WILL010
	, CASE WHEN WILL011.ProductName != '' THEN CHAR(149) + ' '+ RTRIM(WILL011.ProductName) ELSE '' END AS WILL011
	, CASE WHEN WILL012.ProductName != '' THEN CHAR(149) + ' '+ RTRIM(WILL012.ProductName) ELSE '' END AS WILL012
	, CASE WHEN WILL013.ProductName != '' THEN CHAR(149) + ' '+ RTRIM(WILL013.ProductName) ELSE '' END AS WILL013
	, CASE WHEN WILL014.ProductName != '' THEN CHAR(149) + ' '+ RTRIM(WILL014.ProductName) ELSE '' END AS WILL014
	, CASE WHEN INTEREST001.ProductName != '' THEN CHAR(149) + ' '+ RTRIM(INTEREST001.ProductName) ELSE '' END AS INTEREST001
	, CASE WHEN INTEREST002.ProductName != '' THEN CHAR(149) + ' '+ RTRIM(INTEREST002.ProductName) ELSE '' END AS INTEREST002
	, CASE WHEN INTEREST003.ProductName != '' THEN CHAR(149) + ' '+ RTRIM(INTEREST003.ProductName) ELSE '' END AS INTEREST003
	, CASE WHEN INTEREST004.ProductName != '' THEN CHAR(149) + ' '+ RTRIM(INTEREST004.ProductName) ELSE '' END AS INTEREST004
	, CASE WHEN INTEREST005.ProductName != '' THEN CHAR(149) + ' '+ RTRIM(INTEREST005.ProductName) ELSE '' END AS INTEREST005
	, CASE WHEN INTEREST006.ProductName != '' THEN CHAR(149) + ' '+ RTRIM(INTEREST006.ProductName) ELSE '' END AS INTEREST006
	, CASE WHEN INTEREST007.ProductName != '' THEN CHAR(149) + ' '+ RTRIM(INTEREST007.ProductName) ELSE '' END AS INTEREST007
	, CASE WHEN INTEREST008.ProductName != '' THEN CHAR(149) + ' '+ RTRIM(INTEREST008.ProductName) ELSE '' END AS INTEREST008
	, CASE WHEN INTEREST009.ProductName != '' THEN CHAR(149) + ' '+ RTRIM(INTEREST009.ProductName) ELSE '' END AS INTEREST009
	, CASE WHEN INTEREST010.ProductName != '' THEN CHAR(149) + ' '+ RTRIM(INTEREST010.ProductName) ELSE '' END AS INTEREST010
	, CASE WHEN INTEREST011.ProductName != '' THEN CHAR(149) + ' '+ RTRIM(INTEREST011.ProductName) ELSE '' END AS INTEREST011
	, CASE WHEN INTEREST012.ProductName != '' THEN CHAR(149) + ' '+ RTRIM(INTEREST012.ProductName) ELSE '' END AS INTEREST012
	, CASE WHEN INTEREST013.ProductName != '' THEN CHAR(149) + ' '+ RTRIM(INTEREST013.ProductName) ELSE '' END AS INTEREST013
	, CASE WHEN INTEREST014.ProductName != '' THEN CHAR(149) + ' '+ RTRIM(INTEREST014.ProductName) ELSE '' END AS INTEREST014
FROM NewMemberRequest AS NMR
	LEFT OUTER JOIN NewMemberHome AS Home ON NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork AS Work ON NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN NewMemberStaffInfo AS Staff ON NMR.TrackingNum = Staff.TrackingNum
	LEFT OUTER JOIN fnCCCU_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', '', '', 'YES') AS HAVE001 ON NMR.TrackingNum = HAVE001.TrackingNum AND HAVE001.CartSequence = 1
	LEFT OUTER JOIN fnCCCU_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', '', '', 'YES') AS HAVE002 ON NMR.TrackingNum = HAVE002.TrackingNum AND HAVE002.CartSequence = 2
	LEFT OUTER JOIN fnCCCU_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', '', '', 'YES') AS HAVE003 ON NMR.TrackingNum = HAVE003.TrackingNum AND HAVE003.CartSequence = 3
	LEFT OUTER JOIN fnCCCU_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', '', '', 'YES') AS HAVE004 ON NMR.TrackingNum = HAVE004.TrackingNum AND HAVE004.CartSequence = 4
	LEFT OUTER JOIN fnCCCU_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', '', '', 'YES') AS HAVE005 ON NMR.TrackingNum = HAVE005.TrackingNum AND HAVE005.CartSequence = 5
	LEFT OUTER JOIN fnCCCU_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', '', '', 'YES') AS HAVE006 ON NMR.TrackingNum = HAVE006.TrackingNum AND HAVE006.CartSequence = 6
	LEFT OUTER JOIN fnCCCU_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', '', '', 'YES') AS HAVE007 ON NMR.TrackingNum = HAVE007.TrackingNum AND HAVE007.CartSequence = 7
	LEFT OUTER JOIN fnCCCU_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', '', '', 'YES') AS HAVE008 ON NMR.TrackingNum = HAVE008.TrackingNum AND HAVE008.CartSequence = 8
	LEFT OUTER JOIN fnCCCU_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', '', '', 'YES') AS HAVE009 ON NMR.TrackingNum = HAVE009.TrackingNum AND HAVE009.CartSequence = 9
	LEFT OUTER JOIN fnCCCU_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', '', '', 'YES') AS HAVE010 ON NMR.TrackingNum = HAVE010.TrackingNum AND HAVE010.CartSequence = 10
	LEFT OUTER JOIN fnCCCU_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', '', '', 'YES') AS HAVE011 ON NMR.TrackingNum = HAVE011.TrackingNum AND HAVE011.CartSequence = 11
	LEFT OUTER JOIN fnCCCU_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', '', '', 'YES') AS HAVE012 ON NMR.TrackingNum = HAVE012.TrackingNum AND HAVE012.CartSequence = 12
	LEFT OUTER JOIN fnCCCU_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', '', '', 'YES') AS HAVE013 ON NMR.TrackingNum = HAVE013.TrackingNum AND HAVE013.CartSequence = 13
	LEFT OUTER JOIN fnCCCU_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', '', '', 'YES') AS HAVE014 ON NMR.TrackingNum = HAVE014.TrackingNum AND HAVE014.CartSequence = 14
	LEFT OUTER JOIN fnCCCU_GetCartItems(@TrackingNum, 'L', 'O', '', '', '', '', 'I', 'YES') AS WILL001 ON NMR.TrackingNum = WILL001.TrackingNum AND WILL001.CartSequence = 1
	LEFT OUTER JOIN fnCCCU_GetCartItems(@TrackingNum, 'L', 'O', '', '', '', '', 'I', 'YES') AS WILL002 ON NMR.TrackingNum = WILL002.TrackingNum AND WILL002.CartSequence = 2
	LEFT OUTER JOIN fnCCCU_GetCartItems(@TrackingNum, 'L', 'O', '', '', '', '', 'I', 'YES') AS WILL003 ON NMR.TrackingNum = WILL003.TrackingNum AND WILL003.CartSequence = 3
	LEFT OUTER JOIN fnCCCU_GetCartItems(@TrackingNum, 'L', 'O', '', '', '', '', 'I', 'YES') AS WILL004 ON NMR.TrackingNum = WILL004.TrackingNum AND WILL004.CartSequence = 4
	LEFT OUTER JOIN fnCCCU_GetCartItems(@TrackingNum, 'L', 'O', '', '', '', '', 'I', 'YES') AS WILL005 ON NMR.TrackingNum = WILL005.TrackingNum AND WILL005.CartSequence = 5
	LEFT OUTER JOIN fnCCCU_GetCartItems(@TrackingNum, 'L', 'O', '', '', '', '', 'I', 'YES') AS WILL006 ON NMR.TrackingNum = WILL006.TrackingNum AND WILL006.CartSequence = 6
	LEFT OUTER JOIN fnCCCU_GetCartItems(@TrackingNum, 'L', 'O', '', '', '', '', 'I', 'YES') AS WILL007 ON NMR.TrackingNum = WILL007.TrackingNum AND WILL007.CartSequence = 7
	LEFT OUTER JOIN fnCCCU_GetCartItems(@TrackingNum, 'L', 'O', '', '', '', '', 'I', 'YES') AS WILL008 ON NMR.TrackingNum = WILL008.TrackingNum AND WILL008.CartSequence = 8
	LEFT OUTER JOIN fnCCCU_GetCartItems(@TrackingNum, 'L', 'O', '', '', '', '', 'I', 'YES') AS WILL009 ON NMR.TrackingNum = WILL009.TrackingNum AND WILL009.CartSequence = 9
	LEFT OUTER JOIN fnCCCU_GetCartItems(@TrackingNum, 'L', 'O', '', '', '', '', 'I', 'YES') AS WILL010 ON NMR.TrackingNum = WILL010.TrackingNum AND WILL010.CartSequence = 10
	LEFT OUTER JOIN fnCCCU_GetCartItems(@TrackingNum, 'L', 'O', '', '', '', '', 'I', 'YES') AS WILL011 ON NMR.TrackingNum = WILL011.TrackingNum AND WILL011.CartSequence = 11
	LEFT OUTER JOIN fnCCCU_GetCartItems(@TrackingNum, 'L', 'O', '', '', '', '', 'I', 'YES') AS WILL012 ON NMR.TrackingNum = WILL012.TrackingNum AND WILL012.CartSequence = 12
	LEFT OUTER JOIN fnCCCU_GetCartItems(@TrackingNum, 'L', 'O', '', '', '', '', 'I', 'YES') AS WILL013 ON NMR.TrackingNum = WILL013.TrackingNum AND WILL013.CartSequence = 13
	LEFT OUTER JOIN fnCCCU_GetCartItems(@TrackingNum, 'L', 'O', '', '', '', '', 'I', 'YES') AS WILL014 ON NMR.TrackingNum = WILL014.TrackingNum AND WILL014.CartSequence = 14
	LEFT OUTER JOIN fnCCCU_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', 'L', '', 'MAYBE') AS INTEREST001 ON NMR.TrackingNum = INTEREST001.TrackingNum AND INTEREST001.CartSequence = 1
	LEFT OUTER JOIN fnCCCU_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', 'L', '', 'MAYBE') AS INTEREST002 ON NMR.TrackingNum = INTEREST002.TrackingNum AND INTEREST002.CartSequence = 2
	LEFT OUTER JOIN fnCCCU_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', 'L', '', 'MAYBE') AS INTEREST003 ON NMR.TrackingNum = INTEREST003.TrackingNum AND INTEREST003.CartSequence = 3
	LEFT OUTER JOIN fnCCCU_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', 'L', '', 'MAYBE') AS INTEREST004 ON NMR.TrackingNum = INTEREST004.TrackingNum AND INTEREST004.CartSequence = 4
	LEFT OUTER JOIN fnCCCU_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', 'L', '', 'MAYBE') AS INTEREST005 ON NMR.TrackingNum = INTEREST005.TrackingNum AND INTEREST005.CartSequence = 5
	LEFT OUTER JOIN fnCCCU_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', 'L', '', 'MAYBE') AS INTEREST006 ON NMR.TrackingNum = INTEREST006.TrackingNum AND INTEREST006.CartSequence = 6
	LEFT OUTER JOIN fnCCCU_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', 'L', '', 'MAYBE') AS INTEREST007 ON NMR.TrackingNum = INTEREST007.TrackingNum AND INTEREST007.CartSequence = 7
	LEFT OUTER JOIN fnCCCU_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', 'L', '', 'MAYBE') AS INTEREST008 ON NMR.TrackingNum = INTEREST008.TrackingNum AND INTEREST008.CartSequence = 8
	LEFT OUTER JOIN fnCCCU_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', 'L', '', 'MAYBE') AS INTEREST009 ON NMR.TrackingNum = INTEREST009.TrackingNum AND INTEREST009.CartSequence = 9
	LEFT OUTER JOIN fnCCCU_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', 'L', '', 'MAYBE') AS INTEREST010 ON NMR.TrackingNum = INTEREST010.TrackingNum AND INTEREST010.CartSequence = 10
	LEFT OUTER JOIN fnCCCU_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', 'L', '', 'MAYBE') AS INTEREST011 ON NMR.TrackingNum = INTEREST011.TrackingNum AND INTEREST011.CartSequence = 11
	LEFT OUTER JOIN fnCCCU_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', 'L', '', 'MAYBE') AS INTEREST012 ON NMR.TrackingNum = INTEREST012.TrackingNum AND INTEREST012.CartSequence = 12
	LEFT OUTER JOIN fnCCCU_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', 'L', '', 'MAYBE') AS INTEREST013 ON NMR.TrackingNum = INTEREST013.TrackingNum AND INTEREST013.CartSequence = 13
	LEFT OUTER JOIN fnCCCU_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', 'L', '', 'MAYBE') AS INTEREST014 ON NMR.TrackingNum = INTEREST014.TrackingNum AND INTEREST014.CartSequence = 14
WHERE NMR.TrackingNum = @TrackingNum

Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_Eligibility_Select]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_Eligibility_Select
CREATE PROCEDURE [IMS].[spCCCU_Eligibility_Select]
	@ZipCode varchar(5),
	@CensusTract varchar(10)
AS

IF IsNull(@CensusTract, '') = '' AND IsNull(@ZipCode, '') <> ''
BEGIN
	SELECT Department
	FROM udt_EligibilityByZip
	WHERE IsNull(ZipCode, '') = @ZipCode
END

IF IsNull(@CensusTract, '') <> '' AND IsNull(@ZipCode, '') <> ''
BEGIN
	SELECT Department
	FROM udt_EligibilityByZip
	WHERE IsNull(ZipCode, '') = @ZipCode AND IsNull(CensusTract, '') = @CensusTract
END

IF IsNull(@CensusTract, '') = '' AND IsNull(@ZipCode, '') = ''
BEGIN
	SELECT *
	FROM udt_EligibilityByZip
END
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_FedReservePendingTransaction_Select]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Jonathan Eagar
-- Create date: 8/25/2011
-- Description:	Returns all FedReserve Pending Transactions
-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_FedReservePendingTransaction_Select
-- =============================================
CREATE PROCEDURE [IMS].[spCCCU_FedReservePendingTransaction_Select] 
	-- Add the parameters for the stored procedure here
	@NMRAccountNumber bigint
AS
BEGIN	
	SET @NMRAccountNumber = ISNULL(@NMRAccountNumber, 0)
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	-- Insert statements for procedure here
	
	DECLARE @TransactionSummary TABLE
	(		
		FundingBankID INT,
		TransferAmountTotal DECIMAL(18,2)		
	)
		
	IF @NMRAccountNumber = 0  
	BEGIN
	
	INSERT INTO @TransactionSummary(FundingBankID, TransferAmountTotal)	
	SELECT
		   FB.ID as FundingBankID,			  
		   SUM(FT.Amount) as TransferAmountTotal			   
	FROM IMS.NMRFundingBank FB INNER JOIN IMS.NMRFundingTransaction FT ON FB.ID = FT.FundingBankID						
	WHERE FT.DateTimeLastTransaction IS NULL AND FT.FundingType = 'B'
	GROUP BY FB.ID	
	
	SELECT  FRPT.* FROM
	( 
		(
		SELECT F.ID as FundingID,
			   F.AccountNumber as NMRAccountNumber,
			   FB.TrackingNum as NMRTrackingNumber,
			   NMR.LName + ', ' + NMR.FName as NMRMemberName,
			   FB.ID as FundingBankID,
			   0 as FundingTransactionID,
			   FB.RoutingNumber as FundingBankRouting,
			   FB.AccountNumberEncrypted as FundingBankAccountNumberEncrypted,
			   FB.AccountNumberLast4 as FundingBankAccountAccountLast4,
			   FB.BankName as FundingBankName,
			   FB.AccountType as FundingBankAccountType,
			   FB.Amount1 as VerificationAmount1,
			   FB.Amount2 as VerificationAmount2,
			   0 as TransferAmount,
			   0 as TransferAmountTotal,			   	
			   0 as TargetSubAccountSuffix,
			   0 as TargetSubAccountSeq,
			   FB.DateTimeCreated as DateTimeCreated
		FROM IMS.NMRFunding F INNER JOIN IMS.NMRFundingBank FB ON F.ID = FB.FundingID
								INNER JOIN IMS.NewMemberRequest NMR ON FB.TrackingNum = NMR.TrackingNum
		WHERE FB.VerificationStatus = 'P'	
		)
		UNION ALL
		(	
		SELECT F.ID as FundingID,
			   F.AccountNumber as NMRAccountNumber,
			   FB.TrackingNum as NMRTrackingNumber,			   
			   NMR.LName + ', ' + NMR.FName as NMRMemberName,
			   FB.ID as FundingBankID,
			   FT.ID as FundingTransactionID,
			   FB.RoutingNumber as FundingBankRouting,
			   FB.AccountNumberEncrypted as FundingBankAccountNumberEncrypted,
			   FB.AccountNumberLast4 as FundingBankAccountAccountLast4,
			   FB.BankName as FundingBankName,
			   FB.AccountType as FundingBankAccountType,
				0 as VerificationAmount1,
				0 as VerificationAmount2,
			   FT.Amount as TransferAmount,
			   TS.TransferAmountTotal as TransferAmountTotal,			
			   FT.TargetSubAccountSuffix as TargetSubAccountSuffix,
			   FT.TargetSubAccountSeq as TargetSubAccountSeq,
			   FT.DateTimeCreated as DateTimeCreated 
		FROM IMS.NMRFunding F INNER JOIN IMS.NMRFundingBank FB ON F.ID = FB.FundingID
								INNER JOIN IMS.NMRFundingTransaction FT ON FB.ID = FT.FundingBankID
									INNER JOIN IMS.NewMemberRequest NMR ON FB.TrackingNum = NMR.TrackingNum
										INNER JOIN @TransactionSummary TS ON FB.ID = TS.FundingBankID
		WHERE FT.DateTimeLastTransaction IS NULL AND FT.FundingType = 'B'
		)
	)  FRPT ORDER BY FRPT.NMRTrackingNumber, FRPT.FundingID, FRPT.FundingBankID, FRPT.FundingTransactionID	
	END	
	ELSE
	BEGIN
	
	INSERT INTO @TransactionSummary(FundingBankID, TransferAmountTotal)	
	SELECT	   		   
		   FB.ID as FundingBankID,			  
		   SUM(FT.Amount) as TransferAmountTotal			   
	FROM IMS.NMRFunding F INNER JOIN IMS.NMRFundingBank FB ON F.ID = FB.FundingID 
							INNER JOIN IMS.NMRFundingTransaction FT ON FB.ID = FT.FundingBankID						
	WHERE FT.DateTimeLastTransaction IS NULL AND 
		FT.FundingType = 'B' AND
		F.AccountNumber = @NMRAccountNumber	 
	GROUP BY FB.ID	
	  
	SELECT  FRPT.* FROM
	(   
		(
		SELECT F.ID as FundingID,
			   F.AccountNumber as NMRAccountNumber,
			   FB.TrackingNum as NMRTrackingNumber,
			   NMR.LName + ', ' + NMR.FName as NMRMemberName,
			   FB.ID as FundingBankID,
			   0 as FundingTransactionID,
			   FB.RoutingNumber as FundingBankRouting,
			   FB.AccountNumberEncrypted as FundingBankAccountNumberEncrypted,
			   FB.AccountNumberLast4 as FundingBankAccountAccountLast4,
			   FB.BankName as FundingBankName,
			   FB.AccountType as FundingBankAccountType,
			   FB.Amount1 as VerificationAmount1,
			   FB.Amount2 as VerificationAmount2,
			   0 as TransferAmount,
			   0 as TransferAmountTotal,
			   0 as TargetSubAccountSuffix,
			   0 as TargetSubAccountSeq,
			   FB.DateTimeCreated as DateTimeCreated
		FROM IMS.NMRFunding F INNER JOIN IMS.NMRFundingBank FB ON F.ID = FB.FundingID
								INNER JOIN IMS.NewMemberRequest NMR ON FB.TrackingNum = NMR.TrackingNum
		WHERE	FB.VerificationStatus = 'P' AND 
				F.AccountNumber = @NMRAccountNumber	
		)	
		UNION ALL
		(		
		SELECT F.ID as FundingID,
			   F.AccountNumber as NMRAccountNumber,
			   FB.TrackingNum as NMRTrackingNumber,
			   NMR.LName + ', ' + NMR.FName as NMRMemberName,
			   FB.ID as FundingBankID,
			   FT.ID as FundingTransactionID,
			   FB.RoutingNumber as FundingBankRouting,
			   FB.AccountNumberEncrypted as FundingBankAccountNumberEncrypted,
			   FB.AccountNumberLast4 as FundingBankAccountAccountLast4,
			   FB.BankName as FundingBankName,
			   FB.AccountType as FundingBankAccountType,
				0 as VerificationAmount1,
				0 as VerificationAmount2,
			   FT.Amount as TransferAmount,
			   TS.TransferAmountTotal as TransferAmountTotal,
			   FT.TargetSubAccountSuffix as TargetSubAccountSuffix,
			   FT.TargetSubAccountSeq as TargetSubAccountSeq,
			   FT.DateTimeCreated as DateTimeCreated
		FROM IMS.NMRFunding F 
				INNER JOIN IMS.NMRFundingBank FB ON F.ID = FB.FundingID
					INNER JOIN IMS.NMRFundingTransaction FT ON FB.ID = FT.FundingBankID
						INNER JOIN IMS.NewMemberRequest NMR ON FB.TrackingNum = NMR.TrackingNum
							INNER JOIN @TransactionSummary TS ON FB.ID = TS.FundingBankID
		WHERE	FT.DateTimeLastTransaction IS NULL AND 
				FT.FundingType = 'B' AND 
				F.AccountNumber = @NMRAccountNumber
		)
	)  FRPT	ORDER BY FRPT.NMRTrackingNumber, FRPT.FundingID, FRPT.FundingBankID, FRPT.FundingTransactionID
	END		
END

GO
/****** Object:  StoredProcedure [IMS].[spCCCU_ILAApplicationSearch_Select]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_ILAApplicationSearch_Select
CREATE Procedure [IMS].[spCCCU_ILAApplicationSearch_Select]
	@TrackingNum varchar(9),
	@SSN varchar(9),
	@Account varchar(9),
	@AppNumber varchar(9)
AS

DECLARE @SQL varchar(1000)
SET @SQL = 'SELECT AI.*, A.UserSessionXML FROM ILA_ApplicationInfo AI INNER JOIN ILA_Application A ON A.TrackingNum = AI.TrackingNum WHERE 1=1'
IF @TrackingNum <> '*'
BEGIN
	SET @SQL = @SQL + ' AND AI.TrackingNum = ''' + @TrackingNum + ''''
END
IF @SSN <> '*'
BEGIN
	SET @SQL = @SQL + ' AND AI.PrimarySSN = ''' + @SSN + ''''
END
IF @Account <> '*'
BEGIN
	SET @SQL = @SQL + ' AND AI.Account = ''' + @Account + ''''
END
IF @AppNumber <> '*'
BEGIN
	SET @SQL = @SQL + ' AND AI.AppNumber = ''' + @AppNumber + ''''
END

EXEC(@SQL)
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_OAOReport_ApplicationStatusReport]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_OAOReport_ApplicationStatusReport
CREATE Procedure [IMS].[spCCCU_OAOReport_ApplicationStatusReport]
	@StartDate datetime,
	@StopDate datetime
AS

SELECT
	NMR.TrackingNum
	, UPPER(RTRIM(LEFT(NMR.FName, 1)) + ' ' + RTRIM(NMR.LName)) AS MemberName
	, NMR.ApplyDate AS [Date_Time]
	, NMR.CurrBranch AS Branch
	, CASE
		WHEN NMR.Processed = '1' THEN 'In-Process'
		WHEN NMR.Processed = '999' THEN 'Created'
		ELSE 'Denied'
		END AS Status
	, CASE
		WHEN (SELECT COUNT(*) FROM NMRFundingBank AS NMRFB WHERE NMRFB.TrackingNum = NMR.TrackingNum AND NMRFB.VerificationStatus <> 'X' AND NMRFB.VerificationStatus <> 'E') > 0 THEN 'ACH'
		WHEN (SELECT COUNT(*) FROM NMRFundingCard AS NMRFC WHERE NMRFC.TrackingNum = NMR.TrackingNum) > 0 THEN 'Credit Card'
		WHEN (SELECT COUNT(*) FROM NMRFundingTransaction AS NMRFT WHERE NMRFT.TrackingNum = NMR.TrackingNum AND NMRFT.SourceSubAccountSeq <> '') > 0 THEN 'Transfer'
		WHEN (SELECT FundingType FROM NMRFundingTransaction AS NMRFT WHERE NMRFT.TrackingNum = NMR.TrackingNum) = NULL THEN 'Skipped'
		ELSE 'None'
		END AS PaymentMethod
	, (SELECT SUM(Amount) FROM NMRFundingTransaction AS NMRFT WHERE NMRFT.TrackingNum = NMR.TrackingNum GROUP BY NMRFT.TrackingNum) AS InitialAmountFunded
	, NMR.Account AS AccountNumber
FROM IMS.NewMemberRequest NMR
WHERE
	NMR.Processed > 0
	AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> ''
	AND (NMR.ApplyDate >= @StartDate AND NMR.ApplyDate <= @StopDate)
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_OAOReport_FundingDetailReport]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_OAOReport_FundingDetailReport
CREATE Procedure [IMS].[spCCCU_OAOReport_FundingDetailReport]
	@StartDate datetime,
	@StopDate datetime
AS

SELECT Bank, Card, Existing, Skipped FROM
(
	(SELECT COUNT(DISTINCT NMRFT.TrackingNum) AS Bank
	FROM IMS.NMRFundingTransaction NMRFT
	LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	INNER JOIN IMS.NMRFundingBank NMRFB ON NMRFB.ID = NMRFT.FundingBankID
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND NMRFT.FundingBankID <> '' AND NMR.Processed = 999 AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate) AND (NMRFB.VerificationStatus <> 'E') AND (NMRFB.VerificationStatus <> 'X')) a
		FULL OUTER JOIN
	(SELECT COUNT(DISTINCT NMRFT.TrackingNum) AS Card
	FROM IMS.NMRFundingTransaction NMRFT
	LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND NMRFT.FundingCardID <> '' AND NMR.Processed = 999 AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate)) b ON 1=1
		FULL OUTER JOIN
	(SELECT COUNT(DISTINCT NMRFT.TrackingNum) AS Existing
	FROM IMS.NMRFundingTransaction NMRFT
	LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND NMRFT.SourceSubAccountSeq <> '' AND NMR.Processed = 999 AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate)) c ON 1=1
		FULL OUTER JOIN
	(SELECT COUNT(DISTINCT NMR.TrackingNum) AS Skipped
	FROM IMS.NMRFundingTransaction NMRFT
	FULL OUTER JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND (NMR.Processed = 999 AND ISNULL(NMRFT.TrackingNum, 0) = 0) AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate)) d ON 1=1
)

UNION ALL

SELECT Bank, Card, Existing, Skipped FROM
(
	(SELECT COUNT(DISTINCT NMRFT.TrackingNum) AS Bank
	FROM IMS.NMRFundingTransaction NMRFT
	LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	INNER JOIN IMS.NMRFundingBank NMRFB ON NMRFB.ID = NMRFT.FundingBankID
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND NMRFT.FundingBankID <> '' AND NMR.Processed = 998 AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate) AND (NMRFB.VerificationStatus <> 'E') AND (NMRFB.VerificationStatus <> 'X')) a
		FULL OUTER JOIN
	(SELECT COUNT(DISTINCT NMRFT.TrackingNum) AS Card
	FROM IMS.NMRFundingTransaction NMRFT
	LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND NMRFT.FundingCardID <> '' AND NMR.Processed = 998 AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate)) b ON 1=1
		FULL OUTER JOIN
	(SELECT COUNT(DISTINCT NMRFT.TrackingNum) AS Existing
	FROM IMS.NMRFundingTransaction NMRFT
	LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND NMRFT.SourceSubAccountSeq <> '' AND NMR.Processed = 998 AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate)) c ON 1=1
		FULL OUTER JOIN
	(SELECT COUNT(DISTINCT NMR.TrackingNum) AS Skipped
	FROM IMS.NMRFundingTransaction NMRFT
	FULL OUTER JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND (NMR.Processed = 998 AND ISNULL(NMRFT.TrackingNum, 0) = 0) AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate)) d ON 1=1
)
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_ReviewQueue_SelectAll]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Jon Eagar
-- Create date: 7/08/2011
-- Description:	Lists the active NMR records for the Queue Review
-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_ReviewQueue_SelectAll
-- =============================================
CREATE PROCEDURE [IMS].[spCCCU_ReviewQueue_SelectAll] 
	-- Add the parameters for the stored procedure here
	@StartDate DATETIME = NULL,
	@EndDate DATETIME = NULL,
	@StatusCode VARCHAR(2) = NULL
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
 
	DECLARE @Hierarchy INT
	DECLARE @StatusID INT

	IF @StartDate IS NOT NULL AND @StartDate <> ''
	BEGIN
		SET @StartDate = CONVERT(DATETIME,(CONVERT(VARCHAR(10), @StartDate, 102)))  --Set Time to beginning of Day
		SET @EndDate = CAST( CONVERT(CHAR(10), @EndDate, 101) + ' 11:59 PM' AS DATETIME) --Set Time to end of day
	END
	
	SET @StatusCode = NULLIF(@StatusCode,'')

	DECLARE @ReviewQueue TABLE
	(
		ID INT IDENTITY(1,1) PRIMARY KEY CLUSTERED,
		TrackingNum INT,	
		Name VARCHAR(90),
		EmployerName VARCHAR(250),
		Email VARCHAR(200),
		Account VARCHAR(50),
		StatusName VARCHAR(50),
		StatusID INT,
		FundingComplete VARCHAR(50), 
		ApplyDate DATETIME,
		Teller VARCHAR(50),
		LastPage VARCHAR(50),
		Misc VARCHAR(1000),
		TNExpireDate DATETIME
	)

	IF (@StatusCode IS NOT NULL)
	BEGIN
		SELECT @Hierarchy=RQC.Hierarchy, @StatusID=RQC.ID FROM IMS.ReviewQueueConfig RQC WHERE RQC.StatusCode = @StatusCode
	END

	IF (@Hierarchy > 0 OR @StatusCode IS NULL)
	BEGIN
		--IDV DECLINE
		INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Email, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, Misc, TNExpireDate)
		SELECT	DISTINCT NMR.TrackingNum, 
				LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
				--RTRIM(LTRIM(NMRW.EmployerName)) AS EmployerName,
				'Chks: ' + CASE WHEN (SELECT COUNT(CS.TrackingNum) FROM NewMemberCheckOrderSimple CS WHERE CS.TrackingNum = NMR.TrackingNum) > 0 THEN 'Check Order: YES' ELSE 'NO' END
				+ '<br>Sign: '
				+ COALESCE((SELECT TOP 1 [status] FROM IMS.DocuSignEnvelope WHERE DocuSignEnvelope.trackingNum = NMR.TrackingNum), '')
				+ ' - ' + COALESCE((SELECT TOP 1 [statusSetBy] FROM IMS.DocuSignEnvelope WHERE DocuSignEnvelope.trackingNum = NMR.TrackingNum), '')
				AS EmployerName,
				RTRIM(LTRIM(NMR.Email1)) AS Email,
				NMR.Account, 
				RQC.StatusName,
				RQC.ID, 
				NMR.FundingComplete, 
				NMR.ApplyDate,
				(SELECT TOP 1 CompletedBy FROM IMS.ActionLog WHERE TrackingNum = NMR.TrackingNum AND NullIf(CompletedBy, '') IS NOT NULL ORDER BY CompletedDate DESC) AS Seller,
				(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
				RTRIM(RTRIM(NMRH.Address1) + CASE ISNULL(NMRH.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(NMRH.Address2) END + CASE ISNULL(NMRH.Address3, '') WHEN '' THEN '' ELSE ', ' + RTRIM(NMRH.Address3) END) + '<br>' + RTRIM(NMRH.city) + ', ' + NMRH.state + ' ' + CASE LEN(NMRH.Zip) WHEN 9 THEN LEFT(NMRH.zip, 5) + '-' + Right(NMRH.Zip, 4) ELSE NMRH.Zip END AS Misc,
				NMR.TNExpireDate
		FROM IMS.NewMemberRequest NMR 
				INNER JOIN 
				IMS.NewMemberManualApproval MA 
					ON NMR.TrackingNum = MA.TrackingNum 
						INNER JOIN IMS.ReviewQueueConfig RQC ON RQC.StatusCode = 'ID'
							LEFT JOIN IMS.NewMemberHome NMRH
								ON NMR.TrackingNum = NMRH.TrackingNum
							LEFT JOIN IMS.NewMemberWork NMRW
								ON NMR.TrackingNum = NMRW.TrackingNum
		WHERE NMR.Processed NOT IN (-1, 998, 999) AND (MA.Category = 'ID' AND MA.ApprovalStatus = '') AND (@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate) AND DATALENGTH(NMR.UserSessionXML) > 0  AND NMR.UserSessionXML IS NOT NULL
		
		IF (@Hierarchy > 1 OR @StatusCode IS NULL)
		BEGIN
			--Miscellaneous Decline
			INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Email, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, Misc, TNExpireDate)
			SELECT	DISTINCT NMR.TrackingNum, 
					LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
					--RTRIM(LTRIM(NMRW.EmployerName)) AS EmployerName,
					'Chks: ' + CASE WHEN (SELECT COUNT(CS.TrackingNum) FROM NewMemberCheckOrderSimple CS WHERE CS.TrackingNum = NMR.TrackingNum) > 0 THEN 'Check Order: YES' ELSE 'NO' END
					+ '<br>Sign: '
					+ COALESCE((SELECT TOP 1 [status] FROM IMS.DocuSignEnvelope WHERE DocuSignEnvelope.trackingNum = NMR.TrackingNum), '')
					+ ' - ' + COALESCE((SELECT TOP 1 [statusSetBy] FROM IMS.DocuSignEnvelope WHERE DocuSignEnvelope.trackingNum = NMR.TrackingNum), '')
					 AS EmployerName,
					RTRIM(LTRIM(NMR.Email1)) AS Email,
					NMR.Account, 
					RQC.StatusName,
					RQC.ID, 
					NMR.FundingComplete, 
					NMR.ApplyDate,
					(SELECT TOP 1 CompletedBy FROM IMS.ActionLog WHERE TrackingNum = NMR.TrackingNum AND NullIf(CompletedBy, '') IS NOT NULL ORDER BY CompletedDate DESC) AS Seller,
					(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
					RTRIM(RTRIM(NMRH.Address1) + CASE ISNULL(NMRH.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(NMRH.Address2) END + CASE ISNULL(NMRH.Address3, '') WHEN '' THEN '' ELSE ', ' + RTRIM(NMRH.Address3) END) + '<br>' + RTRIM(NMRH.city) + ', ' + NMRH.state + ' ' + CASE LEN(NMRH.Zip) WHEN 9 THEN LEFT(NMRH.zip, 5) + '-' + Right(NMRH.Zip, 4) ELSE NMRH.Zip END AS Misc,
					NMR.TNExpireDate
			FROM IMS.NewMemberRequest NMR 
					INNER JOIN 
					IMS.NewMemberManualApproval MA 
						ON NMR.TrackingNum = MA.TrackingNum AND MA.JointSequence = 0
							INNER JOIN IMS.ReviewQueueConfig RQC ON RQC.StatusCode = 'MD' AND RQC.ReasonCode = LTRIM(RTRIM(MA.ReasonCode))
								LEFT JOIN IMS.NewMemberHome NMRH
									ON NMR.TrackingNum = NMRH.TrackingNum
								LEFT JOIN IMS.NewMemberWork NMRW
									ON NMR.TrackingNum = NMRW.TrackingNum					
			WHERE NOT EXISTS(SELECT TrackingNum FROM @ReviewQueue RQ Where RQ.TrackingNum = NMR.TrackingNum) AND
				  NMR.Processed NOT IN (-1, 998, 999) AND 
				  (MA.ApprovalStatus = '') AND (@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate)AND DATALENGTH(NMR.UserSessionXML) > 0  AND NMR.UserSessionXML IS NOT NULL
					AND GETDATE() < TNExpireDate

			IF (@Hierarchy > 2 OR @StatusCode IS NULL)
			BEGIN
				--Joint Decline
				INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Email, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, Misc, TNExpireDate)
				SELECT	DISTINCT NMR.TrackingNum, 
						LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
						--RTRIM(LTRIM(NMRW.EmployerName)) AS EmployerName,
						'Chks: ' + CASE WHEN (SELECT COUNT(CS.TrackingNum) FROM NewMemberCheckOrderSimple CS WHERE CS.TrackingNum = NMR.TrackingNum) > 0 THEN 'YES' ELSE 'NO' END
						+ '<br>Sign: '
						+ COALESCE((SELECT TOP 1 [status] FROM IMS.DocuSignEnvelope WHERE DocuSignEnvelope.trackingNum = NMR.TrackingNum), '')
						+ ' - ' + COALESCE((SELECT TOP 1 [statusSetBy] FROM IMS.DocuSignEnvelope WHERE DocuSignEnvelope.trackingNum = NMR.TrackingNum), '')
						AS EmployerName,
						RTRIM(LTRIM(NMR.Email1)) AS Email,
						NMR.Account, 
						RQC.StatusName,
						RQC.ID, 
						NMR.FundingComplete, 
						NMR.ApplyDate,
						(SELECT TOP 1 CompletedBy FROM IMS.ActionLog WHERE TrackingNum = NMR.TrackingNum AND NullIf(CompletedBy, '') IS NOT NULL ORDER BY CompletedDate DESC) AS Seller,
						(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
						RTRIM(RTRIM(NMRH.Address1) + CASE ISNULL(NMRH.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(NMRH.Address2) END + CASE ISNULL(NMRH.Address3, '') WHEN '' THEN '' ELSE ', ' + RTRIM(NMRH.Address3) END) + '<br>' + RTRIM(NMRH.city) + ', ' + NMRH.state + ' ' + CASE LEN(NMRH.Zip) WHEN 9 THEN LEFT(NMRH.zip, 5) + '-' + Right(NMRH.Zip, 4) ELSE NMRH.Zip END AS Misc,
						NMR.TNExpireDate
				FROM IMS.NewMemberRequest NMR 
						INNER JOIN 
						IMS.NewMemberManualApproval MA 
							ON NMR.TrackingNum = MA.TrackingNum AND MA.JointSequence > 0
								INNER JOIN IMS.ReviewQueueConfig RQC ON RQC.StatusCode = 'JD' AND RQC.ReasonCode = LTRIM(RTRIM(MA.ReasonCode))
									LEFT JOIN IMS.NewMemberHome NMRH
										ON NMR.TrackingNum = NMRH.TrackingNum
									LEFT JOIN IMS.NewMemberWork NMRW
										ON NMR.TrackingNum = NMRW.TrackingNum					
				WHERE NOT EXISTS(SELECT TrackingNum FROM @ReviewQueue RQ Where RQ.TrackingNum = NMR.TrackingNum) AND
					  NMR.Processed NOT IN (-1, 998, 999) AND 
					  (MA.ApprovalStatus = '') AND (@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate)AND DATALENGTH(NMR.UserSessionXML) > 0  AND NMR.UserSessionXML IS NOT NULL
						AND GETDATE() < TNExpireDate

				IF (@Hierarchy > 3 OR @StatusCode IS NULL)
				BEGIN
					--Manual Review
					INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Email, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, Misc, TNExpireDate)
					SELECT	DISTINCT NMR.TrackingNum, 
							LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
							--RTRIM(LTRIM(NMRW.EmployerName)) AS EmployerName,
							'Chks: ' + CASE WHEN (SELECT COUNT(CS.TrackingNum) FROM NewMemberCheckOrderSimple CS WHERE CS.TrackingNum = NMR.TrackingNum) > 0 THEN 'YES' ELSE 'NO' END
							+ '<br>Sign: '
							+ COALESCE((SELECT TOP 1 [status] FROM IMS.DocuSignEnvelope WHERE DocuSignEnvelope.trackingNum = NMR.TrackingNum), '')
							+ ' - ' + COALESCE((SELECT TOP 1 [statusSetBy] FROM IMS.DocuSignEnvelope WHERE DocuSignEnvelope.trackingNum = NMR.TrackingNum), '')
							AS EmployerName,
							RTRIM(LTRIM(NMR.Email1)) AS Email,
							NMR.Account, 
							RQC.StatusName,
							RQC.ID, 
							NMR.FundingComplete, 
							NMR.ApplyDate,
							(SELECT TOP 1 CompletedBy FROM IMS.ActionLog WHERE TrackingNum = NMR.TrackingNum AND NullIf(CompletedBy, '') IS NOT NULL ORDER BY CompletedDate DESC) AS Seller,
							(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
							RTRIM(RTRIM(NMRH.Address1) + CASE ISNULL(NMRH.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(NMRH.Address2) END + CASE ISNULL(NMRH.Address3, '') WHEN '' THEN '' ELSE ', ' + RTRIM(NMRH.Address3) END) + '<br>' + RTRIM(NMRH.city) + ', ' + NMRH.state + ' ' + CASE LEN(NMRH.Zip) WHEN 9 THEN LEFT(NMRH.zip, 5) + '-' + Right(NMRH.Zip, 4) ELSE NMRH.Zip END AS Misc,
							NMR.TNExpireDate
					FROM IMS.NewMemberRequest NMR 
							INNER JOIN 
							IMS.NewMemberManualApproval MA 
								ON NMR.TrackingNum = MA.TrackingNum 
									INNER JOIN IMS.ReviewQueueConfig RQC ON RQC.StatusCode = 'MR' AND RQC.ReasonCode = LTRIM(RTRIM(MA.ReasonCode))
										LEFT JOIN IMS.NewMemberHome NMRH
											ON NMR.TrackingNum = NMRH.TrackingNum
										LEFT JOIN IMS.NewMemberWork NMRW
											ON NMR.TrackingNum = NMRW.TrackingNum		
					WHERE NOT EXISTS(SELECT TrackingNum FROM @ReviewQueue RQ Where RQ.TrackingNum = NMR.TrackingNum) AND
						  NMR.Processed NOT IN (-1, 998, 999) AND 
						  (MA.ApprovalStatus = '') AND (@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate) AND DATALENGTH(NMR.UserSessionXML) > 0 AND NMR.UserSessionXML IS NOT NULL
							AND GETDATE() < TNExpireDate

					IF (@Hierarchy > 4 OR @StatusCode IS NULL)
					BEGIN
						--Need Decision/Pending
						INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Email, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, Misc, TNExpireDate)
						SELECT	DISTINCT NMR.TrackingNum, 
								LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
								--RTRIM(LTRIM(NMRW.EmployerName)) AS EmployerName,
								'Chks: ' + CASE WHEN (SELECT COUNT(CS.TrackingNum) FROM NewMemberCheckOrderSimple CS WHERE CS.TrackingNum = NMR.TrackingNum) > 0 THEN 'YES' ELSE 'NO' END
								+ '<br>Sign: '
								+ COALESCE((SELECT TOP 1 [status] FROM IMS.DocuSignEnvelope WHERE DocuSignEnvelope.trackingNum = NMR.TrackingNum), '')
								+ ' - ' + COALESCE((SELECT TOP 1 [statusSetBy] FROM IMS.DocuSignEnvelope WHERE DocuSignEnvelope.trackingNum = NMR.TrackingNum), '')
								AS EmployerName,
								RTRIM(LTRIM(NMR.Email1)) AS Email,
								NMR.Account, 
								RQC.StatusName,
								RQC.ID, 
								NMR.FundingComplete, 
								NMR.ApplyDate,
								(SELECT TOP 1 CompletedBy FROM IMS.ActionLog WHERE TrackingNum = NMR.TrackingNum AND NullIf(CompletedBy, '') IS NOT NULL ORDER BY CompletedDate DESC) AS Seller,
								(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
								RTRIM(RTRIM(NMRH.Address1) + CASE ISNULL(NMRH.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(NMRH.Address2) END + CASE ISNULL(NMRH.Address3, '') WHEN '' THEN '' ELSE ', ' + RTRIM(NMRH.Address3) END) + '<br>' + RTRIM(NMRH.city) + ', ' + NMRH.state + ' ' + CASE LEN(NMRH.Zip) WHEN 9 THEN LEFT(NMRH.zip, 5) + '-' + Right(NMRH.Zip, 4) ELSE NMRH.Zip END AS Misc,
								NMR.TNExpireDate
						FROM IMS.NewMemberRequest NMR  
								INNER JOIN IMS.NewMemberSubAccount SA 
									ON NMR.TrackingNum = SA.TrackingNum
										INNER JOIN IMS.ReviewQueueConfig RQC ON RQC.StatusCode = 'DP'
											LEFT JOIN IMS.NewMemberHome NMRH
												ON NMR.TrackingNum = NMRH.TrackingNum
											LEFT JOIN IMS.NewMemberWork NMRW
												ON NMR.TrackingNum = NMRW.TrackingNum
													LEFT JOIN IMS.NewMemberManualApproval MA 
														ON NMR.TrackingNum = MA.TrackingNum
						WHERE NOT EXISTS(SELECT TrackingNum FROM @ReviewQueue RQ Where RQ.TrackingNum = NMR.TrackingNum) AND
							  NMR.Processed NOT IN (-1, 998, 999) AND 
							  ((SA.Approval <> 'A' AND SA.ApprovedBy = '') OR (MA.ApprovalStatus = '')) AND 
							  (@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate) AND DATALENGTH(NMR.UserSessionXML) > 0 AND NMR.UserSessionXML IS NOT NULL
								AND GETDATE() < TNExpireDate

						IF (@Hierarchy > 5 OR @StatusCode IS NULL)
						BEGIN
							--In Progress
							INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Email, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, Misc, TNExpireDate)
							SELECT	DISTINCT NMR.TrackingNum, 
									LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
									--RTRIM(LTRIM(NMRW.EmployerName)) AS EmployerName,
									'Chks: ' + CASE WHEN (SELECT COUNT(CS.TrackingNum) FROM NewMemberCheckOrderSimple CS WHERE CS.TrackingNum = NMR.TrackingNum) > 0 THEN 'YES' ELSE 'NO' END
									+ '<br>Sign: '
									+ COALESCE((SELECT TOP 1 [status] FROM IMS.DocuSignEnvelope WHERE DocuSignEnvelope.trackingNum = NMR.TrackingNum), '')
									+ ' - ' + COALESCE((SELECT TOP 1 [statusSetBy] FROM IMS.DocuSignEnvelope WHERE DocuSignEnvelope.trackingNum = NMR.TrackingNum), '')
									AS EmployerName,
									RTRIM(LTRIM(NMR.Email1)) AS Email,
									NMR.Account, 
									RQC.StatusName,
									RQC.ID, 
									NMR.FundingComplete, 
									NMR.ApplyDate,
									(SELECT TOP 1 CompletedBy FROM IMS.ActionLog WHERE TrackingNum = NMR.TrackingNum AND NullIf(CompletedBy, '') IS NOT NULL ORDER BY CompletedDate DESC) AS Seller,
									(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
									RTRIM(RTRIM(NMRH.Address1) + CASE ISNULL(NMRH.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(NMRH.Address2) END + CASE ISNULL(NMRH.Address3, '') WHEN '' THEN '' ELSE ', ' + RTRIM(NMRH.Address3) END) + '<br>' + RTRIM(NMRH.city) + ', ' + NMRH.state + ' ' + CASE LEN(NMRH.Zip) WHEN 9 THEN LEFT(NMRH.zip, 5) + '-' + Right(NMRH.Zip, 4) ELSE NMRH.Zip END AS Misc,
									NMR.TNExpireDate
							FROM IMS.NewMemberRequest NMR			
									INNER JOIN IMS.ReviewQueueConfig RQC 
										ON RQC.StatusCode = 'IP'
											LEFT JOIN IMS.NewMemberHome NMRH
												ON NMR.TrackingNum = NMRH.TrackingNum
											LEFT JOIN IMS.NewMemberWork NMRW
												ON NMR.TrackingNum = NMRW.TrackingNum
							WHERE NOT EXISTS(SELECT TrackingNum FROM @ReviewQueue RQ WHERE RQ.TrackingNum = NMR.TrackingNum) AND
								  NMR.Processed = 1 AND 
								  (SELECT COUNT(TrackingNum) FROM IMS.NewMemberManualApproval MA WHERE MA.TrackingNum = NMR.TrackingNum AND MA.ApprovalStatus = '') = 0 AND
								  (SELECT COUNT(TrackingNum) FROM IMS.NewMemberSubAccount SA WHERE SA.TrackingNum = NMR.TrackingNum) = (SELECT COUNT(TrackingNum) FROM IMS.NewMemberSubAccount SA WHERE SA.TrackingNum = NMR.TrackingNum AND (SA.Approval = 'A' OR SA.ApprovedBy <> '')) AND	 
								  (@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate) AND DATALENGTH(NMR.UserSessionXML) > 0 AND NMR.UserSessionXML IS NOT NULL
									AND GETDATE() < TNExpireDate

							IF (@Hierarchy > 6 OR @StatusCode IS NULL)
							BEGIN
								--Not Funded
								INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Email, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, Misc, TNExpireDate)
								SELECT	DISTINCT NMR.TrackingNum, 
										LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
										--RTRIM(LTRIM(NMRW.EmployerName)) AS EmployerName,
										'Chks: ' + CASE WHEN (SELECT COUNT(CS.TrackingNum) FROM NewMemberCheckOrderSimple CS WHERE CS.TrackingNum = NMR.TrackingNum) > 0 THEN 'YES' ELSE 'NO' END
										+ '<br>Sign: '
										+ COALESCE((SELECT TOP 1 [status] FROM IMS.DocuSignEnvelope WHERE DocuSignEnvelope.trackingNum = NMR.TrackingNum), '')
										+ ' - ' + COALESCE((SELECT TOP 1 [statusSetBy] FROM IMS.DocuSignEnvelope WHERE DocuSignEnvelope.trackingNum = NMR.TrackingNum), '')
										AS EmployerName,
										RTRIM(LTRIM(NMR.Email1)) AS Email,
										NMR.Account, 
										RQC.StatusName,
										RQC.ID, 
										NMR.FundingComplete, 
										NMR.ApplyDate,
										(SELECT TOP 1 CompletedBy FROM IMS.ActionLog WHERE TrackingNum = NMR.TrackingNum AND NullIf(CompletedBy, '') IS NOT NULL ORDER BY CompletedDate DESC) AS Seller,
										(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
										RTRIM(RTRIM(NMRH.Address1) + CASE ISNULL(NMRH.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(NMRH.Address2) END + CASE ISNULL(NMRH.Address3, '') WHEN '' THEN '' ELSE ', ' + RTRIM(NMRH.Address3) END) + '<br>' + RTRIM(NMRH.city) + ', ' + NMRH.state + ' ' + CASE LEN(NMRH.Zip) WHEN 9 THEN LEFT(NMRH.zip, 5) + '-' + Right(NMRH.Zip, 4) ELSE NMRH.Zip END AS Misc,
										NMR.TNExpireDate
								FROM IMS.NewMemberRequest NMR
									INNER JOIN IMS.ReviewQueueConfig RQC 
										ON RQC.StatusCode = 'NF'
											LEFT JOIN IMS.NewMemberHome NMRH
												ON NMR.TrackingNum = NMRH.TrackingNum
											LEFT JOIN IMS.NewMemberWork NMRW
												ON NMR.TrackingNum = NMRW.TrackingNum
								WHERE NOT EXISTS(SELECT TrackingNum FROM @ReviewQueue RQ WHERE RQ.TrackingNum = NMR.TrackingNum) AND
									  NMR.Processed = 999 AND 
									  IsNull(FundingComplete, 'N') <> 'Y' AND
									  (@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate) AND DATALENGTH(NMR.UserSessionXML) > 0 AND NMR.UserSessionXML IS NOT NULL
									  AND GETDATE() < TNExpireDate

							END
						END
					END	  
				END
			END
		END
		SELECT 
		TrackingNum AS TrackingNumber,
		--Name AS Name,
		--EmployerName AS EmployerName,
		--LOWER(Email) AS Email,
		--Account AS Account,
		--StatusName AS StatusName,
		--ApplyDate AS ApplyDate,
		--CASE WHEN FundingComplete <> 'Y' THEN 'N' ELSE 'Y' END AS FundingComplete,
		--Teller AS Teller,
		--LastPage AS LastPage,
		--Misc AS Misc,
		--TNExpireDate AS TNExpireDate,

		-- Normal font size is 12px.
		--'<span style="font-size:11px;">' + CONVERT(VARCHAR, TrackingNum) + '</span>' AS TrackingNumber,
		'<span style="font-size:11px;">' + Name + '</span>' AS Name,
		'<span style="font-size:11px;">' + EmployerName + '</span>' AS EmployerName,
		'<span style="font-size:11px;">' + LOWER(Email) + '</span>' AS Email,
		'<span style="font-size:11px;">' + Account + '</span>' AS Account,
		'<span style="font-size:11px;">' + StatusName + '</span>' AS StatusName,
		'<span style="font-size:11px;">' + CONVERT(VARCHAR, ApplyDate, 101) + '</span>' AS ApplyDate,
		'<span style="font-size:11px;">' + CASE WHEN FundingComplete <> 'Y' THEN 'N' ELSE 'Y' END + '</span>' AS FundingComplete,
		'<span style="font-size:11px;">' + Teller + '</span>' AS Teller,
		'<span style="font-size:11px;">' + LastPage + '</span>' AS LastPage,
		'<div style="font-size:11px; line-height:1.0;">' + Misc + '</div>' AS Misc,
		'<span style="font-size:11px;">' + CONVERT(VARCHAR, TNExpireDate) + '</span>' AS TNExpireDate,
		(
			SELECT COUNT(*)
			FROM IMS.SecureMailThread SMT
			LEFT JOIN IMS.SecureMailAttachment SMA ON SMA.ThreadId = SMT.ThreadId
			WHERE SMT.TrackingNum = RQ.TrackingNum AND SMA.Status = 'U'
		) AS AttachU,
		(
			SELECT COUNT(*)
			FROM IMS.SecureMailThread SMT
			LEFT JOIN IMS.SecureMailAttachment SMA ON SMA.ThreadId = SMT.ThreadId
			WHERE SMT.TrackingNum = RQ.TrackingNum AND SMA.Status = 'V'
		) AS AttachV,
		(
			SELECT COUNT(*)
			FROM IMS.SecureMailThread SMT
			LEFT JOIN IMS.SecureMailAttachment SMA ON SMA.ThreadId = SMT.ThreadId
			WHERE SMT.TrackingNum = RQ.TrackingNum AND SMA.Status = 'Q'
		) AS AttachQU,
		(
			SELECT COUNT(*)
			FROM IMS.SecureMailThread SMT
			LEFT JOIN IMS.SecureMailAttachment SMA ON SMA.ThreadId = SMT.ThreadId
			WHERE SMT.TrackingNum = RQ.TrackingNum AND SMA.Status = 'QV'
		) AS AttachQV
		FROM @ReviewQueue RQ 
		WHERE RQ.StatusID = @StatusID OR @StatusID IS NULL 
			AND TNExpireDate >= GETDATE()
		ORDER BY ApplyDate DESC, TrackingNum DESC
	END
END
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_SignOnOAO]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.SignOnOAO 
CREATE Procedure [IMS].[spCCCU_SignOnOAO]
@TrackingNum int,
@Password varchar(24),
@SSN varchar(9),
@DOB datetime
AS
BEGIN
	SELECT
		n.TrackingNum, 
		ISNULL(CAST(n.Account AS VARCHAR(50)),'') AS Account, 
		n.UserSessionXML, 
		n.AccountType, 
		n.Created, 
		n.Processed, 
		n.TNExpireDate, 
		e.BadLoginAttempts
	FROM IMS.NewMemberRequest n
	JOIN IMS.NewMemberRequestExtra e ON n.TrackingNum = e.TrackingNum
	WHERE 
		n.TrackingNum = @TrackingNum 
		AND (
			(
				(n.Password = @Password COLLATE SQL_Latin1_General_CP1_CS_AS) 
				OR (
					n.SSN = @SSN 
					AND n.DOB = @DOB
				)
			) 
			AND n.Processed <> '998' 
			OR (@Password = 'MoDESTaFF')
		)
-- NOTE: The "COLLATE SQL_Latin1_General_CP1_CS_AS" above makes the password search case sensitive.
END
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_SyncCarts]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_SyncCarts
CREATE PROCEDURE [IMS].[spCCCU_SyncCarts]
@TrackingNum int,
@SyncMode varchar(1)
AS

IF @SyncMode = 'S' OR @SyncMode = 'B' OR @SyncMode = 'Y'
BEGIN
	--Delete from cart where subaccount record no longer exists
	DELETE FROM IMS.NewMemberShoppingCart
	WHERE TrackingNum = @TrackingNum AND SubAccountID IS NOT NULL AND
		SubAccountID NOT IN (SELECT ID FROM IMS.NewMemberSubAccount
					WHERE TrackingNum = @TrackingNum)
END

IF @SyncMode = 'C' OR @SyncMode = 'B' OR @SyncMode = 'Y'
BEGIN
	--Delete from subaccounts where cart record no longer exists
	DELETE FROM IMS.NewMemberSubAccount
	WHERE TrackingNum = @TrackingNum AND ShoppingCartID IS NOT NULL AND
		ShoppingCartID NOT IN (SELECT ID FROM IMS.NewMemberShoppingCart
					WHERE TrackingNum = @TrackingNum)
END

IF @SyncMode = 'S' OR @SyncMode = 'B' OR @SyncMode = 'Y'
BEGIN
	--Update cart items with changes in the subaccount records
	UPDATE IMS.NewMemberShoppingCart
	SET RequestedAmount = (SELECT Amount FROM IMS.NewMemberSubAccount
				WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberShoppingCart.SubAccountID),
		InsuranceAmount1 = NULL,
		InsuranceAmount2 = NULL
	WHERE TrackingNum = @TrackingNum AND
		SubAccountID IN (SELECT ID FROM IMS.NewMemberSubAccount WHERE TrackingNum = @TrackingNum) AND
		IsNull((SELECT LineOfCredit FROM IMS.udt_LSubAccounts WHERE UniqueID = IMS.NewMemberShoppingCart.ProductID), 'N') = 'N' AND
		(SELECT Amount FROM IMS.NewMemberSubAccount WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberShoppingCart.SubAccountID) <> IMS.NewMemberShoppingCart.RequestedAmount + IsNull(IMS.NewMemberShoppingCart.InsuranceAmount1, 0) + IsNull(IMS.NewMemberShoppingCart.InsuranceAmount2, 0)

	UPDATE IMS.NewMemberShoppingCart
	SET RequestedAmount = (SELECT CreditLimit FROM IMS.NewMemberSubAccount
				WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberShoppingCart.SubAccountID),
		InsuranceAmount1 = NULL,
		InsuranceAmount2 = NULL
	WHERE TrackingNum = @TrackingNum AND
		SubAccountID IN (SELECT ID FROM IMS.NewMemberSubAccount WHERE TrackingNum = @TrackingNum) AND
		(SELECT LineOfCredit FROM IMS.udt_LSubAccounts WHERE UniqueID = IMS.NewMemberShoppingCart.ProductID) = 'Y' AND
		(SELECT CreditLimit FROM IMS.NewMemberSubAccount WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberShoppingCart.SubAccountID) <> IMS.NewMemberShoppingCart.RequestedAmount + IsNull(IMS.NewMemberShoppingCart.InsuranceAmount1, 0) + IsNull(IMS.NewMemberShoppingCart.InsuranceAmount2, 0)

	UPDATE IMS.NewMemberShoppingCart
	SET Term = (SELECT Term FROM IMS.NewMemberSubAccount
				WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberShoppingCart.SubAccountID)
	WHERE TrackingNum = @TrackingNum AND
		SubAccountID IN (SELECT ID FROM IMS.NewMemberSubAccount WHERE TrackingNum = @TrackingNum)

	--Create cart items for new subaccount records
	INSERT INTO IMS.NewMemberShoppingCart
	(ProductID, ProductName, YesNoMaybe, SLType, Approved, TrackingNum, MasterCategoryID, CategoryID,
	Exclude, CreatedBy, CreatedOn, Created, Fulfill, LOSProductID, LOSID,
	ApprovedAmount, RequestedAmount, Requires, LoanType, LoanSubType, Term, InsCode, ClosedFlag, LossFlag, SubAccountID)
	SELECT STP.ProductID, STP.ProductDesc, 'YES', STP.SLType, 'Y', @TrackingNum AS TrackingNum, STP.MasterCategoryID, STP.CategoryID,
		Prod.Exclude, SA.CreatedBy, SA.CreatedOn, SA.Created, STP.Fulfill, STP.LOSProductID, SA.LOSID,
		CASE WHEN Prod.LineOfCredit = 'Y' THEN SA.CreditLimit
		     ELSE SA.Amount
		END AS ApprovedAmount,
		CASE WHEN Prod.LineOfCredit = 'Y' THEN SA.CreditLimit
		     ELSE SA.Amount
		END AS RequestedAmount,
		STP.Requires, STP.LoanType, STP.LoanSubType, SA.Term, SA.InsCode, SA.ClosedFlag, SA.LossFlag, SA.ID AS SubAccountID
	FROM IMS.udt_SalesToolProducts STP INNER JOIN
		IMS.NewMemberSubAccount SA ON SA.SubAccountType = STP.ProductID INNER JOIN
		IMS.NewMemberRequest NMR ON SA.TrackingNum = NMR.TrackingNum INNER JOIN
		IMS.udt_AllSubAccounts Prod ON STP.ProductID = Prod.UniqueID AND ',' + RTrim(Prod.AccountTypes) + ',' LIKE '%,' + RTrim(NMR.AccountType) + ',%'
	WHERE SA.TrackingNum = @TrackingNum AND SA.SubAccountType NOT IN (SELECT ProductID FROM IMS.NewMemberShoppingCart WHERE TrackingNum = @TrackingNum)
	
	--Delete products that require products that are no longer here
	DELETE FROM IMS.NewMemberShoppingCart
	WHERE TrackingNum = @TrackingNum AND NullIf(Requires, '') IS NOT NULL AND
		(SELECT Count(SC2.ID) FROM IMS.NewMemberShoppingCart SC2 INNER JOIN
			(SELECT DISTINCT
			        SUBSTRING(l.List, v.Number+1, CHARINDEX(',', l.List, v.Number+1) -v.Number-1) AS Requires
			   FROM Master.dbo.spt_Values v
			  CROSS JOIN
			        (SELECT ',' + RTRIM(REPLACE(Requires, ', ', ',')) + ',' AS List
				FROM IMS.NewMemberShoppingCart
				WHERE TrackingNum = @TrackingNum AND ProductID = IMS.NewMemberShoppingCart.ProductID) l
			  WHERE v.Type = 'P'
			    AND v.Number BETWEEN 1 AND LEN(l.List)-1
			    AND SUBSTRING(l.List, v.Number, 1)=',') FN ON SC2.ProductID = FN.Requires
			WHERE TrackingNum = @TrackingNum AND SC2.ProductID <> IMS.NewMemberShoppingCart.ProductID) = 0
END

IF @SyncMode = 'C' OR @SyncMode = 'B' OR @SyncMode = 'Y'
BEGIN
	--Update subaccounts with changes in the cart records
	UPDATE IMS.NewMemberSubAccount
	SET Amount = (SELECT RequestedAmount + IsNull(InsuranceAmount1, 0) + IsNull(InsuranceAmount2, 0) FROM IMS.NewMemberShoppingCart
				WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberSubAccount.ShoppingCartID)
	WHERE TrackingNum = @TrackingNum AND
		ShoppingCartID IN (SELECT ID FROM IMS.NewMemberShoppingCart WHERE TrackingNum = @TrackingNum) AND
		IsNull((SELECT LineOfCredit FROM IMS.udt_LSubAccounts WHERE UniqueID = IMS.NewMemberSubAccount.SubAccountType), 'N') = 'N' AND
		(SELECT RequestedAmount + IsNull(InsuranceAmount1, 0) + IsNull(InsuranceAmount2, 0) FROM IMS.NewMemberShoppingCart WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberSubAccount.ShoppingCartID) <> IMS.NewMemberSubAccount.Amount

	UPDATE IMS.NewMemberSubAccount
	SET CreditLimit = (SELECT RequestedAmount + IsNull(InsuranceAmount1, 0) + IsNull(InsuranceAmount2, 0) FROM IMS.NewMemberShoppingCart
				WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberSubAccount.ShoppingCartID)
	WHERE TrackingNum = @TrackingNum AND
		ShoppingCartID IN (SELECT ID FROM IMS.NewMemberShoppingCart WHERE TrackingNum = @TrackingNum) AND
		(SELECT LineOfCredit FROM IMS.udt_LSubAccounts WHERE UniqueID = IMS.NewMemberSubAccount.SubAccountType) = 'Y' AND
		(SELECT RequestedAmount + IsNull(InsuranceAmount1, 0) + IsNull(InsuranceAmount2, 0) FROM IMS.NewMemberShoppingCart WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberSubAccount.ShoppingCartID) <> IMS.NewMemberSubAccount.CreditLimit

	UPDATE IMS.NewMemberSubAccount
	SET Term = (SELECT Term FROM IMS.NewMemberShoppingCart
				WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberSubAccount.ShoppingCartID)
	WHERE TrackingNum = @TrackingNum AND
		ShoppingCartID IN (SELECT ID FROM IMS.NewMemberShoppingCart WHERE TrackingNum = @TrackingNum)

	--Create subaccount records for new cart items
	INSERT INTO IMS.NewMemberSubAccount
	(TrackingNum, Sequence, DescAbrv, SubAccountType, Description, ACC, CollateralCode, SLType, Amount,
	Approval, Created, CreatedBy, CreatedOn, ProductType,
	CreditLimit, StartSuffix, StopSuffix, APR, CashAdvanceAPR, SkipCode, Coupons, Term, Method,
	Frequency, InsCode, DisclosureCode, ReviewDate, MaturityDate, Officer, CurrBranch, StatementOrder, MaturityDisp, 
	DividendDisp, LineofCredit, PaymentPercent, AllowPlastic1, AllowPlastic2, AllowPlastic3, AllowPlastic4, 
	CreateHost, HostCommand, ServiceClass, TaxCode, JointTaxCode, W8TaxCode, KTransferLink, LoanDiscounts, 
	MICRBegin, MICREnd, MICRFormat, PromptMICR, Purpose, FundingOrder, VRLIndex, VRLMargin, 
	VRLCode, VRLFreq, LOSProductID, LOSID, LossFlag, ClosedFlag, ShoppingCartID, Action, Payment)
	SELECT @TrackingNum AS TrackingNum, (SELECT Count(ID) FROM IMS.NewMemberShoppingCart SC2 WHERE TrackingNum = @TrackingNum AND SC2.Approved = 'Y' AND 
		SC2.ProductID NOT IN (SELECT SubAccountType FROM IMS.NewMemberSubAccount SA2 WHERE TrackingNum = @TrackingNum) AND SC2.ID <= SC.ID) + 
		(SELECT IsNull(Max(Sequence), 0) FROM IMS.NewMemberSubAccount SA3 WHERE TrackingNum = @TrackingNum) AS Sequence,
	Prod.DescAbrv, Prod.UniqueID, Prod.Description, Prod.ACC, Prod.CollateralCode, Prod.SLType,
	CASE WHEN Prod.LineOfCredit = 'Y' THEN 0
	     ELSE SC.RequestedAmount + IsNull(SC.InsuranceAmount1, 0) + IsNull(SC.InsuranceAmount2, 0)
	END AS Amount, NMR.Approval, SC.Created, SC.CreatedBy, SC.CreatedOn, Prod.ProductType,
	CASE WHEN Prod.LineOfCredit = 'Y' THEN SC.RequestedAmount
	     ELSE 0
	END AS CreditLimit, Prod.StartSuffix, Prod.StopSuffix, Prod.APR, Prod.CashAdvanceAPR, Prod.SkipCode, Prod.Coupons, Prod.Term, Prod.Method,
	Prod.Frequency, Prod.InsCode, Prod.DisclosureCode, Prod.ReviewDate, Prod.MaturityDate, Prod.Officer, Prod.CurrBranch, Prod.StatementOrder, Prod.MaturityDisp, 
	Prod.DividendDisp, Prod.LineofCredit, Prod.PaymentPercent, Prod.AllowPlastic1, Prod.AllowPlastic2, Prod.AllowPlastic3, Prod.AllowPlastic4, 
	Prod.CreateHost, Prod.HostCommand, Prod.ServiceClass, Prod.TaxCode,Prod.JointTaxCode, Prod.W8TaxCode, Prod.KTransferLink, Prod.LoanDiscounts, 
	Prod.MICRBegin, Prod.MICREnd, Prod.MICRFormat, Prod.PromptMICR, Prod.Purpose, Prod.FundingOrder, Prod.VRLIndex, Prod.VRLMargin, 
	Prod.VRLCode, Prod.VRLFreq, SC.LOSProductID, SC.LOSID, SC.LossFlag, SC.ClosedFlag, SC.ID AS ShoppingCartID, Prod.Action, 0
	FROM IMS.NewMemberShoppingCart SC INNER JOIN
		IMS.NewMemberRequest NMR ON SC.TrackingNum = NMR.TrackingNum INNER JOIN
		IMS.udt_AllSubAccounts Prod ON SC.ProductID = Prod.UniqueID AND ',' + RTrim(Prod.AccountTypes) + ',' LIKE '%,' + RTrim(NMR.AccountType) + ',%'
	WHERE SC.TrackingNum = @TrackingNum AND SC.Approved = 'Y' AND SC.ProductID NOT IN (SELECT SubAccountType FROM IMS.NewMemberSubAccount WHERE TrackingNum = @TrackingNum)
	ORDER BY ID
	
	--Delete products that require products that are no longer here
	DELETE NewMemberSubAccount FROM IMS.NewMemberSubAccount SA
	WHERE TrackingNum = @TrackingNum AND
		(SELECT NullIf(Requires, '') FROM IMS.udt_AllSubAccounts WHERE UniqueID = SA.SubAccountType) IS NOT NULL AND
		(SELECT Count(SA2.ID) FROM IMS.NewMemberSubAccount SA2 INNER JOIN
			(SELECT DISTINCT
			        SUBSTRING(l.List, v.Number+1, CHARINDEX(',', l.List, v.Number+1) -v.Number-1) AS Requires
			   FROM Master.dbo.spt_Values v
			  CROSS JOIN
			        (SELECT ',' + RTRIM(REPLACE(Requires, ', ', ',')) + ',' AS List
				FROM IMS.udt_AllSubAccounts
				WHERE UniqueID = SA.SubAccountType) l
			  WHERE v.Type = 'P'
			    AND v.Number BETWEEN 1 AND LEN(l.List)-1
			    AND SUBSTRING(l.List, v.Number, 1)=',') FN ON SA2.SubAccountType = FN.Requires
			WHERE TrackingNum = @TrackingNum AND SA2.SubAccountType <> SA.SubAccountType) = 0

	--Delete subaccounts that came from shopping cart items that are no longer approved
	DELETE FROM IMS.NewMemberSubAccount
	WHERE TrackingNum = @TrackingNum AND ((ID IN (SELECT SubAccountID
		FROM IMS.NewMemberShoppingCart
		WHERE TrackingNum = @TrackingNum AND SubAccountID IS NOT NULL AND
			Approved = 'N')) OR (ShoppingCartID IS NOT NULL AND 
		ShoppingCartID IN (SELECT ID
		FROM IMS.NewMemberShoppingCart
		WHERE TrackingNum = @TrackingNum AND Approved = 'N')))

	UPDATE IMS.NewMemberShoppingCart
	SET SubAccountID = NULL
	WHERE TrackingNum = @TrackingNum AND Approved = 'N'

	--Delete plastic cards for subaccounts that no longer exist
	DELETE FROM IMS.NewMemberPlasticCard
	WHERE TrackingNum = @TrackingNum AND Sequence IN (SELECT PlasticCardSequence
		FROM IMS.NewMemberSubAccountLink
		WHERE TrackingNum = @TrackingNum AND SubSequence NOT IN (SELECT Sequence
			FROM IMS.NewMemberSubAccount
			WHERE TrackingNum = @TrackingNum))

	DELETE FROM IMS.NewMemberSubAccountLink
	WHERE TrackingNum = @TrackingNum AND SubSequence NOT IN (SELECT Sequence
		FROM IMS.NewMemberSubAccount
		WHERE TrackingNum = @TrackingNum)

	--Delete flags for subaccounts that no longer exist
	DELETE FROM IMS.NewMemberFlag
	WHERE TrackingNum = @TrackingNum AND IsNull(SubAccountSequence, 0) > 0 AND
		SubAccountSequence NOT IN (SELECT Sequence
		FROM IMS.NewMemberSubAccount
		WHERE TrackingNum = @TrackingNum)

	--Delete joint owner links for subaccounts that no longer exist
	DELETE FROM IMS.NewMemberJointLink
	WHERE TrackingNum = @TrackingNum AND SubAccountSequence NOT IN (SELECT Sequence
		FROM IMS.NewMemberSubAccount
		WHERE TrackingNum = @TrackingNum)

	--Delete overdraft links for subaccount that no longer exist
	DELETE FROM IMS.NewMemberOverdraftLink
	WHERE TrackingNum = @TrackingNum AND ((TargetSubAccount > 0 AND
		TargetSubAccount NOT IN (SELECT Sequence
		FROM IMS.NewMemberSubAccount
		WHERE TrackingNum = @TrackingNum)) OR (SourceSubAccount > 0 AND
		SourceSubAccount NOT IN (SELECT Sequence
		FROM IMS.NewMemberSubAccount
		WHERE TrackingNum = @TrackingNum)))
END

--Synchronize IDs
UPDATE IMS.NewMemberSubAccount
SET ShoppingCartID = (SELECT ID FROM IMS.NewMemberShoppingCart
			WHERE TrackingNum = @TrackingNum AND SubAccountID = IMS.NewMemberSubAccount.ID)
WHERE TrackingNum = @TrackingNum AND (SELECT ID FROM IMS.NewMemberShoppingCart
			WHERE TrackingNum = @TrackingNum AND SubAccountID = IMS.NewMemberSubAccount.ID) IS NOT NULL

UPDATE IMS.NewMemberShoppingCart
SET SubAccountID = (SELECT ID FROM IMS.NewMemberSubAccount
			WHERE TrackingNum = @TrackingNum AND ShoppingCartID = IMS.NewMemberShoppingCart.ID)
WHERE TrackingNum = @TrackingNum AND (SELECT ID FROM IMS.NewMemberSubAccount
			WHERE TrackingNum = @TrackingNum AND ShoppingCartID = IMS.NewMemberShoppingCart.ID) IS NOT NULL
GO
/****** Object:  StoredProcedure [IMS].[spCCCU_UnreconciledFunding_Select]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		Jonathan Eagar
-- Create date: 5/08/2009
-- Description:	Returns all unreconciled transactions
-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_UnreconciledFunding_Select
-- =============================================
CREATE PROCEDURE [IMS].[spCCCU_UnreconciledFunding_Select] 
	-- Add the parameters for the stored procedure here
	@AccountNumber bigint
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
    -- Insert statements for procedure here
     -- Insert statements for procedure here
    IF ISNULL(@AccountNumber, 0) = 0  
    BEGIN
		SELECT	FS.AccountNumber, 
				FS.FundingTransactionID, 
				FS.TrackingNum, 
				FS.GatewayPaymentID, 
				FS.GatewayPaymentStatus, 
				FS.FundingAccountID, 
				FS.FundingType, 
				FS.TargetSubAccountSeq, 
				FS.TargetSubAccountSuffix, 
				FS.TransferAmount, 
				FS.DateTimeCreated, 
				FS.DateTimeLastTransaction,
				FS.MemberName,
				FS.SourceBankName,
				FS.SourceBankRouting,
				FS.SourceAccountLast4,
				FS.SourceCardType
		FROM
		(
			SELECT	VF.AccountNumber, 
					VF.FundingTransactionID , 
					VF.TrackingNum, 
					VF.GatewayPaymentID, 
					PS.PaymentStatus as GatewayPaymentStatus, 
					VF.FundingAccountID, 
					VF.FundingType, 
					VF.TargetSubAccountSeq, 
					VF.TargetSubAccountSuffix, 
					VF.TransferAmount, 
					VF.DateTimeCreated, 
					VF.DateTimeLastTransaction,
					VF.MemberName,
					VF.SourceBankName,
					VF.SourceBankRouting,
					VF.SourceAccountLast4,
					VF.SourceCardType
			FROM
			(	
				(
					SELECT	F.AccountNumber, 
							FT.ID as FundingTransactionID, 
							FT.TrackingNum, 
							FT.GatewayPaymentID, 
							FB.ID as FundingAccountID, 
							FT.FundingType, 
							FT.TargetSubAccountSeq,	
							FT.TargetSubAccountSuffix, 
							FT.Amount as TransferAmount, 
							FT.DateTimeCreated, 
							FT.DateTimeLastTransaction,
							NMR.FName + ' ' + NMR.LName as MemberName,
							FB.BankName as SourceBankName,
							FB.RoutingNumber as SourceBankRouting,
							FB.AccountNumberLast4 as SourceAccountLast4,
							'' as SourceCardType
					FROM IMS.NewMemberRequest as NMR 
					INNER JOIN IMS.NMRFundingTransaction AS FT ON NMR.TrackingNum = FT.TrackingNum
					INNER JOIN IMS.NMRFundingBank AS FB ON FT.FundingBankID = FB.ID 
					INNER JOIN IMS.NMRFunding as F ON F.ID = FB.FundingID 
					WHERE FT.DateTimeReconciled IS NULL
				)
				UNION ALL
				(
					SELECT F.AccountNumber, 
					FT.ID as FundingTransactionID, 
					FT.TrackingNum, 
					FT.GatewayPaymentID, 
					FC.ID as FundingAccountID, 
					FT.FundingType, 
					FT.TargetSubAccountSeq,	
					FT.TargetSubAccountSuffix, 
					FT.Amount as TransferAmount, 
					FT.DateTimeCreated, 
					FT.DateTimeLastTransaction,
					NMR.FName + ' ' + NMR.LName as MemberName,
					'' as SourceBankName,
					'' as SourceBankRouting,
					FC.AccountNumberLast4 as SourceAccountLast4,
					FC.CardType as SourceCardType
					FROM IMS.NewMemberRequest as NMR 
					INNER JOIN IMS.NMRFundingTransaction AS FT ON NMR.TrackingNum = FT.TrackingNum
					INNER JOIN IMS.NMRFundingCard AS FC ON FT.FundingCardID = FC.ID 
					INNER JOIN IMS.NMRFunding as F ON F.ID = FC.FundingID 
					WHERE FT.DateTimeReconciled IS NULL
				)
			)AS VF LEFT OUTER JOIN IMS.USAePayPaymentStatus AS PS ON VF.GatewayPaymentID = PS.PaymentId
		) AS FS	ORDER BY DateTimeCreated
    END		
    ELSE
	BEGIN    
		SELECT	FS.AccountNumber, 
				FS.FundingTransactionID, 
				FS.TrackingNum, 
				FS.GatewayPaymentID, 
				FS.GatewayPaymentStatus, 
				FS.FundingAccountID, 
				FS.FundingType, 
				FS.TargetSubAccountSeq, 
				FS.TargetSubAccountSuffix, 
				FS.TransferAmount, 
				FS.DateTimeCreated, 
				FS.DateTimeLastTransaction,
				FS.MemberName,
				FS.SourceBankName,
				FS.SourceBankRouting,
				FS.SourceAccountLast4,
				FS.SourceCardType
		FROM
		(
			SELECT	VF.AccountNumber, 
					VF.FundingTransactionID, 
					VF.TrackingNum, 
					VF.GatewayPaymentID, 
					PS.PaymentStatus as GatewayPaymentStatus, 
					VF.FundingAccountID, 
					VF.FundingType, 
					VF.TargetSubAccountSeq, 
					VF.TargetSubAccountSuffix, 
					VF.TransferAmount, 
					VF.DateTimeCreated, 
					VF.DateTimeLastTransaction,
					VF.MemberName,
					VF.SourceBankName,
					VF.SourceBankRouting,
					VF.SourceAccountLast4,
					VF.SourceCardType
			FROM
			(	
				(
					SELECT	F.AccountNumber, 
							FT.ID as FundingTransactionID, 
							FT.TrackingNum, 
							FT.GatewayPaymentID, 
							FB.ID as FundingAccountID, 
							FT.FundingType, 
							FT.TargetSubAccountSeq,	
							FT.TargetSubAccountSuffix, 
							FT.Amount as TransferAmount, 
							FT.DateTimeCreated, 
							FT.DateTimeLastTransaction,
							NMR.FName + ' ' + NMR.LName as MemberName,
							FB.BankName as SourceBankName,
							FB.RoutingNumber as SourceBankRouting,
							FB.AccountNumberLast4 as SourceAccountLast4,
							'' as SourceCardType
					FROM IMS.NewMemberRequest as NMR 
					INNER JOIN IMS.NMRFundingTransaction AS FT ON NMR.TrackingNum = FT.TrackingNum
					INNER JOIN IMS.NMRFundingBank AS FB ON FT.FundingBankID = FB.ID 
					INNER JOIN IMS.NMRFunding as F ON F.ID = FB.FundingID 
					WHERE F.AccountNumber = @AccountNumber AND FT.DateTimeReconciled IS NULL
				)
				UNION ALL
				(
					SELECT	F.AccountNumber, 
							FT.ID as FundingTransactionID, 
							FT.TrackingNum, FT.GatewayPaymentID, 
							FC.ID as FundingAccountID, 
							FT.FundingType, 
							FT.TargetSubAccountSeq,	
							FT.TargetSubAccountSuffix, 
							FT.Amount as TransferAmount, 
							FT.DateTimeCreated, 
							FT.DateTimeLastTransaction,
							NMR.FName + ' ' + NMR.LName as MemberName,
							'' as SourceBankName,
							'' as SourceBankRouting,
							FC.AccountNumberLast4 as SourceAccountLast4,
							FC.CardType as SourceCardType
					FROM IMS.NewMemberRequest as NMR 
					INNER JOIN IMS.NMRFundingTransaction AS FT ON NMR.TrackingNum = FT.TrackingNum
					INNER JOIN IMS.NMRFundingCard AS FC ON FT.FundingCardID = FC.ID 
					INNER JOIN IMS.NMRFunding as F ON F.ID = FC.FundingID 
					WHERE F.AccountNumber = @AccountNumber AND FT.DateTimeReconciled IS NULL
				)
			)AS VF LEFT OUTER JOIN IMS.USAePayPaymentStatus AS PS ON VF.GatewayPaymentID = PS.PaymentId
		) AS FS	ORDER BY DateTimeCreated
    END		
END

GO
/****** Object:  StoredProcedure [IMS].[spCCCU_UnreconciledVerification_Select]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_UnreconciledVerification_Select
CREATE PROCEDURE [IMS].[spCCCU_UnreconciledVerification_Select]
	-- Add the parameters for the stored procedure here
	@AccountNumber bigint
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
    IF ISNULL(@AccountNumber, 0) = 0  
    BEGIN
		SELECT      NMRFunding.AccountNumber, NMRFundingBank.ID as FundingBankID, IMS.fnCCCU_GetUSAePayPaymentStatus(NMRFundingBank.GatewayPaymentID1) as GatewayPaymentStatus1, IMS.fnCCCU_GetUSAePayPaymentStatus(NMRFundingBank.GatewayPaymentID2) as GatewayPaymentStatus2, NMRFundingBank.TrackingNum, NMRFundingBank.AccountNumberLast4, 
						  NMRFundingBank.BankName, NMRFundingBank.AccountType, NMRFundingBank.Amount1, NMRFundingBank.Amount2, 
						  NMRFundingBank.PSIErrorMessage, NMRFundingBank.DateTimeCreated, NMRFundingBank.DateTimeExported, NMRFundingBank.DateTimeLastTransaction
		FROM         NMRFundingBank INNER JOIN
						  NMRFunding ON NMRFundingBank.FundingID = NMRFunding.ID
		WHERE     (NMRFundingBank.DateTimeVerificationReconciled IS NULL AND NMRFundingBank.VerificationStatus = 'V')
    END
    ELSE
	BEGIN    
		SELECT      NMRFunding.AccountNumber, NMRFundingBank.ID as FundingBankID, IMS.fnCCCU_GetUSAePayPaymentStatus(NMRFundingBank.GatewayPaymentID1) as GatewayPaymentStatus1, IMS.fnCCCU_GetUSAePayPaymentStatus(NMRFundingBank.GatewayPaymentID2) as GatewayPaymentStatus2, NMRFundingBank.TrackingNum, NMRFundingBank.AccountNumberLast4, 
						  NMRFundingBank.BankName, NMRFundingBank.AccountType, NMRFundingBank.Amount1, NMRFundingBank.Amount2, 
						  NMRFundingBank.PSIErrorMessage, NMRFundingBank.DateTimeCreated, NMRFundingBank.DateTimeExported, NMRFundingBank.DateTimeLastTransaction
		FROM         NMRFundingBank INNER JOIN
						  NMRFunding ON NMRFundingBank.FundingID = NMRFunding.ID
		WHERE     (NMRFunding.AccountNumber = @AccountNumber AND DateTimeVerificationReconciled IS NULL AND NMRFundingBank.VerificationStatus = 'V')       
    END	
END


GO
/****** Object:  StoredProcedure [IMS].[spCFCU_D01Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCFCU_D01Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @docsubname CHAR(100)
DECLARE @newdocsub CHAR(100)
DECLARE @count INT
DECLARE @docindex INT
DECLARE curs CURSOR LOCAL FAST_FORWARD FOR

	SELECT '' AS docsubname
	FROM NewMemberRequest AS NMR
	WHERE NMR.TrackingNum = @TrackingNum

OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @newdocsub = 'Membership Application ' + @docsubname
IF @docsubname Is Null
BEGIN
	SET @newdocsub = 'Membership Application'
END
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
	WHILE @@FETCH_STATUS = 0
	BEGIN
		SET @count = @count + 1
		PRINT @count
			IF @count = 1
		BEGIN
			Set @docindex = @docindex + 1
				 INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
		END
			FETCH NEXT FROM curs INTO @docsubname
		PRINT @docsubname
		IF @@FETCH_STATUS = 0
		BEGIN
			SET @newdocsub = (RTRIM(@newdocsub) + ', ' + RTRIM(@docsubname))
			PRINT @newdocsub
			UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex
		END
	END
CLOSE curs
DEALLOCATE curs
SELECT 'MembershipApplication' AS DocCode, * FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
DELETE FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCFCU_D01Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [IMS].[spCFCU_D01Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @joseq INT
DECLARE @jotype CHAR(2)
DECLARE @jo1seq INT
DECLARE @jo2seq INT
DECLARE @jo3seq INT
DECLARE @jo4seq INT
DECLARE @be1seq INT
DECLARE @be2seq INT
DECLARE @be3seq INT
DECLARE @be4seq INT
DECLARE @jocount INT
DECLARE @becount INT
SET @jo1seq = 0
SET @jo2seq = 0
SET @jocount = 0

DECLARE curs2 CURSOR FOR
	SELECT CONVERT(INT, JO.Sequence), JO.JointOwnerType
	FROM NewMemberJointOwner AS JO
	WHERE JO.TrackingNum = @TrackingNum AND (JO.JointOwnerType IN ('JO', 'PD')) ORDER BY JO.Sequence

OPEN curs2
FETCH NEXT FROM curs2 INTO @joseq, @jotype
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
		IF @jotype IN ('JO', 'PD')
		BEGIN
			SET @jocount = @jocount + 1
			IF @jocount = 1
			BEGIN
				SET @jo1seq = @joseq
			END
			IF @jocount = 2
			BEGIN
				SET @jo2seq = @joseq
			END
		END
      	FETCH NEXT FROM curs2 INTO @joseq, @jotype
   END
CLOSE curs2
DEALLOCATE curs2

SELECT @DocIndex As DocIndex
	, RTRIM(NMR.Account) AS Account
	, CONVERT(CHAR(10), NMR.DOB, 101) AS DOB
	, CASE WHEN NMR.AccountClass = 'P' THEN LEFT(NMR.SSN, 3) + '-' + LEFT(RIGHT(NMR.SSN, 6), 2) + '-' + RIGHT(NMR.SSN, 4) ELSE LEFT(NMR.SSN, 2) + '-' + RIGHT(NMR.SSN, 7) END AS SSN
	, 'SSN' AS SSNType
	, RTRIM(RTRIM(NMR.OrganizationName)) + RTRIM(NMR.FName) + ' ' + RTRIM(NMR.LName) + ' ' + NMR.MECHTag AS FullName
	, CASE NMR.AccountClass
		WHEN 'O' THEN RTRIM(RTRIM(Work.Address1) + CASE ISNULL(Work.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Work.Address2) END + CASE ISNULL(Work.Address3, '') WHEN '' THEN ' ' ELSE ', ' + RTRIM(Work.Address3) END)
		ELSE RTRIM(RTRIM(Home.Address1) + CASE ISNULL(Home.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Home.Address2) END + CASE ISNULL(Home.Address3, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Home.Address3) END)
	  END AS Address
	, CASE NMR.AccountClass
		WHEN 'O' THEN Work.City
		ELSE Home.City
	  END AS City
	, CASE NMR.AccountClass
		WHEN 'O' THEN Work.State
		ELSE Home.State
	  END AS State
	, CASE NMR.AccountClass
		WHEN 'O' THEN CASE LEN(Work.Zip) WHEN 9 THEN LEFT(Work.zip, 5) + '-' + Right(Work.Zip, 4) ELSE Work.Zip END
		ELSE CASE LEN(Home.Zip) WHEN 9 THEN LEFT(Home.zip, 5) + '-' + Right(Home.Zip, 4) ELSE Home.Zip END
	  END AS Zip		
	, Home.AreaCode + '-' + LEFT(Home.Phone, 3) + '-' + RIGHT(RTRIM(Home.Phone), 4)  AS HPhoneFull
	, Work.AreaCode + '-' + LEFT(Work.Phone, 3) + '-' + RIGHT(RTRIM(Work.Phone), 4)  AS WPhoneFull
	-- , ID Stuff Will Go Here
	, CASE WHEN NMR.IDType = 'D'
		THEN 'Driver''s License'
		ELSE RTRIM(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(NMR.IDSource, 'STATE', 'State ID Card'), 'RESALIEN', 'Resident Alien Card'), 'USPASSPORT', 'US Passport'), 'FORPASSPORT', 'Foreign Passport'), 'MINOR', 'Child Birth Certificate/Social'))
		END AS ID1Type
	, '' AS ID1Description
	, UPPER(CASE WHEN NMR.IDType = 'D'
		THEN RTRIM(NMR.DriversLicenseNum)
		ELSE CASE WHEN RIGHT(LEFT(NMR.IDNumber, 3), 1) = '-' THEN RTRIM(RIGHT(RTRIM(NMR.IDNumber), LEN(RTRIM(NMR.IDNumber))-3)) ELSE RTRIM(NMR.IDNumber) END
		END) AS ID1Number
	, CONVERT(CHAR(10), NMR.IDIssueDate, 101) AS ID1IssueDate
	, UPPER(CASE WHEN NMR.IDType = 'D'
		THEN RTRIM(NMR.DriversLicenseState)
		ELSE ''
		END) AS ID1Issuer
	, CONVERT(CHAR(10), NMR.IDExpirationDate, 101) AS ID1ExpirationDate
	, '' AS ID2Type
	, '' AS ID2Description
	, '' AS ID2Number
	, '' AS ID2IssueDate
	, '' AS ID2Issuer
	, '' AS ID2ExpirationDate
	, CASE NMR.AccountClass WHEN 'P' THEN UPPER(RTRIM(Work.EmployerName) + '/' + RTRIM(Work.JobTitle)) ELSE '' END AS EmployerName
	, Home.CellPhoneAC + '-' + LEFT(Home.CellPhone, 3) + '-' + RIGHT(RTRIM(Home.CellPhone), 4)  AS CPhoneFull
	, UPPER(RTRIM(NMR.MaidenName)) AS MaidenName
	, '' AS FamilyName
	, '' AS AccountNotes
	, CASE WHEN NMR.Qualification1 = 'Location' OR NMR.Qualification3 = 'Location'
		THEN 'Location: ' + RTRIM(NMR.Department)
		WHEN NMR.Qualification3 = 'Family'
		THEN 'Family: ' + RTRIM(NMR.Qualification2)
		END AS Eligibility
	, RTRIM(NMR.Email1) AS Email

	, UPPER(RTRIM(JO1.FullName)) AS JO1FullName
	, UPPER(RTRIM(JO1.SSN)) AS JO1SSN
	, 'SSN' AS JO1SSNType
	, UPPER(RTRIM(JO1.Address)) AS JO1Address
	, UPPER(RTRIM(CONVERT(CHAR(10), JO1.DOB, 101))) AS JO1DOB
	, UPPER(RTRIM(JO1.City)) AS JO1City
	, UPPER(RTRIM(JO1.State)) AS JO1State
	, UPPER(RTRIM(JO1.Zip)) AS JO1Zip
	, UPPER(RTRIM(JO1.HPhoneFull)) AS JO1HPhoneFull
	, UPPER(RTRIM(JO1.WPhoneFull)) AS JO1WPhoneFull
	, RTRIM(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(JO1.IDSource, 'STATE', 'State ID Card'), 'RESALIEN', 'Resident Alien Card'), 'USPASSPORT', 'US Passport'), 'FORPASSPORT', 'Foreign Passport'), 'MINOR', 'Child Birth Certificate/Social')) AS JO1ID1Type
	, '' AS JO1ID1Description
	, UPPER(RTRIM(JO1.IDNumber)) AS JO1ID1Number
	, CONVERT(CHAR(10), JO1.IDIssueDate, 101) AS JO1ID1IssueDate
	, UPPER(RTRIM(JO1.IDState)) AS JO1ID1Issuer
	, CONVERT(CHAR(10), JO1.IDExpireDate, 101) AS JO1ID1ExpirationDate
	, '' AS JO1ID2Type
	, '' AS JO1ID2Description
	, '' AS JO1ID2Number
	, '' AS JO1ID2IssueDate
	, '' AS JO1ID2Issuer
	, '' AS JO1ID2ExpirationDate
	, UPPER(RTRIM(JO1.EmployerName) + '/' + RTRIM(JO1.JobTitle)) AS JO1EmployerName
	, UPPER(RTRIM(JO1.CPhoneFull)) AS JO1CPhoneFull
	, '' AS JO1MaidenName
	, LOWER(RTRIM(JO1.Email)) AS JO1Email


	, UPPER(RTRIM(JO2.FullName)) AS JO2FullName
	, UPPER(RTRIM(JO2.SSN)) AS JO2SSN
	, 'SSN' AS JO2SSNType
	, UPPER(RTRIM(JO2.Address)) AS JO2Address
	, UPPER(RTRIM(CONVERT(CHAR(10), JO2.DOB, 101))) AS JO2DOB
	, UPPER(RTRIM(JO2.City)) AS JO2City
	, UPPER(RTRIM(JO2.State)) AS JO2State
	, UPPER(RTRIM(JO2.Zip)) AS JO2Zip
	, UPPER(RTRIM(JO2.HPhoneFull)) AS JO2HPhoneFull
	, UPPER(RTRIM(JO2.WPhoneFull)) AS JO2WPhoneFull
	, RTRIM(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(JO2.IDSource, 'STATE', 'State ID Card'), 'RESALIEN', 'Resident Alien Card'), 'USPASSPORT', 'US Passport'), 'FORPASSPORT', 'Foreign Passport'), 'MINOR', 'Child Birth Certificate/Social')) AS JO2ID1Type
	, '' AS JO2ID1Description
	, UPPER(RTRIM(JO2.IDNumber)) AS JO2ID1Number
	, CONVERT(CHAR(10), JO2.IDIssueDate, 101) AS JO2ID1IssueDate
	, UPPER(RTRIM(JO2.IDState)) AS JO2ID1Issuer
	, CONVERT(CHAR(10), JO2.IDExpireDate, 101) AS JO2ID1ExpirationDate
	, '' AS JO2ID2Type
	, '' AS JO2ID2Description
	, '' AS JO2ID2Number
	, '' AS JO2ID2IssueDate
	, '' AS JO2ID2Issuer
	, '' AS JO2ID2ExpirationDate
	, UPPER(RTRIM(JO2.EmployerName) + '/' + RTRIM(JO2.JobTitle)) AS JO2EmployerName
	, UPPER(RTRIM(JO2.CPhoneFull)) AS JOCPhoneFull
	, '' AS JO2MaidenName
	, LOWER(RTRIM(JO2.Email)) AS JO2Email

	, '807' AS TellerNumber
	, CONVERT(CHAR(10), NMR.ApplyDate, 101) AS ApplyDate
	, 'x' AS Check_Dnsmi
	, 'x' AS Check_CoTIN
FROM NewMemberRequest AS NMR
	LEFT OUTER JOIN NewMemberHome AS Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork AS Work On NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN NewMemberAddress AS Addr On NMR.TrackingNum = Addr.TrackingNum
	LEFT OUTER JOIN IMS.Departments AS DEPT ON NMR.Department = DEPT.Department
	LEFT OUTER JOIN udt_AccountTypes AS AT ON AT.TypeCode = NMR.AccountType
	LEFT OUTER JOIN fnCFCU_GetJO(@TrackingNum, @jo1seq) As JO1 ON NMR.TrackingNum = JO1.TrackingNum
	LEFT OUTER JOIN fnCFCU_GetJO(@TrackingNum, @jo2seq) As JO2 ON NMR.TrackingNum = JO2.TrackingNum
WHERE NMR.TrackingNum = @TrackingNum
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCFCU_D51Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCFCU_D51Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @docsubname CHAR(100)
DECLARE @newdocsub CHAR(100)
DECLARE @count INT
DECLARE @docindex INT
DECLARE curs CURSOR LOCAL FAST_FORWARD FOR

	SELECT '' AS docsubname
	FROM NewMemberRequest AS NMR
	WHERE NMR.TrackingNum = @TrackingNum --AND NMR.Processed = 999 AND NMR.Created IN ('Y', 'I')

OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @newdocsub = 'Disclosure ' + @docsubname
IF @docsubname Is Null
BEGIN
	SET @newdocsub = 'Disclosure'
END
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
	WHILE @@FETCH_STATUS = 0
	BEGIN
		SET @count = @count + 1
		PRINT @count
			IF @count = 1
		BEGIN
			Set @docindex = @docindex + 1
				 INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
		END
			FETCH NEXT FROM curs INTO @docsubname
		PRINT @docsubname
		IF @@FETCH_STATUS = 0
		BEGIN
			SET @newdocsub = (RTRIM(@newdocsub) + ', ' + RTRIM(@docsubname))
			PRINT @newdocsub
			UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex
		END
	END
CLOSE curs
DEALLOCATE curs
SELECT 'Disclosure' AS DocCode, * FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
DELETE FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCFCU_D51Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCFCU_D51Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

SELECT @DocIndex As DocIndex

FROM NewMemberRequest AS NMR
WHERE NMR.TrackingNum = @TrackingNum
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCFCU_D52Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCFCU_D52Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @docsubname CHAR(100)
DECLARE @newdocsub CHAR(100)
DECLARE @count INT
DECLARE @docindex INT
DECLARE curs CURSOR LOCAL FAST_FORWARD FOR

	SELECT '' AS docsubname
	FROM NewMemberRequest AS NMR
	WHERE NMR.TrackingNum = @TrackingNum --AND NMR.Processed = 999 AND NMR.Created IN ('Y', 'I')

OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @newdocsub = 'Fee Sheet ' + @docsubname
IF @docsubname Is Null
BEGIN
	SET @newdocsub = 'Fee Sheet'
END
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
	WHILE @@FETCH_STATUS = 0
	BEGIN
		SET @count = @count + 1
		PRINT @count
			IF @count = 1
		BEGIN
			Set @docindex = @docindex + 1
				 INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
		END
			FETCH NEXT FROM curs INTO @docsubname
		PRINT @docsubname
		IF @@FETCH_STATUS = 0
		BEGIN
			SET @newdocsub = (RTRIM(@newdocsub) + ', ' + RTRIM(@docsubname))
			PRINT @newdocsub
			UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex
		END
	END
CLOSE curs
DEALLOCATE curs
SELECT 'FeeSheet' AS DocCode, * FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
DELETE FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCFCU_D52Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCFCU_D52Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

SELECT @DocIndex As DocIndex

FROM NewMemberRequest AS NMR
WHERE NMR.TrackingNum = @TrackingNum
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCFCU_D53Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCFCU_D53Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @docsubname CHAR(100)
DECLARE @newdocsub CHAR(100)
DECLARE @count INT
DECLARE @docindex INT
DECLARE curs CURSOR LOCAL FAST_FORWARD FOR

	SELECT '' AS docsubname
	FROM NewMemberRequest AS NMR
	WHERE NMR.TrackingNum = @TrackingNum --AND NMR.Processed = 999 AND NMR.Created IN ('Y', 'I')

OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @newdocsub = 'Payroll Authorization Form ' + @docsubname
IF @docsubname Is Null
BEGIN
	SET @newdocsub = 'Payroll Authorization Form'
END
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
	WHILE @@FETCH_STATUS = 0
	BEGIN
		SET @count = @count + 1
		PRINT @count
			IF @count = 1
		BEGIN
			Set @docindex = @docindex + 1
				 INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
		END
			FETCH NEXT FROM curs INTO @docsubname
		PRINT @docsubname
		IF @@FETCH_STATUS = 0
		BEGIN
			SET @newdocsub = (RTRIM(@newdocsub) + ', ' + RTRIM(@docsubname))
			PRINT @newdocsub
			UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex
		END
	END
CLOSE curs
DEALLOCATE curs
SELECT 'PayrollAuth' AS DocCode, * FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
DELETE FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCFCU_D53Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCFCU_D53Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

SELECT @DocIndex As DocIndex
	, CASE NMR.AccountClass WHEN 'P' THEN UPPER(RTRIM(RTRIM(NMR.FName) + ' ' + RTRIM(NMR.LName) + ' ' + NMR.MECHTag)) ELSE UPPER(RTRIM(NMR.OrganizationName)) END AS FullName
	, NMR.Account As Account
	, Work.EmployerName As CompanyName

FROM NewMemberRequest AS NMR
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
WHERE NMR.TrackingNum = @TrackingNum
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCFCU_D54Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCFCU_D54Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @docsubname CHAR(100)
DECLARE @newdocsub CHAR(100)
DECLARE @count INT
DECLARE @docindex INT
DECLARE curs CURSOR LOCAL FAST_FORWARD FOR

	SELECT '' AS docsubname
	FROM NewMemberRequest AS NMR
	WHERE NMR.TrackingNum = @TrackingNum --AND NMR.Processed = 999 AND NMR.Created IN ('Y', 'I')

OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @newdocsub = 'Privacy Policy ' + @docsubname
IF @docsubname Is Null
BEGIN
	SET @newdocsub = 'Privacy Policy'
END
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
	WHILE @@FETCH_STATUS = 0
	BEGIN
		SET @count = @count + 1
		PRINT @count
			IF @count = 1
		BEGIN
			Set @docindex = @docindex + 1
				 INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
		END
			FETCH NEXT FROM curs INTO @docsubname
		PRINT @docsubname
		IF @@FETCH_STATUS = 0
		BEGIN
			SET @newdocsub = (RTRIM(@newdocsub) + ', ' + RTRIM(@docsubname))
			PRINT @newdocsub
			UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex
		END
	END
CLOSE curs
DEALLOCATE curs
SELECT 'PrivacyPolicy' AS DocCode, * FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
DELETE FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCFCU_D54Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCFCU_D54Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

SELECT @DocIndex As DocIndex

FROM NewMemberRequest AS NMR
WHERE NMR.TrackingNum = @TrackingNum
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCFCU_D55Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCFCU_D55Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @docsubname CHAR(100)
DECLARE @newdocsub CHAR(100)
DECLARE @count INT
DECLARE @docindex INT
DECLARE curs CURSOR LOCAL FAST_FORWARD FOR

	SELECT '' AS docsubname
	FROM NewMemberRequest AS NMR
	WHERE NMR.TrackingNum = @TrackingNum --AND NMR.Processed = 999 AND NMR.Created IN ('Y', 'I')

OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @newdocsub = 'Courtesy Pay Disclosure ' + @docsubname
IF @docsubname Is Null
BEGIN
	SET @newdocsub = 'Courtesy Pay Disclosure'
END
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
	WHILE @@FETCH_STATUS = 0
	BEGIN
		SET @count = @count + 1
		PRINT @count
			IF @count = 1
		BEGIN
			Set @docindex = @docindex + 1
				 INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
		END
			FETCH NEXT FROM curs INTO @docsubname
		PRINT @docsubname
		IF @@FETCH_STATUS = 0
		BEGIN
			SET @newdocsub = (RTRIM(@newdocsub) + ', ' + RTRIM(@docsubname))
			PRINT @newdocsub
			UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex
		END
	END
CLOSE curs
DEALLOCATE curs
SELECT 'Courtesy Pay Disclosure' AS DocCode, * FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
DELETE FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCFCU_D55Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCFCU_D55Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

SELECT @DocIndex As DocIndex

FROM NewMemberRequest AS NMR
WHERE NMR.TrackingNum = @TrackingNum
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCFCU_D99Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCFCU_D99Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @docsubname CHAR(100)
DECLARE @newdocsub CHAR(100)
DECLARE @count INT
DECLARE @docindex INT
DECLARE curs CURSOR LOCAL FAST_FORWARD FOR

	SELECT '' AS docsubname
	FROM NewMemberRequest AS NMR
	WHERE NMR.TrackingNum = @TrackingNum AND @ApplicationMode <> 'EXTERNAL' --AND NMR.Processed = 999 AND NMR.Created IN ('Y', 'I')

OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @newdocsub = 'Credit Report ' + @docsubname
IF @docsubname Is Null
BEGIN
	SET @newdocsub = 'Credit Report'
END
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
	WHILE @@FETCH_STATUS = 0
	BEGIN
		SET @count = @count + 1
		PRINT @count
			IF @count = 1
		BEGIN
			Set @docindex = @docindex + 1
				 INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
		END
			FETCH NEXT FROM curs INTO @docsubname
		PRINT @docsubname
		IF @@FETCH_STATUS = 0
		BEGIN
			SET @newdocsub = (RTRIM(@newdocsub) + ', ' + RTRIM(@docsubname))
			PRINT @newdocsub
			UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex
		END
	END
CLOSE curs
DEALLOCATE curs
SELECT 'CreditReport' AS DocCode, * FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
DELETE FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCFCU_D99Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCFCU_D99Fields] @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

DECLARE @Output varchar(8000)
--EXEC HBDB.IMS.dbo.sp_NAOPResourceSelect 'eStatementDisclosure', @Output OUTPUT

SET @Output = Replace(Replace(Replace(@Output, '</p><p>', Char(13) + Char(10) + Char(13) + Char(10)), '<p>', ''), '</p>', '')
SET @Output = IMS.fnCFCU_WordWrap(@Output, 80)

SELECT @DocIndex AS DocIndex, @Output AS Content

Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCFCU_DG1Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCFCU_DG1Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCFCU_DG1Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCFCU_DG1Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

Select 'Documents' AS GroupName From NewMemberRequest where trackingnum = @TrackingNum
GO
/****** Object:  StoredProcedure [IMS].[spCFCU_DP1Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [IMS].[spCFCU_DP1Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

Return 1
GO
/****** Object:  StoredProcedure [IMS].[spCFCU_DP1Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spCFCU_DP1Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

SELECT NMR.TrackingNum AS TrackingNumber
	, AltAddress.Address1 AS MailingAddress
	, NMR.CurrBranch As Branch
	, Branches.Description AS BranchName
	, CONVERT(char(10), GetDate(), 101) As TodayDate
	, DATENAME(MM, GetDate()) + RIGHT(CONVERT(char(12), GetDate(), 107), 9) As TodayDateFull
	, CONVERT(char(10), NMR.CreatedOn, 101) As CreatedOn
	, NMR.Account As Account
--	, CONVERT(char(2), Home.ResidenceYears, 101) + ' yrs  ' + CONVERT(char(2), Home.ResidenceMonths, 101) + ' mos' AS HowLong
	, NMR.FName, NMR.LName, NMR.MInitial
	, CASE NMR.AccountClass WHEN 'P' THEN UPPER(RTRIM(NMR.LName) + ', ' + RTRIM(RTRIM(NMR.FName) + ' ' + RTRIM(NMR.MInitial))) ELSE RTRIM(NMR.OrganizationName) END AS RevFullName
	, CASE NMR.AccountClass WHEN 'P' THEN UPPER(RTRIM(RTRIM(NMR.FName) + ' ' + RTRIM(NMR.LName) + ' ' + NMR.MECHTag)) ELSE UPPER(RTRIM(NMR.OrganizationName)) END AS FullName
	, CASE NMR.AccountClass WHEN 'P' THEN 'Dear ' + RTRIM(RTRIM(NMR.FName) + ' ' + RTRIM(NMR.LName) + ' ' + NMR.MECHTag) + ':' ELSE 'Dear ' + RTRIM(NMR.OrganizationName) + ':' END AS DearName
	, Home.Areacode + '-' + LEFT(Home.Phone, 3) + '-' + RIGHT(RTRIM(Home.Phone), 4) AS HPhoneFull
	, Home.CellPhoneAC + '-' + LEFT(Home.CellPhone, 3) + '-' + RIGHT(RTRIM(Home.CellPhone), 4) AS CPhoneFull
	, CASE NMR.UseTodayForDOB WHEN 'Y' THEN CONVERT(char(10), NMR.CreatedOn, 101) ELSE CONVERT(char(10), NMR.DOB, 101) END AS DOB
	, CASE NMR.AccountClass WHEN 'P' THEN Left(NMR.SSN, 3) + '-' + LEFT(RIGHT(NMR.SSN, 6), 2) + '-' + RIGHT(NMR.SSN, 4) ELSE LEFT(NMR.SSN, 2) + '-' + RIGHT(NMR.SSN, 7) END AS SSN
	, RTRIM(NMR.DriversLicenseNum) + '/' + NMR.DriversLicenseState AS DL
	, CASE WHEN NMR.IDType = 'D' AND NMR.DriversLicenseState <> '' AND NMR.DriversLicenseNum <> '' THEN 'Drivers License' ELSE NMR.IDSource END AS IDType
	, CASE NMR.IDType WHEN 'D' THEN RTRIM(NMR.DriversLicenseNum) ELSE RTRIM(NMR.IDNumber) END AS ID
	, CONVERT(char(10), NMR.IDIssueDate, 101) AS IDIssueDate
	, CONVERT(char(10), NMR.IDExpirationDate, 101) AS IDExpDate
	, NMR.DriversLicenseState AS IDState
	, UPPER(RTRIM(NMR.MaidenName)) AS MaidenName
	, NMR.Password AS Password
	, NMR.CreatedBy AS Seller
	, NMR.Department AS Department
	, CASE WHEN NMR.Created = 'F' Or NMR.Created = 'H' Or NMR.Created = 'I' THEN '' ELSE 'X' END AS YesNewAccount
	, CASE WHEN NMR.Created = 'F' Or NMR.Created = 'H' Or NMR.Created = 'I' THEN 'X' END AS YesChangeAccount
--	, CASE WHEN NMR.Created = 'F' Or NMR.Created = 'H' Or NMR.Created = 'I' THEN NMR.Account END AS ChangeAccount
	, CASE NMR.AccountClass
		WHEN 'O' THEN RTRIM(RTRIM(Work.Address1) + CASE ISNULL(Work.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Work.Address2) END + CASE ISNULL(Work.Address3, '') WHEN '' THEN ' ' ELSE ', ' + RTRIM(Work.Address3) END)
		ELSE RTRIM(RTRIM(Home.Address1) + CASE ISNULL(Home.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Home.Address2) END + CASE ISNULL(Home.Address3, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Home.Address3) END)
	  END AS Address
	, CASE NMR.AccountClass
		WHEN 'O' THEN RTRIM(RTRIM(Work.Address1) + CASE ISNULL(Work.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Work.Address2) END + CASE ISNULL(Work.Address3, '') WHEN '' THEN ' ' ELSE ', ' + RTRIM(Work.Address3) END) + ', ' + RTRIM(Work.City) + ', ' + Work.State + ' ' + CASE LEN(Work.Zip) WHEN 9 THEN LEFT(Work.Zip, 5) + '-' + Right(Work.Zip, 4) ELSE Work.Zip END
		ELSE RTRIM(RTRIM(Home.Address1) + CASE ISNULL(Home.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Home.Address2) END + CASE ISNULL(Home.Address3, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Home.Address3) END) + ', ' + RTRIM(Home.City) + ', ' + Home.State + ' ' + CASE LEN(Home.Zip) WHEN 9 THEN LEFT(Home.Zip, 5) + '-' + Right(Home.Zip, 4) ELSE Home.Zip END
	  END AS FullAddress
	, CASE NMR.AccountClass
		WHEN 'O' THEN RTRIM(Work.city) + ', ' + Work.state + ' ' + CASE LEN(Work.Zip) WHEN 9 THEN LEFT(Work.zip, 5) + '-' + Right(Work.Zip, 4) ELSE Work.Zip END
		ELSE RTRIM(Home.city) + ', ' + Home.state + ' ' + CASE LEN(Home.Zip) WHEN 9 THEN LEFT(Home.zip, 5) + '-' + Right(Home.Zip, 4) ELSE Home.Zip END
	  END AS CityStateZip
	, CASE NMR.AccountClass
		WHEN 'O' THEN Work.City
		ELSE Home.City
	  END AS City
	, CASE NMR.AccountClass
		WHEN 'O' THEN Work.State
		ELSE Home.State
	  END AS State
	, CASE NMR.AccountClass
		WHEN 'O' THEN CASE LEN(Work.Zip) WHEN 9 THEN LEFT(Work.zip, 5) + '-' + Right(Work.Zip, 4) ELSE Work.Zip END
		ELSE CASE LEN(Home.Zip) WHEN 9 THEN LEFT(Home.zip, 5) + '-' + Right(Home.Zip, 4) ELSE Home.Zip END
	  END AS Zip		
	, RTRIM(NMR.Email1) AS Email
	, CASE NMR.AccountClass
		WHEN 'O' THEN Work.AreaCode
		ELSE Home.AreaCode
	  END AS AC
	, CASE NMR.AccountClass
		WHEN 'O' THEN LEFT(Work.Phone, 3) + '-' + RIGHT(RTRIM(Work.Phone), 4)
		ELSE LEFT(Home.Phone, 3) + '-' + RIGHT(RTRIM(Home.Phone), 4)
	  END AS Phone
	, CASE NMR.AccountClass WHEN 'P' THEN Work.EmployerName ELSE '' END AS WorkName
	, CASE NMR.AccountClass WHEN 'P' THEN Work.EmployerName ELSE '' END AS Employer
	, CASE NMR.AccountClass WHEN 'P' THEN RTRIM(Work.address1 + CASE Work.address2 WHEN '' THEN ''ELSE', ' END + Work.address2 + CASE Work.address3 WHEN '' THEN ''ELSE', ' END + Work.address3) ELSE '' END AS WorkAddress
	, CASE NMR.AccountClass WHEN 'P' THEN Work.City ELSE '' END AS WorkCity
	, CASE NMR.AccountClass WHEN 'P' THEN Work.State ELSE '' END AS WorkState
	, CASE NMR.AccountClass WHEN 'P' THEN CASE LEN(Work.Zip) WHEN 9 THEN LEFT(Work.zip, 5) + '-' + RIGHT(Work.Zip, 4) ELSE Work.Zip END ELSE '' END AS WorkZip
	, Work.AreaCode AS WorkAC, LEFT(Work.Phone, 3) + '-' + RIGHT(RTRIM(Work.Phone), 4)  AS WorkPhone
	, Work.AreaCode + '-' + LEFT(Work.Phone, 3) + '-' + RIGHT(RTRIM(Work.Phone), 4)  AS WPhoneFull
	, Work.JobTitle AS Position
	, Work.JobTitle AS Occupation
	, Work.ProfessionYears As WorkNumYears
	,  RTRIM(Work.EmployerName) + ' ' + RTRIM(Work.address1 + CASE Work.address2 WHEN '' THEN ''ELSE', ' END + Work.address2 + CASE Work.address3 WHEN '' THEN ''ELSE', ' END + Work.address3) + ', ' + RTRIM(Work.City) + ', ' + RTRIM(Work.State) + ' ' + CASE LEN(Work.Zip) WHEN 9 THEN LEFT(Work.zip, 5) + '-' + Right(Work.Zip, 4) ELSE Work.Zip END AS WorkNameAddress
	, Work.HireDate
	,   CASE Work.IncomeFrequency
	     	WHEN 'W'  THEN 'Week'
		WHEN 'B' THEN 'Bi-Week'
		WHEN 'M' THEN 'Month'
		WHEN 'S' THEN 'Semi-Month'
		WHEN 'Y' THEN 'Year'
	      END AS IncomeFrequency
	,   CASE Work.IncomeFrequency
	     	WHEN 'W'  THEN (Work.GrossIncome * 52)/100
		WHEN 'B' THEN (Work.GrossIncome * 26)/100
		WHEN 'M' THEN (Work.GrossIncome * 12)/100
		WHEN 'S' THEN (Work.GrossIncome * 24)/100
		WHEN 'Y' THEN (Work.GrossIncome)/100
	      END AS GrossIncome
	, Home.ResidenceYears AS NumYears
	, CASE NMR.AccountClass
		WHEN 'O' THEN 'Yes'
		ELSE CASE WHEN NMR.Citizenship = 'US' Or NMR.Citizenship = 'RA' THEN 'Yes' END
	  END AS YesNoUSCitizen
	, CASE NMR.AccountClass
		WHEN 'O' THEN 'X'
		ELSE CASE WHEN NMR.Citizenship = 'US' Or NMR.Citizenship = 'RA' THEN 'X' END
	  END AS YesUSCitizen
	, CASE NMR.AccountClass
		WHEN 'O' THEN ''
		ELSE CASE WHEN NMR.Citizenship != 'US' And NMR.Citizenship != 'RA' THEN 'X' END
	  END AS NoUSCitizen
	, 'X' AS YesEligible00
	, CASE WHEN NMR.Qualification1 = 'Household' THEN 'X' END AS YesEligible01
	, CASE WHEN NMR.Qualification1 = 'Relative' OR NMR.Qualification1 = 'Household' THEN NMR.Qualification2 END AS MemberName
	, CASE WHEN NMR.Qualification1 = 'Relative' THEN NMR.Relationship END AS Relationship
	, CASE WHEN NMR.Qualification1 = 'Location' THEN 'X' END AS YesEligible10
	, CASE WHEN NMR.Qualification1 = 'Location' AND NMR.Qualification2 = 'BCOUNTY' THEN 'X' END AS YesEligible11
	, CASE WHEN NMR.Qualification1 = 'Location' AND NMR.Qualification2 = 'CLARENDON' THEN 'X' END AS YesEligible12
	, CASE WHEN NMR.Qualification1 = 'Location' AND NMR.Qualification2 = 'ORANGE' THEN 'X' END AS YesEligible13
	, CASE WHEN NMR.Qualification1 = 'Location' AND NMR.Qualification2 = 'CALHOUN' THEN 'X' END AS YesEligible14
	, CASE WHEN NMR.Qualification1 = 'Location' AND NMR.Qualification2 = 'DCOUNTY' THEN 'X' END AS YesEligible15
	, CASE WHEN NMR.Qualification1 = 'Location' AND NMR.Qualification2 = 'UNDER' THEN 'X' END AS YesEligible16
	, CASE WHEN NMR.Qualification1 = 'Location' AND NMR.Qualification2 = 'CCOUNTY' THEN 'X' END AS YesEligible17
	, CASE WHEN NMR.Qualification1 = 'Location' AND NMR.Qualification2 = 'GEO COMM' THEN 'X' END AS YesEligible18
	, RTRIM(NMR.LName) + '/' + RTRIM(RTRIM(NMR.FName) + ' ' + NMR.MInitial) AS SlashName
	, '(' + RTRIM(LTRIM(CAST(NMR.CurrBranch AS VARCHAR(2)))) + ' - ' + RTRIM(Branches.[Description]) + ')' AS SellerBranch
	, 'SOUTH CAROLINA FEDERAL CREDIT UNION' AS HCCUName
	, 'P.O. BOX 190012' AS HCCUAddress
	, 'NORTH CHARLESTON, SC  29419-9012' AS HCCUCityStateZip
	, '(800)845-0432' AS HCCUPhone
FROM NewMemberRequest As NMR
	--INNER JOIN udt_AccountTypes AS AType On NMR.AccountType = AType.TypeCode
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN NewMemberAddress As AltAddress On NMR.TrackingNum = AltAddress.TrackingNum
	LEFT OUTER JOIN Branches On NMR.CurrBranch = Branches.BranchCode
	LEFT OUTER JOIN Departments ON NMR.Department = Departments.Department
WHERE NMR.TrackingNum = @TrackingNum
GO
/****** Object:  StoredProcedure [IMS].[spCFCU_Eligibility_Select]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_Eligibility_Select
CREATE PROCEDURE [IMS].[spCFCU_Eligibility_Select]
	@ZipCode varchar(5),
	@CensusTract varchar(10)
AS

IF IsNull(@CensusTract, '') = '' AND IsNull(@ZipCode, '') <> ''
BEGIN
	SELECT Department, HandleCode
	FROM udt_EligibilityByZip
	WHERE IsNull(ZipCode, '') = @ZipCode
END

IF IsNull(@CensusTract, '') <> '' AND IsNull(@ZipCode, '') <> ''
BEGIN
	SELECT Department, HandleCode
	FROM udt_EligibilityByZip
	WHERE IsNull(ZipCode, '') = @ZipCode AND IsNull(CensusTract, '') = @CensusTract
END

IF IsNull(@CensusTract, '') = '' AND IsNull(@ZipCode, '') = ''
BEGIN
	SELECT *
	FROM udt_EligibilityByZip
END
GO
/****** Object:  StoredProcedure [IMS].[spCFCU_FedReservePendingTransaction_Select]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Jonathan Eagar
-- Create date: 8/25/2011
-- Description:	Returns all FedReserve Pending Transactions
-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_FedReservePendingTransaction_Select
-- =============================================
CREATE PROCEDURE [IMS].[spCFCU_FedReservePendingTransaction_Select] 
	-- Add the parameters for the stored procedure here
	@NMRAccountNumber bigint
AS
BEGIN	
	SET @NMRAccountNumber = ISNULL(@NMRAccountNumber, 0)
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	-- Insert statements for procedure here
	
	DECLARE @TransactionSummary TABLE
	(		
		FundingBankID INT,
		TransferAmountTotal DECIMAL(18,2)		
	)
		
	IF @NMRAccountNumber = 0  
	BEGIN
	
	INSERT INTO @TransactionSummary(FundingBankID, TransferAmountTotal)	
	SELECT
		   FB.ID as FundingBankID,			  
		   SUM(FT.Amount) as TransferAmountTotal			   
	FROM IMS.NMRFundingBank FB INNER JOIN IMS.NMRFundingTransaction FT ON FB.ID = FT.FundingBankID						
	WHERE FT.DateTimeLastTransaction IS NULL AND FT.FundingType = 'B'
	GROUP BY FB.ID	
	
	SELECT  FRPT.* FROM
	( 
		(
		SELECT F.ID as FundingID,
			   F.AccountNumber as NMRAccountNumber,
			   FB.TrackingNum as NMRTrackingNumber,
			   NMR.LName + ', ' + NMR.FName as NMRMemberName,
			   FB.ID as FundingBankID,
			   0 as FundingTransactionID,
			   FB.RoutingNumber as FundingBankRouting,
			   FB.AccountNumberEncrypted as FundingBankAccountNumberEncrypted,
			   FB.AccountNumberLast4 as FundingBankAccountAccountLast4,
			   FB.BankName as FundingBankName,
			   FB.AccountType as FundingBankAccountType,
			   FB.Amount1 as VerificationAmount1,
			   FB.Amount2 as VerificationAmount2,
			   0 as TransferAmount,
			   0 as TransferAmountTotal,			   	
			   0 as TargetSubAccountSuffix,
			   0 as TargetSubAccountSeq,
			   FB.DateTimeCreated as DateTimeCreated
		FROM IMS.NMRFunding F INNER JOIN IMS.NMRFundingBank FB ON F.ID = FB.FundingID
								INNER JOIN IMS.NewMemberRequest NMR ON FB.TrackingNum = NMR.TrackingNum
		WHERE FB.VerificationStatus = 'P'	
		)
		UNION ALL
		(	
		SELECT F.ID as FundingID,
			   F.AccountNumber as NMRAccountNumber,
			   FB.TrackingNum as NMRTrackingNumber,			   
			   NMR.LName + ', ' + NMR.FName as NMRMemberName,
			   FB.ID as FundingBankID,
			   FT.ID as FundingTransactionID,
			   FB.RoutingNumber as FundingBankRouting,
			   FB.AccountNumberEncrypted as FundingBankAccountNumberEncrypted,
			   FB.AccountNumberLast4 as FundingBankAccountAccountLast4,
			   FB.BankName as FundingBankName,
			   FB.AccountType as FundingBankAccountType,
				0 as VerificationAmount1,
				0 as VerificationAmount2,
			   FT.Amount as TransferAmount,
			   TS.TransferAmountTotal as TransferAmountTotal,			
			   FT.TargetSubAccountSuffix as TargetSubAccountSuffix,
			   FT.TargetSubAccountSeq as TargetSubAccountSeq,
			   FT.DateTimeCreated as DateTimeCreated 
		FROM IMS.NMRFunding F INNER JOIN IMS.NMRFundingBank FB ON F.ID = FB.FundingID
								INNER JOIN IMS.NMRFundingTransaction FT ON FB.ID = FT.FundingBankID
									INNER JOIN IMS.NewMemberRequest NMR ON FB.TrackingNum = NMR.TrackingNum
										INNER JOIN @TransactionSummary TS ON FB.ID = TS.FundingBankID
		WHERE FT.DateTimeLastTransaction IS NULL AND FT.FundingType = 'B'
		)
	)  FRPT ORDER BY FRPT.NMRTrackingNumber, FRPT.FundingID, FRPT.FundingBankID, FRPT.FundingTransactionID	
	END	
	ELSE
	BEGIN
	
	INSERT INTO @TransactionSummary(FundingBankID, TransferAmountTotal)	
	SELECT	   		   
		   FB.ID as FundingBankID,			  
		   SUM(FT.Amount) as TransferAmountTotal			   
	FROM IMS.NMRFunding F INNER JOIN IMS.NMRFundingBank FB ON F.ID = FB.FundingID 
							INNER JOIN IMS.NMRFundingTransaction FT ON FB.ID = FT.FundingBankID						
	WHERE FT.DateTimeLastTransaction IS NULL AND 
		FT.FundingType = 'B' AND
		F.AccountNumber = @NMRAccountNumber	 
	GROUP BY FB.ID	
	  
	SELECT  FRPT.* FROM
	(   
		(
		SELECT F.ID as FundingID,
			   F.AccountNumber as NMRAccountNumber,
			   FB.TrackingNum as NMRTrackingNumber,
			   NMR.LName + ', ' + NMR.FName as NMRMemberName,
			   FB.ID as FundingBankID,
			   0 as FundingTransactionID,
			   FB.RoutingNumber as FundingBankRouting,
			   FB.AccountNumberEncrypted as FundingBankAccountNumberEncrypted,
			   FB.AccountNumberLast4 as FundingBankAccountAccountLast4,
			   FB.BankName as FundingBankName,
			   FB.AccountType as FundingBankAccountType,
			   FB.Amount1 as VerificationAmount1,
			   FB.Amount2 as VerificationAmount2,
			   0 as TransferAmount,
			   0 as TransferAmountTotal,
			   0 as TargetSubAccountSuffix,
			   0 as TargetSubAccountSeq,
			   FB.DateTimeCreated as DateTimeCreated
		FROM IMS.NMRFunding F INNER JOIN IMS.NMRFundingBank FB ON F.ID = FB.FundingID
								INNER JOIN IMS.NewMemberRequest NMR ON FB.TrackingNum = NMR.TrackingNum
		WHERE	FB.VerificationStatus = 'P' AND 
				F.AccountNumber = @NMRAccountNumber	
		)	
		UNION ALL
		(		
		SELECT F.ID as FundingID,
			   F.AccountNumber as NMRAccountNumber,
			   FB.TrackingNum as NMRTrackingNumber,
			   NMR.LName + ', ' + NMR.FName as NMRMemberName,
			   FB.ID as FundingBankID,
			   FT.ID as FundingTransactionID,
			   FB.RoutingNumber as FundingBankRouting,
			   FB.AccountNumberEncrypted as FundingBankAccountNumberEncrypted,
			   FB.AccountNumberLast4 as FundingBankAccountAccountLast4,
			   FB.BankName as FundingBankName,
			   FB.AccountType as FundingBankAccountType,
				0 as VerificationAmount1,
				0 as VerificationAmount2,
			   FT.Amount as TransferAmount,
			   TS.TransferAmountTotal as TransferAmountTotal,
			   FT.TargetSubAccountSuffix as TargetSubAccountSuffix,
			   FT.TargetSubAccountSeq as TargetSubAccountSeq,
			   FT.DateTimeCreated as DateTimeCreated
		FROM IMS.NMRFunding F 
				INNER JOIN IMS.NMRFundingBank FB ON F.ID = FB.FundingID
					INNER JOIN IMS.NMRFundingTransaction FT ON FB.ID = FT.FundingBankID
						INNER JOIN IMS.NewMemberRequest NMR ON FB.TrackingNum = NMR.TrackingNum
							INNER JOIN @TransactionSummary TS ON FB.ID = TS.FundingBankID
		WHERE	FT.DateTimeLastTransaction IS NULL AND 
				FT.FundingType = 'B' AND 
				F.AccountNumber = @NMRAccountNumber
		)
	)  FRPT	ORDER BY FRPT.NMRTrackingNumber, FRPT.FundingID, FRPT.FundingBankID, FRPT.FundingTransactionID
	END		
END

GO
/****** Object:  StoredProcedure [IMS].[spCFCU_ILAApplicationSearch_Select]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_ILAApplicationSearch_Select
CREATE Procedure [IMS].[spCFCU_ILAApplicationSearch_Select]
	@TrackingNum varchar(9),
	@SSN varchar(9),
	@Account varchar(9),
	@AppNumber varchar(9)
AS

DECLARE @SQL varchar(1000)
SET @SQL = 'SELECT AI.*, A.UserSessionXML FROM ILA_ApplicationInfo AI INNER JOIN ILA_Application A ON A.TrackingNum = AI.TrackingNum WHERE 1=1'
IF @TrackingNum <> '*'
BEGIN
	SET @SQL = @SQL + ' AND AI.TrackingNum = ''' + @TrackingNum + ''''
END
IF @SSN <> '*'
BEGIN
	SET @SQL = @SQL + ' AND AI.PrimarySSN = ''' + @SSN + ''''
END
IF @Account <> '*'
BEGIN
	SET @SQL = @SQL + ' AND AI.Account = ''' + @Account + ''''
END
IF @AppNumber <> '*'
BEGIN
	SET @SQL = @SQL + ' AND AI.AppNumber = ''' + @AppNumber + ''''
END

EXEC(@SQL)
GO
/****** Object:  StoredProcedure [IMS].[spCFCU_OAOReport_ApplicationStatusReport]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_OAOReport_ApplicationStatusReport
CREATE Procedure [IMS].[spCFCU_OAOReport_ApplicationStatusReport]
	@StartDate datetime,
	@StopDate datetime
AS

SELECT
	NMR.TrackingNum
	, UPPER(RTRIM(LEFT(NMR.FName, 1)) + ' ' + RTRIM(NMR.LName)) AS MemberName
	, NMR.ApplyDate AS [Date_Time]
	, NMR.CurrBranch AS Branch
	, CASE
		WHEN NMR.Processed = '1' THEN 'In-Process'
		WHEN NMR.Processed = '999' THEN 'Created'
		ELSE 'Denied'
		END AS Status
	, CASE
		WHEN (SELECT COUNT(*) FROM NMRFundingBank AS NMRFB WHERE NMRFB.TrackingNum = NMR.TrackingNum AND NMRFB.VerificationStatus <> 'X' AND NMRFB.VerificationStatus <> 'E') > 0 THEN 'ACH'
		WHEN (SELECT COUNT(*) FROM NMRFundingCard AS NMRFC WHERE NMRFC.TrackingNum = NMR.TrackingNum) > 0 THEN 'Credit Card'
		WHEN (SELECT COUNT(*) FROM NMRFundingTransaction AS NMRFT WHERE NMRFT.TrackingNum = NMR.TrackingNum AND NMRFT.SourceSubAccountSeq <> '') > 0 THEN 'Transfer'
		WHEN (SELECT FundingType FROM NMRFundingTransaction AS NMRFT WHERE NMRFT.TrackingNum = NMR.TrackingNum) = NULL THEN 'Skipped'
		ELSE 'None'
		END AS PaymentMethod
	, CONVERT(VARCHAR(10), (SELECT TOP 1 DateTimeLastTransaction FROM NMRFundingTransaction AS NMRFT WHERE NMRFT.TrackingNum = NMR.TrackingNum), 101) AS FundingDate
	, (SELECT SUM(Amount) FROM NMRFundingTransaction AS NMRFT WHERE NMRFT.TrackingNum = NMR.TrackingNum GROUP BY NMRFT.TrackingNum) AS InitialAmountFunded
	, NMR.Account AS AccountNumber
FROM IMS.NewMemberRequest NMR
WHERE
	NMR.Processed > 0 
	AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> ''
	AND (NMR.ApplyDate >= @StartDate AND NMR.ApplyDate <= @StopDate)
GO
/****** Object:  StoredProcedure [IMS].[spCFCU_OAOReport_FundingDetailReport]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_OAOReport_FundingDetailReport
CREATE Procedure [IMS].[spCFCU_OAOReport_FundingDetailReport]
	@StartDate datetime,
	@StopDate datetime
AS

SELECT Bank, Card, Existing, Skipped FROM
(
	(SELECT COUNT(DISTINCT NMRFT.TrackingNum) AS Bank
	FROM IMS.NMRFundingTransaction NMRFT
	LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	INNER JOIN IMS.NMRFundingBank NMRFB ON NMRFB.ID = NMRFT.FundingBankID
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND NMRFT.FundingBankID <> '' AND NMR.Processed = 999 AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate) AND (NMRFB.VerificationStatus <> 'E') AND (NMRFB.VerificationStatus <> 'X')) a
		FULL OUTER JOIN
	(SELECT COUNT(DISTINCT NMRFT.TrackingNum) AS Card
	FROM IMS.NMRFundingTransaction NMRFT
	LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND NMRFT.FundingCardID <> '' AND NMR.Processed = 999 AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate)) b ON 1=1
		FULL OUTER JOIN
	(SELECT COUNT(DISTINCT NMRFT.TrackingNum) AS Existing
	FROM IMS.NMRFundingTransaction NMRFT
	LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND NMRFT.SourceSubAccountSeq <> '' AND NMR.Processed = 999 AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate)) c ON 1=1
		FULL OUTER JOIN
	(SELECT COUNT(DISTINCT NMR.TrackingNum) AS Skipped
	FROM IMS.NMRFundingTransaction NMRFT
	FULL OUTER JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND (NMR.Processed = 999 AND ISNULL(NMRFT.TrackingNum, 0) = 0) AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate)) d ON 1=1
)

UNION ALL

SELECT Bank, Card, Existing, Skipped FROM
(
	(SELECT COUNT(DISTINCT NMRFT.TrackingNum) AS Bank
	FROM IMS.NMRFundingTransaction NMRFT
	LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	INNER JOIN IMS.NMRFundingBank NMRFB ON NMRFB.ID = NMRFT.FundingBankID
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND NMRFT.FundingBankID <> '' AND NMR.Processed = 998 AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate) AND (NMRFB.VerificationStatus <> 'E') AND (NMRFB.VerificationStatus <> 'X')) a
		FULL OUTER JOIN
	(SELECT COUNT(DISTINCT NMRFT.TrackingNum) AS Card
	FROM IMS.NMRFundingTransaction NMRFT
	LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND NMRFT.FundingCardID <> '' AND NMR.Processed = 998 AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate)) b ON 1=1
		FULL OUTER JOIN
	(SELECT COUNT(DISTINCT NMRFT.TrackingNum) AS Existing
	FROM IMS.NMRFundingTransaction NMRFT
	LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND NMRFT.SourceSubAccountSeq <> '' AND NMR.Processed = 998 AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate)) c ON 1=1
		FULL OUTER JOIN
	(SELECT COUNT(DISTINCT NMR.TrackingNum) AS Skipped
	FROM IMS.NMRFundingTransaction NMRFT
	FULL OUTER JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND (NMR.Processed = 998 AND ISNULL(NMRFT.TrackingNum, 0) = 0) AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate)) d ON 1=1
)
GO
/****** Object:  StoredProcedure [IMS].[spCFCU_ReviewQueue_SelectAll]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Jon Eagar
-- Create date: 7/08/2011
-- Description:	Lists the active NMR records for the Queue Review
-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_ReviewQueue_SelectAll
-- =============================================
CREATE PROCEDURE [IMS].[spCFCU_ReviewQueue_SelectAll] 
	-- Add the parameters for the stored procedure here
	@StartDate DATETIME = NULL,
	@EndDate DATETIME = NULL,
	@StatusCode VARCHAR(2) = NULL
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
 
	DECLARE @Hierarchy INT
	DECLARE @StatusID INT

	IF @StartDate IS NOT NULL AND @StartDate <> ''
	BEGIN
		SET @StartDate = CONVERT(DATETIME,(CONVERT(VARCHAR(10), @StartDate, 102)))  --Set Time to beginning of Day
		SET @EndDate = CAST( CONVERT(CHAR(10), @EndDate, 101) + ' 11:59 PM' AS DATETIME) --Set Time to end of day
	END
	
	SET @StatusCode = NULLIF(@StatusCode,'')

	DECLARE @ReviewQueue TABLE
	(
		ID INT IDENTITY(1,1) PRIMARY KEY CLUSTERED,
		TrackingNum INT,	
		Name VARCHAR(90),
		EmployerName VARCHAR(250),
		Email VARCHAR(200),
		Account VARCHAR(50),
		StatusName VARCHAR(50),
		StatusID INT,
		FundingComplete VARCHAR(50), 
		ApplyDate DATETIME,
		Teller VARCHAR(50),
		LastPage VARCHAR(50),
		Misc VARCHAR(1000),
		TNExpireDate DATETIME
	)

	IF (@StatusCode IS NOT NULL)
	BEGIN
		SELECT @Hierarchy=RQC.Hierarchy, @StatusID=RQC.ID FROM IMS.ReviewQueueConfig RQC WHERE RQC.StatusCode = @StatusCode
	END

	IF (@Hierarchy > 0 OR @StatusCode IS NULL)
	BEGIN
		--IDV DECLINE
		INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Email, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, Misc, TNExpireDate)
		SELECT	DISTINCT NMR.TrackingNum, 
				LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
				--RTRIM(LTRIM(NMRW.EmployerName)) AS EmployerName,
				'Chks: ' + CASE WHEN (SELECT COUNT(CS.TrackingNum) FROM NewMemberCheckOrderSimple CS WHERE CS.TrackingNum = NMR.TrackingNum) > 0 THEN 'Check Order: YES' ELSE 'NO' END
				+ '<br>Sign: '
				+ COALESCE((SELECT TOP 1 [status] FROM IMS.DocuSignEnvelope WHERE DocuSignEnvelope.trackingNum = NMR.TrackingNum), '')
				+ ' - ' + COALESCE((SELECT TOP 1 [statusSetBy] FROM IMS.DocuSignEnvelope WHERE DocuSignEnvelope.trackingNum = NMR.TrackingNum), '')
				AS EmployerName,
				RTRIM(LTRIM(NMR.Email1)) AS Email,
				NMR.Account, 
				RQC.StatusName,
				RQC.ID, 
				NMR.FundingComplete, 
				NMR.ApplyDate,
				(SELECT TOP 1 CompletedBy FROM IMS.ActionLog WHERE TrackingNum = NMR.TrackingNum AND NullIf(CompletedBy, '') IS NOT NULL ORDER BY CompletedDate DESC) AS Seller,
				(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
				RTRIM(RTRIM(NMRH.Address1) + CASE ISNULL(NMRH.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(NMRH.Address2) END + CASE ISNULL(NMRH.Address3, '') WHEN '' THEN '' ELSE ', ' + RTRIM(NMRH.Address3) END) + '<br>' + RTRIM(NMRH.city) + ', ' + NMRH.state + ' ' + CASE LEN(NMRH.Zip) WHEN 9 THEN LEFT(NMRH.zip, 5) + '-' + Right(NMRH.Zip, 4) ELSE NMRH.Zip END AS Misc,
				NMR.TNExpireDate
		FROM IMS.NewMemberRequest NMR 
				INNER JOIN 
				IMS.NewMemberManualApproval MA 
					ON NMR.TrackingNum = MA.TrackingNum 
						INNER JOIN IMS.ReviewQueueConfig RQC ON RQC.StatusCode = 'ID'
							LEFT JOIN IMS.NewMemberHome NMRH
								ON NMR.TrackingNum = NMRH.TrackingNum
							LEFT JOIN IMS.NewMemberWork NMRW
								ON NMR.TrackingNum = NMRW.TrackingNum
		WHERE NMR.Processed NOT IN (-1, 998, 999) AND (MA.Category = 'ID' AND MA.ApprovalStatus = '') AND (@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate) AND DATALENGTH(NMR.UserSessionXML) > 0  AND NMR.UserSessionXML IS NOT NULL
		
		IF (@Hierarchy > 1 OR @StatusCode IS NULL)
		BEGIN
			--Miscellaneous Decline
			INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Email, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, Misc, TNExpireDate)
			SELECT	DISTINCT NMR.TrackingNum, 
					LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
					--RTRIM(LTRIM(NMRW.EmployerName)) AS EmployerName,
					'Chks: ' + CASE WHEN (SELECT COUNT(CS.TrackingNum) FROM NewMemberCheckOrderSimple CS WHERE CS.TrackingNum = NMR.TrackingNum) > 0 THEN 'Check Order: YES' ELSE 'NO' END
					+ '<br>Sign: '
					+ COALESCE((SELECT TOP 1 [status] FROM IMS.DocuSignEnvelope WHERE DocuSignEnvelope.trackingNum = NMR.TrackingNum), '')
					+ ' - ' + COALESCE((SELECT TOP 1 [statusSetBy] FROM IMS.DocuSignEnvelope WHERE DocuSignEnvelope.trackingNum = NMR.TrackingNum), '')
					 AS EmployerName,
					RTRIM(LTRIM(NMR.Email1)) AS Email,
					NMR.Account, 
					RQC.StatusName,
					RQC.ID, 
					NMR.FundingComplete, 
					NMR.ApplyDate,
					(SELECT TOP 1 CompletedBy FROM IMS.ActionLog WHERE TrackingNum = NMR.TrackingNum AND NullIf(CompletedBy, '') IS NOT NULL ORDER BY CompletedDate DESC) AS Seller,
					(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
					RTRIM(RTRIM(NMRH.Address1) + CASE ISNULL(NMRH.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(NMRH.Address2) END + CASE ISNULL(NMRH.Address3, '') WHEN '' THEN '' ELSE ', ' + RTRIM(NMRH.Address3) END) + '<br>' + RTRIM(NMRH.city) + ', ' + NMRH.state + ' ' + CASE LEN(NMRH.Zip) WHEN 9 THEN LEFT(NMRH.zip, 5) + '-' + Right(NMRH.Zip, 4) ELSE NMRH.Zip END AS Misc,
					NMR.TNExpireDate
			FROM IMS.NewMemberRequest NMR 
					INNER JOIN 
					IMS.NewMemberManualApproval MA 
						ON NMR.TrackingNum = MA.TrackingNum AND MA.JointSequence = 0
							INNER JOIN IMS.ReviewQueueConfig RQC ON RQC.StatusCode = 'MD' AND RQC.ReasonCode = LTRIM(RTRIM(MA.ReasonCode))
								LEFT JOIN IMS.NewMemberHome NMRH
									ON NMR.TrackingNum = NMRH.TrackingNum
								LEFT JOIN IMS.NewMemberWork NMRW
									ON NMR.TrackingNum = NMRW.TrackingNum					
			WHERE NOT EXISTS(SELECT TrackingNum FROM @ReviewQueue RQ Where RQ.TrackingNum = NMR.TrackingNum) AND
				  NMR.Processed NOT IN (-1, 998, 999) AND 
				  (MA.ApprovalStatus = '') AND (@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate)AND DATALENGTH(NMR.UserSessionXML) > 0  AND NMR.UserSessionXML IS NOT NULL
					AND GETDATE() < TNExpireDate

			IF (@Hierarchy > 2 OR @StatusCode IS NULL)
			BEGIN
				--Joint Decline
				INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Email, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, Misc, TNExpireDate)
				SELECT	DISTINCT NMR.TrackingNum, 
						LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
						--RTRIM(LTRIM(NMRW.EmployerName)) AS EmployerName,
						'Chks: ' + CASE WHEN (SELECT COUNT(CS.TrackingNum) FROM NewMemberCheckOrderSimple CS WHERE CS.TrackingNum = NMR.TrackingNum) > 0 THEN 'YES' ELSE 'NO' END
						+ '<br>Sign: '
						+ COALESCE((SELECT TOP 1 [status] FROM IMS.DocuSignEnvelope WHERE DocuSignEnvelope.trackingNum = NMR.TrackingNum), '')
						+ ' - ' + COALESCE((SELECT TOP 1 [statusSetBy] FROM IMS.DocuSignEnvelope WHERE DocuSignEnvelope.trackingNum = NMR.TrackingNum), '')
						AS EmployerName,
						RTRIM(LTRIM(NMR.Email1)) AS Email,
						NMR.Account, 
						RQC.StatusName,
						RQC.ID, 
						NMR.FundingComplete, 
						NMR.ApplyDate,
						(SELECT TOP 1 CompletedBy FROM IMS.ActionLog WHERE TrackingNum = NMR.TrackingNum AND NullIf(CompletedBy, '') IS NOT NULL ORDER BY CompletedDate DESC) AS Seller,
						(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
						RTRIM(RTRIM(NMRH.Address1) + CASE ISNULL(NMRH.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(NMRH.Address2) END + CASE ISNULL(NMRH.Address3, '') WHEN '' THEN '' ELSE ', ' + RTRIM(NMRH.Address3) END) + '<br>' + RTRIM(NMRH.city) + ', ' + NMRH.state + ' ' + CASE LEN(NMRH.Zip) WHEN 9 THEN LEFT(NMRH.zip, 5) + '-' + Right(NMRH.Zip, 4) ELSE NMRH.Zip END AS Misc,
						NMR.TNExpireDate
				FROM IMS.NewMemberRequest NMR 
						INNER JOIN 
						IMS.NewMemberManualApproval MA 
							ON NMR.TrackingNum = MA.TrackingNum AND MA.JointSequence > 0
								INNER JOIN IMS.ReviewQueueConfig RQC ON RQC.StatusCode = 'JD' AND RQC.ReasonCode = LTRIM(RTRIM(MA.ReasonCode))
									LEFT JOIN IMS.NewMemberHome NMRH
										ON NMR.TrackingNum = NMRH.TrackingNum
									LEFT JOIN IMS.NewMemberWork NMRW
										ON NMR.TrackingNum = NMRW.TrackingNum					
				WHERE NOT EXISTS(SELECT TrackingNum FROM @ReviewQueue RQ Where RQ.TrackingNum = NMR.TrackingNum) AND
					  NMR.Processed NOT IN (-1, 998, 999) AND 
					  (MA.ApprovalStatus = '') AND (@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate)AND DATALENGTH(NMR.UserSessionXML) > 0  AND NMR.UserSessionXML IS NOT NULL
						AND GETDATE() < TNExpireDate

				IF (@Hierarchy > 3 OR @StatusCode IS NULL)
				BEGIN
					--Manual Review
					INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Email, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, Misc, TNExpireDate)
					SELECT	DISTINCT NMR.TrackingNum, 
							LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
							--RTRIM(LTRIM(NMRW.EmployerName)) AS EmployerName,
							'Chks: ' + CASE WHEN (SELECT COUNT(CS.TrackingNum) FROM NewMemberCheckOrderSimple CS WHERE CS.TrackingNum = NMR.TrackingNum) > 0 THEN 'YES' ELSE 'NO' END
							+ '<br>Sign: '
							+ COALESCE((SELECT TOP 1 [status] FROM IMS.DocuSignEnvelope WHERE DocuSignEnvelope.trackingNum = NMR.TrackingNum), '')
							+ ' - ' + COALESCE((SELECT TOP 1 [statusSetBy] FROM IMS.DocuSignEnvelope WHERE DocuSignEnvelope.trackingNum = NMR.TrackingNum), '')
							AS EmployerName,
							RTRIM(LTRIM(NMR.Email1)) AS Email,
							NMR.Account, 
							RQC.StatusName,
							RQC.ID, 
							NMR.FundingComplete, 
							NMR.ApplyDate,
							(SELECT TOP 1 CompletedBy FROM IMS.ActionLog WHERE TrackingNum = NMR.TrackingNum AND NullIf(CompletedBy, '') IS NOT NULL ORDER BY CompletedDate DESC) AS Seller,
							(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
							RTRIM(RTRIM(NMRH.Address1) + CASE ISNULL(NMRH.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(NMRH.Address2) END + CASE ISNULL(NMRH.Address3, '') WHEN '' THEN '' ELSE ', ' + RTRIM(NMRH.Address3) END) + '<br>' + RTRIM(NMRH.city) + ', ' + NMRH.state + ' ' + CASE LEN(NMRH.Zip) WHEN 9 THEN LEFT(NMRH.zip, 5) + '-' + Right(NMRH.Zip, 4) ELSE NMRH.Zip END AS Misc,
							NMR.TNExpireDate
					FROM IMS.NewMemberRequest NMR 
							INNER JOIN 
							IMS.NewMemberManualApproval MA 
								ON NMR.TrackingNum = MA.TrackingNum 
									INNER JOIN IMS.ReviewQueueConfig RQC ON RQC.StatusCode = 'MR' AND RQC.ReasonCode = LTRIM(RTRIM(MA.ReasonCode))
										LEFT JOIN IMS.NewMemberHome NMRH
											ON NMR.TrackingNum = NMRH.TrackingNum
										LEFT JOIN IMS.NewMemberWork NMRW
											ON NMR.TrackingNum = NMRW.TrackingNum		
					WHERE NOT EXISTS(SELECT TrackingNum FROM @ReviewQueue RQ Where RQ.TrackingNum = NMR.TrackingNum) AND
						  NMR.Processed NOT IN (-1, 998, 999) AND 
						  (MA.ApprovalStatus = '') AND (@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate) AND DATALENGTH(NMR.UserSessionXML) > 0 AND NMR.UserSessionXML IS NOT NULL
							AND GETDATE() < TNExpireDate

					IF (@Hierarchy > 4 OR @StatusCode IS NULL)
					BEGIN
						--Need Decision/Pending
						INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Email, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, Misc, TNExpireDate)
						SELECT	DISTINCT NMR.TrackingNum, 
								LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
								--RTRIM(LTRIM(NMRW.EmployerName)) AS EmployerName,
								'Chks: ' + CASE WHEN (SELECT COUNT(CS.TrackingNum) FROM NewMemberCheckOrderSimple CS WHERE CS.TrackingNum = NMR.TrackingNum) > 0 THEN 'YES' ELSE 'NO' END
								+ '<br>Sign: '
								+ COALESCE((SELECT TOP 1 [status] FROM IMS.DocuSignEnvelope WHERE DocuSignEnvelope.trackingNum = NMR.TrackingNum), '')
								+ ' - ' + COALESCE((SELECT TOP 1 [statusSetBy] FROM IMS.DocuSignEnvelope WHERE DocuSignEnvelope.trackingNum = NMR.TrackingNum), '')
								AS EmployerName,
								RTRIM(LTRIM(NMR.Email1)) AS Email,
								NMR.Account, 
								RQC.StatusName,
								RQC.ID, 
								NMR.FundingComplete, 
								NMR.ApplyDate,
								(SELECT TOP 1 CompletedBy FROM IMS.ActionLog WHERE TrackingNum = NMR.TrackingNum AND NullIf(CompletedBy, '') IS NOT NULL ORDER BY CompletedDate DESC) AS Seller,
								(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
								RTRIM(RTRIM(NMRH.Address1) + CASE ISNULL(NMRH.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(NMRH.Address2) END + CASE ISNULL(NMRH.Address3, '') WHEN '' THEN '' ELSE ', ' + RTRIM(NMRH.Address3) END) + '<br>' + RTRIM(NMRH.city) + ', ' + NMRH.state + ' ' + CASE LEN(NMRH.Zip) WHEN 9 THEN LEFT(NMRH.zip, 5) + '-' + Right(NMRH.Zip, 4) ELSE NMRH.Zip END AS Misc,
								NMR.TNExpireDate
						FROM IMS.NewMemberRequest NMR  
								INNER JOIN IMS.NewMemberSubAccount SA 
									ON NMR.TrackingNum = SA.TrackingNum
										INNER JOIN IMS.ReviewQueueConfig RQC ON RQC.StatusCode = 'DP'
											LEFT JOIN IMS.NewMemberHome NMRH
												ON NMR.TrackingNum = NMRH.TrackingNum
											LEFT JOIN IMS.NewMemberWork NMRW
												ON NMR.TrackingNum = NMRW.TrackingNum
													LEFT JOIN IMS.NewMemberManualApproval MA 
														ON NMR.TrackingNum = MA.TrackingNum
						WHERE NOT EXISTS(SELECT TrackingNum FROM @ReviewQueue RQ Where RQ.TrackingNum = NMR.TrackingNum) AND
							  NMR.Processed NOT IN (-1, 998, 999) AND 
							  ((SA.Approval <> 'A' AND SA.ApprovedBy = '') OR (MA.ApprovalStatus = '')) AND 
							  (@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate) AND DATALENGTH(NMR.UserSessionXML) > 0 AND NMR.UserSessionXML IS NOT NULL
								AND GETDATE() < TNExpireDate

						IF (@Hierarchy > 5 OR @StatusCode IS NULL)
						BEGIN
							--In Progress
							INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Email, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, Misc, TNExpireDate)
							SELECT	DISTINCT NMR.TrackingNum, 
									LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
									--RTRIM(LTRIM(NMRW.EmployerName)) AS EmployerName,
									'Chks: ' + CASE WHEN (SELECT COUNT(CS.TrackingNum) FROM NewMemberCheckOrderSimple CS WHERE CS.TrackingNum = NMR.TrackingNum) > 0 THEN 'YES' ELSE 'NO' END
									+ '<br>Sign: '
									+ COALESCE((SELECT TOP 1 [status] FROM IMS.DocuSignEnvelope WHERE DocuSignEnvelope.trackingNum = NMR.TrackingNum), '')
									+ ' - ' + COALESCE((SELECT TOP 1 [statusSetBy] FROM IMS.DocuSignEnvelope WHERE DocuSignEnvelope.trackingNum = NMR.TrackingNum), '')
									AS EmployerName,
									RTRIM(LTRIM(NMR.Email1)) AS Email,
									NMR.Account, 
									RQC.StatusName,
									RQC.ID, 
									NMR.FundingComplete, 
									NMR.ApplyDate,
									(SELECT TOP 1 CompletedBy FROM IMS.ActionLog WHERE TrackingNum = NMR.TrackingNum AND NullIf(CompletedBy, '') IS NOT NULL ORDER BY CompletedDate DESC) AS Seller,
									(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
									RTRIM(RTRIM(NMRH.Address1) + CASE ISNULL(NMRH.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(NMRH.Address2) END + CASE ISNULL(NMRH.Address3, '') WHEN '' THEN '' ELSE ', ' + RTRIM(NMRH.Address3) END) + '<br>' + RTRIM(NMRH.city) + ', ' + NMRH.state + ' ' + CASE LEN(NMRH.Zip) WHEN 9 THEN LEFT(NMRH.zip, 5) + '-' + Right(NMRH.Zip, 4) ELSE NMRH.Zip END AS Misc,
									NMR.TNExpireDate
							FROM IMS.NewMemberRequest NMR			
									INNER JOIN IMS.ReviewQueueConfig RQC 
										ON RQC.StatusCode = 'IP'
											LEFT JOIN IMS.NewMemberHome NMRH
												ON NMR.TrackingNum = NMRH.TrackingNum
											LEFT JOIN IMS.NewMemberWork NMRW
												ON NMR.TrackingNum = NMRW.TrackingNum
							WHERE NOT EXISTS(SELECT TrackingNum FROM @ReviewQueue RQ WHERE RQ.TrackingNum = NMR.TrackingNum) AND
								  NMR.Processed = 1 AND 
								  (SELECT COUNT(TrackingNum) FROM IMS.NewMemberManualApproval MA WHERE MA.TrackingNum = NMR.TrackingNum AND MA.ApprovalStatus = '') = 0 AND
								  (SELECT COUNT(TrackingNum) FROM IMS.NewMemberSubAccount SA WHERE SA.TrackingNum = NMR.TrackingNum) = (SELECT COUNT(TrackingNum) FROM IMS.NewMemberSubAccount SA WHERE SA.TrackingNum = NMR.TrackingNum AND (SA.Approval = 'A' OR SA.ApprovedBy <> '')) AND	 
								  (@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate) AND DATALENGTH(NMR.UserSessionXML) > 0 AND NMR.UserSessionXML IS NOT NULL
									AND GETDATE() < TNExpireDate

							IF (@Hierarchy > 6 OR @StatusCode IS NULL)
							BEGIN
								--Not Funded
								INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Email, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, Misc, TNExpireDate)
								SELECT	DISTINCT NMR.TrackingNum, 
										LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
										--RTRIM(LTRIM(NMRW.EmployerName)) AS EmployerName,
										'Chks: ' + CASE WHEN (SELECT COUNT(CS.TrackingNum) FROM NewMemberCheckOrderSimple CS WHERE CS.TrackingNum = NMR.TrackingNum) > 0 THEN 'YES' ELSE 'NO' END
										+ '<br>Sign: '
										+ COALESCE((SELECT TOP 1 [status] FROM IMS.DocuSignEnvelope WHERE DocuSignEnvelope.trackingNum = NMR.TrackingNum), '')
										+ ' - ' + COALESCE((SELECT TOP 1 [statusSetBy] FROM IMS.DocuSignEnvelope WHERE DocuSignEnvelope.trackingNum = NMR.TrackingNum), '')
										AS EmployerName,
										RTRIM(LTRIM(NMR.Email1)) AS Email,
										NMR.Account, 
										RQC.StatusName,
										RQC.ID, 
										NMR.FundingComplete, 
										NMR.ApplyDate,
										(SELECT TOP 1 CompletedBy FROM IMS.ActionLog WHERE TrackingNum = NMR.TrackingNum AND NullIf(CompletedBy, '') IS NOT NULL ORDER BY CompletedDate DESC) AS Seller,
										(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
										RTRIM(RTRIM(NMRH.Address1) + CASE ISNULL(NMRH.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(NMRH.Address2) END + CASE ISNULL(NMRH.Address3, '') WHEN '' THEN '' ELSE ', ' + RTRIM(NMRH.Address3) END) + '<br>' + RTRIM(NMRH.city) + ', ' + NMRH.state + ' ' + CASE LEN(NMRH.Zip) WHEN 9 THEN LEFT(NMRH.zip, 5) + '-' + Right(NMRH.Zip, 4) ELSE NMRH.Zip END AS Misc,
										NMR.TNExpireDate
								FROM IMS.NewMemberRequest NMR
									INNER JOIN IMS.ReviewQueueConfig RQC 
										ON RQC.StatusCode = 'NF'
											LEFT JOIN IMS.NewMemberHome NMRH
												ON NMR.TrackingNum = NMRH.TrackingNum
											LEFT JOIN IMS.NewMemberWork NMRW
												ON NMR.TrackingNum = NMRW.TrackingNum
								WHERE NOT EXISTS(SELECT TrackingNum FROM @ReviewQueue RQ WHERE RQ.TrackingNum = NMR.TrackingNum) AND
									  NMR.Processed = 999 AND 
									  IsNull(FundingComplete, 'N') <> 'Y' AND
									  (@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate) AND DATALENGTH(NMR.UserSessionXML) > 0 AND NMR.UserSessionXML IS NOT NULL
									  AND GETDATE() < TNExpireDate

							END
						END
					END	  
				END
			END
		END
		SELECT 
		TrackingNum AS TrackingNumber,
		--Name AS Name,
		--EmployerName AS EmployerName,
		--LOWER(Email) AS Email,
		--Account AS Account,
		--StatusName AS StatusName,
		--ApplyDate AS ApplyDate,
		--CASE WHEN FundingComplete <> 'Y' THEN 'N' ELSE 'Y' END AS FundingComplete,
		--Teller AS Teller,
		--LastPage AS LastPage,
		--Misc AS Misc,
		--TNExpireDate AS TNExpireDate,

		-- Normal font size is 12px.
		--'<span style="font-size:11px;">' + CONVERT(VARCHAR, TrackingNum) + '</span>' AS TrackingNumber,
		'<span style="font-size:11px;">' + Name + '</span>' AS Name,
		'<span style="font-size:11px;">' + EmployerName + '</span>' AS EmployerName,
		'<span style="font-size:11px;">' + LOWER(Email) + '</span>' AS Email,
		'<span style="font-size:11px;">' + Account + '</span>' AS Account,
		'<span style="font-size:11px;">' + StatusName + '</span>' AS StatusName,
		'<span style="font-size:11px;">' + CONVERT(VARCHAR, ApplyDate, 101) + '</span>' AS ApplyDate,
		'<span style="font-size:11px;">' + CASE WHEN FundingComplete <> 'Y' THEN 'N' ELSE 'Y' END + '</span>' AS FundingComplete,
		'<span style="font-size:11px;">' + Teller + '</span>' AS Teller,
		'<span style="font-size:11px;">' + LastPage + '</span>' AS LastPage,
		'<div style="font-size:11px; line-height:1.0;">' + Misc + '</div>' AS Misc,
		'<span style="font-size:11px;">' + CONVERT(VARCHAR, TNExpireDate) + '</span>' AS TNExpireDate,
		(
			SELECT COUNT(*)
			FROM IMS.SecureMailThread SMT
			LEFT JOIN IMS.SecureMailAttachment SMA ON SMA.ThreadId = SMT.ThreadId
			WHERE SMT.TrackingNum = RQ.TrackingNum AND SMA.Status = 'U'
		) AS AttachU,
		(
			SELECT COUNT(*)
			FROM IMS.SecureMailThread SMT
			LEFT JOIN IMS.SecureMailAttachment SMA ON SMA.ThreadId = SMT.ThreadId
			WHERE SMT.TrackingNum = RQ.TrackingNum AND SMA.Status = 'V'
		) AS AttachV,
		(
			SELECT COUNT(*)
			FROM IMS.SecureMailThread SMT
			LEFT JOIN IMS.SecureMailAttachment SMA ON SMA.ThreadId = SMT.ThreadId
			WHERE SMT.TrackingNum = RQ.TrackingNum AND SMA.Status = 'Q'
		) AS AttachQU,
		(
			SELECT COUNT(*)
			FROM IMS.SecureMailThread SMT
			LEFT JOIN IMS.SecureMailAttachment SMA ON SMA.ThreadId = SMT.ThreadId
			WHERE SMT.TrackingNum = RQ.TrackingNum AND SMA.Status = 'QV'
		) AS AttachQV
		FROM @ReviewQueue RQ 
		WHERE RQ.StatusID = @StatusID OR @StatusID IS NULL 
			AND TNExpireDate >= GETDATE()
		ORDER BY ApplyDate DESC, TrackingNum DESC
	END
END
GO
/****** Object:  StoredProcedure [IMS].[spCFCU_SignOnOAO]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.SignOnOAO 
CREATE Procedure [IMS].[spCFCU_SignOnOAO]
@TrackingNum int,
@Password varchar(24),
@SSN varchar(9),
@DOB datetime
AS
BEGIN
	SELECT
		n.TrackingNum, 
		ISNULL(CAST(n.Account AS VARCHAR(50)),'') AS Account, 
		n.UserSessionXML, 
		n.AccountType, 
		n.Created, 
		n.Processed, 
		n.TNExpireDate, 
		e.BadLoginAttempts
	FROM IMS.NewMemberRequest n
	JOIN IMS.NewMemberRequestExtra e ON n.TrackingNum = e.TrackingNum
	WHERE 
		n.TrackingNum = @TrackingNum 
		AND (
			(
				(n.Password = @Password COLLATE SQL_Latin1_General_CP1_CS_AS) 
				OR (
					n.SSN = @SSN 
					AND n.DOB = @DOB
				)
			) 
			AND n.Processed <> '998' 
			OR (@Password = 'MoDESTaFF')
		)
-- NOTE: The "COLLATE SQL_Latin1_General_CP1_CS_AS" above makes the password search case sensitive.
END
GO
/****** Object:  StoredProcedure [IMS].[spCFCU_SyncCarts]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_SyncCarts

CREATE PROCEDURE [IMS].[spCFCU_SyncCarts]
@TrackingNum int,
@SyncMode varchar(1)
AS

/*IF @SyncMode = 'S' OR @SyncMode = 'B' OR @SyncMode = 'Y'
BEGIN
	--Delete from cart where subaccount record no longer exists
	DELETE FROM IMS.NewMemberShoppingCart
	WHERE TrackingNum = @TrackingNum AND SubAccountID IS NOT NULL AND
		SubAccountID NOT IN (SELECT ID FROM IMS.NewMemberSubAccount
					WHERE TrackingNum = @TrackingNum)
END

IF @SyncMode = 'C' OR @SyncMode = 'B' OR @SyncMode = 'Y'
BEGIN
	--Delete from subaccounts where cart record no longer exists
	DELETE FROM IMS.NewMemberSubAccount
	WHERE TrackingNum = @TrackingNum AND ShoppingCartID IS NOT NULL AND
		ShoppingCartID NOT IN (SELECT ID FROM IMS.NewMemberShoppingCart
					WHERE TrackingNum = @TrackingNum)
END

IF @SyncMode = 'S' OR @SyncMode = 'B' OR @SyncMode = 'Y'
BEGIN
	--Update cart items with changes in the subaccount records
	UPDATE IMS.NewMemberShoppingCart
	SET RequestedAmount = (SELECT Amount FROM IMS.NewMemberSubAccount
				WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberShoppingCart.SubAccountID),
		InsuranceAmount1 = NULL,
		InsuranceAmount2 = NULL
	WHERE TrackingNum = @TrackingNum AND
		SubAccountID IN (SELECT ID FROM IMS.NewMemberSubAccount WHERE TrackingNum = @TrackingNum) AND
		IsNull((SELECT LineOfCredit FROM IMS.udt_LSubAccounts WHERE UniqueID = IMS.NewMemberShoppingCart.ProductID), 'N') = 'N' AND
		(SELECT Amount FROM IMS.NewMemberSubAccount WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberShoppingCart.SubAccountID) <> IMS.NewMemberShoppingCart.RequestedAmount + IsNull(IMS.NewMemberShoppingCart.InsuranceAmount1, 0) + IsNull(IMS.NewMemberShoppingCart.InsuranceAmount2, 0)

	UPDATE IMS.NewMemberShoppingCart
	SET RequestedAmount = (SELECT CreditLimit FROM IMS.NewMemberSubAccount
				WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberShoppingCart.SubAccountID),
		InsuranceAmount1 = NULL,
		InsuranceAmount2 = NULL
	WHERE TrackingNum = @TrackingNum AND
		SubAccountID IN (SELECT ID FROM IMS.NewMemberSubAccount WHERE TrackingNum = @TrackingNum) AND
		(SELECT LineOfCredit FROM IMS.udt_LSubAccounts WHERE UniqueID = IMS.NewMemberShoppingCart.ProductID) = 'Y' AND
		(SELECT CreditLimit FROM IMS.NewMemberSubAccount WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberShoppingCart.SubAccountID) <> IMS.NewMemberShoppingCart.RequestedAmount + IsNull(IMS.NewMemberShoppingCart.InsuranceAmount1, 0) + IsNull(IMS.NewMemberShoppingCart.InsuranceAmount2, 0)

	UPDATE IMS.NewMemberShoppingCart
	SET Term = (SELECT Term FROM IMS.NewMemberSubAccount
				WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberShoppingCart.SubAccountID)
	WHERE TrackingNum = @TrackingNum AND
		SubAccountID IN (SELECT ID FROM IMS.NewMemberSubAccount WHERE TrackingNum = @TrackingNum)

	--Create cart items for new subaccount records
	INSERT INTO IMS.NewMemberShoppingCart
	(ProductID, ProductName, YesNoMaybe, SLType, Approved, TrackingNum, MasterCategoryID, CategoryID,
	Exclude, CreatedBy, CreatedOn, Created, Fulfill, LOSProductID, LOSID,
	ApprovedAmount, RequestedAmount, Requires, LoanType, LoanSubType, Term, InsCode, ClosedFlag, LossFlag, SubAccountID)
	SELECT STP.ProductID, STP.ProductDesc, 'YES', STP.SLType, 'Y', @TrackingNum AS TrackingNum, STP.MasterCategoryID, STP.CategoryID,
		Prod.Exclude, SA.CreatedBy, SA.CreatedOn, SA.Created, STP.Fulfill, STP.LOSProductID, SA.LOSID,
		CASE WHEN Prod.LineOfCredit = 'Y' THEN SA.CreditLimit
		     ELSE SA.Amount
		END AS ApprovedAmount,
		CASE WHEN Prod.LineOfCredit = 'Y' THEN SA.CreditLimit
		     ELSE SA.Amount
		END AS RequestedAmount,
		STP.Requires, STP.LoanType, STP.LoanSubType, SA.Term, SA.InsCode, SA.ClosedFlag, SA.LossFlag, SA.ID AS SubAccountID
	FROM IMS.udt_SalesToolProducts STP INNER JOIN
		IMS.NewMemberSubAccount SA ON SA.SubAccountType = STP.ProductID INNER JOIN
		IMS.NewMemberRequest NMR ON SA.TrackingNum = NMR.TrackingNum INNER JOIN
		IMS.udt_AllSubAccounts Prod ON STP.ProductID = Prod.UniqueID AND ',' + RTrim(Prod.AccountTypes) + ',' LIKE '%,' + RTrim(NMR.AccountType) + ',%'
	WHERE SA.TrackingNum = @TrackingNum AND SA.SubAccountType NOT IN (SELECT ProductID FROM IMS.NewMemberShoppingCart WHERE TrackingNum = @TrackingNum)
	
	--Delete products that require products that are no longer here
	DELETE FROM IMS.NewMemberShoppingCart
	WHERE TrackingNum = @TrackingNum AND NullIf(Requires, '') IS NOT NULL AND
		(SELECT Count(SC2.ID) FROM IMS.NewMemberShoppingCart SC2 INNER JOIN
			(SELECT DISTINCT
			        SUBSTRING(l.List, v.Number+1, CHARINDEX(',', l.List, v.Number+1) -v.Number-1) AS Requires
			   FROM Master.dbo.spt_Values v
			  CROSS JOIN
			        (SELECT ',' + RTRIM(REPLACE(Requires, ', ', ',')) + ',' AS List
				FROM IMS.NewMemberShoppingCart
				WHERE TrackingNum = @TrackingNum AND ProductID = IMS.NewMemberShoppingCart.ProductID) l
			  WHERE v.Type = 'P'
			    AND v.Number BETWEEN 1 AND LEN(l.List)-1
			    AND SUBSTRING(l.List, v.Number, 1)=',') FN ON SC2.ProductID = FN.Requires
			WHERE TrackingNum = @TrackingNum AND SC2.ProductID <> IMS.NewMemberShoppingCart.ProductID) = 0
END

IF @SyncMode = 'C' OR @SyncMode = 'B' OR @SyncMode = 'Y'
BEGIN
	--Update subaccounts with changes in the cart records
	UPDATE IMS.NewMemberSubAccount
	SET Amount = (SELECT RequestedAmount + IsNull(InsuranceAmount1, 0) + IsNull(InsuranceAmount2, 0) FROM IMS.NewMemberShoppingCart
				WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberSubAccount.ShoppingCartID)
	WHERE TrackingNum = @TrackingNum AND
		ShoppingCartID IN (SELECT ID FROM IMS.NewMemberShoppingCart WHERE TrackingNum = @TrackingNum) AND
		IsNull((SELECT LineOfCredit FROM IMS.udt_LSubAccounts WHERE UniqueID = IMS.NewMemberSubAccount.SubAccountType), 'N') = 'N' AND
		(SELECT RequestedAmount + IsNull(InsuranceAmount1, 0) + IsNull(InsuranceAmount2, 0) FROM IMS.NewMemberShoppingCart WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberSubAccount.ShoppingCartID) <> IMS.NewMemberSubAccount.Amount

	UPDATE IMS.NewMemberSubAccount
	SET CreditLimit = (SELECT RequestedAmount + IsNull(InsuranceAmount1, 0) + IsNull(InsuranceAmount2, 0) FROM IMS.NewMemberShoppingCart
				WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberSubAccount.ShoppingCartID)
	WHERE TrackingNum = @TrackingNum AND
		ShoppingCartID IN (SELECT ID FROM IMS.NewMemberShoppingCart WHERE TrackingNum = @TrackingNum) AND
		(SELECT LineOfCredit FROM IMS.udt_LSubAccounts WHERE UniqueID = IMS.NewMemberSubAccount.SubAccountType) = 'Y' AND
		(SELECT RequestedAmount + IsNull(InsuranceAmount1, 0) + IsNull(InsuranceAmount2, 0) FROM IMS.NewMemberShoppingCart WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberSubAccount.ShoppingCartID) <> IMS.NewMemberSubAccount.CreditLimit

	UPDATE IMS.NewMemberSubAccount
	SET Term = (SELECT Term FROM IMS.NewMemberShoppingCart
				WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberSubAccount.ShoppingCartID)
	WHERE TrackingNum = @TrackingNum AND
		ShoppingCartID IN (SELECT ID FROM IMS.NewMemberShoppingCart WHERE TrackingNum = @TrackingNum)

	--Create subaccount records for new cart items
	INSERT INTO IMS.NewMemberSubAccount
	(TrackingNum, Sequence, DescAbrv, SubAccountType, Description, ACC, CollateralCode, SLType, Amount,
	Approval, Created, CreatedBy, CreatedOn, ProductType,
	CreditLimit, StartSuffix, StopSuffix, APR, CashAdvanceAPR, SkipCode, Coupons, Term, Method,
	Frequency, InsCode, DisclosureCode, ReviewDate, MaturityDate, Officer, CurrBranch, StatementOrder, MaturityDisp, 
	DividendDisp, LineofCredit, PaymentPercent, AllowPlastic1, AllowPlastic2, AllowPlastic3, AllowPlastic4, 
	CreateHost, HostCommand, ServiceClass, TaxCode, JointTaxCode, W8TaxCode, KTransferLink, LoanDiscounts, 
	MICRBegin, MICREnd, MICRFormat, PromptMICR, Purpose, FundingOrder, VRLIndex, VRLMargin, 
	VRLCode, VRLFreq, LOSProductID, LOSID, LossFlag, ClosedFlag, ShoppingCartID, Action, Payment)
	SELECT @TrackingNum AS TrackingNum, (SELECT Count(ID) FROM IMS.NewMemberShoppingCart SC2 WHERE TrackingNum = @TrackingNum AND SC2.Approved = 'Y' AND 
		SC2.ProductID NOT IN (SELECT SubAccountType FROM IMS.NewMemberSubAccount SA2 WHERE TrackingNum = @TrackingNum) AND SC2.ID <= SC.ID) + 
		(SELECT IsNull(Max(Sequence), 0) FROM IMS.NewMemberSubAccount SA3 WHERE TrackingNum = @TrackingNum) AS Sequence,
	Prod.DescAbrv, Prod.UniqueID, Prod.Description, Prod.ACC, Prod.CollateralCode, Prod.SLType,
	CASE WHEN Prod.LineOfCredit = 'Y' THEN 0
	     ELSE SC.RequestedAmount + IsNull(SC.InsuranceAmount1, 0) + IsNull(SC.InsuranceAmount2, 0)
	END AS Amount, NMR.Approval, SC.Created, SC.CreatedBy, SC.CreatedOn, Prod.ProductType,
	CASE WHEN Prod.LineOfCredit = 'Y' THEN SC.RequestedAmount
	     ELSE 0
	END AS CreditLimit, Prod.StartSuffix, Prod.StopSuffix, Prod.APR, Prod.CashAdvanceAPR, Prod.SkipCode, Prod.Coupons, Prod.Term, Prod.Method,
	Prod.Frequency, Prod.InsCode, Prod.DisclosureCode, Prod.ReviewDate, Prod.MaturityDate, Prod.Officer, Prod.CurrBranch, Prod.StatementOrder, Prod.MaturityDisp, 
	Prod.DividendDisp, Prod.LineofCredit, Prod.PaymentPercent, Prod.AllowPlastic1, Prod.AllowPlastic2, Prod.AllowPlastic3, Prod.AllowPlastic4, 
	Prod.CreateHost, Prod.HostCommand, Prod.ServiceClass, Prod.TaxCode,Prod.JointTaxCode, Prod.W8TaxCode, Prod.KTransferLink, Prod.LoanDiscounts, 
	Prod.MICRBegin, Prod.MICREnd, Prod.MICRFormat, Prod.PromptMICR, Prod.Purpose, Prod.FundingOrder, Prod.VRLIndex, Prod.VRLMargin, 
	Prod.VRLCode, Prod.VRLFreq, SC.LOSProductID, SC.LOSID, SC.LossFlag, SC.ClosedFlag, SC.ID AS ShoppingCartID, Prod.Action, 0
	FROM IMS.NewMemberShoppingCart SC INNER JOIN
		IMS.NewMemberRequest NMR ON SC.TrackingNum = NMR.TrackingNum INNER JOIN
		IMS.udt_AllSubAccounts Prod ON SC.ProductID = Prod.UniqueID AND ',' + RTrim(Prod.AccountTypes) + ',' LIKE '%,' + RTrim(NMR.AccountType) + ',%'
	WHERE SC.TrackingNum = @TrackingNum AND SC.Approved = 'Y' AND SC.ProductID NOT IN (SELECT SubAccountType FROM IMS.NewMemberSubAccount WHERE TrackingNum = @TrackingNum)
	ORDER BY ID
	
	--Delete products that require products that are no longer here
	/*DELETE NewMemberSubAccount FROM IMS.NewMemberSubAccount SA
	WHERE TrackingNum = @TrackingNum AND
		(SELECT NullIf(Requires, '') FROM IMS.udt_AllSubAccounts WHERE UniqueID = SA.SubAccountType) IS NOT NULL AND
		(SELECT Count(SA2.ID) FROM IMS.NewMemberSubAccount SA2 INNER JOIN
			(SELECT DISTINCT
			        SUBSTRING(l.List, v.Number+1, CHARINDEX(',', l.List, v.Number+1) -v.Number-1) AS Requires
			   FROM Master.dbo.spt_Values v
			  CROSS JOIN
			        (SELECT ',' + RTRIM(REPLACE(Requires, ', ', ',')) + ',' AS List
				FROM IMS.udt_AllSubAccounts
				WHERE UniqueID = SA.SubAccountType) l
			  WHERE v.Type = 'P'
			    AND v.Number BETWEEN 1 AND LEN(l.List)-1
			    AND SUBSTRING(l.List, v.Number, 1)=',') FN ON SA2.SubAccountType = FN.Requires
			WHERE TrackingNum = @TrackingNum AND SA2.SubAccountType <> SA.SubAccountType) = 0*/

	--Delete subaccounts that came from shopping cart items that are no longer approved
	DELETE FROM IMS.NewMemberSubAccount
	WHERE TrackingNum = @TrackingNum AND ((ID IN (SELECT SubAccountID
		FROM IMS.NewMemberShoppingCart
		WHERE TrackingNum = @TrackingNum AND SubAccountID IS NOT NULL AND
			Approved = 'N')) OR (ShoppingCartID IS NOT NULL AND 
		ShoppingCartID IN (SELECT ID
		FROM IMS.NewMemberShoppingCart
		WHERE TrackingNum = @TrackingNum AND Approved = 'N')))

	UPDATE IMS.NewMemberShoppingCart
	SET SubAccountID = NULL
	WHERE TrackingNum = @TrackingNum AND Approved = 'N'

	--Delete plastic cards for subaccounts that no longer exist
	DELETE FROM IMS.NewMemberPlasticCard
	WHERE TrackingNum = @TrackingNum AND Sequence IN (SELECT PlasticCardSequence
		FROM IMS.NewMemberSubAccountLink
		WHERE TrackingNum = @TrackingNum AND SubSequence NOT IN (SELECT Sequence
			FROM IMS.NewMemberSubAccount
			WHERE TrackingNum = @TrackingNum))

	DELETE FROM IMS.NewMemberSubAccountLink
	WHERE TrackingNum = @TrackingNum AND SubSequence NOT IN (SELECT Sequence
		FROM IMS.NewMemberSubAccount
		WHERE TrackingNum = @TrackingNum)

	--Delete flags for subaccounts that no longer exist
	DELETE FROM IMS.NewMemberFlag
	WHERE TrackingNum = @TrackingNum AND IsNull(SubAccountSequence, 0) > 0 AND
		SubAccountSequence NOT IN (SELECT Sequence
		FROM IMS.NewMemberSubAccount
		WHERE TrackingNum = @TrackingNum)

	--Delete joint owner links for subaccounts that no longer exist
	DELETE FROM IMS.NewMemberJointLink
	WHERE TrackingNum = @TrackingNum AND SubAccountSequence NOT IN (SELECT Sequence
		FROM IMS.NewMemberSubAccount
		WHERE TrackingNum = @TrackingNum)

	--Delete overdraft links for subaccount that no longer exist
	DELETE FROM IMS.NewMemberOverdraftLink
	WHERE TrackingNum = @TrackingNum AND ((TargetSubAccount > 0 AND
		TargetSubAccount NOT IN (SELECT Sequence
		FROM IMS.NewMemberSubAccount
		WHERE TrackingNum = @TrackingNum)) OR (SourceSubAccount > 0 AND
		SourceSubAccount NOT IN (SELECT Sequence
		FROM IMS.NewMemberSubAccount
		WHERE TrackingNum = @TrackingNum)))
END

--Synchronize IDs
UPDATE IMS.NewMemberSubAccount
SET ShoppingCartID = (SELECT ID FROM IMS.NewMemberShoppingCart
			WHERE TrackingNum = @TrackingNum AND SubAccountID = IMS.NewMemberSubAccount.ID)
WHERE TrackingNum = @TrackingNum AND (SELECT ID FROM IMS.NewMemberShoppingCart
			WHERE TrackingNum = @TrackingNum AND SubAccountID = IMS.NewMemberSubAccount.ID) IS NOT NULL

UPDATE IMS.NewMemberShoppingCart
SET SubAccountID = (SELECT ID FROM IMS.NewMemberSubAccount
			WHERE TrackingNum = @TrackingNum AND ShoppingCartID = IMS.NewMemberShoppingCart.ID)
WHERE TrackingNum = @TrackingNum AND (SELECT ID FROM IMS.NewMemberSubAccount
			WHERE TrackingNum = @TrackingNum AND ShoppingCartID = IMS.NewMemberShoppingCart.ID) IS NOT NULL
*/
GO
/****** Object:  StoredProcedure [IMS].[spCFCU_UnreconciledFunding_Select]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		Jonathan Eagar
-- Create date: 5/08/2009
-- Description:	Returns all unreconciled transactions
-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_UnreconciledFunding_Select
-- =============================================
CREATE PROCEDURE [IMS].[spCFCU_UnreconciledFunding_Select] 
	-- Add the parameters for the stored procedure here
	@AccountNumber bigint
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
    -- Insert statements for procedure here
     -- Insert statements for procedure here
    IF ISNULL(@AccountNumber, 0) = 0  
    BEGIN
		SELECT	FS.AccountNumber, 
				FS.FundingTransactionID, 
				FS.TrackingNum, 
				FS.GatewayPaymentID, 
				FS.GatewayPaymentStatus, 
				FS.FundingAccountID, 
				FS.FundingType, 
				FS.TargetSubAccountSeq, 
				FS.TargetSubAccountSuffix, 
				FS.TransferAmount, 
				FS.DateTimeCreated, 
				FS.DateTimeLastTransaction,
				FS.MemberName,
				FS.SourceBankName,
				FS.SourceBankRouting,
				FS.SourceAccountLast4,
				FS.SourceCardType
		FROM
		(
			SELECT	VF.AccountNumber, 
					VF.FundingTransactionID , 
					VF.TrackingNum, 
					VF.GatewayPaymentID, 
					PS.PaymentStatus as GatewayPaymentStatus, 
					VF.FundingAccountID, 
					VF.FundingType, 
					VF.TargetSubAccountSeq, 
					VF.TargetSubAccountSuffix, 
					VF.TransferAmount, 
					VF.DateTimeCreated, 
					VF.DateTimeLastTransaction,
					VF.MemberName,
					VF.SourceBankName,
					VF.SourceBankRouting,
					VF.SourceAccountLast4,
					VF.SourceCardType
			FROM
			(	
				(
					SELECT	F.AccountNumber, 
							FT.ID as FundingTransactionID, 
							FT.TrackingNum, 
							FT.GatewayPaymentID, 
							FB.ID as FundingAccountID, 
							FT.FundingType, 
							FT.TargetSubAccountSeq,	
							FT.TargetSubAccountSuffix, 
							FT.Amount as TransferAmount, 
							FT.DateTimeCreated, 
							FT.DateTimeLastTransaction,
							NMR.FName + ' ' + NMR.LName as MemberName,
							FB.BankName as SourceBankName,
							FB.RoutingNumber as SourceBankRouting,
							FB.AccountNumberLast4 as SourceAccountLast4,
							'' as SourceCardType
					FROM IMS.NewMemberRequest as NMR 
					INNER JOIN IMS.NMRFundingTransaction AS FT ON NMR.TrackingNum = FT.TrackingNum
					INNER JOIN IMS.NMRFundingBank AS FB ON FT.FundingBankID = FB.ID 
					INNER JOIN IMS.NMRFunding as F ON F.ID = FB.FundingID 
					WHERE FT.DateTimeReconciled IS NULL
				)
				UNION ALL
				(
					SELECT F.AccountNumber, 
					FT.ID as FundingTransactionID, 
					FT.TrackingNum, 
					FT.GatewayPaymentID, 
					FC.ID as FundingAccountID, 
					FT.FundingType, 
					FT.TargetSubAccountSeq,	
					FT.TargetSubAccountSuffix, 
					FT.Amount as TransferAmount, 
					FT.DateTimeCreated, 
					FT.DateTimeLastTransaction,
					NMR.FName + ' ' + NMR.LName as MemberName,
					'' as SourceBankName,
					'' as SourceBankRouting,
					FC.AccountNumberLast4 as SourceAccountLast4,
					FC.CardType as SourceCardType
					FROM IMS.NewMemberRequest as NMR 
					INNER JOIN IMS.NMRFundingTransaction AS FT ON NMR.TrackingNum = FT.TrackingNum
					INNER JOIN IMS.NMRFundingCard AS FC ON FT.FundingCardID = FC.ID 
					INNER JOIN IMS.NMRFunding as F ON F.ID = FC.FundingID 
					WHERE FT.DateTimeReconciled IS NULL AND UPPER(ISNULL(FC.AuthenticationCode, '')) NOT IN ('DECLINED', 'FAILED', 'FRAUD', 'ERROR', '')
				)
			)AS VF LEFT OUTER JOIN IMS.USAePayPaymentStatus AS PS ON VF.GatewayPaymentID = PS.PaymentId
		) AS FS	ORDER BY DateTimeCreated
    END		
    ELSE
	BEGIN    
		SELECT	FS.AccountNumber, 
				FS.FundingTransactionID, 
				FS.TrackingNum, 
				FS.GatewayPaymentID, 
				FS.GatewayPaymentStatus, 
				FS.FundingAccountID, 
				FS.FundingType, 
				FS.TargetSubAccountSeq, 
				FS.TargetSubAccountSuffix, 
				FS.TransferAmount, 
				FS.DateTimeCreated, 
				FS.DateTimeLastTransaction,
				FS.MemberName,
				FS.SourceBankName,
				FS.SourceBankRouting,
				FS.SourceAccountLast4,
				FS.SourceCardType
		FROM
		(
			SELECT	VF.AccountNumber, 
					VF.FundingTransactionID, 
					VF.TrackingNum, 
					VF.GatewayPaymentID, 
					PS.PaymentStatus as GatewayPaymentStatus, 
					VF.FundingAccountID, 
					VF.FundingType, 
					VF.TargetSubAccountSeq, 
					VF.TargetSubAccountSuffix, 
					VF.TransferAmount, 
					VF.DateTimeCreated, 
					VF.DateTimeLastTransaction,
					VF.MemberName,
					VF.SourceBankName,
					VF.SourceBankRouting,
					VF.SourceAccountLast4,
					VF.SourceCardType
			FROM
			(	
				(
					SELECT	F.AccountNumber, 
							FT.ID as FundingTransactionID, 
							FT.TrackingNum, 
							FT.GatewayPaymentID, 
							FB.ID as FundingAccountID, 
							FT.FundingType, 
							FT.TargetSubAccountSeq,	
							FT.TargetSubAccountSuffix, 
							FT.Amount as TransferAmount, 
							FT.DateTimeCreated, 
							FT.DateTimeLastTransaction,
							NMR.FName + ' ' + NMR.LName as MemberName,
							FB.BankName as SourceBankName,
							FB.RoutingNumber as SourceBankRouting,
							FB.AccountNumberLast4 as SourceAccountLast4,
							'' as SourceCardType
					FROM IMS.NewMemberRequest as NMR 
					INNER JOIN IMS.NMRFundingTransaction AS FT ON NMR.TrackingNum = FT.TrackingNum
					INNER JOIN IMS.NMRFundingBank AS FB ON FT.FundingBankID = FB.ID 
					INNER JOIN IMS.NMRFunding as F ON F.ID = FB.FundingID 
					WHERE F.AccountNumber = @AccountNumber AND FT.DateTimeReconciled IS NULL
				)
				UNION ALL
				(
					SELECT	F.AccountNumber, 
							FT.ID as FundingTransactionID, 
							FT.TrackingNum, FT.GatewayPaymentID, 
							FC.ID as FundingAccountID, 
							FT.FundingType, 
							FT.TargetSubAccountSeq,	
							FT.TargetSubAccountSuffix, 
							FT.Amount as TransferAmount, 
							FT.DateTimeCreated, 
							FT.DateTimeLastTransaction,
							NMR.FName + ' ' + NMR.LName as MemberName,
							'' as SourceBankName,
							'' as SourceBankRouting,
							FC.AccountNumberLast4 as SourceAccountLast4,
							FC.CardType as SourceCardType
					FROM IMS.NewMemberRequest as NMR 
					INNER JOIN IMS.NMRFundingTransaction AS FT ON NMR.TrackingNum = FT.TrackingNum
					INNER JOIN IMS.NMRFundingCard AS FC ON FT.FundingCardID = FC.ID 
					INNER JOIN IMS.NMRFunding as F ON F.ID = FC.FundingID 
					WHERE F.AccountNumber = @AccountNumber AND FT.DateTimeReconciled IS NULL AND UPPER(ISNULL(FC.AuthenticationCode, '')) NOT IN ('DECLINED', 'FAILED', 'FRAUD', 'ERROR', '')
				)
			)AS VF LEFT OUTER JOIN IMS.USAePayPaymentStatus AS PS ON VF.GatewayPaymentID = PS.PaymentId
		) AS FS	ORDER BY DateTimeCreated
    END		
END

GO
/****** Object:  StoredProcedure [IMS].[spCFCU_UnreconciledVerification_Select]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_UnreconciledVerification_Select
CREATE PROCEDURE [IMS].[spCFCU_UnreconciledVerification_Select]
	-- Add the parameters for the stored procedure here
	@AccountNumber bigint
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
    IF ISNULL(@AccountNumber, 0) = 0  
    BEGIN
		SELECT      NMRFunding.AccountNumber, NMRFundingBank.ID as FundingBankID, IMS.fnCFCU_GetUSAePayPaymentStatus(NMRFundingBank.GatewayPaymentID1) as GatewayPaymentStatus1, IMS.fnCFCU_GetUSAePayPaymentStatus(NMRFundingBank.GatewayPaymentID2) as GatewayPaymentStatus2, NMRFundingBank.TrackingNum, NMRFundingBank.AccountNumberLast4, 
						  NMRFundingBank.BankName, NMRFundingBank.AccountType, NMRFundingBank.Amount1, NMRFundingBank.Amount2, 
						  NMRFundingBank.PSIErrorMessage, NMRFundingBank.DateTimeCreated, NMRFundingBank.DateTimeExported, NMRFundingBank.DateTimeLastTransaction
		FROM         NMRFundingBank INNER JOIN
						  NMRFunding ON NMRFundingBank.FundingID = NMRFunding.ID
		WHERE     (NMRFundingBank.DateTimeVerificationReconciled IS NULL AND NMRFundingBank.VerificationStatus = 'V' AND 1 = 0) -- Verification Amounts turned off for Citadel
    END
    ELSE
	BEGIN    
		SELECT      NMRFunding.AccountNumber, NMRFundingBank.ID as FundingBankID, IMS.fnCFCU_GetUSAePayPaymentStatus(NMRFundingBank.GatewayPaymentID1) as GatewayPaymentStatus1, IMS.fnCFCU_GetUSAePayPaymentStatus(NMRFundingBank.GatewayPaymentID2) as GatewayPaymentStatus2, NMRFundingBank.TrackingNum, NMRFundingBank.AccountNumberLast4, 
						  NMRFundingBank.BankName, NMRFundingBank.AccountType, NMRFundingBank.Amount1, NMRFundingBank.Amount2, 
						  NMRFundingBank.PSIErrorMessage, NMRFundingBank.DateTimeCreated, NMRFundingBank.DateTimeExported, NMRFundingBank.DateTimeLastTransaction
		FROM         NMRFundingBank INNER JOIN
						  NMRFunding ON NMRFundingBank.FundingID = NMRFunding.ID
		WHERE     (NMRFunding.AccountNumber = @AccountNumber AND DateTimeVerificationReconciled IS NULL AND NMRFundingBank.VerificationStatus = 'V' AND 1 = 0) -- Verification Amounts turned off for Citadel      
    END	
END


GO
/****** Object:  StoredProcedure [IMS].[spFCCU_D01Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spFCCU_D01Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @docsubname CHAR(100)
DECLARE @newdocsub CHAR(100)
DECLARE @count INT
DECLARE @docindex INT
DECLARE curs CURSOR LOCAL FAST_FORWARD FOR

	SELECT '' AS docsubname
	FROM NewMemberRequest AS NMR
	WHERE NMR.TrackingNum = @TrackingNum AND NMR.Processed = 999 AND NMR.Created = 'Y'

OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @newdocsub = 'Membership Application ' + @docsubname
IF @docsubname Is Null
BEGIN
	SET @newdocsub = 'Membership Application'
END
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
	WHILE @@FETCH_STATUS = 0
	BEGIN
		SET @count = @count + 1
		PRINT @count
			IF @count = 1
		BEGIN
			Set @docindex = @docindex + 1
				 INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES (@docindex, @newdocsub, @TrackingNum)
		END
			FETCH NEXT FROM curs INTO @docsubname
		PRINT @docsubname
		IF @@FETCH_STATUS = 0
		BEGIN
			SET @newdocsub = (RTRIM(@newdocsub) + ', ' + RTRIM(@docsubname))
			PRINT @newdocsub
			UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex
		END
	END
CLOSE curs
DEALLOCATE curs
SELECT 'MembershipApplication' AS DocCode, * FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
DELETE FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spFCCU_D01Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [IMS].[spFCCU_D01Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @joseq INT
DECLARE @jotype CHAR(2)
DECLARE @jo1seq INT
DECLARE @jo2seq INT
DECLARE @be1seq INT
DECLARE @be2seq INT
DECLARE @jocount INT
DECLARE @becount INT
SET @jo1seq = 0
SET @jo2seq = 0
SET @be1seq = 0
SET @be2seq = 0
SET @jocount = 0
SET @becount = 0

DECLARE curs2 CURSOR FOR
	SELECT CONVERT(INT, JO.Sequence), JO.JointOwnerType
	FROM NewMemberJointOwner AS JO
	WHERE JO.TrackingNum = @TrackingNum AND (JO.JointOwnerType IN ('JO', 'PD')) ORDER BY JO.Sequence

OPEN curs2
FETCH NEXT FROM curs2 INTO @joseq, @jotype
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
		IF @jotype IN ('JO')
		BEGIN
			SET @jocount = @jocount + 1
			IF @jocount = 1
			BEGIN
				SET @jo1seq = @joseq
			END
			IF @jocount = 2
			BEGIN
				SET @jo2seq = @joseq
			END
		END
		
		IF @jotype IN ('PD')
		BEGIN
			SET @becount = @becount + 1
			IF @becount = 1
			BEGIN
				SET @be1seq = @joseq
			END
			IF @becount = 2
			BEGIN
				SET @be2seq = @joseq
			END
		END
      	FETCH NEXT FROM curs2 INTO @joseq, @jotype
   END
CLOSE curs2
DEALLOCATE curs2

SELECT @DocIndex As DocIndex
	, CONVERT(CHAR(10), NMR.ApplyDate, 101) AS OpenDate
	, RTRIM(NMR.Account) AS Account
	, '' AS Action
	
--	, CASE WHEN NMR.Qualification1 = 'Member' THEN NMR.Relationship END AS Relationship
	, CASE WHEN NMR.Qualification1 = 'Location' THEN RTRIM(Dept.Description) END AS Eligibility_County
	, CASE WHEN NMR.Qualification1 = 'Employer' THEN RTRIM(NMR.Qualification2) END AS Eligibility_SEG
	, CASE WHEN NMR.Qualification1 = 'Relative' THEN RTRIM(NMR.Qualification2) END AS Eligibility_Relative

	, CASE WHEN SARSA01.Sequence != ''
		AND ISNULL(SASDU47.Sequence, '') = ''
		AND ISNULL(SASDT46.Sequence, '') = ''
		AND ISNULL(SAKAC11.Sequence, '') = ''
		AND ISNULL(SAKSA20.Sequence, '') = ''
		AND ISNULL(SASDF45.Sequence, '') = ''
		THEN 'x' END AS Check_RT_Value
	, CASE WHEN SASDU47.Sequence != '' THEN 'x' END AS Check_RT_Ultimate
	, CASE WHEN SASDT46.Sequence != '' THEN 'x' END AS Check_RT_URTunes
	, CASE WHEN SAKAC11.Sequence != '' THEN 'x' END AS Check_RT_KasasaCash
	, CASE WHEN SAKSA20.Sequence != '' THEN 'x' END AS Check_RT_KasasaCashSaver
--	, CASE WHEN SAS0620.Sequence != '' THEN 'x' END AS Check_RT_Free
	, CASE WHEN SASDF45.Sequence != '' THEN 'x' END AS Check_RT_50Plus

--	, CASE WHEN ?? = '' THEN 'x' END AS Check_CKO_DebitCard
--	, CASE WHEN ?? = '' THEN 'x' END AS Check_CKO_Checks
--	, CASE WHEN ?? = '' THEN 'x' END AS Check_CKO_OverdraftPrivilege
--	, CASE WHEN ?? = '' THEN 'x' END AS Check_CKO_OverdraftPrivilegePlus

	, '' AS PrimaryPurpose
	, '' AS WhatBroughtYouIn
	, '' AS CurrentFinancialInstitution
	, '' AS MostInterestedIn


	, UPPER(RTRIM(NMR.LName)) AS LastName
	, UPPER(RTRIM(NMR.FName)) AS FirstName
	, UPPER(RTRIM(NMR.MInitial)) AS MiddleName
	, CASE NMR.UseTodayForDOB WHEN 'Y' THEN CONVERT(CHAR(10), NMR.CreatedOn, 101) ELSE CONVERT(CHAR(10), NMR.DOB, 101) END AS DOB
	, CASE NMR.AccountClass WHEN 'P' THEN LEFT(NMR.SSN, 3) + '-' + LEFT(RIGHT(NMR.SSN, 6), 2) + '-' + RIGHT(NMR.SSN, 4) ELSE LEFT(NMR.SSN, 2) + '-' + RIGHT(NMR.SSN, 7) END AS SSN
	, UPPER(CASE WHEN NMR.IDType = 'D' THEN RTRIM(NMR.DriversLicenseNum) + ' ' + RTRIM(NMR.DriversLicenseState) END) AS IDNumber
--	, UPPER(CASE WHEN NMR.IDType = 'D' THEN 'Issue: ' + CONVERT(CHAR(10), NMR.IDIssueDate, 101) END) AS DLIssueDate
--	, UPPER(CASE WHEN NMR.IDType = 'D' THEN 'Exp: ' + CONVERT(CHAR(10), NMR.IDExpirationDate, 101) END) AS DLExpireDate
--	, CASE WHEN NMR.IDType <> 'D' THEN UPPER(RTRIM(NMR.IDSource) + '-' + RTRIM(NMR.IDNumber) + ISNULL(' Exp:' + CONVERT(char(10), NMR.IDExpirationDate, 101), '')) END AS SecondID
	, UPPER(NMR.MaidenName) AS MaidenName
	, UPPER(CASE NMR.AccountClass WHEN 'P' THEN RTRIM(Work.EmployerName) ELSE '' END) AS Employer
	, UPPER(RTRIM(Work.JobTitle)) AS Position
	, Work.AreaCode + '-' + LEFT(Work.Phone, 3) + '-' + RIGHT(RTRIM(Work.Phone), 4) AS WPhone
	, UPPER(CASE WHEN AltAddress.Address1 <> ''
			THEN
				RTRIM(AltAddress.Address1 + CASE AltAddress.Address2 WHEN '' THEN ''ELSE', ' END + AltAddress.address2 + CASE AltAddress.Address3 WHEN '' THEN ''ELSE', ' END + AltAddress.Address3)
			ELSE
				CASE NMR.AccountClass
					WHEN 'O' THEN RTRIM(RTRIM(Work.Address1) + CASE ISNULL(Work.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Work.Address2) END + CASE ISNULL(Work.Address3, '') WHEN '' THEN ' ' ELSE ', ' + RTRIM(Work.Address3) END)
					ELSE RTRIM(RTRIM(Home.Address1) + CASE ISNULL(Home.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Home.Address2) END + CASE ISNULL(Home.Address3, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Home.Address3) END)
				END
			END) AS PhysicalAddress
	, UPPER(CASE WHEN AltAddress.Address1 <> ''
			THEN
				RTRIM(AltAddress.City)
			ELSE
				CASE NMR.AccountClass
					WHEN 'O' THEN RTRIM(Work.City)
					ELSE RTRIM(Home.City)
				END
			END) AS PhysicalCity
	, UPPER(CASE WHEN AltAddress.Address1 <> ''
			THEN
				RTRIM(AltAddress.State)
			ELSE
				CASE NMR.AccountClass
					WHEN 'O' THEN RTRIM(Work.State)
					ELSE RTRIM(Home.State)
				END
			END) AS PhysicalState
	, UPPER(CASE WHEN AltAddress.Address1 <> ''
			THEN
				RTRIM(CASE LEN(AltAddress.Zip) WHEN 9 THEN LEFT(AltAddress.Zip, 5) + '-' + Right(AltAddress.Zip, 4) ELSE AltAddress.Zip END)
			ELSE
				CASE NMR.AccountClass
					WHEN 'O' THEN RTRIM(CASE LEN(Work.Zip) WHEN 9 THEN LEFT(Work.Zip, 5) + '-' + Right(Work.Zip, 4) ELSE Work.Zip END)
					ELSE RTRIM(CASE LEN(Home.Zip) WHEN 9 THEN LEFT(Home.Zip, 5) + '-' + Right(Home.Zip, 4) ELSE Home.Zip END)
				END
			END) AS PhysicalZip
	, UPPER(CASE WHEN AltAddress.Address1 <> ''
			THEN
				CASE NMR.AccountClass
					WHEN 'O' THEN RTRIM(RTRIM(Work.Address1) + CASE ISNULL(Work.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Work.Address2) END + CASE ISNULL(Work.Address3, '') WHEN '' THEN ' ' ELSE ', ' + RTRIM(Work.Address3) END)
					ELSE RTRIM(RTRIM(Home.Address1) + CASE ISNULL(Home.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Home.Address2) END + CASE ISNULL(Home.Address3, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Home.Address3) END)
				END
			ELSE
				''
			END) AS MailingAddress
	, UPPER(CASE WHEN AltAddress.Address1 <> ''
			THEN
				CASE NMR.AccountClass
					WHEN 'O' THEN RTRIM(Work.City)
					ELSE RTRIM(Home.City)
				END
			ELSE
				''
			END) AS MailingCity
	, UPPER(CASE WHEN AltAddress.Address1 <> ''
			THEN
				CASE NMR.AccountClass
					WHEN 'O' THEN RTRIM(Work.State)
					ELSE RTRIM(Home.State)
				END
			ELSE
				''
			END) AS MailingState
	, UPPER(CASE WHEN AltAddress.Address1 <> ''
			THEN
				CASE NMR.AccountClass
					WHEN 'O' THEN RTRIM(CASE LEN(Work.Zip) WHEN 9 THEN LEFT(Work.Zip, 5) + '-' + Right(Work.Zip, 4) ELSE Work.Zip END)
					ELSE RTRIM(CASE LEN(Home.Zip) WHEN 9 THEN LEFT(Home.Zip, 5) + '-' + Right(Home.Zip, 4) ELSE Home.Zip END)
				END
			ELSE
				''
			END) AS MailingZip
	, CASE NMR.AccountClass
			WHEN 'O' THEN Work.Areacode + '-' + LEFT(Work.Phone, 3) + '-' + RIGHT(RTRIM(Work.Phone), 4)
			ELSE Home.Areacode + '-' + LEFT(Home.Phone, 3) + '-' + RIGHT(RTRIM(Home.Phone), 4)
	  END AS HPhone
	, Home.CellPhoneAC + '-' + LEFT(Home.CellPhone, 3) + '-' + RIGHT(RTRIM(Home.CellPhone), 4) AS CPhone
	, UPPER(RTRIM(NMR.Email1)) AS Email

	, UPPER(RTRIM(JO1.JOType + ': ' + RTRIM(JO1.JOTypeDescription))) AS JO1Type
	, RTRIM(JO1.LastName) AS JO1LastName
	, RTRIM(JO1.FirstName) AS JO1FirstName
	, RTRIM(JO1.MiddleInitial) AS JO1MiddleInitial
	, CONVERT(CHAR(10), JO1.DOB, 101) AS JO1DOB
	, RTRIM(JO1.SSN) AS JO1SSN
	, UPPER(RTRIM(JO1.IDNumber) + ' ' + RTRIM(JO1.IDState)) AS JO1IDNumber
	, RTRIM(JO1.EmployerName) AS JO1Employer
	, RTRIM(JO1.JobTitle) AS JO1JobTitle
	, RTRIM(JO1.Address) AS JO1Address
	, RTRIM(JO1.City) AS JO1City
	, RTRIM(JO1.State) AS JO1State
	, RTRIM(JO1.Zip) AS JO1Zip

	, UPPER(RTRIM(JO2.JOType + ': ' + RTRIM(JO2.JOTypeDescription))) AS JO2Type
	, RTRIM(JO2.LastName) AS JO2LastName
	, RTRIM(JO2.FirstName) AS JO2FirstName
	, RTRIM(JO2.MiddleInitial) AS JO2MiddleInitial
	, CONVERT(CHAR(10), JO2.DOB, 101) AS JO2DOB
	, RTRIM(JO2.SSN) AS JO2SSN
	, UPPER(RTRIM(JO2.IDNumber) + ' ' + RTRIM(JO2.IDState)) AS JO2IDNumber
	, RTRIM(JO2.EmployerName) AS JO2Employer
	, RTRIM(JO2.JobTitle) AS JO2JobTitle
	, RTRIM(JO2.Address) AS JO2Address
	, RTRIM(JO2.City) AS JO2City
	, RTRIM(JO2.State) AS JO2State
	, RTRIM(JO2.Zip) AS JO2Zip

	, RTRIM(BE1.FullName) AS BE1FullName
	, RTRIM(BE1.Relationship) AS BE1Relationship
	, CONVERT(CHAR(10), BE1.DOB, 101) AS BE1DOB
	, RTRIM(BE1.SSN) AS BE1SSN
	, RTRIM(BE1.Address) AS BE1Address
	, RTRIM(BE1.City) AS BE1City
	, RTRIM(BE1.State) AS BE1State
	, RTRIM(BE1.Zip) AS BE1Zip

	, RTRIM(BE2.FullName) AS BE2FullName
	, RTRIM(BE2.Relationship) AS BE2Relationship
	, CONVERT(CHAR(10), BE2.DOB, 101) AS BE2DOB
	, RTRIM(BE2.SSN) AS BE2SSN
	, RTRIM(BE2.Address) AS BE2Address
	, RTRIM(BE2.City) AS BE2City
	, RTRIM(BE2.State) AS BE2State
	, RTRIM(BE2.Zip) AS BE2Zip

FROM NewMemberRequest AS NMR
	INNER JOIN udt_AccountTypes AS AType ON NMR.AccountType = AType.TypeCode
	LEFT OUTER JOIN NewMemberHome AS Home ON NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork AS Work ON NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN NewMemberAddress As AltAddress ON NMR.TrackingNum = AltAddress.TrackingNum
	LEFT OUTER JOIN IMS.Departments As Dept ON Dept.Department = NMR.Department
	LEFT OUTER JOIN fnFCCU_GetJO(@TrackingNum, @jo1seq) AS JO1 ON NMR.TrackingNum = JO1.TrackingNum
	LEFT OUTER JOIN fnFCCU_GetJO(@TrackingNum, @jo2seq) AS JO2 ON NMR.TrackingNum = JO2.TrackingNum
	LEFT OUTER JOIN fnFCCU_GetJO(@TrackingNum, @be1seq) AS BE1 ON NMR.TrackingNum = BE1.TrackingNum
	LEFT OUTER JOIN fnFCCU_GetJO(@TrackingNum, @be2seq) AS BE2 ON NMR.TrackingNum = BE2.TrackingNum
	LEFT OUTER JOIN fnFCCU_GetPCPlastic(@TrackingNum, 1, 'P') AS ATM ON NMR.TrackingNum = ATM.TrackingNum
	LEFT OUTER JOIN fnFCCU_GetPCPlastic(@TrackingNum, 1, 'C') AS DEBIT ON NMR.TrackingNum = DEBIT.TrackingNum
	LEFT OUTER JOIN fnFCCU_GetSAType(@TrackingNum, 'RSA01', 'S') AS SARSA01 ON NMR.TrackingNum = SARSA01.TrackingNum	-- Regular Share
	LEFT OUTER JOIN fnFCCU_GetSAType(@TrackingNum, 'CCA16', 'S') AS SACCA16 ON NMR.TrackingNum = SACCA16.TrackingNum	-- Christmas Club
	LEFT OUTER JOIN fnFCCU_GetSAType(@TrackingNum, 'MMA09', 'S') AS SAMMA09 ON NMR.TrackingNum = SAMMA09.TrackingNum	-- Money Market
	LEFT OUTER JOIN fnFCCU_GetSAType(@TrackingNum, 'SDT46', 'S') AS SASDT46 ON NMR.TrackingNum = SASDT46.TrackingNum	-- URTunes Checking
	LEFT OUTER JOIN fnFCCU_GetSAType(@TrackingNum, 'SDF45', 'S') AS SASDF45 ON NMR.TrackingNum = SASDF45.TrackingNum	-- Share Draft 50Plus
	LEFT OUTER JOIN fnFCCU_GetSAType(@TrackingNum, 'SDU47', 'S') AS SASDU47 ON NMR.TrackingNum = SASDU47.TrackingNum	-- Share Draft Ultimate
	LEFT OUTER JOIN fnFCCU_GetSAType(@TrackingNum, 'KAC11', 'S') AS SAKAC11 ON NMR.TrackingNum = SAKAC11.TrackingNum	-- Kasasa Checking
	LEFT OUTER JOIN fnFCCU_GetSAType(@TrackingNum, 'KSA20', 'S') AS SAKSA20 ON NMR.TrackingNum = SAKSA20.TrackingNum	-- Kasasa Saver
--	LEFT OUTER JOIN fnFCCU_GetSAType(@TrackingNum, 'S0620', 'I') AS SAS0620 ON NMR.TrackingNum = SAS0620.TrackingNum	-- Smart Saver CD
--	LEFT OUTER JOIN fnFCCU_GetSAType(@TrackingNum, 'M0630', 'I') AS SAM0630 ON NMR.TrackingNum = SAM0630.TrackingNum	-- Money Market CD
--	LEFT OUTER JOIN fnFCCU_GetSAType(@TrackingNum, 'M0650', 'I') AS SAM0650 ON NMR.TrackingNum = SAM0650.TrackingNum	-- Money Market CD
--	LEFT OUTER JOIN fnFCCU_GetSAType(@TrackingNum, 'Y1216', 'I') AS SAY1216 ON NMR.TrackingNum = SAY1216.TrackingNum	-- Youth Saver CD
WHERE NMR.TrackingNum = @TrackingNum
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spFCCU_D11Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spFCCU_D11Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @docsubname CHAR(100)
DECLARE @newdocsub CHAR(100)
DECLARE @count INT
DECLARE @docindex INT
DECLARE curs CURSOR LOCAL FAST_FORWARD FOR

	SELECT CONVERT(char(2), SA.Suffix) AS docsubname
	FROM NewMemberRequest AS NMR INNER JOIN NewMemberSubAccount AS SA ON NMR.TrackingNum = SA.TrackingNum
	WHERE NMR.TrackingNum = @TrackingNum AND SA.ProductType IN ('SDA') AND NMR.Created IN ('H', 'I') AND SA.Created = 'Y'

OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @newdocsub = 'Checking Form (Suffix ' + RTRIM(@docsubname) + ')'
IF @docsubname Is Null
BEGIN
	SET @newdocsub = 'Checking Form'
END
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
	WHILE @@FETCH_STATUS = 0
	BEGIN
		SET @count = @count + 1
		PRINT @count

		SET @docindex = @docindex + 1
		SET @newdocsub = 'Certificate Form (Suffix ' + RTRIM(@docsubname) + ')'
		INSERT INTO IMS.NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)

		FETCH NEXT FROM curs INTO @docsubname

		PRINT @docsubname
		IF @@FETCH_STATUS = 0
		BEGIN
			PRINT @newdocsub
			UPDATE IMS.NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex
		END
	END
CLOSE curs
DEALLOCATE curs
SELECT 'CheckingForm' AS DocCode, * FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
DELETE FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spFCCU_D11Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spFCCU_D11Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @joseq INT
DECLARE @jotype CHAR(2)
DECLARE @jo1seq INT
DECLARE @jo2seq INT
DECLARE @jocount INT
SET @jo1seq = 0
SET @jo2seq = 0
SET @jocount = 0

DECLARE curs2 CURSOR FOR
	SELECT CONVERT(INT, JO.Sequence), JO.JointOwnerType
	FROM NewMemberJointOwner AS JO
	WHERE JO.TrackingNum = @TrackingNum AND (JO.JointOwnerType IN ('JO')) ORDER BY JO.Sequence

OPEN curs2
FETCH NEXT FROM curs2 INTO @joseq, @jotype
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
		IF @jotype IN ('JO')
		BEGIN
			SET @jocount = @jocount + 1
			IF @jocount = 1
			BEGIN
				SET @jo1seq = @joseq
			END
			IF @jocount = 2
			BEGIN
				SET @jo2seq = @joseq
			END
		END
      	FETCH NEXT FROM curs2 INTO @joseq, @jotype
   END
CLOSE curs2
DEALLOCATE curs2

SELECT @DocIndex As DocIndex
	, CONVERT(CHAR(10), NMR.ApplyDate, 101) AS OpenDate
	, RTRIM(NMR.Account) AS Account

	, CASE WHEN SARSA01.Sequence != ''
		AND ISNULL(SASDU47.Sequence, '') = ''
		AND ISNULL(SASDT46.Sequence, '') = ''
		AND ISNULL(SAKAC11.Sequence, '') = ''
		AND ISNULL(SAKSA20.Sequence, '') = ''
		AND ISNULL(SASDF45.Sequence, '') = ''
		THEN 'x' END AS Check_RT_Value
	, CASE WHEN SASDU47.Sequence != '' THEN 'x' END AS Check_RT_Ultimate
	, CASE WHEN SASDT46.Sequence != '' THEN 'x' END AS Check_RT_URTunes
	, CASE WHEN SAKAC11.Sequence != '' THEN 'x' END AS Check_RT_KasasaCash
	, CASE WHEN SAKSA20.Sequence != '' THEN 'x' END AS Check_RT_KasasaCashSaver
--	, CASE WHEN SAS0620.Sequence != '' THEN 'x' END AS Check_RT_Free
	, CASE WHEN SASDF45.Sequence != '' THEN 'x' END AS Check_RT_50Plus

--	, CASE WHEN ?? != '' THEN 'x' END AS Check_OD_PrivilegePlus

	, CASE NMR.AccountClass WHEN 'P' THEN UPPER(RTRIM(RTRIM(NMR.FName) + ' ' + RTRIM(NMR.LName) + ' ' + NMR.MECHTag)) ELSE UPPER(RTRIM(NMR.OrganizationName)) END AS FullName
	, CASE NMR.UseTodayForDOB WHEN 'Y' THEN CONVERT(CHAR(10), NMR.CreatedOn, 101) ELSE CONVERT(CHAR(10), NMR.DOB, 101) END AS DOB
	, CASE NMR.AccountClass WHEN 'P' THEN LEFT(NMR.SSN, 3) + '-' + LEFT(RIGHT(NMR.SSN, 6), 2) + '-' + RIGHT(NMR.SSN, 4) ELSE LEFT(NMR.SSN, 2) + '-' + RIGHT(NMR.SSN, 7) END AS SSN
	, UPPER(CASE WHEN AltAddress.Address1 <> ''
			THEN
				RTRIM(AltAddress.Address1 + CASE AltAddress.Address2 WHEN '' THEN ''ELSE', ' END + AltAddress.address2 + CASE AltAddress.Address3 WHEN '' THEN ''ELSE', ' END + AltAddress.Address3)
			ELSE
				CASE NMR.AccountClass
					WHEN 'O' THEN RTRIM(RTRIM(Work.Address1) + CASE ISNULL(Work.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Work.Address2) END + CASE ISNULL(Work.Address3, '') WHEN '' THEN ' ' ELSE ', ' + RTRIM(Work.Address3) END)
					ELSE RTRIM(RTRIM(Home.Address1) + CASE ISNULL(Home.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Home.Address2) END + CASE ISNULL(Home.Address3, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Home.Address3) END)
				END
			END) AS PhysicalAddress
	, UPPER(CASE WHEN AltAddress.Address1 <> ''
			THEN
				RTRIM(AltAddress.City)
			ELSE
				CASE NMR.AccountClass
					WHEN 'O' THEN RTRIM(Work.City)
					ELSE RTRIM(Home.City)
				END
			END) AS PhysicalCity
	, UPPER(CASE WHEN AltAddress.Address1 <> ''
			THEN
				RTRIM(AltAddress.State)
			ELSE
				CASE NMR.AccountClass
					WHEN 'O' THEN RTRIM(Work.State)
					ELSE RTRIM(Home.State)
				END
			END) AS PhysicalState
	, UPPER(CASE WHEN AltAddress.Address1 <> ''
			THEN
				RTRIM(CASE LEN(AltAddress.Zip) WHEN 9 THEN LEFT(AltAddress.Zip, 5) + '-' + Right(AltAddress.Zip, 4) ELSE AltAddress.Zip END)
			ELSE
				CASE NMR.AccountClass
					WHEN 'O' THEN RTRIM(CASE LEN(Work.Zip) WHEN 9 THEN LEFT(Work.Zip, 5) + '-' + Right(Work.Zip, 4) ELSE Work.Zip END)
					ELSE RTRIM(CASE LEN(Home.Zip) WHEN 9 THEN LEFT(Home.Zip, 5) + '-' + Right(Home.Zip, 4) ELSE Home.Zip END)
				END
			END) AS PhysicalZip

	, RTRIM(JO1.FullName) AS JO1FullName
	, CONVERT(CHAR(10), JO1.DOB, 101) AS JO1DOB
	, RTRIM(JO1.SSN) AS JO1SSN

	, RTRIM(JO2.FullName) AS JO2FullName
	, CONVERT(CHAR(10), JO2.DOB, 101) AS JO2DOB
	, RTRIM(JO2.SSN) AS JO2SSN

FROM NewMemberRequest AS NMR
	INNER JOIN udt_AccountTypes AS AType ON NMR.AccountType = AType.TypeCode
	LEFT OUTER JOIN NewMemberHome AS Home ON NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork AS Work ON NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN NewMemberAddress As AltAddress ON NMR.TrackingNum = AltAddress.TrackingNum
	LEFT OUTER JOIN IMS.Departments As Dept ON Dept.Department = NMR.Department
	LEFT OUTER JOIN fnFCCU_GetJO(@TrackingNum, @jo1seq) AS JO1 ON NMR.TrackingNum = JO1.TrackingNum
	LEFT OUTER JOIN fnFCCU_GetJO(@TrackingNum, @jo2seq) AS JO2 ON NMR.TrackingNum = JO2.TrackingNum
	LEFT OUTER JOIN fnFCCU_GetPCPlastic(@TrackingNum, 1, 'P') AS ATM ON NMR.TrackingNum = ATM.TrackingNum
	LEFT OUTER JOIN fnFCCU_GetPCPlastic(@TrackingNum, 1, 'C') AS DEBIT ON NMR.TrackingNum = DEBIT.TrackingNum
	LEFT OUTER JOIN fnFCCU_GetSAType(@TrackingNum, 'RSA01', 'S') AS SARSA01 ON NMR.TrackingNum = SARSA01.TrackingNum	-- Regular Share
	LEFT OUTER JOIN fnFCCU_GetSAType(@TrackingNum, 'CCA16', 'S') AS SACCA16 ON NMR.TrackingNum = SACCA16.TrackingNum	-- Christmas Club
	LEFT OUTER JOIN fnFCCU_GetSAType(@TrackingNum, 'MMA09', 'S') AS SAMMA09 ON NMR.TrackingNum = SAMMA09.TrackingNum	-- Money Market
	LEFT OUTER JOIN fnFCCU_GetSAType(@TrackingNum, 'SDT46', 'S') AS SASDT46 ON NMR.TrackingNum = SASDT46.TrackingNum	-- URTunes Checking
	LEFT OUTER JOIN fnFCCU_GetSAType(@TrackingNum, 'SDF45', 'S') AS SASDF45 ON NMR.TrackingNum = SASDF45.TrackingNum	-- Share Draft 50Plus
	LEFT OUTER JOIN fnFCCU_GetSAType(@TrackingNum, 'SDU47', 'S') AS SASDU47 ON NMR.TrackingNum = SASDU47.TrackingNum	-- Share Draft Ultimate
	LEFT OUTER JOIN fnFCCU_GetSAType(@TrackingNum, 'KAC11', 'S') AS SAKAC11 ON NMR.TrackingNum = SAKAC11.TrackingNum	-- Kasasa Checking
	LEFT OUTER JOIN fnFCCU_GetSAType(@TrackingNum, 'KSA20', 'S') AS SAKSA20 ON NMR.TrackingNum = SAKSA20.TrackingNum	-- Kasasa Saver
--	LEFT OUTER JOIN fnFCCU_GetSAType(@TrackingNum, 'S0620', 'I') AS SAS0620 ON NMR.TrackingNum = SAS0620.TrackingNum	-- Smart Saver CD
--	LEFT OUTER JOIN fnFCCU_GetSAType(@TrackingNum, 'M0630', 'I') AS SAM0630 ON NMR.TrackingNum = SAM0630.TrackingNum	-- Money Market CD
--	LEFT OUTER JOIN fnFCCU_GetSAType(@TrackingNum, 'M0650', 'I') AS SAM0650 ON NMR.TrackingNum = SAM0650.TrackingNum	-- Money Market CD
--	LEFT OUTER JOIN fnFCCU_GetSAType(@TrackingNum, 'Y1216', 'I') AS SAY1216 ON NMR.TrackingNum = SAY1216.TrackingNum	-- Youth Saver CD
WHERE NMR.TrackingNum = @TrackingNum
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spFCCU_D21Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spFCCU_D21Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @docsubname CHAR(100)
DECLARE @newdocsub CHAR(100)
DECLARE @count INT
DECLARE @docindex INT
DECLARE curs CURSOR LOCAL FAST_FORWARD FOR

	SELECT CONVERT(char(2), SA.Suffix) AS docsubname
	FROM NewMemberRequest AS NMR INNER JOIN NewMemberSubAccount AS SA ON NMR.TrackingNum = SA.TrackingNum
	WHERE NMR.TrackingNum = @TrackingNum AND SA.ProductType IN ('CERT') AND SA.Created = 'Y'

OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @newdocsub = 'Certificate Form (Suffix ' + RTRIM(@docsubname) + ')'
IF @docsubname Is Null
BEGIN
	SET @newdocsub = 'Certificate Form'
END
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
	WHILE @@FETCH_STATUS = 0
	BEGIN
		SET @count = @count + 1
		PRINT @count

		SET @docindex = @docindex + 1
		SET @newdocsub = 'Certificate Form (Suffix ' + RTRIM(@docsubname) + ')'
		INSERT INTO IMS.NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)

		FETCH NEXT FROM curs INTO @docsubname

		PRINT @docsubname
		IF @@FETCH_STATUS = 0
		BEGIN
			PRINT @newdocsub
			UPDATE IMS.NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex
		END
	END
CLOSE curs
DEALLOCATE curs
SELECT 'CertificateForm' AS DocCode, * FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
DELETE FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spFCCU_D21Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spFCCU_D21Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @seq INT
DECLARE @seq1 INT
DECLARE @count INT
DECLARE @totalpages INT
DECLARE @pagecount INT
DECLARE @joseq INT
DECLARE @beseq INT
DECLARE @jotype CHAR(2)
DECLARE @jo1seq INT
DECLARE @jo2seq INT
DECLARE @jo3seq INT
DECLARE @jo4seq INT
DECLARE @be1seq INT
DECLARE @jocount INT
DECLARE @becount INT
SET @jo1seq = 0
SET @jo2seq = 0
SET @jo3seq = 0
SET @jo4seq = 0
SET @be1seq = 0
SET @jocount = 0
SET @becount = 0

DECLARE curs2 CURSOR LOCAL FAST_FORWARD FOR
	SELECT DISTINCT CONVERT(INT, SA.Sequence)
	FROM IMS.NewMemberRequest AS NMR
	INNER JOIN IMS.NewMemberSubAccount AS SA ON NMR.TrackingNum = SA.TrackingNum
	LEFT JOIN IMS.NewMemberJointLink AS JL ON JL.TrackingNum = SA.TrackingNum AND JL.SubAccountSequence = SA.Sequence
	WHERE NMR.TrackingNum = @TrackingNum AND SA.SubAccountType IN ('6MO60', '1YC61', '2YC62', '3YC63', '4YC64', '5YC65') AND ((SA.Created = 'Y' OR SA.Created = '') OR JL.ChangeCode = 'N')
OPEN curs2
FETCH NEXT FROM curs2 INTO @seq
SET @count = 0
--PRINT @@FETCH_STATUS
	WHILE @@FETCH_STATUS = 0
	BEGIN
		SET @count = @count + 1
		IF (@DocIndex = @count)
		BEGIN
			SET @seq1 = @seq
		END
		FETCH NEXT FROM curs2 INTO @seq
	END
	CLOSE curs2
	DEALLOCATE curs2
PRINT '@seq1 set to: ' + CONVERT(VARCHAR(2), @seq1)

	DECLARE curs3 CURSOR FOR
	SELECT CONVERT(INT, JO.Sequence), JO.JointOwnerType
	FROM NewMemberJointOwner AS JO
	LEFT JOIN IMS.NewMemberJointLink AS JL ON JL.TrackingNum = JO.TrackingNum AND JL.JointSequence = JO.Sequence AND JL.SubAccountSequence = @seq1 AND JL.ChangeCode = 'N'
	WHERE JO.TrackingNum = @TrackingNum AND ISNULL(JL.SubAccountSequence, '') <> '' ORDER BY JO.Sequence -- AND (JO.JointOwnerType IN ('JT', 'AG', 'CF', 'BE', 'XX'))

	OPEN curs3
	FETCH NEXT FROM curs3 INTO @joseq, @jotype
	PRINT @@FETCH_STATUS
	   WHILE @@FETCH_STATUS = 0
	   BEGIN
			IF @jotype != 'BE'
			BEGIN
				SET @jocount = @jocount + 1
				IF @jocount = 1
				BEGIN
					SET @jo1seq = @joseq
				END
				IF @jocount = 2
				BEGIN
					SET @jo2seq = @joseq
				END
				IF @jocount = 3
				BEGIN
					SET @jo3seq = @joseq
				END
				IF @jocount = 4
				BEGIN
					SET @jo4seq = @joseq
				END
			END
			
			IF @jotype = 'PD' OR @jotype = 'XX'
			BEGIN
				SET @becount = @becount + 1
				IF @becount = 1
				BEGIN
					SET @be1seq = @joseq
				END
			END
			FETCH NEXT FROM curs3 INTO @joseq, @jotype
	   END
	CLOSE curs3
	DEALLOCATE curs3

SELECT @DocIndex As DocIndex
	, CASE NMR.AccountClass WHEN 'P' THEN UPPER(RTRIM(RTRIM(NMR.FName) + ' ' + RTRIM(NMR.LName) + ' ' + NMR.MECHTag)) ELSE UPPER(RTRIM(NMR.OrganizationName)) END AS FullName
	, NMR.Account As Account
	, RIGHT('0' + RTRIM(CONVERT(CHAR(2), SA.Suffix)), 2) AS Suffix
	, CASE NMR.AccountClass WHEN 'P' THEN Left(NMR.SSN, 3) + '-' + LEFT(RIGHT(NMR.SSN, 6), 2) + '-' + RIGHT(NMR.SSN, 4) ELSE LEFT(NMR.SSN, 2) + '-' + RIGHT(NMR.SSN, 7) END AS SSN1
	, RTRIM(CONVERT(VARCHAR(15), CONVERT(MONEY, SA.Amount)/100, 1)) AS Amount
	, RTRIM(CAST(CONVERT(DECIMAL(6,4), CONVERT(FLOAT(1), IMS.fnFCCU_GetCertRate(SA.TrackingNum, @seq1)) * 0.0001) AS VARCHAR(10))) + '%' AS APR
	, RTRIM(CAST(CONVERT(DECIMAL(6,2),(POWER((1 + (CONVERT(FLOAT(1), IMS.fnFCCU_GetCertRate(SA.TrackingNum, @seq1)) * 0.000001) / 12),12)-1)*100) AS VARCHAR(10))) + '%' AS APY
	, CASE WHEN INVADD.Term = '6' THEN 'x' END AS Check_6MO
	, CASE WHEN INVADD.Term = '12' THEN 'x' END AS Check_12MO
	, '' AS Check_SPA
	, CASE WHEN INVADD.Term = '24' THEN 'x' END AS Check_24MO
	, CASE WHEN INVADD.Term = '36' THEN 'x' END AS Check_36MO
	, CASE WHEN INVADD.Term = '48' THEN 'x' END AS Check_48MO
	, CASE WHEN INVADD.Term = '60' THEN 'x' END AS Check_60MO
	, '' AS Check_Other
	, '' AS OtherText
	, CASE WHEN INVADD.MaturityDisp = 'CHEK' THEN 'x' END AS Check_MDisp_CHEK
	, CASE WHEN INVADD.MaturityDisp = 'TRFR' THEN 'x' END AS Check_MDisp_TRFR
	, CASE WHEN INVADD.DividendDisp = '1' THEN 'x' END AS Check_DDisp_1
	, CASE WHEN INVADD.DividendDisp = '2' THEN 'x' END AS Check_DDisp_2

	, UPPER(RTRIM(JO1.FullName)) AS JO01_FullName
	, JO1.SSN AS JO01_SSN
	, UPPER(RTRIM(JO2.FullName)) AS JO02_FullName
	, JO2.SSN AS JO02_SSN
	, UPPER(RTRIM(JO3.FullName)) AS JO03_FullName
	, JO3.SSN AS JO03_SSN

	, UPPER(RTRIM(BE1.FullName)) AS BE01_FullName
	, UPPER(RTRIM(BE1.Address)) AS BE01_Address
	, UPPER(RTRIM(BE1.City)) AS BE01_City
	, UPPER(RTRIM(BE1.State)) AS BE01_State
	, UPPER(RTRIM(BE1.Zip)) AS BE01_Zip
	, UPPER(RTRIM(BE1.HPhoneAC)) AS BE01_HPhoneAC
	, UPPER(RTRIM(BE1.HPhone)) AS BE01_HPhone

	, UPPER(RTRIM(NMR.Seller)) AS Seller
	, UPPER(RTRIM(Branches.Description)) AS Branch

FROM NewMemberRequest AS NMR
	LEFT OUTER JOIN IMS.fnFCCU_GetSASeq(@TrackingNum, @seq1) AS SA ON NMR.TrackingNum = SA.TrackingNum
	LEFT OUTER JOIN NewMemberInvestmentAdd AS INVADD ON INVADD.TrackingNum = NMR.TrackingNum AND INVADD.SubAccountSequence = SA.Sequence
	LEFT OUTER JOIN udt_ISubAccounts AS INVType ON INVType.UniqueID = SA.SubAccountType
	LEFT OUTER JOIN fnFCCU_GetJO(@TrackingNum, @jo1seq) As JO1 ON NMR.TrackingNum = JO1.TrackingNum
	LEFT OUTER JOIN fnFCCU_GetJO(@TrackingNum, @jo2seq) As JO2 ON NMR.TrackingNum = JO2.TrackingNum
	LEFT OUTER JOIN fnFCCU_GetJO(@TrackingNum, @jo3seq) As JO3 ON NMR.TrackingNum = JO3.TrackingNum
	LEFT OUTER JOIN fnFCCU_GetJO(@TrackingNum, @jo4seq) As JO4 ON NMR.TrackingNum = JO4.TrackingNum
	LEFT OUTER JOIN fnFCCU_GetJO(@TrackingNum, @be1seq) As BE1 ON NMR.TrackingNum = BE1.TrackingNum
	LEFT OUTER JOIN fnFCCU_GetCL(@TrackingNum, @seq1, 'C', 'T') AS MATDISP ON NMR.TrackingNum = MATDISP.TrackingNum
	LEFT OUTER JOIN Branches On NMR.CurrBranch = Branches.BranchCode
WHERE NMR.TrackingNum = @TrackingNum
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spFCCU_D31Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spFCCU_D31Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @docsubname CHAR(100)
DECLARE @newdocsub CHAR(100)
DECLARE @count INT
DECLARE @docindex INT
DECLARE curs CURSOR LOCAL FAST_FORWARD FOR

	SELECT CONVERT(char(2), SA.Suffix) AS docsubname
	FROM NewMemberRequest AS NMR INNER JOIN NewMemberSubAccount AS SA ON NMR.TrackingNum = SA.TrackingNum
	WHERE NMR.TrackingNum = @TrackingNum AND SA.SubAccountType IN ('CCA-16') AND SA.Created = 'Y'

OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @newdocsub = 'Christmas Club Form (Suffix ' + RTRIM(@docsubname) + ')'
IF @docsubname Is Null
BEGIN
	SET @newdocsub = 'Christmas Club Form'
END
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
	WHILE @@FETCH_STATUS = 0
	BEGIN
		SET @count = @count + 1
		PRINT @count

		SET @docindex = @docindex + 1
		SET @newdocsub = 'Christmas Club Form (Suffix ' + RTRIM(@docsubname) + ')'
		INSERT INTO IMS.NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)

		FETCH NEXT FROM curs INTO @docsubname

		PRINT @docsubname
		IF @@FETCH_STATUS = 0
		BEGIN
			PRINT @newdocsub
			UPDATE IMS.NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex
		END
	END
CLOSE curs
DEALLOCATE curs
SELECT 'ChristmasClubForm' AS DocCode, * FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
DELETE FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spFCCU_D31Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spFCCU_D31Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @seq INT
DECLARE @seq1 INT
DECLARE @count INT
DECLARE @totalpages INT
DECLARE @pagecount INT
DECLARE @joseq INT
DECLARE @beseq INT
DECLARE @jotype CHAR(2)
DECLARE @jo1seq INT
DECLARE @jo2seq INT
DECLARE @jo3seq INT
DECLARE @jo4seq INT
DECLARE @be1seq INT
DECLARE @jocount INT
DECLARE @becount INT
SET @jo1seq = 0
SET @jo2seq = 0
SET @jo3seq = 0
SET @jo4seq = 0
SET @be1seq = 0
SET @jocount = 0
SET @becount = 0

DECLARE curs2 CURSOR LOCAL FAST_FORWARD FOR
	SELECT DISTINCT CONVERT(INT, SA.Sequence)
	FROM IMS.NewMemberRequest AS NMR
	INNER JOIN IMS.NewMemberSubAccount AS SA ON NMR.TrackingNum = SA.TrackingNum
	LEFT JOIN IMS.NewMemberJointLink AS JL ON JL.TrackingNum = SA.TrackingNum AND JL.SubAccountSequence = SA.Sequence
	WHERE NMR.TrackingNum = @TrackingNum AND SA.SubAccountType IN ('CCA-16') AND ((SA.Created = 'Y' OR SA.Created = '') OR JL.ChangeCode = 'N')
OPEN curs2
FETCH NEXT FROM curs2 INTO @seq
SET @count = 0
--PRINT @@FETCH_STATUS
	WHILE @@FETCH_STATUS = 0
	BEGIN
		SET @count = @count + 1
		IF (@DocIndex = @count)
		BEGIN
			SET @seq1 = @seq
		END
		FETCH NEXT FROM curs2 INTO @seq
	END
	CLOSE curs2
	DEALLOCATE curs2
PRINT '@seq1 set to: ' + CONVERT(VARCHAR(2), @seq1)

	DECLARE curs3 CURSOR FOR
	SELECT CONVERT(INT, JO.Sequence), JO.JointOwnerType
	FROM NewMemberJointOwner AS JO
	LEFT JOIN IMS.NewMemberJointLink AS JL ON JL.TrackingNum = JO.TrackingNum AND JL.JointSequence = JO.Sequence AND JL.SubAccountSequence = @seq1 AND JL.ChangeCode = 'N'
	WHERE JO.TrackingNum = @TrackingNum AND ISNULL(JL.SubAccountSequence, '') <> '' ORDER BY JO.Sequence -- AND (JO.JointOwnerType IN ('JT', 'AG', 'CF', 'BE', 'XX'))

	OPEN curs3
	FETCH NEXT FROM curs3 INTO @joseq, @jotype
	PRINT @@FETCH_STATUS
	   WHILE @@FETCH_STATUS = 0
	   BEGIN
			IF @jotype != 'BE'
			BEGIN
				SET @jocount = @jocount + 1
				IF @jocount = 1
				BEGIN
					SET @jo1seq = @joseq
				END
				IF @jocount = 2
				BEGIN
					SET @jo2seq = @joseq
				END
				IF @jocount = 3
				BEGIN
					SET @jo3seq = @joseq
				END
				IF @jocount = 4
				BEGIN
					SET @jo4seq = @joseq
				END
			END
			
			IF @jotype = 'PD' OR @jotype = 'XX'
			BEGIN
				SET @becount = @becount + 1
				IF @becount = 1
				BEGIN
					SET @be1seq = @joseq
				END
			END
			FETCH NEXT FROM curs3 INTO @joseq, @jotype
	   END
	CLOSE curs3
	DEALLOCATE curs3

SELECT @DocIndex As DocIndex
	, CASE NMR.AccountClass WHEN 'P' THEN UPPER(RTRIM(RTRIM(NMR.FName) + ' ' + RTRIM(NMR.LName) + ' ' + NMR.MECHTag)) ELSE UPPER(RTRIM(NMR.OrganizationName)) END AS FullName
	, NMR.Account As Account
	, RIGHT('0' + RTRIM(CONVERT(CHAR(2), SA.Suffix)), 2) AS Suffix
	, UPPER(RTRIM(JO1.FullName)) AS JO01_FullName
	, CASE NMR.AccountClass WHEN 'P' THEN Left(NMR.SSN, 3) + '-' + LEFT(RIGHT(NMR.SSN, 6), 2) + '-' + RIGHT(NMR.SSN, 4) ELSE LEFT(NMR.SSN, 2) + '-' + RIGHT(NMR.SSN, 7) END AS SSN
	, UPPER(CASE NMR.AccountClass WHEN 'P' THEN RTRIM(Work.EmployerName) ELSE '' END) AS Employer

FROM NewMemberRequest AS NMR
	LEFT OUTER JOIN NewMemberHome AS Home ON NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork AS Work ON NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN IMS.fnFCCU_GetSASeq(@TrackingNum, @seq1) AS SA ON NMR.TrackingNum = SA.TrackingNum
	LEFT OUTER JOIN fnFCCU_GetJO(@TrackingNum, @jo1seq) As JO1 ON NMR.TrackingNum = JO1.TrackingNum
	LEFT OUTER JOIN fnFCCU_GetJO(@TrackingNum, @jo2seq) As JO2 ON NMR.TrackingNum = JO2.TrackingNum
	LEFT OUTER JOIN fnFCCU_GetJO(@TrackingNum, @jo3seq) As JO3 ON NMR.TrackingNum = JO3.TrackingNum
	LEFT OUTER JOIN fnFCCU_GetJO(@TrackingNum, @jo4seq) As JO4 ON NMR.TrackingNum = JO4.TrackingNum
	LEFT OUTER JOIN fnFCCU_GetJO(@TrackingNum, @be1seq) As BE1 ON NMR.TrackingNum = BE1.TrackingNum
	LEFT OUTER JOIN Branches On NMR.CurrBranch = Branches.BranchCode
WHERE NMR.TrackingNum = @TrackingNum
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spFCCU_DG1Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spFCCU_DG1Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

Return 1
GO
/****** Object:  StoredProcedure [IMS].[spFCCU_DG1Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spFCCU_DG1Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

Select 'Documents' AS GroupName From NewMemberRequest where trackingnum = @TrackingNum
GO
/****** Object:  StoredProcedure [IMS].[spFCCU_DP1Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spFCCU_DP1Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

Return 1
GO
/****** Object:  StoredProcedure [IMS].[spFCCU_DP1Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [IMS].[spFCCU_DP1Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

SELECT NMR.TrackingNum AS TrackingNumber
	, AltAddress.Address1 AS MailingAddress
	, NMR.CurrBranch As Branch
	, Branches.Description AS BranchName
	, CONVERT(char(10), GetDate(), 101) As TodayDate
	, DATENAME(MM, GetDate()) + RIGHT(CONVERT(char(12), GetDate(), 107), 9) As TodayDateFull
	, CONVERT(char(10), NMR.CreatedOn, 101) As CreatedOn
	, NMR.Account As Account
--	, CONVERT(char(2), Home.ResidenceYears, 101) + ' yrs  ' + CONVERT(char(2), Home.ResidenceMonths, 101) + ' mos' AS HowLong
	, NMR.FName, NMR.LName, NMR.MInitial
	, CASE NMR.AccountClass WHEN 'P' THEN UPPER(RTRIM(NMR.LName) + ', ' + RTRIM(RTRIM(NMR.FName) + ' ' + RTRIM(NMR.MInitial))) ELSE RTRIM(NMR.OrganizationName) END AS RevFullName
	, CASE NMR.AccountClass WHEN 'P' THEN UPPER(RTRIM(RTRIM(NMR.FName) + ' ' + RTRIM(NMR.LName) + ' ' + NMR.MECHTag)) ELSE UPPER(RTRIM(NMR.OrganizationName)) END AS FullName
	, CASE NMR.AccountClass WHEN 'P' THEN 'Dear ' + RTRIM(RTRIM(NMR.FName) + ' ' + RTRIM(NMR.LName) + ' ' + NMR.MECHTag) + ':' ELSE 'Dear ' + RTRIM(NMR.OrganizationName) + ':' END AS DearName
	, Home.Areacode + '-' + LEFT(Home.Phone, 3) + '-' + RIGHT(RTRIM(Home.Phone), 4) AS HPhoneFull
	, Home.CellPhoneAC + '-' + LEFT(Home.CellPhone, 3) + '-' + RIGHT(RTRIM(Home.CellPhone), 4) AS CPhoneFull
	, CASE NMR.UseTodayForDOB WHEN 'Y' THEN CONVERT(char(10), NMR.CreatedOn, 101) ELSE CONVERT(char(10), NMR.DOB, 101) END AS DOB
	, CASE NMR.AccountClass WHEN 'P' THEN Left(NMR.SSN, 3) + '-' + LEFT(RIGHT(NMR.SSN, 6), 2) + '-' + RIGHT(NMR.SSN, 4) ELSE LEFT(NMR.SSN, 2) + '-' + RIGHT(NMR.SSN, 7) END AS SSN
	, RTRIM(NMR.DriversLicenseNum) + '/' + NMR.DriversLicenseState AS DL
	, CASE WHEN NMR.IDType = 'D' AND NMR.DriversLicenseState <> '' AND NMR.DriversLicenseNum <> '' THEN 'Drivers License' ELSE NMR.IDSource END AS IDType
	, CASE NMR.IDType WHEN 'D' THEN RTRIM(NMR.DriversLicenseNum) ELSE RTRIM(NMR.IDNumber) END AS ID
	, CONVERT(char(10), NMR.IDIssueDate, 101) AS IDIssueDate
	, CONVERT(char(10), NMR.IDExpirationDate, 101) AS IDExpDate
	, NMR.DriversLicenseState AS IDState
	, NMR.MaidenName AS MaidenName
	, NMR.Password AS Password
	, NMR.CreatedBy AS Seller
	, NMR.Department AS Department
	, CASE WHEN NMR.Created = 'F' Or NMR.Created = 'H' Or NMR.Created = 'I' THEN '' ELSE 'X' END AS YesNewAccount
	, CASE WHEN NMR.Created = 'F' Or NMR.Created = 'H' Or NMR.Created = 'I' THEN 'X' END AS YesChangeAccount
--	, CASE WHEN NMR.Created = 'F' Or NMR.Created = 'H' Or NMR.Created = 'I' THEN NMR.Account END AS ChangeAccount
	, CASE NMR.AccountClass
		WHEN 'O' THEN RTRIM(RTRIM(Work.Address1) + CASE ISNULL(Work.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Work.Address2) END + CASE ISNULL(Work.Address3, '') WHEN '' THEN ' ' ELSE ', ' + RTRIM(Work.Address3) END)
		ELSE RTRIM(RTRIM(Home.Address1) + CASE ISNULL(Home.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Home.Address2) END + CASE ISNULL(Home.Address3, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Home.Address3) END)
	  END AS Address
	, CASE NMR.AccountClass
		WHEN 'O' THEN RTRIM(RTRIM(Work.Address1) + CASE ISNULL(Work.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Work.Address2) END + CASE ISNULL(Work.Address3, '') WHEN '' THEN ' ' ELSE ', ' + RTRIM(Work.Address3) END) + ', ' + RTRIM(Work.City) + ', ' + Work.State + ' ' + CASE LEN(Work.Zip) WHEN 9 THEN LEFT(Work.Zip, 5) + '-' + Right(Work.Zip, 4) ELSE Work.Zip END
		ELSE RTRIM(RTRIM(Home.Address1) + CASE ISNULL(Home.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Home.Address2) END + CASE ISNULL(Home.Address3, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Home.Address3) END) + ', ' + RTRIM(Home.City) + ', ' + Home.State + ' ' + CASE LEN(Home.Zip) WHEN 9 THEN LEFT(Home.Zip, 5) + '-' + Right(Home.Zip, 4) ELSE Home.Zip END
	  END AS FullAddress
	, CASE NMR.AccountClass
		WHEN 'O' THEN RTRIM(Work.city) + ', ' + Work.state + ' ' + CASE LEN(Work.Zip) WHEN 9 THEN LEFT(Work.zip, 5) + '-' + Right(Work.Zip, 4) ELSE Work.Zip END
		ELSE RTRIM(Home.city) + ', ' + Home.state + ' ' + CASE LEN(Home.Zip) WHEN 9 THEN LEFT(Home.zip, 5) + '-' + Right(Home.Zip, 4) ELSE Home.Zip END
	  END AS CityStateZip
	, CASE NMR.AccountClass
		WHEN 'O' THEN Work.City
		ELSE Home.City
	  END AS City
	, CASE NMR.AccountClass
		WHEN 'O' THEN Work.State
		ELSE Home.State
	  END AS State
	, CASE NMR.AccountClass
		WHEN 'O' THEN CASE LEN(Work.Zip) WHEN 9 THEN LEFT(Work.zip, 5) + '-' + Right(Work.Zip, 4) ELSE Work.Zip END
		ELSE CASE LEN(Home.Zip) WHEN 9 THEN LEFT(Home.zip, 5) + '-' + Right(Home.Zip, 4) ELSE Home.Zip END
	  END AS Zip		
	, RTRIM(NMR.Email1) AS Email
	, CASE NMR.AccountClass
		WHEN 'O' THEN Work.AreaCode
		ELSE Home.AreaCode
	  END AS AC
	, CASE NMR.AccountClass
		WHEN 'O' THEN LEFT(Work.Phone, 3) + '-' + RIGHT(RTRIM(Work.Phone), 4)
		ELSE LEFT(Home.Phone, 3) + '-' + RIGHT(RTRIM(Home.Phone), 4)
	  END AS Phone
	, CASE NMR.AccountClass WHEN 'P' THEN Work.EmployerName ELSE '' END AS WorkName
	, CASE NMR.AccountClass WHEN 'P' THEN Work.EmployerName ELSE '' END AS Employer
	, CASE NMR.AccountClass WHEN 'P' THEN RTRIM(Work.address1 + CASE Work.address2 WHEN '' THEN ''ELSE', ' END + Work.address2 + CASE Work.address3 WHEN '' THEN ''ELSE', ' END + Work.address3) ELSE '' END AS WorkAddress
	, CASE NMR.AccountClass WHEN 'P' THEN Work.City ELSE '' END AS WorkCity
	, CASE NMR.AccountClass WHEN 'P' THEN Work.State ELSE '' END AS WorkState
	, CASE NMR.AccountClass WHEN 'P' THEN CASE LEN(Work.Zip) WHEN 9 THEN LEFT(Work.zip, 5) + '-' + RIGHT(Work.Zip, 4) ELSE Work.Zip END ELSE '' END AS WorkZip
	, Work.AreaCode AS WorkAC, LEFT(Work.Phone, 3) + '-' + RIGHT(RTRIM(Work.Phone), 4)  AS WorkPhone
	, Work.AreaCode + '-' + LEFT(Work.Phone, 3) + '-' + RIGHT(RTRIM(Work.Phone), 4)  AS WPhoneFull
	, Work.JobTitle AS Position
	, Work.JobTitle AS Occupation
	, Work.ProfessionYears As WorkNumYears
	,  RTRIM(Work.EmployerName) + ' ' + RTRIM(Work.address1 + CASE Work.address2 WHEN '' THEN ''ELSE', ' END + Work.address2 + CASE Work.address3 WHEN '' THEN ''ELSE', ' END + Work.address3) + ', ' + RTRIM(Work.City) + ', ' + RTRIM(Work.State) + ' ' + CASE LEN(Work.Zip) WHEN 9 THEN LEFT(Work.zip, 5) + '-' + Right(Work.Zip, 4) ELSE Work.Zip END AS WorkNameAddress
	, Work.HireDate
	,   CASE Work.IncomeFrequency
	     	WHEN 'W'  THEN 'Week'
		WHEN 'B' THEN 'Bi-Week'
		WHEN 'M' THEN 'Month'
		WHEN 'S' THEN 'Semi-Month'
		WHEN 'Y' THEN 'Year'
	      END AS IncomeFrequency
	,   CASE Work.IncomeFrequency
	     	WHEN 'W'  THEN (Work.GrossIncome * 52)/100
		WHEN 'B' THEN (Work.GrossIncome * 26)/100
		WHEN 'M' THEN (Work.GrossIncome * 12)/100
		WHEN 'S' THEN (Work.GrossIncome * 24)/100
		WHEN 'Y' THEN (Work.GrossIncome)/100
	      END AS GrossIncome
	, Home.ResidenceYears AS NumYears
	, CASE NMR.AccountClass
		WHEN 'O' THEN 'Yes'
		ELSE CASE WHEN NMR.Citizenship = 'US' Or NMR.Citizenship = 'RA' THEN 'Yes' END
	  END AS YesNoUSCitizen
	, CASE NMR.AccountClass
		WHEN 'O' THEN 'X'
		ELSE CASE WHEN NMR.Citizenship = 'US' Or NMR.Citizenship = 'RA' THEN 'X' END
	  END AS YesUSCitizen
	, CASE NMR.AccountClass
		WHEN 'O' THEN ''
		ELSE CASE WHEN NMR.Citizenship != 'US' And NMR.Citizenship != 'RA' THEN 'X' END
	  END AS NoUSCitizen
	, 'X' AS YesEligible00
	, CASE WHEN NMR.Qualification1 = 'Household' THEN 'X' END AS YesEligible01
	, CASE WHEN NMR.Qualification1 = 'Relative' OR NMR.Qualification1 = 'Household' THEN NMR.Qualification2 END AS MemberName
	, CASE WHEN NMR.Qualification1 = 'Relative' THEN NMR.Relationship END AS Relationship
	, CASE WHEN NMR.Qualification1 = 'Location' THEN 'X' END AS YesEligible10
	, CASE WHEN NMR.Qualification1 = 'Location' AND NMR.Qualification2 = 'BCOUNTY' THEN 'X' END AS YesEligible11
	, CASE WHEN NMR.Qualification1 = 'Location' AND NMR.Qualification2 = 'CLARENDON' THEN 'X' END AS YesEligible12
	, CASE WHEN NMR.Qualification1 = 'Location' AND NMR.Qualification2 = 'ORANGE' THEN 'X' END AS YesEligible13
	, CASE WHEN NMR.Qualification1 = 'Location' AND NMR.Qualification2 = 'CALHOUN' THEN 'X' END AS YesEligible14
	, CASE WHEN NMR.Qualification1 = 'Location' AND NMR.Qualification2 = 'DCOUNTY' THEN 'X' END AS YesEligible15
	, CASE WHEN NMR.Qualification1 = 'Location' AND NMR.Qualification2 = 'UNDER' THEN 'X' END AS YesEligible16
	, CASE WHEN NMR.Qualification1 = 'Location' AND NMR.Qualification2 = 'CCOUNTY' THEN 'X' END AS YesEligible17
	, CASE WHEN NMR.Qualification1 = 'Location' AND NMR.Qualification2 = 'GEO COMM' THEN 'X' END AS YesEligible18
	, RTRIM(NMR.LName) + '/' + RTRIM(RTRIM(NMR.FName) + ' ' + NMR.MInitial) AS SlashName
	, '(' + RTRIM(LTRIM(CAST(NMR.CurrBranch AS VARCHAR(2)))) + ' - ' + RTRIM(Branches.[Description]) + ')' AS SellerBranch
	, 'SOUTH CAROLINA FEDERAL CREDIT UNION' AS HCCUName
	, 'P.O. BOX 190012' AS HCCUAddress
	, 'NORTH CHARLESTON, SC  29419-9012' AS HCCUCityStateZip
	, '(800)845-0432' AS HCCUPhone
FROM NewMemberRequest As NMR
	--INNER JOIN udt_AccountTypes AS AType On NMR.AccountType = AType.TypeCode
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN NewMemberAddress As AltAddress On NMR.TrackingNum = AltAddress.TrackingNum
	LEFT OUTER JOIN Branches On NMR.CurrBranch = Branches.BranchCode
	LEFT OUTER JOIN Departments ON NMR.Department = Departments.Department
WHERE NMR.TrackingNum = @TrackingNum
GO
/****** Object:  StoredProcedure [IMS].[spFCCU_Eligibility_Select]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_Eligibility_Select
CREATE PROCEDURE [IMS].[spFCCU_Eligibility_Select]
	@ZipCode varchar(5),
	@CensusTract varchar(10)
AS

IF IsNull(@CensusTract, '') = '' AND @ZipCode <> ''
BEGIN
	SELECT Department
	FROM udt_EligibilityByZip
	WHERE ZipCode = @ZipCode
END
GO
/****** Object:  StoredProcedure [IMS].[spFCCU_FedReservePendingTransaction_Select]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Jonathan Eagar
-- Create date: 8/25/2011
-- Description:	Returns all FedReserve Pending Transactions
-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_FedReservePendingTransaction_Select
-- =============================================
CREATE PROCEDURE [IMS].[spFCCU_FedReservePendingTransaction_Select] 
	-- Add the parameters for the stored procedure here
	@NMRAccountNumber bigint
AS
BEGIN	
	SET @NMRAccountNumber = ISNULL(@NMRAccountNumber, 0)
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	-- Insert statements for procedure here
	
	DECLARE @TransactionSummary TABLE
	(		
		FundingBankID INT,
		TransferAmountTotal DECIMAL(18,2)		
	)
		
	IF @NMRAccountNumber = 0  
	BEGIN
	
	INSERT INTO @TransactionSummary(FundingBankID, TransferAmountTotal)	
	SELECT
		   FB.ID as FundingBankID,			  
		   SUM(FT.Amount) as TransferAmountTotal			   
	FROM IMS.NMRFundingBank FB INNER JOIN IMS.NMRFundingTransaction FT ON FB.ID = FT.FundingBankID						
	WHERE FT.DateTimeLastTransaction IS NULL AND FT.FundingType = 'B'
	GROUP BY FB.ID	
	
	SELECT  FRPT.* FROM
	( 
		(
		SELECT F.ID as FundingID,
			   F.AccountNumber as NMRAccountNumber,
			   FB.TrackingNum as NMRTrackingNumber,
			   NMR.LName + ', ' + NMR.FName as NMRMemberName,
			   FB.ID as FundingBankID,
			   0 as FundingTransactionID,
			   FB.RoutingNumber as FundingBankRouting,
			   FB.AccountNumberEncrypted as FundingBankAccountNumberEncrypted,
			   FB.AccountNumberLast4 as FundingBankAccountAccountLast4,
			   FB.BankName as FundingBankName,
			   FB.AccountType as FundingBankAccountType,
			   FB.Amount1 as VerificationAmount1,
			   FB.Amount2 as VerificationAmount2,
			   0 as TransferAmount,
			   0 as TransferAmountTotal,			   	
			   0 as TargetSubAccountSuffix,
			   0 as TargetSubAccountSeq,
			   FB.DateTimeCreated as DateTimeCreated
		FROM IMS.NMRFunding F INNER JOIN IMS.NMRFundingBank FB ON F.ID = FB.FundingID
								INNER JOIN IMS.NewMemberRequest NMR ON FB.TrackingNum = NMR.TrackingNum
		WHERE FB.VerificationStatus = 'P' OR FB.DateTimeExported IS NULL
		)
		UNION ALL
		(	
		SELECT F.ID as FundingID,
			   F.AccountNumber as NMRAccountNumber,
			   FB.TrackingNum as NMRTrackingNumber,			   
			   NMR.LName + ', ' + NMR.FName as NMRMemberName,
			   FB.ID as FundingBankID,
			   FT.ID as FundingTransactionID,
			   FB.RoutingNumber as FundingBankRouting,
			   FB.AccountNumberEncrypted as FundingBankAccountNumberEncrypted,
			   FB.AccountNumberLast4 as FundingBankAccountAccountLast4,
			   FB.BankName as FundingBankName,
			   FB.AccountType as FundingBankAccountType,
				0 as VerificationAmount1,
				0 as VerificationAmount2,
			   FT.Amount as TransferAmount,
			   TS.TransferAmountTotal as TransferAmountTotal,			
			   FT.TargetSubAccountSuffix as TargetSubAccountSuffix,
			   FT.TargetSubAccountSeq as TargetSubAccountSeq,
			   FT.DateTimeCreated as DateTimeCreated 
		FROM IMS.NMRFunding F INNER JOIN IMS.NMRFundingBank FB ON F.ID = FB.FundingID
								INNER JOIN IMS.NMRFundingTransaction FT ON FB.ID = FT.FundingBankID
									INNER JOIN IMS.NewMemberRequest NMR ON FB.TrackingNum = NMR.TrackingNum
										INNER JOIN @TransactionSummary TS ON FB.ID = TS.FundingBankID
		WHERE FT.DateTimeLastTransaction IS NULL AND FT.FundingType = 'B'
		)
	)  FRPT ORDER BY FRPT.NMRTrackingNumber, FRPT.FundingID, FRPT.FundingBankID, FRPT.FundingTransactionID	
	END	
	ELSE
	BEGIN
	
	INSERT INTO @TransactionSummary(FundingBankID, TransferAmountTotal)	
	SELECT	   		   
		   FB.ID as FundingBankID,			  
		   SUM(FT.Amount) as TransferAmountTotal			   
	FROM IMS.NMRFunding F INNER JOIN IMS.NMRFundingBank FB ON F.ID = FB.FundingID 
							INNER JOIN IMS.NMRFundingTransaction FT ON FB.ID = FT.FundingBankID						
	WHERE FT.DateTimeLastTransaction IS NULL AND 
		FT.FundingType = 'B' AND
		F.AccountNumber = @NMRAccountNumber	 
	GROUP BY FB.ID	
	  
	SELECT  FRPT.* FROM
	(   
		(
		SELECT F.ID as FundingID,
			   F.AccountNumber as NMRAccountNumber,
			   FB.TrackingNum as NMRTrackingNumber,
			   NMR.LName + ', ' + NMR.FName as NMRMemberName,
			   FB.ID as FundingBankID,
			   0 as FundingTransactionID,
			   FB.RoutingNumber as FundingBankRouting,
			   FB.AccountNumberEncrypted as FundingBankAccountNumberEncrypted,
			   FB.AccountNumberLast4 as FundingBankAccountAccountLast4,
			   FB.BankName as FundingBankName,
			   FB.AccountType as FundingBankAccountType,
			   FB.Amount1 as VerificationAmount1,
			   FB.Amount2 as VerificationAmount2,
			   0 as TransferAmount,
			   0 as TransferAmountTotal,
			   0 as TargetSubAccountSuffix,
			   0 as TargetSubAccountSeq,
			   FB.DateTimeCreated as DateTimeCreated
		FROM IMS.NMRFunding F INNER JOIN IMS.NMRFundingBank FB ON F.ID = FB.FundingID
								INNER JOIN IMS.NewMemberRequest NMR ON FB.TrackingNum = NMR.TrackingNum
		WHERE	(FB.VerificationStatus = 'P' OR FB.DateTimeExported IS NULL) AND 
				F.AccountNumber = @NMRAccountNumber	
		)	
		UNION ALL
		(		
		SELECT F.ID as FundingID,
			   F.AccountNumber as NMRAccountNumber,
			   FB.TrackingNum as NMRTrackingNumber,
			   NMR.LName + ', ' + NMR.FName as NMRMemberName,
			   FB.ID as FundingBankID,
			   FT.ID as FundingTransactionID,
			   FB.RoutingNumber as FundingBankRouting,
			   FB.AccountNumberEncrypted as FundingBankAccountNumberEncrypted,
			   FB.AccountNumberLast4 as FundingBankAccountAccountLast4,
			   FB.BankName as FundingBankName,
			   FB.AccountType as FundingBankAccountType,
				0 as VerificationAmount1,
				0 as VerificationAmount2,
			   FT.Amount as TransferAmount,
			   TS.TransferAmountTotal as TransferAmountTotal,
			   FT.TargetSubAccountSuffix as TargetSubAccountSuffix,
			   FT.TargetSubAccountSeq as TargetSubAccountSeq,
			   FT.DateTimeCreated as DateTimeCreated
		FROM IMS.NMRFunding F 
				INNER JOIN IMS.NMRFundingBank FB ON F.ID = FB.FundingID
					INNER JOIN IMS.NMRFundingTransaction FT ON FB.ID = FT.FundingBankID
						INNER JOIN IMS.NewMemberRequest NMR ON FB.TrackingNum = NMR.TrackingNum
							INNER JOIN @TransactionSummary TS ON FB.ID = TS.FundingBankID
		WHERE	FT.DateTimeLastTransaction IS NULL AND 
				FT.FundingType = 'B' AND 
				F.AccountNumber = @NMRAccountNumber
		)
	)  FRPT	ORDER BY FRPT.NMRTrackingNumber, FRPT.FundingID, FRPT.FundingBankID, FRPT.FundingTransactionID
	END		
END

GO
/****** Object:  StoredProcedure [IMS].[spFCCU_ILAApplicationSearch_Select]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_ILAApplicationSearch_Select
CREATE Procedure [IMS].[spFCCU_ILAApplicationSearch_Select]
	@TrackingNum varchar(9),
	@SSN varchar(9),
	@Account varchar(9),
	@AppNumber varchar(9)
AS

DECLARE @SQL varchar(1000)
SET @SQL = 'SELECT AI.*, A.UserSessionXML FROM ILA_ApplicationInfo AI INNER JOIN ILA_Application A ON A.TrackingNum = AI.TrackingNum WHERE 1=1'
IF @TrackingNum <> '*'
BEGIN
	SET @SQL = @SQL + ' AND AI.TrackingNum = ''' + @TrackingNum + ''''
END
IF @SSN <> '*'
BEGIN
	SET @SQL = @SQL + ' AND AI.PrimarySSN = ''' + @SSN + ''''
END
IF @Account <> '*'
BEGIN
	SET @SQL = @SQL + ' AND AI.Account = ''' + @Account + ''''
END
IF @AppNumber <> '*'
BEGIN
	SET @SQL = @SQL + ' AND AI.AppNumber = ''' + @AppNumber + ''''
END

EXEC(@SQL)
GO
/****** Object:  StoredProcedure [IMS].[spFCCU_OAOReport_ApplicationStatusReport]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_OAOReport_ApplicationStatusReport
CREATE Procedure [IMS].[spFCCU_OAOReport_ApplicationStatusReport]
	@StartDate datetime,
	@StopDate datetime
AS

SELECT
	NMR.TrackingNum
	, UPPER(RTRIM(LEFT(NMR.FName, 1)) + ' ' + RTRIM(NMR.LName)) AS MemberName
	, NMR.ApplyDate AS [Date_Time]
	, NMR.CurrBranch AS Branch
	, CASE
		WHEN NMR.Processed = '1' THEN 'In-Process'
		WHEN NMR.Processed = '999' THEN 'Created'
		ELSE 'Denied'
		END AS Status
	, CASE
		WHEN (SELECT COUNT(*) FROM NMRFundingBank AS NMRFB WHERE NMRFB.TrackingNum = NMR.TrackingNum AND NMRFB.VerificationStatus <> 'X' AND NMRFB.VerificationStatus <> 'E') > 0 THEN 'ACH'
		WHEN (SELECT COUNT(*) FROM NMRFundingCard AS NMRFC WHERE NMRFC.TrackingNum = NMR.TrackingNum) > 0 THEN 'Credit Card'
		WHEN (SELECT COUNT(*) FROM NMRFundingTransaction AS NMRFT WHERE NMRFT.TrackingNum = NMR.TrackingNum AND NMRFT.SourceSubAccountSeq <> '') > 0 THEN 'Transfer'
		WHEN (SELECT FundingType FROM NMRFundingTransaction AS NMRFT WHERE NMRFT.TrackingNum = NMR.TrackingNum) = NULL THEN 'Skipped'
		ELSE 'None'
		END AS PaymentMethod
	, (SELECT SUM(Amount) FROM NMRFundingTransaction AS NMRFT WHERE NMRFT.TrackingNum = NMR.TrackingNum GROUP BY NMRFT.TrackingNum) AS InitialAmountFunded
	, NMR.Account AS AccountNumber
FROM IMS.NewMemberRequest NMR
WHERE
	NMR.Processed > 0
	AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> ''
	AND (NMR.ApplyDate >= @StartDate AND NMR.ApplyDate <= @StopDate)
GO
/****** Object:  StoredProcedure [IMS].[spFCCU_OAOReport_FundingDetailReport]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_OAOReport_FundingDetailReport
CREATE Procedure [IMS].[spFCCU_OAOReport_FundingDetailReport]
	@StartDate datetime,
	@StopDate datetime
AS

SELECT Bank, Card, Existing, Skipped FROM
(
	(SELECT COUNT(DISTINCT NMRFT.TrackingNum) AS Bank
	FROM IMS.NMRFundingTransaction NMRFT
	LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	INNER JOIN IMS.NMRFundingBank NMRFB ON NMRFB.ID = NMRFT.FundingBankID
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND NMRFT.FundingBankID <> '' AND NMR.Processed = 999 AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate) AND (NMRFB.VerificationStatus <> 'E') AND (NMRFB.VerificationStatus <> 'X')) a
		FULL OUTER JOIN
	(SELECT COUNT(DISTINCT NMRFT.TrackingNum) AS Card
	FROM IMS.NMRFundingTransaction NMRFT
	LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND NMRFT.FundingCardID <> '' AND NMR.Processed = 999 AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate)) b ON 1=1
		FULL OUTER JOIN
	(SELECT COUNT(DISTINCT NMRFT.TrackingNum) AS Existing
	FROM IMS.NMRFundingTransaction NMRFT
	LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND NMRFT.SourceSubAccountSeq <> '' AND NMR.Processed = 999 AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate)) c ON 1=1
		FULL OUTER JOIN
	(SELECT COUNT(DISTINCT NMR.TrackingNum) AS Skipped
	FROM IMS.NMRFundingTransaction NMRFT
	FULL OUTER JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND (NMR.Processed = 999 AND ISNULL(NMRFT.TrackingNum, 0) = 0) AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate)) d ON 1=1
)

UNION ALL

SELECT Bank, Card, Existing, Skipped FROM
(
	(SELECT COUNT(DISTINCT NMRFT.TrackingNum) AS Bank
	FROM IMS.NMRFundingTransaction NMRFT
	LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	INNER JOIN IMS.NMRFundingBank NMRFB ON NMRFB.ID = NMRFT.FundingBankID
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND NMRFT.FundingBankID <> '' AND NMR.Processed = 998 AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate) AND (NMRFB.VerificationStatus <> 'E') AND (NMRFB.VerificationStatus <> 'X')) a
		FULL OUTER JOIN
	(SELECT COUNT(DISTINCT NMRFT.TrackingNum) AS Card
	FROM IMS.NMRFundingTransaction NMRFT
	LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND NMRFT.FundingCardID <> '' AND NMR.Processed = 998 AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate)) b ON 1=1
		FULL OUTER JOIN
	(SELECT COUNT(DISTINCT NMRFT.TrackingNum) AS Existing
	FROM IMS.NMRFundingTransaction NMRFT
	LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND NMRFT.SourceSubAccountSeq <> '' AND NMR.Processed = 998 AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate)) c ON 1=1
		FULL OUTER JOIN
	(SELECT COUNT(DISTINCT NMR.TrackingNum) AS Skipped
	FROM IMS.NMRFundingTransaction NMRFT
	FULL OUTER JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND (NMR.Processed = 998 AND ISNULL(NMRFT.TrackingNum, 0) = 0) AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate)) d ON 1=1
)
GO
/****** Object:  StoredProcedure [IMS].[spFCCU_ReviewQueue_SelectAll]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Jon Eagar
-- Create date: 7/08/2011
-- Description:	Lists the active NMR records for the Queue Review
-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_ReviewQueue_SelectAll
-- =============================================
CREATE PROCEDURE [IMS].[spFCCU_ReviewQueue_SelectAll] 
	-- Add the parameters for the stored procedure here
	@StartDate DATETIME = NULL,
	@EndDate DATETIME = NULL,
	@StatusCode VARCHAR(2) = NULL
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
 
	DECLARE @Hierarchy INT
	DECLARE @StatusID INT

	IF @StartDate IS NOT NULL AND @StartDate <> ''
	BEGIN
		SET @StartDate = CONVERT(DATETIME,(CONVERT(VARCHAR(10), @StartDate, 102)))  --Set Time to beginning of Day
		SET @EndDate = CAST( CONVERT(CHAR(10), @EndDate, 101) + ' 11:59 PM' AS DATETIME) --Set Time to end of day
	END
	
	SET @StatusCode = NULLIF(@StatusCode,'')

	DECLARE @ReviewQueue TABLE
	(
		ID INT IDENTITY(1,1) PRIMARY KEY CLUSTERED,
		TrackingNum INT,	
		Name VARCHAR(90),
		EmployerName VARCHAR(30),
		Account INT,
		StatusName VARCHAR(50),
		StatusID INT,
		FundingComplete CHAR(1), 
		ApplyDate DATETIME,
		Teller CHAR(3),
		LastPage VARCHAR(50),
		TNExpireDate DATETIME
	)

	IF (@StatusCode IS NOT NULL)
	BEGIN
		SELECT @Hierarchy=RQC.Hierarchy, @StatusID=RQC.ID FROM IMS.ReviewQueueConfig RQC WHERE RQC.StatusCode = @StatusCode
	END

	IF (@Hierarchy > 0 OR @StatusCode IS NULL)
	BEGIN
		--IDV DECLINE
		INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, TNExpireDate)
		SELECT	DISTINCT NMR.TrackingNum, 
				LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
				RTRIM(LTRIM(NMRW.EmployerName)) as EmployerName,			 
				NMR.Account, 
				RQC.StatusName,
				RQC.ID, 
				NMR.FundingComplete, 
				NMR.ApplyDate,
				(SELECT TOP 1 CompletedBy FROM IMS.ActionLog WHERE TrackingNum = NMR.TrackingNum AND NullIf(CompletedBy, '') IS NOT NULL ORDER BY CompletedDate DESC) AS Seller,
				(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
				NMR.TNExpireDate
		FROM IMS.NewMemberRequest NMR 
				INNER JOIN 
				IMS.NewMemberManualApproval MA 
					ON NMR.TrackingNum = MA.TrackingNum 
						INNER JOIN IMS.ReviewQueueConfig RQC ON RQC.StatusCode = 'ID'
							LEFT JOIN IMS.NewMemberWork NMRW
								ON NMR.TrackingNum = NMRW.TrackingNum
		WHERE NMR.Processed NOT IN (-1, 998, 999) AND (MA.Category = 'ID' AND MA.ApprovalStatus = '') AND (@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate) AND DATALENGTH(NMR.UserSessionXML) > 0  AND NMR.UserSessionXML IS NOT NULL
		
		IF (@Hierarchy > 1 OR @StatusCode IS NULL)
		BEGIN
			--Miscellaneous Decline
			INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, TNExpireDate)
			SELECT	DISTINCT NMR.TrackingNum, 
					LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
					RTRIM(LTRIM(NMRW.EmployerName)) as EmployerName,				 
					NMR.Account, 
					RQC.StatusName,
					RQC.ID, 
					NMR.FundingComplete, 
					NMR.ApplyDate,
					(SELECT TOP 1 CompletedBy FROM IMS.ActionLog WHERE TrackingNum = NMR.TrackingNum AND NullIf(CompletedBy, '') IS NOT NULL ORDER BY CompletedDate DESC) AS Seller,
					(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
					NMR.TNExpireDate
			FROM IMS.NewMemberRequest NMR 
					INNER JOIN 
					IMS.NewMemberManualApproval MA 
						ON NMR.TrackingNum = MA.TrackingNum AND MA.JointSequence = 0
							INNER JOIN IMS.ReviewQueueConfig RQC ON RQC.StatusCode = 'MD' AND RQC.ReasonCode = LTRIM(RTRIM(MA.ReasonCode))
								LEFT JOIN IMS.NewMemberWork NMRW
									ON NMR.TrackingNum = NMRW.TrackingNum					
			WHERE NOT EXISTS(SELECT TrackingNum FROM @ReviewQueue RQ Where RQ.TrackingNum = NMR.TrackingNum) AND
				  NMR.Processed NOT IN (-1, 998, 999) AND 
				  (MA.ApprovalStatus = '') AND (@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate)AND DATALENGTH(NMR.UserSessionXML) > 0  AND NMR.UserSessionXML IS NOT NULL

			IF (@Hierarchy > 2 OR @StatusCode IS NULL)
			BEGIN
				--Joint Decline
				INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, TNExpireDate)
				SELECT	DISTINCT NMR.TrackingNum, 
						LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
						RTRIM(LTRIM(NMRW.EmployerName)) as EmployerName,				 
						NMR.Account, 
						RQC.StatusName,
						RQC.ID, 
						NMR.FundingComplete, 
						NMR.ApplyDate,
						(SELECT TOP 1 CompletedBy FROM IMS.ActionLog WHERE TrackingNum = NMR.TrackingNum AND NullIf(CompletedBy, '') IS NOT NULL ORDER BY CompletedDate DESC) AS Seller,
						(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
						NMR.TNExpireDate
				FROM IMS.NewMemberRequest NMR 
						INNER JOIN 
						IMS.NewMemberManualApproval MA 
							ON NMR.TrackingNum = MA.TrackingNum AND MA.JointSequence > 0
								INNER JOIN IMS.ReviewQueueConfig RQC ON RQC.StatusCode = 'JD' AND RQC.ReasonCode = LTRIM(RTRIM(MA.ReasonCode))
									LEFT JOIN IMS.NewMemberWork NMRW
										ON NMR.TrackingNum = NMRW.TrackingNum					
				WHERE NOT EXISTS(SELECT TrackingNum FROM @ReviewQueue RQ Where RQ.TrackingNum = NMR.TrackingNum) AND
					  NMR.Processed NOT IN (-1, 998, 999) AND 
					  (MA.ApprovalStatus = '') AND (@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate)AND DATALENGTH(NMR.UserSessionXML) > 0  AND NMR.UserSessionXML IS NOT NULL

				IF (@Hierarchy > 3 OR @StatusCode IS NULL)
				BEGIN
					--Manual Review
					INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, TNExpireDate)
					SELECT	DISTINCT NMR.TrackingNum, 
							LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
							RTRIM(LTRIM(NMRW.EmployerName)) as EmployerName,				 
							NMR.Account, 
							RQC.StatusName,
							RQC.ID, 
							NMR.FundingComplete, 
							NMR.ApplyDate,
							(SELECT TOP 1 CompletedBy FROM IMS.ActionLog WHERE TrackingNum = NMR.TrackingNum AND NullIf(CompletedBy, '') IS NOT NULL ORDER BY CompletedDate DESC) AS Seller,
							(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
							NMR.TNExpireDate
					FROM IMS.NewMemberRequest NMR 
							INNER JOIN 
							IMS.NewMemberManualApproval MA 
								ON NMR.TrackingNum = MA.TrackingNum 
									INNER JOIN IMS.ReviewQueueConfig RQC ON RQC.StatusCode = 'MR' AND RQC.ReasonCode = LTRIM(RTRIM(MA.ReasonCode))
										LEFT JOIN IMS.NewMemberWork NMRW
											ON NMR.TrackingNum = NMRW.TrackingNum		
					WHERE NOT EXISTS(SELECT TrackingNum FROM @ReviewQueue RQ Where RQ.TrackingNum = NMR.TrackingNum) AND
						  NMR.Processed NOT IN (-1, 998, 999) AND 
						  (MA.ApprovalStatus = '') AND (@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate) AND DATALENGTH(NMR.UserSessionXML) > 0 AND NMR.UserSessionXML IS NOT NULL

					IF (@Hierarchy > 4 OR @StatusCode IS NULL)
					BEGIN
						--Need Decision/Pending
						INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, TNExpireDate)
						SELECT	DISTINCT NMR.TrackingNum, 
								LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
								RTRIM(LTRIM(NMRW.EmployerName)) as EmployerName,
								NMR.Account, 
								RQC.StatusName,
								RQC.ID, 
								NMR.FundingComplete, 
								NMR.ApplyDate,
								(SELECT TOP 1 CompletedBy FROM IMS.ActionLog WHERE TrackingNum = NMR.TrackingNum AND NullIf(CompletedBy, '') IS NOT NULL ORDER BY CompletedDate DESC) AS Seller,
								(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
								NMR.TNExpireDate
						FROM IMS.NewMemberRequest NMR  
								INNER JOIN IMS.NewMemberSubAccount SA 
									ON NMR.TrackingNum = SA.TrackingNum
										INNER JOIN IMS.ReviewQueueConfig RQC ON RQC.StatusCode = 'DP'
											LEFT JOIN IMS.NewMemberWork NMRW
												ON NMR.TrackingNum = NMRW.TrackingNum
													LEFT JOIN IMS.NewMemberManualApproval MA 
														ON NMR.TrackingNum = MA.TrackingNum
						WHERE NOT EXISTS(SELECT TrackingNum FROM @ReviewQueue RQ Where RQ.TrackingNum = NMR.TrackingNum) AND
							  NMR.Processed NOT IN (-1, 998, 999) AND 
							  ((SA.Approval <> 'A' AND SA.ApprovedBy = '') OR (MA.ApprovalStatus = '')) AND 
							  (@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate) AND DATALENGTH(NMR.UserSessionXML) > 0 AND NMR.UserSessionXML IS NOT NULL

						IF (@Hierarchy > 5 OR @StatusCode IS NULL)
						BEGIN
							--In Progress
							INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, TNExpireDate)
							SELECT	DISTINCT NMR.TrackingNum, 
									LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
									RTRIM(LTRIM(NMRW.EmployerName)) as EmployerName,			 
									NMR.Account, 
									RQC.StatusName,
									RQC.ID, 
									NMR.FundingComplete, 
									NMR.ApplyDate,
									(SELECT TOP 1 CompletedBy FROM IMS.ActionLog WHERE TrackingNum = NMR.TrackingNum AND NullIf(CompletedBy, '') IS NOT NULL ORDER BY CompletedDate DESC) AS Seller,
									(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
									NMR.TNExpireDate
							FROM IMS.NewMemberRequest NMR			
									INNER JOIN IMS.ReviewQueueConfig RQC 
										ON RQC.StatusCode = 'IP'
											LEFT JOIN IMS.NewMemberWork NMRW
												ON NMR.TrackingNum = NMRW.TrackingNum
							WHERE NOT EXISTS(SELECT TrackingNum FROM @ReviewQueue RQ WHERE RQ.TrackingNum = NMR.TrackingNum) AND
								  NMR.Processed = 1 AND 
								  (SELECT COUNT(TrackingNum) FROM IMS.NewMemberManualApproval MA WHERE MA.TrackingNum = NMR.TrackingNum AND MA.ApprovalStatus = '') = 0 AND
								  (SELECT COUNT(TrackingNum) FROM IMS.NewMemberSubAccount SA WHERE SA.TrackingNum = NMR.TrackingNum) = (SELECT COUNT(TrackingNum) FROM IMS.NewMemberSubAccount SA WHERE SA.TrackingNum = NMR.TrackingNum AND (SA.Approval = 'A' OR SA.ApprovedBy <> '')) AND	 
								  (@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate) AND DATALENGTH(NMR.UserSessionXML) > 0 AND NMR.UserSessionXML IS NOT NULL

							IF (@Hierarchy > 6 OR @StatusCode IS NULL)
							BEGIN
								--Not Funded
								INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, TNExpireDate)
								SELECT	DISTINCT NMR.TrackingNum, 
										LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
										RTRIM(LTRIM(NMRW.EmployerName)) as EmployerName,			 
										NMR.Account, 
										RQC.StatusName,
										RQC.ID, 
										NMR.FundingComplete, 
										NMR.ApplyDate,
										(SELECT TOP 1 CompletedBy FROM IMS.ActionLog WHERE TrackingNum = NMR.TrackingNum AND NullIf(CompletedBy, '') IS NOT NULL ORDER BY CompletedDate DESC) AS Seller,
										(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
										NMR.TNExpireDate
								FROM IMS.NewMemberRequest NMR
									INNER JOIN IMS.ReviewQueueConfig RQC 
										ON RQC.StatusCode = 'NF'
											LEFT JOIN IMS.NewMemberWork NMRW
												ON NMR.TrackingNum = NMRW.TrackingNum
								WHERE NOT EXISTS(SELECT TrackingNum FROM @ReviewQueue RQ WHERE RQ.TrackingNum = NMR.TrackingNum) AND
									  NMR.Processed = 999 AND 
									  IsNull(FundingComplete, 'N') <> 'Y' AND
									  (@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate) AND DATALENGTH(NMR.UserSessionXML) > 0 AND NMR.UserSessionXML IS NOT NULL

							END
						END
					END	  
				END
			END
		END
		SELECT 
		TrackingNum as TrackingNumber,		 
		Name,
		EmployerName,
		Account,
		StatusName,
		CASE WHEN FundingComplete <> 'Y' THEN 'N' ELSE 'Y' END as FundingComplete,
		ApplyDate, 
		Teller, 
		LastPage, 
		TNExpireDate,
		(
			SELECT COUNT(*)
			FROM IMS.SecureMailThread SMT
			LEFT JOIN IMS.SecureMailAttachment SMA ON SMA.ThreadId = SMT.ThreadId
			WHERE SMT.TrackingNum = RQ.TrackingNum AND SMA.Status = 'U'
		) AS AttachU,
		(
			SELECT COUNT(*)
			FROM IMS.SecureMailThread SMT
			LEFT JOIN IMS.SecureMailAttachment SMA ON SMA.ThreadId = SMT.ThreadId
			WHERE SMT.TrackingNum = RQ.TrackingNum AND SMA.Status = 'V'
		) AS AttachV,
		(
			SELECT COUNT(*)
			FROM IMS.SecureMailThread SMT
			LEFT JOIN IMS.SecureMailAttachment SMA ON SMA.ThreadId = SMT.ThreadId
			WHERE SMT.TrackingNum = RQ.TrackingNum AND SMA.Status = 'Q'
		) AS AttachQU,
		(
			SELECT COUNT(*)
			FROM IMS.SecureMailThread SMT
			LEFT JOIN IMS.SecureMailAttachment SMA ON SMA.ThreadId = SMT.ThreadId
			WHERE SMT.TrackingNum = RQ.TrackingNum AND SMA.Status = 'QV'
		) AS AttachQV
		FROM @ReviewQueue RQ 
		WHERE RQ.StatusID = @StatusID OR @StatusID IS NULL order by TrackingNum		
	END
END
GO
/****** Object:  StoredProcedure [IMS].[spFCCU_SignOnOAO]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.SignOnOAO 
CREATE Procedure [IMS].[spFCCU_SignOnOAO]
@TrackingNum int,
@Password varchar(24),
@SSN varchar(9),
@DOB datetime
AS
BEGIN
	SELECT
		n.TrackingNum, 
		ISNULL(CAST(n.Account AS VARCHAR(50)),'') AS Account, 
		n.UserSessionXML, 
		n.AccountType, 
		n.Created, 
		n.Processed, 
		n.TNExpireDate, 
		e.BadLoginAttempts
	FROM IMS.NewMemberRequest n
	JOIN IMS.NewMemberRequestExtra e ON n.TrackingNum = e.TrackingNum
	WHERE 
		n.TrackingNum = @TrackingNum 
		AND (
			(
				(n.Password = @Password COLLATE SQL_Latin1_General_CP1_CS_AS) 
				OR (
					n.SSN = @SSN 
					AND n.DOB = @DOB
				)
			) 
			AND n.Processed <> '998' 
			OR (@Password = 'MoDESTaFF')
		)
-- NOTE: The "COLLATE SQL_Latin1_General_CP1_CS_AS" above makes the password search case sensitive.
END
GO
/****** Object:  StoredProcedure [IMS].[spFCCU_SyncCarts]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_SyncCarts
CREATE PROCEDURE [IMS].[spFCCU_SyncCarts]
@TrackingNum int,
@SyncMode varchar(1)
AS

/*IF @SyncMode = 'S' OR @SyncMode = 'B' OR @SyncMode = 'Y'
BEGIN
	--Delete from cart where subaccount record no longer exists
	DELETE FROM IMS.NewMemberShoppingCart
	WHERE TrackingNum = @TrackingNum AND SubAccountID IS NOT NULL AND
		SubAccountID NOT IN (SELECT ID FROM IMS.NewMemberSubAccount
					WHERE TrackingNum = @TrackingNum)
END

IF @SyncMode = 'C' OR @SyncMode = 'B' OR @SyncMode = 'Y'
BEGIN
	--Delete from subaccounts where cart record no longer exists
	DELETE FROM IMS.NewMemberSubAccount
	WHERE TrackingNum = @TrackingNum AND ShoppingCartID IS NOT NULL AND
		ShoppingCartID NOT IN (SELECT ID FROM IMS.NewMemberShoppingCart
					WHERE TrackingNum = @TrackingNum)
END

IF @SyncMode = 'S' OR @SyncMode = 'B' OR @SyncMode = 'Y'
BEGIN
	--Update cart items with changes in the subaccount records
	UPDATE IMS.NewMemberShoppingCart
	SET RequestedAmount = (SELECT Amount FROM IMS.NewMemberSubAccount
				WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberShoppingCart.SubAccountID),
		InsuranceAmount1 = NULL,
		InsuranceAmount2 = NULL
	WHERE TrackingNum = @TrackingNum AND
		SubAccountID IN (SELECT ID FROM IMS.NewMemberSubAccount WHERE TrackingNum = @TrackingNum) AND
		IsNull((SELECT LineOfCredit FROM IMS.udt_LSubAccounts WHERE UniqueID = IMS.NewMemberShoppingCart.ProductID), 'N') = 'N' AND
		(SELECT Amount FROM IMS.NewMemberSubAccount WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberShoppingCart.SubAccountID) <> IMS.NewMemberShoppingCart.RequestedAmount + IsNull(IMS.NewMemberShoppingCart.InsuranceAmount1, 0) + IsNull(IMS.NewMemberShoppingCart.InsuranceAmount2, 0)

	UPDATE IMS.NewMemberShoppingCart
	SET RequestedAmount = (SELECT CreditLimit FROM IMS.NewMemberSubAccount
				WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberShoppingCart.SubAccountID),
		InsuranceAmount1 = NULL,
		InsuranceAmount2 = NULL
	WHERE TrackingNum = @TrackingNum AND
		SubAccountID IN (SELECT ID FROM IMS.NewMemberSubAccount WHERE TrackingNum = @TrackingNum) AND
		(SELECT LineOfCredit FROM IMS.udt_LSubAccounts WHERE UniqueID = IMS.NewMemberShoppingCart.ProductID) = 'Y' AND
		(SELECT CreditLimit FROM IMS.NewMemberSubAccount WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberShoppingCart.SubAccountID) <> IMS.NewMemberShoppingCart.RequestedAmount + IsNull(IMS.NewMemberShoppingCart.InsuranceAmount1, 0) + IsNull(IMS.NewMemberShoppingCart.InsuranceAmount2, 0)

	UPDATE IMS.NewMemberShoppingCart
	SET Term = (SELECT Term FROM IMS.NewMemberSubAccount
				WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberShoppingCart.SubAccountID)
	WHERE TrackingNum = @TrackingNum AND
		SubAccountID IN (SELECT ID FROM IMS.NewMemberSubAccount WHERE TrackingNum = @TrackingNum)

	--Create cart items for new subaccount records
	INSERT INTO IMS.NewMemberShoppingCart
	(ProductID, ProductName, YesNoMaybe, SLType, Approved, TrackingNum, MasterCategoryID, CategoryID,
	Exclude, CreatedBy, CreatedOn, Created, Fulfill, LOSProductID, LOSID,
	ApprovedAmount, RequestedAmount, Requires, LoanType, LoanSubType, Term, InsCode, ClosedFlag, LossFlag, SubAccountID)
	SELECT STP.ProductID, STP.ProductDesc, 'YES', STP.SLType, 'Y', @TrackingNum AS TrackingNum, STP.MasterCategoryID, STP.CategoryID,
		Prod.Exclude, SA.CreatedBy, SA.CreatedOn, SA.Created, STP.Fulfill, STP.LOSProductID, SA.LOSID,
		CASE WHEN Prod.LineOfCredit = 'Y' THEN SA.CreditLimit
		     ELSE SA.Amount
		END AS ApprovedAmount,
		CASE WHEN Prod.LineOfCredit = 'Y' THEN SA.CreditLimit
		     ELSE SA.Amount
		END AS RequestedAmount,
		STP.Requires, STP.LoanType, STP.LoanSubType, SA.Term, SA.InsCode, SA.ClosedFlag, SA.LossFlag, SA.ID AS SubAccountID
	FROM IMS.udt_SalesToolProducts STP INNER JOIN
		IMS.NewMemberSubAccount SA ON SA.SubAccountType = STP.ProductID INNER JOIN
		IMS.NewMemberRequest NMR ON SA.TrackingNum = NMR.TrackingNum INNER JOIN
		IMS.udt_AllSubAccounts Prod ON STP.ProductID = Prod.UniqueID AND ',' + RTrim(Prod.AccountTypes) + ',' LIKE '%,' + RTrim(NMR.AccountType) + ',%'
	WHERE SA.TrackingNum = @TrackingNum AND SA.SubAccountType NOT IN (SELECT ProductID FROM IMS.NewMemberShoppingCart WHERE TrackingNum = @TrackingNum)
	
	--Delete products that require products that are no longer here
	DELETE FROM IMS.NewMemberShoppingCart
	WHERE TrackingNum = @TrackingNum AND NullIf(Requires, '') IS NOT NULL AND
		(SELECT Count(SC2.ID) FROM IMS.NewMemberShoppingCart SC2 INNER JOIN
			(SELECT DISTINCT
			        SUBSTRING(l.List, v.Number+1, CHARINDEX(',', l.List, v.Number+1) -v.Number-1) AS Requires
			   FROM Master.dbo.spt_Values v
			  CROSS JOIN
			        (SELECT ',' + RTRIM(REPLACE(Requires, ', ', ',')) + ',' AS List
				FROM IMS.NewMemberShoppingCart
				WHERE TrackingNum = @TrackingNum AND ProductID = IMS.NewMemberShoppingCart.ProductID) l
			  WHERE v.Type = 'P'
			    AND v.Number BETWEEN 1 AND LEN(l.List)-1
			    AND SUBSTRING(l.List, v.Number, 1)=',') FN ON SC2.ProductID = FN.Requires
			WHERE TrackingNum = @TrackingNum AND SC2.ProductID <> IMS.NewMemberShoppingCart.ProductID) = 0
END

IF @SyncMode = 'C' OR @SyncMode = 'B' OR @SyncMode = 'Y'
BEGIN
	--Update subaccounts with changes in the cart records
	UPDATE IMS.NewMemberSubAccount
	SET Amount = (SELECT RequestedAmount + IsNull(InsuranceAmount1, 0) + IsNull(InsuranceAmount2, 0) FROM IMS.NewMemberShoppingCart
				WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberSubAccount.ShoppingCartID)
	WHERE TrackingNum = @TrackingNum AND
		ShoppingCartID IN (SELECT ID FROM IMS.NewMemberShoppingCart WHERE TrackingNum = @TrackingNum) AND
		IsNull((SELECT LineOfCredit FROM IMS.udt_LSubAccounts WHERE UniqueID = IMS.NewMemberSubAccount.SubAccountType), 'N') = 'N' AND
		(SELECT RequestedAmount + IsNull(InsuranceAmount1, 0) + IsNull(InsuranceAmount2, 0) FROM IMS.NewMemberShoppingCart WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberSubAccount.ShoppingCartID) <> IMS.NewMemberSubAccount.Amount

	UPDATE IMS.NewMemberSubAccount
	SET CreditLimit = (SELECT RequestedAmount + IsNull(InsuranceAmount1, 0) + IsNull(InsuranceAmount2, 0) FROM IMS.NewMemberShoppingCart
				WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberSubAccount.ShoppingCartID)
	WHERE TrackingNum = @TrackingNum AND
		ShoppingCartID IN (SELECT ID FROM IMS.NewMemberShoppingCart WHERE TrackingNum = @TrackingNum) AND
		(SELECT LineOfCredit FROM IMS.udt_LSubAccounts WHERE UniqueID = IMS.NewMemberSubAccount.SubAccountType) = 'Y' AND
		(SELECT RequestedAmount + IsNull(InsuranceAmount1, 0) + IsNull(InsuranceAmount2, 0) FROM IMS.NewMemberShoppingCart WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberSubAccount.ShoppingCartID) <> IMS.NewMemberSubAccount.CreditLimit

	UPDATE IMS.NewMemberSubAccount
	SET Term = (SELECT Term FROM IMS.NewMemberShoppingCart
				WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberSubAccount.ShoppingCartID)
	WHERE TrackingNum = @TrackingNum AND
		ShoppingCartID IN (SELECT ID FROM IMS.NewMemberShoppingCart WHERE TrackingNum = @TrackingNum)

	--Create subaccount records for new cart items
	INSERT INTO IMS.NewMemberSubAccount
	(TrackingNum, Sequence, DescAbrv, SubAccountType, Description, ACC, CollateralCode, SLType, Amount,
	Approval, Created, CreatedBy, CreatedOn, ProductType,
	CreditLimit, StartSuffix, StopSuffix, APR, CashAdvanceAPR, SkipCode, Coupons, Term, Method,
	Frequency, InsCode, DisclosureCode, ReviewDate, MaturityDate, Officer, CurrBranch, StatementOrder, MaturityDisp, 
	DividendDisp, LineofCredit, PaymentPercent, AllowPlastic1, AllowPlastic2, AllowPlastic3, AllowPlastic4, 
	CreateHost, HostCommand, ServiceClass, TaxCode, JointTaxCode, W8TaxCode, KTransferLink, LoanDiscounts, 
	MICRBegin, MICREnd, MICRFormat, PromptMICR, Purpose, FundingOrder, VRLIndex, VRLMargin, 
	VRLCode, VRLFreq, LOSProductID, LOSID, LossFlag, ClosedFlag, ShoppingCartID, Action, Payment)
	SELECT @TrackingNum AS TrackingNum, (SELECT Count(ID) FROM IMS.NewMemberShoppingCart SC2 WHERE TrackingNum = @TrackingNum AND SC2.Approved = 'Y' AND 
		SC2.ProductID NOT IN (SELECT SubAccountType FROM IMS.NewMemberSubAccount SA2 WHERE TrackingNum = @TrackingNum) AND SC2.ID <= SC.ID) + 
		(SELECT IsNull(Max(Sequence), 0) FROM IMS.NewMemberSubAccount SA3 WHERE TrackingNum = @TrackingNum) AS Sequence,
	Prod.DescAbrv, Prod.UniqueID, Prod.Description, Prod.ACC, Prod.CollateralCode, Prod.SLType,
	CASE WHEN Prod.LineOfCredit = 'Y' THEN 0
	     ELSE SC.RequestedAmount + IsNull(SC.InsuranceAmount1, 0) + IsNull(SC.InsuranceAmount2, 0)
	END AS Amount, NMR.Approval, SC.Created, SC.CreatedBy, SC.CreatedOn, Prod.ProductType,
	CASE WHEN Prod.LineOfCredit = 'Y' THEN SC.RequestedAmount
	     ELSE 0
	END AS CreditLimit, Prod.StartSuffix, Prod.StopSuffix, Prod.APR, Prod.CashAdvanceAPR, Prod.SkipCode, Prod.Coupons, Prod.Term, Prod.Method,
	Prod.Frequency, Prod.InsCode, Prod.DisclosureCode, Prod.ReviewDate, Prod.MaturityDate, Prod.Officer, Prod.CurrBranch, Prod.StatementOrder, Prod.MaturityDisp, 
	Prod.DividendDisp, Prod.LineofCredit, Prod.PaymentPercent, Prod.AllowPlastic1, Prod.AllowPlastic2, Prod.AllowPlastic3, Prod.AllowPlastic4, 
	Prod.CreateHost, Prod.HostCommand, Prod.ServiceClass, Prod.TaxCode,Prod.JointTaxCode, Prod.W8TaxCode, Prod.KTransferLink, Prod.LoanDiscounts, 
	Prod.MICRBegin, Prod.MICREnd, Prod.MICRFormat, Prod.PromptMICR, Prod.Purpose, Prod.FundingOrder, Prod.VRLIndex, Prod.VRLMargin, 
	Prod.VRLCode, Prod.VRLFreq, SC.LOSProductID, SC.LOSID, SC.LossFlag, SC.ClosedFlag, SC.ID AS ShoppingCartID, Prod.Action, 0
	FROM IMS.NewMemberShoppingCart SC INNER JOIN
		IMS.NewMemberRequest NMR ON SC.TrackingNum = NMR.TrackingNum INNER JOIN
		IMS.udt_AllSubAccounts Prod ON SC.ProductID = Prod.UniqueID AND ',' + RTrim(Prod.AccountTypes) + ',' LIKE '%,' + RTrim(NMR.AccountType) + ',%'
	WHERE SC.TrackingNum = @TrackingNum AND SC.Approved = 'Y' AND SC.ProductID NOT IN (SELECT SubAccountType FROM IMS.NewMemberSubAccount WHERE TrackingNum = @TrackingNum)
	ORDER BY ID
	
	--Delete products that require products that are no longer here
	/*DELETE NewMemberSubAccount FROM IMS.NewMemberSubAccount SA
	WHERE TrackingNum = @TrackingNum AND
		(SELECT NullIf(Requires, '') FROM IMS.udt_AllSubAccounts WHERE UniqueID = SA.SubAccountType) IS NOT NULL AND
		(SELECT Count(SA2.ID) FROM IMS.NewMemberSubAccount SA2 INNER JOIN
			(SELECT DISTINCT
			        SUBSTRING(l.List, v.Number+1, CHARINDEX(',', l.List, v.Number+1) -v.Number-1) AS Requires
			   FROM Master.dbo.spt_Values v
			  CROSS JOIN
			        (SELECT ',' + RTRIM(REPLACE(Requires, ', ', ',')) + ',' AS List
				FROM IMS.udt_AllSubAccounts
				WHERE UniqueID = SA.SubAccountType) l
			  WHERE v.Type = 'P'
			    AND v.Number BETWEEN 1 AND LEN(l.List)-1
			    AND SUBSTRING(l.List, v.Number, 1)=',') FN ON SA2.SubAccountType = FN.Requires
			WHERE TrackingNum = @TrackingNum AND SA2.SubAccountType <> SA.SubAccountType) = 0*/

	--Delete subaccounts that came from shopping cart items that are no longer approved
	DELETE FROM IMS.NewMemberSubAccount
	WHERE TrackingNum = @TrackingNum AND ((ID IN (SELECT SubAccountID
		FROM IMS.NewMemberShoppingCart
		WHERE TrackingNum = @TrackingNum AND SubAccountID IS NOT NULL AND
			Approved = 'N')) OR (ShoppingCartID IS NOT NULL AND 
		ShoppingCartID IN (SELECT ID
		FROM IMS.NewMemberShoppingCart
		WHERE TrackingNum = @TrackingNum AND Approved = 'N')))

	UPDATE IMS.NewMemberShoppingCart
	SET SubAccountID = NULL
	WHERE TrackingNum = @TrackingNum AND Approved = 'N'

	--Delete plastic cards for subaccounts that no longer exist
	DELETE FROM IMS.NewMemberPlasticCard
	WHERE TrackingNum = @TrackingNum AND Sequence IN (SELECT PlasticCardSequence
		FROM IMS.NewMemberSubAccountLink
		WHERE TrackingNum = @TrackingNum AND SubSequence NOT IN (SELECT Sequence
			FROM IMS.NewMemberSubAccount
			WHERE TrackingNum = @TrackingNum))

	DELETE FROM IMS.NewMemberSubAccountLink
	WHERE TrackingNum = @TrackingNum AND SubSequence NOT IN (SELECT Sequence
		FROM IMS.NewMemberSubAccount
		WHERE TrackingNum = @TrackingNum)

	--Delete flags for subaccounts that no longer exist
	DELETE FROM IMS.NewMemberFlag
	WHERE TrackingNum = @TrackingNum AND IsNull(SubAccountSequence, 0) > 0 AND
		SubAccountSequence NOT IN (SELECT Sequence
		FROM IMS.NewMemberSubAccount
		WHERE TrackingNum = @TrackingNum)

	--Delete joint owner links for subaccounts that no longer exist
	DELETE FROM IMS.NewMemberJointLink
	WHERE TrackingNum = @TrackingNum AND SubAccountSequence NOT IN (SELECT Sequence
		FROM IMS.NewMemberSubAccount
		WHERE TrackingNum = @TrackingNum)

	--Delete overdraft links for subaccount that no longer exist
	DELETE FROM IMS.NewMemberOverdraftLink
	WHERE TrackingNum = @TrackingNum AND ((TargetSubAccount > 0 AND
		TargetSubAccount NOT IN (SELECT Sequence
		FROM IMS.NewMemberSubAccount
		WHERE TrackingNum = @TrackingNum)) OR (SourceSubAccount > 0 AND
		SourceSubAccount NOT IN (SELECT Sequence
		FROM IMS.NewMemberSubAccount
		WHERE TrackingNum = @TrackingNum)))
END

--Synchronize IDs
UPDATE IMS.NewMemberSubAccount
SET ShoppingCartID = (SELECT ID FROM IMS.NewMemberShoppingCart
			WHERE TrackingNum = @TrackingNum AND SubAccountID = IMS.NewMemberSubAccount.ID)
WHERE TrackingNum = @TrackingNum AND (SELECT ID FROM IMS.NewMemberShoppingCart
			WHERE TrackingNum = @TrackingNum AND SubAccountID = IMS.NewMemberSubAccount.ID) IS NOT NULL

UPDATE IMS.NewMemberShoppingCart
SET SubAccountID = (SELECT ID FROM IMS.NewMemberSubAccount
			WHERE TrackingNum = @TrackingNum AND ShoppingCartID = IMS.NewMemberShoppingCart.ID)
WHERE TrackingNum = @TrackingNum AND (SELECT ID FROM IMS.NewMemberSubAccount
			WHERE TrackingNum = @TrackingNum AND ShoppingCartID = IMS.NewMemberShoppingCart.ID) IS NOT NULL
*/
GO
/****** Object:  StoredProcedure [IMS].[spFCCU_UnreconciledFunding_Select]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		Jonathan Eagar
-- Create date: 5/08/2009
-- Description:	Returns all unreconciled transactions
-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_UnreconciledFunding_Select
-- =============================================
CREATE PROCEDURE [IMS].[spFCCU_UnreconciledFunding_Select] 
	-- Add the parameters for the stored procedure here
	@AccountNumber bigint
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
    -- Insert statements for procedure here
     -- Insert statements for procedure here
    IF ISNULL(@AccountNumber, 0) = 0  
    BEGIN
		SELECT	FS.AccountNumber, 
				FS.FundingTransactionID, 
				FS.TrackingNum, 
				FS.GatewayPaymentID, 
				FS.GatewayPaymentStatus, 
				FS.FundingAccountID, 
				FS.FundingType, 
				FS.TargetSubAccountSeq, 
				FS.TargetSubAccountSuffix, 
				FS.TransferAmount, 
				FS.DateTimeCreated, 
				FS.DateTimeLastTransaction,
				FS.MemberName,
				FS.SourceBankName,
				FS.SourceBankRouting,
				FS.SourceAccountLast4,
				FS.SourceCardType
		FROM
		(
			SELECT	VF.AccountNumber, 
					VF.FundingTransactionID , 
					VF.TrackingNum, 
					VF.GatewayPaymentID, 
					PS.PaymentStatus as GatewayPaymentStatus, 
					VF.FundingAccountID, 
					VF.FundingType, 
					VF.TargetSubAccountSeq, 
					VF.TargetSubAccountSuffix, 
					VF.TransferAmount, 
					VF.DateTimeCreated, 
					VF.DateTimeLastTransaction,
					VF.MemberName,
					VF.SourceBankName,
					VF.SourceBankRouting,
					VF.SourceAccountLast4,
					VF.SourceCardType
			FROM
			(	
				(
					SELECT	F.AccountNumber, 
							FT.ID as FundingTransactionID, 
							FT.TrackingNum, 
							FT.GatewayPaymentID, 
							FB.ID as FundingAccountID, 
							FT.FundingType, 
							FT.TargetSubAccountSeq,	
							FT.TargetSubAccountSuffix, 
							FT.Amount as TransferAmount, 
							FT.DateTimeCreated, 
							FT.DateTimeLastTransaction,
							NMR.FName + ' ' + NMR.LName as MemberName,
							FB.BankName as SourceBankName,
							FB.RoutingNumber as SourceBankRouting,
							FB.AccountNumberLast4 as SourceAccountLast4,
							'' as SourceCardType
					FROM IMS.NewMemberRequest as NMR 
					INNER JOIN IMS.NMRFundingTransaction AS FT ON NMR.TrackingNum = FT.TrackingNum
					INNER JOIN IMS.NMRFundingBank AS FB ON FT.FundingBankID = FB.ID 
					INNER JOIN IMS.NMRFunding as F ON F.ID = FB.FundingID 
					WHERE FT.DateTimeReconciled IS NULL
				)
				UNION ALL
				(
					SELECT F.AccountNumber, 
					FT.ID as FundingTransactionID, 
					FT.TrackingNum, 
					FT.GatewayPaymentID, 
					FC.ID as FundingAccountID, 
					FT.FundingType, 
					FT.TargetSubAccountSeq,	
					FT.TargetSubAccountSuffix, 
					FT.Amount as TransferAmount, 
					FT.DateTimeCreated, 
					FT.DateTimeLastTransaction,
					NMR.FName + ' ' + NMR.LName as MemberName,
					'' as SourceBankName,
					'' as SourceBankRouting,
					FC.AccountNumberLast4 as SourceAccountLast4,
					FC.CardType as SourceCardType
					FROM IMS.NewMemberRequest as NMR 
					INNER JOIN IMS.NMRFundingTransaction AS FT ON NMR.TrackingNum = FT.TrackingNum
					INNER JOIN IMS.NMRFundingCard AS FC ON FT.FundingCardID = FC.ID 
					INNER JOIN IMS.NMRFunding as F ON F.ID = FC.FundingID 
					WHERE FT.DateTimeReconciled IS NULL
				)
			)AS VF LEFT OUTER JOIN IMS.USAePayPaymentStatus AS PS ON VF.GatewayPaymentID = PS.PaymentId
		) AS FS	ORDER BY DateTimeCreated
    END		
    ELSE
	BEGIN    
		SELECT	FS.AccountNumber, 
				FS.FundingTransactionID, 
				FS.TrackingNum, 
				FS.GatewayPaymentID, 
				FS.GatewayPaymentStatus, 
				FS.FundingAccountID, 
				FS.FundingType, 
				FS.TargetSubAccountSeq, 
				FS.TargetSubAccountSuffix, 
				FS.TransferAmount, 
				FS.DateTimeCreated, 
				FS.DateTimeLastTransaction,
				FS.MemberName,
				FS.SourceBankName,
				FS.SourceBankRouting,
				FS.SourceAccountLast4,
				FS.SourceCardType
		FROM
		(
			SELECT	VF.AccountNumber, 
					VF.FundingTransactionID, 
					VF.TrackingNum, 
					VF.GatewayPaymentID, 
					PS.PaymentStatus as GatewayPaymentStatus, 
					VF.FundingAccountID, 
					VF.FundingType, 
					VF.TargetSubAccountSeq, 
					VF.TargetSubAccountSuffix, 
					VF.TransferAmount, 
					VF.DateTimeCreated, 
					VF.DateTimeLastTransaction,
					VF.MemberName,
					VF.SourceBankName,
					VF.SourceBankRouting,
					VF.SourceAccountLast4,
					VF.SourceCardType
			FROM
			(	
				(
					SELECT	F.AccountNumber, 
							FT.ID as FundingTransactionID, 
							FT.TrackingNum, 
							FT.GatewayPaymentID, 
							FB.ID as FundingAccountID, 
							FT.FundingType, 
							FT.TargetSubAccountSeq,	
							FT.TargetSubAccountSuffix, 
							FT.Amount as TransferAmount, 
							FT.DateTimeCreated, 
							FT.DateTimeLastTransaction,
							NMR.FName + ' ' + NMR.LName as MemberName,
							FB.BankName as SourceBankName,
							FB.RoutingNumber as SourceBankRouting,
							FB.AccountNumberLast4 as SourceAccountLast4,
							'' as SourceCardType
					FROM IMS.NewMemberRequest as NMR 
					INNER JOIN IMS.NMRFundingTransaction AS FT ON NMR.TrackingNum = FT.TrackingNum
					INNER JOIN IMS.NMRFundingBank AS FB ON FT.FundingBankID = FB.ID 
					INNER JOIN IMS.NMRFunding as F ON F.ID = FB.FundingID 
					WHERE F.AccountNumber = @AccountNumber AND FT.DateTimeReconciled IS NULL
				)
				UNION ALL
				(
					SELECT	F.AccountNumber, 
							FT.ID as FundingTransactionID, 
							FT.TrackingNum, FT.GatewayPaymentID, 
							FC.ID as FundingAccountID, 
							FT.FundingType, 
							FT.TargetSubAccountSeq,	
							FT.TargetSubAccountSuffix, 
							FT.Amount as TransferAmount, 
							FT.DateTimeCreated, 
							FT.DateTimeLastTransaction,
							NMR.FName + ' ' + NMR.LName as MemberName,
							'' as SourceBankName,
							'' as SourceBankRouting,
							FC.AccountNumberLast4 as SourceAccountLast4,
							FC.CardType as SourceCardType
					FROM IMS.NewMemberRequest as NMR 
					INNER JOIN IMS.NMRFundingTransaction AS FT ON NMR.TrackingNum = FT.TrackingNum
					INNER JOIN IMS.NMRFundingCard AS FC ON FT.FundingCardID = FC.ID 
					INNER JOIN IMS.NMRFunding as F ON F.ID = FC.FundingID 
					WHERE F.AccountNumber = @AccountNumber AND FT.DateTimeReconciled IS NULL
				)
			)AS VF LEFT OUTER JOIN IMS.USAePayPaymentStatus AS PS ON VF.GatewayPaymentID = PS.PaymentId
		) AS FS	ORDER BY DateTimeCreated
    END		
END

GO
/****** Object:  StoredProcedure [IMS].[spFCCU_UnreconciledVerification_Select]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_UnreconciledVerification_Select
CREATE PROCEDURE [IMS].[spFCCU_UnreconciledVerification_Select]
	-- Add the parameters for the stored procedure here
	@AccountNumber bigint
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
    IF ISNULL(@AccountNumber, 0) = 0  
    BEGIN
		SELECT      NMRFunding.AccountNumber, NMRFundingBank.ID as FundingBankID, IMS.fnFCCU_GetUSAePayPaymentStatus(NMRFundingBank.GatewayPaymentID1) as GatewayPaymentStatus1, IMS.fnFCCU_GetUSAePayPaymentStatus(NMRFundingBank.GatewayPaymentID2) as GatewayPaymentStatus2, NMRFundingBank.TrackingNum, NMRFundingBank.AccountNumberLast4, 
						  NMRFundingBank.BankName, NMRFundingBank.AccountType, NMRFundingBank.Amount1, NMRFundingBank.Amount2, 
						  NMRFundingBank.PSIErrorMessage, NMRFundingBank.DateTimeCreated, NMRFundingBank.DateTimeExported, NMRFundingBank.DateTimeLastTransaction
		FROM         NMRFundingBank INNER JOIN
						  NMRFunding ON NMRFundingBank.FundingID = NMRFunding.ID
		WHERE     (NMRFundingBank.DateTimeVerificationReconciled IS NULL AND NMRFundingBank.VerificationStatus = 'V')
    END
    ELSE
	BEGIN    
		SELECT      NMRFunding.AccountNumber, NMRFundingBank.ID as FundingBankID, IMS.fnFCCU_GetUSAePayPaymentStatus(NMRFundingBank.GatewayPaymentID1) as GatewayPaymentStatus1, IMS.fnFCCU_GetUSAePayPaymentStatus(NMRFundingBank.GatewayPaymentID2) as GatewayPaymentStatus2, NMRFundingBank.TrackingNum, NMRFundingBank.AccountNumberLast4, 
						  NMRFundingBank.BankName, NMRFundingBank.AccountType, NMRFundingBank.Amount1, NMRFundingBank.Amount2, 
						  NMRFundingBank.PSIErrorMessage, NMRFundingBank.DateTimeCreated, NMRFundingBank.DateTimeExported, NMRFundingBank.DateTimeLastTransaction
		FROM         NMRFundingBank INNER JOIN
						  NMRFunding ON NMRFundingBank.FundingID = NMRFunding.ID
		WHERE     (NMRFunding.AccountNumber = @AccountNumber AND DateTimeVerificationReconciled IS NULL AND NMRFundingBank.VerificationStatus = 'V')       
    END	
END


GO
/****** Object:  StoredProcedure [IMS].[spGerber_D01Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spGerber_D01Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @docsubname CHAR(100)
DECLARE @newdocsub CHAR(100)
DECLARE @count INT
DECLARE @docindex INT

DECLARE curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT '' AS docsubname
	FROM NewMemberRequest AS NMR
	WHERE NMR.TrackingNum = @TrackingNum AND NMR.Processed = 999 AND NMR.Created = 'Y'

OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @newdocsub = 'Membership Application ' + @docsubname
IF @docsubname Is Null
BEGIN
	SET @newdocsub = 'Membership Application'
END
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count
      	IF @count = 1
	BEGIN
		Set @docindex = @docindex + 1
     		 INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END
      	FETCH NEXT FROM curs INTO @docsubname
	PRINT @docsubname
	IF @@FETCH_STATUS = 0
	BEGIN
		SET @newdocsub = (RTRIM(@newdocsub) + ', ' + RTRIM(@docsubname))
		PRINT @newdocsub
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex
	END
   END
CLOSE curs
DEALLOCATE curs
SELECT *, (SELECT DocName FROM udt_Doc WHERE DocNum = 1) AS ScanName FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
DELETE FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spGerber_D01Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO


CREATE PROCEDURE [IMS].[spGerber_D01Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @joseq INT
DECLARE @jo1seq INT
DECLARE @jo2seq INT
DECLARE @jo3seq INT
DECLARE @jo4seq INT
DECLARE @count INT

DECLARE curs2 CURSOR FOR
	SELECT  CONVERT(int, JO.Sequence)
	FROM NewMemberJointOwner AS JO
	INNER JOIN NewMemberJointLink AS JL ON JO.Sequence = JL.JointSequence AND JL.TrackingNum = @TrackingNum
	INNER JOIN NewMemberSubAccount AS SA ON JL.SubAccountSequence = SA.Sequence AND SA.TrackingNum = @TrackingNum
	WHERE JO.TrackingNum = @TrackingNum AND (JO.JointOwnerType IN ('JO', 'TR', 'CN', 'PR', 'RP', 'AS', 'CO', 'DB', 'CR', 'GN', 'GL','CU')) AND SA.ProductType IN ('CC','CCA','IRA','LOC','MMA','PSA','RSA','SDA')
	GROUP BY CONVERT(int, JO.Sequence)

OPEN curs2
FETCH NEXT FROM curs2 INTO @joseq
SET @count = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
      	IF (@count = 0 AND @DocIndex = 1) OR (@count = 4 AND @DocIndex = 2) OR (@count = 8 AND @DocIndex = 3)
		BEGIN
			Set @jo1seq = @joseq
		END
	IF (@count = 1 AND @DocIndex = 1) OR (@count = 5 AND @DocIndex = 2) OR (@count = 9 AND @DocIndex = 3)
		BEGIN
			Set @jo2seq = @joseq		
		END
	IF (@count = 2 AND @DocIndex = 1) OR (@count = 6 AND @DocIndex = 2) OR (@count = 10 AND @DocIndex = 3)
		BEGIN
			Set @jo3seq = @joseq		
		END
	IF (@count = 3 AND @DocIndex = 1) OR (@count = 7 AND @DocIndex = 2) OR (@count = 11 AND @DocIndex = 3)
		BEGIN
			Set @jo4seq = @joseq		
		END
      	FETCH NEXT FROM curs2 INTO @joseq
	SET @count = @count + 1
	PRINT @count
   END
CLOSE curs2
DEALLOCATE curs2
PRINT 'Start Select'
SELECT @DocIndex As DocIndex
	,  Extra.MemberNumber AS AcctNo
	, '' AS AcctName
	, Case when NMR.Department in ('1000','1010','6030') then 'X' else '' end AS Check_EmployeeOf
	, Case 
		when NMR.Department = '1000' then 'Northrop Grumman Corporation'
		when NMR.Department = '6030' then 'LA Metropolitan Transportation Authority (Metro)'
		when NMR.Department = '1010' then 'NGFCU'
		else '' end AS EmployeeOf
	,  NMR.Qualification1 AS EmployeeNo
	, Case when NMR.Department in ('MBR') then 'X' else '' end AS Check_FamilyMember
	, NMR.Qualification2 AS FamilyMemberName
	, NMR.Qualification3 AS Relationship
	, Case when NMR.Department in ('6047') then 'X' else '' end as Check_MemberOf
	,  Case 
		when NMR.Department = '6047' then 'Southern California Historical Aircraft Foundation (SCHAF)'
		else '' end AS MemberOf

	, CASE NMR.AccountClass WHEN 'P' THEN UPPER(RTRIM(RTRIM(NMR.FName) + ' '+ RTRIM(NMR.MInitial) + ' ' + RTRIM(NMR.LName) + ' ' + NMR.MECHTag)) ELSE UPPER(RTRIM(NMR.OrganizationName)) END AS PrimaryName
	, CASE NMR.AccountClass WHEN 'P' THEN '***-**-*' + RIGHT(NMR.SSN, 3) ELSE '**-****' + RIGHT(NMR.SSN, 3) END AS PrimarySSN
	--, CASE NMR.AccountClass WHEN 'P' THEN Left(NMR.SSN, 3) + '-' + LEFT(RIGHT(NMR.SSN, 6), 2) + '-' + RIGHT(NMR.SSN, 4) ELSE LEFT(NMR.SSN, 2) + '-' + RIGHT(NMR.SSN, 7) END AS PrimarySSN
	, CASE NMR.UseTodayForDOB WHEN 'Y' THEN CONVERT(char(10), NMR.CreatedOn, 101) ELSE CONVERT(char(10), NMR.DOB, 101) END AS PrimaryDOB
	, CASE NMR.AccountClass
		WHEN 'O' THEN RTRIM(RTRIM(Work.Address1) + CASE ISNULL(Work.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Work.Address2) END + CASE ISNULL(Work.Address3, '') WHEN '' THEN ' ' ELSE ', ' + RTRIM(Work.Address3) END)
		ELSE RTRIM(RTRIM(Home.Address1) + CASE ISNULL(Home.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Home.Address2) END + CASE ISNULL(Home.Address3, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Home.Address3) END)
	  END AS PrimaryHomeAddress
	, CASE NMR.AccountClass
		WHEN 'O' THEN Work.City
		ELSE Home.City
	  END AS PrimaryCity
	, CASE NMR.AccountClass
		WHEN 'O' THEN Work.State
		ELSE Home.State
	  END AS PrimaryState
	, CASE NMR.AccountClass
		WHEN 'O' THEN CASE LEN(Work.Zip) WHEN 9 THEN LEFT(Work.zip, 5) + '-' + Right(Work.Zip, 4) ELSE Work.Zip END
		ELSE CASE LEN(Home.Zip) WHEN 9 THEN LEFT(Home.zip, 5) + '-' + Right(Home.Zip, 4) ELSE Home.Zip END
	  END AS PrimaryZip
	, CASE Len(HOME.CellPhone) WHEN 9 THEN Home.CellPhoneAC + '-' + LEFT(Home.CellPhone, 3) + '-' + RIGHT(RTRIM(Home.CellPhone), 4) Else '' END AS PrimaryDPhone
	, Home.Areacode + '-' + LEFT(Home.Phone, 3) + '-' + RIGHT(RTRIM(Home.Phone), 4) AS PrimaryHPhone
	, '' AS PrimaryFPhone
	, RTRIM(NMR.EMail1) AS PrimaryEmail
	, CASE NMR.IDType WHEN 'D' THEN RTRIM(NMR.DriversLicenseNum) ELSE RTRIM(NMR.IDNumber) END AS PrimaryDLNum
	, NMR.DriversLicenseState AS PrimaryDLState
	, CASE WHEN NMR.Gender = 'M' THEN 'X' ELSE '' END AS Check_PrimaryGender_M
	, CASE WHEN NMR.Gender = 'F' THEN 'X' ELSE '' END AS Check_PrimaryGender_F
	, RTRIM(NMR.MaidenName) AS PrimaryMaidenPassword --+ ' / ' + RTRIM(NMR.Password)
	, CASE NMR.AccountClass WHEN 'P' THEN Work.EmployerName + ' Occupation: ' + Work.JobTitle ELSE '' END AS PrimaryEmployer
	, CASE NMR.AccountClass WHEN 'P' THEN RTRIM(Work.address1 + CASE Work.address2 WHEN '' THEN ''ELSE', ' END + Work.address2 + CASE Work.address3 WHEN '' THEN ''ELSE', ' END + Work.address3) ELSE '' END AS PrimaryEmployerAddress
	, CASE NMR.AccountClass WHEN 'P' THEN Work.City ELSE '' END AS PrimaryEmployerCity
	, CASE NMR.AccountClass WHEN 'P' THEN Work.State ELSE '' END AS PrimaryEmployerState
	, CASE NMR.AccountClass WHEN 'P' THEN CASE LEN(Work.Zip) WHEN 9 THEN LEFT(Work.zip, 5) + '-' + RIGHT(Work.Zip, 4) ELSE Work.Zip END ELSE '' END AS PrimaryEmployerZip

	, rtrim(JO1.FullName) AS JOName
	, '***-**-*' + RIGHT(JO1.SSN, 3) AS JOSSN
	, JO1.DOB AS JODOB
	, rtrim(JO1.Address) AS JOHomeAddress
	, JO1.City AS JOCity
	, JO1.State AS JOState
	, JO1.Zip AS JOZip
	, case when JO1.CPhoneFull = '   -   -    ' then '' else JO1.CPhoneFull end AS JODPhone
	, case when JO1.HPhoneFull = '   -   -    ' then '' else JO1.HPhoneFull end AS JOHPhone
	, '' AS JOFPhone
	, rTrim(JO1.Email) AS JOEmail
	, JO1.DriversLicenseNum AS JODLNum
	, CASE WHEN LEN(JO1.DriversLicenseNum) > 0 then JO1.DriversLicenseState else '' end AS JODLState
	, '' AS Check_JOGender_M
	, '' AS Check_JOGender_F
	, JO1.Relationship AS JORelationship
	, JO1.EmployerName AS JOEmployer
	, '' AS JOEmployerAddress
	, '' AS JOEmployerCity
	, '' AS JOEmployerState
	, '' AS JOEmployerZip

	, '' AS RSAAmount
	, '' AS SDAAmount
	, '' AS CheckAmount
	, CASE WHEN NMR.C24Access = 'Y' THEN 'X' ELSE '' END AS Check_Call24
	, '' AS Call24PIN

	, RTRIM(BE1.FullName) AS BE1Name
	, '***-**-*' + RIGHT(BE1.SSN, 3) AS BE1SSN
	, BE1.DOB AS BE1DOB
	, RTRIM(BE1.Relationship) AS BE1Relationship
	, RTRIM(BE1.Address) + CHAR(13) + CHAR(10) + RTRIM(BE1.CityStateZip) AS BE1Address
	, BE2.FullName AS BE2Name
	, '***-**-*' + RIGHT(BE2.SSN, 3) AS BE2SSN
	, BE2.DOB AS BE2DOB
	, RTRIM(BE2.Relationship) AS BE2Relationship
	, RTRIM(BE2.Address) + CHAR(13) + CHAR(10) + RTRIM(BE2.CityStateZip) AS BE2Address
	, CASE WHEN NMR.BackupWithholding <> 'Y' THEN 'X' ELSE '' END AS Check_BWH_N
	, CASE WHEN NMR.BackupWithholding = 'Y' THEN 'X' ELSE '' END AS Check_BWH_Y


FROM NewMemberRequest As NMR
	JOIN NewMemberRequestExtra As Extra on NMR.TrackingNum = Extra.TrackingNum
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN fnGerber_GetJOType(@TrackingNum, 'JO', '', '', '') AS JO1 ON NMR.TrackingNum = JO1.TrackingNum AND JO1.JointSequence = 1
	LEFT OUTER JOIN fnGerber_GetJOType(@TrackingNum, 'BE', '', '', '') AS BE1 ON NMR.TrackingNum = BE1.TrackingNum AND BE1.JointSequence = 1
	LEFT OUTER JOIN fnGerber_GetJOType(@TrackingNum, 'BE', '', '', '') AS BE2 ON NMR.TrackingNum = BE2.TrackingNum AND BE2.JointSequence = 2
WHERE NMR.TrackingNum = @TrackingNum
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spGerber_DG1Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [IMS].[spGerber_DG1Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

Return 1
GO
/****** Object:  StoredProcedure [IMS].[spGerber_DG1Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spGerber_DG1Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

Select 'Applications' AS GroupName From NewMemberRequest where trackingnum = @TrackingNum
GO
/****** Object:  StoredProcedure [IMS].[spGerber_DP1Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [IMS].[spGerber_DP1Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

Return 1
GO
/****** Object:  StoredProcedure [IMS].[spGerber_DP1Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spGerber_DP1Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

SELECT NMR.TrackingNum AS TrackingNumber
	, AltAddress.Address1 AS MailingAddress
	, NMR.CurrBranch As Branch
	, Branches.Description AS BranchName
	, CONVERT(char(10), GetDate(), 101) As TodayDate
	, DATENAME(MM, GetDate()) + RIGHT(CONVERT(char(12), GetDate(), 107), 9) As TodayDateFull
	, CONVERT(char(10), NMR.CreatedOn, 101) As CreatedOn
	, NMR.Account As Account
--	, CONVERT(char(2), Home.ResidenceYears, 101) + ' yrs  ' + CONVERT(char(2), Home.ResidenceMonths, 101) + ' mos' AS HowLong
	, NMR.FName, NMR.LName, NMR.MInitial
	, CASE NMR.AccountClass WHEN 'P' THEN UPPER(RTRIM(NMR.LName) + ', ' + RTRIM(RTRIM(NMR.FName) + ' ' + RTRIM(NMR.MInitial))) ELSE RTRIM(NMR.OrganizationName) END AS RevFullName
	, CASE NMR.AccountClass WHEN 'P' THEN UPPER(RTRIM(RTRIM(NMR.FName) + ' ' + RTRIM(NMR.LName) + ' ' + NMR.MECHTag)) ELSE UPPER(RTRIM(NMR.OrganizationName)) END AS FullName
	, CASE NMR.AccountClass WHEN 'P' THEN 'Dear ' + RTRIM(RTRIM(NMR.FName) + ' ' + RTRIM(NMR.LName) + ' ' + NMR.MECHTag) + ':' ELSE 'Dear ' + RTRIM(NMR.OrganizationName) + ':' END AS DearName
	, Home.Areacode + '-' + LEFT(Home.Phone, 3) + '-' + RIGHT(RTRIM(Home.Phone), 4) AS HPhoneFull
	, Home.CellPhoneAC + '-' + LEFT(Home.CellPhone, 3) + '-' + RIGHT(RTRIM(Home.CellPhone), 4) AS CPhoneFull
	, CASE NMR.UseTodayForDOB WHEN 'Y' THEN CONVERT(char(10), NMR.CreatedOn, 101) ELSE CONVERT(char(10), NMR.DOB, 101) END AS DOB
	, CASE NMR.AccountClass WHEN 'P' THEN Left(NMR.SSN, 3) + '-' + LEFT(RIGHT(NMR.SSN, 6), 2) + '-' + RIGHT(NMR.SSN, 4) ELSE LEFT(NMR.SSN, 2) + '-' + RIGHT(NMR.SSN, 7) END AS SSN
	, RTRIM(NMR.DriversLicenseNum) + '/' + NMR.DriversLicenseState AS DL
	, CASE WHEN NMR.IDType = 'D' AND NMR.DriversLicenseState <> '' AND NMR.DriversLicenseNum <> '' THEN 'Drivers License' ELSE NMR.IDSource END AS IDType
	, CASE NMR.IDType WHEN 'D' THEN RTRIM(NMR.DriversLicenseNum) ELSE RTRIM(NMR.IDNumber) END AS ID
	, CONVERT(char(10), NMR.IDIssueDate, 101) AS IDIssueDate
	, CONVERT(char(10), NMR.IDExpirationDate, 101) AS IDExpDate
	, NMR.DriversLicenseState AS IDState
	, NMR.MaidenName AS MaidenName
	, NMR.Password AS Password
	, NMR.CreatedBy AS Seller
	, NMR.Department AS Department
	, CASE WHEN NMR.Created = 'F' Or NMR.Created = 'H' Or NMR.Created = 'I' THEN '' ELSE 'X' END AS YesNewAccount
	, CASE WHEN NMR.Created = 'F' Or NMR.Created = 'H' Or NMR.Created = 'I' THEN 'X' END AS YesChangeAccount
--	, CASE WHEN NMR.Created = 'F' Or NMR.Created = 'H' Or NMR.Created = 'I' THEN NMR.Account END AS ChangeAccount
	, CASE NMR.AccountClass
		WHEN 'O' THEN RTRIM(RTRIM(Work.Address1) + CASE ISNULL(Work.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Work.Address2) END + CASE ISNULL(Work.Address3, '') WHEN '' THEN ' ' ELSE ', ' + RTRIM(Work.Address3) END)
		ELSE RTRIM(RTRIM(Home.Address1) + CASE ISNULL(Home.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Home.Address2) END + CASE ISNULL(Home.Address3, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Home.Address3) END)
	  END AS Address
	, CASE NMR.AccountClass
		WHEN 'O' THEN RTRIM(RTRIM(Work.Address1) + CASE ISNULL(Work.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Work.Address2) END + CASE ISNULL(Work.Address3, '') WHEN '' THEN ' ' ELSE ', ' + RTRIM(Work.Address3) END) + ', ' + RTRIM(Work.City) + ', ' + Work.State + ' ' + CASE LEN(Work.Zip) WHEN 9 THEN LEFT(Work.Zip, 5) + '-' + Right(Work.Zip, 4) ELSE Work.Zip END
		ELSE RTRIM(RTRIM(Home.Address1) + CASE ISNULL(Home.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Home.Address2) END + CASE ISNULL(Home.Address3, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Home.Address3) END) + ', ' + RTRIM(Home.City) + ', ' + Home.State + ' ' + CASE LEN(Home.Zip) WHEN 9 THEN LEFT(Home.Zip, 5) + '-' + Right(Home.Zip, 4) ELSE Home.Zip END
	  END AS FullAddress
	, CASE NMR.AccountClass
		WHEN 'O' THEN RTRIM(Work.city) + ', ' + Work.state + ' ' + CASE LEN(Work.Zip) WHEN 9 THEN LEFT(Work.zip, 5) + '-' + Right(Work.Zip, 4) ELSE Work.Zip END
		ELSE RTRIM(Home.city) + ', ' + Home.state + ' ' + CASE LEN(Home.Zip) WHEN 9 THEN LEFT(Home.zip, 5) + '-' + Right(Home.Zip, 4) ELSE Home.Zip END
	  END AS CityStateZip
	, CASE NMR.AccountClass
		WHEN 'O' THEN Work.City
		ELSE Home.City
	  END AS City
	, CASE NMR.AccountClass
		WHEN 'O' THEN Work.State
		ELSE Home.State
	  END AS State
	, CASE NMR.AccountClass
		WHEN 'O' THEN CASE LEN(Work.Zip) WHEN 9 THEN LEFT(Work.zip, 5) + '-' + Right(Work.Zip, 4) ELSE Work.Zip END
		ELSE CASE LEN(Home.Zip) WHEN 9 THEN LEFT(Home.zip, 5) + '-' + Right(Home.Zip, 4) ELSE Home.Zip END
	  END AS Zip		
	, RTRIM(NMR.Email1) AS Email
	, CASE NMR.AccountClass
		WHEN 'O' THEN Work.AreaCode
		ELSE Home.AreaCode
	  END AS AC
	, CASE NMR.AccountClass
		WHEN 'O' THEN LEFT(Work.Phone, 3) + '-' + RIGHT(RTRIM(Work.Phone), 4)
		ELSE LEFT(Home.Phone, 3) + '-' + RIGHT(RTRIM(Home.Phone), 4)
	  END AS Phone
	, CASE NMR.AccountClass WHEN 'P' THEN Work.EmployerName ELSE '' END AS WorkName
	, CASE NMR.AccountClass WHEN 'P' THEN Work.EmployerName ELSE '' END AS Employer
	, CASE NMR.AccountClass WHEN 'P' THEN RTRIM(Work.address1 + CASE Work.address2 WHEN '' THEN ''ELSE', ' END + Work.address2 + CASE Work.address3 WHEN '' THEN ''ELSE', ' END + Work.address3) ELSE '' END AS WorkAddress
	, CASE NMR.AccountClass WHEN 'P' THEN Work.City ELSE '' END AS WorkCity
	, CASE NMR.AccountClass WHEN 'P' THEN Work.State ELSE '' END AS WorkState
	, CASE NMR.AccountClass WHEN 'P' THEN CASE LEN(Work.Zip) WHEN 9 THEN LEFT(Work.zip, 5) + '-' + RIGHT(Work.Zip, 4) ELSE Work.Zip END ELSE '' END AS WorkZip
	, Work.AreaCode AS WorkAC, LEFT(Work.Phone, 3) + '-' + RIGHT(RTRIM(Work.Phone), 4)  AS WorkPhone
	, Work.AreaCode + '-' + LEFT(Work.Phone, 3) + '-' + RIGHT(RTRIM(Work.Phone), 4)  AS WPhoneFull
	, Work.JobTitle AS Position
	, Work.JobTitle AS Occupation
	, Work.ProfessionYears As WorkNumYears
	,  RTRIM(Work.EmployerName) + ' ' + RTRIM(Work.address1 + CASE Work.address2 WHEN '' THEN ''ELSE', ' END + Work.address2 + CASE Work.address3 WHEN '' THEN ''ELSE', ' END + Work.address3) + ', ' + RTRIM(Work.City) + ', ' + RTRIM(Work.State) + ' ' + CASE LEN(Work.Zip) WHEN 9 THEN LEFT(Work.zip, 5) + '-' + Right(Work.Zip, 4) ELSE Work.Zip END AS WorkNameAddress
	, Work.HireDate
	,   CASE Work.IncomeFrequency
	     	WHEN 'W'  THEN 'Week'
		WHEN 'B' THEN 'Bi-Week'
		WHEN 'M' THEN 'Month'
		WHEN 'S' THEN 'Semi-Month'
		WHEN 'Y' THEN 'Year'
	      END AS IncomeFrequency
	,   CASE Work.IncomeFrequency
	     	WHEN 'W'  THEN (Work.GrossIncome * 52)/100
		WHEN 'B' THEN (Work.GrossIncome * 26)/100
		WHEN 'M' THEN (Work.GrossIncome * 12)/100
		WHEN 'S' THEN (Work.GrossIncome * 24)/100
		WHEN 'Y' THEN (Work.GrossIncome)/100
	      END AS GrossIncome
	, Home.ResidenceYears AS NumYears
	, CASE NMR.AccountClass
		WHEN 'O' THEN 'Yes'
		ELSE CASE WHEN NMR.Citizenship = 'US' Or NMR.Citizenship = 'RA' THEN 'Yes' END
	  END AS YesNoUSCitizen
	, CASE NMR.AccountClass
		WHEN 'O' THEN 'X'
		ELSE CASE WHEN NMR.Citizenship = 'US' Or NMR.Citizenship = 'RA' THEN 'X' END
	  END AS YesUSCitizen
	, CASE NMR.AccountClass
		WHEN 'O' THEN ''
		ELSE CASE WHEN NMR.Citizenship != 'US' And NMR.Citizenship != 'RA' THEN 'X' END
	  END AS NoUSCitizen
	, 'X' AS YesEligible00
	, CASE WHEN NMR.Qualification1 = 'Household' THEN 'X' END AS YesEligible01
	, CASE WHEN NMR.Qualification1 = 'Relative' OR NMR.Qualification1 = 'Household' THEN NMR.Qualification2 END AS MemberName
	, CASE WHEN NMR.Qualification1 = 'Relative' THEN NMR.Relationship END AS Relationship
	, CASE WHEN NMR.Qualification1 = 'Location' THEN 'X' END AS YesEligible10
	, CASE WHEN NMR.Qualification1 = 'Location' AND NMR.Qualification2 = 'BCOUNTY' THEN 'X' END AS YesEligible11
	, CASE WHEN NMR.Qualification1 = 'Location' AND NMR.Qualification2 = 'CLARENDON' THEN 'X' END AS YesEligible12
	, CASE WHEN NMR.Qualification1 = 'Location' AND NMR.Qualification2 = 'ORANGE' THEN 'X' END AS YesEligible13
	, CASE WHEN NMR.Qualification1 = 'Location' AND NMR.Qualification2 = 'CALHOUN' THEN 'X' END AS YesEligible14
	, CASE WHEN NMR.Qualification1 = 'Location' AND NMR.Qualification2 = 'DCOUNTY' THEN 'X' END AS YesEligible15
	, CASE WHEN NMR.Qualification1 = 'Location' AND NMR.Qualification2 = 'UNDER' THEN 'X' END AS YesEligible16
	, CASE WHEN NMR.Qualification1 = 'Location' AND NMR.Qualification2 = 'CCOUNTY' THEN 'X' END AS YesEligible17
	, CASE WHEN NMR.Qualification1 = 'Location' AND NMR.Qualification2 = 'GEO COMM' THEN 'X' END AS YesEligible18
	, RTRIM(NMR.LName) + '/' + RTRIM(RTRIM(NMR.FName) + ' ' + NMR.MInitial) AS SlashName
	, '(' + RTRIM(LTRIM(CAST(NMR.CurrBranch AS VARCHAR(2)))) + ' - ' + RTRIM(Branches.[Description]) + ')' AS SellerBranch
	, 'SOUTH CAROLINA FEDERAL CREDIT UNION' AS HCCUName
	, 'P.O. BOX 190012' AS HCCUAddress
	, 'NORTH CHARLESTON, SC  29419-9012' AS HCCUCityStateZip
	, '(800)845-0432' AS HCCUPhone
FROM NewMemberRequest As NMR
	--INNER JOIN udt_AccountTypes AS AType On NMR.AccountType = AType.TypeCode
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN NewMemberAddress As AltAddress On NMR.TrackingNum = AltAddress.TrackingNum
	LEFT OUTER JOIN Branches On NMR.CurrBranch = Branches.BranchCode
	LEFT OUTER JOIN Departments ON NMR.Department = Departments.Department
WHERE NMR.TrackingNum = @TrackingNum
GO
/****** Object:  StoredProcedure [IMS].[spGerber_Eligibility_Select]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_Eligibility_Select
CREATE PROCEDURE [IMS].[spGerber_Eligibility_Select]
	@ZipCode varchar(5),
	@CensusTract varchar(15)
AS

IF IsNull(@CensusTract, '') = '' AND IsNull(@ZipCode, '') <> ''
BEGIN
	SELECT Department
	FROM udt_EligibilityByZip
	WHERE IsNull(ZipCode, '') = @ZipCode
END

IF IsNull(@CensusTract, '') <> '' AND IsNull(@ZipCode, '') = ''
BEGIN
	SELECT Department
	FROM udt_EligibilityByZip
	WHERE IsNull(CensusTract, '') = @CensusTract
END

IF IsNull(@CensusTract, '') <> '' AND IsNull(@ZipCode, '') <> ''
BEGIN
	SELECT Department
	FROM udt_EligibilityByZip
	WHERE (IsNull(ZipCode, '') = @ZipCode OR IsNull(ZipCode, '') = '') AND IsNull(CensusTract, '') = @CensusTract
END

IF IsNull(@CensusTract, '') = '' AND IsNull(@ZipCode, '') = ''
BEGIN
	SELECT *
	FROM udt_EligibilityByZip
END
GO
/****** Object:  StoredProcedure [IMS].[spGerber_FedReservePendingTransaction_Select]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Jonathan Eagar
-- Create date: 8/25/2011
-- Description:	Returns all FedReserve Pending Transactions
-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_FedReservePendingTransaction_Select
-- =============================================
CREATE PROCEDURE [IMS].[spGerber_FedReservePendingTransaction_Select] 
	-- Add the parameters for the stored procedure here
	@NMRAccountNumber bigint
AS
BEGIN	
	SET @NMRAccountNumber = ISNULL(@NMRAccountNumber, 0)
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	-- Insert statements for procedure here
	
	DECLARE @TransactionSummary TABLE
	(		
		FundingBankID INT,
		TransferAmountTotal DECIMAL(18,2)		
	)
		
	IF @NMRAccountNumber = 0  
	BEGIN
	
	INSERT INTO @TransactionSummary(FundingBankID, TransferAmountTotal)	
	SELECT
		   FB.ID as FundingBankID,			  
		   SUM(FT.Amount) as TransferAmountTotal			   
	FROM IMS.NMRFundingBank FB INNER JOIN IMS.NMRFundingTransaction FT ON FB.ID = FT.FundingBankID						
	WHERE FT.DateTimeLastTransaction IS NULL AND FT.FundingType = 'B'
	GROUP BY FB.ID	
	
	SELECT  FRPT.* FROM
	( 
		(
		SELECT F.ID as FundingID,
			   F.AccountNumber as NMRAccountNumber,
			   FB.TrackingNum as NMRTrackingNum,
			   RTRIM(LTRIM(NMR.LName)) + ', ' + RTRIM(LTRIM(NMR.FName)) as NMRMemberName,
			   FB.ID as FundingBankID,
			   0 as FundingTransactionID,
			   FB.RoutingNumber as FundingBankRouting,
			   FB.AccountNumberEncrypted as FundingBankAccountNumberEncrypted,
			   FB.AccountNumberLast4 as FundingBankAccountNumberLast4,
			   FB.BankName as FundingBankName,
			   FB.AccountType as FundingBankAccountType,
			   FB.Amount1 as VerificationAmount1,
			   FB.Amount2 as VerificationAmount2,
			   0 as TransferAmount,
			   0 as TransferAmountTotal,			   	
			   0 as TargetSubAccountSuffix,
			   0 as TargetSubAccountSeq,
			   FB.DateTimeCreated as DateTimeCreated
		FROM IMS.NMRFunding F INNER JOIN IMS.NMRFundingBank FB ON F.ID = FB.FundingID
								INNER JOIN IMS.NewMemberRequest NMR ON FB.TrackingNum = NMR.TrackingNum
		WHERE FB.VerificationStatus = 'P'	
		)
		UNION ALL
		(	
		SELECT F.ID as FundingID,
			   F.AccountNumber as NMRAccountNumber,
			   FB.TrackingNum as NMRTrackingNum,			   
			    RTRIM(LTRIM(NMR.LName)) + ', ' + RTRIM(LTRIM(NMR.FName)) as NMRMemberName,
			   FB.ID as FundingBankID,
			   FT.ID as FundingTransactionID,
			   FB.RoutingNumber as FundingBankRouting,
			   FB.AccountNumberEncrypted as FundingBankAccountNumberEncrypted,
			   FB.AccountNumberLast4 as FundingBankAccountNumberLast4,
			   FB.BankName as FundingBankName,
			   FB.AccountType as FundingBankAccountType,
				0 as VerificationAmount1,
				0 as VerificationAmount2,
			   FT.Amount as TransferAmount,
			   TS.TransferAmountTotal as TransferAmountTotal,			
			   FT.TargetSubAccountSuffix as TargetSubAccountSuffix,
			   FT.TargetSubAccountSeq as TargetSubAccountSeq,
			   FT.DateTimeCreated as DateTimeCreated 
		FROM IMS.NMRFunding F INNER JOIN IMS.NMRFundingBank FB ON F.ID = FB.FundingID
								INNER JOIN IMS.NMRFundingTransaction FT ON FB.ID = FT.FundingBankID
									INNER JOIN IMS.NewMemberRequest NMR ON FB.TrackingNum = NMR.TrackingNum
										INNER JOIN @TransactionSummary TS ON FB.ID = TS.FundingBankID
		WHERE FT.DateTimeLastTransaction IS NULL AND FT.FundingType = 'B'
		)
	)  FRPT ORDER BY FRPT.NMRTrackingNum, FRPT.FundingID, FRPT.FundingBankID, FRPT.FundingTransactionID	
	END	
	ELSE
	BEGIN
	
	INSERT INTO @TransactionSummary(FundingBankID, TransferAmountTotal)	
	SELECT	   		   
		   FB.ID as FundingBankID,			  
		   SUM(FT.Amount) as TransferAmountTotal			   
	FROM IMS.NMRFunding F INNER JOIN IMS.NMRFundingBank FB ON F.ID = FB.FundingID 
							INNER JOIN IMS.NMRFundingTransaction FT ON FB.ID = FT.FundingBankID						
	WHERE FT.DateTimeLastTransaction IS NULL AND 
		FT.FundingType = 'B' AND
		F.AccountNumber = @NMRAccountNumber	 
	GROUP BY FB.ID	
	  
	SELECT  FRPT.* FROM
	(   
		(
		SELECT F.ID as FundingID,
			   F.AccountNumber as NMRAccountNumber,
			   FB.TrackingNum as NMRTrackingNum,
			   RTRIM(LTRIM(NMR.LName)) + ', ' + RTRIM(LTRIM(NMR.FName)) as NMRMemberName,
			   FB.ID as FundingBankID,
			   0 as FundingTransactionID,
			   FB.RoutingNumber as FundingBankRouting,
			   FB.AccountNumberEncrypted as FundingBankAccountNumberEncrypted,
			   FB.AccountNumberLast4 as FundingBankAccountNumberLast4,
			   FB.BankName as FundingBankName,
			   FB.AccountType as FundingBankAccountType,
			   FB.Amount1 as VerificationAmount1,
			   FB.Amount2 as VerificationAmount2,
			   0 as TransferAmount,
			   0 as TransferAmountTotal,
			   0 as TargetSubAccountSuffix,
			   0 as TargetSubAccountSeq,
			   FB.DateTimeCreated as DateTimeCreated
		FROM IMS.NMRFunding F INNER JOIN IMS.NMRFundingBank FB ON F.ID = FB.FundingID
								INNER JOIN IMS.NewMemberRequest NMR ON FB.TrackingNum = NMR.TrackingNum
		WHERE	FB.VerificationStatus = 'P' AND 
				F.AccountNumber = @NMRAccountNumber	
		)	
		UNION ALL
		(		
		SELECT F.ID as FundingID,
			   F.AccountNumber as NMRAccountNumber,
			   FB.TrackingNum as NMRTrackingNum,
			   RTRIM(LTRIM(NMR.LName)) + ', ' + RTRIM(LTRIM(NMR.FName)) as NMRMemberName,
			   FB.ID as FundingBankID,
			   FT.ID as FundingTransactionID,
			   FB.RoutingNumber as FundingBankRouting,
			   FB.AccountNumberEncrypted as FundingBankAccountNumberEncrypted,
			   FB.AccountNumberLast4 as FundingBankAccountNumberLast4,
			   FB.BankName as FundingBankName,
			   FB.AccountType as FundingBankAccountType,
				0 as VerificationAmount1,
				0 as VerificationAmount2,
			   FT.Amount as TransferAmount,
			   TS.TransferAmountTotal as TransferAmountTotal,
			   FT.TargetSubAccountSuffix as TargetSubAccountSuffix,
			   FT.TargetSubAccountSeq as TargetSubAccountSeq,
			   FT.DateTimeCreated as DateTimeCreated
		FROM IMS.NMRFunding F 
				INNER JOIN IMS.NMRFundingBank FB ON F.ID = FB.FundingID
					INNER JOIN IMS.NMRFundingTransaction FT ON FB.ID = FT.FundingBankID
						INNER JOIN IMS.NewMemberRequest NMR ON FB.TrackingNum = NMR.TrackingNum
							INNER JOIN @TransactionSummary TS ON FB.ID = TS.FundingBankID
		WHERE	FT.DateTimeLastTransaction IS NULL AND 
				FT.FundingType = 'B' AND 
				F.AccountNumber = @NMRAccountNumber
		)
	)  FRPT	ORDER BY FRPT.NMRTrackingNum, FRPT.FundingID, FRPT.FundingBankID, FRPT.FundingTransactionID
	END		
END

GO
/****** Object:  StoredProcedure [IMS].[spGerber_ILAApplicationSearch_Select]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_ILAApplicationSearch_Select
CREATE Procedure [IMS].[spGerber_ILAApplicationSearch_Select]
	@TrackingNum varchar(9),
	@SSN varchar(9),
	@Account varchar(9),
	@AppNumber varchar(9),
	@ApplyDate varchar(10)
AS

DECLARE @SQL varchar(1000)
SET @SQL = 'SELECT AI.*, A.UserSessionXML FROM ILA_ApplicationInfo AI INNER JOIN ILA_Application A ON A.TrackingNum = AI.TrackingNum INNER JOIN ILA_ProductDetail P ON AI.TrackingNum = P.TrackingNum WHERE 1=1'
IF @TrackingNum <> '*'
BEGIN
	SET @SQL = @SQL + ' AND AI.TrackingNum = ''' + @TrackingNum + ''''
END
IF @SSN <> '*'
BEGIN
	SET @SQL = @SQL + ' AND AI.PrimarySSN = ''' + @SSN + ''''
END
IF @Account <> '*'
BEGIN
	SET @SQL = @SQL + ' AND AI.Account = ''' + @Account + ''''
END
IF @AppNumber <> '*'
BEGIN
	SET @SQL = @SQL + ' AND AI.AppNumber = ''' + @AppNumber + ''''
END
IF @ApplyDate <> '*'
BEGIN
	SET @SQL = @SQL + ' AND AI.ApplyDate >= ''' + @ApplyDate + ''''
END

EXEC(@SQL)
GO
/****** Object:  StoredProcedure [IMS].[spGerber_OAOReport_ApplicationStatusReport]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_OAOReport_ApplicationStatusReport
CREATE Procedure [IMS].[spGerber_OAOReport_ApplicationStatusReport]
	@StartDate datetime,
	@StopDate datetime
AS

SELECT
	NMR.TrackingNum
	, UPPER(RTRIM(LEFT(NMR.FName, 1)) + ' ' + RTRIM(NMR.LName)) AS MemberName
	, NMR.ApplyDate AS [Date_Time]
	, NMR.CurrBranch AS Branch
	, CASE
		WHEN NMR.Processed = '1' THEN 'In-Process'
		WHEN NMR.Processed = '999' THEN 'Created'
		ELSE 'Denied'
		END AS Status
	, CASE
		WHEN (SELECT COUNT(*) FROM NMRFundingBank AS NMRFB WHERE NMRFB.TrackingNum = NMR.TrackingNum AND NMRFB.VerificationStatus <> 'X' AND NMRFB.VerificationStatus <> 'E') > 0 THEN 'ACH'
		WHEN (SELECT COUNT(*) FROM NMRFundingCard AS NMRFC WHERE NMRFC.TrackingNum = NMR.TrackingNum) > 0 THEN 'Credit Card'
		WHEN (SELECT COUNT(*) FROM NMRFundingTransaction AS NMRFT WHERE NMRFT.TrackingNum = NMR.TrackingNum AND NMRFT.SourceSubAccountSeq <> '') > 0 THEN 'Transfer'
		WHEN (SELECT FundingType FROM NMRFundingTransaction AS NMRFT WHERE NMRFT.TrackingNum = NMR.TrackingNum) = NULL THEN 'Skipped'
		ELSE 'None'
		END AS PaymentMethod
	, CONVERT(VARCHAR(10), (SELECT TOP 1 DateTimeLastTransaction FROM NMRFundingTransaction AS NMRFT WHERE NMRFT.TrackingNum = NMR.TrackingNum), 101) AS FundingDate
	, (SELECT SUM(Amount) FROM NMRFundingTransaction AS NMRFT WHERE NMRFT.TrackingNum = NMR.TrackingNum GROUP BY NMRFT.TrackingNum) AS InitialAmountFunded
	, NMR.Account AS AccountNumber
FROM IMS.NewMemberRequest NMR
WHERE
	NMR.Processed > 0 
	AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> ''
	AND (NMR.ApplyDate >= @StartDate AND NMR.ApplyDate <= @StopDate)
GO
/****** Object:  StoredProcedure [IMS].[spGerber_OAOReport_FundingDetailReport]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_OAOReport_FundingDetailReport
CREATE Procedure [IMS].[spGerber_OAOReport_FundingDetailReport]
	@StartDate datetime,
	@StopDate datetime
AS

SELECT Bank, Card, Existing, Skipped FROM
(
	(SELECT COUNT(DISTINCT NMRFT.TrackingNum) AS Bank
	FROM IMS.NMRFundingTransaction NMRFT
	LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	INNER JOIN IMS.NMRFundingBank NMRFB ON NMRFB.ID = NMRFT.FundingBankID
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND NMRFT.FundingBankID <> '' AND NMR.Processed = 999 AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate) AND (NMRFB.VerificationStatus <> 'E') AND (NMRFB.VerificationStatus <> 'X')) a
		FULL OUTER JOIN
	(SELECT COUNT(DISTINCT NMRFT.TrackingNum) AS Card
	FROM IMS.NMRFundingTransaction NMRFT
	LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND NMRFT.FundingCardID <> '' AND NMR.Processed = 999 AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate)) b ON 1=1
		FULL OUTER JOIN
	(SELECT COUNT(DISTINCT NMRFT.TrackingNum) AS Existing
	FROM IMS.NMRFundingTransaction NMRFT
	LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND NMRFT.SourceSubAccountSeq <> '' AND NMR.Processed = 999 AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate)) c ON 1=1
		FULL OUTER JOIN
	(SELECT COUNT(DISTINCT NMR.TrackingNum) AS Skipped
	FROM IMS.NMRFundingTransaction NMRFT
	FULL OUTER JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND (NMR.Processed = 999 AND ISNULL(NMRFT.TrackingNum, 0) = 0) AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate)) d ON 1=1
)

UNION ALL

SELECT Bank, Card, Existing, Skipped FROM
(
	(SELECT COUNT(DISTINCT NMRFT.TrackingNum) AS Bank
	FROM IMS.NMRFundingTransaction NMRFT
	LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	INNER JOIN IMS.NMRFundingBank NMRFB ON NMRFB.ID = NMRFT.FundingBankID
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND NMRFT.FundingBankID <> '' AND NMR.Processed = 998 AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate) AND (NMRFB.VerificationStatus <> 'E') AND (NMRFB.VerificationStatus <> 'X')) a
		FULL OUTER JOIN
	(SELECT COUNT(DISTINCT NMRFT.TrackingNum) AS Card
	FROM IMS.NMRFundingTransaction NMRFT
	LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND NMRFT.FundingCardID <> '' AND NMR.Processed = 998 AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate)) b ON 1=1
		FULL OUTER JOIN
	(SELECT COUNT(DISTINCT NMRFT.TrackingNum) AS Existing
	FROM IMS.NMRFundingTransaction NMRFT
	LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND NMRFT.SourceSubAccountSeq <> '' AND NMR.Processed = 998 AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate)) c ON 1=1
		FULL OUTER JOIN
	(SELECT COUNT(DISTINCT NMR.TrackingNum) AS Skipped
	FROM IMS.NMRFundingTransaction NMRFT
	FULL OUTER JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND (NMR.Processed = 998 AND ISNULL(NMRFT.TrackingNum, 0) = 0) AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate)) d ON 1=1
)
GO
/****** Object:  StoredProcedure [IMS].[spGerber_ReviewQueue_SelectAll]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Jon Eagar
-- Create date: 7/08/2011
-- Description:	Lists the active NMR records for the Queue Review
-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_ReviewQueue_SelectAll
-- =============================================
CREATE PROCEDURE [IMS].[spGerber_ReviewQueue_SelectAll] 
	-- Add the parameters for the stored procedure here
	@StartDate DATETIME = NULL,
	@EndDate DATETIME = NULL,
	@StatusCode VARCHAR(2) = NULL
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
 
	DECLARE @Hierarchy INT
	DECLARE @StatusID INT

	IF @StartDate IS NOT NULL AND @StartDate <> ''
	BEGIN
		SET @StartDate = CONVERT(DATETIME,(CONVERT(VARCHAR(10), @StartDate, 102)))  --Set Time to beginning of Day
		SET @EndDate = CAST( CONVERT(CHAR(10), @EndDate, 101) + ' 11:59 PM' AS DATETIME) --Set Time to end of day
	END
	
	SET @StatusCode = NULLIF(@StatusCode,'')

	DECLARE @ReviewQueue TABLE
	(
		ID INT IDENTITY(1,1) PRIMARY KEY CLUSTERED,
		TrackingNum INT,	
		Name VARCHAR(90),
		EmployerName VARCHAR(50),
		Account VARCHAR(50),
		StatusName VARCHAR(250),
		StatusID INT,
		FundingComplete CHAR(20), 
		ApplyDate DATETIME,
		Teller VARCHAR(20),
		LastPage VARCHAR(50),
		TNExpireDate DATETIME
	)

	IF (@StatusCode IS NOT NULL)
	BEGIN
		SELECT @Hierarchy=RQC.Hierarchy, @StatusID=RQC.ID FROM IMS.ReviewQueueConfig RQC WHERE RQC.StatusCode = @StatusCode
	END

	IF (@Hierarchy > 0 OR @StatusCode IS NULL)
	BEGIN
		--Existing Loss
		INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, TNExpireDate)
		SELECT	DISTINCT NMR.TrackingNum, 
				LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
				--RTRIM(LTRIM(NMRW.EmployerName)) AS EmployerName,
				'Chks: ' + CASE WHEN (SELECT COUNT(CS.TrackingNum) FROM NewMemberCheckOrderSimple CS WHERE CS.TrackingNum = NMR.TrackingNum) > 0 THEN 'YES' ELSE 'NO' END
				+ '<br>Card: '
				+ REPLACE(REPLACE(COALESCE((SELECT TOP 1 [TypeCode] FROM IMS.NewMemberPlasticCard PC WHERE PC.TrackingNum = NMR.TrackingNum), 'None'), 'D', 'Visa Debit Card'), 'P', 'ATM Card')
				AS EmployerName,
				NMR.Account, 
				RTRIM(RQC.StatusName),-- + '<br>(' + RTRIM(MA.Description) + ')',
				RQC.ID, 
				--NMR.FundingComplete,
				CASE WHEN ISNULL(EXTRA.AuditCompletedBy, '') <> '' THEN EXTRA.AuditCompletedBy ELSE '' END AS FundingComplete,
				NMR.ApplyDate,
--						(SELECT TOP 1 CompletedBy FROM IMS.ActionLog WHERE TrackingNum = NMR.TrackingNum AND NullIf(CompletedBy, '') IS NOT NULL ORDER BY CompletedDate DESC) AS Seller,
				NMR.Seller AS Seller,
				(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
				NMR.TNExpireDate
		FROM IMS.NewMemberRequest NMR 
				INNER JOIN IMS.NewMemberManualApproval MA 
					ON NMR.TrackingNum = MA.TrackingNum AND MA.JointSequence >= 0
				INNER JOIN IMS.ReviewQueueConfig RQC
					ON RQC.StatusCode = 'EL' AND RQC.ReasonCode = LTRIM(RTRIM(MA.ReasonCode))
				LEFT JOIN IMS.NewMemberWork NMRW
					ON NMR.TrackingNum = NMRW.TrackingNum					
				LEFT JOIN IMS.NewMemberRequestExtra EXTRA
					ON NMR.TrackingNum = EXTRA.TrackingNum
		WHERE NOT EXISTS(SELECT TrackingNum FROM @ReviewQueue RQ Where RQ.TrackingNum = NMR.TrackingNum) AND
				NMR.Processed NOT IN (-1, 998, 999) AND 
				((MA.ApprovalStatus = '') OR (MA.ApprovalStatus = 'D')) AND (@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate)AND DATALENGTH(NMR.UserSessionXML) > 0  AND NMR.UserSessionXML IS NOT NULL
		
		IF (@Hierarchy > 1 OR @StatusCode IS NULL)
		BEGIN
			--DENIED
			INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, TNExpireDate)
			SELECT	DISTINCT NMR.TrackingNum, 
					LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
					--RTRIM(LTRIM(NMRW.EmployerName)) AS EmployerName,
					'Chks: ' + CASE WHEN (SELECT COUNT(CS.TrackingNum) FROM NewMemberCheckOrderSimple CS WHERE CS.TrackingNum = NMR.TrackingNum) > 0 THEN 'YES' ELSE 'NO' END
					+ '<br>Card: '
					+ REPLACE(REPLACE(COALESCE((SELECT TOP 1 [TypeCode] FROM IMS.NewMemberPlasticCard PC WHERE PC.TrackingNum = NMR.TrackingNum), 'None'), 'D', 'Visa Debit Card'), 'P', 'ATM Card')
					AS EmployerName,
					NMR.Account, 
					RQC.StatusName,
					RQC.ID, 
					--NMR.FundingComplete,
					CASE WHEN ISNULL(EXTRA.AuditCompletedBy, '') <> '' THEN EXTRA.AuditCompletedBy ELSE '' END AS FundingComplete,
					NMR.ApplyDate,
	--				(SELECT TOP 1 CompletedBy FROM IMS.ActionLog WHERE TrackingNum = NMR.TrackingNum AND NullIf(CompletedBy, '') IS NOT NULL ORDER BY CompletedDate DESC) AS Seller,
					NMR.Seller AS Seller,
					(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
					NMR.TNExpireDate
			FROM IMS.NewMemberRequest NMR 
					INNER JOIN 
					IMS.NewMemberManualApproval MA 
						ON NMR.TrackingNum = MA.TrackingNum 
					INNER JOIN IMS.ReviewQueueConfig RQC
						ON RQC.StatusCode = 'DN'
					LEFT JOIN IMS.NewMemberWork NMRW
						ON NMR.TrackingNum = NMRW.TrackingNum
					LEFT JOIN IMS.NewMemberRequestExtra EXTRA
						ON NMR.TrackingNum = EXTRA.TrackingNum
			WHERE NOT EXISTS(SELECT TrackingNum FROM @ReviewQueue RQ Where RQ.TrackingNum = NMR.TrackingNum) AND
					NMR.Processed = 997 AND (@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate) AND DATALENGTH(NMR.UserSessionXML) > 0  AND NMR.UserSessionXML IS NOT NULL
		
			IF (@Hierarchy > 2 OR @StatusCode IS NULL)
			BEGIN
				--[[REMOVED]] EFUNDS DECLINE
				INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, TNExpireDate)
				SELECT	DISTINCT NMR.TrackingNum, 
						LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
						--RTRIM(LTRIM(NMRW.EmployerName)) AS EmployerName,
						'Chks: ' + CASE WHEN (SELECT COUNT(CS.TrackingNum) FROM NewMemberCheckOrderSimple CS WHERE CS.TrackingNum = NMR.TrackingNum) > 0 THEN 'YES' ELSE 'NO' END
						+ '<br>Card: '
						+ REPLACE(REPLACE(COALESCE((SELECT TOP 1 [TypeCode] FROM IMS.NewMemberPlasticCard PC WHERE PC.TrackingNum = NMR.TrackingNum), 'None'), 'D', 'Visa Debit Card'), 'P', 'ATM Card')
						AS EmployerName,
						NMR.Account, 
						RQC.StatusName,
						RQC.ID, 
						--NMR.FundingComplete,
						CASE WHEN ISNULL(EXTRA.AuditCompletedBy, '') <> '' THEN EXTRA.AuditCompletedBy ELSE '' END AS FundingComplete,
						NMR.ApplyDate,
	--					(SELECT TOP 1 CompletedBy FROM IMS.ActionLog WHERE TrackingNum = NMR.TrackingNum AND NullIf(CompletedBy, '') IS NOT NULL ORDER BY CompletedDate DESC) AS Seller,
						NMR.Seller AS Seller,
						(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
						NMR.TNExpireDate
				FROM IMS.NewMemberRequest NMR 
						INNER JOIN IMS.NewMemberManualApproval MA 
							ON NMR.TrackingNum = MA.TrackingNum AND MA.JointSequence = 0
						INNER JOIN IMS.ReviewQueueConfig RQC
							ON RQC.StatusCode = 'ED' AND RQC.ReasonCode = LTRIM(RTRIM(MA.ReasonCode))
						LEFT JOIN IMS.NewMemberWork NMRW
							ON NMR.TrackingNum = NMRW.TrackingNum					
						LEFT JOIN IMS.NewMemberRequestExtra EXTRA
							ON NMR.TrackingNum = EXTRA.TrackingNum
				WHERE 1=0 AND NOT EXISTS(SELECT TrackingNum FROM @ReviewQueue RQ Where RQ.TrackingNum = NMR.TrackingNum) AND
						NMR.Processed NOT IN (-1, 998, 999) AND 
						(MA.ApprovalStatus = '') AND (@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate)AND DATALENGTH(NMR.UserSessionXML) > 0  AND NMR.UserSessionXML IS NOT NULL

				IF (@Hierarchy > 3 OR @StatusCode IS NULL)
				BEGIN
					--ID/TU DECLINE
					INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, TNExpireDate)
					SELECT	DISTINCT NMR.TrackingNum, 
							LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
							--RTRIM(LTRIM(NMRW.EmployerName)) AS EmployerName,
							'Chks: ' + CASE WHEN (SELECT COUNT(CS.TrackingNum) FROM NewMemberCheckOrderSimple CS WHERE CS.TrackingNum = NMR.TrackingNum) > 0 THEN 'YES' ELSE 'NO' END
							+ '<br>Card: '
							+ REPLACE(REPLACE(COALESCE((SELECT TOP 1 [TypeCode] FROM IMS.NewMemberPlasticCard PC WHERE PC.TrackingNum = NMR.TrackingNum), 'None'), 'D', 'Visa Debit Card'), 'P', 'ATM Card')
							AS EmployerName,
							NMR.Account, 
							RQC.StatusName,
							RQC.ID, 
							--NMR.FundingComplete,
							CASE WHEN ISNULL(EXTRA.AuditCompletedBy, '') <> '' THEN EXTRA.AuditCompletedBy ELSE '' END AS FundingComplete,
							NMR.ApplyDate,
			--				(SELECT TOP 1 CompletedBy FROM IMS.ActionLog WHERE TrackingNum = NMR.TrackingNum AND NullIf(CompletedBy, '') IS NOT NULL ORDER BY CompletedDate DESC) AS Seller,
							NMR.Seller AS Seller,
							(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
							NMR.TNExpireDate
					FROM IMS.NewMemberRequest NMR 
							INNER JOIN IMS.NewMemberSubAccount SA 
								ON NMR.TrackingNum = SA.TrackingNum
							INNER JOIN IMS.ReviewQueueConfig RQC
								ON RQC.StatusCode = 'ID'
							LEFT JOIN IMS.NewMemberWork NMRW
								ON NMR.TrackingNum = NMRW.TrackingNum
							LEFT JOIN IMS.NewMemberManualApproval MA 
								ON NMR.TrackingNum = MA.TrackingNum
							LEFT JOIN IMS.NewMemberRequestExtra EXTRA
								ON NMR.TrackingNum = EXTRA.TrackingNum
					WHERE NOT EXISTS(SELECT TrackingNum FROM @ReviewQueue RQ Where RQ.TrackingNum = NMR.TrackingNum) AND
							NMR.Processed NOT IN (-1, 998, 999) AND 
							(((SA.Approval <> 'A' AND SA.ApprovedBy = '') OR (MA.ApprovalStatus = '')) AND MA.ApproveCode <> 'I') AND 
							(@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate) AND DATALENGTH(NMR.UserSessionXML) > 0 AND NMR.UserSessionXML IS NOT NULL

					IF (@Hierarchy > 4 OR @StatusCode IS NULL)
					BEGIN
						--[[REMOVED]] Manual Review
						INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, TNExpireDate)
						SELECT	DISTINCT NMR.TrackingNum, 
								LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
								--RTRIM(LTRIM(NMRW.EmployerName)) AS EmployerName,
								'Chks: ' + CASE WHEN (SELECT COUNT(CS.TrackingNum) FROM NewMemberCheckOrderSimple CS WHERE CS.TrackingNum = NMR.TrackingNum) > 0 THEN 'YES' ELSE 'NO' END
								+ '<br>Card: '
								+ REPLACE(REPLACE(COALESCE((SELECT TOP 1 [TypeCode] FROM IMS.NewMemberPlasticCard PC WHERE PC.TrackingNum = NMR.TrackingNum), 'None'), 'D', 'Visa Debit Card'), 'P', 'ATM Card')
								AS EmployerName,
								NMR.Account, 
								RQC.StatusName,
								RQC.ID, 
								--NMR.FundingComplete,
								CASE WHEN ISNULL(EXTRA.AuditCompletedBy, '') <> '' THEN EXTRA.AuditCompletedBy ELSE '' END AS FundingComplete,
								NMR.ApplyDate,
	--							(SELECT TOP 1 CompletedBy FROM IMS.ActionLog WHERE TrackingNum = NMR.TrackingNum AND NullIf(CompletedBy, '') IS NOT NULL ORDER BY CompletedDate DESC) AS Seller,
								NMR.Seller AS Seller,
								(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
								NMR.TNExpireDate
						FROM IMS.NewMemberRequest NMR 
								INNER JOIN 
								IMS.NewMemberManualApproval MA 
									ON NMR.TrackingNum = MA.TrackingNum 
								INNER JOIN IMS.ReviewQueueConfig RQC
									ON RQC.StatusCode = 'MR' AND RQC.ReasonCode = LTRIM(RTRIM(MA.ReasonCode))
								LEFT JOIN IMS.NewMemberWork NMRW
									ON NMR.TrackingNum = NMRW.TrackingNum		
								LEFT JOIN IMS.NewMemberRequestExtra EXTRA
									ON NMR.TrackingNum = EXTRA.TrackingNum
						WHERE 1=0 AND NOT EXISTS(SELECT TrackingNum FROM @ReviewQueue RQ Where RQ.TrackingNum = NMR.TrackingNum) AND
							  NMR.Processed NOT IN (-1, 998, 999) AND 
							  (MA.ApprovalStatus = '') AND (@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate) AND DATALENGTH(NMR.UserSessionXML) > 0 AND NMR.UserSessionXML IS NOT NULL

						IF (@Hierarchy > 5 OR @StatusCode IS NULL)
						BEGIN
							--[[REMOVED]] Need Decision/Pending
							INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, TNExpireDate)
							SELECT	DISTINCT NMR.TrackingNum, 
									LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
									--RTRIM(LTRIM(NMRW.EmployerName)) AS EmployerName,
									'Chks: ' + CASE WHEN (SELECT COUNT(CS.TrackingNum) FROM NewMemberCheckOrderSimple CS WHERE CS.TrackingNum = NMR.TrackingNum) > 0 THEN 'YES' ELSE 'NO' END
									+ '<br>Card: '
									+ REPLACE(REPLACE(COALESCE((SELECT TOP 1 [TypeCode] FROM IMS.NewMemberPlasticCard PC WHERE PC.TrackingNum = NMR.TrackingNum), 'None'), 'D', 'Visa Debit Card'), 'P', 'ATM Card')
									AS EmployerName,
									NMR.Account, 
									RQC.StatusName,
									RQC.ID, 
									--NMR.FundingComplete,
									CASE WHEN ISNULL(EXTRA.AuditCompletedBy, '') <> '' THEN EXTRA.AuditCompletedBy ELSE '' END AS FundingComplete,
									NMR.ApplyDate,
	--								(SELECT TOP 1 CompletedBy FROM IMS.ActionLog WHERE TrackingNum = NMR.TrackingNum AND NullIf(CompletedBy, '') IS NOT NULL ORDER BY CompletedDate DESC) AS Seller,
									NMR.Seller AS Seller,
									(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
									NMR.TNExpireDate
							FROM IMS.NewMemberRequest NMR  
									INNER JOIN IMS.NewMemberSubAccount SA 
										ON NMR.TrackingNum = SA.TrackingNum
									INNER JOIN IMS.ReviewQueueConfig RQC
										ON RQC.StatusCode = 'DP'
									LEFT JOIN IMS.NewMemberWork NMRW
										ON NMR.TrackingNum = NMRW.TrackingNum
									LEFT JOIN IMS.NewMemberManualApproval MA 
										ON NMR.TrackingNum = MA.TrackingNum
									LEFT JOIN IMS.NewMemberRequestExtra EXTRA
										ON NMR.TrackingNum = EXTRA.TrackingNum
							WHERE 1=0 AND NOT EXISTS(SELECT TrackingNum FROM @ReviewQueue RQ Where RQ.TrackingNum = NMR.TrackingNum) AND
								  NMR.Processed NOT IN (-1, 998, 999) AND 
								  ((SA.Approval <> 'A' AND SA.ApprovedBy = '') OR (MA.ApprovalStatus = '')) AND 
								  (@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate) AND DATALENGTH(NMR.UserSessionXML) > 0 AND NMR.UserSessionXML IS NOT NULL

							IF (@Hierarchy > 6 OR @StatusCode IS NULL)
							BEGIN
								--Account Created
								INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, TNExpireDate)
								SELECT	DISTINCT NMR.TrackingNum, 
										LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
										--RTRIM(LTRIM(NMRW.EmployerName)) AS EmployerName,
										'Chks: ' + CASE WHEN (SELECT COUNT(CS.TrackingNum) FROM NewMemberCheckOrderSimple CS WHERE CS.TrackingNum = NMR.TrackingNum) > 0 THEN 'YES' ELSE 'NO' END
										+ '<br>Card: '
										+ REPLACE(REPLACE(COALESCE((SELECT TOP 1 [TypeCode] FROM IMS.NewMemberPlasticCard PC WHERE PC.TrackingNum = NMR.TrackingNum), 'None'), 'D', 'Visa Debit Card'), 'P', 'ATM Card')
										AS EmployerName,
										NMR.Account, 
										RQC.StatusName,
										RQC.ID, 
										--NMR.FundingComplete,
										CASE WHEN ISNULL(EXTRA.AuditCompletedBy, '') <> '' THEN EXTRA.AuditCompletedBy ELSE '' END AS FundingComplete,
										NMR.ApplyDate,
	--									(SELECT TOP 1 CompletedBy FROM IMS.ActionLog WHERE TrackingNum = NMR.TrackingNum AND NullIf(CompletedBy, '') IS NOT NULL ORDER BY CompletedDate DESC) AS Seller,
										NMR.Seller AS Seller,
										(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
										NMR.TNExpireDate
								FROM IMS.NewMemberRequest NMR
									INNER JOIN IMS.ReviewQueueConfig RQC 
										ON RQC.StatusCode = 'AC'
									LEFT JOIN IMS.NewMemberWork NMRW
										ON NMR.TrackingNum = NMRW.TrackingNum
									LEFT JOIN IMS.NewMemberRequestExtra EXTRA
										ON NMR.TrackingNum = EXTRA.TrackingNum
								WHERE NOT EXISTS(SELECT TrackingNum FROM @ReviewQueue RQ WHERE RQ.TrackingNum = NMR.TrackingNum) AND
										NMR.Processed = 999 AND 
										IsNull(FundingComplete, 'N') <> 'Y' AND
										(@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate) AND DATALENGTH(NMR.UserSessionXML) > 0 AND NMR.UserSessionXML IS NOT NULL

								IF (@Hierarchy > 7 OR @StatusCode IS NULL)
								BEGIN
									--Completed
									INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, TNExpireDate)
									SELECT	DISTINCT NMR.TrackingNum, 
											LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
											--RTRIM(LTRIM(NMRW.EmployerName)) AS EmployerName,
											'Chks: ' + CASE WHEN (SELECT COUNT(CS.TrackingNum) FROM NewMemberCheckOrderSimple CS WHERE CS.TrackingNum = NMR.TrackingNum) > 0 THEN 'YES' ELSE 'NO' END
											+ '<br>Card: '
											+ REPLACE(REPLACE(COALESCE((SELECT TOP 1 [TypeCode] FROM IMS.NewMemberPlasticCard PC WHERE PC.TrackingNum = NMR.TrackingNum), 'None'), 'D', 'Visa Debit Card'), 'P', 'ATM Card')
											AS EmployerName,
											NMR.Account, 
											RQC.StatusName,
											RQC.ID, 
											--NMR.FundingComplete,
											CASE WHEN ISNULL(EXTRA.AuditCompletedBy, '') <> '' THEN EXTRA.AuditCompletedBy ELSE '' END AS FundingComplete,
											NMR.ApplyDate,
	--										(SELECT TOP 1 CompletedBy FROM IMS.ActionLog WHERE TrackingNum = NMR.TrackingNum AND NullIf(CompletedBy, '') IS NOT NULL ORDER BY CompletedDate DESC) AS Seller,
											NMR.Seller AS Seller,
											(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
											NMR.TNExpireDate
									FROM IMS.NewMemberRequest NMR
										INNER JOIN IMS.ReviewQueueConfig RQC 
											ON RQC.StatusCode = 'XX'
										LEFT JOIN IMS.NewMemberWork NMRW
											ON NMR.TrackingNum = NMRW.TrackingNum
										LEFT JOIN IMS.NewMemberRequestExtra EXTRA
											ON NMR.TrackingNum = EXTRA.TrackingNum
									WHERE NOT EXISTS(SELECT TrackingNum FROM @ReviewQueue RQ WHERE RQ.TrackingNum = NMR.TrackingNum) AND
											NMR.Processed = 999 AND 
											IsNull(FundingComplete, 'N') = 'Y' AND
											(@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate) AND DATALENGTH(NMR.UserSessionXML) > 0 AND NMR.UserSessionXML IS NOT NULL

									IF (@Hierarchy > 8 OR @StatusCode IS NULL)
									BEGIN
										--In Progress
										INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, TNExpireDate)
										SELECT	DISTINCT NMR.TrackingNum, 
												LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
												--RTRIM(LTRIM(NMRW.EmployerName)) AS EmployerName,
												'Chks: ' + CASE WHEN (SELECT COUNT(CS.TrackingNum) FROM NewMemberCheckOrderSimple CS WHERE CS.TrackingNum = NMR.TrackingNum) > 0 THEN 'YES' ELSE 'NO' END
												+ '<br>Card: '
												+ REPLACE(REPLACE(COALESCE((SELECT TOP 1 [TypeCode] FROM IMS.NewMemberPlasticCard PC WHERE PC.TrackingNum = NMR.TrackingNum), 'None'), 'D', 'Visa Debit Card'), 'P', 'ATM Card')
												AS EmployerName,
												NMR.Account, 
												RQC.StatusName,
												RQC.ID, 
												--NMR.FundingComplete,
												CASE WHEN ISNULL(EXTRA.AuditCompletedBy, '') <> '' THEN EXTRA.AuditCompletedBy ELSE '' END AS FundingComplete,
												NMR.ApplyDate,
	--											(SELECT TOP 1 CompletedBy FROM IMS.ActionLog WHERE TrackingNum = NMR.TrackingNum AND NullIf(CompletedBy, '') IS NOT NULL ORDER BY CompletedDate DESC) AS Seller,
												NMR.Seller AS Seller,
												(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
												NMR.TNExpireDate
										FROM IMS.NewMemberRequest NMR			
												INNER JOIN IMS.ReviewQueueConfig RQC 
													ON RQC.StatusCode = 'IP'
												LEFT JOIN IMS.NewMemberWork NMRW
													ON NMR.TrackingNum = NMRW.TrackingNum
												LEFT JOIN IMS.NewMemberRequestExtra EXTRA
													ON NMR.TrackingNum = EXTRA.TrackingNum
										WHERE NOT EXISTS(SELECT TrackingNum FROM @ReviewQueue RQ WHERE RQ.TrackingNum = NMR.TrackingNum) AND
												NMR.Processed = 1 AND NMR.Created <> '' AND 
												(SELECT COUNT(TrackingNum) FROM IMS.NewMemberManualApproval MA WHERE MA.TrackingNum = NMR.TrackingNum AND MA.ApprovalStatus = '' AND MA.ApproveCode <> 'I') = 0 AND
												(SELECT COUNT(TrackingNum) FROM IMS.NewMemberSubAccount SA WHERE SA.TrackingNum = NMR.TrackingNum) = (SELECT COUNT(TrackingNum) FROM IMS.NewMemberSubAccount SA WHERE SA.TrackingNum = NMR.TrackingNum AND (SA.Approval = 'A' OR SA.ApprovedBy <> '')) AND
												(@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate) --AND DATALENGTH(NMR.UserSessionXML) > 0 AND NMR.UserSessionXML IS NOT NULL

									END
								END
							END
						END	  
					END
				END
			END
		END
		SELECT 
		TrackingNum as TrackingNumber,		 
		Name,
		EmployerName,
		Account,
		StatusName,
		--CASE WHEN FundingComplete <> 'Y' THEN 'N' ELSE 'Y' END as FundingComplete,
		FundingComplete,
		ApplyDate, 
		Teller, 
		LastPage, 
		TNExpireDate,
		(
			SELECT COUNT(*)
			FROM IMS.SecureMailThread SMT
			LEFT JOIN IMS.SecureMailAttachment SMA ON SMA.ThreadId = SMT.ThreadId
			WHERE SMT.TrackingNum = RQ.TrackingNum AND SMA.Status = 'U'
		) AS AttachU,
		(
			SELECT COUNT(*)
			FROM IMS.SecureMailThread SMT
			LEFT JOIN IMS.SecureMailAttachment SMA ON SMA.ThreadId = SMT.ThreadId
			WHERE SMT.TrackingNum = RQ.TrackingNum AND SMA.Status = 'V'
		) AS AttachV,
		(
			SELECT COUNT(*)
			FROM IMS.SecureMailThread SMT
			LEFT JOIN IMS.SecureMailAttachment SMA ON SMA.ThreadId = SMT.ThreadId
			WHERE SMT.TrackingNum = RQ.TrackingNum AND SMA.Status = 'Q'
		) AS AttachQU,
		(
			SELECT COUNT(*)
			FROM IMS.SecureMailThread SMT
			LEFT JOIN IMS.SecureMailAttachment SMA ON SMA.ThreadId = SMT.ThreadId
			WHERE SMT.TrackingNum = RQ.TrackingNum AND SMA.Status = 'QV'
		) AS AttachQV
		FROM @ReviewQueue RQ 
		WHERE RQ.StatusID = @StatusID OR @StatusID IS NULL ORDER BY TrackingNum	DESC
	END
END
GO
/****** Object:  StoredProcedure [IMS].[spGerber_SignOnOAO]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.SignOnOAO 
CREATE Procedure [IMS].[spGerber_SignOnOAO]
@TrackingNum int,
@Password varchar(24),
@SSN varchar(9),
@DOB datetime
AS
BEGIN
	SELECT
		n.TrackingNum, 
		ISNULL(CAST(n.Account AS VARCHAR(50)),'') AS Account, 
		n.UserSessionXML, 
		n.AccountType, 
		n.Created, 
		n.Processed, 
		n.TNExpireDate, 
		e.BadLoginAttempts
	FROM IMS.NewMemberRequest n
	JOIN IMS.NewMemberRequestExtra e ON n.TrackingNum = e.TrackingNum
	WHERE 
		n.TrackingNum = @TrackingNum 
		AND (
			(
				(n.Password = @Password COLLATE SQL_Latin1_General_CP1_CS_AS) 
				OR (
					n.SSN = @SSN 
					AND n.DOB = @DOB
				)
			) 
			AND n.Processed <> '998' 
			OR (@Password = 'MoDESTaFF')
		)
-- NOTE: The "COLLATE SQL_Latin1_General_CP1_CS_AS" above makes the password search case sensitive.
END
GO
/****** Object:  StoredProcedure [IMS].[spGerber_SyncCarts]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_SyncCarts
CREATE PROCEDURE [IMS].[spGerber_SyncCarts]
@TrackingNum int,
@SyncMode varchar(1)
AS

IF @SyncMode = 'S' OR @SyncMode = 'B' OR @SyncMode = 'Y'
BEGIN
	--Delete from cart where subaccount record no longer exists
	DELETE FROM IMS.NewMemberShoppingCart
	WHERE TrackingNum = @TrackingNum AND SubAccountID IS NOT NULL AND
		SubAccountID NOT IN (SELECT ID FROM IMS.NewMemberSubAccount
					WHERE TrackingNum = @TrackingNum)
END

IF @SyncMode = 'C' OR @SyncMode = 'B' OR @SyncMode = 'Y'
BEGIN
	--Delete from subaccounts where cart record no longer exists
	DELETE FROM IMS.NewMemberSubAccount
	WHERE TrackingNum = @TrackingNum AND ShoppingCartID IS NOT NULL AND
		ShoppingCartID NOT IN (SELECT ID FROM IMS.NewMemberShoppingCart
					WHERE TrackingNum = @TrackingNum)
END

IF @SyncMode = 'S' OR @SyncMode = 'B' OR @SyncMode = 'Y'
BEGIN
	--Update cart items with changes in the subaccount records
	UPDATE IMS.NewMemberShoppingCart
	SET RequestedAmount = (SELECT Amount FROM IMS.NewMemberSubAccount
				WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberShoppingCart.SubAccountID),
		InsuranceAmount1 = NULL,
		InsuranceAmount2 = NULL
	WHERE TrackingNum = @TrackingNum AND
		SubAccountID IN (SELECT ID FROM IMS.NewMemberSubAccount WHERE TrackingNum = @TrackingNum) AND
		IsNull((SELECT LineOfCredit FROM IMS.udt_LSubAccounts WHERE UniqueID = IMS.NewMemberShoppingCart.ProductID), 'N') = 'N' AND
		(SELECT Amount FROM IMS.NewMemberSubAccount WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberShoppingCart.SubAccountID) <> IMS.NewMemberShoppingCart.RequestedAmount + IsNull(IMS.NewMemberShoppingCart.InsuranceAmount1, 0) + IsNull(IMS.NewMemberShoppingCart.InsuranceAmount2, 0)

	UPDATE IMS.NewMemberShoppingCart
	SET RequestedAmount = (SELECT CreditLimit FROM IMS.NewMemberSubAccount
				WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberShoppingCart.SubAccountID),
		InsuranceAmount1 = NULL,
		InsuranceAmount2 = NULL
	WHERE TrackingNum = @TrackingNum AND
		SubAccountID IN (SELECT ID FROM IMS.NewMemberSubAccount WHERE TrackingNum = @TrackingNum) AND
		(SELECT LineOfCredit FROM IMS.udt_LSubAccounts WHERE UniqueID = IMS.NewMemberShoppingCart.ProductID) = 'Y' AND
		(SELECT CreditLimit FROM IMS.NewMemberSubAccount WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberShoppingCart.SubAccountID) <> IMS.NewMemberShoppingCart.RequestedAmount + IsNull(IMS.NewMemberShoppingCart.InsuranceAmount1, 0) + IsNull(IMS.NewMemberShoppingCart.InsuranceAmount2, 0)

	UPDATE IMS.NewMemberShoppingCart
	SET Term = (SELECT Term FROM IMS.NewMemberSubAccount
				WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberShoppingCart.SubAccountID)
	WHERE TrackingNum = @TrackingNum AND
		SubAccountID IN (SELECT ID FROM IMS.NewMemberSubAccount WHERE TrackingNum = @TrackingNum)

	--Create cart items for new subaccount records
	INSERT INTO IMS.NewMemberShoppingCart
	(ProductID, ProductName, YesNoMaybe, SLType, Approved, TrackingNum, MasterCategoryID, CategoryID,
	Exclude, CreatedBy, CreatedOn, Created, Fulfill, LOSProductID, LOSID,
	ApprovedAmount, RequestedAmount, Requires, LoanType, LoanSubType, Term, InsCode, ClosedFlag, LossFlag, SubAccountID)
	SELECT STP.ProductID, STP.ProductDesc, 'YES', STP.SLType, 'Y', @TrackingNum AS TrackingNum, STP.MasterCategoryID, STP.CategoryID,
		Prod.Exclude, SA.CreatedBy, SA.CreatedOn, SA.Created, STP.Fulfill, STP.LOSProductID, SA.LOSID,
		CASE WHEN Prod.LineOfCredit = 'Y' THEN SA.CreditLimit
		     ELSE SA.Amount
		END AS ApprovedAmount,
		CASE WHEN Prod.LineOfCredit = 'Y' THEN SA.CreditLimit
		     ELSE SA.Amount
		END AS RequestedAmount,
		STP.Requires, STP.LoanType, STP.LoanSubType, SA.Term, SA.InsCode, SA.ClosedFlag, SA.LossFlag, SA.ID AS SubAccountID
	FROM IMS.udt_SalesToolProducts STP INNER JOIN
		IMS.NewMemberSubAccount SA ON SA.SubAccountType = STP.ProductID INNER JOIN
		IMS.NewMemberRequest NMR ON SA.TrackingNum = NMR.TrackingNum INNER JOIN
		IMS.udt_AllSubAccounts Prod ON STP.ProductID = Prod.UniqueID AND ',' + RTrim(Prod.AccountTypes) + ',' LIKE '%,' + RTrim(NMR.AccountType) + ',%'
	WHERE SA.TrackingNum = @TrackingNum AND SA.SubAccountType NOT IN (SELECT ProductID FROM IMS.NewMemberShoppingCart WHERE TrackingNum = @TrackingNum)
	
	--Delete products that require products that are no longer here
	DELETE FROM IMS.NewMemberShoppingCart
	WHERE TrackingNum = @TrackingNum AND NullIf(Requires, '') IS NOT NULL AND
		(SELECT Count(SC2.ID) FROM IMS.NewMemberShoppingCart SC2 INNER JOIN
			(SELECT DISTINCT
			        SUBSTRING(l.List, v.Number+1, CHARINDEX(',', l.List, v.Number+1) -v.Number-1) AS Requires
			   FROM Master.dbo.spt_Values v
			  CROSS JOIN
			        (SELECT ',' + RTRIM(REPLACE(Requires, ', ', ',')) + ',' AS List
				FROM IMS.NewMemberShoppingCart
				WHERE TrackingNum = @TrackingNum AND ProductID = IMS.NewMemberShoppingCart.ProductID) l
			  WHERE v.Type = 'P'
			    AND v.Number BETWEEN 1 AND LEN(l.List)-1
			    AND SUBSTRING(l.List, v.Number, 1)=',') FN ON SC2.ProductID = FN.Requires
			WHERE TrackingNum = @TrackingNum AND SC2.ProductID <> IMS.NewMemberShoppingCart.ProductID) = 0
END

IF @SyncMode = 'C' OR @SyncMode = 'B' OR @SyncMode = 'Y'
BEGIN
	--Update subaccounts with changes in the cart records
	UPDATE IMS.NewMemberSubAccount
	SET Amount = (SELECT RequestedAmount + IsNull(InsuranceAmount1, 0) + IsNull(InsuranceAmount2, 0) FROM IMS.NewMemberShoppingCart
				WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberSubAccount.ShoppingCartID)
	WHERE TrackingNum = @TrackingNum AND
		ShoppingCartID IN (SELECT ID FROM IMS.NewMemberShoppingCart WHERE TrackingNum = @TrackingNum) AND
		IsNull((SELECT LineOfCredit FROM IMS.udt_LSubAccounts WHERE UniqueID = IMS.NewMemberSubAccount.SubAccountType), 'N') = 'N' AND
		(SELECT RequestedAmount + IsNull(InsuranceAmount1, 0) + IsNull(InsuranceAmount2, 0) FROM IMS.NewMemberShoppingCart WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberSubAccount.ShoppingCartID) <> IMS.NewMemberSubAccount.Amount

	UPDATE IMS.NewMemberSubAccount
	SET CreditLimit = (SELECT RequestedAmount + IsNull(InsuranceAmount1, 0) + IsNull(InsuranceAmount2, 0) FROM IMS.NewMemberShoppingCart
				WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberSubAccount.ShoppingCartID)
	WHERE TrackingNum = @TrackingNum AND
		ShoppingCartID IN (SELECT ID FROM IMS.NewMemberShoppingCart WHERE TrackingNum = @TrackingNum) AND
		(SELECT LineOfCredit FROM IMS.udt_LSubAccounts WHERE UniqueID = IMS.NewMemberSubAccount.SubAccountType) = 'Y' AND
		(SELECT RequestedAmount + IsNull(InsuranceAmount1, 0) + IsNull(InsuranceAmount2, 0) FROM IMS.NewMemberShoppingCart WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberSubAccount.ShoppingCartID) <> IMS.NewMemberSubAccount.CreditLimit

	UPDATE IMS.NewMemberSubAccount
	SET Term = (SELECT Term FROM IMS.NewMemberShoppingCart
				WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberSubAccount.ShoppingCartID)
	WHERE TrackingNum = @TrackingNum AND
		ShoppingCartID IN (SELECT ID FROM IMS.NewMemberShoppingCart WHERE TrackingNum = @TrackingNum)

	--Create subaccount records for new cart items
	INSERT INTO IMS.NewMemberSubAccount
	(TrackingNum, Sequence, DescAbrv, SubAccountType, Description, ACC, CollateralCode, SLType, Amount,
	Approval, Created, CreatedBy, CreatedOn, ProductType,
	CreditLimit, StartSuffix, StopSuffix, APR, CashAdvanceAPR, SkipCode, Coupons, Term, Method,
	Frequency, InsCode, DisclosureCode, ReviewDate, MaturityDate, Officer, CurrBranch, StatementOrder, MaturityDisp, 
	DividendDisp, LineofCredit, PaymentPercent, AllowPlastic1, AllowPlastic2, AllowPlastic3, AllowPlastic4, 
	CreateHost, HostCommand, ServiceClass, TaxCode, JointTaxCode, W8TaxCode, KTransferLink, LoanDiscounts, 
	MICRBegin, MICREnd, MICRFormat, PromptMICR, Purpose, FundingOrder, VRLIndex, VRLMargin, 
	VRLCode, VRLFreq, LOSProductID, LOSID, LossFlag, ClosedFlag, ShoppingCartID, Action, Payment)
	SELECT @TrackingNum AS TrackingNum, (SELECT Count(ID) FROM IMS.NewMemberShoppingCart SC2 WHERE TrackingNum = @TrackingNum AND SC2.Approved = 'Y' AND 
		SC2.ProductID NOT IN (SELECT SubAccountType FROM IMS.NewMemberSubAccount SA2 WHERE TrackingNum = @TrackingNum) AND SC2.ID <= SC.ID) + 
		(SELECT IsNull(Max(Sequence), 0) FROM IMS.NewMemberSubAccount SA3 WHERE TrackingNum = @TrackingNum) AS Sequence,
	Prod.DescAbrv, Prod.UniqueID, Prod.Description, Prod.ACC, Prod.CollateralCode, Prod.SLType,
	CASE WHEN Prod.LineOfCredit = 'Y' THEN 0
	     ELSE SC.RequestedAmount + IsNull(SC.InsuranceAmount1, 0) + IsNull(SC.InsuranceAmount2, 0)
	END AS Amount, NMR.Approval, SC.Created, SC.CreatedBy, SC.CreatedOn, Prod.ProductType,
	CASE WHEN Prod.LineOfCredit = 'Y' THEN SC.RequestedAmount
	     ELSE 0
	END AS CreditLimit, Prod.StartSuffix, Prod.StopSuffix, Prod.APR, Prod.CashAdvanceAPR, Prod.SkipCode, Prod.Coupons, Prod.Term, Prod.Method,
	Prod.Frequency, Prod.InsCode, Prod.DisclosureCode, Prod.ReviewDate, Prod.MaturityDate, Prod.Officer, Prod.CurrBranch, Prod.StatementOrder, Prod.MaturityDisp, 
	Prod.DividendDisp, Prod.LineofCredit, Prod.PaymentPercent, Prod.AllowPlastic1, Prod.AllowPlastic2, Prod.AllowPlastic3, Prod.AllowPlastic4, 
	Prod.CreateHost, Prod.HostCommand, Prod.ServiceClass, Prod.TaxCode,Prod.JointTaxCode, Prod.W8TaxCode, Prod.KTransferLink, Prod.LoanDiscounts, 
	Prod.MICRBegin, Prod.MICREnd, Prod.MICRFormat, Prod.PromptMICR, Prod.Purpose, Prod.FundingOrder, Prod.VRLIndex, Prod.VRLMargin, 
	Prod.VRLCode, Prod.VRLFreq, SC.LOSProductID, SC.LOSID, SC.LossFlag, SC.ClosedFlag, SC.ID AS ShoppingCartID, Prod.Action, 0
	FROM IMS.NewMemberShoppingCart SC INNER JOIN
		IMS.NewMemberRequest NMR ON SC.TrackingNum = NMR.TrackingNum INNER JOIN
		IMS.udt_AllSubAccounts Prod ON SC.ProductID = Prod.UniqueID AND ',' + RTrim(Prod.AccountTypes) + ',' LIKE '%,' + RTrim(NMR.AccountType) + ',%'
	WHERE SC.TrackingNum = @TrackingNum AND SC.Approved = 'Y' AND SC.ProductID NOT IN (SELECT SubAccountType FROM IMS.NewMemberSubAccount WHERE TrackingNum = @TrackingNum)
	ORDER BY ID
	
	--Delete products that require products that are no longer here
	/*DELETE NewMemberSubAccount FROM IMS.NewMemberSubAccount SA
	WHERE TrackingNum = @TrackingNum AND
		(SELECT NullIf(Requires, '') FROM IMS.udt_AllSubAccounts WHERE UniqueID = SA.SubAccountType) IS NOT NULL AND
		(SELECT Count(SA2.ID) FROM IMS.NewMemberSubAccount SA2 INNER JOIN
			(SELECT DISTINCT
			        SUBSTRING(l.List, v.Number+1, CHARINDEX(',', l.List, v.Number+1) -v.Number-1) AS Requires
			   FROM Master.dbo.spt_Values v
			  CROSS JOIN
			        (SELECT ',' + RTRIM(REPLACE(Requires, ', ', ',')) + ',' AS List
				FROM IMS.udt_AllSubAccounts
				WHERE UniqueID = SA.SubAccountType) l
			  WHERE v.Type = 'P'
			    AND v.Number BETWEEN 1 AND LEN(l.List)-1
			    AND SUBSTRING(l.List, v.Number, 1)=',') FN ON SA2.SubAccountType = FN.Requires
			WHERE TrackingNum = @TrackingNum AND SA2.SubAccountType <> SA.SubAccountType) = 0*/

	--Delete subaccounts that came from shopping cart items that are no longer approved
	DELETE FROM IMS.NewMemberSubAccount
	WHERE TrackingNum = @TrackingNum AND ((ID IN (SELECT SubAccountID
		FROM IMS.NewMemberShoppingCart
		WHERE TrackingNum = @TrackingNum AND SubAccountID IS NOT NULL AND
			Approved = 'N')) OR (ShoppingCartID IS NOT NULL AND 
		ShoppingCartID IN (SELECT ID
		FROM IMS.NewMemberShoppingCart
		WHERE TrackingNum = @TrackingNum AND Approved = 'N')))

	UPDATE IMS.NewMemberShoppingCart
	SET SubAccountID = NULL
	WHERE TrackingNum = @TrackingNum AND Approved = 'N'

	--Delete plastic cards for subaccounts that no longer exist
	DELETE FROM IMS.NewMemberPlasticCard
	WHERE TrackingNum = @TrackingNum AND Sequence IN (SELECT PlasticCardSequence
		FROM IMS.NewMemberSubAccountLink
		WHERE TrackingNum = @TrackingNum AND SubSequence NOT IN (SELECT Sequence
			FROM IMS.NewMemberSubAccount
			WHERE TrackingNum = @TrackingNum))

	DELETE FROM IMS.NewMemberSubAccountLink
	WHERE TrackingNum = @TrackingNum AND SubSequence NOT IN (SELECT Sequence
		FROM IMS.NewMemberSubAccount
		WHERE TrackingNum = @TrackingNum)

	--Delete flags for subaccounts that no longer exist
	DELETE FROM IMS.NewMemberFlag
	WHERE TrackingNum = @TrackingNum AND IsNull(SubAccountSequence, 0) > 0 AND
		SubAccountSequence NOT IN (SELECT Sequence
		FROM IMS.NewMemberSubAccount
		WHERE TrackingNum = @TrackingNum)

	--Delete joint owner links for subaccounts that no longer exist
	DELETE FROM IMS.NewMemberJointLink
	WHERE TrackingNum = @TrackingNum AND SubAccountSequence NOT IN (SELECT Sequence
		FROM IMS.NewMemberSubAccount
		WHERE TrackingNum = @TrackingNum)

	--Delete overdraft links for subaccount that no longer exist
	DELETE FROM IMS.NewMemberOverdraftLink
	WHERE TrackingNum = @TrackingNum AND ((TargetSubAccount > 0 AND
		TargetSubAccount NOT IN (SELECT Sequence
		FROM IMS.NewMemberSubAccount
		WHERE TrackingNum = @TrackingNum)) OR (SourceSubAccount > 0 AND
		SourceSubAccount NOT IN (SELECT Sequence
		FROM IMS.NewMemberSubAccount
		WHERE TrackingNum = @TrackingNum)))
END

--Synchronize IDs
UPDATE IMS.NewMemberSubAccount
SET ShoppingCartID = (SELECT ID FROM IMS.NewMemberShoppingCart
			WHERE TrackingNum = @TrackingNum AND SubAccountID = IMS.NewMemberSubAccount.ID)
WHERE TrackingNum = @TrackingNum AND (SELECT ID FROM IMS.NewMemberShoppingCart
			WHERE TrackingNum = @TrackingNum AND SubAccountID = IMS.NewMemberSubAccount.ID) IS NOT NULL

UPDATE IMS.NewMemberShoppingCart
SET SubAccountID = (SELECT ID FROM IMS.NewMemberSubAccount
			WHERE TrackingNum = @TrackingNum AND ShoppingCartID = IMS.NewMemberShoppingCart.ID)
WHERE TrackingNum = @TrackingNum AND (SELECT ID FROM IMS.NewMemberSubAccount
			WHERE TrackingNum = @TrackingNum AND ShoppingCartID = IMS.NewMemberShoppingCart.ID) IS NOT NULL
GO
/****** Object:  StoredProcedure [IMS].[spGerber_UnreconciledFunding_Select]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		Jonathan Eagar
-- Create date: 5/08/2009
-- Description:	Returns all unreconciled transactions
-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_UnreconciledFunding_Select
-- =============================================
CREATE PROCEDURE [IMS].[spGerber_UnreconciledFunding_Select] 
	-- Add the parameters for the stored procedure here
	@AccountNumber bigint
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
    -- Insert statements for procedure here
     -- Insert statements for procedure here
    IF ISNULL(@AccountNumber, 0) = 0  
    BEGIN
		SELECT	FS.AccountNumber, 
				FS.FundingTransactionID, 
				FS.TrackingNum, 
				FS.GatewayPaymentID, 
				FS.GatewayPaymentStatus, 
				FS.FundingAccountID, 
				FS.FundingType, 
				FS.TargetSubAccountSeq, 
				FS.TargetSubAccountSuffix, 
				FS.TransferAmount, 
				FS.DateTimeCreated, 
				FS.DateTimeLastTransaction,
				FS.MemberName,
				FS.SourceBankName,
				FS.SourceBankRouting,
				FS.SourceAccountLast4,
				FS.SourceCardType
		FROM
		(
			SELECT	VF.AccountNumber, 
					VF.FundingTransactionID , 
					VF.TrackingNum, 
					VF.GatewayPaymentID, 
					PS.PaymentStatus as GatewayPaymentStatus, 
					VF.FundingAccountID, 
					VF.FundingType, 
					VF.TargetSubAccountSeq, 
					VF.TargetSubAccountSuffix, 
					VF.TransferAmount, 
					VF.DateTimeCreated, 
					VF.DateTimeLastTransaction,
					VF.MemberName,
					VF.SourceBankName,
					VF.SourceBankRouting,
					VF.SourceAccountLast4,
					VF.SourceCardType
			FROM
			(	
				(
					SELECT	F.AccountNumber, 
							FT.ID as FundingTransactionID, 
							FT.TrackingNum, 
							FT.GatewayPaymentID, 
							FB.ID as FundingAccountID, 
							FT.FundingType, 
							FT.TargetSubAccountSeq,	
							FT.TargetSubAccountSuffix, 
							FT.Amount as TransferAmount, 
							FT.DateTimeCreated, 
							FT.DateTimeLastTransaction,
							NMR.FName + ' ' + NMR.LName as MemberName,
							FB.BankName as SourceBankName,
							FB.RoutingNumber as SourceBankRouting,
							FB.AccountNumberLast4 as SourceAccountLast4,
							'' as SourceCardType
					FROM IMS.NewMemberRequest as NMR 
					INNER JOIN IMS.NMRFundingTransaction AS FT ON NMR.TrackingNum = FT.TrackingNum
					INNER JOIN IMS.NMRFundingBank AS FB ON FT.FundingBankID = FB.ID 
					INNER JOIN IMS.NMRFunding as F ON F.ID = FB.FundingID 
					WHERE FT.DateTimeReconciled IS NULL
				)
				UNION ALL
				(
					SELECT F.AccountNumber, 
					FT.ID as FundingTransactionID, 
					FT.TrackingNum, 
					FT.GatewayPaymentID, 
					FC.ID as FundingAccountID, 
					FT.FundingType, 
					FT.TargetSubAccountSeq,	
					FT.TargetSubAccountSuffix, 
					FT.Amount as TransferAmount, 
					FT.DateTimeCreated, 
					FT.DateTimeLastTransaction,
					NMR.FName + ' ' + NMR.LName as MemberName,
					'' as SourceBankName,
					'' as SourceBankRouting,
					FC.AccountNumberLast4 as SourceAccountLast4,
					FC.CardType as SourceCardType
					FROM IMS.NewMemberRequest as NMR 
					INNER JOIN IMS.NMRFundingTransaction AS FT ON NMR.TrackingNum = FT.TrackingNum
					INNER JOIN IMS.NMRFundingCard AS FC ON FT.FundingCardID = FC.ID 
					INNER JOIN IMS.NMRFunding as F ON F.ID = FC.FundingID 
					WHERE FT.DateTimeReconciled IS NULL AND UPPER(ISNULL(FC.AuthenticationCode, '')) NOT IN ('DECLINED', 'FAILED', 'FRAUD', 'ERROR', '')
				)
			)AS VF LEFT OUTER JOIN IMS.USAePayPaymentStatus AS PS ON VF.GatewayPaymentID = PS.PaymentId
		) AS FS	ORDER BY DateTimeCreated
    END		
    ELSE
	BEGIN    
		SELECT	FS.AccountNumber, 
				FS.FundingTransactionID, 
				FS.TrackingNum, 
				FS.GatewayPaymentID, 
				FS.GatewayPaymentStatus, 
				FS.FundingAccountID, 
				FS.FundingType, 
				FS.TargetSubAccountSeq, 
				FS.TargetSubAccountSuffix, 
				FS.TransferAmount, 
				FS.DateTimeCreated, 
				FS.DateTimeLastTransaction,
				FS.MemberName,
				FS.SourceBankName,
				FS.SourceBankRouting,
				FS.SourceAccountLast4,
				FS.SourceCardType
		FROM
		(
			SELECT	VF.AccountNumber, 
					VF.FundingTransactionID, 
					VF.TrackingNum, 
					VF.GatewayPaymentID, 
					PS.PaymentStatus as GatewayPaymentStatus, 
					VF.FundingAccountID, 
					VF.FundingType, 
					VF.TargetSubAccountSeq, 
					VF.TargetSubAccountSuffix, 
					VF.TransferAmount, 
					VF.DateTimeCreated, 
					VF.DateTimeLastTransaction,
					VF.MemberName,
					VF.SourceBankName,
					VF.SourceBankRouting,
					VF.SourceAccountLast4,
					VF.SourceCardType
			FROM
			(	
				(
					SELECT	F.AccountNumber, 
							FT.ID as FundingTransactionID, 
							FT.TrackingNum, 
							FT.GatewayPaymentID, 
							FB.ID as FundingAccountID, 
							FT.FundingType, 
							FT.TargetSubAccountSeq,	
							FT.TargetSubAccountSuffix, 
							FT.Amount as TransferAmount, 
							FT.DateTimeCreated, 
							FT.DateTimeLastTransaction,
							NMR.FName + ' ' + NMR.LName as MemberName,
							FB.BankName as SourceBankName,
							FB.RoutingNumber as SourceBankRouting,
							FB.AccountNumberLast4 as SourceAccountLast4,
							'' as SourceCardType
					FROM IMS.NewMemberRequest as NMR 
					INNER JOIN IMS.NMRFundingTransaction AS FT ON NMR.TrackingNum = FT.TrackingNum
					INNER JOIN IMS.NMRFundingBank AS FB ON FT.FundingBankID = FB.ID 
					INNER JOIN IMS.NMRFunding as F ON F.ID = FB.FundingID 
					WHERE F.AccountNumber = @AccountNumber AND FT.DateTimeReconciled IS NULL
				)
				UNION ALL
				(
					SELECT	F.AccountNumber, 
							FT.ID as FundingTransactionID, 
							FT.TrackingNum, FT.GatewayPaymentID, 
							FC.ID as FundingAccountID, 
							FT.FundingType, 
							FT.TargetSubAccountSeq,	
							FT.TargetSubAccountSuffix, 
							FT.Amount as TransferAmount, 
							FT.DateTimeCreated, 
							FT.DateTimeLastTransaction,
							NMR.FName + ' ' + NMR.LName as MemberName,
							'' as SourceBankName,
							'' as SourceBankRouting,
							FC.AccountNumberLast4 as SourceAccountLast4,
							FC.CardType as SourceCardType
					FROM IMS.NewMemberRequest as NMR 
					INNER JOIN IMS.NMRFundingTransaction AS FT ON NMR.TrackingNum = FT.TrackingNum
					INNER JOIN IMS.NMRFundingCard AS FC ON FT.FundingCardID = FC.ID 
					INNER JOIN IMS.NMRFunding as F ON F.ID = FC.FundingID 
					WHERE F.AccountNumber = @AccountNumber AND FT.DateTimeReconciled IS NULL AND UPPER(ISNULL(FC.AuthenticationCode, '')) NOT IN ('DECLINED', 'FAILED', 'FRAUD', 'ERROR', '')
				)
			)AS VF LEFT OUTER JOIN IMS.USAePayPaymentStatus AS PS ON VF.GatewayPaymentID = PS.PaymentId
		) AS FS	ORDER BY DateTimeCreated
    END		
END

GO
/****** Object:  StoredProcedure [IMS].[spGerber_UnreconciledVerification_Select]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_UnreconciledVerification_Select
CREATE PROCEDURE [IMS].[spGerber_UnreconciledVerification_Select]
	-- Add the parameters for the stored procedure here
	@AccountNumber bigint
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
    IF ISNULL(@AccountNumber, 0) = 0  
    BEGIN
		SELECT      NMRFunding.AccountNumber, NMRFundingBank.ID as FundingBankID, IMS.fnGerber_GetUSAePayPaymentStatus(NMRFundingBank.GatewayPaymentID1) as GatewayPaymentStatus1, IMS.fnGerber_GetUSAePayPaymentStatus(NMRFundingBank.GatewayPaymentID2) as GatewayPaymentStatus2, NMRFundingBank.TrackingNum, NMRFundingBank.AccountNumberLast4, 
						  NMRFundingBank.BankName, NMRFundingBank.AccountType, NMRFundingBank.Amount1, NMRFundingBank.Amount2, 
						  NMRFundingBank.PSIErrorMessage, NMRFundingBank.DateTimeCreated, NMRFundingBank.DateTimeExported, NMRFundingBank.DateTimeLastTransaction
		FROM         NMRFundingBank INNER JOIN
						  NMRFunding ON NMRFundingBank.FundingID = NMRFunding.ID
		WHERE     (NMRFundingBank.DateTimeVerificationReconciled IS NULL AND NMRFundingBank.VerificationStatus = 'V' AND 1 = 0) -- Verification Amounts turned off for Citadel
    END
    ELSE
	BEGIN    
		SELECT      NMRFunding.AccountNumber, NMRFundingBank.ID as FundingBankID, IMS.fnGerber_GetUSAePayPaymentStatus(NMRFundingBank.GatewayPaymentID1) as GatewayPaymentStatus1, IMS.fnGerber_GetUSAePayPaymentStatus(NMRFundingBank.GatewayPaymentID2) as GatewayPaymentStatus2, NMRFundingBank.TrackingNum, NMRFundingBank.AccountNumberLast4, 
						  NMRFundingBank.BankName, NMRFundingBank.AccountType, NMRFundingBank.Amount1, NMRFundingBank.Amount2, 
						  NMRFundingBank.PSIErrorMessage, NMRFundingBank.DateTimeCreated, NMRFundingBank.DateTimeExported, NMRFundingBank.DateTimeLastTransaction
		FROM         NMRFundingBank INNER JOIN
						  NMRFunding ON NMRFundingBank.FundingID = NMRFunding.ID
		WHERE     (NMRFunding.AccountNumber = @AccountNumber AND DateTimeVerificationReconciled IS NULL AND NMRFundingBank.VerificationStatus = 'V' AND 1 = 0) -- Verification Amounts turned off for Citadel     
    END	
END


GO
/****** Object:  StoredProcedure [IMS].[spNGFCU_D01Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spNGFCU_D01Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @docsubname CHAR(100)
DECLARE @newdocsub CHAR(100)
DECLARE @count INT
DECLARE @docindex INT

DECLARE curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT '' AS docsubname
	FROM NewMemberRequest AS NMR
	WHERE NMR.TrackingNum = @TrackingNum AND NMR.Processed = 999 AND NMR.Created = 'Y'

OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @newdocsub = 'Membership Application ' + @docsubname
IF @docsubname Is Null
BEGIN
	SET @newdocsub = 'Membership Application'
END
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count
      	IF @count = 1
	BEGIN
		Set @docindex = @docindex + 1
     		 INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END
      	FETCH NEXT FROM curs INTO @docsubname
	PRINT @docsubname
	IF @@FETCH_STATUS = 0
	BEGIN
		SET @newdocsub = (RTRIM(@newdocsub) + ', ' + RTRIM(@docsubname))
		PRINT @newdocsub
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex
	END
   END
CLOSE curs
DEALLOCATE curs
SELECT *, (SELECT DocName FROM udt_Doc WHERE DocNum = 1) AS ScanName FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
DELETE FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spNGFCU_D01Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO


CREATE PROCEDURE [IMS].[spNGFCU_D01Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @joseq INT
DECLARE @jo1seq INT
DECLARE @jo2seq INT
DECLARE @jo3seq INT
DECLARE @jo4seq INT
DECLARE @count INT

DECLARE curs2 CURSOR FOR
	SELECT  CONVERT(int, JO.Sequence)
	FROM NewMemberJointOwner AS JO
	INNER JOIN NewMemberJointLink AS JL ON JO.Sequence = JL.JointSequence AND JL.TrackingNum = @TrackingNum
	INNER JOIN NewMemberSubAccount AS SA ON JL.SubAccountSequence = SA.Sequence AND SA.TrackingNum = @TrackingNum
	WHERE JO.TrackingNum = @TrackingNum AND (JO.JointOwnerType IN ('JO', 'TR', 'CN', 'PR', 'RP', 'AS', 'CO', 'DB', 'CR', 'GN', 'GL','CU')) AND SA.ProductType IN ('CC','CCA','IRA','LOC','MMA','PSA','RSA','SDA')
	GROUP BY CONVERT(int, JO.Sequence)

OPEN curs2
FETCH NEXT FROM curs2 INTO @joseq
SET @count = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
      	IF (@count = 0 AND @DocIndex = 1) OR (@count = 4 AND @DocIndex = 2) OR (@count = 8 AND @DocIndex = 3)
		BEGIN
			Set @jo1seq = @joseq
		END
	IF (@count = 1 AND @DocIndex = 1) OR (@count = 5 AND @DocIndex = 2) OR (@count = 9 AND @DocIndex = 3)
		BEGIN
			Set @jo2seq = @joseq		
		END
	IF (@count = 2 AND @DocIndex = 1) OR (@count = 6 AND @DocIndex = 2) OR (@count = 10 AND @DocIndex = 3)
		BEGIN
			Set @jo3seq = @joseq		
		END
	IF (@count = 3 AND @DocIndex = 1) OR (@count = 7 AND @DocIndex = 2) OR (@count = 11 AND @DocIndex = 3)
		BEGIN
			Set @jo4seq = @joseq		
		END
      	FETCH NEXT FROM curs2 INTO @joseq
	SET @count = @count + 1
	PRINT @count
   END
CLOSE curs2
DEALLOCATE curs2
PRINT 'Start Select'
SELECT @DocIndex AS DocIndex
	,  Extra.MemberNumber AS AcctNo
	, '' AS AcctName
	, Case When NMR.Department IN ('NGCA','NGCC','NGCI','NGCM','NGCT','EMPM','NGCN') Then 'X' Else '' End AS Check_EmployeeOf
	, Case 
		When NMR.Department = 'NGCA' then 'Aerospace Systems'
		When NMR.Department = 'NGCC' then 'Northrop Grumman Corporation'
		When NMR.Department = 'NGCI' then 'Innovation Systems'
		When NMR.Department = 'NGCM' then 'Mission Systems'
		When NMR.Department = 'NGCT' then 'Technology Services'
		When NMR.Department = 'EMPM' then 'LA Metropolitan Transportation Authority (Metro)'
		When NMR.Department = 'EMPN' then 'NGFCU'
		Else '' End AS EmployeeOf
	,  NMR.Qualification1 AS EmployeeNo
	, Case When NMR.Department IN ('MBR') AND NMR.Qualification2 != '' AND NMR.Qualification3 != '' Then 'X' Else '' End AS Check_FamilyMember
	, NMR.Qualification2 AS FamilyMemberName
	, NMR.Qualification3 AS Relationship
	, Case When NMR.Department IN ('SCHO') Then 'X' Else '' End AS Check_MemberOf
	,  Case 
		When NMR.Department = 'SCHO' then 'Southern California Historical Aircraft Foundation (SCHAF)'
		Else '' End AS MemberOf

	, CASE WHEN SAVRSA.Sequence != '' THEN 'X' END AS Check_RSA
	, CASE WHEN CKSDA.Sequence != '' THEN 'X' END AS Check_SDA
	, CASE WHEN ATM.Sequence != '' THEN 'X' END AS Check_ATM
	, CASE WHEN DEBIT.Sequence != '' THEN 'X' END AS Check_DEBIT
	, CASE WHEN DEBIT.Sequence != '' AND DEBIT.StockCode = 'J' THEN 'X' END AS Check_SPIRIT
	, CASE WHEN DEBIT.Sequence != '' AND DEBIT.StockCode = 'G' THEN 'X' END AS Check_GLOBE

	, CASE NMR.AccountClass WHEN 'P' THEN UPPER(RTRIM(RTRIM(NMR.FName) + ' '+ RTRIM(NMR.MInitial) + ' ' + RTRIM(NMR.LName) + ' ' + NMR.MECHTag)) ELSE UPPER(RTRIM(NMR.OrganizationName)) END AS PrimaryName
	, CASE NMR.AccountClass WHEN 'P' THEN '***-**-*' + RIGHT(NMR.SSN, 3) ELSE '**-****' + RIGHT(NMR.SSN, 3) END AS PrimarySSN
	--, CASE NMR.AccountClass WHEN 'P' THEN Left(NMR.SSN, 3) + '-' + LEFT(RIGHT(NMR.SSN, 6), 2) + '-' + RIGHT(NMR.SSN, 4) ELSE LEFT(NMR.SSN, 2) + '-' + RIGHT(NMR.SSN, 7) END AS PrimarySSN
	, CASE NMR.UseTodayForDOB WHEN 'Y' THEN CONVERT(char(10), NMR.CreatedOn, 101) ELSE CONVERT(char(10), NMR.DOB, 101) END AS PrimaryDOB
	, CASE NMR.AccountClass
		WHEN 'O' THEN RTRIM(RTRIM(Work.Address1) + CASE ISNULL(Work.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Work.Address2) END + CASE ISNULL(Work.Address3, '') WHEN '' THEN ' ' ELSE ', ' + RTRIM(Work.Address3) END)
		ELSE RTRIM(RTRIM(Home.Address1) + CASE ISNULL(Home.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Home.Address2) END + CASE ISNULL(Home.Address3, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Home.Address3) END)
	  END AS PrimaryHomeAddress
	, CASE NMR.AccountClass
		WHEN 'O' THEN Work.City
		ELSE Home.City
	  END AS PrimaryCity
	, CASE NMR.AccountClass
		WHEN 'O' THEN Work.State
		ELSE Home.State
	  END AS PrimaryState
	, CASE NMR.AccountClass
		WHEN 'O' THEN CASE LEN(Work.Zip) WHEN 9 THEN LEFT(Work.zip, 5) + '-' + Right(Work.Zip, 4) ELSE Work.Zip END
		ELSE CASE LEN(Home.Zip) WHEN 9 THEN LEFT(Home.Zip, 5) + '-' + Right(Home.Zip, 4) ELSE Home.Zip END
	  END AS PrimaryZip
	, Mailing.Address1 AS PrimaryMailingAddress
	, Mailing.City AS PrimaryMailingCity
	, Mailing.State AS PrimaryMailingState
	, CASE LEN(Mailing.Zip) WHEN 9 THEN LEFT(Mailing.Zip, 5) + '-' + Right(Mailing.Zip, 4) ELSE Mailing.Zip END AS PrimaryMailingZip
	, CASE LEN(Home.CellPhone) WHEN 7 THEN Home.CellPhoneAC + '-' + LEFT(Home.CellPhone, 3) + '-' + RIGHT(RTRIM(Home.CellPhone), 4) ELSE '' END AS PrimaryDPhone
	, CASE LEN(Home.CellPhone) WHEN 7 THEN Home.CellPhoneAC + '-' + LEFT(Home.CellPhone, 3) + '-' + RIGHT(RTRIM(Home.CellPhone), 4) ELSE '' END AS PrimaryMPhone
	, Home.Areacode + '-' + LEFT(Home.Phone, 3) + '-' + RIGHT(RTRIM(Home.Phone), 4) AS PrimaryHPhone
	, Work.Areacode + '-' + LEFT(Work.Phone, 3) + '-' + RIGHT(RTRIM(Work.Phone), 4) AS PrimaryWPhone
	, '' AS PrimaryFPhone
	, RTRIM(NMR.EMail1) AS PrimaryEmail
	, CASE NMR.IDType WHEN 'D' THEN RTRIM(NMR.DriversLicenseNum) ELSE RTRIM(NMR.IDNumber) END AS PrimaryDLNum
	, NMR.DriversLicenseState AS PrimaryDLState
	, CASE WHEN NMR.Gender = 'M' THEN 'X' ELSE '' END AS Check_PrimaryGender_M
	, CASE WHEN NMR.Gender = 'F' THEN 'X' ELSE '' END AS Check_PrimaryGender_F
	, RTRIM(NMR.MaidenName) AS PrimaryMaidenPassword --+ ' / ' + RTRIM(NMR.Password)
	, CASE NMR.AccountClass WHEN 'P' THEN RTRIM(Work.EmployerName) ELSE '' END AS PrimaryEmployer
	, CASE NMR.AccountClass WHEN 'P' THEN RTRIM(Work.JobTitle) ELSE '' END AS PrimaryOccupation
	--, CASE NMR.AccountClass WHEN 'P' THEN RTRIM(Work.address1) + CASE ISNULL(Work.address2, '') WHEN '' THEN '' ELSE ', ' + Work.address2 END + CASE ISNULL(Work.address3, '') WHEN '' THEN '' ELSE ', ' + Work.address3 END END AS PrimaryEmployerAddress
	--, CASE NMR.AccountClass WHEN 'P' THEN Work.City ELSE '' END AS PrimaryEmployerCity
	--, CASE NMR.AccountClass WHEN 'P' THEN Work.State ELSE '' END AS PrimaryEmployerState
	--, CASE NMR.AccountClass WHEN 'P' THEN CASE LEN(Work.Zip) WHEN 9 THEN LEFT(Work.zip, 5) + '-' + RIGHT(Work.Zip, 4) ELSE Work.Zip END ELSE '' END AS PrimaryEmployerZip

	, RTRIM(JO1.FullName) AS JOName
	, '***-**-*' + RIGHT(JO1.SSN, 3) AS JOSSN
	, JO1.DOB AS JODOB
	, RTRIM(JO1.Address) AS JOHomeAddress
	, JO1.City AS JOCity
	, JO1.State AS JOState
	, JO1.Zip AS JOZip
	, CASE WHEN JO1.CPhoneFull = '   -   -    ' THEN '' ELSE JO1.CPhoneFull END AS JODPhone
	, CASE WHEN JO1.HPhoneFull = '   -   -    ' THEN '' ELSE JO1.HPhoneFull END AS JOHPhone
	, '' AS JOFPhone
	, RTRIM(JO1.Email) AS JOEmail
	, JO1.DriversLicenseNum AS JODLNum
	, CASE WHEN LEN(JO1.DriversLicenseNum) > 0 THEN JO1.DriversLicenseState ELSE '' END AS JODLState
	, CASE WHEN JO1.Gender = 'M' THEN 'X' END AS Check_JOGender_M
	, CASE WHEN JO1.Gender = 'F' THEN 'X' END AS Check_JOGender_F
	, JO1.Relationship AS JORelationship
	, RTRIM(JO1.EmployerName) AS JOEmployer
	, RTRIM(JO1.JobTitle) AS JOOccupation
	, RTRIM(JO1.MaidenName) AS JOMaiden
	, '' AS JOEmployerAddress
	, '' AS JOEmployerCity
	, '' AS JOEmployerState
	, '' AS JOEmployerZip

	, '' AS RSAAmount
	, '' AS SDAAmount
	, '' AS CheckAmount
	, CASE WHEN NMR.C24Access = 'Y' THEN 'X' ELSE '' END AS Check_Call24
	, '' AS Call24PIN

	, RTRIM(BE1.FullName) AS BE1Name
	, '***-**-*' + RIGHT(BE1.SSN, 3) AS BE1SSN
	, BE1.DOB AS BE1DOB
	, RTRIM(BE1.Relationship) AS BE1Relationship
	, RTRIM(BE1.Address) + CHAR(13) + CHAR(10) + RTRIM(BE1.CityStateZip) AS BE1Address

	, BE2.FullName AS BE2Name
	, '***-**-*' + RIGHT(BE2.SSN, 3) AS BE2SSN
	, BE2.DOB AS BE2DOB
	, RTRIM(BE2.Relationship) AS BE2Relationship
	, RTRIM(BE2.Address) + CHAR(13) + CHAR(10) + RTRIM(BE2.CityStateZip) AS BE2Address

	, RTRIM(BE3.FullName) AS BE3Name
	, '***-**-*' + RIGHT(BE3.SSN, 3) AS BE3SSN
	, BE3.DOB AS BE3DOB
	, RTRIM(BE3.Relationship) AS BE3Relationship
	, RTRIM(BE3.Address) + CHAR(13) + CHAR(10) + RTRIM(BE3.CityStateZip) AS BE3Address

	, CASE WHEN NMR.BackupWithholding <> 'Y' THEN 'X' ELSE '' END AS Check_BWH_N
	, CASE WHEN NMR.BackupWithholding = 'Y' THEN 'X' ELSE '' END AS Check_BWH_Y


FROM NewMemberRequest As NMR
	JOIN NewMemberRequestExtra As Extra on NMR.TrackingNum = Extra.TrackingNum
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN NewMemberAddress As Mailing On NMR.TrackingNum = Mailing.TrackingNum
	LEFT OUTER JOIN fnNGFCU_GetJOType(@TrackingNum, 'JO', '', '', '') AS JO1 ON NMR.TrackingNum = JO1.TrackingNum AND JO1.JointSequence = 1
	LEFT OUTER JOIN fnNGFCU_GetJOType(@TrackingNum, 'BE', '', '', '') AS BE1 ON NMR.TrackingNum = BE1.TrackingNum AND BE1.JointSequence = 1
	LEFT OUTER JOIN fnNGFCU_GetJOType(@TrackingNum, 'BE', '', '', '') AS BE2 ON NMR.TrackingNum = BE2.TrackingNum AND BE2.JointSequence = 2
	LEFT OUTER JOIN fnNGFCU_GetJOType(@TrackingNum, 'BE', '', '', '') AS BE3 ON NMR.TrackingNum = BE3.TrackingNum AND BE3.JointSequence = 3
	LEFT OUTER JOIN fnNGFCU_GetPCPlastic(@TrackingNum, 1, 'P') AS ATM ON NMR.TrackingNum = ATM.TrackingNum
	LEFT OUTER JOIN fnNGFCU_GetPCPlastic(@TrackingNum, 1, 'D') AS DEBIT ON NMR.TrackingNum = DEBIT.TrackingNum
	LEFT OUTER JOIN fnNGFCU_GetSAType(@TrackingNum, 'PSA', 'S') AS SAVRSA ON NMR.TrackingNum = SAVRSA.TrackingNum	-- Regular Share
	LEFT OUTER JOIN fnNGFCU_GetSAType(@TrackingNum, 'SDA', 'S') AS CKSDA ON NMR.TrackingNum = CKSDA.TrackingNum		-- Share Draft
WHERE NMR.TrackingNum = @TrackingNum
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spNGFCU_D99Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spNGFCU_D99Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @docsubname CHAR(100)
DECLARE @newdocsub CHAR(100)
DECLARE @count INT
DECLARE @docindex INT
DECLARE curs CURSOR LOCAL FAST_FORWARD FOR

	SELECT '' AS docsubname
	FROM NewMemberRequest AS NMR
	WHERE NMR.TrackingNum = @TrackingNum AND @ApplicationMode <> 'EXTERNAL' --AND NMR.Processed = 999 AND NMR.Created IN ('Y', 'I')

OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @newdocsub = 'Credit Report ' + @docsubname
IF @docsubname Is Null
BEGIN
	SET @newdocsub = 'Credit Report'
END
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
	WHILE @@FETCH_STATUS = 0
	BEGIN
		SET @count = @count + 1
		PRINT @count
			IF @count = 1
		BEGIN
			Set @docindex = @docindex + 1
				 INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
		END
			FETCH NEXT FROM curs INTO @docsubname
		PRINT @docsubname
		IF @@FETCH_STATUS = 0
		BEGIN
			SET @newdocsub = (RTRIM(@newdocsub) + ', ' + RTRIM(@docsubname))
			PRINT @newdocsub
			UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex
		END
	END
CLOSE curs
DEALLOCATE curs
SELECT 'CreditReport' AS DocCode, * FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
DELETE FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Return 1

GO
/****** Object:  StoredProcedure [IMS].[spNGFCU_D99Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create PROCEDURE [IMS].[spNGFCU_D99Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

SELECT @DocIndex As DocIndex

FROM NewMemberRequest AS NMR
WHERE NMR.TrackingNum = @TrackingNum
Return 1

GO
/****** Object:  StoredProcedure [IMS].[spNGFCU_DG1Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spNGFCU_DG1Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

Return 1
GO
/****** Object:  StoredProcedure [IMS].[spNGFCU_DG1Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spNGFCU_DG1Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

Select 'Applications' AS GroupName From NewMemberRequest where trackingnum = @TrackingNum
GO
/****** Object:  StoredProcedure [IMS].[spNGFCU_DP1Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spNGFCU_DP1Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

Return 1
GO
/****** Object:  StoredProcedure [IMS].[spNGFCU_DP1Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spNGFCU_DP1Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

SELECT NMR.TrackingNum AS TrackingNumber
	, AltAddress.Address1 AS MailingAddress
	, NMR.CurrBranch As Branch
	, Branches.Description AS BranchName
	, CONVERT(char(10), GetDate(), 101) As TodayDate
	, DATENAME(MM, GetDate()) + RIGHT(CONVERT(char(12), GetDate(), 107), 9) As TodayDateFull
	, CONVERT(char(10), NMR.CreatedOn, 101) As CreatedOn
	, NMR.Account As Account
--	, CONVERT(char(2), Home.ResidenceYears, 101) + ' yrs  ' + CONVERT(char(2), Home.ResidenceMonths, 101) + ' mos' AS HowLong
	, NMR.FName, NMR.LName, NMR.MInitial
	, CASE NMR.AccountClass WHEN 'P' THEN UPPER(RTRIM(NMR.LName) + ', ' + RTRIM(RTRIM(NMR.FName) + ' ' + RTRIM(NMR.MInitial))) ELSE RTRIM(NMR.OrganizationName) END AS RevFullName
	, CASE NMR.AccountClass WHEN 'P' THEN UPPER(RTRIM(RTRIM(NMR.FName) + ' ' + RTRIM(NMR.LName) + ' ' + NMR.MECHTag)) ELSE UPPER(RTRIM(NMR.OrganizationName)) END AS FullName
	, CASE NMR.AccountClass WHEN 'P' THEN 'Dear ' + RTRIM(RTRIM(NMR.FName) + ' ' + RTRIM(NMR.LName) + ' ' + NMR.MECHTag) + ':' ELSE 'Dear ' + RTRIM(NMR.OrganizationName) + ':' END AS DearName
	, Home.Areacode + '-' + LEFT(Home.Phone, 3) + '-' + RIGHT(RTRIM(Home.Phone), 4) AS HPhoneFull
	, Home.CellPhoneAC + '-' + LEFT(Home.CellPhone, 3) + '-' + RIGHT(RTRIM(Home.CellPhone), 4) AS CPhoneFull
	, CASE NMR.UseTodayForDOB WHEN 'Y' THEN CONVERT(char(10), NMR.CreatedOn, 101) ELSE CONVERT(char(10), NMR.DOB, 101) END AS DOB
	, CASE NMR.AccountClass WHEN 'P' THEN Left(NMR.SSN, 3) + '-' + LEFT(RIGHT(NMR.SSN, 6), 2) + '-' + RIGHT(NMR.SSN, 4) ELSE LEFT(NMR.SSN, 2) + '-' + RIGHT(NMR.SSN, 7) END AS SSN
	, RTRIM(NMR.DriversLicenseNum) + '/' + NMR.DriversLicenseState AS DL
	, CASE WHEN NMR.IDType = 'D' AND NMR.DriversLicenseState <> '' AND NMR.DriversLicenseNum <> '' THEN 'Drivers License' ELSE NMR.IDSource END AS IDType
	, CASE NMR.IDType WHEN 'D' THEN RTRIM(NMR.DriversLicenseNum) ELSE RTRIM(NMR.IDNumber) END AS ID
	, CONVERT(char(10), NMR.IDIssueDate, 101) AS IDIssueDate
	, CONVERT(char(10), NMR.IDExpirationDate, 101) AS IDExpDate
	, NMR.DriversLicenseState AS IDState
	, NMR.MaidenName AS MaidenName
	, NMR.Password AS Password
	, NMR.CreatedBy AS Seller
	, NMR.Department AS Department
	, CASE WHEN NMR.Created = 'F' Or NMR.Created = 'H' Or NMR.Created = 'I' THEN '' ELSE 'X' END AS YesNewAccount
	, CASE WHEN NMR.Created = 'F' Or NMR.Created = 'H' Or NMR.Created = 'I' THEN 'X' END AS YesChangeAccount
--	, CASE WHEN NMR.Created = 'F' Or NMR.Created = 'H' Or NMR.Created = 'I' THEN NMR.Account END AS ChangeAccount
	, CASE NMR.AccountClass
		WHEN 'O' THEN RTRIM(RTRIM(Work.Address1) + CASE ISNULL(Work.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Work.Address2) END + CASE ISNULL(Work.Address3, '') WHEN '' THEN ' ' ELSE ', ' + RTRIM(Work.Address3) END)
		ELSE RTRIM(RTRIM(Home.Address1) + CASE ISNULL(Home.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Home.Address2) END + CASE ISNULL(Home.Address3, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Home.Address3) END)
	  END AS Address
	, CASE NMR.AccountClass
		WHEN 'O' THEN RTRIM(RTRIM(Work.Address1) + CASE ISNULL(Work.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Work.Address2) END + CASE ISNULL(Work.Address3, '') WHEN '' THEN ' ' ELSE ', ' + RTRIM(Work.Address3) END) + ', ' + RTRIM(Work.City) + ', ' + Work.State + ' ' + CASE LEN(Work.Zip) WHEN 9 THEN LEFT(Work.Zip, 5) + '-' + Right(Work.Zip, 4) ELSE Work.Zip END
		ELSE RTRIM(RTRIM(Home.Address1) + CASE ISNULL(Home.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Home.Address2) END + CASE ISNULL(Home.Address3, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Home.Address3) END) + ', ' + RTRIM(Home.City) + ', ' + Home.State + ' ' + CASE LEN(Home.Zip) WHEN 9 THEN LEFT(Home.Zip, 5) + '-' + Right(Home.Zip, 4) ELSE Home.Zip END
	  END AS FullAddress
	, CASE NMR.AccountClass
		WHEN 'O' THEN RTRIM(Work.city) + ', ' + Work.state + ' ' + CASE LEN(Work.Zip) WHEN 9 THEN LEFT(Work.zip, 5) + '-' + Right(Work.Zip, 4) ELSE Work.Zip END
		ELSE RTRIM(Home.city) + ', ' + Home.state + ' ' + CASE LEN(Home.Zip) WHEN 9 THEN LEFT(Home.zip, 5) + '-' + Right(Home.Zip, 4) ELSE Home.Zip END
	  END AS CityStateZip
	, CASE NMR.AccountClass
		WHEN 'O' THEN Work.City
		ELSE Home.City
	  END AS City
	, CASE NMR.AccountClass
		WHEN 'O' THEN Work.State
		ELSE Home.State
	  END AS State
	, CASE NMR.AccountClass
		WHEN 'O' THEN CASE LEN(Work.Zip) WHEN 9 THEN LEFT(Work.zip, 5) + '-' + Right(Work.Zip, 4) ELSE Work.Zip END
		ELSE CASE LEN(Home.Zip) WHEN 9 THEN LEFT(Home.zip, 5) + '-' + Right(Home.Zip, 4) ELSE Home.Zip END
	  END AS Zip		
	, RTRIM(NMR.Email1) AS Email
	, CASE NMR.AccountClass
		WHEN 'O' THEN Work.AreaCode
		ELSE Home.AreaCode
	  END AS AC
	, CASE NMR.AccountClass
		WHEN 'O' THEN LEFT(Work.Phone, 3) + '-' + RIGHT(RTRIM(Work.Phone), 4)
		ELSE LEFT(Home.Phone, 3) + '-' + RIGHT(RTRIM(Home.Phone), 4)
	  END AS Phone
	, CASE NMR.AccountClass WHEN 'P' THEN Work.EmployerName ELSE '' END AS WorkName
	, CASE NMR.AccountClass WHEN 'P' THEN Work.EmployerName ELSE '' END AS Employer
	, CASE NMR.AccountClass WHEN 'P' THEN RTRIM(Work.address1 + CASE Work.address2 WHEN '' THEN ''ELSE', ' END + Work.address2 + CASE Work.address3 WHEN '' THEN ''ELSE', ' END + Work.address3) ELSE '' END AS WorkAddress
	, CASE NMR.AccountClass WHEN 'P' THEN Work.City ELSE '' END AS WorkCity
	, CASE NMR.AccountClass WHEN 'P' THEN Work.State ELSE '' END AS WorkState
	, CASE NMR.AccountClass WHEN 'P' THEN CASE LEN(Work.Zip) WHEN 9 THEN LEFT(Work.zip, 5) + '-' + RIGHT(Work.Zip, 4) ELSE Work.Zip END ELSE '' END AS WorkZip
	, Work.AreaCode AS WorkAC, LEFT(Work.Phone, 3) + '-' + RIGHT(RTRIM(Work.Phone), 4)  AS WorkPhone
	, Work.AreaCode + '-' + LEFT(Work.Phone, 3) + '-' + RIGHT(RTRIM(Work.Phone), 4)  AS WPhoneFull
	, Work.JobTitle AS Position
	, Work.JobTitle AS Occupation
	, Work.ProfessionYears As WorkNumYears
	,  RTRIM(Work.EmployerName) + ' ' + RTRIM(Work.address1 + CASE Work.address2 WHEN '' THEN ''ELSE', ' END + Work.address2 + CASE Work.address3 WHEN '' THEN ''ELSE', ' END + Work.address3) + ', ' + RTRIM(Work.City) + ', ' + RTRIM(Work.State) + ' ' + CASE LEN(Work.Zip) WHEN 9 THEN LEFT(Work.zip, 5) + '-' + Right(Work.Zip, 4) ELSE Work.Zip END AS WorkNameAddress
	, Work.HireDate
	,   CASE Work.IncomeFrequency
	     	WHEN 'W'  THEN 'Week'
		WHEN 'B' THEN 'Bi-Week'
		WHEN 'M' THEN 'Month'
		WHEN 'S' THEN 'Semi-Month'
		WHEN 'Y' THEN 'Year'
	      END AS IncomeFrequency
	,   CASE Work.IncomeFrequency
	     	WHEN 'W'  THEN (Work.GrossIncome * 52)/100
		WHEN 'B' THEN (Work.GrossIncome * 26)/100
		WHEN 'M' THEN (Work.GrossIncome * 12)/100
		WHEN 'S' THEN (Work.GrossIncome * 24)/100
		WHEN 'Y' THEN (Work.GrossIncome)/100
	      END AS GrossIncome
	, Home.ResidenceYears AS NumYears
	, CASE NMR.AccountClass
		WHEN 'O' THEN 'Yes'
		ELSE CASE WHEN NMR.Citizenship = 'US' Or NMR.Citizenship = 'RA' THEN 'Yes' END
	  END AS YesNoUSCitizen
	, CASE NMR.AccountClass
		WHEN 'O' THEN 'X'
		ELSE CASE WHEN NMR.Citizenship = 'US' Or NMR.Citizenship = 'RA' THEN 'X' END
	  END AS YesUSCitizen
	, CASE NMR.AccountClass
		WHEN 'O' THEN ''
		ELSE CASE WHEN NMR.Citizenship != 'US' And NMR.Citizenship != 'RA' THEN 'X' END
	  END AS NoUSCitizen
	, 'X' AS YesEligible00
--	, CASE WHEN NMR.Qualification1 = 'Household' THEN 'X' END AS YesEligible01
--	, CASE WHEN NMR.Qualification1 = 'Relative' OR NMR.Qualification1 = 'Household' THEN NMR.Qualification2 END AS MemberName
--	, CASE WHEN NMR.Qualification1 = 'Relative' THEN NMR.Relationship END AS Relationship
--	, CASE WHEN NMR.Qualification1 = 'Location' THEN 'X' END AS YesEligible10
--	, CASE WHEN NMR.Qualification1 = 'Location' AND NMR.Qualification2 = 'BCOUNTY' THEN 'X' END AS YesEligible11
--	, CASE WHEN NMR.Qualification1 = 'Location' AND NMR.Qualification2 = 'CLARENDON' THEN 'X' END AS YesEligible12
--	, CASE WHEN NMR.Qualification1 = 'Location' AND NMR.Qualification2 = 'ORANGE' THEN 'X' END AS YesEligible13
--	, CASE WHEN NMR.Qualification1 = 'Location' AND NMR.Qualification2 = 'CALHOUN' THEN 'X' END AS YesEligible14
--	, CASE WHEN NMR.Qualification1 = 'Location' AND NMR.Qualification2 = 'DCOUNTY' THEN 'X' END AS YesEligible15
--	, CASE WHEN NMR.Qualification1 = 'Location' AND NMR.Qualification2 = 'UNDER' THEN 'X' END AS YesEligible16
--	, CASE WHEN NMR.Qualification1 = 'Location' AND NMR.Qualification2 = 'CCOUNTY' THEN 'X' END AS YesEligible17
--	, CASE WHEN NMR.Qualification1 = 'Location' AND NMR.Qualification2 = 'GEO COMM' THEN 'X' END AS YesEligible18
	, RTRIM(NMR.LName) + '/' + RTRIM(RTRIM(NMR.FName) + ' ' + NMR.MInitial) AS SlashName
	, '(' + RTRIM(LTRIM(CAST(NMR.CurrBranch AS VARCHAR(2)))) + ' - ' + RTRIM(Branches.[Description]) + ')' AS SellerBranch
	, 'SOUTH CAROLINA FEDERAL CREDIT UNION' AS HCCUName
	, 'P.O. BOX 190012' AS HCCUAddress
	, 'NORTH CHARLESTON, SC  29419-9012' AS HCCUCityStateZip
	, '(800)845-0432' AS HCCUPhone
FROM NewMemberRequest As NMR
	--INNER JOIN udt_AccountTypes AS AType On NMR.AccountType = AType.TypeCode
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN NewMemberAddress As AltAddress On NMR.TrackingNum = AltAddress.TrackingNum
	LEFT OUTER JOIN Branches On NMR.CurrBranch = Branches.BranchCode
	LEFT OUTER JOIN Departments ON NMR.Department = Departments.Department
WHERE NMR.TrackingNum = @TrackingNum
GO
/****** Object:  StoredProcedure [IMS].[spNGFCU_Eligibility_Select]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_Eligibility_Select
CREATE PROCEDURE [IMS].[spNGFCU_Eligibility_Select]
	@ZipCode varchar(5),
	@CensusTract varchar(10)
AS

IF IsNull(@CensusTract, '') = '' AND IsNull(@ZipCode, '') <> ''
BEGIN
	SELECT Department
	FROM udt_EligibilityByZip
	WHERE IsNull(ZipCode, '') = @ZipCode
END

IF IsNull(@CensusTract, '') <> '' AND IsNull(@ZipCode, '') <> ''
BEGIN
	SELECT Department
	FROM udt_EligibilityByZip
	WHERE IsNull(ZipCode, '') = @ZipCode AND IsNull(CensusTract, '') = @CensusTract
END
GO
/****** Object:  StoredProcedure [IMS].[spNGFCU_FedReservePendingTransaction_Select]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Jonathan Eagar
-- Create date: 8/25/2011
-- Description:	Returns all FedReserve Pending Transactions
-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_FedReservePendingTransaction_Select
-- =============================================
CREATE PROCEDURE [IMS].[spNGFCU_FedReservePendingTransaction_Select] 
	-- Add the parameters for the stored procedure here
	@NMRAccountNumber bigint
AS
BEGIN	
	SET @NMRAccountNumber = ISNULL(@NMRAccountNumber, 0)
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	-- Insert statements for procedure here
	
	DECLARE @TransactionSummary TABLE
	(		
		FundingBankID INT,
		TransferAmountTotal DECIMAL(18,2)		
	)
		
	IF @NMRAccountNumber = 0  
	BEGIN
	
	INSERT INTO @TransactionSummary(FundingBankID, TransferAmountTotal)	
	SELECT
		   FB.ID as FundingBankID,			  
		   SUM(FT.Amount) as TransferAmountTotal			   
	FROM IMS.NMRFundingBank FB INNER JOIN IMS.NMRFundingTransaction FT ON FB.ID = FT.FundingBankID						
	WHERE FT.DateTimeLastTransaction IS NULL AND FT.FundingType = 'B'
	GROUP BY FB.ID	
	
	SELECT  FRPT.* FROM
	( 
		(
		SELECT F.ID as FundingID,
			   F.AccountNumber as NMRAccountNumber,
			   FB.TrackingNum as NMRTrackingNumber,
			   NMR.LName + ', ' + NMR.FName as NMRMemberName,
			   FB.ID as FundingBankID,
			   0 as FundingTransactionID,
			   FB.RoutingNumber as FundingBankRouting,
			   FB.AccountNumberEncrypted as FundingBankAccountNumberEncrypted,
			   FB.AccountNumberLast4 as FundingBankAccountAccountLast4,
			   FB.BankName as FundingBankName,
			   FB.AccountType as FundingBankAccountType,
			   FB.Amount1 as VerificationAmount1,
			   FB.Amount2 as VerificationAmount2,
			   0 as TransferAmount,
			   0 as TransferAmountTotal,			   	
			   0 as TargetSubAccountSuffix,
			   0 as TargetSubAccountSeq,
			   FB.DateTimeCreated as DateTimeCreated
		FROM IMS.NMRFunding F INNER JOIN IMS.NMRFundingBank FB ON F.ID = FB.FundingID
								INNER JOIN IMS.NewMemberRequest NMR ON FB.TrackingNum = NMR.TrackingNum
		WHERE FB.VerificationStatus = 'P'	
		)
		UNION ALL
		(	
		SELECT F.ID as FundingID,
			   F.AccountNumber as NMRAccountNumber,
			   FB.TrackingNum as NMRTrackingNumber,			   
			   NMR.LName + ', ' + NMR.FName as NMRMemberName,
			   FB.ID as FundingBankID,
			   FT.ID as FundingTransactionID,
			   FB.RoutingNumber as FundingBankRouting,
			   FB.AccountNumberEncrypted as FundingBankAccountNumberEncrypted,
			   FB.AccountNumberLast4 as FundingBankAccountAccountLast4,
			   FB.BankName as FundingBankName,
			   FB.AccountType as FundingBankAccountType,
				0 as VerificationAmount1,
				0 as VerificationAmount2,
			   FT.Amount as TransferAmount,
			   TS.TransferAmountTotal as TransferAmountTotal,			
			   FT.TargetSubAccountSuffix as TargetSubAccountSuffix,
			   FT.TargetSubAccountSeq as TargetSubAccountSeq,
			   FT.DateTimeCreated as DateTimeCreated 
		FROM IMS.NMRFunding F INNER JOIN IMS.NMRFundingBank FB ON F.ID = FB.FundingID
								INNER JOIN IMS.NMRFundingTransaction FT ON FB.ID = FT.FundingBankID
									INNER JOIN IMS.NewMemberRequest NMR ON FB.TrackingNum = NMR.TrackingNum
										INNER JOIN @TransactionSummary TS ON FB.ID = TS.FundingBankID
		WHERE FT.DateTimeLastTransaction IS NULL AND FT.FundingType = 'B'
		)
	)  FRPT ORDER BY FRPT.NMRTrackingNumber, FRPT.FundingID, FRPT.FundingBankID, FRPT.FundingTransactionID	
	END	
	ELSE
	BEGIN
	
	INSERT INTO @TransactionSummary(FundingBankID, TransferAmountTotal)	
	SELECT	   		   
		   FB.ID as FundingBankID,			  
		   SUM(FT.Amount) as TransferAmountTotal			   
	FROM IMS.NMRFunding F INNER JOIN IMS.NMRFundingBank FB ON F.ID = FB.FundingID 
							INNER JOIN IMS.NMRFundingTransaction FT ON FB.ID = FT.FundingBankID						
	WHERE FT.DateTimeLastTransaction IS NULL AND 
		FT.FundingType = 'B' AND
		F.AccountNumber = @NMRAccountNumber	 
	GROUP BY FB.ID	
	  
	SELECT  FRPT.* FROM
	(   
		(
		SELECT F.ID as FundingID,
			   F.AccountNumber as NMRAccountNumber,
			   FB.TrackingNum as NMRTrackingNumber,
			   NMR.LName + ', ' + NMR.FName as NMRMemberName,
			   FB.ID as FundingBankID,
			   0 as FundingTransactionID,
			   FB.RoutingNumber as FundingBankRouting,
			   FB.AccountNumberEncrypted as FundingBankAccountNumberEncrypted,
			   FB.AccountNumberLast4 as FundingBankAccountAccountLast4,
			   FB.BankName as FundingBankName,
			   FB.AccountType as FundingBankAccountType,
			   FB.Amount1 as VerificationAmount1,
			   FB.Amount2 as VerificationAmount2,
			   0 as TransferAmount,
			   0 as TransferAmountTotal,
			   0 as TargetSubAccountSuffix,
			   0 as TargetSubAccountSeq,
			   FB.DateTimeCreated as DateTimeCreated
		FROM IMS.NMRFunding F INNER JOIN IMS.NMRFundingBank FB ON F.ID = FB.FundingID
								INNER JOIN IMS.NewMemberRequest NMR ON FB.TrackingNum = NMR.TrackingNum
		WHERE	FB.VerificationStatus = 'P' AND 
				F.AccountNumber = @NMRAccountNumber	
		)	
		UNION ALL
		(		
		SELECT F.ID as FundingID,
			   F.AccountNumber as NMRAccountNumber,
			   FB.TrackingNum as NMRTrackingNumber,
			   NMR.LName + ', ' + NMR.FName as NMRMemberName,
			   FB.ID as FundingBankID,
			   FT.ID as FundingTransactionID,
			   FB.RoutingNumber as FundingBankRouting,
			   FB.AccountNumberEncrypted as FundingBankAccountNumberEncrypted,
			   FB.AccountNumberLast4 as FundingBankAccountAccountLast4,
			   FB.BankName as FundingBankName,
			   FB.AccountType as FundingBankAccountType,
				0 as VerificationAmount1,
				0 as VerificationAmount2,
			   FT.Amount as TransferAmount,
			   TS.TransferAmountTotal as TransferAmountTotal,
			   FT.TargetSubAccountSuffix as TargetSubAccountSuffix,
			   FT.TargetSubAccountSeq as TargetSubAccountSeq,
			   FT.DateTimeCreated as DateTimeCreated
		FROM IMS.NMRFunding F 
				INNER JOIN IMS.NMRFundingBank FB ON F.ID = FB.FundingID
					INNER JOIN IMS.NMRFundingTransaction FT ON FB.ID = FT.FundingBankID
						INNER JOIN IMS.NewMemberRequest NMR ON FB.TrackingNum = NMR.TrackingNum
							INNER JOIN @TransactionSummary TS ON FB.ID = TS.FundingBankID
		WHERE	FT.DateTimeLastTransaction IS NULL AND 
				FT.FundingType = 'B' AND 
				F.AccountNumber = @NMRAccountNumber
		)
	)  FRPT	ORDER BY FRPT.NMRTrackingNumber, FRPT.FundingID, FRPT.FundingBankID, FRPT.FundingTransactionID
	END		
END

GO
/****** Object:  StoredProcedure [IMS].[spNGFCU_ILAApplicationSearch_Select]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_ILAApplicationSearch_Select
CREATE Procedure [IMS].[spNGFCU_ILAApplicationSearch_Select]
	@TrackingNum varchar(9),
	@SSN varchar(9),
	@Account varchar(9),
	@AppNumber varchar(9)
AS

DECLARE @SQL varchar(1000)
SET @SQL = 'SELECT AI.*, A.UserSessionXML FROM ILA_ApplicationInfo AI INNER JOIN ILA_Application A ON A.TrackingNum = AI.TrackingNum WHERE 1=1'
IF @TrackingNum <> '*'
BEGIN
	SET @SQL = @SQL + ' AND AI.TrackingNum = ''' + @TrackingNum + ''''
END
IF @SSN <> '*'
BEGIN
	SET @SQL = @SQL + ' AND AI.PrimarySSN = ''' + @SSN + ''''
END
IF @Account <> '*'
BEGIN
	SET @SQL = @SQL + ' AND AI.Account = ''' + @Account + ''''
END
IF @AppNumber <> '*'
BEGIN
	SET @SQL = @SQL + ' AND AI.AppNumber = ''' + @AppNumber + ''''
END

EXEC(@SQL)
GO
/****** Object:  StoredProcedure [IMS].[spNGFCU_OAOReport_ApplicationStatusReport]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_OAOReport_ApplicationStatusReport

CREATE Procedure [IMS].[spNGFCU_OAOReport_ApplicationStatusReport]
	@StartDate datetime,
	@StopDate datetime
AS

SELECT
	NMR.TrackingNum
	, UPPER(RTRIM(LEFT(NMR.FName, 1)) + ' ' + RTRIM(NMR.LName)) AS MemberName
	, NMR.ApplyDate AS [Date_Time]
	, NMR.CurrBranch AS Branch
	, CASE
		WHEN NMR.Processed = '1' THEN 'In-Process'
		WHEN NMR.Processed = '999' THEN 'Created'
		ELSE 'Denied'
		END AS Status
	, CASE
		WHEN (SELECT COUNT(*) FROM NMRFundingBank AS NMRFB WHERE NMRFB.TrackingNum = NMR.TrackingNum AND NMRFB.VerificationStatus <> 'X' AND NMRFB.VerificationStatus <> 'E') > 0 THEN 'ACH'
		WHEN (SELECT COUNT(*) FROM NMRFundingCard AS NMRFC WHERE NMRFC.TrackingNum = NMR.TrackingNum) > 0 THEN 'Credit Card'
		WHEN (SELECT COUNT(*) FROM NMRFundingTransaction AS NMRFT WHERE NMRFT.TrackingNum = NMR.TrackingNum AND NMRFT.SourceSubAccountSeq <> '') > 0 THEN 'Transfer'
		WHEN (SELECT FundingType FROM NMRFundingTransaction AS NMRFT WHERE NMRFT.TrackingNum = NMR.TrackingNum) = NULL THEN 'Skipped'
		ELSE 'None'
		END AS PaymentMethod
	, (SELECT SUM(Amount) FROM NMRFundingTransaction AS NMRFT WHERE NMRFT.TrackingNum = NMR.TrackingNum GROUP BY NMRFT.TrackingNum) AS InitialAmountFunded
	, NMR.Account AS AccountNumber
FROM IMS.NewMemberRequest NMR
WHERE
	NMR.Processed > 0
	AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> ''
	AND (NMR.ApplyDate >= @StartDate AND NMR.ApplyDate <= @StopDate)
GO
/****** Object:  StoredProcedure [IMS].[spNGFCU_OAOReport_FundingDetailReport]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_OAOReport_FundingDetailReport
CREATE Procedure [IMS].[spNGFCU_OAOReport_FundingDetailReport]
	@StartDate datetime,
	@StopDate datetime
AS

SELECT Bank, Card, Existing, Skipped FROM
(
	(SELECT COUNT(DISTINCT NMRFT.TrackingNum) AS Bank
	FROM IMS.NMRFundingTransaction NMRFT
	LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	INNER JOIN IMS.NMRFundingBank NMRFB ON NMRFB.ID = NMRFT.FundingBankID
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND NMRFT.FundingBankID <> '' AND NMR.Processed = 999 AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate) AND (NMRFB.VerificationStatus <> 'E') AND (NMRFB.VerificationStatus <> 'X')) a
		FULL OUTER JOIN
	(SELECT COUNT(DISTINCT NMRFT.TrackingNum) AS Card
	FROM IMS.NMRFundingTransaction NMRFT
	LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND NMRFT.FundingCardID <> '' AND NMR.Processed = 999 AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate)) b ON 1=1
		FULL OUTER JOIN
	(SELECT COUNT(DISTINCT NMRFT.TrackingNum) AS Existing
	FROM IMS.NMRFundingTransaction NMRFT
	LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND NMRFT.SourceSubAccountSeq <> '' AND NMR.Processed = 999 AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate)) c ON 1=1
		FULL OUTER JOIN
	(SELECT COUNT(DISTINCT NMR.TrackingNum) AS Skipped
	FROM IMS.NMRFundingTransaction NMRFT
	FULL OUTER JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND (NMR.Processed = 999 AND ISNULL(NMRFT.TrackingNum, 0) = 0) AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate)) d ON 1=1
)

UNION ALL

SELECT Bank, Card, Existing, Skipped FROM
(
	(SELECT COUNT(DISTINCT NMRFT.TrackingNum) AS Bank
	FROM IMS.NMRFundingTransaction NMRFT
	LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	INNER JOIN IMS.NMRFundingBank NMRFB ON NMRFB.ID = NMRFT.FundingBankID
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND NMRFT.FundingBankID <> '' AND NMR.Processed = 998 AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate) AND (NMRFB.VerificationStatus <> 'E') AND (NMRFB.VerificationStatus <> 'X')) a
		FULL OUTER JOIN
	(SELECT COUNT(DISTINCT NMRFT.TrackingNum) AS Card
	FROM IMS.NMRFundingTransaction NMRFT
	LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND NMRFT.FundingCardID <> '' AND NMR.Processed = 998 AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate)) b ON 1=1
		FULL OUTER JOIN
	(SELECT COUNT(DISTINCT NMRFT.TrackingNum) AS Existing
	FROM IMS.NMRFundingTransaction NMRFT
	LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND NMRFT.SourceSubAccountSeq <> '' AND NMR.Processed = 998 AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate)) c ON 1=1
		FULL OUTER JOIN
	(SELECT COUNT(DISTINCT NMR.TrackingNum) AS Skipped
	FROM IMS.NMRFundingTransaction NMRFT
	FULL OUTER JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND (NMR.Processed = 998 AND ISNULL(NMRFT.TrackingNum, 0) = 0) AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate)) d ON 1=1
)
GO
/****** Object:  StoredProcedure [IMS].[spNGFCU_ReviewQueue_SelectAll]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Jon Eagar
-- Create date: 7/08/2011
-- Description:	Lists the active NMR records for the Queue Review
-- =============================================
CREATE PROCEDURE [IMS].[spNGFCU_ReviewQueue_SelectAll] 
	-- Add the parameters for the stored procedure here
	@StartDate DATETIME = NULL,
	@EndDate DATETIME = NULL,
	@StatusCode VARCHAR(2) = NULL
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
 
	DECLARE @Hierarchy INT
	DECLARE @StatusID INT

	IF @StartDate IS NOT NULL AND @StartDate <> ''
	BEGIN
		SET @StartDate = CONVERT(DATETIME,(CONVERT(VARCHAR(10), @StartDate, 102)))  --Set Time to beginning of Day
		SET @EndDate = CAST( CONVERT(CHAR(10), @EndDate, 101) + ' 11:59 PM' AS DATETIME) --Set Time to end of day
	END
	
	SET @StatusCode = NULLIF(@StatusCode,'')

	DECLARE @ReviewQueue TABLE
	(
		ID INT IDENTITY(1,1) PRIMARY KEY CLUSTERED,
		TrackingNum INT,	
		Name VARCHAR(250),
		EmployerName VARCHAR(250),
		Account INT,
		StatusName VARCHAR(250),
		StatusID INT,
		FundingComplete VARCHAR(10), 
		ApplyDate DATETIME,
		Teller VARCHAR(50),
		LastPage VARCHAR(250),
		TNExpireDate DATETIME
	)

	IF (@StatusCode IS NOT NULL)
	BEGIN
		SELECT @Hierarchy=RQC.Hierarchy, @StatusID=RQC.ID FROM IMS.ReviewQueueConfig RQC WHERE RQC.StatusCode = @StatusCode
	END

	IF (@Hierarchy > 0)
	BEGIN
		--IDV DECLINE
		INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, TNExpireDate)
		SELECT	DISTINCT NMR.TrackingNum, 
				LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
				RTRIM(LTRIM(NMRW.EmployerName)) as EmployerName,			 
				NMR.Account, 
				RQC.StatusName,
				RQC.ID, 
				NMR.FundingComplete, 
				NMR.ApplyDate,
				(SELECT TOP 1 xuser.Initials FROM [IMS].[TellerAssignments] ta Inner Join [IMS].[xUserTable] xuser On ta.[AssignedToId] = xuser.ID WHERE ta.TrackingNumber = NMR.TrackingNum AND NullIf(xuser.Initials, '') IS NOT NULL ORDER BY ta.DateUpdated DESC) AS Seller,
				(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
				NMR.TNExpireDate
		FROM IMS.NewMemberRequest NMR 
				INNER JOIN 
				IMS.NewMemberManualApproval MA 
					ON NMR.TrackingNum = MA.TrackingNum 
						INNER JOIN IMS.ReviewQueueConfig RQC ON RQC.StatusCode = 'ID'
							LEFT JOIN IMS.NewMemberWork NMRW
								ON NMR.TrackingNum = NMRW.TrackingNum
		WHERE NMR.Processed NOT IN (-1, 998, 999) AND (MA.Category = 'ID' AND MA.ApprovalStatus = '') AND (@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate) AND DATALENGTH(NMR.UserSessionXML) > 0  AND NMR.UserSessionXML IS NOT NULL
		
		IF (@Hierarchy > 1 OR @StatusCode IS NULL)
		BEGIN
			--Miscellaneous Decline
			INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, TNExpireDate)
			SELECT	DISTINCT NMR.TrackingNum, 
					LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
					RTRIM(LTRIM(NMRW.EmployerName)) as EmployerName,				 
					NMR.Account, 
					RQC.StatusName,
					RQC.ID, 
					NMR.FundingComplete, 
					NMR.ApplyDate,
					(SELECT TOP 1 xuser.Initials FROM [IMS].[TellerAssignments] ta Inner Join [IMS].[xUserTable] xuser On ta.[AssignedToId] = xuser.ID WHERE ta.TrackingNumber = NMR.TrackingNum AND NullIf(xuser.Initials, '') IS NOT NULL ORDER BY ta.DateUpdated DESC) AS Seller,
					(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
					NMR.TNExpireDate
			FROM IMS.NewMemberRequest NMR 
					INNER JOIN 
					IMS.NewMemberManualApproval MA 
						ON NMR.TrackingNum = MA.TrackingNum AND MA.JointSequence = 0
							INNER JOIN IMS.ReviewQueueConfig RQC ON RQC.StatusCode = 'MD' AND RQC.ReasonCode = LTRIM(RTRIM(MA.ReasonCode))
								LEFT JOIN IMS.NewMemberWork NMRW
									ON NMR.TrackingNum = NMRW.TrackingNum					
			WHERE NOT EXISTS(SELECT TrackingNum FROM @ReviewQueue RQ Where RQ.TrackingNum = NMR.TrackingNum) AND
				  NMR.Processed NOT IN (-1, 998, 999) AND 
				  (MA.ApprovalStatus = '') AND (@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate)AND DATALENGTH(NMR.UserSessionXML) > 0  AND NMR.UserSessionXML IS NOT NULL

			IF (@Hierarchy > 2 OR @StatusCode IS NULL)
			BEGIN
				--Joint Decline
				INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, TNExpireDate)
				SELECT	DISTINCT NMR.TrackingNum, 
						LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
						RTRIM(LTRIM(NMRW.EmployerName)) as EmployerName,				 
						NMR.Account, 
						RQC.StatusName,
						RQC.ID, 
						NMR.FundingComplete, 
						NMR.ApplyDate,
						(SELECT TOP 1 xuser.Initials FROM [IMS].[TellerAssignments] ta Inner Join [IMS].[xUserTable] xuser On ta.[AssignedToId] = xuser.ID WHERE ta.TrackingNumber = NMR.TrackingNum AND NullIf(xuser.Initials, '') IS NOT NULL ORDER BY ta.DateUpdated DESC) AS Seller,
						(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
						NMR.TNExpireDate
				FROM IMS.NewMemberRequest NMR 
						INNER JOIN 
						IMS.NewMemberManualApproval MA 
							ON NMR.TrackingNum = MA.TrackingNum AND MA.JointSequence > 0
								INNER JOIN IMS.ReviewQueueConfig RQC ON RQC.StatusCode = 'JD' AND RQC.ReasonCode = LTRIM(RTRIM(MA.ReasonCode))
									LEFT JOIN IMS.NewMemberWork NMRW
										ON NMR.TrackingNum = NMRW.TrackingNum					
				WHERE NOT EXISTS(SELECT TrackingNum FROM @ReviewQueue RQ Where RQ.TrackingNum = NMR.TrackingNum) AND
					  NMR.Processed NOT IN (-1, 998, 999) AND 
					  (MA.ApprovalStatus = '') AND (@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate)AND DATALENGTH(NMR.UserSessionXML) > 0  AND NMR.UserSessionXML IS NOT NULL

				IF (@Hierarchy > 3 OR @StatusCode IS NULL)
				BEGIN
					--Manual Review
					INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, TNExpireDate)
					SELECT	DISTINCT NMR.TrackingNum, 
							LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
							RTRIM(LTRIM(NMRW.EmployerName)) as EmployerName,				 
							NMR.Account, 
							RQC.StatusName,
							RQC.ID, 
							NMR.FundingComplete, 
							NMR.ApplyDate,
							(SELECT TOP 1 xuser.Initials FROM [IMS].[TellerAssignments] ta Inner Join [IMS].[xUserTable] xuser On ta.[AssignedToId] = xuser.ID WHERE ta.TrackingNumber = NMR.TrackingNum AND NullIf(xuser.Initials, '') IS NOT NULL ORDER BY ta.DateUpdated DESC) AS Seller,
							(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
							NMR.TNExpireDate
					FROM IMS.NewMemberRequest NMR 
							INNER JOIN 
							IMS.NewMemberManualApproval MA 
								ON NMR.TrackingNum = MA.TrackingNum 
									INNER JOIN IMS.ReviewQueueConfig RQC ON RQC.StatusCode = 'MR' AND RQC.ReasonCode = LTRIM(RTRIM(MA.ReasonCode))
										LEFT JOIN IMS.NewMemberWork NMRW
											ON NMR.TrackingNum = NMRW.TrackingNum		
					WHERE NOT EXISTS(SELECT TrackingNum FROM @ReviewQueue RQ Where RQ.TrackingNum = NMR.TrackingNum) AND
						  NMR.Processed NOT IN (-1, 998, 999) AND 
						  (MA.ApprovalStatus = '') AND (@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate) AND DATALENGTH(NMR.UserSessionXML) > 0 AND NMR.UserSessionXML IS NOT NULL

					IF (@Hierarchy > 4 OR @StatusCode IS NULL)
					BEGIN
						--Need Decision/Pending
						INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, TNExpireDate)
						SELECT	DISTINCT NMR.TrackingNum, 
								LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
								RTRIM(LTRIM(NMRW.EmployerName)) as EmployerName,
								NMR.Account, 
								RQC.StatusName,
								RQC.ID, 
								NMR.FundingComplete, 
								NMR.ApplyDate,
								(SELECT TOP 1 xuser.Initials FROM [IMS].[TellerAssignments] ta Inner Join [IMS].[xUserTable] xuser On ta.[AssignedToId] = xuser.ID WHERE ta.TrackingNumber = NMR.TrackingNum AND NullIf(xuser.Initials, '') IS NOT NULL ORDER BY ta.DateUpdated DESC) AS Seller,
								(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
								NMR.TNExpireDate
						FROM IMS.NewMemberRequest NMR  
								INNER JOIN IMS.NewMemberSubAccount SA 
									ON NMR.TrackingNum = SA.TrackingNum
										INNER JOIN IMS.ReviewQueueConfig RQC ON RQC.StatusCode = 'DP'
											LEFT JOIN IMS.NewMemberWork NMRW
												ON NMR.TrackingNum = NMRW.TrackingNum
													LEFT JOIN IMS.NewMemberManualApproval MA 
														ON NMR.TrackingNum = MA.TrackingNum
						WHERE NOT EXISTS(SELECT TrackingNum FROM @ReviewQueue RQ Where RQ.TrackingNum = NMR.TrackingNum) AND
							  NMR.Processed NOT IN (-1, 998, 999) AND 
							  ((SA.Approval <> 'A' AND SA.ApprovedBy = '') OR (MA.ApprovalStatus = '')) AND 
							  (@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate) AND DATALENGTH(NMR.UserSessionXML) > 0 AND NMR.UserSessionXML IS NOT NULL

						IF (@Hierarchy > 5 OR @StatusCode IS NULL)
						BEGIN
							--In Progress
							INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, TNExpireDate)
							SELECT	DISTINCT NMR.TrackingNum, 
									LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
									RTRIM(LTRIM(NMRW.EmployerName)) as EmployerName,			 
									NMR.Account, 
									RQC.StatusName,
									RQC.ID, 
									NMR.FundingComplete, 
									NMR.ApplyDate,
									(SELECT TOP 1 xuser.Initials FROM [IMS].[TellerAssignments] ta Inner Join [IMS].[xUserTable] xuser On ta.[AssignedToId] = xuser.ID WHERE ta.TrackingNumber = NMR.TrackingNum AND NullIf(xuser.Initials, '') IS NOT NULL ORDER BY ta.DateUpdated DESC) AS Seller,
									(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
									NMR.TNExpireDate
							FROM IMS.NewMemberRequest NMR			
									INNER JOIN IMS.ReviewQueueConfig RQC 
										ON RQC.StatusCode = 'IP'
											LEFT JOIN IMS.NewMemberWork NMRW
												ON NMR.TrackingNum = NMRW.TrackingNum
							WHERE NOT EXISTS(SELECT TrackingNum FROM @ReviewQueue RQ WHERE RQ.TrackingNum = NMR.TrackingNum) AND
								  NMR.Processed = 1 AND 
								  (SELECT COUNT(TrackingNum) FROM IMS.NewMemberManualApproval MA WHERE MA.TrackingNum = NMR.TrackingNum AND MA.ApprovalStatus = '') = 0 AND
								  (SELECT COUNT(TrackingNum) FROM IMS.NewMemberSubAccount SA WHERE SA.TrackingNum = NMR.TrackingNum) = (SELECT COUNT(TrackingNum) FROM IMS.NewMemberSubAccount SA WHERE SA.TrackingNum = NMR.TrackingNum AND (SA.Approval = 'A' OR SA.ApprovedBy <> '')) AND	 
								  (@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate) AND DATALENGTH(NMR.UserSessionXML) > 0 AND NMR.UserSessionXML IS NOT NULL

							IF (@Hierarchy > 6 OR @StatusCode IS NULL)
							BEGIN
								--Not Funded
								INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, TNExpireDate)
								SELECT	DISTINCT NMR.TrackingNum, 
										LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
										RTRIM(LTRIM(NMRW.EmployerName)) as EmployerName,			 
										NMR.Account, 
										RQC.StatusName,
										RQC.ID, 
										NMR.FundingComplete, 
										NMR.ApplyDate,
										(SELECT TOP 1 xuser.Initials FROM [IMS].[TellerAssignments] ta Inner Join [IMS].[xUserTable] xuser On ta.[AssignedToId] = xuser.ID WHERE ta.TrackingNumber = NMR.TrackingNum AND NullIf(xuser.Initials, '') IS NOT NULL ORDER BY ta.DateUpdated DESC) AS Seller,
										(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
										NMR.TNExpireDate
								FROM IMS.NewMemberRequest NMR
									INNER JOIN IMS.ReviewQueueConfig RQC 
										ON RQC.StatusCode = 'NF'
											LEFT JOIN IMS.NewMemberWork NMRW
												ON NMR.TrackingNum = NMRW.TrackingNum
								WHERE NOT EXISTS(SELECT TrackingNum FROM @ReviewQueue RQ WHERE RQ.TrackingNum = NMR.TrackingNum) AND
									  NMR.Processed = 999 AND 
									  IsNull(FundingComplete, 'N') <> 'Y' AND
									  (@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate) AND DATALENGTH(NMR.UserSessionXML) > 0 AND NMR.UserSessionXML IS NOT NULL
								IF (@Hierarchy > 7 OR @StatusCode IS NULL)
								BEGIN
									--Minor Accounts
									INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, TNExpireDate)
									SELECT	DISTINCT NMR.TrackingNum, 
											LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
											'' as EmployerName,			 
											NMR.Account, 
											RQC.StatusName,
											RQC.ID, 
											NMR.FundingComplete, 
											NMR.ApplyDate,
											(SELECT TOP 1 xuser.Initials FROM [IMS].[TellerAssignments] ta Inner Join [IMS].[xUserTable] xuser On ta.[AssignedToId] = xuser.ID WHERE ta.TrackingNumber = NMR.TrackingNum AND NullIf(xuser.Initials, '') IS NOT NULL ORDER BY ta.DateUpdated DESC) AS Seller,
											(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
											NMR.TNExpireDate
									FROM IMS.NewMemberRequest NMR
										INNER JOIN IMS.ReviewQueueConfig RQC 
											ON RQC.StatusCode = 'MI'
												LEFT JOIN ims.SecureMailThread SMT ON SMT.TrackingNum = NMR.TrackingNum 
									WHERE 1=1 AND /*NOT EXISTS(SELECT TrackingNum FROM @ReviewQueue RQ WHERE RQ.TrackingNum = NMR.TrackingNum) AND*/
										  NMR.AccountType IN ('M1','M2') AND SMT.Subject IN ('School ID:','Birth Certificate:','State ID:') AND
										  (@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate) AND DATALENGTH(NMR.UserSessionXML) > 0 AND NMR.UserSessionXML IS NOT NULL

								END
							END
						END
					END	  
				END
			END
		END
		SELECT 
		TrackingNum as TrackingNumber,		 
		Name,
		EmployerName,
		Account,
		StatusName,
		CASE WHEN FundingComplete <> 'Y' THEN 'N' ELSE 'Y' END as FundingComplete,
		ApplyDate, 
		Teller, 
		LastPage, 
		TNExpireDate,
		(
			SELECT COUNT(*)
			FROM IMS.SecureMailThread SMT
			LEFT JOIN IMS.SecureMailAttachment SMA ON SMA.ThreadId = SMT.ThreadId
			WHERE SMT.TrackingNum = RQ.TrackingNum AND ISNULL(SMA.Status, 'U') = 'U'
		) AS AttachU,
		(
			SELECT COUNT(*)
			FROM IMS.SecureMailThread SMT
			LEFT JOIN IMS.SecureMailAttachment SMA ON SMA.ThreadId = SMT.ThreadId
			WHERE SMT.TrackingNum = RQ.TrackingNum AND SMA.Status = 'V'
		) AS AttachV,
		(
			SELECT COUNT(*)
			FROM IMS.SecureMailThread SMT
			LEFT JOIN IMS.SecureMailAttachment SMA ON SMA.ThreadId = SMT.ThreadId
			WHERE SMT.TrackingNum = RQ.TrackingNum AND SMA.Status = 'Q'
		) AS AttachQU,
		(
			SELECT COUNT(*)
			FROM IMS.SecureMailThread SMT
			LEFT JOIN IMS.SecureMailAttachment SMA ON SMA.ThreadId = SMT.ThreadId
			WHERE SMT.TrackingNum = RQ.TrackingNum AND SMA.Status = 'QV'
		) AS AttachQV
		FROM @ReviewQueue RQ 
		WHERE RQ.StatusID = @StatusID OR @StatusID IS NULL
		ORDER BY ApplyDate DESC
	END
END
GO
/****** Object:  StoredProcedure [IMS].[spNGFCU_SignOnOAO]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.SignOnOAO 
CREATE Procedure [IMS].[spNGFCU_SignOnOAO]
@TrackingNum int,
@Password varchar(24),
@SSN varchar(9),
@DOB datetime
AS
BEGIN
	SELECT
		n.TrackingNum, 
		ISNULL(CAST(n.Account AS VARCHAR(50)),'') AS Account, 
		n.UserSessionXML, 
		n.AccountType, 
		n.Created, 
		n.Processed, 
		n.TNExpireDate, 
		e.BadLoginAttempts
	FROM IMS.NewMemberRequest n
	JOIN IMS.NewMemberRequestExtra e ON n.TrackingNum = e.TrackingNum
	WHERE 
		n.TrackingNum = @TrackingNum 
		AND (
			(
				(n.Password = @Password COLLATE SQL_Latin1_General_CP1_CS_AS) 
				OR (
					n.SSN = @SSN 
					AND n.DOB = @DOB
				)
			) 
			AND n.Processed <> '998' 
			OR (@Password = 'MoDESTaFF')
		)
-- NOTE: The "COLLATE SQL_Latin1_General_CP1_CS_AS" above makes the password search case sensitive.
END
GO
/****** Object:  StoredProcedure [IMS].[spNGFCU_SyncCarts]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_SyncCarts

CREATE PROCEDURE [IMS].[spNGFCU_SyncCarts]
@TrackingNum int,
@SyncMode varchar(1)
AS

IF @SyncMode = 'S' OR @SyncMode = 'B' OR @SyncMode = 'Y'
BEGIN
	--Delete from cart where subaccount record no longer exists
	DELETE FROM IMS.NewMemberShoppingCart
	WHERE TrackingNum = @TrackingNum AND SubAccountID IS NOT NULL AND
		SubAccountID NOT IN (SELECT ID FROM IMS.NewMemberSubAccount
					WHERE TrackingNum = @TrackingNum)
END

IF @SyncMode = 'C' OR @SyncMode = 'B' OR @SyncMode = 'Y'
BEGIN
	--Delete from subaccounts where cart record no longer exists
	DELETE FROM IMS.NewMemberSubAccount
	WHERE TrackingNum = @TrackingNum AND ShoppingCartID IS NOT NULL AND
		ShoppingCartID NOT IN (SELECT ID FROM IMS.NewMemberShoppingCart
					WHERE TrackingNum = @TrackingNum)
END

IF @SyncMode = 'S' OR @SyncMode = 'B' OR @SyncMode = 'Y'
BEGIN
	--Update cart items with changes in the subaccount records
	UPDATE IMS.NewMemberShoppingCart
	SET RequestedAmount = (SELECT Amount FROM IMS.NewMemberSubAccount
				WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberShoppingCart.SubAccountID),
		InsuranceAmount1 = NULL,
		InsuranceAmount2 = NULL
	WHERE TrackingNum = @TrackingNum AND
		SubAccountID IN (SELECT ID FROM IMS.NewMemberSubAccount WHERE TrackingNum = @TrackingNum) AND
		IsNull((SELECT LineOfCredit FROM IMS.udt_LSubAccounts WHERE UniqueID = IMS.NewMemberShoppingCart.ProductID), 'N') = 'N' AND
		(SELECT Amount FROM IMS.NewMemberSubAccount WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberShoppingCart.SubAccountID) <> IMS.NewMemberShoppingCart.RequestedAmount + IsNull(IMS.NewMemberShoppingCart.InsuranceAmount1, 0) + IsNull(IMS.NewMemberShoppingCart.InsuranceAmount2, 0)

	UPDATE IMS.NewMemberShoppingCart
	SET RequestedAmount = (SELECT CreditLimit FROM IMS.NewMemberSubAccount
				WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberShoppingCart.SubAccountID),
		InsuranceAmount1 = NULL,
		InsuranceAmount2 = NULL
	WHERE TrackingNum = @TrackingNum AND
		SubAccountID IN (SELECT ID FROM IMS.NewMemberSubAccount WHERE TrackingNum = @TrackingNum) AND
		(SELECT LineOfCredit FROM IMS.udt_LSubAccounts WHERE UniqueID = IMS.NewMemberShoppingCart.ProductID) = 'Y' AND
		(SELECT CreditLimit FROM IMS.NewMemberSubAccount WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberShoppingCart.SubAccountID) <> IMS.NewMemberShoppingCart.RequestedAmount + IsNull(IMS.NewMemberShoppingCart.InsuranceAmount1, 0) + IsNull(IMS.NewMemberShoppingCart.InsuranceAmount2, 0)

	UPDATE IMS.NewMemberShoppingCart
	SET Term = (SELECT Term FROM IMS.NewMemberSubAccount
				WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberShoppingCart.SubAccountID)
	WHERE TrackingNum = @TrackingNum AND
		SubAccountID IN (SELECT ID FROM IMS.NewMemberSubAccount WHERE TrackingNum = @TrackingNum)

	--Create cart items for new subaccount records
	INSERT INTO IMS.NewMemberShoppingCart
	(ProductID, ProductName, YesNoMaybe, SLType, Approved, TrackingNum, MasterCategoryID, CategoryID,
	Exclude, CreatedBy, CreatedOn, Created, Fulfill, LOSProductID, LOSID,
	ApprovedAmount, RequestedAmount, Requires, LoanType, LoanSubType, Term, InsCode, ClosedFlag, LossFlag, SubAccountID)
	SELECT STP.ProductID, STP.ProductDesc, 'YES', STP.SLType, 'Y', @TrackingNum AS TrackingNum, STP.MasterCategoryID, STP.CategoryID,
		Prod.Exclude, SA.CreatedBy, SA.CreatedOn, SA.Created, STP.Fulfill, STP.LOSProductID, SA.LOSID,
		CASE WHEN Prod.LineOfCredit = 'Y' THEN SA.CreditLimit
		     ELSE SA.Amount
		END AS ApprovedAmount,
		CASE WHEN Prod.LineOfCredit = 'Y' THEN SA.CreditLimit
		     ELSE SA.Amount
		END AS RequestedAmount,
		STP.Requires, STP.LoanType, STP.LoanSubType, SA.Term, SA.InsCode, SA.ClosedFlag, SA.LossFlag, SA.ID AS SubAccountID
	FROM IMS.udt_SalesToolProducts STP INNER JOIN
		IMS.NewMemberSubAccount SA ON SA.SubAccountType = STP.ProductID INNER JOIN
		IMS.NewMemberRequest NMR ON SA.TrackingNum = NMR.TrackingNum INNER JOIN
		IMS.udt_AllSubAccounts Prod ON STP.ProductID = Prod.UniqueID AND ',' + RTrim(Prod.AccountTypes) + ',' LIKE '%,' + RTrim(NMR.AccountType) + ',%'
	WHERE SA.TrackingNum = @TrackingNum AND SA.SubAccountType NOT IN (SELECT ProductID FROM IMS.NewMemberShoppingCart WHERE TrackingNum = @TrackingNum)
	
	--Delete products that require products that are no longer here
	DELETE FROM IMS.NewMemberShoppingCart
	WHERE TrackingNum = @TrackingNum AND NullIf(Requires, '') IS NOT NULL AND
		(SELECT Count(SC2.ID) FROM IMS.NewMemberShoppingCart SC2 INNER JOIN
			(SELECT DISTINCT
			        SUBSTRING(l.List, v.Number+1, CHARINDEX(',', l.List, v.Number+1) -v.Number-1) AS Requires
			   FROM Master.dbo.spt_Values v
			  CROSS JOIN
			        (SELECT ',' + RTRIM(REPLACE(Requires, ', ', ',')) + ',' AS List
				FROM IMS.NewMemberShoppingCart
				WHERE TrackingNum = @TrackingNum AND ProductID = IMS.NewMemberShoppingCart.ProductID) l
			  WHERE v.Type = 'P'
			    AND v.Number BETWEEN 1 AND LEN(l.List)-1
			    AND SUBSTRING(l.List, v.Number, 1)=',') FN ON SC2.ProductID = FN.Requires
			WHERE TrackingNum = @TrackingNum AND SC2.ProductID <> IMS.NewMemberShoppingCart.ProductID) = 0
END

IF @SyncMode = 'C' OR @SyncMode = 'B' OR @SyncMode = 'Y'
BEGIN
	--Update subaccounts with changes in the cart records
	UPDATE IMS.NewMemberSubAccount
	SET Amount = (SELECT RequestedAmount + IsNull(InsuranceAmount1, 0) + IsNull(InsuranceAmount2, 0) FROM IMS.NewMemberShoppingCart
				WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberSubAccount.ShoppingCartID)
	WHERE TrackingNum = @TrackingNum AND
		ShoppingCartID IN (SELECT ID FROM IMS.NewMemberShoppingCart WHERE TrackingNum = @TrackingNum) AND
		IsNull((SELECT LineOfCredit FROM IMS.udt_LSubAccounts WHERE UniqueID = IMS.NewMemberSubAccount.SubAccountType), 'N') = 'N' AND
		(SELECT RequestedAmount + IsNull(InsuranceAmount1, 0) + IsNull(InsuranceAmount2, 0) FROM IMS.NewMemberShoppingCart WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberSubAccount.ShoppingCartID) <> IMS.NewMemberSubAccount.Amount

	UPDATE IMS.NewMemberSubAccount
	SET CreditLimit = (SELECT RequestedAmount + IsNull(InsuranceAmount1, 0) + IsNull(InsuranceAmount2, 0) FROM IMS.NewMemberShoppingCart
				WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberSubAccount.ShoppingCartID)
	WHERE TrackingNum = @TrackingNum AND
		ShoppingCartID IN (SELECT ID FROM IMS.NewMemberShoppingCart WHERE TrackingNum = @TrackingNum) AND
		(SELECT LineOfCredit FROM IMS.udt_LSubAccounts WHERE UniqueID = IMS.NewMemberSubAccount.SubAccountType) = 'Y' AND
		(SELECT RequestedAmount + IsNull(InsuranceAmount1, 0) + IsNull(InsuranceAmount2, 0) FROM IMS.NewMemberShoppingCart WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberSubAccount.ShoppingCartID) <> IMS.NewMemberSubAccount.CreditLimit

	UPDATE IMS.NewMemberSubAccount
	SET Term = (SELECT Term FROM IMS.NewMemberShoppingCart
				WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberSubAccount.ShoppingCartID)
	WHERE TrackingNum = @TrackingNum AND
		ShoppingCartID IN (SELECT ID FROM IMS.NewMemberShoppingCart WHERE TrackingNum = @TrackingNum)

	--Create subaccount records for new cart items
	INSERT INTO IMS.NewMemberSubAccount
	(TrackingNum, Sequence, DescAbrv, SubAccountType, Description, ACC, CollateralCode, SLType, Amount,
	Approval, Created, CreatedBy, CreatedOn, ProductType,
	CreditLimit, StartSuffix, StopSuffix, APR, CashAdvanceAPR, SkipCode, Coupons, Term, Method,
	Frequency, InsCode, DisclosureCode, ReviewDate, MaturityDate, Officer, CurrBranch, StatementOrder, MaturityDisp, 
	DividendDisp, LineofCredit, PaymentPercent, AllowPlastic1, AllowPlastic2, AllowPlastic3, AllowPlastic4, 
	CreateHost, HostCommand, ServiceClass, TaxCode, JointTaxCode, W8TaxCode, KTransferLink, LoanDiscounts, 
	MICRBegin, MICREnd, MICRFormat, PromptMICR, Purpose, FundingOrder, VRLIndex, VRLMargin, 
	VRLCode, VRLFreq, LOSProductID, LOSID, LossFlag, ClosedFlag, ShoppingCartID, Action, Payment)
	SELECT @TrackingNum AS TrackingNum, (SELECT Count(ID) FROM IMS.NewMemberShoppingCart SC2 WHERE TrackingNum = @TrackingNum AND SC2.Approved = 'Y' AND 
		SC2.ProductID NOT IN (SELECT SubAccountType FROM IMS.NewMemberSubAccount SA2 WHERE TrackingNum = @TrackingNum) AND SC2.ID <= SC.ID) + 
		(SELECT IsNull(Max(Sequence), 0) FROM IMS.NewMemberSubAccount SA3 WHERE TrackingNum = @TrackingNum) AS Sequence,
	Prod.DescAbrv, Prod.UniqueID, Prod.Description, Prod.ACC, Prod.CollateralCode, Prod.SLType,
	CASE WHEN Prod.LineOfCredit = 'Y' THEN 0
	     ELSE SC.RequestedAmount + IsNull(SC.InsuranceAmount1, 0) + IsNull(SC.InsuranceAmount2, 0)
	END AS Amount, NMR.Approval, SC.Created, SC.CreatedBy, SC.CreatedOn, Prod.ProductType,
	CASE WHEN Prod.LineOfCredit = 'Y' THEN SC.RequestedAmount
	     ELSE 0
	END AS CreditLimit, Prod.StartSuffix, Prod.StopSuffix, Prod.APR, Prod.CashAdvanceAPR, Prod.SkipCode, Prod.Coupons, Prod.Term, Prod.Method,
	Prod.Frequency, Prod.InsCode, Prod.DisclosureCode, Prod.ReviewDate, Prod.MaturityDate, Prod.Officer, Prod.CurrBranch, Prod.StatementOrder, Prod.MaturityDisp, 
	Prod.DividendDisp, Prod.LineofCredit, Prod.PaymentPercent, Prod.AllowPlastic1, Prod.AllowPlastic2, Prod.AllowPlastic3, Prod.AllowPlastic4, 
	Prod.CreateHost, Prod.HostCommand, Prod.ServiceClass, Prod.TaxCode,Prod.JointTaxCode, Prod.W8TaxCode, Prod.KTransferLink, Prod.LoanDiscounts, 
	Prod.MICRBegin, Prod.MICREnd, Prod.MICRFormat, Prod.PromptMICR, Prod.Purpose, Prod.FundingOrder, Prod.VRLIndex, Prod.VRLMargin, 
	Prod.VRLCode, Prod.VRLFreq, SC.LOSProductID, SC.LOSID, SC.LossFlag, SC.ClosedFlag, SC.ID AS ShoppingCartID, Prod.Action, 0
	FROM IMS.NewMemberShoppingCart SC INNER JOIN
		IMS.NewMemberRequest NMR ON SC.TrackingNum = NMR.TrackingNum INNER JOIN
		IMS.udt_AllSubAccounts Prod ON SC.ProductID = Prod.UniqueID AND ',' + RTrim(Prod.AccountTypes) + ',' LIKE '%,' + RTrim(NMR.AccountType) + ',%'
	WHERE SC.TrackingNum = @TrackingNum AND SC.Approved = 'Y' AND SC.ProductID NOT IN (SELECT SubAccountType FROM IMS.NewMemberSubAccount WHERE TrackingNum = @TrackingNum)
	ORDER BY ID
	
	--Delete products that require products that are no longer here
	/*DELETE NewMemberSubAccount FROM IMS.NewMemberSubAccount SA
	WHERE TrackingNum = @TrackingNum AND
		(SELECT NullIf(Requires, '') FROM IMS.udt_AllSubAccounts WHERE UniqueID = SA.SubAccountType) IS NOT NULL AND
		(SELECT Count(SA2.ID) FROM IMS.NewMemberSubAccount SA2 INNER JOIN
			(SELECT DISTINCT
			        SUBSTRING(l.List, v.Number+1, CHARINDEX(',', l.List, v.Number+1) -v.Number-1) AS Requires
			   FROM Master.dbo.spt_Values v
			  CROSS JOIN
			        (SELECT ',' + RTRIM(REPLACE(Requires, ', ', ',')) + ',' AS List
				FROM IMS.udt_AllSubAccounts
				WHERE UniqueID = SA.SubAccountType) l
			  WHERE v.Type = 'P'
			    AND v.Number BETWEEN 1 AND LEN(l.List)-1
			    AND SUBSTRING(l.List, v.Number, 1)=',') FN ON SA2.SubAccountType = FN.Requires
			WHERE TrackingNum = @TrackingNum AND SA2.SubAccountType <> SA.SubAccountType) = 0*/

	--Delete subaccounts that came from shopping cart items that are no longer approved
	DELETE FROM IMS.NewMemberSubAccount
	WHERE TrackingNum = @TrackingNum AND ((ID IN (SELECT SubAccountID
		FROM IMS.NewMemberShoppingCart
		WHERE TrackingNum = @TrackingNum AND SubAccountID IS NOT NULL AND
			Approved = 'N')) OR (ShoppingCartID IS NOT NULL AND 
		ShoppingCartID IN (SELECT ID
		FROM IMS.NewMemberShoppingCart
		WHERE TrackingNum = @TrackingNum AND Approved = 'N')))

	UPDATE IMS.NewMemberShoppingCart
	SET SubAccountID = NULL
	WHERE TrackingNum = @TrackingNum AND Approved = 'N'

	--Delete plastic cards for subaccounts that no longer exist
	DELETE FROM IMS.NewMemberPlasticCard
	WHERE TrackingNum = @TrackingNum AND Sequence IN (SELECT PlasticCardSequence
		FROM IMS.NewMemberSubAccountLink
		WHERE TrackingNum = @TrackingNum AND SubSequence NOT IN (SELECT Sequence
			FROM IMS.NewMemberSubAccount
			WHERE TrackingNum = @TrackingNum))

	DELETE FROM IMS.NewMemberSubAccountLink
	WHERE TrackingNum = @TrackingNum AND SubSequence NOT IN (SELECT Sequence
		FROM IMS.NewMemberSubAccount
		WHERE TrackingNum = @TrackingNum)

	--Delete flags for subaccounts that no longer exist
	DELETE FROM IMS.NewMemberFlag
	WHERE TrackingNum = @TrackingNum AND IsNull(SubAccountSequence, 0) > 0 AND
		SubAccountSequence NOT IN (SELECT Sequence
		FROM IMS.NewMemberSubAccount
		WHERE TrackingNum = @TrackingNum)

	--Delete joint owner links for subaccounts that no longer exist
	DELETE FROM IMS.NewMemberJointLink
	WHERE TrackingNum = @TrackingNum AND SubAccountSequence NOT IN (SELECT Sequence
		FROM IMS.NewMemberSubAccount
		WHERE TrackingNum = @TrackingNum)

	--Delete overdraft links for subaccount that no longer exist
	DELETE FROM IMS.NewMemberOverdraftLink
	WHERE TrackingNum = @TrackingNum AND ((TargetSubAccount > 0 AND
		TargetSubAccount NOT IN (SELECT Sequence
		FROM IMS.NewMemberSubAccount
		WHERE TrackingNum = @TrackingNum)) OR (SourceSubAccount > 0 AND
		SourceSubAccount NOT IN (SELECT Sequence
		FROM IMS.NewMemberSubAccount
		WHERE TrackingNum = @TrackingNum)))
END

--Synchronize IDs
UPDATE IMS.NewMemberSubAccount
SET ShoppingCartID = (SELECT ID FROM IMS.NewMemberShoppingCart
			WHERE TrackingNum = @TrackingNum AND SubAccountID = IMS.NewMemberSubAccount.ID)
WHERE TrackingNum = @TrackingNum AND (SELECT ID FROM IMS.NewMemberShoppingCart
			WHERE TrackingNum = @TrackingNum AND SubAccountID = IMS.NewMemberSubAccount.ID) IS NOT NULL

UPDATE IMS.NewMemberShoppingCart
SET SubAccountID = (SELECT ID FROM IMS.NewMemberSubAccount
			WHERE TrackingNum = @TrackingNum AND ShoppingCartID = IMS.NewMemberShoppingCart.ID)
WHERE TrackingNum = @TrackingNum AND (SELECT ID FROM IMS.NewMemberSubAccount
			WHERE TrackingNum = @TrackingNum AND ShoppingCartID = IMS.NewMemberShoppingCart.ID) IS NOT NULL
GO
/****** Object:  StoredProcedure [IMS].[spNGFCU_UnreconciledFunding_Select]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		Jonathan Eagar
-- Create date: 5/08/2009
-- Description:	Returns all unreconciled transactions
-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_UnreconciledFunding_Select
-- =============================================
CREATE PROCEDURE [IMS].[spNGFCU_UnreconciledFunding_Select] 
	-- Add the parameters for the stored procedure here
	@AccountNumber bigint
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
    -- Insert statements for procedure here
     -- Insert statements for procedure here
    IF ISNULL(@AccountNumber, 0) = 0  
    BEGIN
		SELECT	FS.AccountNumber, 
				FS.FundingTransactionID, 
				FS.TrackingNum, 
				FS.GatewayPaymentID, 
				FS.GatewayPaymentStatus, 
				FS.FundingAccountID, 
				FS.FundingType, 
				FS.TargetSubAccountSeq, 
				FS.TargetSubAccountSuffix, 
				FS.TransferAmount, 
				FS.DateTimeCreated, 
				FS.DateTimeLastTransaction,
				FS.MemberName,
				FS.SourceBankName,
				FS.SourceBankRouting,
				FS.SourceAccountLast4,
				FS.SourceCardType
		FROM
		(
			SELECT	VF.AccountNumber, 
					VF.FundingTransactionID , 
					VF.TrackingNum, 
					VF.GatewayPaymentID, 
					PS.PaymentStatus as GatewayPaymentStatus, 
					VF.FundingAccountID, 
					VF.FundingType, 
					VF.TargetSubAccountSeq, 
					VF.TargetSubAccountSuffix, 
					VF.TransferAmount, 
					VF.DateTimeCreated, 
					VF.DateTimeLastTransaction,
					VF.MemberName,
					VF.SourceBankName,
					VF.SourceBankRouting,
					VF.SourceAccountLast4,
					VF.SourceCardType
			FROM
			(	
				(
					SELECT	F.AccountNumber, 
							FT.ID as FundingTransactionID, 
							FT.TrackingNum, 
							FT.GatewayPaymentID, 
							FB.ID as FundingAccountID, 
							FT.FundingType, 
							FT.TargetSubAccountSeq,	
							FT.TargetSubAccountSuffix, 
							FT.Amount as TransferAmount, 
							FT.DateTimeCreated, 
							FT.DateTimeLastTransaction,
							NMR.FName + ' ' + NMR.LName as MemberName,
							FB.BankName as SourceBankName,
							FB.RoutingNumber as SourceBankRouting,
							FB.AccountNumberLast4 as SourceAccountLast4,
							'' as SourceCardType
					FROM IMS.NewMemberRequest as NMR 
					INNER JOIN IMS.NMRFundingTransaction AS FT ON NMR.TrackingNum = FT.TrackingNum
					INNER JOIN IMS.NMRFundingBank AS FB ON FT.FundingBankID = FB.ID 
					INNER JOIN IMS.NMRFunding as F ON F.ID = FB.FundingID 
					WHERE FT.DateTimeReconciled IS NULL
				)
				UNION ALL
				(
					SELECT F.AccountNumber, 
					FT.ID as FundingTransactionID, 
					FT.TrackingNum, 
					FT.GatewayPaymentID, 
					FC.ID as FundingAccountID, 
					FT.FundingType, 
					FT.TargetSubAccountSeq,	
					FT.TargetSubAccountSuffix, 
					FT.Amount as TransferAmount, 
					FT.DateTimeCreated, 
					FT.DateTimeLastTransaction,
					NMR.FName + ' ' + NMR.LName as MemberName,
					'' as SourceBankName,
					'' as SourceBankRouting,
					FC.AccountNumberLast4 as SourceAccountLast4,
					FC.CardType as SourceCardType
					FROM IMS.NewMemberRequest as NMR 
					INNER JOIN IMS.NMRFundingTransaction AS FT ON NMR.TrackingNum = FT.TrackingNum
					INNER JOIN IMS.NMRFundingCard AS FC ON FT.FundingCardID = FC.ID 
					INNER JOIN IMS.NMRFunding as F ON F.ID = FC.FundingID 
					WHERE FT.DateTimeReconciled IS NULL
				)
			)AS VF LEFT OUTER JOIN IMS.USAePayPaymentStatus AS PS ON VF.GatewayPaymentID = PS.PaymentId
		) AS FS	ORDER BY DateTimeCreated
    END		
    ELSE
	BEGIN    
		SELECT	FS.AccountNumber, 
				FS.FundingTransactionID, 
				FS.TrackingNum, 
				FS.GatewayPaymentID, 
				FS.GatewayPaymentStatus, 
				FS.FundingAccountID, 
				FS.FundingType, 
				FS.TargetSubAccountSeq, 
				FS.TargetSubAccountSuffix, 
				FS.TransferAmount, 
				FS.DateTimeCreated, 
				FS.DateTimeLastTransaction,
				FS.MemberName,
				FS.SourceBankName,
				FS.SourceBankRouting,
				FS.SourceAccountLast4,
				FS.SourceCardType
		FROM
		(
			SELECT	VF.AccountNumber, 
					VF.FundingTransactionID, 
					VF.TrackingNum, 
					VF.GatewayPaymentID, 
					PS.PaymentStatus as GatewayPaymentStatus, 
					VF.FundingAccountID, 
					VF.FundingType, 
					VF.TargetSubAccountSeq, 
					VF.TargetSubAccountSuffix, 
					VF.TransferAmount, 
					VF.DateTimeCreated, 
					VF.DateTimeLastTransaction,
					VF.MemberName,
					VF.SourceBankName,
					VF.SourceBankRouting,
					VF.SourceAccountLast4,
					VF.SourceCardType
			FROM
			(	
				(
					SELECT	F.AccountNumber, 
							FT.ID as FundingTransactionID, 
							FT.TrackingNum, 
							FT.GatewayPaymentID, 
							FB.ID as FundingAccountID, 
							FT.FundingType, 
							FT.TargetSubAccountSeq,	
							FT.TargetSubAccountSuffix, 
							FT.Amount as TransferAmount, 
							FT.DateTimeCreated, 
							FT.DateTimeLastTransaction,
							NMR.FName + ' ' + NMR.LName as MemberName,
							FB.BankName as SourceBankName,
							FB.RoutingNumber as SourceBankRouting,
							FB.AccountNumberLast4 as SourceAccountLast4,
							'' as SourceCardType
					FROM IMS.NewMemberRequest as NMR 
					INNER JOIN IMS.NMRFundingTransaction AS FT ON NMR.TrackingNum = FT.TrackingNum
					INNER JOIN IMS.NMRFundingBank AS FB ON FT.FundingBankID = FB.ID 
					INNER JOIN IMS.NMRFunding as F ON F.ID = FB.FundingID 
					WHERE F.AccountNumber = @AccountNumber AND FT.DateTimeReconciled IS NULL
				)
				UNION ALL
				(
					SELECT	F.AccountNumber, 
							FT.ID as FundingTransactionID, 
							FT.TrackingNum, FT.GatewayPaymentID, 
							FC.ID as FundingAccountID, 
							FT.FundingType, 
							FT.TargetSubAccountSeq,	
							FT.TargetSubAccountSuffix, 
							FT.Amount as TransferAmount, 
							FT.DateTimeCreated, 
							FT.DateTimeLastTransaction,
							NMR.FName + ' ' + NMR.LName as MemberName,
							'' as SourceBankName,
							'' as SourceBankRouting,
							FC.AccountNumberLast4 as SourceAccountLast4,
							FC.CardType as SourceCardType
					FROM IMS.NewMemberRequest as NMR 
					INNER JOIN IMS.NMRFundingTransaction AS FT ON NMR.TrackingNum = FT.TrackingNum
					INNER JOIN IMS.NMRFundingCard AS FC ON FT.FundingCardID = FC.ID 
					INNER JOIN IMS.NMRFunding as F ON F.ID = FC.FundingID 
					WHERE F.AccountNumber = @AccountNumber AND FT.DateTimeReconciled IS NULL
				)
			)AS VF LEFT OUTER JOIN IMS.USAePayPaymentStatus AS PS ON VF.GatewayPaymentID = PS.PaymentId
		) AS FS	ORDER BY DateTimeCreated
    END		
END

GO
/****** Object:  StoredProcedure [IMS].[spNGFCU_UnreconciledVerification_Select]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_UnreconciledVerification_Select
CREATE PROCEDURE [IMS].[spNGFCU_UnreconciledVerification_Select]
	-- Add the parameters for the stored procedure here
	@AccountNumber bigint
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
    IF ISNULL(@AccountNumber, 0) = 0  
    BEGIN
		SELECT      NMRFunding.AccountNumber, NMRFundingBank.ID as FundingBankID, IMS.fnNGFCU_GetUSAePayPaymentStatus(NMRFundingBank.GatewayPaymentID1) as GatewayPaymentStatus1, IMS.fnNGFCU_GetUSAePayPaymentStatus(NMRFundingBank.GatewayPaymentID2) as GatewayPaymentStatus2, NMRFundingBank.TrackingNum, NMRFundingBank.AccountNumberLast4, 
						  NMRFundingBank.BankName, NMRFundingBank.AccountType, NMRFundingBank.Amount1, NMRFundingBank.Amount2, 
						  NMRFundingBank.PSIErrorMessage, NMRFundingBank.DateTimeCreated, NMRFundingBank.DateTimeExported, NMRFundingBank.DateTimeLastTransaction
		FROM         NMRFundingBank INNER JOIN
						  NMRFunding ON NMRFundingBank.FundingID = NMRFunding.ID
		WHERE     (NMRFundingBank.DateTimeVerificationReconciled IS NULL AND NMRFundingBank.VerificationStatus = 'V')
    END
    ELSE
	BEGIN    
		SELECT      NMRFunding.AccountNumber, NMRFundingBank.ID as FundingBankID, IMS.fnNGFCU_GetUSAePayPaymentStatus(NMRFundingBank.GatewayPaymentID1) as GatewayPaymentStatus1, IMS.fnNGFCU_GetUSAePayPaymentStatus(NMRFundingBank.GatewayPaymentID2) as GatewayPaymentStatus2, NMRFundingBank.TrackingNum, NMRFundingBank.AccountNumberLast4, 
						  NMRFundingBank.BankName, NMRFundingBank.AccountType, NMRFundingBank.Amount1, NMRFundingBank.Amount2, 
						  NMRFundingBank.PSIErrorMessage, NMRFundingBank.DateTimeCreated, NMRFundingBank.DateTimeExported, NMRFundingBank.DateTimeLastTransaction
		FROM         NMRFundingBank INNER JOIN
						  NMRFunding ON NMRFundingBank.FundingID = NMRFunding.ID
		WHERE     (NMRFunding.AccountNumber = @AccountNumber AND DateTimeVerificationReconciled IS NULL AND NMRFundingBank.VerificationStatus = 'V')       
    END	
END


GO
/****** Object:  StoredProcedure [IMS].[spNMR_PurgeRecords]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spNMR_PurgeRecords]
AS
BEGIN
	SET NOCOUNT ON;

    Declare @KeepForDays int
    Declare @ActiveDateWhenNull datetime
	
	Select 
		@KeepForDays = PurgeNewMemberRecordsAfterDays, 
		@ActiveDateWhenNull = IsNull(PurgeMissingActivationDatesAsDate, '01/01/2999') -- you've got 980 years to replace this...
	from IMS.udt_ClientSettings

	if @KeepForDays Is Not Null 
	BEGIN
		Declare @PurgeDate DateTime
		Set @PurgeDate = DateAdd(DAY, -(@KeepForDays), GETUTCDATE())

		Create Table #TempTrackingNumsToDrop
		(
			TrackingNum int
		)

		--If the record has no apply date, then we consider the first of 2020 as the applydate
		Insert into #TempTrackingNumsToDrop
		select TrackingNum from IMS.NewMemberRequest Where IsNull(ApplyDate, @ActiveDateWhenNull) < @PurgeDate

		DECLARE @TrackingNumberOfDoom int

		--We are running this on a cursor, which is normally not recommended, but I don't want to lock up the database to do a cleanup of old records: 
		Declare CursorOfDestruction CURSOR FOR Select TrackingNum From #TempTrackingNumsToDrop
		OPEN CursorOfDestruction

		FETCH NEXT FROM CursorOfDestruction INTO @TrackingNumberOfDoom

		WHILE @@FETCH_STATUS = 0
		BEGIN
			DELETE FROM IMS.NewMemberAddress WHERE TrackingNum = @TrackingNumberOfDoom 
			DELETE FROM IMS.NewMemberBeneficiary WHERE TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.NewMemberBeneficiaryLink WHERE TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.NewMemberBureauPassword WHERE TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.NewMemberCertificateLink WHERE TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.NewMemberChangeHistory WHERE TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.NewMemberCheckOrder WHERE TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.NewMemberCheckOrderSimple WHERE TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.NewMemberClub WHERE TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.NewMemberCoApp WHERE TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.NewMemberCoAppLink WHERE TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.NewMemberCreditReport WHERE TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.NewMemberCreditReportLog WHERE TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.NewMemberDoc WHERE TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.NewMemberFlag WHERE TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.NewMemberFollowUp WHERE TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.NewMemberFunds WHERE TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.NewMemberHome WHERE TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.NewMemberID WHERE TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.NewMemberInvestmentAdd WHERE TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.NewMemberIVRAccess WHERE TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.NewMemberJointLink WHERE TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.NewMemberJointOwner WHERE TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.NewMemberLoanPlan WHERE TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.NewMemberManualApproval WHERE TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.NewMemberManualApprovalLog WHERE TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.NewMemberMemo WHERE TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.NewMemberOverdraftLink WHERE TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.NewMemberPaymentProfile WHERE TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.NewMemberPlasticCard WHERE TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.NewMemberQuestion WHERE TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.NewMemberReference WHERE TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.NewMemberRequest WHERE TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.NewMemberRequestExtra WHERE TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.NewMemberRequestTracking WHERE TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.NewMemberShoppingCart WHERE TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.NewMemberStaffInfo WHERE TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.NewMemberSubAccount WHERE TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.NewMemberSubAccountLink WHERE TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.NewMemberTradeProspect WHERE TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.NewMemberWork WHERE TrackingNum = @TrackingNumberOfDoom

		    DELETE FROM IMS.ActionLog where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.CheckLog where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.Corelation_CreditPull where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.CRCH where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.CRCHPledges where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.CRCHRelatedSuffix where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.CRCHSuffix where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.DeluxeAccount where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.DeluxeAdditionalVerificationOFACMatch where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.DeluxeAddress where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.DeluxeAgentInfo where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.DeluxeBankInfo where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.DeluxeConsumer where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.DeluxeDepAcctId where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.DeluxeDetectPhone where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.DeluxeDispute where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.DeluxeIdentityVerificationResultMessage where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.DeluxeInquiryResponse where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.DeluxeManualApproval where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.DeluxeMatch where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.DeluxeMatchRecord where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.DeluxeMiscText where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.DeluxeOFACAlias where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.DeluxeOFACSanctions where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.DeluxeOrgInfo where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.DeluxeOutOfWalletError where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.DeluxeOutOfWalletIDScoreRequest where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.DeluxeOutOfWalletQuizQuestion where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.DeluxeOutOfWalletQuizQuestionChoice where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.DeluxeOutOfWalletQuizRequest where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.DeluxeOutOfWalletQuizResponse where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.DeluxeOutOfWalletQuizResponseRequest where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.DeluxePersonInfo where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.DeluxePersonName where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.DeluxePhoneNum where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.DeluxePostAddr where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.DeluxeProgram where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.DeluxeReply where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.DeluxeRequest where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.Diagnostic where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.Document where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.DocuSignEnvelope where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.EF2_AccountActionInfo where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.EF2_BusinessQuery where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.EF2_BusinessReportReply where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.EF2_BussIDBActions where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.EF2_BussIDBOverride where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.EF2_BussOFACOverride where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.EF2_ChexIDVActions where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.EF2_ChexIDVOverride where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.EF2_ChexOFACOverride where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.EF2_CreditBureauInfo where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.EF2_CustIdLog where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.EF2_KBADecision where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.EF2_KBAPerson where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.EF2_KBAQuestion where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.EF2_KBAQuestions where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.EF2_ManualApproval where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.EF2_MicrConsumer where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.EF2_MicrMatchData where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.EF2_MicrMatchResponse where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.EF2_MicrRiskConsumer where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.EF2_MicrRiskData where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.EF2_MicrRiskResponse where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.EF2_MicrRiskResult where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.EF2_MicrValidationsresult where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.EF2_PersonQuery where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.EF2_ProductOffer where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.EF2_QualiFileInformation where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.EF2_QualiFileReason where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.EF2_QualifileResponse where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.EF2_ReferenceInformation where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.EF2_ReportReply where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.EquifaxAddress where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.EquifaxAlertContact where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.EquifaxBankruptcy where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.EquifaxBeacon where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.EquifaxCCGI where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.EquifaxCDCR where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.EquifaxCollections where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.EquifaxDataAttribute where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.EquifaxDataAttributes where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.EquifaxDateOfDeath where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.EquifaxDecisionPower where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.EquifaxEDAS where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.EquifaxEmployment where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.EquifaxFileInquiry where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.EquifaxFinanceCounsel where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.EquifaxForeclosure where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.EquifaxFraudVictim where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.EquifaxGarnishment where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.EquifaxGEO where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.EquifaxGuaranteedLoan where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.EquifaxHeader where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.EquifaxInquiry where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.EquifaxLegal where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.EquifaxLien where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.EquifaxModel where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.EquifaxName where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.EquifaxNarrative where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.EquifaxNonCustomerTrade where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.EquifaxOFAC where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.EquifaxOnlineDirectory where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.EquifaxReferralLocation where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.EquifaxReply where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.EquifaxSSN where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.EquifaxTLCK where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.EquifaxTLCKHistory where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.EquifaxTradeHistory where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.EquifaxTradeProspect where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.Flags where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.IMMSavedSessions where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.InfoIMAGE where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.InfoIMAGEHistory where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.LOCH where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.LOCHDenialReason where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.LOCHPledges where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.MECH where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.MECHHome where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.MECHWork where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.Message where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.MessageAttachment where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.MessageRecipient where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.MessageText where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.NMRFundingBank where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.NMRFundingCard where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.NMRFundingTransaction where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.ProcessQ where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.SecureMailThread where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.SHCH where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.SHCHPledges where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.SHCHSuffix where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.SHFE where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.SHNU where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.SHWI where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.TUManualApproval where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.TUTradeProspect where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.USAePayTransactionLog where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.x_CreditReportReviewLog where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.x_EMCH where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.x_JOCH where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.zAccountNumbers where TrackingNum = @TrackingNumberOfDoom
			DELETE FROM IMS.TUAccessFile where TrackingNumber = @TrackingNumberOfDoom
			DELETE FROM IMS.TUAdditionalInformation where TrackingNumber = @TrackingNumberOfDoom
			DELETE FROM IMS.TUAddOnStatus where TrackingNumber = @TrackingNumberOfDoom
			DELETE FROM IMS.TUAddress where TrackingNumber = @TrackingNumberOfDoom
			DELETE FROM IMS.TUCharacteristic where TrackingNumber = @TrackingNumberOfDoom
			DELETE FROM IMS.TUCollection where TrackingNumber = @TrackingNumberOfDoom
			DELETE FROM IMS.TUCompliance where TrackingNumber = @TrackingNumberOfDoom
			DELETE FROM IMS.TUConsumerIdentifier where TrackingNumber = @TrackingNumberOfDoom
			DELETE FROM IMS.TUConsumerStatement where TrackingNumber = @TrackingNumberOfDoom
			DELETE FROM IMS.TUCORR where TrackingNumber = @TrackingNumberOfDoom
			DELETE FROM IMS.TUCountyInformation where TrackingNumber = @TrackingNumberOfDoom
			DELETE FROM IMS.TUCreditCard where TrackingNumber = @TrackingNumberOfDoom
			DELETE FROM IMS.TUCreditSummary where TrackingNumber = @TrackingNumberOfDoom
			DELETE FROM IMS.TUCreditSummaryDescription where TrackingNumber = @TrackingNumberOfDoom
			DELETE FROM IMS.TUCustomerData where TrackingNumber = @TrackingNumberOfDoom
			DELETE FROM IMS.TUDataAnalysis where TrackingNumber = @TrackingNumberOfDoom
			DELETE FROM IMS.TUDeceasedInformation where TrackingNumber = @TrackingNumberOfDoom
			DELETE FROM IMS.TUDecisionSystemsCustomerBranch where TrackingNumber = @TrackingNumberOfDoom
			DELETE FROM IMS.TUDecisionSystemsCustomInformation where TrackingNumber = @TrackingNumberOfDoom
			DELETE FROM IMS.TUDecisionSystemsResponse where TrackingNumber = @TrackingNumberOfDoom
			DELETE FROM IMS.TUEdit where TrackingNumber = @TrackingNumberOfDoom
			DELETE FROM IMS.TUEmployment where TrackingNumber = @TrackingNumberOfDoom
			DELETE FROM IMS.TUEnds where TrackingNumber = @TrackingNumberOfDoom
			DELETE FROM IMS.TUEndUsage where TrackingNumber = @TrackingNumberOfDoom
			DELETE FROM IMS.TUErrorCode where TrackingNumber = @TrackingNumberOfDoom
			DELETE FROM IMS.TUErrorControl where TrackingNumber = @TrackingNumberOfDoom
			DELETE FROM IMS.TUErrorText where TrackingNumber = @TrackingNumberOfDoom
			DELETE FROM IMS.TUExtendedAddress where TrackingNumber = @TrackingNumberOfDoom
			DELETE FROM IMS.TUFACT where TrackingNumber = @TrackingNumberOfDoom
			DELETE FROM IMS.TUFACTInquiry where TrackingNumber = @TrackingNumberOfDoom
			DELETE FROM IMS.TUFACTSpecialIndicators where TrackingNumber = @TrackingNumberOfDoom
			DELETE FROM IMS.TUFutureAddress where TrackingNumber = @TrackingNumberOfDoom
			DELETE FROM IMS.TUGeoCode where TrackingNumber = @TrackingNumberOfDoom
			DELETE FROM IMS.TUGLANCETrade where TrackingNumber = @TrackingNumberOfDoom
			DELETE FROM IMS.TUIdentification where TrackingNumber = @TrackingNumberOfDoom
			DELETE FROM IMS.TUInquiry where TrackingNumber = @TrackingNumberOfDoom
			DELETE FROM IMS.TUInquiryHistory where TrackingNumber = @TrackingNumberOfDoom
			DELETE FROM IMS.TULookUpRequest where TrackingNumber = @TrackingNumberOfDoom
			DELETE FROM IMS.TUMessageCode where TrackingNumber = @TrackingNumberOfDoom
			DELETE FROM IMS.TUMessageText where TrackingNumber = @TrackingNumberOfDoom
			DELETE FROM IMS.TUMileage_New where TrackingNumber = @TrackingNumberOfDoom
			DELETE FROM IMS.TUMileage_Old where TrackingNumber = @TrackingNumberOfDoom
			DELETE FROM IMS.TUMiscellaneousStatement where TrackingNumber = @TrackingNumberOfDoom
			DELETE FROM IMS.TUModelData where TrackingNumber = @TrackingNumberOfDoom
			DELETE FROM IMS.TUName where TrackingNumber = @TrackingNumberOfDoom
			DELETE FROM IMS.TUNumberOf where TrackingNumber = @TrackingNumberOfDoom
			DELETE FROM IMS.TUOptionalRequest where TrackingNumber = @TrackingNumberOfDoom
			DELETE FROM IMS.TUOutputDelivery where TrackingNumber = @TrackingNumberOfDoom
			DELETE FROM IMS.TUOwningBureauIdentification where TrackingNumber = @TrackingNumberOfDoom
			DELETE FROM IMS.TUOwningBureauIdentification_URL where TrackingNumber = @TrackingNumberOfDoom
			DELETE FROM IMS.TUPersonalInformation where TrackingNumber = @TrackingNumberOfDoom
			DELETE FROM IMS.TUPhoneNumber where TrackingNumber = @TrackingNumberOfDoom
			DELETE FROM IMS.TUPointsSummary where TrackingNumber = @TrackingNumberOfDoom
			DELETE FROM IMS.TUProductHeader where TrackingNumber = @TrackingNumberOfDoom
			DELETE FROM IMS.TUProductHeaderWResult where TrackingNumber = @TrackingNumberOfDoom
			DELETE FROM IMS.TUProductHeaderWResultBreakout where TrackingNumber = @TrackingNumberOfDoom
			DELETE FROM IMS.TUPublicRecord where TrackingNumber = @TrackingNumberOfDoom
			DELETE FROM IMS.TURawReply where TrackingNumber = @TrackingNumberOfDoom
			DELETE FROM IMS.TURegionAnalysis where TrackingNumber = @TrackingNumberOfDoom
			DELETE FROM IMS.TUReply where TrackingNumber = @TrackingNumberOfDoom
			DELETE FROM IMS.TUReportingSubscriber where TrackingNumber = @TrackingNumberOfDoom
			DELETE FROM IMS.TURequestAddonProduct where TrackingNumber = @TrackingNumberOfDoom
			DELETE FROM IMS.TURequestProduct1 where TrackingNumber = @TrackingNumberOfDoom
			DELETE FROM IMS.TURequestProduct2 where TrackingNumber = @TrackingNumberOfDoom
			DELETE FROM IMS.TUScoring where TrackingNumber = @TrackingNumberOfDoom
			DELETE FROM IMS.TUSubjectHeader where TrackingNumber = @TrackingNumberOfDoom
			DELETE FROM IMS.TUSubjectHeaderSpecialProducts where TrackingNumber = @TrackingNumberOfDoom
			DELETE FROM IMS.TUSubjectHeaderWMatchDetail where TrackingNumber = @TrackingNumberOfDoom
			DELETE FROM IMS.TUSubjectHeaderWMatchPhone where TrackingNumber = @TrackingNumberOfDoom
			DELETE FROM IMS.TUSubjectVerificationFraud where TrackingNumber = @TrackingNumberOfDoom
			DELETE FROM IMS.TUSubjectVerificationOpenDB where TrackingNumber = @TrackingNumberOfDoom
			DELETE FROM IMS.TUSubscriberAddress where TrackingNumber = @TrackingNumberOfDoom
			DELETE FROM IMS.TUTextStatement where TrackingNumber = @TrackingNumberOfDoom
			DELETE FROM IMS.TUTIEScore where TrackingNumber = @TrackingNumberOfDoom
			DELETE FROM IMS.TUTrade where TrackingNumber = @TrackingNumberOfDoom
			DELETE FROM IMS.TUTradeMOPTotals where TrackingNumber = @TrackingNumberOfDoom
			DELETE FROM IMS.TUTransactionControlInquiry where TrackingNumber = @TrackingNumberOfDoom
			DELETE FROM IMS.TUTransactionControlResponce where TrackingNumber = @TrackingNumberOfDoom
			DELETE FROM IMS.TUTransAlert where TrackingNumber = @TrackingNumberOfDoom
			DELETE FROM IMS.TUVendorInformation where TrackingNumber = @TrackingNumberOfDoom
			DELETE FROM IMS.TUWATCHSatisfaction where TrackingNumber = @TrackingNumberOfDoom
			DELETE FROM IMS.TUWATCHTrade where TrackingNumber = @TrackingNumberOfDoom
			DELETE FROM IMS.TUYearOfIssuance where TrackingNumber = @TrackingNumberOfDoom
			DELETE FROM IMS.TUZipCode where TrackingNumber = @TrackingNumberOfDoom

			FETCH NEXT FROM CursorOfDestruction INTO @TrackingNumberOfDoom
		END

		CLOSE CursorOfDestruction

		DEALLOCATE CursorOfDestruction

	END
	
	--Drop Table #TempTrackingNumsToDrop --Some clients don't allow this, but it drops at the end of the connection anyway. 
END
GO
/****** Object:  StoredProcedure [IMS].[spOFCU_D01Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spOFCU_D01Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @docsubname CHAR(100)
DECLARE @newdocsub CHAR(100)
DECLARE @count INT
DECLARE @docindex INT
DECLARE curs CURSOR LOCAL FAST_FORWARD FOR

	SELECT '' AS docsubname
	FROM NewMemberRequest AS NMR
	WHERE NMR.TrackingNum = @TrackingNum

OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @newdocsub = 'Membership Application ' + @docsubname
IF @docsubname Is Null
BEGIN
	SET @newdocsub = 'Membership Application'
END
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
	WHILE @@FETCH_STATUS = 0
	BEGIN
		SET @count = @count + 1
		PRINT @count
			IF @count = 1
		BEGIN
			Set @docindex = @docindex + 1
				 INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
		END
			FETCH NEXT FROM curs INTO @docsubname
		PRINT @docsubname
		IF @@FETCH_STATUS = 0
		BEGIN
			SET @newdocsub = (RTRIM(@newdocsub) + ', ' + RTRIM(@docsubname))
			PRINT @newdocsub
			UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex
		END
	END
CLOSE curs
DEALLOCATE curs
SELECT 'MembershipApplication' AS DocCode, * FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
DELETE FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spOFCU_D01Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [IMS].[spOFCU_D01Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @joseq INT
DECLARE @jotype CHAR(2)
DECLARE @jo1seq INT
DECLARE @jo2seq INT
DECLARE @jo3seq INT
DECLARE @jo4seq INT
DECLARE @be1seq INT
DECLARE @be2seq INT
DECLARE @be3seq INT
DECLARE @be4seq INT
DECLARE @jocount INT
DECLARE @becount INT
SET @jo1seq = 0
SET @jo2seq = 0
SET @jocount = 0

DECLARE curs2 CURSOR FOR
	SELECT CONVERT(INT, JO.Sequence), JO.JointOwnerType
	FROM NewMemberJointOwner AS JO
	WHERE JO.TrackingNum = @TrackingNum AND (JO.JointOwnerType IN ('JO', 'PD')) ORDER BY JO.Sequence

OPEN curs2
FETCH NEXT FROM curs2 INTO @joseq, @jotype
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
		IF @jotype IN ('JO', 'PD')
		BEGIN
			SET @jocount = @jocount + 1
			IF @jocount = 1
			BEGIN
				SET @jo1seq = @joseq
			END
			IF @jocount = 2
			BEGIN
				SET @jo2seq = @joseq
			END
		END
      	FETCH NEXT FROM curs2 INTO @joseq, @jotype
   END
CLOSE curs2
DEALLOCATE curs2

SELECT @DocIndex As DocIndex
	, RTRIM(NMR.Account) AS Account
	, CONVERT(CHAR(10), NMR.DOB, 101) AS DOB
	, CASE WHEN NMR.AccountClass = 'P' THEN LEFT(NMR.SSN, 3) + '-' + LEFT(RIGHT(NMR.SSN, 6), 2) + '-' + RIGHT(NMR.SSN, 4) ELSE LEFT(NMR.SSN, 2) + '-' + RIGHT(NMR.SSN, 7) END AS SSN
	, 'SSN' AS SSNType
	, RTRIM(RTRIM(NMR.OrganizationName)) + RTRIM(NMR.FName) + ' ' + RTRIM(NMR.LName) + ' ' + NMR.MECHTag AS FullName
	, CASE NMR.AccountClass
		WHEN 'O' THEN RTRIM(RTRIM(Work.Address1) + CASE ISNULL(Work.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Work.Address2) END + CASE ISNULL(Work.Address3, '') WHEN '' THEN ' ' ELSE ', ' + RTRIM(Work.Address3) END)
		ELSE RTRIM(RTRIM(Home.Address1) + CASE ISNULL(Home.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Home.Address2) END + CASE ISNULL(Home.Address3, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Home.Address3) END)
	  END AS Address
	, CASE NMR.AccountClass
		WHEN 'O' THEN Work.City
		ELSE Home.City
	  END AS City
	, CASE NMR.AccountClass
		WHEN 'O' THEN Work.State
		ELSE Home.State
	  END AS State
	, CASE NMR.AccountClass
		WHEN 'O' THEN CASE LEN(Work.Zip) WHEN 9 THEN LEFT(Work.zip, 5) + '-' + Right(Work.Zip, 4) ELSE Work.Zip END
		ELSE CASE LEN(Home.Zip) WHEN 9 THEN LEFT(Home.zip, 5) + '-' + Right(Home.Zip, 4) ELSE Home.Zip END
	  END AS Zip		
	, Home.AreaCode + '-' + LEFT(Home.Phone, 3) + '-' + RIGHT(RTRIM(Home.Phone), 4)  AS HPhoneFull
	, Work.AreaCode + '-' + LEFT(Work.Phone, 3) + '-' + RIGHT(RTRIM(Work.Phone), 4)  AS WPhoneFull
	-- , ID Stuff Will Go Here
	, CASE WHEN NMR.IDType = 'D'
		THEN 'Driver''s License'
		ELSE RTRIM(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(NMR.IDSource, 'STATE', 'State ID Card'), 'RESALIEN', 'Resident Alien Card'), 'USPASSPORT', 'US Passport'), 'FORPASSPORT', 'Foreign Passport'), 'MINOR', 'Child Birth Certificate/Social'))
		END AS ID1Type
	, '' AS ID1Description
	, UPPER(CASE WHEN NMR.IDType = 'D'
		THEN RTRIM(NMR.DriversLicenseNum)
		ELSE CASE WHEN RIGHT(LEFT(NMR.IDNumber, 3), 1) = '-' THEN RTRIM(RIGHT(RTRIM(NMR.IDNumber), LEN(RTRIM(NMR.IDNumber))-3)) ELSE RTRIM(NMR.IDNumber) END
		END) AS ID1Number
	, CONVERT(CHAR(10), NMR.IDIssueDate, 101) AS ID1IssueDate
	, UPPER(CASE WHEN NMR.IDType = 'D'
		THEN RTRIM(NMR.DriversLicenseState)
		ELSE ''
		END) AS ID1Issuer
	, CONVERT(CHAR(10), NMR.IDExpirationDate, 101) AS ID1ExpirationDate
	, '' AS ID2Type
	, '' AS ID2Description
	, '' AS ID2Number
	, '' AS ID2IssueDate
	, '' AS ID2Issuer
	, '' AS ID2ExpirationDate
	, CASE NMR.AccountClass WHEN 'P' THEN UPPER(RTRIM(Work.EmployerName) + '/' + RTRIM(Work.JobTitle)) ELSE '' END AS EmployerName
	, Home.CellPhoneAC + '-' + LEFT(Home.CellPhone, 3) + '-' + RIGHT(RTRIM(Home.CellPhone), 4)  AS CPhoneFull
	, UPPER(RTRIM(NMR.MaidenName)) AS MaidenName
	, '' AS FamilyName
	, '' AS AccountNotes
	, CASE WHEN NMR.Qualification1 = 'Location' OR NMR.Qualification3 = 'Location'
		THEN 'Location: ' + RTRIM(NMR.Department)
		WHEN NMR.Qualification3 = 'Family'
		THEN 'Family: ' + RTRIM(NMR.Qualification2)
		END AS Eligibility
	, RTRIM(NMR.Email1) AS Email

	, UPPER(RTRIM(JO1.FullName)) AS JO1FullName
	, UPPER(RTRIM(JO1.SSN)) AS JO1SSN
	, 'SSN' AS JO1SSNType
	, UPPER(RTRIM(JO1.Address)) AS JO1Address
	, UPPER(RTRIM(CONVERT(CHAR(10), JO1.DOB, 101))) AS JO1DOB
	, UPPER(RTRIM(JO1.City)) AS JO1City
	, UPPER(RTRIM(JO1.State)) AS JO1State
	, UPPER(RTRIM(JO1.Zip)) AS JO1Zip
	, UPPER(RTRIM(JO1.HPhoneFull)) AS JO1HPhoneFull
	, UPPER(RTRIM(JO1.WPhoneFull)) AS JO1WPhoneFull
	, RTRIM(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(JO1.IDSource, 'STATE', 'State ID Card'), 'RESALIEN', 'Resident Alien Card'), 'USPASSPORT', 'US Passport'), 'FORPASSPORT', 'Foreign Passport'), 'MINOR', 'Child Birth Certificate/Social')) AS JO1ID1Type
	, '' AS JO1ID1Description
	, UPPER(RTRIM(JO1.IDNumber)) AS JO1ID1Number
	, CONVERT(CHAR(10), JO1.IDIssueDate, 101) AS JO1ID1IssueDate
	, UPPER(RTRIM(JO1.IDState)) AS JO1ID1Issuer
	, CONVERT(CHAR(10), JO1.IDExpireDate, 101) AS JO1ID1ExpirationDate
	, '' AS JO1ID2Type
	, '' AS JO1ID2Description
	, '' AS JO1ID2Number
	, '' AS JO1ID2IssueDate
	, '' AS JO1ID2Issuer
	, '' AS JO1ID2ExpirationDate
	, UPPER(RTRIM(JO1.EmployerName) + '/' + RTRIM(JO1.JobTitle)) AS JO1EmployerName
	, UPPER(RTRIM(JO1.CPhoneFull)) AS JO1CPhoneFull
	, '' AS JO1MaidenName
	, LOWER(RTRIM(JO1.Email)) AS JO1Email


	, UPPER(RTRIM(JO2.FullName)) AS JO2FullName
	, UPPER(RTRIM(JO2.SSN)) AS JO2SSN
	, 'SSN' AS JO2SSNType
	, UPPER(RTRIM(JO2.Address)) AS JO2Address
	, UPPER(RTRIM(CONVERT(CHAR(10), JO2.DOB, 101))) AS JO2DOB
	, UPPER(RTRIM(JO2.City)) AS JO2City
	, UPPER(RTRIM(JO2.State)) AS JO2State
	, UPPER(RTRIM(JO2.Zip)) AS JO2Zip
	, UPPER(RTRIM(JO2.HPhoneFull)) AS JO2HPhoneFull
	, UPPER(RTRIM(JO2.WPhoneFull)) AS JO2WPhoneFull
	, RTRIM(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(JO2.IDSource, 'STATE', 'State ID Card'), 'RESALIEN', 'Resident Alien Card'), 'USPASSPORT', 'US Passport'), 'FORPASSPORT', 'Foreign Passport'), 'MINOR', 'Child Birth Certificate/Social')) AS JO2ID1Type
	, '' AS JO2ID1Description
	, UPPER(RTRIM(JO2.IDNumber)) AS JO2ID1Number
	, CONVERT(CHAR(10), JO2.IDIssueDate, 101) AS JO2ID1IssueDate
	, UPPER(RTRIM(JO2.IDState)) AS JO2ID1Issuer
	, CONVERT(CHAR(10), JO2.IDExpireDate, 101) AS JO2ID1ExpirationDate
	, '' AS JO2ID2Type
	, '' AS JO2ID2Description
	, '' AS JO2ID2Number
	, '' AS JO2ID2IssueDate
	, '' AS JO2ID2Issuer
	, '' AS JO2ID2ExpirationDate
	, UPPER(RTRIM(JO2.EmployerName) + '/' + RTRIM(JO2.JobTitle)) AS JO2EmployerName
	, UPPER(RTRIM(JO2.CPhoneFull)) AS JOCPhoneFull
	, '' AS JO2MaidenName
	, LOWER(RTRIM(JO2.Email)) AS JO2Email

	, '807' AS TellerNumber
	, CONVERT(CHAR(10), NMR.ApplyDate, 101) AS ApplyDate
	, 'x' AS Check_Dnsmi
	, 'x' AS Check_CoTIN
FROM NewMemberRequest AS NMR
	LEFT OUTER JOIN NewMemberHome AS Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork AS Work On NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN NewMemberAddress AS Addr On NMR.TrackingNum = Addr.TrackingNum
	LEFT OUTER JOIN IMS.Departments AS DEPT ON NMR.Department = DEPT.Department
	LEFT OUTER JOIN udt_AccountTypes AS AT ON AT.TypeCode = NMR.AccountType
	LEFT OUTER JOIN fnOFCU_GetJO(@TrackingNum, @jo1seq) As JO1 ON NMR.TrackingNum = JO1.TrackingNum
	LEFT OUTER JOIN fnOFCU_GetJO(@TrackingNum, @jo2seq) As JO2 ON NMR.TrackingNum = JO2.TrackingNum
WHERE NMR.TrackingNum = @TrackingNum
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spOFCU_D23Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [IMS].[spOFCU_D23Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @docsubname CHAR(100)
DECLARE @newdocsub CHAR(100)
DECLARE @count INT
DECLARE @docindex INT
DECLARE @JOSeq INT

DECLARE curs CURSOR FOR
	SELECT 0 AS JOSeq, RTRIM(RTRIM(NMR.FName) + ' ' + RTRIM(NMR.LName) + RTRIM(NMR.OrganizationName)) AS docsubname
	FROM IMS.NewMemberRequest AS NMR LEFT JOIN
		IMS.NewMemberCreditReport CR ON NMR.TrackingNum = CR.TrackingNum AND CR.JointSequence = 0
	WHERE NMR.TrackingNum = @TrackingNum AND @Param1 = '23'

	UNION

	SELECT JO.Sequence AS JOSeq, RTRIM(RTRIM(JO.FName) + ' ' + RTRIM(JO.LName)) AS docsubname
	FROM IMS.NewMemberJointOwner AS JO INNER JOIN
		IMS.NewMemberCreditReport CR ON JO.TrackingNum = CR.TrackingNum AND JO.Sequence = CR.JointSequence
	LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = JO.TrackingNum
	WHERE JO.Trackingnum = @TrackingNum AND @Param1 = '23'

OPEN curs
FETCH NEXT FROM curs INTO @JOSeq, @docsubname
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count
--	IF @count = 1
--	BEGIN
		SET @docindex = @docindex + 1
		SET @newdocsub = 'Adverse Action Letter for ' + @docsubname
		INSERT INTO IMS.NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
--	END
      	FETCH NEXT FROM curs INTO @JOSeq, @docsubname

	IF @docsubname != NULL
	BEGIN
		SET @newdocsub = @newdocsub + ', ' + @docsubname
		UPDATE IMS.NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex AND TrackingNum = @TrackingNum
	END
   END
CLOSE curs
DEALLOCATE curs
SELECT 'ChexSystemsAdverseAction' AS DocCode, * FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
DELETE FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spOFCU_D23Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [IMS].[spOFCU_D23Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @DisplayNameTemp VARCHAR(30)
DECLARE @DisplayName VARCHAR(30)
DECLARE @JOSeqTemp INTEGER
DECLARE @JOSeq INTEGER
DECLARE @count INT

DECLARE curs2 CURSOR FOR
	SELECT 0 AS JOSeq, RTRIM(RTRIM(NMR.FName) + ' ' + RTRIM(NMR.LName) + RTRIM(NMR.OrganizationName)) AS DisplayName
	FROM IMS.NewMemberRequest AS NMR LEFT JOIN
		IMS.NewMemberCreditReport CR ON NMR.TrackingNum = CR.TrackingNum AND CR.JointSequence = 0
	WHERE NMR.TrackingNum = @TrackingNum --AND @Param1 = '23'

	UNION

	SELECT JO.Sequence AS JOSeq, RTRIM(RTRIM(JO.FName) + ' ' + RTRIM(JO.LName)) AS DisplayName
	FROM IMS.NewMemberJointOwner AS JO INNER JOIN
		IMS.NewMemberCreditReport CR ON JO.TrackingNum = CR.TrackingNum AND JO.Sequence = CR.JointSequence
	LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = JO.TrackingNum
	WHERE JO.Trackingnum = @TrackingNum --AND @Param1 = '23'

OPEN curs2
FETCH NEXT FROM curs2 INTO @JOSeqTemp, @DisplayNameTemp
SET @count = 1
PRINT @@FETCH_STATUS
	WHILE @@FETCH_STATUS = 0
	BEGIN
		IF (@count = @DocIndex)
		BEGIN
			SET @JOSeq = @JOSeqTemp
			SET @DisplayName = @DisplayNameTemp
		END
		FETCH NEXT FROM curs2 INTO @JOSeqTemp, @DisplayNameTemp
	SET @count = @count + 1
	PRINT @count
	END
CLOSE curs2
DEALLOCATE curs2

IF (@JOSeq = 0)
BEGIN
	SELECT @DocIndex AS DocIndex
		, @JOSeq AS JOSeq
		, @DisplayName AS DisplayName

		, DATENAME(MM, GETDATE()) + ' ' + CAST(DAY(GETDATE()) AS VARCHAR(2)) + ', ' + CAST(YEAR(GETDATE()) AS VARCHAR(4)) AS NoticeDate
		, CR.CBScore AS CreditScore
		, DATENAME(MM, CR.DatePulled) + ' ' + CAST(DAY(CR.DatePulled) AS VARCHAR(2)) + ', ' + CAST(YEAR(CR.DatePulled) AS VARCHAR(4)) AS ScoreDate
		, [IMS].[fnOFCU_GetKeyFactor](CPC.KeyFactors, 1) AS KeyFactor1
		, [IMS].[fnOFCU_GetKeyFactor](CPC.KeyFactors, 2) AS KeyFactor2
		, [IMS].[fnOFCU_GetKeyFactor](CPC.KeyFactors, 3) AS KeyFactor3
		, [IMS].[fnOFCU_GetKeyFactor](CPC.KeyFactors, 4) AS KeyFactor4
		, [IMS].[fnOFCU_GetKeyFactor](CPC.KeyFactors, 5) AS KeyFactor5
	FROM IMS.NewMemberRequest AS NMR
		LEFT OUTER JOIN IMS.NewMemberCreditReport AS CR ON CR.TrackingNum = NMR.TrackingNum AND CR.JointSequence = 0
		LEFT OUTER JOIN IMS.Corelation_CreditPull AS CPC ON CPC.TrackingNum = NMR.TrackingNum AND Bureau = 'C' --AND CPC.JointSequence = 0
	WHERE NMR.TrackingNum = @TrackingNum
END
ELSE
BEGIN
	SELECT @DocIndex AS DocIndex
		, @JOSeq AS JOSeq
		, @DisplayName AS DisplayName

		, DATENAME(MM, GETDATE()) + ' ' + CAST(DAY(GETDATE()) AS VARCHAR(2)) + ', ' + CAST(YEAR(GETDATE()) AS VARCHAR(4)) AS NoticeDate
		, CR.CBScore AS CreditScore
		, DATENAME(MM, CR.DatePulled) + ' ' + CAST(DAY(CR.DatePulled) AS VARCHAR(2)) + ', ' + CAST(YEAR(CR.DatePulled) AS VARCHAR(4)) AS ScoreDate
		, [IMS].[fnOFCU_GetKeyFactor](CPC.KeyFactors, 1) AS KeyFactor1
		, [IMS].[fnOFCU_GetKeyFactor](CPC.KeyFactors, 2) AS KeyFactor2
		, [IMS].[fnOFCU_GetKeyFactor](CPC.KeyFactors, 3) AS KeyFactor3
		, [IMS].[fnOFCU_GetKeyFactor](CPC.KeyFactors, 4) AS KeyFactor4
		, [IMS].[fnOFCU_GetKeyFactor](CPC.KeyFactors, 5) AS KeyFactor5
	FROM IMS.NewMemberJointOwner AS JO
		LEFT OUTER JOIN IMS.NewMemberCreditReport AS CR ON CR.TrackingNum = JO.TrackingNum AND CR.JointSequence = JO.Sequence
		LEFT OUTER JOIN IMS.Corelation_CreditPull AS CPC ON CPC.TrackingNum = JO.TrackingNum AND Bureau = 'C' --AND CPC.JointSequence = JO.Sequence
	WHERE JO.TrackingNum = @TrackingNum AND JO.Sequence = @JOSeq
END

Return 1
GO
/****** Object:  StoredProcedure [IMS].[spOFCU_D99Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spOFCU_D99Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @docsubname CHAR(100)
DECLARE @newdocsub CHAR(100)
DECLARE @count INT
DECLARE @docindex INT
DECLARE curs CURSOR LOCAL FAST_FORWARD FOR

	SELECT '' AS docsubname
	FROM NewMemberRequest AS NMR
	WHERE NMR.TrackingNum = @TrackingNum AND @ApplicationMode <> 'EXTERNAL' --AND NMR.Processed = 999 AND NMR.Created IN ('Y', 'I')

OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @newdocsub = 'Credit Report ' + @docsubname
IF @docsubname Is Null
BEGIN
	SET @newdocsub = 'Credit Report'
END
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
	WHILE @@FETCH_STATUS = 0
	BEGIN
		SET @count = @count + 1
		PRINT @count
			IF @count = 1
		BEGIN
			Set @docindex = @docindex + 1
				 INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
		END
			FETCH NEXT FROM curs INTO @docsubname
		PRINT @docsubname
		IF @@FETCH_STATUS = 0
		BEGIN
			SET @newdocsub = (RTRIM(@newdocsub) + ', ' + RTRIM(@docsubname))
			PRINT @newdocsub
			UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex
		END
	END
CLOSE curs
DEALLOCATE curs
SELECT 'CreditReport' AS DocCode, * FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
DELETE FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spOFCU_D99Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create PROCEDURE [IMS].[spOFCU_D99Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

SELECT @DocIndex As DocIndex

FROM NewMemberRequest AS NMR
WHERE NMR.TrackingNum = @TrackingNum
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spOFCU_DG1Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [IMS].[spOFCU_DG1Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

Return 1
GO
/****** Object:  StoredProcedure [IMS].[spOFCU_DG1Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spOFCU_DG1Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

Select 'Documents' AS GroupName From NewMemberRequest where trackingnum = @TrackingNum
GO
/****** Object:  StoredProcedure [IMS].[spOFCU_DP1Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spOFCU_DP1Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

Return 1
GO
/****** Object:  StoredProcedure [IMS].[spOFCU_DP1Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spOFCU_DP1Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

SELECT NMR.TrackingNum AS TrackingNumber
	, AltAddress.Address1 AS MailingAddress
	, NMR.CurrBranch As Branch
	, Branches.Description AS BranchName
	, CONVERT(char(10), GetDate(), 101) As TodayDate
	, DATENAME(MM, GetDate()) + RIGHT(CONVERT(char(12), GetDate(), 107), 9) As TodayDateFull
	, CONVERT(char(10), NMR.CreatedOn, 101) As CreatedOn
	, NMR.Account As Account
--	, CONVERT(char(2), Home.ResidenceYears, 101) + ' yrs  ' + CONVERT(char(2), Home.ResidenceMonths, 101) + ' mos' AS HowLong
	, NMR.FName, NMR.LName, NMR.MInitial
	, CASE NMR.AccountClass WHEN 'P' THEN UPPER(RTRIM(NMR.LName) + ', ' + RTRIM(RTRIM(NMR.FName) + ' ' + RTRIM(NMR.MInitial))) ELSE RTRIM(NMR.OrganizationName) END AS RevFullName
	, CASE NMR.AccountClass WHEN 'P' THEN UPPER(RTRIM(RTRIM(NMR.FName) + ' ' + RTRIM(NMR.LName) + ' ' + NMR.MECHTag)) ELSE UPPER(RTRIM(NMR.OrganizationName)) END AS FullName
	, CASE NMR.AccountClass WHEN 'P' THEN 'Dear ' + RTRIM(RTRIM(NMR.FName) + ' ' + RTRIM(NMR.LName) + ' ' + NMR.MECHTag) + ':' ELSE 'Dear ' + RTRIM(NMR.OrganizationName) + ':' END AS DearName
	, Home.Areacode + '-' + LEFT(Home.Phone, 3) + '-' + RIGHT(RTRIM(Home.Phone), 4) AS HPhoneFull
	, Home.CellPhoneAC + '-' + LEFT(Home.CellPhone, 3) + '-' + RIGHT(RTRIM(Home.CellPhone), 4) AS CPhoneFull
	, CASE NMR.UseTodayForDOB WHEN 'Y' THEN CONVERT(char(10), NMR.CreatedOn, 101) ELSE CONVERT(char(10), NMR.DOB, 101) END AS DOB
	, CASE NMR.AccountClass WHEN 'P' THEN Left(NMR.SSN, 3) + '-' + LEFT(RIGHT(NMR.SSN, 6), 2) + '-' + RIGHT(NMR.SSN, 4) ELSE LEFT(NMR.SSN, 2) + '-' + RIGHT(NMR.SSN, 7) END AS SSN
	, RTRIM(NMR.DriversLicenseNum) + '/' + NMR.DriversLicenseState AS DL
	, CASE WHEN NMR.IDType = 'D' AND NMR.DriversLicenseState <> '' AND NMR.DriversLicenseNum <> '' THEN 'Drivers License' ELSE NMR.IDSource END AS IDType
	, CASE NMR.IDType WHEN 'D' THEN RTRIM(NMR.DriversLicenseNum) ELSE RTRIM(NMR.IDNumber) END AS ID
	, CONVERT(char(10), NMR.IDIssueDate, 101) AS IDIssueDate
	, CONVERT(char(10), NMR.IDExpirationDate, 101) AS IDExpDate
	, NMR.DriversLicenseState AS IDState
	, UPPER(RTRIM(NMR.MaidenName)) AS MaidenName
	, NMR.Password AS Password
	, NMR.CreatedBy AS Seller
	, NMR.Department AS Department
	, CASE WHEN NMR.Created = 'F' Or NMR.Created = 'H' Or NMR.Created = 'I' THEN '' ELSE 'X' END AS YesNewAccount
	, CASE WHEN NMR.Created = 'F' Or NMR.Created = 'H' Or NMR.Created = 'I' THEN 'X' END AS YesChangeAccount
--	, CASE WHEN NMR.Created = 'F' Or NMR.Created = 'H' Or NMR.Created = 'I' THEN NMR.Account END AS ChangeAccount
	, CASE NMR.AccountClass
		WHEN 'O' THEN RTRIM(RTRIM(Work.Address1) + CASE ISNULL(Work.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Work.Address2) END + CASE ISNULL(Work.Address3, '') WHEN '' THEN ' ' ELSE ', ' + RTRIM(Work.Address3) END)
		ELSE RTRIM(RTRIM(Home.Address1) + CASE ISNULL(Home.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Home.Address2) END + CASE ISNULL(Home.Address3, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Home.Address3) END)
	  END AS Address
	, CASE NMR.AccountClass
		WHEN 'O' THEN RTRIM(RTRIM(Work.Address1) + CASE ISNULL(Work.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Work.Address2) END + CASE ISNULL(Work.Address3, '') WHEN '' THEN ' ' ELSE ', ' + RTRIM(Work.Address3) END) + ', ' + RTRIM(Work.City) + ', ' + Work.State + ' ' + CASE LEN(Work.Zip) WHEN 9 THEN LEFT(Work.Zip, 5) + '-' + Right(Work.Zip, 4) ELSE Work.Zip END
		ELSE RTRIM(RTRIM(Home.Address1) + CASE ISNULL(Home.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Home.Address2) END + CASE ISNULL(Home.Address3, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Home.Address3) END) + ', ' + RTRIM(Home.City) + ', ' + Home.State + ' ' + CASE LEN(Home.Zip) WHEN 9 THEN LEFT(Home.Zip, 5) + '-' + Right(Home.Zip, 4) ELSE Home.Zip END
	  END AS FullAddress
	, CASE NMR.AccountClass
		WHEN 'O' THEN RTRIM(Work.city) + ', ' + Work.state + ' ' + CASE LEN(Work.Zip) WHEN 9 THEN LEFT(Work.zip, 5) + '-' + Right(Work.Zip, 4) ELSE Work.Zip END
		ELSE RTRIM(Home.city) + ', ' + Home.state + ' ' + CASE LEN(Home.Zip) WHEN 9 THEN LEFT(Home.zip, 5) + '-' + Right(Home.Zip, 4) ELSE Home.Zip END
	  END AS CityStateZip
	, CASE NMR.AccountClass
		WHEN 'O' THEN Work.City
		ELSE Home.City
	  END AS City
	, CASE NMR.AccountClass
		WHEN 'O' THEN Work.State
		ELSE Home.State
	  END AS State
	, CASE NMR.AccountClass
		WHEN 'O' THEN CASE LEN(Work.Zip) WHEN 9 THEN LEFT(Work.zip, 5) + '-' + Right(Work.Zip, 4) ELSE Work.Zip END
		ELSE CASE LEN(Home.Zip) WHEN 9 THEN LEFT(Home.zip, 5) + '-' + Right(Home.Zip, 4) ELSE Home.Zip END
	  END AS Zip		
	, RTRIM(NMR.Email1) AS Email
	, CASE NMR.AccountClass
		WHEN 'O' THEN Work.AreaCode
		ELSE Home.AreaCode
	  END AS AC
	, CASE NMR.AccountClass
		WHEN 'O' THEN LEFT(Work.Phone, 3) + '-' + RIGHT(RTRIM(Work.Phone), 4)
		ELSE LEFT(Home.Phone, 3) + '-' + RIGHT(RTRIM(Home.Phone), 4)
	  END AS Phone
	, CASE NMR.AccountClass WHEN 'P' THEN Work.EmployerName ELSE '' END AS WorkName
	, CASE NMR.AccountClass WHEN 'P' THEN Work.EmployerName ELSE '' END AS Employer
	, CASE NMR.AccountClass WHEN 'P' THEN RTRIM(Work.address1 + CASE Work.address2 WHEN '' THEN ''ELSE', ' END + Work.address2 + CASE Work.address3 WHEN '' THEN ''ELSE', ' END + Work.address3) ELSE '' END AS WorkAddress
	, CASE NMR.AccountClass WHEN 'P' THEN Work.City ELSE '' END AS WorkCity
	, CASE NMR.AccountClass WHEN 'P' THEN Work.State ELSE '' END AS WorkState
	, CASE NMR.AccountClass WHEN 'P' THEN CASE LEN(Work.Zip) WHEN 9 THEN LEFT(Work.zip, 5) + '-' + RIGHT(Work.Zip, 4) ELSE Work.Zip END ELSE '' END AS WorkZip
	, Work.AreaCode AS WorkAC, LEFT(Work.Phone, 3) + '-' + RIGHT(RTRIM(Work.Phone), 4)  AS WorkPhone
	, Work.AreaCode + '-' + LEFT(Work.Phone, 3) + '-' + RIGHT(RTRIM(Work.Phone), 4)  AS WPhoneFull
	, Work.JobTitle AS Position
	, Work.JobTitle AS Occupation
	, Work.ProfessionYears As WorkNumYears
	,  RTRIM(Work.EmployerName) + ' ' + RTRIM(Work.address1 + CASE Work.address2 WHEN '' THEN ''ELSE', ' END + Work.address2 + CASE Work.address3 WHEN '' THEN ''ELSE', ' END + Work.address3) + ', ' + RTRIM(Work.City) + ', ' + RTRIM(Work.State) + ' ' + CASE LEN(Work.Zip) WHEN 9 THEN LEFT(Work.zip, 5) + '-' + Right(Work.Zip, 4) ELSE Work.Zip END AS WorkNameAddress
	, Work.HireDate
	,   CASE Work.IncomeFrequency
	     	WHEN 'W'  THEN 'Week'
		WHEN 'B' THEN 'Bi-Week'
		WHEN 'M' THEN 'Month'
		WHEN 'S' THEN 'Semi-Month'
		WHEN 'Y' THEN 'Year'
	      END AS IncomeFrequency
	,   CASE Work.IncomeFrequency
	     	WHEN 'W'  THEN (Work.GrossIncome * 52)/100
		WHEN 'B' THEN (Work.GrossIncome * 26)/100
		WHEN 'M' THEN (Work.GrossIncome * 12)/100
		WHEN 'S' THEN (Work.GrossIncome * 24)/100
		WHEN 'Y' THEN (Work.GrossIncome)/100
	      END AS GrossIncome
	, Home.ResidenceYears AS NumYears
	, CASE NMR.AccountClass
		WHEN 'O' THEN 'Yes'
		ELSE CASE WHEN NMR.Citizenship = 'US' Or NMR.Citizenship = 'RA' THEN 'Yes' END
	  END AS YesNoUSCitizen
	, CASE NMR.AccountClass
		WHEN 'O' THEN 'X'
		ELSE CASE WHEN NMR.Citizenship = 'US' Or NMR.Citizenship = 'RA' THEN 'X' END
	  END AS YesUSCitizen
	, CASE NMR.AccountClass
		WHEN 'O' THEN ''
		ELSE CASE WHEN NMR.Citizenship != 'US' And NMR.Citizenship != 'RA' THEN 'X' END
	  END AS NoUSCitizen
	, 'X' AS YesEligible00
	, CASE WHEN NMR.Qualification1 = 'Household' THEN 'X' END AS YesEligible01
	, CASE WHEN NMR.Qualification1 = 'Relative' OR NMR.Qualification1 = 'Household' THEN NMR.Qualification2 END AS MemberName
	, CASE WHEN NMR.Qualification1 = 'Relative' THEN NMR.Relationship END AS Relationship
	, CASE WHEN NMR.Qualification1 = 'Location' THEN 'X' END AS YesEligible10
	, CASE WHEN NMR.Qualification1 = 'Location' AND NMR.Qualification2 = 'BCOUNTY' THEN 'X' END AS YesEligible11
	, CASE WHEN NMR.Qualification1 = 'Location' AND NMR.Qualification2 = 'CLARENDON' THEN 'X' END AS YesEligible12
	, CASE WHEN NMR.Qualification1 = 'Location' AND NMR.Qualification2 = 'ORANGE' THEN 'X' END AS YesEligible13
	, CASE WHEN NMR.Qualification1 = 'Location' AND NMR.Qualification2 = 'CALHOUN' THEN 'X' END AS YesEligible14
	, CASE WHEN NMR.Qualification1 = 'Location' AND NMR.Qualification2 = 'DCOUNTY' THEN 'X' END AS YesEligible15
	, CASE WHEN NMR.Qualification1 = 'Location' AND NMR.Qualification2 = 'UNDER' THEN 'X' END AS YesEligible16
	, CASE WHEN NMR.Qualification1 = 'Location' AND NMR.Qualification2 = 'CCOUNTY' THEN 'X' END AS YesEligible17
	, CASE WHEN NMR.Qualification1 = 'Location' AND NMR.Qualification2 = 'GEO COMM' THEN 'X' END AS YesEligible18
	, RTRIM(NMR.LName) + '/' + RTRIM(RTRIM(NMR.FName) + ' ' + NMR.MInitial) AS SlashName
	, '(' + RTRIM(LTRIM(CAST(NMR.CurrBranch AS VARCHAR(2)))) + ' - ' + RTRIM(Branches.[Description]) + ')' AS SellerBranch
	, 'SOUTH CAROLINA FEDERAL CREDIT UNION' AS HCCUName
	, 'P.O. BOX 190012' AS HCCUAddress
	, 'NORTH CHARLESTON, SC  29419-9012' AS HCCUCityStateZip
	, '(800)845-0432' AS HCCUPhone

FROM NewMemberRequest As NMR
	--INNER JOIN udt_AccountTypes AS AType On NMR.AccountType = AType.TypeCode
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN NewMemberAddress As AltAddress On NMR.TrackingNum = AltAddress.TrackingNum
	LEFT OUTER JOIN Branches On NMR.CurrBranch = Branches.BranchCode
	LEFT OUTER JOIN Departments ON NMR.Department = Departments.Department
WHERE NMR.TrackingNum = @TrackingNum
GO
/****** Object:  StoredProcedure [IMS].[spOFCU_Eligibility_Select]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_Eligibility_Select
CREATE PROCEDURE [IMS].[spOFCU_Eligibility_Select]
	@ZipCode varchar(5),
	@CensusTract varchar(15)
AS

IF IsNull(@CensusTract, '') = '' AND IsNull(@ZipCode, '') <> ''
BEGIN
	SELECT Department
	FROM udt_EligibilityByZip
	WHERE IsNull(ZipCode, '') = @ZipCode
END

IF IsNull(@CensusTract, '') <> '' AND IsNull(@ZipCode, '') = ''
BEGIN
	SELECT Department
	FROM udt_EligibilityByZip
	WHERE IsNull(CensusTract, '') = @CensusTract
END

IF IsNull(@CensusTract, '') <> '' AND IsNull(@ZipCode, '') <> ''
BEGIN
	SELECT Department
	FROM udt_EligibilityByZip
	WHERE (IsNull(ZipCode, '') = @ZipCode OR IsNull(ZipCode, '') = '') AND IsNull(CensusTract, '') = @CensusTract
END

IF IsNull(@CensusTract, '') = '' AND IsNull(@ZipCode, '') = ''
BEGIN
	SELECT *
	FROM udt_EligibilityByZip
END
GO
/****** Object:  StoredProcedure [IMS].[spOFCU_FedReservePendingTransaction_Select]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Jonathan Eagar
-- Create date: 8/25/2011
-- Description:	Returns all FedReserve Pending Transactions
-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_FedReservePendingTransaction_Select
-- =============================================
CREATE PROCEDURE [IMS].[spOFCU_FedReservePendingTransaction_Select] 
	-- Add the parameters for the stored procedure here
	@NMRAccountNumber bigint
AS
BEGIN	
	SET @NMRAccountNumber = ISNULL(@NMRAccountNumber, 0)
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	-- Insert statements for procedure here
	
	DECLARE @TransactionSummary TABLE
	(		
		FundingBankID INT,
		TransferAmountTotal DECIMAL(18,2)		
	)
		
	IF @NMRAccountNumber = 0  
	BEGIN
	
	INSERT INTO @TransactionSummary(FundingBankID, TransferAmountTotal)	
	SELECT
		   FB.ID as FundingBankID,			  
		   SUM(FT.Amount) as TransferAmountTotal			   
	FROM IMS.NMRFundingBank FB INNER JOIN IMS.NMRFundingTransaction FT ON FB.ID = FT.FundingBankID						
	WHERE FT.DateTimeLastTransaction IS NULL AND FT.FundingType = 'B'
	GROUP BY FB.ID	
	
	SELECT  FRPT.* FROM
	( 
		(
		SELECT F.ID as FundingID,
			   F.AccountNumber as NMRAccountNumber,
			   FB.TrackingNum as NMRTrackingNum,
			   RTRIM(LTRIM(NMR.LName)) + ', ' + RTRIM(LTRIM(NMR.FName)) as NMRMemberName,
			   FB.ID as FundingBankID,
			   0 as FundingTransactionID,
			   FB.RoutingNumber as FundingBankRouting,
			   FB.AccountNumberEncrypted as FundingBankAccountNumberEncrypted,
			   FB.AccountNumberLast4 as FundingBankAccountNumberLast4,
			   FB.BankName as FundingBankName,
			   FB.AccountType as FundingBankAccountType,
			   FB.Amount1 as VerificationAmount1,
			   FB.Amount2 as VerificationAmount2,
			   0 as TransferAmount,
			   0 as TransferAmountTotal,			   	
			   0 as TargetSubAccountSuffix,
			   0 as TargetSubAccountSeq,
			   FB.DateTimeCreated as DateTimeCreated
		FROM IMS.NMRFunding F INNER JOIN IMS.NMRFundingBank FB ON F.ID = FB.FundingID
								INNER JOIN IMS.NewMemberRequest NMR ON FB.TrackingNum = NMR.TrackingNum
		WHERE FB.VerificationStatus = 'P'	
		)
		UNION ALL
		(	
		SELECT F.ID as FundingID,
			   F.AccountNumber as NMRAccountNumber,
			   FB.TrackingNum as NMRTrackingNum,			   
			    RTRIM(LTRIM(NMR.LName)) + ', ' + RTRIM(LTRIM(NMR.FName)) as NMRMemberName,
			   FB.ID as FundingBankID,
			   FT.ID as FundingTransactionID,
			   FB.RoutingNumber as FundingBankRouting,
			   FB.AccountNumberEncrypted as FundingBankAccountNumberEncrypted,
			   FB.AccountNumberLast4 as FundingBankAccountNumberLast4,
			   FB.BankName as FundingBankName,
			   FB.AccountType as FundingBankAccountType,
				0 as VerificationAmount1,
				0 as VerificationAmount2,
			   FT.Amount as TransferAmount,
			   TS.TransferAmountTotal as TransferAmountTotal,			
			   FT.TargetSubAccountSuffix as TargetSubAccountSuffix,
			   FT.TargetSubAccountSeq as TargetSubAccountSeq,
			   FT.DateTimeCreated as DateTimeCreated 
		FROM IMS.NMRFunding F INNER JOIN IMS.NMRFundingBank FB ON F.ID = FB.FundingID
								INNER JOIN IMS.NMRFundingTransaction FT ON FB.ID = FT.FundingBankID
									INNER JOIN IMS.NewMemberRequest NMR ON FB.TrackingNum = NMR.TrackingNum
										INNER JOIN @TransactionSummary TS ON FB.ID = TS.FundingBankID
		WHERE FT.DateTimeLastTransaction IS NULL AND FT.FundingType = 'B'
		)
	)  FRPT ORDER BY FRPT.NMRTrackingNum, FRPT.FundingID, FRPT.FundingBankID, FRPT.FundingTransactionID	
	END	
	ELSE
	BEGIN
	
	INSERT INTO @TransactionSummary(FundingBankID, TransferAmountTotal)	
	SELECT	   		   
		   FB.ID as FundingBankID,			  
		   SUM(FT.Amount) as TransferAmountTotal			   
	FROM IMS.NMRFunding F INNER JOIN IMS.NMRFundingBank FB ON F.ID = FB.FundingID 
							INNER JOIN IMS.NMRFundingTransaction FT ON FB.ID = FT.FundingBankID						
	WHERE FT.DateTimeLastTransaction IS NULL AND 
		FT.FundingType = 'B' AND
		F.AccountNumber = @NMRAccountNumber	 
	GROUP BY FB.ID	
	  
	SELECT  FRPT.* FROM
	(   
		(
		SELECT F.ID as FundingID,
			   F.AccountNumber as NMRAccountNumber,
			   FB.TrackingNum as NMRTrackingNum,
			   RTRIM(LTRIM(NMR.LName)) + ', ' + RTRIM(LTRIM(NMR.FName)) as NMRMemberName,
			   FB.ID as FundingBankID,
			   0 as FundingTransactionID,
			   FB.RoutingNumber as FundingBankRouting,
			   FB.AccountNumberEncrypted as FundingBankAccountNumberEncrypted,
			   FB.AccountNumberLast4 as FundingBankAccountNumberLast4,
			   FB.BankName as FundingBankName,
			   FB.AccountType as FundingBankAccountType,
			   FB.Amount1 as VerificationAmount1,
			   FB.Amount2 as VerificationAmount2,
			   0 as TransferAmount,
			   0 as TransferAmountTotal,
			   0 as TargetSubAccountSuffix,
			   0 as TargetSubAccountSeq,
			   FB.DateTimeCreated as DateTimeCreated
		FROM IMS.NMRFunding F INNER JOIN IMS.NMRFundingBank FB ON F.ID = FB.FundingID
								INNER JOIN IMS.NewMemberRequest NMR ON FB.TrackingNum = NMR.TrackingNum
		WHERE	FB.VerificationStatus = 'P' AND 
				F.AccountNumber = @NMRAccountNumber	
		)	
		UNION ALL
		(		
		SELECT F.ID as FundingID,
			   F.AccountNumber as NMRAccountNumber,
			   FB.TrackingNum as NMRTrackingNum,
			   RTRIM(LTRIM(NMR.LName)) + ', ' + RTRIM(LTRIM(NMR.FName)) as NMRMemberName,
			   FB.ID as FundingBankID,
			   FT.ID as FundingTransactionID,
			   FB.RoutingNumber as FundingBankRouting,
			   FB.AccountNumberEncrypted as FundingBankAccountNumberEncrypted,
			   FB.AccountNumberLast4 as FundingBankAccountNumberLast4,
			   FB.BankName as FundingBankName,
			   FB.AccountType as FundingBankAccountType,
				0 as VerificationAmount1,
				0 as VerificationAmount2,
			   FT.Amount as TransferAmount,
			   TS.TransferAmountTotal as TransferAmountTotal,
			   FT.TargetSubAccountSuffix as TargetSubAccountSuffix,
			   FT.TargetSubAccountSeq as TargetSubAccountSeq,
			   FT.DateTimeCreated as DateTimeCreated
		FROM IMS.NMRFunding F 
				INNER JOIN IMS.NMRFundingBank FB ON F.ID = FB.FundingID
					INNER JOIN IMS.NMRFundingTransaction FT ON FB.ID = FT.FundingBankID
						INNER JOIN IMS.NewMemberRequest NMR ON FB.TrackingNum = NMR.TrackingNum
							INNER JOIN @TransactionSummary TS ON FB.ID = TS.FundingBankID
		WHERE	FT.DateTimeLastTransaction IS NULL AND 
				FT.FundingType = 'B' AND 
				F.AccountNumber = @NMRAccountNumber
		)
	)  FRPT	ORDER BY FRPT.NMRTrackingNum, FRPT.FundingID, FRPT.FundingBankID, FRPT.FundingTransactionID
	END		
END

GO
/****** Object:  StoredProcedure [IMS].[spOFCU_ILAApplicationSearch_Select]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_ILAApplicationSearch_Select
CREATE Procedure [IMS].[spOFCU_ILAApplicationSearch_Select]
	@TrackingNum varchar(9),
	@SSN varchar(9),
	@Account varchar(9),
	@AppNumber varchar(9)
AS

DECLARE @SQL varchar(1000)
SET @SQL = 'SELECT AI.*, A.UserSessionXML FROM ILA_ApplicationInfo AI INNER JOIN ILA_Application A ON A.TrackingNum = AI.TrackingNum WHERE 1=1'
IF @TrackingNum <> '*'
BEGIN
	SET @SQL = @SQL + ' AND AI.TrackingNum = ''' + @TrackingNum + ''''
END
IF @SSN <> '*'
BEGIN
	SET @SQL = @SQL + ' AND AI.PrimarySSN = ''' + @SSN + ''''
END
IF @Account <> '*'
BEGIN
	SET @SQL = @SQL + ' AND AI.Account = ''' + @Account + ''''
END
IF @AppNumber <> '*'
BEGIN
	SET @SQL = @SQL + ' AND AI.AppNumber = ''' + @AppNumber + ''''
END

EXEC(@SQL)
GO
/****** Object:  StoredProcedure [IMS].[spOFCU_OAOReport_ApplicationStatusReport]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_OAOReport_ApplicationStatusReport
CREATE Procedure [IMS].[spOFCU_OAOReport_ApplicationStatusReport]
	@StartDate datetime,
	@StopDate datetime
AS

SELECT
	NMR.TrackingNum
	, UPPER(RTRIM(LEFT(NMR.FName, 1)) + ' ' + RTRIM(NMR.LName)) AS MemberName
	, NMR.ApplyDate AS [Date_Time]
	, NMR.CurrBranch AS Branch
	, CASE
		WHEN NMR.Processed = '1' THEN 'In-Process'
		WHEN NMR.Processed = '999' THEN 'Created'
		ELSE 'Denied'
		END AS Status
	, CASE
		WHEN (SELECT COUNT(*) FROM NMRFundingBank AS NMRFB WHERE NMRFB.TrackingNum = NMR.TrackingNum AND NMRFB.VerificationStatus <> 'X' AND NMRFB.VerificationStatus <> 'E') > 0 THEN 'ACH'
		WHEN (SELECT COUNT(*) FROM NMRFundingCard AS NMRFC WHERE NMRFC.TrackingNum = NMR.TrackingNum) > 0 THEN 'Credit Card'
		WHEN (SELECT COUNT(*) FROM NMRFundingTransaction AS NMRFT WHERE NMRFT.TrackingNum = NMR.TrackingNum AND NMRFT.SourceSubAccountSeq <> '') > 0 THEN 'Transfer'
		WHEN (SELECT FundingType FROM NMRFundingTransaction AS NMRFT WHERE NMRFT.TrackingNum = NMR.TrackingNum) = NULL THEN 'Skipped'
		ELSE 'None'
		END AS PaymentMethod
	, CONVERT(VARCHAR(10), (SELECT TOP 1 DateTimeLastTransaction FROM NMRFundingTransaction AS NMRFT WHERE NMRFT.TrackingNum = NMR.TrackingNum), 101) AS FundingDate
	, (SELECT SUM(Amount) FROM NMRFundingTransaction AS NMRFT WHERE NMRFT.TrackingNum = NMR.TrackingNum GROUP BY NMRFT.TrackingNum) AS InitialAmountFunded
	, NMR.Account AS AccountNumber
FROM IMS.NewMemberRequest NMR
WHERE
	NMR.Processed > 0 
	AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> ''
	AND (NMR.ApplyDate >= @StartDate AND NMR.ApplyDate <= @StopDate)
GO
/****** Object:  StoredProcedure [IMS].[spOFCU_OAOReport_FundingDetailReport]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_OAOReport_FundingDetailReport
CREATE Procedure [IMS].[spOFCU_OAOReport_FundingDetailReport]
	@StartDate datetime,
	@StopDate datetime
AS

SELECT Bank, Card, Existing, Skipped FROM
(
	(SELECT COUNT(DISTINCT NMRFT.TrackingNum) AS Bank
	FROM IMS.NMRFundingTransaction NMRFT
	LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	INNER JOIN IMS.NMRFundingBank NMRFB ON NMRFB.ID = NMRFT.FundingBankID
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND NMRFT.FundingBankID <> '' AND NMR.Processed = 999 AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate) AND (NMRFB.VerificationStatus <> 'E') AND (NMRFB.VerificationStatus <> 'X')) a
		FULL OUTER JOIN
	(SELECT COUNT(DISTINCT NMRFT.TrackingNum) AS Card
	FROM IMS.NMRFundingTransaction NMRFT
	LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND NMRFT.FundingCardID <> '' AND NMR.Processed = 999 AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate)) b ON 1=1
		FULL OUTER JOIN
	(SELECT COUNT(DISTINCT NMRFT.TrackingNum) AS Existing
	FROM IMS.NMRFundingTransaction NMRFT
	LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND NMRFT.SourceSubAccountSeq <> '' AND NMR.Processed = 999 AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate)) c ON 1=1
		FULL OUTER JOIN
	(SELECT COUNT(DISTINCT NMR.TrackingNum) AS Skipped
	FROM IMS.NMRFundingTransaction NMRFT
	FULL OUTER JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND (NMR.Processed = 999 AND ISNULL(NMRFT.TrackingNum, 0) = 0) AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate)) d ON 1=1
)

UNION ALL

SELECT Bank, Card, Existing, Skipped FROM
(
	(SELECT COUNT(DISTINCT NMRFT.TrackingNum) AS Bank
	FROM IMS.NMRFundingTransaction NMRFT
	LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	INNER JOIN IMS.NMRFundingBank NMRFB ON NMRFB.ID = NMRFT.FundingBankID
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND NMRFT.FundingBankID <> '' AND NMR.Processed = 998 AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate) AND (NMRFB.VerificationStatus <> 'E') AND (NMRFB.VerificationStatus <> 'X')) a
		FULL OUTER JOIN
	(SELECT COUNT(DISTINCT NMRFT.TrackingNum) AS Card
	FROM IMS.NMRFundingTransaction NMRFT
	LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND NMRFT.FundingCardID <> '' AND NMR.Processed = 998 AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate)) b ON 1=1
		FULL OUTER JOIN
	(SELECT COUNT(DISTINCT NMRFT.TrackingNum) AS Existing
	FROM IMS.NMRFundingTransaction NMRFT
	LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND NMRFT.SourceSubAccountSeq <> '' AND NMR.Processed = 998 AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate)) c ON 1=1
		FULL OUTER JOIN
	(SELECT COUNT(DISTINCT NMR.TrackingNum) AS Skipped
	FROM IMS.NMRFundingTransaction NMRFT
	FULL OUTER JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND (NMR.Processed = 998 AND ISNULL(NMRFT.TrackingNum, 0) = 0) AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate)) d ON 1=1
)
GO
/****** Object:  StoredProcedure [IMS].[spOFCU_ReviewQueue_SelectAll]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Jon Eagar
-- Create date: 7/08/2011
-- Description:	Lists the active NMR records for the Queue Review
-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_ReviewQueue_SelectAll
-- =============================================
CREATE PROCEDURE [IMS].[spOFCU_ReviewQueue_SelectAll] 
	-- Add the parameters for the stored procedure here
	@StartDate DATETIME = NULL,
	@EndDate DATETIME = NULL,
	@StatusCode VARCHAR(2) = NULL
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
 
	DECLARE @Hierarchy INT
	DECLARE @StatusID INT

	IF @StartDate IS NOT NULL AND @StartDate <> ''
	BEGIN
		SET @StartDate = CONVERT(DATETIME,(CONVERT(VARCHAR(10), @StartDate, 102)))  --Set Time to beginning of Day
		SET @EndDate = CAST( CONVERT(CHAR(10), @EndDate, 101) + ' 11:59 PM' AS DATETIME) --Set Time to end of day
	END
	
	SET @StatusCode = NULLIF(@StatusCode,'')

	DECLARE @ReviewQueue TABLE
	(
		ID INT IDENTITY(1,1) PRIMARY KEY CLUSTERED,
		TrackingNum INT,	
		Name VARCHAR(90),
		EmployerName VARCHAR(50),
		Account VARCHAR(50),
		StatusName VARCHAR(250),
		StatusID INT,
		FundingComplete CHAR(20), 
		ApplyDate DATETIME,
		Teller VARCHAR(20),
		LastPage VARCHAR(50),
		TNExpireDate DATETIME
	)

	IF (@StatusCode IS NOT NULL)
	BEGIN
		SELECT @Hierarchy=RQC.Hierarchy, @StatusID=RQC.ID FROM IMS.ReviewQueueConfig RQC WHERE RQC.StatusCode = @StatusCode
	END

	IF (@Hierarchy > 0 OR @StatusCode IS NULL)
	BEGIN
		--Existing Loss
		INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, TNExpireDate)
		SELECT	DISTINCT NMR.TrackingNum, 
				LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
				--RTRIM(LTRIM(NMRW.EmployerName)) AS EmployerName,
				'Chks: ' + CASE WHEN (SELECT COUNT(CS.TrackingNum) FROM NewMemberCheckOrderSimple CS WHERE CS.TrackingNum = NMR.TrackingNum) > 0 THEN 'YES' ELSE 'NO' END
				+ '<br>Card: '
				+ REPLACE(REPLACE(COALESCE((SELECT TOP 1 [TypeCode] FROM IMS.NewMemberPlasticCard PC WHERE PC.TrackingNum = NMR.TrackingNum), 'None'), 'D', 'Visa Debit Card'), 'P', 'ATM Card')
				AS EmployerName,
				NMR.Account, 
				RTRIM(RQC.StatusName),-- + '<br>(' + RTRIM(MA.Description) + ')',
				RQC.ID, 
				--NMR.FundingComplete,
				CASE WHEN ISNULL(EXTRA.AuditCompletedBy, '') <> '' THEN EXTRA.AuditCompletedBy ELSE '' END AS FundingComplete,
				NMR.ApplyDate,
--						(SELECT TOP 1 CompletedBy FROM IMS.ActionLog WHERE TrackingNum = NMR.TrackingNum AND NullIf(CompletedBy, '') IS NOT NULL ORDER BY CompletedDate DESC) AS Seller,
				NMR.Seller AS Seller,
				(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
				NMR.TNExpireDate
		FROM IMS.NewMemberRequest NMR 
				INNER JOIN IMS.NewMemberManualApproval MA 
					ON NMR.TrackingNum = MA.TrackingNum AND MA.JointSequence >= 0
				INNER JOIN IMS.ReviewQueueConfig RQC
					ON RQC.StatusCode = 'EL' AND RQC.ReasonCode = LTRIM(RTRIM(MA.ReasonCode))
				LEFT JOIN IMS.NewMemberWork NMRW
					ON NMR.TrackingNum = NMRW.TrackingNum					
				LEFT JOIN IMS.NewMemberRequestExtra EXTRA
					ON NMR.TrackingNum = EXTRA.TrackingNum
		WHERE NOT EXISTS(SELECT TrackingNum FROM @ReviewQueue RQ Where RQ.TrackingNum = NMR.TrackingNum) AND
				NMR.Processed NOT IN (-1, 998, 999) AND 
				((MA.ApprovalStatus = '') OR (MA.ApprovalStatus = 'D')) AND (@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate)AND DATALENGTH(NMR.UserSessionXML) > 0  AND NMR.UserSessionXML IS NOT NULL
		
		IF (@Hierarchy > 1 OR @StatusCode IS NULL)
		BEGIN
			--DENIED
			INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, TNExpireDate)
			SELECT	DISTINCT NMR.TrackingNum, 
					LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
					--RTRIM(LTRIM(NMRW.EmployerName)) AS EmployerName,
					'Chks: ' + CASE WHEN (SELECT COUNT(CS.TrackingNum) FROM NewMemberCheckOrderSimple CS WHERE CS.TrackingNum = NMR.TrackingNum) > 0 THEN 'YES' ELSE 'NO' END
					+ '<br>Card: '
					+ REPLACE(REPLACE(COALESCE((SELECT TOP 1 [TypeCode] FROM IMS.NewMemberPlasticCard PC WHERE PC.TrackingNum = NMR.TrackingNum), 'None'), 'D', 'Visa Debit Card'), 'P', 'ATM Card')
					AS EmployerName,
					NMR.Account, 
					RQC.StatusName,
					RQC.ID, 
					--NMR.FundingComplete,
					CASE WHEN ISNULL(EXTRA.AuditCompletedBy, '') <> '' THEN EXTRA.AuditCompletedBy ELSE '' END AS FundingComplete,
					NMR.ApplyDate,
	--				(SELECT TOP 1 CompletedBy FROM IMS.ActionLog WHERE TrackingNum = NMR.TrackingNum AND NullIf(CompletedBy, '') IS NOT NULL ORDER BY CompletedDate DESC) AS Seller,
					NMR.Seller AS Seller,
					(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
					NMR.TNExpireDate
			FROM IMS.NewMemberRequest NMR 
					INNER JOIN 
					IMS.NewMemberManualApproval MA 
						ON NMR.TrackingNum = MA.TrackingNum 
					INNER JOIN IMS.ReviewQueueConfig RQC
						ON RQC.StatusCode = 'DN'
					LEFT JOIN IMS.NewMemberWork NMRW
						ON NMR.TrackingNum = NMRW.TrackingNum
					LEFT JOIN IMS.NewMemberRequestExtra EXTRA
						ON NMR.TrackingNum = EXTRA.TrackingNum
			WHERE NOT EXISTS(SELECT TrackingNum FROM @ReviewQueue RQ Where RQ.TrackingNum = NMR.TrackingNum) AND
					NMR.Processed = 997 AND (@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate) AND DATALENGTH(NMR.UserSessionXML) > 0  AND NMR.UserSessionXML IS NOT NULL
		
			IF (@Hierarchy > 2 OR @StatusCode IS NULL)
			BEGIN
				--[[REMOVED]] EFUNDS DECLINE
				INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, TNExpireDate)
				SELECT	DISTINCT NMR.TrackingNum, 
						LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
						--RTRIM(LTRIM(NMRW.EmployerName)) AS EmployerName,
						'Chks: ' + CASE WHEN (SELECT COUNT(CS.TrackingNum) FROM NewMemberCheckOrderSimple CS WHERE CS.TrackingNum = NMR.TrackingNum) > 0 THEN 'YES' ELSE 'NO' END
						+ '<br>Card: '
						+ REPLACE(REPLACE(COALESCE((SELECT TOP 1 [TypeCode] FROM IMS.NewMemberPlasticCard PC WHERE PC.TrackingNum = NMR.TrackingNum), 'None'), 'D', 'Visa Debit Card'), 'P', 'ATM Card')
						AS EmployerName,
						NMR.Account, 
						RQC.StatusName,
						RQC.ID, 
						--NMR.FundingComplete,
						CASE WHEN ISNULL(EXTRA.AuditCompletedBy, '') <> '' THEN EXTRA.AuditCompletedBy ELSE '' END AS FundingComplete,
						NMR.ApplyDate,
	--					(SELECT TOP 1 CompletedBy FROM IMS.ActionLog WHERE TrackingNum = NMR.TrackingNum AND NullIf(CompletedBy, '') IS NOT NULL ORDER BY CompletedDate DESC) AS Seller,
						NMR.Seller AS Seller,
						(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
						NMR.TNExpireDate
				FROM IMS.NewMemberRequest NMR 
						INNER JOIN IMS.NewMemberManualApproval MA 
							ON NMR.TrackingNum = MA.TrackingNum AND MA.JointSequence = 0
						INNER JOIN IMS.ReviewQueueConfig RQC
							ON RQC.StatusCode = 'ED' AND RQC.ReasonCode = LTRIM(RTRIM(MA.ReasonCode))
						LEFT JOIN IMS.NewMemberWork NMRW
							ON NMR.TrackingNum = NMRW.TrackingNum					
						LEFT JOIN IMS.NewMemberRequestExtra EXTRA
							ON NMR.TrackingNum = EXTRA.TrackingNum
				WHERE 1=0 AND NOT EXISTS(SELECT TrackingNum FROM @ReviewQueue RQ Where RQ.TrackingNum = NMR.TrackingNum) AND
						NMR.Processed NOT IN (-1, 998, 999) AND 
						(MA.ApprovalStatus = '') AND (@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate)AND DATALENGTH(NMR.UserSessionXML) > 0  AND NMR.UserSessionXML IS NOT NULL

				IF (@Hierarchy > 3 OR @StatusCode IS NULL)
				BEGIN
					--ID/TU DECLINE
					INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, TNExpireDate)
					SELECT	DISTINCT NMR.TrackingNum, 
							LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
							--RTRIM(LTRIM(NMRW.EmployerName)) AS EmployerName,
							'Chks: ' + CASE WHEN (SELECT COUNT(CS.TrackingNum) FROM NewMemberCheckOrderSimple CS WHERE CS.TrackingNum = NMR.TrackingNum) > 0 THEN 'YES' ELSE 'NO' END
							+ '<br>Card: '
							+ REPLACE(REPLACE(COALESCE((SELECT TOP 1 [TypeCode] FROM IMS.NewMemberPlasticCard PC WHERE PC.TrackingNum = NMR.TrackingNum), 'None'), 'D', 'Visa Debit Card'), 'P', 'ATM Card')
							AS EmployerName,
							NMR.Account, 
							RQC.StatusName,
							RQC.ID, 
							--NMR.FundingComplete,
							CASE WHEN ISNULL(EXTRA.AuditCompletedBy, '') <> '' THEN EXTRA.AuditCompletedBy ELSE '' END AS FundingComplete,
							NMR.ApplyDate,
			--				(SELECT TOP 1 CompletedBy FROM IMS.ActionLog WHERE TrackingNum = NMR.TrackingNum AND NullIf(CompletedBy, '') IS NOT NULL ORDER BY CompletedDate DESC) AS Seller,
							NMR.Seller AS Seller,
							(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
							NMR.TNExpireDate
					FROM IMS.NewMemberRequest NMR 
							INNER JOIN IMS.NewMemberSubAccount SA 
								ON NMR.TrackingNum = SA.TrackingNum
							INNER JOIN IMS.ReviewQueueConfig RQC
								ON RQC.StatusCode = 'ID'
							LEFT JOIN IMS.NewMemberWork NMRW
								ON NMR.TrackingNum = NMRW.TrackingNum
							LEFT JOIN IMS.NewMemberManualApproval MA 
								ON NMR.TrackingNum = MA.TrackingNum
							LEFT JOIN IMS.NewMemberRequestExtra EXTRA
								ON NMR.TrackingNum = EXTRA.TrackingNum
					WHERE NOT EXISTS(SELECT TrackingNum FROM @ReviewQueue RQ Where RQ.TrackingNum = NMR.TrackingNum) AND
							NMR.Processed NOT IN (-1, 998, 999) AND 
							(((SA.Approval <> 'A' AND SA.ApprovedBy = '') OR (MA.ApprovalStatus = '')) AND MA.ApproveCode <> 'I') AND 
							(@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate) AND DATALENGTH(NMR.UserSessionXML) > 0 AND NMR.UserSessionXML IS NOT NULL

					IF (@Hierarchy > 4 OR @StatusCode IS NULL)
					BEGIN
						--[[REMOVED]] Manual Review
						INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, TNExpireDate)
						SELECT	DISTINCT NMR.TrackingNum, 
								LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
								--RTRIM(LTRIM(NMRW.EmployerName)) AS EmployerName,
								'Chks: ' + CASE WHEN (SELECT COUNT(CS.TrackingNum) FROM NewMemberCheckOrderSimple CS WHERE CS.TrackingNum = NMR.TrackingNum) > 0 THEN 'YES' ELSE 'NO' END
								+ '<br>Card: '
								+ REPLACE(REPLACE(COALESCE((SELECT TOP 1 [TypeCode] FROM IMS.NewMemberPlasticCard PC WHERE PC.TrackingNum = NMR.TrackingNum), 'None'), 'D', 'Visa Debit Card'), 'P', 'ATM Card')
								AS EmployerName,
								NMR.Account, 
								RQC.StatusName,
								RQC.ID, 
								--NMR.FundingComplete,
								CASE WHEN ISNULL(EXTRA.AuditCompletedBy, '') <> '' THEN EXTRA.AuditCompletedBy ELSE '' END AS FundingComplete,
								NMR.ApplyDate,
	--							(SELECT TOP 1 CompletedBy FROM IMS.ActionLog WHERE TrackingNum = NMR.TrackingNum AND NullIf(CompletedBy, '') IS NOT NULL ORDER BY CompletedDate DESC) AS Seller,
								NMR.Seller AS Seller,
								(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
								NMR.TNExpireDate
						FROM IMS.NewMemberRequest NMR 
								INNER JOIN 
								IMS.NewMemberManualApproval MA 
									ON NMR.TrackingNum = MA.TrackingNum 
								INNER JOIN IMS.ReviewQueueConfig RQC
									ON RQC.StatusCode = 'MR' AND RQC.ReasonCode = LTRIM(RTRIM(MA.ReasonCode))
								LEFT JOIN IMS.NewMemberWork NMRW
									ON NMR.TrackingNum = NMRW.TrackingNum		
								LEFT JOIN IMS.NewMemberRequestExtra EXTRA
									ON NMR.TrackingNum = EXTRA.TrackingNum
						WHERE 1=0 AND NOT EXISTS(SELECT TrackingNum FROM @ReviewQueue RQ Where RQ.TrackingNum = NMR.TrackingNum) AND
							  NMR.Processed NOT IN (-1, 998, 999) AND 
							  (MA.ApprovalStatus = '') AND (@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate) AND DATALENGTH(NMR.UserSessionXML) > 0 AND NMR.UserSessionXML IS NOT NULL

						IF (@Hierarchy > 5 OR @StatusCode IS NULL)
						BEGIN
							--[[REMOVED]] Need Decision/Pending
							INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, TNExpireDate)
							SELECT	DISTINCT NMR.TrackingNum, 
									LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
									--RTRIM(LTRIM(NMRW.EmployerName)) AS EmployerName,
									'Chks: ' + CASE WHEN (SELECT COUNT(CS.TrackingNum) FROM NewMemberCheckOrderSimple CS WHERE CS.TrackingNum = NMR.TrackingNum) > 0 THEN 'YES' ELSE 'NO' END
									+ '<br>Card: '
									+ REPLACE(REPLACE(COALESCE((SELECT TOP 1 [TypeCode] FROM IMS.NewMemberPlasticCard PC WHERE PC.TrackingNum = NMR.TrackingNum), 'None'), 'D', 'Visa Debit Card'), 'P', 'ATM Card')
									AS EmployerName,
									NMR.Account, 
									RQC.StatusName,
									RQC.ID, 
									--NMR.FundingComplete,
									CASE WHEN ISNULL(EXTRA.AuditCompletedBy, '') <> '' THEN EXTRA.AuditCompletedBy ELSE '' END AS FundingComplete,
									NMR.ApplyDate,
	--								(SELECT TOP 1 CompletedBy FROM IMS.ActionLog WHERE TrackingNum = NMR.TrackingNum AND NullIf(CompletedBy, '') IS NOT NULL ORDER BY CompletedDate DESC) AS Seller,
									NMR.Seller AS Seller,
									(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
									NMR.TNExpireDate
							FROM IMS.NewMemberRequest NMR  
									INNER JOIN IMS.NewMemberSubAccount SA 
										ON NMR.TrackingNum = SA.TrackingNum
									INNER JOIN IMS.ReviewQueueConfig RQC
										ON RQC.StatusCode = 'DP'
									LEFT JOIN IMS.NewMemberWork NMRW
										ON NMR.TrackingNum = NMRW.TrackingNum
									LEFT JOIN IMS.NewMemberManualApproval MA 
										ON NMR.TrackingNum = MA.TrackingNum
									LEFT JOIN IMS.NewMemberRequestExtra EXTRA
										ON NMR.TrackingNum = EXTRA.TrackingNum
							WHERE 1=0 AND NOT EXISTS(SELECT TrackingNum FROM @ReviewQueue RQ Where RQ.TrackingNum = NMR.TrackingNum) AND
								  NMR.Processed NOT IN (-1, 998, 999) AND 
								  ((SA.Approval <> 'A' AND SA.ApprovedBy = '') OR (MA.ApprovalStatus = '')) AND 
								  (@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate) AND DATALENGTH(NMR.UserSessionXML) > 0 AND NMR.UserSessionXML IS NOT NULL

							IF (@Hierarchy > 6 OR @StatusCode IS NULL)
							BEGIN
								--Account Created
								INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, TNExpireDate)
								SELECT	DISTINCT NMR.TrackingNum, 
										LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
										--RTRIM(LTRIM(NMRW.EmployerName)) AS EmployerName,
										'Chks: ' + CASE WHEN (SELECT COUNT(CS.TrackingNum) FROM NewMemberCheckOrderSimple CS WHERE CS.TrackingNum = NMR.TrackingNum) > 0 THEN 'YES' ELSE 'NO' END
										+ '<br>Card: '
										+ REPLACE(REPLACE(COALESCE((SELECT TOP 1 [TypeCode] FROM IMS.NewMemberPlasticCard PC WHERE PC.TrackingNum = NMR.TrackingNum), 'None'), 'D', 'Visa Debit Card'), 'P', 'ATM Card')
										AS EmployerName,
										NMR.Account, 
										RQC.StatusName,
										RQC.ID, 
										--NMR.FundingComplete,
										CASE WHEN ISNULL(EXTRA.AuditCompletedBy, '') <> '' THEN EXTRA.AuditCompletedBy ELSE '' END AS FundingComplete,
										NMR.ApplyDate,
	--									(SELECT TOP 1 CompletedBy FROM IMS.ActionLog WHERE TrackingNum = NMR.TrackingNum AND NullIf(CompletedBy, '') IS NOT NULL ORDER BY CompletedDate DESC) AS Seller,
										NMR.Seller AS Seller,
										(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
										NMR.TNExpireDate
								FROM IMS.NewMemberRequest NMR
									INNER JOIN IMS.ReviewQueueConfig RQC 
										ON RQC.StatusCode = 'AC'
									LEFT JOIN IMS.NewMemberWork NMRW
										ON NMR.TrackingNum = NMRW.TrackingNum
									LEFT JOIN IMS.NewMemberRequestExtra EXTRA
										ON NMR.TrackingNum = EXTRA.TrackingNum
								WHERE NOT EXISTS(SELECT TrackingNum FROM @ReviewQueue RQ WHERE RQ.TrackingNum = NMR.TrackingNum) AND
										NMR.Processed = 999 AND 
										IsNull(FundingComplete, 'N') <> 'Y' AND
										(@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate) AND DATALENGTH(NMR.UserSessionXML) > 0 AND NMR.UserSessionXML IS NOT NULL

								IF (@Hierarchy > 7 OR @StatusCode IS NULL)
								BEGIN
									--Completed
									INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, TNExpireDate)
									SELECT	DISTINCT NMR.TrackingNum, 
											LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
											--RTRIM(LTRIM(NMRW.EmployerName)) AS EmployerName,
											'Chks: ' + CASE WHEN (SELECT COUNT(CS.TrackingNum) FROM NewMemberCheckOrderSimple CS WHERE CS.TrackingNum = NMR.TrackingNum) > 0 THEN 'YES' ELSE 'NO' END
											+ '<br>Card: '
											+ REPLACE(REPLACE(COALESCE((SELECT TOP 1 [TypeCode] FROM IMS.NewMemberPlasticCard PC WHERE PC.TrackingNum = NMR.TrackingNum), 'None'), 'D', 'Visa Debit Card'), 'P', 'ATM Card')
											AS EmployerName,
											NMR.Account, 
											RQC.StatusName,
											RQC.ID, 
											--NMR.FundingComplete,
											CASE WHEN ISNULL(EXTRA.AuditCompletedBy, '') <> '' THEN EXTRA.AuditCompletedBy ELSE '' END AS FundingComplete,
											NMR.ApplyDate,
	--										(SELECT TOP 1 CompletedBy FROM IMS.ActionLog WHERE TrackingNum = NMR.TrackingNum AND NullIf(CompletedBy, '') IS NOT NULL ORDER BY CompletedDate DESC) AS Seller,
											NMR.Seller AS Seller,
											(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
											NMR.TNExpireDate
									FROM IMS.NewMemberRequest NMR
										INNER JOIN IMS.ReviewQueueConfig RQC 
											ON RQC.StatusCode = 'XX'
										LEFT JOIN IMS.NewMemberWork NMRW
											ON NMR.TrackingNum = NMRW.TrackingNum
										LEFT JOIN IMS.NewMemberRequestExtra EXTRA
											ON NMR.TrackingNum = EXTRA.TrackingNum
									WHERE NOT EXISTS(SELECT TrackingNum FROM @ReviewQueue RQ WHERE RQ.TrackingNum = NMR.TrackingNum) AND
											NMR.Processed = 999 AND 
											IsNull(FundingComplete, 'N') = 'Y' AND
											(@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate) AND DATALENGTH(NMR.UserSessionXML) > 0 AND NMR.UserSessionXML IS NOT NULL

									IF (@Hierarchy > 8 OR @StatusCode IS NULL)
									BEGIN
										--In Progress
										INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, TNExpireDate)
										SELECT	DISTINCT NMR.TrackingNum, 
												LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
												--RTRIM(LTRIM(NMRW.EmployerName)) AS EmployerName,
												'Chks: ' + CASE WHEN (SELECT COUNT(CS.TrackingNum) FROM NewMemberCheckOrderSimple CS WHERE CS.TrackingNum = NMR.TrackingNum) > 0 THEN 'YES' ELSE 'NO' END
												+ '<br>Card: '
												+ REPLACE(REPLACE(COALESCE((SELECT TOP 1 [TypeCode] FROM IMS.NewMemberPlasticCard PC WHERE PC.TrackingNum = NMR.TrackingNum), 'None'), 'D', 'Visa Debit Card'), 'P', 'ATM Card')
												AS EmployerName,
												NMR.Account, 
												RQC.StatusName,
												RQC.ID, 
												--NMR.FundingComplete,
												CASE WHEN ISNULL(EXTRA.AuditCompletedBy, '') <> '' THEN EXTRA.AuditCompletedBy ELSE '' END AS FundingComplete,
												NMR.ApplyDate,
	--											(SELECT TOP 1 CompletedBy FROM IMS.ActionLog WHERE TrackingNum = NMR.TrackingNum AND NullIf(CompletedBy, '') IS NOT NULL ORDER BY CompletedDate DESC) AS Seller,
												NMR.Seller AS Seller,
												(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
												NMR.TNExpireDate
										FROM IMS.NewMemberRequest NMR			
												INNER JOIN IMS.ReviewQueueConfig RQC 
													ON RQC.StatusCode = 'IP'
												LEFT JOIN IMS.NewMemberWork NMRW
													ON NMR.TrackingNum = NMRW.TrackingNum
												LEFT JOIN IMS.NewMemberRequestExtra EXTRA
													ON NMR.TrackingNum = EXTRA.TrackingNum
										WHERE NOT EXISTS(SELECT TrackingNum FROM @ReviewQueue RQ WHERE RQ.TrackingNum = NMR.TrackingNum) AND
												NMR.Processed = 1 AND NMR.Created <> '' AND 
												(SELECT COUNT(TrackingNum) FROM IMS.NewMemberManualApproval MA WHERE MA.TrackingNum = NMR.TrackingNum AND MA.ApprovalStatus = '' AND MA.ApproveCode <> 'I') = 0 AND
												(SELECT COUNT(TrackingNum) FROM IMS.NewMemberSubAccount SA WHERE SA.TrackingNum = NMR.TrackingNum) = (SELECT COUNT(TrackingNum) FROM IMS.NewMemberSubAccount SA WHERE SA.TrackingNum = NMR.TrackingNum AND (SA.Approval = 'A' OR SA.ApprovedBy <> '')) AND
												(@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate) --AND DATALENGTH(NMR.UserSessionXML) > 0 AND NMR.UserSessionXML IS NOT NULL

									END
								END
							END
						END	  
					END
				END
			END
		END
		SELECT 
		TrackingNum as TrackingNumber,		 
		Name,
		EmployerName,
		Account,
		StatusName,
		--CASE WHEN FundingComplete <> 'Y' THEN 'N' ELSE 'Y' END as FundingComplete,
		FundingComplete,
		ApplyDate, 
		Teller, 
		LastPage, 
		TNExpireDate,
		(
			SELECT COUNT(*)
			FROM IMS.SecureMailThread SMT
			LEFT JOIN IMS.SecureMailAttachment SMA ON SMA.ThreadId = SMT.ThreadId
			WHERE SMT.TrackingNum = RQ.TrackingNum AND SMA.Status = 'U'
		) AS AttachU,
		(
			SELECT COUNT(*)
			FROM IMS.SecureMailThread SMT
			LEFT JOIN IMS.SecureMailAttachment SMA ON SMA.ThreadId = SMT.ThreadId
			WHERE SMT.TrackingNum = RQ.TrackingNum AND SMA.Status = 'V'
		) AS AttachV,
		(
			SELECT COUNT(*)
			FROM IMS.SecureMailThread SMT
			LEFT JOIN IMS.SecureMailAttachment SMA ON SMA.ThreadId = SMT.ThreadId
			WHERE SMT.TrackingNum = RQ.TrackingNum AND SMA.Status = 'Q'
		) AS AttachQU,
		(
			SELECT COUNT(*)
			FROM IMS.SecureMailThread SMT
			LEFT JOIN IMS.SecureMailAttachment SMA ON SMA.ThreadId = SMT.ThreadId
			WHERE SMT.TrackingNum = RQ.TrackingNum AND SMA.Status = 'QV'
		) AS AttachQV
		FROM @ReviewQueue RQ 
		WHERE RQ.StatusID = @StatusID OR @StatusID IS NULL ORDER BY TrackingNum	DESC
	END
END
GO
/****** Object:  StoredProcedure [IMS].[spOFCU_SignOnOAO]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.SignOnOAO 
CREATE Procedure [IMS].[spOFCU_SignOnOAO]
@TrackingNum int,
@Password varchar(24),
@SSN varchar(9),
@DOB datetime
AS
BEGIN
	SELECT
		n.TrackingNum, 
		ISNULL(CAST(n.Account AS VARCHAR(50)),'') AS Account, 
		n.UserSessionXML, 
		n.AccountType, 
		n.Created, 
		n.Processed, 
		n.TNExpireDate, 
		e.BadLoginAttempts
	FROM IMS.NewMemberRequest n
	JOIN IMS.NewMemberRequestExtra e ON n.TrackingNum = e.TrackingNum
	WHERE 
		n.TrackingNum = @TrackingNum 
		AND (
			(
				(n.Password = @Password COLLATE SQL_Latin1_General_CP1_CS_AS) 
				OR (
					n.SSN = @SSN 
					AND n.DOB = @DOB
				)
			) 
			AND n.Processed <> '998' 
			OR (@Password = 'MoDESTaFF')
		)
-- NOTE: The "COLLATE SQL_Latin1_General_CP1_CS_AS" above makes the password search case sensitive.
END
GO
/****** Object:  StoredProcedure [IMS].[spOFCU_SyncCarts]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_SyncCarts
CREATE PROCEDURE [IMS].[spOFCU_SyncCarts]
@TrackingNum int,
@SyncMode varchar(1)
AS

IF @SyncMode = 'S' OR @SyncMode = 'B' OR @SyncMode = 'Y'
BEGIN
	--Delete from cart where subaccount record no longer exists
	DELETE FROM IMS.NewMemberShoppingCart
	WHERE TrackingNum = @TrackingNum AND SubAccountID IS NOT NULL AND
		SubAccountID NOT IN (SELECT ID FROM IMS.NewMemberSubAccount
					WHERE TrackingNum = @TrackingNum)
END

IF @SyncMode = 'C' OR @SyncMode = 'B' OR @SyncMode = 'Y'
BEGIN
	--Delete from subaccounts where cart record no longer exists
	DELETE FROM IMS.NewMemberSubAccount
	WHERE TrackingNum = @TrackingNum AND ShoppingCartID IS NOT NULL AND
		ShoppingCartID NOT IN (SELECT ID FROM IMS.NewMemberShoppingCart
					WHERE TrackingNum = @TrackingNum)
END

IF @SyncMode = 'S' OR @SyncMode = 'B' OR @SyncMode = 'Y'
BEGIN
	--Update cart items with changes in the subaccount records
	UPDATE IMS.NewMemberShoppingCart
	SET RequestedAmount = (SELECT Amount FROM IMS.NewMemberSubAccount
				WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberShoppingCart.SubAccountID),
		InsuranceAmount1 = NULL,
		InsuranceAmount2 = NULL
	WHERE TrackingNum = @TrackingNum AND
		SubAccountID IN (SELECT ID FROM IMS.NewMemberSubAccount WHERE TrackingNum = @TrackingNum) AND
		IsNull((SELECT LineOfCredit FROM IMS.udt_LSubAccounts WHERE UniqueID = IMS.NewMemberShoppingCart.ProductID), 'N') = 'N' AND
		(SELECT Amount FROM IMS.NewMemberSubAccount WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberShoppingCart.SubAccountID) <> IMS.NewMemberShoppingCart.RequestedAmount + IsNull(IMS.NewMemberShoppingCart.InsuranceAmount1, 0) + IsNull(IMS.NewMemberShoppingCart.InsuranceAmount2, 0)

	UPDATE IMS.NewMemberShoppingCart
	SET RequestedAmount = (SELECT CreditLimit FROM IMS.NewMemberSubAccount
				WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberShoppingCart.SubAccountID),
		InsuranceAmount1 = NULL,
		InsuranceAmount2 = NULL
	WHERE TrackingNum = @TrackingNum AND
		SubAccountID IN (SELECT ID FROM IMS.NewMemberSubAccount WHERE TrackingNum = @TrackingNum) AND
		(SELECT LineOfCredit FROM IMS.udt_LSubAccounts WHERE UniqueID = IMS.NewMemberShoppingCart.ProductID) = 'Y' AND
		(SELECT CreditLimit FROM IMS.NewMemberSubAccount WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberShoppingCart.SubAccountID) <> IMS.NewMemberShoppingCart.RequestedAmount + IsNull(IMS.NewMemberShoppingCart.InsuranceAmount1, 0) + IsNull(IMS.NewMemberShoppingCart.InsuranceAmount2, 0)

	UPDATE IMS.NewMemberShoppingCart
	SET Term = (SELECT Term FROM IMS.NewMemberSubAccount
				WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberShoppingCart.SubAccountID)
	WHERE TrackingNum = @TrackingNum AND
		SubAccountID IN (SELECT ID FROM IMS.NewMemberSubAccount WHERE TrackingNum = @TrackingNum)

	--Create cart items for new subaccount records
	INSERT INTO IMS.NewMemberShoppingCart
	(ProductID, ProductName, YesNoMaybe, SLType, Approved, TrackingNum, MasterCategoryID, CategoryID,
	Exclude, CreatedBy, CreatedOn, Created, Fulfill, LOSProductID, LOSID,
	ApprovedAmount, RequestedAmount, Requires, LoanType, LoanSubType, Term, InsCode, ClosedFlag, LossFlag, SubAccountID)
	SELECT STP.ProductID, STP.ProductDesc, 'YES', STP.SLType, 'Y', @TrackingNum AS TrackingNum, STP.MasterCategoryID, STP.CategoryID,
		Prod.Exclude, SA.CreatedBy, SA.CreatedOn, SA.Created, STP.Fulfill, STP.LOSProductID, SA.LOSID,
		CASE WHEN Prod.LineOfCredit = 'Y' THEN SA.CreditLimit
		     ELSE SA.Amount
		END AS ApprovedAmount,
		CASE WHEN Prod.LineOfCredit = 'Y' THEN SA.CreditLimit
		     ELSE SA.Amount
		END AS RequestedAmount,
		STP.Requires, STP.LoanType, STP.LoanSubType, SA.Term, SA.InsCode, SA.ClosedFlag, SA.LossFlag, SA.ID AS SubAccountID
	FROM IMS.udt_SalesToolProducts STP INNER JOIN
		IMS.NewMemberSubAccount SA ON SA.SubAccountType = STP.ProductID INNER JOIN
		IMS.NewMemberRequest NMR ON SA.TrackingNum = NMR.TrackingNum INNER JOIN
		IMS.udt_AllSubAccounts Prod ON STP.ProductID = Prod.UniqueID AND ',' + RTrim(Prod.AccountTypes) + ',' LIKE '%,' + RTrim(NMR.AccountType) + ',%'
	WHERE SA.TrackingNum = @TrackingNum AND SA.SubAccountType NOT IN (SELECT ProductID FROM IMS.NewMemberShoppingCart WHERE TrackingNum = @TrackingNum)
	
	--Delete products that require products that are no longer here
	DELETE FROM IMS.NewMemberShoppingCart
	WHERE TrackingNum = @TrackingNum AND NullIf(Requires, '') IS NOT NULL AND
		(SELECT Count(SC2.ID) FROM IMS.NewMemberShoppingCart SC2 INNER JOIN
			(SELECT DISTINCT
			        SUBSTRING(l.List, v.Number+1, CHARINDEX(',', l.List, v.Number+1) -v.Number-1) AS Requires
			   FROM Master.dbo.spt_Values v
			  CROSS JOIN
			        (SELECT ',' + RTRIM(REPLACE(Requires, ', ', ',')) + ',' AS List
				FROM IMS.NewMemberShoppingCart
				WHERE TrackingNum = @TrackingNum AND ProductID = IMS.NewMemberShoppingCart.ProductID) l
			  WHERE v.Type = 'P'
			    AND v.Number BETWEEN 1 AND LEN(l.List)-1
			    AND SUBSTRING(l.List, v.Number, 1)=',') FN ON SC2.ProductID = FN.Requires
			WHERE TrackingNum = @TrackingNum AND SC2.ProductID <> IMS.NewMemberShoppingCart.ProductID) = 0
END

IF @SyncMode = 'C' OR @SyncMode = 'B' OR @SyncMode = 'Y'
BEGIN
	--Update subaccounts with changes in the cart records
	UPDATE IMS.NewMemberSubAccount
	SET Amount = (SELECT RequestedAmount + IsNull(InsuranceAmount1, 0) + IsNull(InsuranceAmount2, 0) FROM IMS.NewMemberShoppingCart
				WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberSubAccount.ShoppingCartID)
	WHERE TrackingNum = @TrackingNum AND
		ShoppingCartID IN (SELECT ID FROM IMS.NewMemberShoppingCart WHERE TrackingNum = @TrackingNum) AND
		IsNull((SELECT LineOfCredit FROM IMS.udt_LSubAccounts WHERE UniqueID = IMS.NewMemberSubAccount.SubAccountType), 'N') = 'N' AND
		(SELECT RequestedAmount + IsNull(InsuranceAmount1, 0) + IsNull(InsuranceAmount2, 0) FROM IMS.NewMemberShoppingCart WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberSubAccount.ShoppingCartID) <> IMS.NewMemberSubAccount.Amount

	UPDATE IMS.NewMemberSubAccount
	SET CreditLimit = (SELECT RequestedAmount + IsNull(InsuranceAmount1, 0) + IsNull(InsuranceAmount2, 0) FROM IMS.NewMemberShoppingCart
				WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberSubAccount.ShoppingCartID)
	WHERE TrackingNum = @TrackingNum AND
		ShoppingCartID IN (SELECT ID FROM IMS.NewMemberShoppingCart WHERE TrackingNum = @TrackingNum) AND
		(SELECT LineOfCredit FROM IMS.udt_LSubAccounts WHERE UniqueID = IMS.NewMemberSubAccount.SubAccountType) = 'Y' AND
		(SELECT RequestedAmount + IsNull(InsuranceAmount1, 0) + IsNull(InsuranceAmount2, 0) FROM IMS.NewMemberShoppingCart WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberSubAccount.ShoppingCartID) <> IMS.NewMemberSubAccount.CreditLimit

	UPDATE IMS.NewMemberSubAccount
	SET Term = (SELECT Term FROM IMS.NewMemberShoppingCart
				WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberSubAccount.ShoppingCartID)
	WHERE TrackingNum = @TrackingNum AND
		ShoppingCartID IN (SELECT ID FROM IMS.NewMemberShoppingCart WHERE TrackingNum = @TrackingNum)

	--Create subaccount records for new cart items
	INSERT INTO IMS.NewMemberSubAccount
	(TrackingNum, Sequence, DescAbrv, SubAccountType, Description, ACC, CollateralCode, SLType, Amount,
	Approval, Created, CreatedBy, CreatedOn, ProductType,
	CreditLimit, StartSuffix, StopSuffix, APR, CashAdvanceAPR, SkipCode, Coupons, Term, Method,
	Frequency, InsCode, DisclosureCode, ReviewDate, MaturityDate, Officer, CurrBranch, StatementOrder, MaturityDisp, 
	DividendDisp, LineofCredit, PaymentPercent, AllowPlastic1, AllowPlastic2, AllowPlastic3, AllowPlastic4, 
	CreateHost, HostCommand, ServiceClass, TaxCode, JointTaxCode, W8TaxCode, KTransferLink, LoanDiscounts, 
	MICRBegin, MICREnd, MICRFormat, PromptMICR, Purpose, FundingOrder, VRLIndex, VRLMargin, 
	VRLCode, VRLFreq, LOSProductID, LOSID, LossFlag, ClosedFlag, ShoppingCartID, Action, Payment)
	SELECT @TrackingNum AS TrackingNum, (SELECT Count(ID) FROM IMS.NewMemberShoppingCart SC2 WHERE TrackingNum = @TrackingNum AND SC2.Approved = 'Y' AND 
		SC2.ProductID NOT IN (SELECT SubAccountType FROM IMS.NewMemberSubAccount SA2 WHERE TrackingNum = @TrackingNum) AND SC2.ID <= SC.ID) + 
		(SELECT IsNull(Max(Sequence), 0) FROM IMS.NewMemberSubAccount SA3 WHERE TrackingNum = @TrackingNum) AS Sequence,
	Prod.DescAbrv, Prod.UniqueID, Prod.Description, Prod.ACC, Prod.CollateralCode, Prod.SLType,
	CASE WHEN Prod.LineOfCredit = 'Y' THEN 0
	     ELSE SC.RequestedAmount + IsNull(SC.InsuranceAmount1, 0) + IsNull(SC.InsuranceAmount2, 0)
	END AS Amount, NMR.Approval, SC.Created, SC.CreatedBy, SC.CreatedOn, Prod.ProductType,
	CASE WHEN Prod.LineOfCredit = 'Y' THEN SC.RequestedAmount
	     ELSE 0
	END AS CreditLimit, Prod.StartSuffix, Prod.StopSuffix, Prod.APR, Prod.CashAdvanceAPR, Prod.SkipCode, Prod.Coupons, Prod.Term, Prod.Method,
	Prod.Frequency, Prod.InsCode, Prod.DisclosureCode, Prod.ReviewDate, Prod.MaturityDate, Prod.Officer, Prod.CurrBranch, Prod.StatementOrder, Prod.MaturityDisp, 
	Prod.DividendDisp, Prod.LineofCredit, Prod.PaymentPercent, Prod.AllowPlastic1, Prod.AllowPlastic2, Prod.AllowPlastic3, Prod.AllowPlastic4, 
	Prod.CreateHost, Prod.HostCommand, Prod.ServiceClass, Prod.TaxCode,Prod.JointTaxCode, Prod.W8TaxCode, Prod.KTransferLink, Prod.LoanDiscounts, 
	Prod.MICRBegin, Prod.MICREnd, Prod.MICRFormat, Prod.PromptMICR, Prod.Purpose, Prod.FundingOrder, Prod.VRLIndex, Prod.VRLMargin, 
	Prod.VRLCode, Prod.VRLFreq, SC.LOSProductID, SC.LOSID, SC.LossFlag, SC.ClosedFlag, SC.ID AS ShoppingCartID, Prod.Action, 0
	FROM IMS.NewMemberShoppingCart SC INNER JOIN
		IMS.NewMemberRequest NMR ON SC.TrackingNum = NMR.TrackingNum INNER JOIN
		IMS.udt_AllSubAccounts Prod ON SC.ProductID = Prod.UniqueID AND ',' + RTrim(Prod.AccountTypes) + ',' LIKE '%,' + RTrim(NMR.AccountType) + ',%'
	WHERE SC.TrackingNum = @TrackingNum AND SC.Approved = 'Y' AND SC.ProductID NOT IN (SELECT SubAccountType FROM IMS.NewMemberSubAccount WHERE TrackingNum = @TrackingNum)
	ORDER BY ID
	
	--Delete products that require products that are no longer here
	/*DELETE NewMemberSubAccount FROM IMS.NewMemberSubAccount SA
	WHERE TrackingNum = @TrackingNum AND
		(SELECT NullIf(Requires, '') FROM IMS.udt_AllSubAccounts WHERE UniqueID = SA.SubAccountType) IS NOT NULL AND
		(SELECT Count(SA2.ID) FROM IMS.NewMemberSubAccount SA2 INNER JOIN
			(SELECT DISTINCT
			        SUBSTRING(l.List, v.Number+1, CHARINDEX(',', l.List, v.Number+1) -v.Number-1) AS Requires
			   FROM Master.dbo.spt_Values v
			  CROSS JOIN
			        (SELECT ',' + RTRIM(REPLACE(Requires, ', ', ',')) + ',' AS List
				FROM IMS.udt_AllSubAccounts
				WHERE UniqueID = SA.SubAccountType) l
			  WHERE v.Type = 'P'
			    AND v.Number BETWEEN 1 AND LEN(l.List)-1
			    AND SUBSTRING(l.List, v.Number, 1)=',') FN ON SA2.SubAccountType = FN.Requires
			WHERE TrackingNum = @TrackingNum AND SA2.SubAccountType <> SA.SubAccountType) = 0*/

	--Delete subaccounts that came from shopping cart items that are no longer approved
	DELETE FROM IMS.NewMemberSubAccount
	WHERE TrackingNum = @TrackingNum AND ((ID IN (SELECT SubAccountID
		FROM IMS.NewMemberShoppingCart
		WHERE TrackingNum = @TrackingNum AND SubAccountID IS NOT NULL AND
			Approved = 'N')) OR (ShoppingCartID IS NOT NULL AND 
		ShoppingCartID IN (SELECT ID
		FROM IMS.NewMemberShoppingCart
		WHERE TrackingNum = @TrackingNum AND Approved = 'N')))

	UPDATE IMS.NewMemberShoppingCart
	SET SubAccountID = NULL
	WHERE TrackingNum = @TrackingNum AND Approved = 'N'

	--Delete plastic cards for subaccounts that no longer exist
	DELETE FROM IMS.NewMemberPlasticCard
	WHERE TrackingNum = @TrackingNum AND Sequence IN (SELECT PlasticCardSequence
		FROM IMS.NewMemberSubAccountLink
		WHERE TrackingNum = @TrackingNum AND SubSequence NOT IN (SELECT Sequence
			FROM IMS.NewMemberSubAccount
			WHERE TrackingNum = @TrackingNum))

	DELETE FROM IMS.NewMemberSubAccountLink
	WHERE TrackingNum = @TrackingNum AND SubSequence NOT IN (SELECT Sequence
		FROM IMS.NewMemberSubAccount
		WHERE TrackingNum = @TrackingNum)

	--Delete flags for subaccounts that no longer exist
	DELETE FROM IMS.NewMemberFlag
	WHERE TrackingNum = @TrackingNum AND IsNull(SubAccountSequence, 0) > 0 AND
		SubAccountSequence NOT IN (SELECT Sequence
		FROM IMS.NewMemberSubAccount
		WHERE TrackingNum = @TrackingNum)

	--Delete joint owner links for subaccounts that no longer exist
	DELETE FROM IMS.NewMemberJointLink
	WHERE TrackingNum = @TrackingNum AND SubAccountSequence NOT IN (SELECT Sequence
		FROM IMS.NewMemberSubAccount
		WHERE TrackingNum = @TrackingNum)

	--Delete overdraft links for subaccount that no longer exist
	DELETE FROM IMS.NewMemberOverdraftLink
	WHERE TrackingNum = @TrackingNum AND ((TargetSubAccount > 0 AND
		TargetSubAccount NOT IN (SELECT Sequence
		FROM IMS.NewMemberSubAccount
		WHERE TrackingNum = @TrackingNum)) OR (SourceSubAccount > 0 AND
		SourceSubAccount NOT IN (SELECT Sequence
		FROM IMS.NewMemberSubAccount
		WHERE TrackingNum = @TrackingNum)))
END

--Synchronize IDs
UPDATE IMS.NewMemberSubAccount
SET ShoppingCartID = (SELECT ID FROM IMS.NewMemberShoppingCart
			WHERE TrackingNum = @TrackingNum AND SubAccountID = IMS.NewMemberSubAccount.ID)
WHERE TrackingNum = @TrackingNum AND (SELECT ID FROM IMS.NewMemberShoppingCart
			WHERE TrackingNum = @TrackingNum AND SubAccountID = IMS.NewMemberSubAccount.ID) IS NOT NULL

UPDATE IMS.NewMemberShoppingCart
SET SubAccountID = (SELECT ID FROM IMS.NewMemberSubAccount
			WHERE TrackingNum = @TrackingNum AND ShoppingCartID = IMS.NewMemberShoppingCart.ID)
WHERE TrackingNum = @TrackingNum AND (SELECT ID FROM IMS.NewMemberSubAccount
			WHERE TrackingNum = @TrackingNum AND ShoppingCartID = IMS.NewMemberShoppingCart.ID) IS NOT NULL
GO
/****** Object:  StoredProcedure [IMS].[spOFCU_UnreconciledFunding_Select]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		Jonathan Eagar
-- Create date: 5/08/2009
-- Description:	Returns all unreconciled transactions
-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_UnreconciledFunding_Select
-- =============================================
CREATE PROCEDURE [IMS].[spOFCU_UnreconciledFunding_Select] 
	-- Add the parameters for the stored procedure here
	@AccountNumber bigint
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
    -- Insert statements for procedure here
     -- Insert statements for procedure here
    IF ISNULL(@AccountNumber, 0) = 0  
    BEGIN
		SELECT	FS.AccountNumber, 
				FS.FundingTransactionID, 
				FS.TrackingNum, 
				FS.GatewayPaymentID, 
				FS.GatewayPaymentStatus, 
				FS.FundingAccountID, 
				FS.FundingType, 
				FS.TargetSubAccountSeq, 
				FS.TargetSubAccountSuffix, 
				FS.TransferAmount, 
				FS.DateTimeCreated, 
				FS.DateTimeLastTransaction,
				FS.MemberName,
				FS.SourceBankName,
				FS.SourceBankRouting,
				FS.SourceAccountLast4,
				FS.SourceCardType
		FROM
		(
			SELECT	VF.AccountNumber, 
					VF.FundingTransactionID , 
					VF.TrackingNum, 
					VF.GatewayPaymentID, 
					PS.PaymentStatus as GatewayPaymentStatus, 
					VF.FundingAccountID, 
					VF.FundingType, 
					VF.TargetSubAccountSeq, 
					VF.TargetSubAccountSuffix, 
					VF.TransferAmount, 
					VF.DateTimeCreated, 
					VF.DateTimeLastTransaction,
					VF.MemberName,
					VF.SourceBankName,
					VF.SourceBankRouting,
					VF.SourceAccountLast4,
					VF.SourceCardType
			FROM
			(	
				(
					SELECT	F.AccountNumber, 
							FT.ID as FundingTransactionID, 
							FT.TrackingNum, 
							FT.GatewayPaymentID, 
							FB.ID as FundingAccountID, 
							FT.FundingType, 
							FT.TargetSubAccountSeq,	
							FT.TargetSubAccountSuffix, 
							FT.Amount as TransferAmount, 
							FT.DateTimeCreated, 
							FT.DateTimeLastTransaction,
							NMR.FName + ' ' + NMR.LName as MemberName,
							FB.BankName as SourceBankName,
							FB.RoutingNumber as SourceBankRouting,
							FB.AccountNumberLast4 as SourceAccountLast4,
							'' as SourceCardType
					FROM IMS.NewMemberRequest as NMR 
					INNER JOIN IMS.NMRFundingTransaction AS FT ON NMR.TrackingNum = FT.TrackingNum
					INNER JOIN IMS.NMRFundingBank AS FB ON FT.FundingBankID = FB.ID 
					INNER JOIN IMS.NMRFunding as F ON F.ID = FB.FundingID 
					WHERE FT.DateTimeReconciled IS NULL
				)
				UNION ALL
				(
					SELECT F.AccountNumber, 
					FT.ID as FundingTransactionID, 
					FT.TrackingNum, 
					FT.GatewayPaymentID, 
					FC.ID as FundingAccountID, 
					FT.FundingType, 
					FT.TargetSubAccountSeq,	
					FT.TargetSubAccountSuffix, 
					FT.Amount as TransferAmount, 
					FT.DateTimeCreated, 
					FT.DateTimeLastTransaction,
					NMR.FName + ' ' + NMR.LName as MemberName,
					'' as SourceBankName,
					'' as SourceBankRouting,
					FC.AccountNumberLast4 as SourceAccountLast4,
					FC.CardType as SourceCardType
					FROM IMS.NewMemberRequest as NMR 
					INNER JOIN IMS.NMRFundingTransaction AS FT ON NMR.TrackingNum = FT.TrackingNum
					INNER JOIN IMS.NMRFundingCard AS FC ON FT.FundingCardID = FC.ID 
					INNER JOIN IMS.NMRFunding as F ON F.ID = FC.FundingID 
					WHERE FT.DateTimeReconciled IS NULL AND UPPER(ISNULL(FC.AuthenticationCode, '')) NOT IN ('DECLINED', 'FAILED', 'FRAUD', 'ERROR', '')
				)
			)AS VF LEFT OUTER JOIN IMS.USAePayPaymentStatus AS PS ON VF.GatewayPaymentID = PS.PaymentId
		) AS FS	ORDER BY DateTimeCreated
    END		
    ELSE
	BEGIN    
		SELECT	FS.AccountNumber, 
				FS.FundingTransactionID, 
				FS.TrackingNum, 
				FS.GatewayPaymentID, 
				FS.GatewayPaymentStatus, 
				FS.FundingAccountID, 
				FS.FundingType, 
				FS.TargetSubAccountSeq, 
				FS.TargetSubAccountSuffix, 
				FS.TransferAmount, 
				FS.DateTimeCreated, 
				FS.DateTimeLastTransaction,
				FS.MemberName,
				FS.SourceBankName,
				FS.SourceBankRouting,
				FS.SourceAccountLast4,
				FS.SourceCardType
		FROM
		(
			SELECT	VF.AccountNumber, 
					VF.FundingTransactionID, 
					VF.TrackingNum, 
					VF.GatewayPaymentID, 
					PS.PaymentStatus as GatewayPaymentStatus, 
					VF.FundingAccountID, 
					VF.FundingType, 
					VF.TargetSubAccountSeq, 
					VF.TargetSubAccountSuffix, 
					VF.TransferAmount, 
					VF.DateTimeCreated, 
					VF.DateTimeLastTransaction,
					VF.MemberName,
					VF.SourceBankName,
					VF.SourceBankRouting,
					VF.SourceAccountLast4,
					VF.SourceCardType
			FROM
			(	
				(
					SELECT	F.AccountNumber, 
							FT.ID as FundingTransactionID, 
							FT.TrackingNum, 
							FT.GatewayPaymentID, 
							FB.ID as FundingAccountID, 
							FT.FundingType, 
							FT.TargetSubAccountSeq,	
							FT.TargetSubAccountSuffix, 
							FT.Amount as TransferAmount, 
							FT.DateTimeCreated, 
							FT.DateTimeLastTransaction,
							NMR.FName + ' ' + NMR.LName as MemberName,
							FB.BankName as SourceBankName,
							FB.RoutingNumber as SourceBankRouting,
							FB.AccountNumberLast4 as SourceAccountLast4,
							'' as SourceCardType
					FROM IMS.NewMemberRequest as NMR 
					INNER JOIN IMS.NMRFundingTransaction AS FT ON NMR.TrackingNum = FT.TrackingNum
					INNER JOIN IMS.NMRFundingBank AS FB ON FT.FundingBankID = FB.ID 
					INNER JOIN IMS.NMRFunding as F ON F.ID = FB.FundingID 
					WHERE F.AccountNumber = @AccountNumber AND FT.DateTimeReconciled IS NULL
				)
				UNION ALL
				(
					SELECT	F.AccountNumber, 
							FT.ID as FundingTransactionID, 
							FT.TrackingNum, FT.GatewayPaymentID, 
							FC.ID as FundingAccountID, 
							FT.FundingType, 
							FT.TargetSubAccountSeq,	
							FT.TargetSubAccountSuffix, 
							FT.Amount as TransferAmount, 
							FT.DateTimeCreated, 
							FT.DateTimeLastTransaction,
							NMR.FName + ' ' + NMR.LName as MemberName,
							'' as SourceBankName,
							'' as SourceBankRouting,
							FC.AccountNumberLast4 as SourceAccountLast4,
							FC.CardType as SourceCardType
					FROM IMS.NewMemberRequest as NMR 
					INNER JOIN IMS.NMRFundingTransaction AS FT ON NMR.TrackingNum = FT.TrackingNum
					INNER JOIN IMS.NMRFundingCard AS FC ON FT.FundingCardID = FC.ID 
					INNER JOIN IMS.NMRFunding as F ON F.ID = FC.FundingID 
					WHERE F.AccountNumber = @AccountNumber AND FT.DateTimeReconciled IS NULL AND UPPER(ISNULL(FC.AuthenticationCode, '')) NOT IN ('DECLINED', 'FAILED', 'FRAUD', 'ERROR', '')
				)
			)AS VF LEFT OUTER JOIN IMS.USAePayPaymentStatus AS PS ON VF.GatewayPaymentID = PS.PaymentId
		) AS FS	ORDER BY DateTimeCreated
    END		
END

GO
/****** Object:  StoredProcedure [IMS].[spOFCU_UnreconciledVerification_Select]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_UnreconciledVerification_Select
CREATE PROCEDURE [IMS].[spOFCU_UnreconciledVerification_Select]
	-- Add the parameters for the stored procedure here
	@AccountNumber bigint
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
    IF ISNULL(@AccountNumber, 0) = 0  
    BEGIN
		SELECT      NMRFunding.AccountNumber, NMRFundingBank.ID as FundingBankID, IMS.fnOFCU_GetUSAePayPaymentStatus(NMRFundingBank.GatewayPaymentID1) as GatewayPaymentStatus1, IMS.fnOFCU_GetUSAePayPaymentStatus(NMRFundingBank.GatewayPaymentID2) as GatewayPaymentStatus2, NMRFundingBank.TrackingNum, NMRFundingBank.AccountNumberLast4, 
						  NMRFundingBank.BankName, NMRFundingBank.AccountType, NMRFundingBank.Amount1, NMRFundingBank.Amount2, 
						  NMRFundingBank.PSIErrorMessage, NMRFundingBank.DateTimeCreated, NMRFundingBank.DateTimeExported, NMRFundingBank.DateTimeLastTransaction
		FROM         NMRFundingBank INNER JOIN
						  NMRFunding ON NMRFundingBank.FundingID = NMRFunding.ID
		WHERE     (NMRFundingBank.DateTimeVerificationReconciled IS NULL AND NMRFundingBank.VerificationStatus = 'V' AND 1 = 0) -- Verification Amounts turned off for Citadel
    END
    ELSE
	BEGIN    
		SELECT      NMRFunding.AccountNumber, NMRFundingBank.ID as FundingBankID, IMS.fnOFCU_GetUSAePayPaymentStatus(NMRFundingBank.GatewayPaymentID1) as GatewayPaymentStatus1, IMS.fnOFCU_GetUSAePayPaymentStatus(NMRFundingBank.GatewayPaymentID2) as GatewayPaymentStatus2, NMRFundingBank.TrackingNum, NMRFundingBank.AccountNumberLast4, 
						  NMRFundingBank.BankName, NMRFundingBank.AccountType, NMRFundingBank.Amount1, NMRFundingBank.Amount2, 
						  NMRFundingBank.PSIErrorMessage, NMRFundingBank.DateTimeCreated, NMRFundingBank.DateTimeExported, NMRFundingBank.DateTimeLastTransaction
		FROM         NMRFundingBank INNER JOIN
						  NMRFunding ON NMRFundingBank.FundingID = NMRFunding.ID
		WHERE     (NMRFunding.AccountNumber = @AccountNumber AND DateTimeVerificationReconciled IS NULL AND NMRFundingBank.VerificationStatus = 'V' AND 1 = 0) -- Verification Amounts turned off for Citadel     
    END	
END


GO
/****** Object:  StoredProcedure [IMS].[spONCU_D10Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spONCU_D10Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @docsubname char(100)
DECLARE @newdocsub char(200)
DECLARE @docsuffix char(2)
DECLARE @count int
DECLARE @docindex int

DECLARE curs CURSOR FOR
	SELECT DISTINCT SA.Sequence, CONVERT(char(2), SA.Suffix)
	FROM NewMemberSubAccount AS SA
	LEFT JOIN NewMemberRequest AS NMR ON NMR.TrackingNum = SA.TrackingNum
	WHERE SA.TrackingNum = @TrackingNum AND SA.OptInOptOutOptionID = 1 --And SA.Created = 'Y'

OPEN curs
FETCH NEXT FROM curs INTO @docsubname, @docsuffix
SET @newdocsub = 'Reg E Opt In for Suffix ' + CASE LEN(@docsuffix) WHEN 2 THEN @docsuffix WHEN 1 THEN '0' + @docsuffix ELSE 'NA' END
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count

	SET @docindex = @docindex + 1
	INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)

	FETCH NEXT FROM curs INTO @docsubname, @docsuffix

	SET @newdocsub = 'Reg E for Suffix ' + CASE LEN(@docsuffix) WHEN 2 THEN @docsuffix WHEN 1 THEN '0' + @docsuffix ELSE 'NA' END
   END

CLOSE curs
DEALLOCATE curs

SELECT 'EOPTIN' AS DocCode, * FROM IMS.NewMemberDoc WHERE TrackingNum = @TrackingNum
DELETE FROM IMS.NewMemberDoc WHERE TrackingNum = @TrackingNum

Return 1
GO
/****** Object:  StoredProcedure [IMS].[spONCU_D10Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spONCU_D10Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @seq int
DECLARE @seq1 int
DECLARE @count int

DECLARE curs2 CURSOR FOR
	SELECT  CONVERT(int, Sequence)
	FROM NewMemberSubAccount AS SA
	LEFT JOIN NewMemberRequest AS NMR ON NMR.TrackingNum = SA.TrackingNum
	WHERE NMR.TrackingNum = @TrackingNum AND SA.OptInOptOutOptionID = 1 And SA.Created = 'Y'

OPEN curs2
FETCH NEXT FROM curs2 INTO @seq
SET @count = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
   	IF (@count = 0 AND @DocIndex = 1)
		BEGIN
			Set @seq1 = @seq
		END
	IF (@count = 1 AND @DocIndex = 2) 
		BEGIN
			Set @seq1 = @seq		
		END
	IF (@count = 2 AND @DocIndex = 3)
		BEGIN
			Set @seq1 = @seq		
		END
	IF (@count = 3 AND @DocIndex = 4)
		BEGIN
			Set @seq1 = @seq		
		END
	IF (@count = 4 AND @DocIndex = 5)
		BEGIN
			Set @seq1 = @seq		
		END
	IF (@count = 5 AND @DocIndex = 6)
		BEGIN
			Set @seq1 = @seq		
		END
	IF (@count = 6 AND @DocIndex = 7)
		BEGIN
			Set @seq1 = @seq		
		END
	IF (@count = 7 AND @DocIndex = 8)
		BEGIN
			Set @seq1 = @seq		
		END
      	FETCH NEXT FROM curs2 INTO @seq
	SET @count = @count + 1
	PRINT @count
   END

CLOSE curs2
DEALLOCATE curs2

SELECT @DocIndex As DocIndex
	, CASE WHEN SA.OptInOptOutOptionID = 1 THEN 'X' ELSE '' END OptIn
	, CASE WHEN SA.OptInOptOutOptionID = 2 THEN 'X' ELSE '' END OptOut
	, NMR.ApplyDate AS ApplyDate
	, RTRIM(NMR.Account) + '-' + RIGHT('00' + RTRIM(CAST(SA.Suffix AS VARCHAR(2))), 2) AS Account
	, RTRIM(NMR.Account) AS AccountOnly
FROM NewMemberRequest As NMR
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN fnONCU_GetSASeq(@TrackingNum, @seq1) As SA ON NMR.TrackingNum = SA.TrackingNum
WHERE NMR.TrackingNum = @TrackingNum
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spONCU_D1Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [IMS].[spONCU_D1Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @docsubname CHAR(100)
DECLARE @newdocsub CHAR(100)
DECLARE @count INT
DECLARE @docindex INT
DECLARE curs CURSOR LOCAL FAST_FORWARD FOR
--	SELECT '' AS docsubname
--	FROM NewMemberRequest AS NMR
--	WHERE NMR.TrackingNum = @TrackingNum-- AND NMR.Processed = 999 AND (NMR.Created = 'Y' OR NMR.Created = 'I')
	SELECT TOP 1 '' AS docsubname
	FROM NewMemberRequest AS NMR
	LEFT JOIN NewMemberSubAccount AS SA ON SA.TrackingNum = NMR.TrackingNum
	LEFT JOIN NewMemberJointOwner AS JO ON JO.TrackingNum = NMR.TrackingNum
	LEFT JOIN NewMemberChangeHistory AS CH ON CH.TrackingNum = NMR.TrackingNum
	WHERE NMR.TrackingNum = @TrackingNum
		AND ((1=1	--NMR.Created = 'Y'
		OR (SA.ProductType <> 'CERT') --AND SA.Created = 'Y')
		OR (JO.ChangeCode IN ('N', 'C', 'D') AND JO.JointOwnerType NOT IN ('CB', 'CJ', 'CO', 'CT')))
		OR (CH.ChangedField = 'FName' OR CH.ChangedField = 'LName')) AND NMR.CurrBranch <> 41

OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @newdocsub = 'Membership Application ' + @docsubname
IF @docsubname Is Null
BEGIN
	SET @newdocsub = 'Membership Application'
END
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
	WHILE @@FETCH_STATUS = 0
	BEGIN
		SET @count = @count + 1
		PRINT @count
			IF @count = 1
		BEGIN
			Set @docindex = @docindex + 1
				 INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
		END
			FETCH NEXT FROM curs INTO @docsubname
		PRINT @docsubname
		IF @@FETCH_STATUS = 0
		BEGIN
			SET @newdocsub = (RTRIM(@newdocsub) + ', ' + RTRIM(@docsubname))
			PRINT @newdocsub
			UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex
		END
	END
CLOSE curs
DEALLOCATE curs
SELECT 'ESIGCARD' AS DocCode, * FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
DELETE FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Return 1

GO
/****** Object:  StoredProcedure [IMS].[spONCU_D1Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [IMS].[spONCU_D1Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
Declare @joseq int
Declare @jo1seq int
Declare @jo2seq int
Declare @jo3seq int
Declare @jo4seq int
Declare @count int
--Set @jo1seq = 1
--Set @jo2seq = 1
--Set @jo3seq = 1
--Set @jo4seq = 1
--CREATE TABLE #docs(id int identity Primary Key, docindex int, j1FullName char(100), j1FullAddress char(100), j1FullPhone char(12), j1DOB char(10), j1SSN char(11), j1ID char(20), j1IDIssueDate  char(10), j1IDExpDate  char(10), j1IDState  char(2), j2FullName char(100), j2FullAddress char(100), j2FullPhone char(11), j2DOB char(10), j2SSN char(11), j2ID char(20), j2IDIssueDate  char(10), j2IDExpDate  char(10), j2IDState  char(2), j3FullName char(100), j3FullAddress char(100), j3FullPhone char(11), j3DOB char(10), j3SSN char(11), j3ID char(20), j3IDIssueDate  char(10), j3IDExpDate  char(10), j3IDState  char(2), j4FullName char(100), j4FullAddress char(100), j4FullPhone char(11), j4DOB char(10), j4SSN char(11), j4ID char(20), j4IDIssueDate  char(10), j4IDExpDate  char(10), j4IDState  char(2))
Declare curs2 CURSOR FOR
	SELECT  CONVERT(int, JO.Sequence)
	from NewMemberJointOwner As JO
	INNER JOIN NewMemberJointLink AS JL ON JO.Sequence = JL.JointSequence AND JL.TrackingNum = @TrackingNum
	INNER JOIN NewMemberSubAccount AS SA ON JL.SubAccountSequence = SA.Sequence AND SA.TrackingNum = @TrackingNum
	WHERE JO.TrackingNum = @TrackingNum AND (JO.JointOwnerType IN ('BE', 'JO', 'MI')) AND SA.ProductType IN ('PSA', 'RSA', 'SDA', 'CC')
	GROUP BY CONVERT(int, JO.Sequence)
--IF @@ROWCOUNT = 0
OPEN curs2
FETCH NEXT FROM curs2 INTO @joseq
SET @count = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
      	IF (@count = 0 AND @DocIndex = 1) OR (@count = 4 AND @DocIndex = 2) OR (@count = 8 AND @DocIndex = 3)
		BEGIN
			Set @jo1seq = @joseq
		END
	IF (@count = 1 AND @DocIndex = 1) OR (@count = 5 AND @DocIndex = 2) OR (@count = 9 AND @DocIndex = 3)
		BEGIN
			Set @jo2seq = @joseq		
		END
	IF (@count = 2 AND @DocIndex = 1) OR (@count = 6 AND @DocIndex = 2) OR (@count = 10 AND @DocIndex = 3)
		BEGIN
			Set @jo3seq = @joseq		
		END
	IF (@count = 3 AND @DocIndex = 1) OR (@count = 7 AND @DocIndex = 2) OR (@count = 11 AND @DocIndex = 3)
		BEGIN
			Set @jo4seq = @joseq		
		END
      	FETCH NEXT FROM curs2 INTO @joseq
	SET @count = @count + 1
	PRINT @count
   END
CLOSE curs2
DEALLOCATE curs2
SELECT @DocIndex As DocIndex
	, UPPER(RTRIM(NMR.LName) + RTRIM(NMR.OrganizationName)) AS LName
	, UPPER(RTRIM(RTRIM(NMR.FName) + ' ' + NMR.MInitial)) AS FName_MInitial
	, UPPER(CASE WHEN NMR.Created = 'I'
		THEN 'E-Acct Chg'
	  ELSE
		CASE NMR.Qualification3
	     	WHEN 'Family'  THEN RTRIM(NMR.Relationship) -- + ': ' + RTRIM(NMR.Qualification1) + ' / ' + RTRIM(NMR.Qualification2)
	     	WHEN 'Lives'  THEN RTRIM(NMR.Qualification3) + ': ' + RTRIM(Dept.Description)
	    -- 	WHEN 'Works'  THEN RTRIM(NMR.Qualification3) + ': ' + RTRIM(Dept.Description)
	    -- 	WHEN 'Employer'  THEN RTRIM(NMR.Qualification3) + ': ' + RTRIM(Dept.Description)
		END
		--RTRIM(Dept.Description)
	  END) AS Eligibility
	, CASE WHEN NMR.AccountClass = 'P' OR NMR.AccountType IN ('TR', 'BH', 'BS') THEN Left(NMR.SSN, 3) + '-' + LEFT(RIGHT(NMR.SSN, 6), 2) + '-' + RIGHT(NMR.SSN, 4) ELSE LEFT(NMR.SSN, 2) + '-' + RIGHT(NMR.SSN, 7) END AS SSN
	, Home.CellPhoneAC + '-' + LEFT(Home.CellPhone, 3) + '-' + RIGHT(RTRIM(Home.CellPhone), 4) AS CPhoneFull
	, UPPER(RTRIM(NMR.Department)) AS DeptCode
	, UPPER(CASE WHEN NMR.IDType = 'D'
		THEN RTRIM(NMR.DriversLicenseState) + '-' + RTRIM(NMR.DriversLicenseNum) + ' Exp:' + CONVERT(char(10), NMR.IDExpirationDate, 101)
		ELSE RTRIM(NMR.IDSource) + '-' + RTRIM(NMR.IDNumber) + ISNULL(' Exp:' + CONVERT(char(10), NMR.IDExpirationDate, 101), '')
		END) AS IDInfo1
	, CONVERT(char(10), NMR.ApplyDate, 101) AS ApplyDate

	, JO2.AssocCode AS JO02Code
	, RTRIM(JO2.FullName) AS JO02FullName
	, JO2.AssocCode AS JO02OwnerType
	, JO2.SSN AS JO02SSN
	, JO2.DOB AS JO02DOB
	, JO2.Address AS JO02Address
	, CASE RTRIM(ISNULL(JO2.Apartment, '')) WHEN '' THEN RTRIM(JO2.Address2) ELSE RTRIM(JO2.Apartment) END AS JO02Apartment
	, JO2.City AS JO02City
	, JO2.State AS JO02State
	, JO2.Zip AS JO02Zip
	, JO2.FullPhone AS JO02FullPhone
	, JO2.Email AS JO02Email
	, RTRIM(JO2.Relationship) AS JO02Relationship
	, RTRIM(LTRIM(RTRIM(JO2.JobTitle) + ' ' + RTRIM(JO2.Title))) AS JO02Occupation
	, CASE WHEN JO2.AssocCode != 'BE' AND JO2.AssocCode != 'CB' AND JO2.AssocCode != 'TB' AND JO2.AssocCode != 'CT' THEN JO2.AssocCode END AS JO02SCode
	, CASE WHEN JO2.AssocCode != 'BE' AND JO2.AssocCode != 'CB' AND JO2.AssocCode != 'TB' AND JO2.AssocCode != 'CT' THEN RTRIM(JO2.IDState) + RTRIM(JO2.IDSource) + '-' + RTRIM(JO2.IDNumber) + ISNULL(' Exp:' + JO2.IDExpireDate, '') END AS IDInfo2

	, JO3.AssocCode AS JO03Code
	, RTRIM(JO3.FullName) AS JO03FullName
	, JO3.AssocCode AS JO03OwnerType
	, JO3.SSN AS JO03SSN
	, JO3.DOB AS JO03DOB
	, JO3.Address AS JO03Address
	, CASE RTRIM(ISNULL(JO3.Apartment, '')) WHEN '' THEN RTRIM(JO3.Address2) ELSE RTRIM(JO3.Apartment) END AS JO03Apartment
	, JO3.City AS JO03City
	, JO3.State AS JO03State
	, JO3.Zip AS JO03Zip
	, JO3.FullPhone AS JO03FullPhone
	, JO3.Email AS JO03Email
	, RTRIM(JO3.Relationship) AS JO03Relationship
	, RTRIM(LTRIM(RTRIM(JO3.JobTitle) + ' ' + RTRIM(JO3.Title))) AS JO03Occupation
	, CASE WHEN JO3.AssocCode != 'BE' AND JO3.AssocCode != 'CB' AND JO3.AssocCode != 'TB' AND JO3.AssocCode != 'CT' THEN JO3.AssocCode END AS JO03SCode
	, CASE WHEN JO3.AssocCode != 'BE' AND JO3.AssocCode != 'CB' AND JO3.AssocCode != 'TB' AND JO3.AssocCode != 'CT' THEN RTRIM(JO3.IDState) + RTRIM(JO3.IDSource) + '-' + RTRIM(JO3.IDNumber) + ISNULL(' Exp:' + JO3.IDExpireDate, '') END AS IDInfo3

	, JO4.AssocCode AS JO04Code
	, RTRIM(JO4.FullName) AS JO04FullName
	, JO4.AssocCode AS JO04OwnerType
	, JO4.SSN AS JO04SSN
	, JO4.DOB AS JO04DOB
	, JO4.Address AS JO04Address
	, CASE RTRIM(ISNULL(JO4.Apartment, '')) WHEN '' THEN RTRIM(JO4.Address2) ELSE RTRIM(JO4.Apartment) END AS JO04Apartment
	, JO4.City AS JO04City
	, JO4.State AS JO04State
	, JO4.Zip AS JO04Zip
	, JO4.FullPhone AS JO04FullPhone
	, JO4.Email AS JO04Email
	, RTRIM(JO4.Relationship) AS JO04Relationship
	, RTRIM(LTRIM(RTRIM(JO4.JobTitle) + ' ' + RTRIM(JO4.Title))) AS JO04Occupation
	, CASE WHEN JO4.AssocCode != 'BE' AND JO4.AssocCode != 'CB' AND JO4.AssocCode != 'TB' AND JO4.AssocCode != 'CT' THEN JO4.AssocCode END AS JO04SCode
	, CASE WHEN JO4.AssocCode != 'BE' AND JO4.AssocCode != 'CB' AND JO4.AssocCode != 'TB' AND JO4.AssocCode != 'CT' THEN RTRIM(JO4.IDState) + RTRIM(JO4.IDSource) + '-' + RTRIM(JO4.IDNumber) + ISNULL(' Exp:' + JO4.IDExpireDate, '') END AS IDInfo4

	, JO5.AssocCode AS JO05Code
	, RTRIM(JO5.FullName) AS JO05FullName
	, JO5.AssocCode AS JO05OwnerType
	, JO5.SSN AS JO05SSN
	, JO5.DOB AS JO05DOB
	, JO5.Address AS JO05Address
	, CASE RTRIM(ISNULL(JO5.Apartment, '')) WHEN '' THEN RTRIM(JO5.Address2) ELSE RTRIM(JO5.Apartment) END AS JO05Apartment
	, JO5.City AS JO05City
	, JO5.State AS JO05State
	, JO5.Zip AS JO05Zip
	, JO5.FullPhone AS JO05FullPhone
	, JO5.Email AS JO05Email
	, RTRIM(JO5.Relationship) AS JO05Relationship
	, RTRIM(LTRIM(RTRIM(JO5.JobTitle) + ' ' + RTRIM(JO5.Title))) AS JO05Occupation
	, CASE WHEN JO5.AssocCode != 'BE' AND JO5.AssocCode != 'CB' AND JO5.AssocCode != 'TB' AND JO5.AssocCode != 'CT' THEN JO5.AssocCode END AS JO05SCode
	, CASE WHEN JO5.AssocCode != 'BE' AND JO5.AssocCode != 'CB' AND JO5.AssocCode != 'TB' AND JO5.AssocCode != 'CT' THEN RTRIM(JO5.IDState) + RTRIM(JO5.IDSource) + '-' + RTRIM(JO5.IDNumber) + ISNULL(' Exp:' + JO5.IDExpireDate, '') END AS IDInfo5

	, JO6.AssocCode AS JO06Code
	, RTRIM(JO6.FullName) AS JO06FullName
	, JO6.AssocCode AS JO06OwnerType
	, JO6.SSN AS JO06SSN
	, JO6.DOB AS JO06DOB
	, JO6.Address AS JO06Address
	, CASE RTRIM(ISNULL(JO6.Apartment, '')) WHEN '' THEN RTRIM(JO6.Address2) ELSE RTRIM(JO6.Apartment) END AS JO06Apartment
	, JO6.City AS JO06City
	, JO6.State AS JO06State
	, JO6.Zip AS JO06Zip
	, JO6.FullPhone AS JO06FullPhone
	, JO6.Email AS JO06Email
	, RTRIM(JO6.Relationship) AS JO06Relationship
	, RTRIM(LTRIM(RTRIM(JO6.JobTitle) + ' ' + RTRIM(JO6.Title))) AS JO06Occupation
	, CASE WHEN JO6.AssocCode != 'BE' AND JO6.AssocCode != 'CB' AND JO6.AssocCode != 'TB' AND JO6.AssocCode != 'CT' THEN JO6.AssocCode END AS JO06SCode
	, CASE WHEN JO6.AssocCode != 'BE' AND JO6.AssocCode != 'CB' AND JO6.AssocCode != 'TB' AND JO6.AssocCode != 'CT' THEN RTRIM(JO6.IDState) + RTRIM(JO6.IDSource) + '-' + RTRIM(JO6.IDNumber) + ISNULL(' Exp:' + JO6.IDExpireDate, '') END AS IDInfo6

	, JO7.AssocCode AS JO07Code
	, RTRIM(JO7.FullName) AS JO07FullName
	, JO7.AssocCode AS JO07OwnerType
	, JO7.SSN AS JO07SSN
	, JO7.DOB AS JO07DOB
	, JO7.Address AS JO07Address
	, CASE RTRIM(ISNULL(JO7.Apartment, '')) WHEN '' THEN RTRIM(JO7.Address2) ELSE RTRIM(JO7.Apartment) END AS JO07Apartment
	, JO7.City AS JO07City
	, JO7.State AS JO07State
	, JO7.Zip AS JO07Zip
	, JO7.FullPhone AS JO07FullPhone
	, JO7.Email AS JO07Email
	, RTRIM(JO7.Relationship) AS JO07Relationship
	, RTRIM(LTRIM(RTRIM(JO7.JobTitle) + ' ' + RTRIM(JO7.Title))) AS JO07Occupation
	, CASE WHEN JO7.AssocCode != 'BE' AND JO7.AssocCode != 'CB' AND JO7.AssocCode != 'TB' AND JO7.AssocCode != 'CT' THEN JO7.AssocCode END AS JO07SCode
	, CASE WHEN JO7.AssocCode != 'BE' AND JO7.AssocCode != 'CB' AND JO7.AssocCode != 'TB' AND JO7.AssocCode != 'CT' THEN RTRIM(JO7.IDState) + RTRIM(JO7.IDSource) + '-' + RTRIM(JO7.IDNumber) + ISNULL(' Exp:' + JO7.IDExpireDate, '') END AS IDInfo7

	, JO8.AssocCode AS JO08Code
	, RTRIM(JO8.FullName) AS JO08FullName
	, JO8.AssocCode AS JO08OwnerType
	, JO8.SSN AS JO08SSN
	, JO8.DOB AS JO08DOB
	, JO8.Address AS JO08Address
	, CASE RTRIM(ISNULL(JO8.Apartment, '')) WHEN '' THEN RTRIM(JO8.Address2) ELSE RTRIM(JO8.Apartment) END AS JO08Apartment
	, JO8.City AS JO08City
	, JO8.State AS JO08State
	, JO8.Zip AS JO08Zip
	, JO8.FullPhone AS JO08FullPhone
	, JO8.Email AS JO08Email
	, RTRIM(JO8.Relationship) AS JO08Relationship
	, RTRIM(LTRIM(RTRIM(JO8.JobTitle) + ' ' + RTRIM(JO8.Title))) AS JO08Occupation
	, CASE WHEN JO8.AssocCode != 'BE' AND JO8.AssocCode != 'CB' AND JO8.AssocCode != 'TB' AND JO8.AssocCode != 'CT' THEN JO8.AssocCode END AS JO08SCode
	, CASE WHEN JO8.AssocCode != 'BE' AND JO8.AssocCode != 'CB' AND JO8.AssocCode != 'TB' AND JO8.AssocCode != 'CT' THEN RTRIM(JO8.IDState) + RTRIM(JO8.IDSource) + '-' + RTRIM(JO8.IDNumber) + ISNULL(' Exp:' + JO8.IDExpireDate, '') END AS IDInfo8

	, JO9.AssocCode AS JO09Code
	, RTRIM(JO9.FullName) AS JO09FullName
	, JO9.AssocCode AS JO09OwnerType
	, JO9.SSN AS JO09SSN
	, JO9.DOB AS JO09DOB
	, JO9.Address AS JO09Address
	, CASE RTRIM(ISNULL(JO9.Apartment, '')) WHEN '' THEN RTRIM(JO9.Address2) ELSE RTRIM(JO9.Apartment) END AS JO09Apartment
	, JO9.City AS JO09City
	, JO9.State AS JO09State
	, JO9.Zip AS JO09Zip
	, JO9.FullPhone AS JO09FullPhone
	, JO9.Email AS JO09Email
	, RTRIM(JO9.Relationship) AS JO09Relationship
	, RTRIM(LTRIM(RTRIM(JO9.JobTitle) + ' ' + RTRIM(JO9.Title))) AS JO09Occupation
	, CASE WHEN JO9.AssocCode != 'BE' AND JO9.AssocCode != 'CB' AND JO9.AssocCode != 'TB' AND JO9.AssocCode != 'CT' THEN JO9.AssocCode END AS JO09SCode
	, CASE WHEN JO9.AssocCode != 'BE' AND JO9.AssocCode != 'CB' AND JO9.AssocCode != 'TB' AND JO9.AssocCode != 'CT' THEN RTRIM(JO9.IDState) + RTRIM(JO9.IDSource) + '-' + RTRIM(JO9.IDNumber) + ISNULL(' Exp:' + JO9.IDExpireDate, '') END AS IDInfo9

	, JO10.AssocCode AS JO10Code
	, RTRIM(JO10.FullName) AS JO10FullName
	, JO10.AssocCode AS JO10OwnerType
	, JO10.SSN AS JO10SSN
	, JO10.DOB AS JO10DOB
	, JO10.Address AS JO10Address
	, CASE RTRIM(ISNULL(JO10.Apartment, '')) WHEN '' THEN RTRIM(JO10.Address2) ELSE RTRIM(JO10.Apartment) END AS JO10Apartment
	, JO10.City AS JO10City
	, JO10.State AS JO10State
	, JO10.Zip AS JO10Zip
	, JO10.FullPhone AS JO10FullPhone
	, JO10.Email AS JO10Email
	, RTRIM(JO10.Relationship) AS JO10Relationship
	, RTRIM(LTRIM(RTRIM(JO10.JobTitle) + ' ' + RTRIM(JO10.Title))) AS JO10Occupation
	, CASE WHEN JO10.AssocCode != 'BE' AND JO10.AssocCode != 'CB' AND JO10.AssocCode != 'TB' AND JO10.AssocCode != 'CT' THEN JO10.AssocCode END AS JO10SCode
	, CASE WHEN JO10.AssocCode != 'BE' AND JO10.AssocCode != 'CB' AND JO10.AssocCode != 'TB' AND JO10.AssocCode != 'CT' THEN RTRIM(JO10.IDState) + RTRIM(JO10.IDSource) + '-' + RTRIM(JO10.IDNumber) + ISNULL(' Exp:' + JO10.IDExpireDate, '') END AS IDInfo10

	, JO11.AssocCode AS JO11Code
	, RTRIM(JO11.FullName) AS JO11FullName
	, JO11.SSN AS JO11SSN
	, JO11.DOB AS JO11DOB
	, JO11.Address AS JO11Address
	, CASE RTRIM(ISNULL(JO11.Apartment, '')) WHEN '' THEN RTRIM(JO11.Address2) ELSE RTRIM(JO11.Apartment) END AS JO11Apartment
	, JO11.City AS JO11City
	, JO11.State AS JO11State
	, JO11.Zip AS JO11Zip
	, JO11.FullPhone AS JO11FullPhone
	, JO11.Email AS JO11Email
	, RTRIM(JO11.Relationship) AS JO11Relationship
	, RTRIM(LTRIM(RTRIM(JO11.JobTitle) + ' ' + RTRIM(JO11.Title))) AS JO11Occupation
	, CASE WHEN JO11.AssocCode != 'BE' AND JO11.AssocCode != 'CB' AND JO11.AssocCode != 'TB' AND JO11.AssocCode != 'CT' THEN JO11.AssocCode END AS JO11SCode
	, CASE WHEN JO11.AssocCode != 'BE' AND JO11.AssocCode != 'CB' AND JO11.AssocCode != 'TB' AND JO11.AssocCode != 'CT' THEN RTRIM(JO11.IDState) + RTRIM(JO11.IDSource) + '-' + RTRIM(JO11.IDNumber) + ISNULL(' Exp:' + JO11.IDExpireDate, '') END AS IDInfo11
--	, CASE WHEN (LEN(NMR.Marketing4) = 2 AND LEFT(RTRIM(NMR.Marketing4), 1) = 'Y') OR UPPER(@ApplicationMode) = 'EXTERNAL' THEN 'X' END AS Marketing4_1
	, 'X' AS Marketing4_1
	, CASE WHEN LEN(NMR.Marketing4) = 2 AND RIGHT(RTRIM(NMR.Marketing4), 1) <> 'Y' THEN 'X' END AS Marketing4_2

	, 'Blah Blah' AS TestTextBlock
	, 'C:/TFS/PSITP/Dev/src/NAOP/DefaultApp/ONCU/Documents/membership_agreement_disclosure_booklet.pdf' AS DisclosureBlock

FROM NewMemberRequest AS NMR
	LEFT OUTER JOIN NewMemberHome AS Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork AS Work On NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN IMS.Departments As Dept On NMR.Department = Dept.Department
	LEFT OUTER JOIN fnONCU_GetJOType(@TrackingNum, '%%', '', '', '', '') AS JO2 ON NMR.TrackingNum = JO2.TrackingNum AND JO2.JointSequence = 1
	LEFT OUTER JOIN fnONCU_GetJOType(@TrackingNum, '%%', '', '', '', '') AS JO3 ON NMR.TrackingNum = JO3.TrackingNum AND JO3.JointSequence = 2
	LEFT OUTER JOIN fnONCU_GetJOType(@TrackingNum, '%%', '', '', '', '') AS JO4 ON NMR.TrackingNum = JO4.TrackingNum AND JO4.JointSequence = 3
	LEFT OUTER JOIN fnONCU_GetJOType(@TrackingNum, '%%', '', '', '', '') AS JO5 ON NMR.TrackingNum = JO5.TrackingNum AND JO5.JointSequence = 4
	LEFT OUTER JOIN fnONCU_GetJOType(@TrackingNum, '%%', '', '', '', '') AS JO6 ON NMR.TrackingNum = JO6.TrackingNum AND JO6.JointSequence = 5
	LEFT OUTER JOIN fnONCU_GetJOType(@TrackingNum, '%%', '', '', '', '') AS JO7 ON NMR.TrackingNum = JO7.TrackingNum AND JO7.JointSequence = 6
	LEFT OUTER JOIN fnONCU_GetJOType(@TrackingNum, '%%', '', '', '', '') AS JO8 ON NMR.TrackingNum = JO8.TrackingNum AND JO8.JointSequence = 7
	LEFT OUTER JOIN fnONCU_GetJOType(@TrackingNum, '%%', '', '', '', '') AS JO9 ON NMR.TrackingNum = JO9.TrackingNum AND JO9.JointSequence = 8
	LEFT OUTER JOIN fnONCU_GetJOType(@TrackingNum, '%%', '', '', '', '') AS JO10 ON NMR.TrackingNum = JO10.TrackingNum AND JO10.JointSequence = 9
	LEFT OUTER JOIN fnONCU_GetJOType(@TrackingNum, '%%', '', '', '', '') AS JO11 ON NMR.TrackingNum = JO11.TrackingNum AND JO11.JointSequence = 10
WHERE NMR.TrackingNum = @TrackingNum
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spONCU_D20Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spONCU_D20Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

DECLARE @docsubname CHAR(100)
DECLARE @newdocsub CHAR(200)
DECLARE @newdocsubtemp CHAR(200)
DECLARE @count INT
DECLARE @docindex INT
DECLARE @jtcount INT
DECLARE @totalpages INT
DECLARE @pagecount INT

DECLARE curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT '' AS docsubname
	FROM IMS.NewMemberRequest AS NMR
	WHERE NMR.TrackingNum = @TrackingNum AND NMR.AccountType IN ('TE', 'TR')

OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @count = 0
SET @docindex = 0
--PRINT @@FETCH_STATUS
	WHILE @@FETCH_STATUS = 0
	BEGIN
		SET @count = @count + 1
		SET @newdocsub = 'Trust Account Addendum ' + @docsubname
		--PRINT @count
		SET @jtcount = (SELECT COUNT(*) FROM IMS.NewMemberJointOwner JO WHERE JO.TrackingNum = @TrackingNum AND JO.JointOwnerType IN ('TE', 'TR'))
		PRINT 'JT Count is: ' + CAST(@jtcount AS VARCHAR(2))
		SET @totalpages = ((@jtcount - 1) / 4) + 1
		PRINT 'Total Pages is: ' + CAST(@totalpages AS VARCHAR(2))
		SET @pagecount = 1

		WHILE @pagecount <= @totalpages
		BEGIN
			SET @newdocsubtemp = @newdocsub
			IF @totalpages > 1
			BEGIN
				SET @newdocsubtemp = RTRIM(@newdocsub) + ' (' + CAST(@pagecount AS VARCHAR(1)) + ' of ' + CAST(@totalpages AS VARCHAR(1)) + ')'
			END
			SET @docindex = @docindex + 1
			INSERT INTO IMS.NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsubtemp, @TrackingNum)
			SET @pagecount = @pagecount + 1
		END

		FETCH NEXT FROM curs INTO @docsubname

	END

CLOSE curs
DEALLOCATE curs
SELECT 'ETRUST' AS DocCode, * FROM IMS.NewMemberDoc WHERE TrackingNum = @TrackingNum
DELETE FROM IMS.NewMemberDoc WHERE TrackingNum = @TrackingNum

Return 1

GO
/****** Object:  StoredProcedure [IMS].[spONCU_D20Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [IMS].[spONCU_D20Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @jtseq int
DECLARE @jt1seq int
DECLARE @jt2seq int
DECLARE @jt3seq int
DECLARE @jt4seq int

SET @jtseq = (@DocIndex - 1) * 4
SET @jt1seq = @jtseq + 1
SET @jt2seq = @jtseq + 2
SET @jt3seq = @jtseq + 3
SET @jt4seq = @jtseq + 4

SELECT @DocIndex As DocIndex
	, UPPER(REPLACE(NMR.OrganizationName, 'TRUST/', '')) + ' TRUST' AS TrustName
	, NMR.TrustDated AS TrustDate01
	, JO1.AssocCode AS TR01Code
	, JO2.AssocCode AS TR02Code
	, JO3.AssocCode AS TR03Code
	, JO4.AssocCode AS TR04Code
	, JO5.AssocCode AS TR05Code
	, JO6.AssocCode AS TR06Code
	, JO7.AssocCode AS TR07Code
	, JO8.AssocCode AS TR08Code
	, JO9.AssocCode AS TR09Code
	, JO10.AssocCode AS TR10Code
	, RTRIM(RTRIM(JO1.FName) + ' ' + RTRIM(JO1.MInitial)) + ' ' + RTRIM(JO1.LName) AS Trustee01
	, RTRIM(RTRIM(JO2.FName) + ' ' + RTRIM(JO2.MInitial)) + ' ' + RTRIM(JO2.LName) AS Trustee02
	, RTRIM(RTRIM(JO3.FName) + ' ' + RTRIM(JO3.MInitial)) + ' ' + RTRIM(JO3.LName) AS Trustee03
	, RTRIM(RTRIM(JO4.FName) + ' ' + RTRIM(JO4.MInitial)) + ' ' + RTRIM(JO4.LName) AS Trustee04
	, RTRIM(RTRIM(JO5.FName) + ' ' + RTRIM(JO5.MInitial)) + ' ' + RTRIM(JO5.LName) AS Trustee05
	, RTRIM(RTRIM(JO6.FName) + ' ' + RTRIM(JO6.MInitial)) + ' ' + RTRIM(JO6.LName) AS Trustee06
	, RTRIM(RTRIM(JO7.FName) + ' ' + RTRIM(JO7.MInitial)) + ' ' + RTRIM(JO7.LName) AS Trustee07
	, RTRIM(RTRIM(JO8.FName) + ' ' + RTRIM(JO8.MInitial)) + ' ' + RTRIM(JO8.LName) AS Trustee08
	, RTRIM(RTRIM(JO9.FName) + ' ' + RTRIM(JO9.MInitial)) + ' ' + RTRIM(JO9.LName) AS Trustee09
	, RTRIM(RTRIM(JO10.FName) + ' ' + RTRIM(JO10.MInitial)) + ' ' + RTRIM(JO10.LName) AS Trustee10
	, JO1.SSN AS TSSN1
	, JO2.SSN AS TSSN2
	, JO3.SSN AS TSSN3
	, JO4.SSN AS TSSN4
	, JO1.DOB AS TDOB1
	, JO2.DOB AS TDOB2
	, JO3.DOB AS TDOB3
	, JO4.DOB AS TDOB4
	, JO1.Address AS TAddress1
	, JO2.Address AS TAddress2
	, JO3.Address AS TAddress3
	, JO4.Address AS TAddress4
	, CASE RTRIM(ISNULL(JO1.Apartment, '')) WHEN '' THEN RTRIM(JO1.Address2) ELSE RTRIM(JO1.Apartment) END AS TApartment1
	, CASE RTRIM(ISNULL(JO2.Apartment, '')) WHEN '' THEN RTRIM(JO2.Address2) ELSE RTRIM(JO2.Apartment) END AS TApartment2
	, CASE RTRIM(ISNULL(JO3.Apartment, '')) WHEN '' THEN RTRIM(JO3.Address2) ELSE RTRIM(JO3.Apartment) END AS TApartment3
	, CASE RTRIM(ISNULL(JO4.Apartment, '')) WHEN '' THEN RTRIM(JO4.Address2) ELSE RTRIM(JO4.Apartment) END AS TApartment4
	, JO1.City AS TCity1
	, JO2.City AS TCity2
	, JO3.City AS TCity3
	, JO4.City AS TCity4
	, JO1.State AS TState1
	, JO2.State AS TState2
	, JO3.State AS TState3
	, JO4.State AS TState4
	, JO1.Zip AS TZip1
	, JO2.Zip AS TZip2
	, JO3.Zip AS TZip3
	, JO4.Zip AS TZip4
	, JO1.HPhoneFull AS TFullPhone1
	, JO2.HPhoneFull AS TFullPhone2
	, JO3.HPhoneFull AS TFullPhone3
	, JO4.HPhoneFull AS TFullPhone4
	, JO1.Email AS TEmail1
	, JO2.Email AS TEmail2
	, JO3.Email AS TEmail3
	, JO4.Email AS TEmail4
FROM NewMemberRequest AS NMR
	LEFT OUTER JOIN NewMemberHome AS Home ON NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork AS Work ON NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN IMS.fnONCU_GetJO(@TrackingNum, @jt1seq) AS JO1 ON NMR.TrackingNum = JO1.TrackingNum AND (JO1.JointOwnerType = 'TR' OR JO1.JointOwnerType = 'TE')
	LEFT OUTER JOIN IMS.fnONCU_GetJO(@TrackingNum, @jt2seq) AS JO2 ON NMR.TrackingNum = JO2.TrackingNum AND (JO2.JointOwnerType = 'TR' OR JO2.JointOwnerType = 'TE')
	LEFT OUTER JOIN IMS.fnONCU_GetJO(@TrackingNum, @jt3seq) AS JO3 ON NMR.TrackingNum = JO3.TrackingNum AND (JO3.JointOwnerType = 'TR' OR JO3.JointOwnerType = 'TE')
	LEFT OUTER JOIN IMS.fnONCU_GetJO(@TrackingNum, @jt4seq) AS JO4 ON NMR.TrackingNum = JO4.TrackingNum AND (JO4.JointOwnerType = 'TR' OR JO4.JointOwnerType = 'TE')
	LEFT OUTER JOIN IMS.fnONCU_GetJO(@TrackingNum, @jt4seq) AS JO5 ON NMR.TrackingNum = JO5.TrackingNum AND (JO5.JointOwnerType = 'TR' OR JO5.JointOwnerType = 'TE')
	LEFT OUTER JOIN IMS.fnONCU_GetJO(@TrackingNum, @jt4seq) AS JO6 ON NMR.TrackingNum = JO6.TrackingNum AND (JO6.JointOwnerType = 'TR' OR JO6.JointOwnerType = 'TE')
	LEFT OUTER JOIN IMS.fnONCU_GetJO(@TrackingNum, @jt4seq) AS JO7 ON NMR.TrackingNum = JO7.TrackingNum AND (JO7.JointOwnerType = 'TR' OR JO7.JointOwnerType = 'TE')
	LEFT OUTER JOIN IMS.fnONCU_GetJO(@TrackingNum, @jt4seq) AS JO8 ON NMR.TrackingNum = JO8.TrackingNum AND (JO8.JointOwnerType = 'TR' OR JO8.JointOwnerType = 'TE')
	LEFT OUTER JOIN IMS.fnONCU_GetJO(@TrackingNum, @jt4seq) AS JO9 ON NMR.TrackingNum = JO9.TrackingNum AND (JO9.JointOwnerType = 'TR' OR JO9.JointOwnerType = 'TE')
	LEFT OUTER JOIN IMS.fnONCU_GetJO(@TrackingNum, @jt4seq) AS JO10 ON NMR.TrackingNum = JO10.TrackingNum AND (JO10.JointOwnerType = 'TR' OR JO10.JointOwnerType = 'TE')
WHERE NMR.TrackingNum = @TrackingNum


Return 1
GO
/****** Object:  StoredProcedure [IMS].[spONCU_D2Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [IMS].[spONCU_D2Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @docsubname CHAR(100)
DECLARE @newdocsub CHAR(100)
DECLARE @count INT
DECLARE @docindex INT
DECLARE curs CURSOR LOCAL FAST_FORWARD FOR
--	SELECT '' AS docsubname
--	FROM NewMemberRequest AS NMR
--	WHERE NMR.TrackingNum = @TrackingNum-- AND NMR.Processed = 999 AND (NMR.Created = 'Y' OR NMR.Created = 'I')
	SELECT TOP 1 '' AS docsubname
	FROM NewMemberRequest AS NMR
	LEFT JOIN NewMemberSubAccount AS SA ON SA.TrackingNum = NMR.TrackingNum
	LEFT JOIN NewMemberJointOwner AS JO ON JO.TrackingNum = NMR.TrackingNum
	LEFT JOIN NewMemberChangeHistory AS CH ON CH.TrackingNum = NMR.TrackingNum
	WHERE NMR.TrackingNum = @TrackingNum
		AND ((1=1	--NMR.Created = 'Y'
		OR (SA.ProductType <> 'CERT') --AND SA.Created = 'Y')
		OR (JO.ChangeCode IN ('N', 'C', 'D') AND JO.JointOwnerType NOT IN ('CB', 'CJ', 'CO', 'CT')))
		OR (CH.ChangedField = 'FName' OR CH.ChangedField = 'LName')) AND NMR.CurrBranch = 41

OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @newdocsub = 'Membership Application ' + @docsubname
IF @docsubname Is Null
BEGIN
	SET @newdocsub = 'Membership Application'
END
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
	WHILE @@FETCH_STATUS = 0
	BEGIN
		SET @count = @count + 1
		PRINT @count
			IF @count = 1
		BEGIN
			Set @docindex = @docindex + 1
				 INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
		END
			FETCH NEXT FROM curs INTO @docsubname
		PRINT @docsubname
		IF @@FETCH_STATUS = 0
		BEGIN
			SET @newdocsub = (RTRIM(@newdocsub) + ', ' + RTRIM(@docsubname))
			PRINT @newdocsub
			UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex
		END
	END
CLOSE curs
DEALLOCATE curs
SELECT 'ESIGCARD' AS DocCode, * FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
DELETE FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Return 1

GO
/****** Object:  StoredProcedure [IMS].[spONCU_D2Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [IMS].[spONCU_D2Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
Declare @joseq int
Declare @jo1seq int
Declare @jo2seq int
Declare @jo3seq int
Declare @jo4seq int
Declare @count int
--Set @jo1seq = 1
--Set @jo2seq = 1
--Set @jo3seq = 1
--Set @jo4seq = 1
--CREATE TABLE #docs(id int identity Primary Key, docindex int, j1FullName char(100), j1FullAddress char(100), j1FullPhone char(12), j1DOB char(10), j1SSN char(11), j1ID char(20), j1IDIssueDate  char(10), j1IDExpDate  char(10), j1IDState  char(2), j2FullName char(100), j2FullAddress char(100), j2FullPhone char(11), j2DOB char(10), j2SSN char(11), j2ID char(20), j2IDIssueDate  char(10), j2IDExpDate  char(10), j2IDState  char(2), j3FullName char(100), j3FullAddress char(100), j3FullPhone char(11), j3DOB char(10), j3SSN char(11), j3ID char(20), j3IDIssueDate  char(10), j3IDExpDate  char(10), j3IDState  char(2), j4FullName char(100), j4FullAddress char(100), j4FullPhone char(11), j4DOB char(10), j4SSN char(11), j4ID char(20), j4IDIssueDate  char(10), j4IDExpDate  char(10), j4IDState  char(2))
Declare curs2 CURSOR FOR
	SELECT  CONVERT(int, JO.Sequence)
	from NewMemberJointOwner As JO
	INNER JOIN NewMemberJointLink AS JL ON JO.Sequence = JL.JointSequence AND JL.TrackingNum = @TrackingNum
	INNER JOIN NewMemberSubAccount AS SA ON JL.SubAccountSequence = SA.Sequence AND SA.TrackingNum = @TrackingNum
	WHERE JO.TrackingNum = @TrackingNum AND (JO.JointOwnerType IN ('BE', 'JO', 'MI')) AND SA.ProductType IN ('PSA', 'RSA', 'SDA', 'CC')
	GROUP BY CONVERT(int, JO.Sequence)
--IF @@ROWCOUNT = 0
OPEN curs2
FETCH NEXT FROM curs2 INTO @joseq
SET @count = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
      	IF (@count = 0 AND @DocIndex = 1) OR (@count = 4 AND @DocIndex = 2) OR (@count = 8 AND @DocIndex = 3)
		BEGIN
			Set @jo1seq = @joseq
		END
	IF (@count = 1 AND @DocIndex = 1) OR (@count = 5 AND @DocIndex = 2) OR (@count = 9 AND @DocIndex = 3)
		BEGIN
			Set @jo2seq = @joseq		
		END
	IF (@count = 2 AND @DocIndex = 1) OR (@count = 6 AND @DocIndex = 2) OR (@count = 10 AND @DocIndex = 3)
		BEGIN
			Set @jo3seq = @joseq		
		END
	IF (@count = 3 AND @DocIndex = 1) OR (@count = 7 AND @DocIndex = 2) OR (@count = 11 AND @DocIndex = 3)
		BEGIN
			Set @jo4seq = @joseq		
		END
      	FETCH NEXT FROM curs2 INTO @joseq
	SET @count = @count + 1
	PRINT @count
   END
CLOSE curs2
DEALLOCATE curs2
SELECT @DocIndex As DocIndex
	, UPPER(RTRIM(NMR.LName) + RTRIM(NMR.OrganizationName)) AS LName
	, UPPER(RTRIM(RTRIM(NMR.FName) + ' ' + NMR.MInitial)) AS FName_MInitial
	, UPPER(CASE WHEN NMR.Created = 'I'
		THEN 'E-Acct Chg'
	  ELSE
		--CASE NMR.Qualification3
	    -- 	WHEN 'Relative'  THEN RTRIM(NMR.Qualification3) + ': ' + RTRIM(NMR.Qualification1) + ' / ' + RTRIM(NMR.Qualification2)
	    -- 	WHEN 'Lives'  THEN RTRIM(NMR.Qualification3) + ': ' + RTRIM(Dept.Description)
	    -- 	WHEN 'Works'  THEN RTRIM(NMR.Qualification3) + ': ' + RTRIM(Dept.Description)
	    -- 	WHEN 'Employer'  THEN RTRIM(NMR.Qualification3) + ': ' + RTRIM(Dept.Description)
		--END
		RTRIM(Dept.Description)
	  END) AS Eligibility
	, CASE WHEN NMR.AccountClass = 'P' OR NMR.AccountType IN ('TR', 'BH', 'BS') THEN Left(NMR.SSN, 3) + '-' + LEFT(RIGHT(NMR.SSN, 6), 2) + '-' + RIGHT(NMR.SSN, 4) ELSE LEFT(NMR.SSN, 2) + '-' + RIGHT(NMR.SSN, 7) END AS SSN
	, Home.CellPhoneAC + '-' + LEFT(Home.CellPhone, 3) + '-' + RIGHT(RTRIM(Home.CellPhone), 4) AS CPhoneFull
	, UPPER(RTRIM(NMR.Department)) AS DeptCode
	, UPPER(CASE WHEN NMR.IDType = 'D'
		THEN RTRIM(NMR.DriversLicenseState) + '-' + RTRIM(NMR.DriversLicenseNum) + ' Exp:' + CONVERT(char(10), NMR.IDExpirationDate, 101)
		ELSE RTRIM(NMR.IDSource) + '-' + RTRIM(NMR.IDNumber) + ISNULL(' Exp:' + CONVERT(char(10), NMR.IDExpirationDate, 101), '')
		END) AS IDInfo1
	, CONVERT(char(10), NMR.ApplyDate, 101) AS ApplyDate

	, JO2.AssocCode AS JO02Code
	, RTRIM(JO2.FullName) AS JO02FullName
	, JO2.AssocCode AS JO02OwnerType
	, JO2.SSN AS JO02SSN
	, JO2.DOB AS JO02DOB
	, JO2.Address AS JO02Address
	, CASE RTRIM(ISNULL(JO2.Apartment, '')) WHEN '' THEN RTRIM(JO2.Address2) ELSE RTRIM(JO2.Apartment) END AS JO02Apartment
	, JO2.City AS JO02City
	, JO2.State AS JO02State
	, JO2.Zip AS JO02Zip
	, JO2.FullPhone AS JO02FullPhone
	, JO2.Email AS JO02Email
	, RTRIM(JO2.Relationship) AS JO02Relationship
	, RTRIM(LTRIM(RTRIM(JO2.JobTitle) + ' ' + RTRIM(JO2.Title))) AS JO02Occupation
	, CASE WHEN JO2.AssocCode != 'BE' AND JO2.AssocCode != 'CB' AND JO2.AssocCode != 'TB' AND JO2.AssocCode != 'CT' THEN JO2.AssocCode END AS JO02SCode
	, CASE WHEN JO2.AssocCode != 'BE' AND JO2.AssocCode != 'CB' AND JO2.AssocCode != 'TB' AND JO2.AssocCode != 'CT' THEN RTRIM(JO2.IDState) + RTRIM(JO2.IDSource) + '-' + RTRIM(JO2.IDNumber) + ISNULL(' Exp:' + JO2.IDExpireDate, '') END AS IDInfo2

	, JO3.AssocCode AS JO03Code
	, RTRIM(JO3.FullName) AS JO03FullName
	, JO3.AssocCode AS JO03OwnerType
	, JO3.SSN AS JO03SSN
	, JO3.DOB AS JO03DOB
	, JO3.Address AS JO03Address
	, CASE RTRIM(ISNULL(JO3.Apartment, '')) WHEN '' THEN RTRIM(JO3.Address2) ELSE RTRIM(JO3.Apartment) END AS JO03Apartment
	, JO3.City AS JO03City
	, JO3.State AS JO03State
	, JO3.Zip AS JO03Zip
	, JO3.FullPhone AS JO03FullPhone
	, JO3.Email AS JO03Email
	, RTRIM(JO3.Relationship) AS JO03Relationship
	, RTRIM(LTRIM(RTRIM(JO3.JobTitle) + ' ' + RTRIM(JO3.Title))) AS JO03Occupation
	, CASE WHEN JO3.AssocCode != 'BE' AND JO3.AssocCode != 'CB' AND JO3.AssocCode != 'TB' AND JO3.AssocCode != 'CT' THEN JO3.AssocCode END AS JO03SCode
	, CASE WHEN JO3.AssocCode != 'BE' AND JO3.AssocCode != 'CB' AND JO3.AssocCode != 'TB' AND JO3.AssocCode != 'CT' THEN RTRIM(JO3.IDState) + RTRIM(JO3.IDSource) + '-' + RTRIM(JO3.IDNumber) + ISNULL(' Exp:' + JO3.IDExpireDate, '') END AS IDInfo3

	, JO4.AssocCode AS JO04Code
	, RTRIM(JO4.FullName) AS JO04FullName
	, JO4.AssocCode AS JO04OwnerType
	, JO4.SSN AS JO04SSN
	, JO4.DOB AS JO04DOB
	, JO4.Address AS JO04Address
	, CASE RTRIM(ISNULL(JO4.Apartment, '')) WHEN '' THEN RTRIM(JO4.Address2) ELSE RTRIM(JO4.Apartment) END AS JO04Apartment
	, JO4.City AS JO04City
	, JO4.State AS JO04State
	, JO4.Zip AS JO04Zip
	, JO4.FullPhone AS JO04FullPhone
	, JO4.Email AS JO04Email
	, RTRIM(JO4.Relationship) AS JO04Relationship
	, RTRIM(LTRIM(RTRIM(JO4.JobTitle) + ' ' + RTRIM(JO4.Title))) AS JO04Occupation
	, CASE WHEN JO4.AssocCode != 'BE' AND JO4.AssocCode != 'CB' AND JO4.AssocCode != 'TB' AND JO4.AssocCode != 'CT' THEN JO4.AssocCode END AS JO04SCode
	, CASE WHEN JO4.AssocCode != 'BE' AND JO4.AssocCode != 'CB' AND JO4.AssocCode != 'TB' AND JO4.AssocCode != 'CT' THEN RTRIM(JO4.IDState) + RTRIM(JO4.IDSource) + '-' + RTRIM(JO4.IDNumber) + ISNULL(' Exp:' + JO4.IDExpireDate, '') END AS IDInfo4

	, JO5.AssocCode AS JO05Code
	, RTRIM(JO5.FullName) AS JO05FullName
	, JO5.AssocCode AS JO05OwnerType
	, JO5.SSN AS JO05SSN
	, JO5.DOB AS JO05DOB
	, JO5.Address AS JO05Address
	, CASE RTRIM(ISNULL(JO5.Apartment, '')) WHEN '' THEN RTRIM(JO5.Address2) ELSE RTRIM(JO5.Apartment) END AS JO05Apartment
	, JO5.City AS JO05City
	, JO5.State AS JO05State
	, JO5.Zip AS JO05Zip
	, JO5.FullPhone AS JO05FullPhone
	, JO5.Email AS JO05Email
	, RTRIM(JO5.Relationship) AS JO05Relationship
	, RTRIM(LTRIM(RTRIM(JO5.JobTitle) + ' ' + RTRIM(JO5.Title))) AS JO05Occupation
	, CASE WHEN JO5.AssocCode != 'BE' AND JO5.AssocCode != 'CB' AND JO5.AssocCode != 'TB' AND JO5.AssocCode != 'CT' THEN JO5.AssocCode END AS JO05SCode
	, CASE WHEN JO5.AssocCode != 'BE' AND JO5.AssocCode != 'CB' AND JO5.AssocCode != 'TB' AND JO5.AssocCode != 'CT' THEN RTRIM(JO5.IDState) + RTRIM(JO5.IDSource) + '-' + RTRIM(JO5.IDNumber) + ISNULL(' Exp:' + JO5.IDExpireDate, '') END AS IDInfo5

	, JO6.AssocCode AS JO06Code
	, RTRIM(JO6.FullName) AS JO06FullName
	, JO6.AssocCode AS JO06OwnerType
	, JO6.SSN AS JO06SSN
	, JO6.DOB AS JO06DOB
	, JO6.Address AS JO06Address
	, CASE RTRIM(ISNULL(JO6.Apartment, '')) WHEN '' THEN RTRIM(JO6.Address2) ELSE RTRIM(JO6.Apartment) END AS JO06Apartment
	, JO6.City AS JO06City
	, JO6.State AS JO06State
	, JO6.Zip AS JO06Zip
	, JO6.FullPhone AS JO06FullPhone
	, JO6.Email AS JO06Email
	, RTRIM(JO6.Relationship) AS JO06Relationship
	, RTRIM(LTRIM(RTRIM(JO6.JobTitle) + ' ' + RTRIM(JO6.Title))) AS JO06Occupation
	, CASE WHEN JO6.AssocCode != 'BE' AND JO6.AssocCode != 'CB' AND JO6.AssocCode != 'TB' AND JO6.AssocCode != 'CT' THEN JO6.AssocCode END AS JO06SCode
	, CASE WHEN JO6.AssocCode != 'BE' AND JO6.AssocCode != 'CB' AND JO6.AssocCode != 'TB' AND JO6.AssocCode != 'CT' THEN RTRIM(JO6.IDState) + RTRIM(JO6.IDSource) + '-' + RTRIM(JO6.IDNumber) + ISNULL(' Exp:' + JO6.IDExpireDate, '') END AS IDInfo6

	, JO7.AssocCode AS JO07Code
	, RTRIM(JO7.FullName) AS JO07FullName
	, JO7.AssocCode AS JO07OwnerType
	, JO7.SSN AS JO07SSN
	, JO7.DOB AS JO07DOB
	, JO7.Address AS JO07Address
	, CASE RTRIM(ISNULL(JO7.Apartment, '')) WHEN '' THEN RTRIM(JO7.Address2) ELSE RTRIM(JO7.Apartment) END AS JO07Apartment
	, JO7.City AS JO07City
	, JO7.State AS JO07State
	, JO7.Zip AS JO07Zip
	, JO7.FullPhone AS JO07FullPhone
	, JO7.Email AS JO07Email
	, RTRIM(JO7.Relationship) AS JO07Relationship
	, RTRIM(LTRIM(RTRIM(JO7.JobTitle) + ' ' + RTRIM(JO7.Title))) AS JO07Occupation
	, CASE WHEN JO7.AssocCode != 'BE' AND JO7.AssocCode != 'CB' AND JO7.AssocCode != 'TB' AND JO7.AssocCode != 'CT' THEN JO7.AssocCode END AS JO07SCode
	, CASE WHEN JO7.AssocCode != 'BE' AND JO7.AssocCode != 'CB' AND JO7.AssocCode != 'TB' AND JO7.AssocCode != 'CT' THEN RTRIM(JO7.IDState) + RTRIM(JO7.IDSource) + '-' + RTRIM(JO7.IDNumber) + ISNULL(' Exp:' + JO7.IDExpireDate, '') END AS IDInfo7

	, JO8.AssocCode AS JO08Code
	, RTRIM(JO8.FullName) AS JO08FullName
	, JO8.AssocCode AS JO08OwnerType
	, JO8.SSN AS JO08SSN
	, JO8.DOB AS JO08DOB
	, JO8.Address AS JO08Address
	, CASE RTRIM(ISNULL(JO8.Apartment, '')) WHEN '' THEN RTRIM(JO8.Address2) ELSE RTRIM(JO8.Apartment) END AS JO08Apartment
	, JO8.City AS JO08City
	, JO8.State AS JO08State
	, JO8.Zip AS JO08Zip
	, JO8.FullPhone AS JO08FullPhone
	, JO8.Email AS JO08Email
	, RTRIM(JO8.Relationship) AS JO08Relationship
	, RTRIM(LTRIM(RTRIM(JO8.JobTitle) + ' ' + RTRIM(JO8.Title))) AS JO08Occupation
	, CASE WHEN JO8.AssocCode != 'BE' AND JO8.AssocCode != 'CB' AND JO8.AssocCode != 'TB' AND JO8.AssocCode != 'CT' THEN JO8.AssocCode END AS JO08SCode
	, CASE WHEN JO8.AssocCode != 'BE' AND JO8.AssocCode != 'CB' AND JO8.AssocCode != 'TB' AND JO8.AssocCode != 'CT' THEN RTRIM(JO8.IDState) + RTRIM(JO8.IDSource) + '-' + RTRIM(JO8.IDNumber) + ISNULL(' Exp:' + JO8.IDExpireDate, '') END AS IDInfo8

	, JO9.AssocCode AS JO09Code
	, RTRIM(JO9.FullName) AS JO09FullName
	, JO9.AssocCode AS JO09OwnerType
	, JO9.SSN AS JO09SSN
	, JO9.DOB AS JO09DOB
	, JO9.Address AS JO09Address
	, CASE RTRIM(ISNULL(JO9.Apartment, '')) WHEN '' THEN RTRIM(JO9.Address2) ELSE RTRIM(JO9.Apartment) END AS JO09Apartment
	, JO9.City AS JO09City
	, JO9.State AS JO09State
	, JO9.Zip AS JO09Zip
	, JO9.FullPhone AS JO09FullPhone
	, JO9.Email AS JO09Email
	, RTRIM(JO9.Relationship) AS JO09Relationship
	, RTRIM(LTRIM(RTRIM(JO9.JobTitle) + ' ' + RTRIM(JO9.Title))) AS JO09Occupation
	, CASE WHEN JO9.AssocCode != 'BE' AND JO9.AssocCode != 'CB' AND JO9.AssocCode != 'TB' AND JO9.AssocCode != 'CT' THEN JO9.AssocCode END AS JO09SCode
	, CASE WHEN JO9.AssocCode != 'BE' AND JO9.AssocCode != 'CB' AND JO9.AssocCode != 'TB' AND JO9.AssocCode != 'CT' THEN RTRIM(JO9.IDState) + RTRIM(JO9.IDSource) + '-' + RTRIM(JO9.IDNumber) + ISNULL(' Exp:' + JO9.IDExpireDate, '') END AS IDInfo9

	, JO10.AssocCode AS JO10Code
	, RTRIM(JO10.FullName) AS JO10FullName
	, JO10.AssocCode AS JO10OwnerType
	, JO10.SSN AS JO10SSN
	, JO10.DOB AS JO10DOB
	, JO10.Address AS JO10Address
	, CASE RTRIM(ISNULL(JO10.Apartment, '')) WHEN '' THEN RTRIM(JO10.Address2) ELSE RTRIM(JO10.Apartment) END AS JO10Apartment
	, JO10.City AS JO10City
	, JO10.State AS JO10State
	, JO10.Zip AS JO10Zip
	, JO10.FullPhone AS JO10FullPhone
	, JO10.Email AS JO10Email
	, RTRIM(JO10.Relationship) AS JO10Relationship
	, RTRIM(LTRIM(RTRIM(JO10.JobTitle) + ' ' + RTRIM(JO10.Title))) AS JO10Occupation
	, CASE WHEN JO10.AssocCode != 'BE' AND JO10.AssocCode != 'CB' AND JO10.AssocCode != 'TB' AND JO10.AssocCode != 'CT' THEN JO10.AssocCode END AS JO10SCode
	, CASE WHEN JO10.AssocCode != 'BE' AND JO10.AssocCode != 'CB' AND JO10.AssocCode != 'TB' AND JO10.AssocCode != 'CT' THEN RTRIM(JO10.IDState) + RTRIM(JO10.IDSource) + '-' + RTRIM(JO10.IDNumber) + ISNULL(' Exp:' + JO10.IDExpireDate, '') END AS IDInfo10

	, JO11.AssocCode AS JO11Code
	, RTRIM(JO11.FullName) AS JO11FullName
	, JO11.SSN AS JO11SSN
	, JO11.DOB AS JO11DOB
	, JO11.Address AS JO11Address
	, CASE RTRIM(ISNULL(JO11.Apartment, '')) WHEN '' THEN RTRIM(JO11.Address2) ELSE RTRIM(JO11.Apartment) END AS JO11Apartment
	, JO11.City AS JO11City
	, JO11.State AS JO11State
	, JO11.Zip AS JO11Zip
	, JO11.FullPhone AS JO11FullPhone
	, JO11.Email AS JO11Email
	, RTRIM(JO11.Relationship) AS JO11Relationship
	, RTRIM(LTRIM(RTRIM(JO11.JobTitle) + ' ' + RTRIM(JO11.Title))) AS JO11Occupation
	, CASE WHEN JO11.AssocCode != 'BE' AND JO11.AssocCode != 'CB' AND JO11.AssocCode != 'TB' AND JO11.AssocCode != 'CT' THEN JO11.AssocCode END AS JO11SCode
	, CASE WHEN JO11.AssocCode != 'BE' AND JO11.AssocCode != 'CB' AND JO11.AssocCode != 'TB' AND JO11.AssocCode != 'CT' THEN RTRIM(JO11.IDState) + RTRIM(JO11.IDSource) + '-' + RTRIM(JO11.IDNumber) + ISNULL(' Exp:' + JO11.IDExpireDate, '') END AS IDInfo11
--	, CASE WHEN (LEN(NMR.Marketing4) = 2 AND LEFT(RTRIM(NMR.Marketing4), 1) = 'Y') OR UPPER(@ApplicationMode) = 'EXTERNAL' THEN 'X' END AS Marketing4_1
	, 'X' AS Marketing4_1
	, CASE WHEN LEN(NMR.Marketing4) = 2 AND RIGHT(RTRIM(NMR.Marketing4), 1) <> 'Y' THEN 'X' END AS Marketing4_2

	, 'Blah Blah' AS TestTextBlock
	, 'C:/TFS/PSITP/Dev/src/NAOP/DefaultApp/ONCU/Documents/membership_agreement_disclosure_booklet.pdf' AS DisclosureBlock

FROM NewMemberRequest AS NMR
	LEFT OUTER JOIN NewMemberHome AS Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork AS Work On NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN IMS.Departments As Dept On NMR.Department = Dept.Department
	LEFT OUTER JOIN fnONCU_GetJOType(@TrackingNum, '%%', '', '', '', '') AS JO2 ON NMR.TrackingNum = JO2.TrackingNum AND JO2.JointSequence = 1
	LEFT OUTER JOIN fnONCU_GetJOType(@TrackingNum, '%%', '', '', '', '') AS JO3 ON NMR.TrackingNum = JO3.TrackingNum AND JO3.JointSequence = 2
	LEFT OUTER JOIN fnONCU_GetJOType(@TrackingNum, '%%', '', '', '', '') AS JO4 ON NMR.TrackingNum = JO4.TrackingNum AND JO4.JointSequence = 3
	LEFT OUTER JOIN fnONCU_GetJOType(@TrackingNum, '%%', '', '', '', '') AS JO5 ON NMR.TrackingNum = JO5.TrackingNum AND JO5.JointSequence = 4
	LEFT OUTER JOIN fnONCU_GetJOType(@TrackingNum, '%%', '', '', '', '') AS JO6 ON NMR.TrackingNum = JO6.TrackingNum AND JO6.JointSequence = 5
	LEFT OUTER JOIN fnONCU_GetJOType(@TrackingNum, '%%', '', '', '', '') AS JO7 ON NMR.TrackingNum = JO7.TrackingNum AND JO7.JointSequence = 6
	LEFT OUTER JOIN fnONCU_GetJOType(@TrackingNum, '%%', '', '', '', '') AS JO8 ON NMR.TrackingNum = JO8.TrackingNum AND JO8.JointSequence = 7
	LEFT OUTER JOIN fnONCU_GetJOType(@TrackingNum, '%%', '', '', '', '') AS JO9 ON NMR.TrackingNum = JO9.TrackingNum AND JO9.JointSequence = 8
	LEFT OUTER JOIN fnONCU_GetJOType(@TrackingNum, '%%', '', '', '', '') AS JO10 ON NMR.TrackingNum = JO10.TrackingNum AND JO10.JointSequence = 9
	LEFT OUTER JOIN fnONCU_GetJOType(@TrackingNum, '%%', '', '', '', '') AS JO11 ON NMR.TrackingNum = JO11.TrackingNum AND JO11.JointSequence = 10
WHERE NMR.TrackingNum = @TrackingNum
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spONCU_D40Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [IMS].[spONCU_D40Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

DECLARE @docsubname CHAR(100)
DECLARE @newdocsub CHAR(200)
DECLARE @newdocsubtemp CHAR(200)
DECLARE @docsuffix CHAR(2)
DECLARE @docdesc CHAR(50)
DECLARE @count INT
DECLARE @docindex INT
DECLARE @jocount INT
DECLARE @jbcount INT
DECLARE @totalpages INT
DECLARE @pagecount INT

DECLARE curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT SA.Sequence, CONVERT(CHAR(2), SA.Suffix), RTRIM(SA.Description)
	FROM IMS.NewMemberRequest AS NMR
	INNER JOIN IMS.NewMemberSubAccount AS SA ON NMR.TrackingNum = SA.TrackingNum
	WHERE NMR.TrackingNum = @TrackingNum AND SA.SLType = 'I' AND LEFT(SA.DescAbrv, 1) = 'P' AND SA.Created = 'Y'

OPEN curs
FETCH NEXT FROM curs INTO @docsubname, @docsuffix, @docdesc
SET @count = 0
SET @docindex = 0
--PRINT @@FETCH_STATUS
	WHILE @@FETCH_STATUS = 0
	BEGIN
		SET @count = @count + 1
		SET @newdocsub = 'Share Certificate (' + RTRIM(@docdesc) + ' Suffix: ' + CASE LEN(@docsuffix) WHEN 2 THEN @docsuffix WHEN 1 THEN '0' + @docsuffix ELSE 'NA' END + ')'
		--PRINT @count
		SET @jocount = (SELECT COUNT(*) FROM IMS.NewMemberJointLink JL LEFT JOIN IMS.NewMemberJointOwner JO ON JL.TrackingNum = JO.TrackingNum AND JO.JointOwnerType IN ('JO', 'TR', 'OR', 'CJ', 'CO', 'TE') WHERE JL.TrackingNum = @TrackingNum AND JL.SubAccountSequence = RTRIM(@docsubname) AND JL.JointSequence = JO.Sequence)
		PRINT 'JO Count for ' + @docsuffix + ' is: ' + CAST(@jocount AS VARCHAR(2))
		SET @jbcount = (SELECT COUNT(*) FROM IMS.NewMemberJointLink JL LEFT JOIN IMS.NewMemberJointOwner JO ON JL.TrackingNum = JO.TrackingNum AND JO.JointOwnerType IN ('BE', 'CB', 'CT', 'TB') WHERE JL.TrackingNum = @TrackingNum AND JL.SubAccountSequence = RTRIM(@docsubname) AND JL.JointSequence = JO.Sequence)
		PRINT 'JB Count for ' + @docsuffix + ' is: ' + CAST(@jbcount AS VARCHAR(2))
		SET @totalpages = ((@jocount - 1) / 4) + 1
		IF ((@jbcount - 1) / 4) + 1 > @totalpages
		BEGIN
			SET @totalpages = ((@jbcount - 1) / 4) + 1
		END
		PRINT 'Total Pages for ' + @docsuffix + ' is: ' + CAST(@totalpages AS VARCHAR(2))
		SET @pagecount = 1

		WHILE @pagecount <= @totalpages
		BEGIN
			SET @newdocsubtemp = @newdocsub
			IF @totalpages > 1
			BEGIN
				SET @newdocsubtemp = RTRIM(@newdocsub) + ' (' + CAST(@pagecount AS VARCHAR(1)) + ' of ' + CAST(@totalpages AS VARCHAR(1)) + ')'
			END
			SET @docindex = @docindex + 1
			INSERT INTO IMS.NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsubtemp, @TrackingNum)
			SET @pagecount = @pagecount + 1
		END

		FETCH NEXT FROM curs INTO @docsubname, @docsuffix, @docdesc

	END

CLOSE curs
DEALLOCATE curs

SELECT 'ESHARECD' AS DocCode, * FROM IMS.NewMemberDoc WHERE TrackingNum = @TrackingNum
DELETE FROM IMS.NewMemberDoc WHERE TrackingNum = @TrackingNum

Return 1
GO
/****** Object:  StoredProcedure [IMS].[spONCU_D40Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [IMS].[spONCU_D40Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @seq INT
DECLARE @seq1 INT
DECLARE @joseq INT
DECLARE @jo1seq INT
DECLARE @jo2seq INT
DECLARE @jo3seq INT
DECLARE @jo4seq INT
DECLARE @jbseq INT
DECLARE @jb1seq INT
DECLARE @jb2seq INT
DECLARE @jb3seq INT
DECLARE @jb4seq INT
DECLARE @jocount INT
DECLARE @jbcount INT
DECLARE @totalpages INT
DECLARE @pagecount INT
DECLARE @count INT

DECLARE curs2 CURSOR LOCAL FAST_FORWARD FOR
	SELECT DISTINCT CONVERT(INT, SA.Sequence)
	FROM IMS.NewMemberRequest AS NMR
	INNER JOIN IMS.NewMemberSubAccount AS SA ON NMR.TrackingNum = SA.TrackingNum
	LEFT JOIN IMS.NewMemberJointLink AS JL ON JL.TrackingNum = SA.TrackingNum AND JL.SubAccountSequence = SA.Sequence
	WHERE NMR.TrackingNum = @TrackingNum AND SA.SLType = 'I' AND LEFT(SA.DescAbrv, 1) = 'P' AND (JL.Created = 'Y' OR SA.Created = 'Y')
OPEN curs2
FETCH NEXT FROM curs2 INTO @seq
SET @count = 0
--PRINT @@FETCH_STATUS
	WHILE @@FETCH_STATUS = 0
	BEGIN
		SET @jocount = (SELECT COUNT(*) FROM IMS.NewMemberJointLink JL LEFT JOIN IMS.NewMemberJointOwner JO ON JL.TrackingNum = JO.TrackingNum AND JO.JointOwnerType IN ('JO', 'TR', 'OR', 'CJ', 'CO', 'TE') WHERE JL.TrackingNum = @TrackingNum AND JL.SubAccountSequence = @seq AND JL.JointSequence = JO.Sequence)
		PRINT 'JO Count for ' + CAST(@seq AS VARCHAR(2)) + ' is: ' + CAST(@jocount AS VARCHAR(2))
		SET @jbcount = (SELECT COUNT(*) FROM IMS.NewMemberJointLink JL LEFT JOIN IMS.NewMemberJointOwner JO ON JL.TrackingNum = JO.TrackingNum AND JO.JointOwnerType IN ('BE', 'CB', 'CT', 'TB') WHERE JL.TrackingNum = @TrackingNum AND JL.SubAccountSequence = @seq AND JL.JointSequence = JO.Sequence)
		PRINT 'JB Count for ' + CAST(@seq AS VARCHAR(2)) + ' is: ' + CAST(@jbcount AS VARCHAR(2))
		SET @totalpages = ((@jocount - 1) / 5) + 1
		IF ((@jbcount - 1) / 4) + 1 > @totalpages
		BEGIN
			SET @totalpages = ((@jbcount - 1) / 4) + 1
		END
		PRINT 'Total Pages for ' + CAST(@seq AS VARCHAR(2)) + ' is: ' + CAST(@totalpages AS VARCHAR(2))
		SET @pagecount = 1

		WHILE @pagecount <= @totalpages
		BEGIN
--			IF @totalpages > 1
--			BEGIN
--				SET @pagelabel = '(' + CAST(@pagecount AS VARCHAR(1)) + ' of ' + CAST(@totalpages AS VARCHAR(1)) + ')'
--			END
			SET @joseq = (@pagecount - 1) * 4
			SET @jbseq = (@pagecount - 1) * 4
			IF (@DocIndex = @count + 1)
				BEGIN
					SET @seq1 = @seq
					SET @jo1seq = @joseq + 1
					SET @jo2seq = @joseq + 2
					SET @jo3seq = @joseq + 3
					SET @jo4seq = @joseq + 4
					SET @jb1seq = @jbseq + 1
					SET @jb2seq = @jbseq + 2
					SET @jb3seq = @jbseq + 3
					SET @jb4seq = @jbseq + 4
					PRINT 'SELECTED: DocIndex=' + CAST(@DocIndex AS VARCHAR(2)) + ' SASeq=' + CAST(@seq AS VARCHAR(2)) + ' JOSeq=' + CAST(@jo1seq AS VARCHAR(2)) + ' JBSeq=' + CAST(@jb1seq AS VARCHAR(2))
				END
			SET @count = @count + 1
			SET @pagecount = @pagecount + 1
		END

		FETCH NEXT FROM curs2 INTO @seq
	END
CLOSE curs2
DEALLOCATE curs2
SELECT  @DocIndex AS DocIndex
	, RTRIM(NMR.Account) AS Account
	, RIGHT('0' + RTRIM(CONVERT(CHAR(2), SA.Suffix)), 2) AS Suffix
	, RTRIM(NMR.LName) + RTRIM(NMR.OrganizationName) AS LName
	, RTRIM(RTRIM(NMR.FName) + ' ' + NMR.MInitial) AS FName_MInitial
	, RTRIM(NMR.Account) + '-' + RIGHT('0' + RTRIM(CONVERT(CHAR(2), SA.Suffix)), 2) AS Account_Suffix
	, NMR.CreatedOn AS IssueDate
	, '$' + RTRIM(CAST(CONVERT(MONEY, SA.Amount *.01, 2) AS VARCHAR(10))) AS InitialDeposit
	, INVADD.MaturityDate AS MaturityDate
	, RTRIM(CAST(CONVERT(DECIMAL(6,2),CONVERT(FLOAT(1),SA.APR) * 0.0001) AS VARCHAR(10))) + '%' AS InitialRate
	, RTRIM(CAST(CONVERT(DECIMAL(6,2),(POWER((1 + (CONVERT(FLOAT(1), SA.APR) * 0.0001) / 365),365)-1)) AS VARCHAR(10))) + '%' AS APY
	, SA.CreatedBy AS OpenedBy
	, RTRIM(CAST(SA.Term AS VARCHAR(2))) + ' Months' AS Term
	, UPPER(CASE WHEN NMR.IDType = 'D'
		THEN RTRIM(NMR.DriversLicenseState) + '-' + RTRIM(NMR.DriversLicenseNum) + ' Exp:' + CONVERT(char(10), NMR.IDExpirationDate, 101)
		ELSE RTRIM(NMR.IDSource) + '-' + RTRIM(NMR.IDNumber) + ISNULL(' Exp:' + CONVERT(char(10), NMR.IDExpirationDate, 101), '')
		END) AS IDInfo1

	, JO2.AssocCode AS JO02Code
	, RTRIM(JO2.FullName) AS JO02FullName
	, JO2.SSN AS JO02SSN
	, JO2.DOB AS JO02DOB
	, JO2.Address AS JO02Address
	, CASE RTRIM(ISNULL(JO2.Apartment, '')) WHEN '' THEN RTRIM(JO2.Address2) ELSE RTRIM(JO2.Apartment) END AS JO02Apartment
	, JO2.City AS JO02City
	, JO2.State AS JO02State
	, JO2.Zip AS JO02Zip
	, JO2.FullPhone AS JO02FullPhone
	, JO2.Email AS JO02Email
	, RTRIM(JO2.Relationship) AS JO02Relationship
	, RTRIM(JO2.Title) AS JO02Occupation
	, CASE WHEN JO2.AssocCode != 'BE' AND JO2.AssocCode != 'CB' AND JO2.AssocCode != 'TB' AND JO2.AssocCode != 'CT' THEN JO2.AssocCode END AS JO02SCode
	, CASE WHEN JO2.AssocCode != 'BE' AND JO2.AssocCode != 'CB' AND JO2.AssocCode != 'TB' AND JO2.AssocCode != 'CT' THEN RTRIM(JO2.IDState) + RTRIM(JO2.IDSource) + '-' + RTRIM(JO2.IDNumber) + ISNULL(' Exp:' + JO2.IDExpireDate, '') END AS IDInfo2

	, JO3.AssocCode AS JO03Code
	, RTRIM(JO3.FullName) AS JO03FullName
	, JO3.SSN AS JO03SSN
	, JO3.DOB AS JO03DOB
	, JO3.Address AS JO03Address
	, CASE RTRIM(ISNULL(JO3.Apartment, '')) WHEN '' THEN RTRIM(JO3.Address2) ELSE RTRIM(JO3.Apartment) END AS JO03Apartment
	, JO3.City AS JO03City
	, JO3.State AS JO03State
	, JO3.Zip AS JO03Zip
	, JO3.FullPhone AS JO03FullPhone
	, JO3.Email AS JO03Email
	, RTRIM(JO3.Relationship) AS JO03Relationship
	, RTRIM(JO3.Title) AS JO03Occupation
	, CASE WHEN JO3.AssocCode != 'BE' AND JO3.AssocCode != 'CB' AND JO3.AssocCode != 'TB' AND JO3.AssocCode != 'CT' THEN JO3.AssocCode END AS JO03SCode
	, CASE WHEN JO3.AssocCode != 'BE' AND JO3.AssocCode != 'CB' AND JO3.AssocCode != 'TB' AND JO3.AssocCode != 'CT' THEN RTRIM(JO3.IDState) + RTRIM(JO3.IDSource) + '-' + RTRIM(JO3.IDNumber) + ISNULL(' Exp:' + JO3.IDExpireDate, '') END AS IDInfo3

	, JO4.AssocCode AS JO04Code
	, RTRIM(JO4.FullName) AS JO04FullName
	, JO4.SSN AS JO04SSN
	, JO4.DOB AS JO04DOB
	, JO4.Address AS JO04Address
	, CASE RTRIM(ISNULL(JO4.Apartment, '')) WHEN '' THEN RTRIM(JO4.Address2) ELSE RTRIM(JO4.Apartment) END AS JO04Apartment
	, JO4.City AS JO04City
	, JO4.State AS JO04State
	, JO4.Zip AS JO04Zip
	, JO4.FullPhone AS JO04FullPhone
	, JO4.Email AS JO04Email
	, RTRIM(JO4.Relationship) AS JO04Relationship
	, RTRIM(JO4.Title) AS JO04Occupation
	, CASE WHEN JO4.AssocCode != 'BE' AND JO4.AssocCode != 'CB' AND JO4.AssocCode != 'TB' AND JO4.AssocCode != 'CT' THEN JO4.AssocCode END AS JO04SCode
	, CASE WHEN JO4.AssocCode != 'BE' AND JO4.AssocCode != 'CB' AND JO4.AssocCode != 'TB' AND JO4.AssocCode != 'CT' THEN RTRIM(JO4.IDState) + RTRIM(JO4.IDSource) + '-' + RTRIM(JO4.IDNumber) + ISNULL(' Exp:' + JO4.IDExpireDate, '') END AS IDInfo4

	, JO5.AssocCode AS JO05Code
	, RTRIM(JO5.FullName) AS JO05FullName
	, JO5.SSN AS JO05SSN
	, JO5.DOB AS JO05DOB
	, JO5.Address AS JO05Address
	, CASE RTRIM(ISNULL(JO5.Apartment, '')) WHEN '' THEN RTRIM(JO5.Address2) ELSE RTRIM(JO5.Apartment) END AS JO05Apartment
	, JO5.City AS JO05City
	, JO5.State AS JO05State
	, JO5.Zip AS JO05Zip
	, JO5.FullPhone AS JO05FullPhone
	, JO5.Email AS JO05Email
	, RTRIM(JO5.Relationship) AS JO05Relationship
	, RTRIM(JO5.Title) AS JO05Occupation
	, CASE WHEN JO5.AssocCode != 'BE' AND JO5.AssocCode != 'CB' AND JO5.AssocCode != 'TB' AND JO5.AssocCode != 'CT' THEN JO5.AssocCode END AS JO05SCode
	, CASE WHEN JO5.AssocCode != 'BE' AND JO5.AssocCode != 'CB' AND JO5.AssocCode != 'TB' AND JO5.AssocCode != 'CT' THEN RTRIM(JO5.IDState) + RTRIM(JO5.IDSource) + '-' + RTRIM(JO5.IDNumber) + ISNULL(' Exp:' + JO5.IDExpireDate, '') END AS IDInfo5

	, JO6.AssocCode AS JO06Code
	, RTRIM(JO6.FullName) AS JO06FullName
	, JO6.SSN AS JO06SSN
	, JO6.DOB AS JO06DOB
	, JO6.Address AS JO06Address
	, CASE RTRIM(ISNULL(JO6.Apartment, '')) WHEN '' THEN RTRIM(JO6.Address2) ELSE RTRIM(JO6.Apartment) END AS JO06Apartment
	, JO6.City AS JO06City
	, JO6.State AS JO06State
	, JO6.Zip AS JO06Zip
	, JO6.FullPhone AS JO06FullPhone
	, JO6.Email AS JO06Email
	, RTRIM(JO6.Relationship) AS JO06Relationship
	, RTRIM(JO6.Title) AS JO06Occupation
	, CASE WHEN JO6.AssocCode != 'BE' AND JO6.AssocCode != 'CB' AND JO6.AssocCode != 'TB' AND JO6.AssocCode != 'CT' THEN JO6.AssocCode END AS JO06SCode
	, CASE WHEN JO6.AssocCode != 'BE' AND JO6.AssocCode != 'CB' AND JO6.AssocCode != 'TB' AND JO6.AssocCode != 'CT' THEN RTRIM(JO6.IDState) + RTRIM(JO6.IDSource) + '-' + RTRIM(JO6.IDNumber) + ISNULL(' Exp:' + JO6.IDExpireDate, '') END AS IDInfo6

	, JO7.AssocCode AS JO07Code
	, RTRIM(JO7.FullName) AS JO07FullName
	, JO7.SSN AS JO07SSN
	, JO7.DOB AS JO07DOB
	, JO7.Address AS JO07Address
	, CASE RTRIM(ISNULL(JO7.Apartment, '')) WHEN '' THEN RTRIM(JO7.Address2) ELSE RTRIM(JO7.Apartment) END AS JO07Apartment
	, JO7.City AS JO07City
	, JO7.State AS JO07State
	, JO7.Zip AS JO07Zip
	, JO7.FullPhone AS JO07FullPhone
	, JO7.Email AS JO07Email
	, RTRIM(JO7.Relationship) AS JO07Relationship
	, RTRIM(JO7.Title) AS JO07Occupation
	, CASE WHEN JO7.AssocCode != 'BE' AND JO7.AssocCode != 'CB' AND JO7.AssocCode != 'TB' AND JO7.AssocCode != 'CT' THEN JO7.AssocCode END AS JO07SCode
	, CASE WHEN JO7.AssocCode != 'BE' AND JO7.AssocCode != 'CB' AND JO7.AssocCode != 'TB' AND JO7.AssocCode != 'CT' THEN RTRIM(JO7.IDState) + RTRIM(JO7.IDSource) + '-' + RTRIM(JO7.IDNumber) + ISNULL(' Exp:' + JO7.IDExpireDate, '') END AS IDInfo7

	, JO8.AssocCode AS JO08Code
	, RTRIM(JO8.FullName) AS JO08FullName
	, JO8.SSN AS JO08SSN
	, JO8.DOB AS JO08DOB
	, JO8.Address AS JO08Address
	, CASE RTRIM(ISNULL(JO8.Apartment, '')) WHEN '' THEN RTRIM(JO8.Address2) ELSE RTRIM(JO8.Apartment) END AS JO08Apartment
	, JO8.City AS JO08City
	, JO8.State AS JO08State
	, JO8.Zip AS JO08Zip
	, JO8.FullPhone AS JO08FullPhone
	, JO8.Email AS JO08Email
	, RTRIM(JO8.Relationship) AS JO08Relationship
	, RTRIM(JO8.Title) AS JO08Occupation
	, CASE WHEN JO8.AssocCode != 'BE' AND JO8.AssocCode != 'CB' AND JO8.AssocCode != 'TB' AND JO8.AssocCode != 'CT' THEN JO8.AssocCode END AS JO08SCode
	, CASE WHEN JO8.AssocCode != 'BE' AND JO8.AssocCode != 'CB' AND JO8.AssocCode != 'TB' AND JO8.AssocCode != 'CT' THEN RTRIM(JO8.IDState) + RTRIM(JO8.IDSource) + '-' + RTRIM(JO8.IDNumber) + ISNULL(' Exp:' + JO8.IDExpireDate, '') END AS IDInfo8

	, JO9.AssocCode AS JO09Code
	, RTRIM(JO9.FullName) AS JO09FullName
	, JO9.SSN AS JO09SSN
	, JO9.DOB AS JO09DOB
	, JO9.Address AS JO09Address
	, CASE RTRIM(ISNULL(JO9.Apartment, '')) WHEN '' THEN RTRIM(JO9.Address2) ELSE RTRIM(JO9.Apartment) END AS JO09Apartment
	, JO9.City AS JO09City
	, JO9.State AS JO09State
	, JO9.Zip AS JO09Zip
	, JO9.FullPhone AS JO09FullPhone
	, JO9.Email AS JO09Email
	, RTRIM(JO9.Relationship) AS JO09Relationship
	, RTRIM(JO9.Title) AS JO09Occupation
	, CASE WHEN JO9.AssocCode != 'BE' AND JO9.AssocCode != 'CB' AND JO9.AssocCode != 'TB' AND JO9.AssocCode != 'CT' THEN JO9.AssocCode END AS JO09SCode
	, CASE WHEN JO9.AssocCode != 'BE' AND JO9.AssocCode != 'CB' AND JO9.AssocCode != 'TB' AND JO9.AssocCode != 'CT' THEN RTRIM(JO9.IDState) + RTRIM(JO9.IDSource) + '-' + RTRIM(JO9.IDNumber) + ISNULL(' Exp:' + JO9.IDExpireDate, '') END AS IDInfo9

	, JO10.AssocCode AS JO10Code
	, RTRIM(JO10.FullName) AS JO10FullName
	, JO10.SSN AS JO10SSN
	, JO10.DOB AS JO10DOB
	, JO10.Address AS JO10Address
	, CASE RTRIM(ISNULL(JO10.Apartment, '')) WHEN '' THEN RTRIM(JO10.Address2) ELSE RTRIM(JO10.Apartment) END AS JO10Apartment
	, JO10.City AS JO10City
	, JO10.State AS JO10State
	, JO10.Zip AS JO10Zip
	, JO10.FullPhone AS JO10FullPhone
	, JO10.Email AS JO10Email
	, RTRIM(JO10.Relationship) AS JO10Relationship
	, RTRIM(JO10.Title) AS JO10Occupation
	, CASE WHEN JO10.AssocCode != 'BE' AND JO10.AssocCode != 'CB' AND JO10.AssocCode != 'TB' AND JO10.AssocCode != 'CT' THEN JO10.AssocCode END AS JO10SCode
	, CASE WHEN JO10.AssocCode != 'BE' AND JO10.AssocCode != 'CB' AND JO10.AssocCode != 'TB' AND JO10.AssocCode != 'CT' THEN RTRIM(JO10.IDState) + RTRIM(JO10.IDSource) + '-' + RTRIM(JO10.IDNumber) + ISNULL(' Exp:' + JO10.IDExpireDate, '') END AS IDInfo10

	, JO11.AssocCode AS JO11Code
	, RTRIM(JO11.FullName) AS JO11FullName
	, JO11.SSN AS JO11SSN
	, JO11.DOB AS JO11DOB
	, JO11.Address AS JO11Address
	, CASE RTRIM(ISNULL(JO11.Apartment, '')) WHEN '' THEN RTRIM(JO11.Address2) ELSE RTRIM(JO11.Apartment) END AS JO11Apartment
	, JO11.City AS JO11City
	, JO11.State AS JO11State
	, JO11.Zip AS JO11Zip
	, JO11.FullPhone AS JO11FullPhone
	, JO11.Email AS JO11Email
	, RTRIM(JO11.Relationship) AS JO11Relationship
	, RTRIM(JO11.Title) AS JO11Occupation
	, CASE WHEN JO11.AssocCode != 'BE' AND JO11.AssocCode != 'CB' AND JO11.AssocCode != 'TB' AND JO11.AssocCode != 'CT' THEN JO11.AssocCode END AS JO11SCode
	, CASE WHEN JO11.AssocCode != 'BE' AND JO11.AssocCode != 'CB' AND JO11.AssocCode != 'TB' AND JO11.AssocCode != 'CT' THEN RTRIM(JO11.IDState) + RTRIM(JO11.IDSource) + '-' + RTRIM(JO11.IDNumber) + ISNULL(' Exp:' + JO11.IDExpireDate, '') END AS IDInfo11

--	, IConfig.MinBalance AS TestingBlock
	, CASE WHEN IConfig.MinBalance = '25000' THEN 'X' ELSE '' END AS Chk250
	, CASE WHEN IConfig.MinBalance = '50000' THEN 'X' ELSE '' END AS Chk500
	, CASE WHEN IConfig.MinBalance = '100000' THEN 'X' ELSE '' END AS Chk1000
	, CASE WHEN IConfig.MinBalance = '250000' THEN 'X' ELSE '' END AS Chk2500
FROM IMS.NewMemberRequest As NMR	
	LEFT OUTER JOIN IMS.fnONCU_GetSASeq(@TrackingNum, @seq1) AS SA ON NMR.TrackingNum = SA.TrackingNum
	LEFT OUTER JOIN IMS.NewMemberInvestmentAdd AS INVADD ON INVADD.TrackingNum = NMR.TrackingNum AND INVADD.SubAccountSequence = SA.Sequence
	LEFT OUTER JOIN fnONCU_GetJOJL(@TrackingNum, @seq1, '%%', '', '', '', '') AS JO2 ON NMR.TrackingNum = JO2.TrackingNum AND JO2.JointSequence = 1
	LEFT OUTER JOIN fnONCU_GetJOJL(@TrackingNum, @seq1, '%%', '', '', '', '') AS JO3 ON NMR.TrackingNum = JO3.TrackingNum AND JO3.JointSequence = 2
	LEFT OUTER JOIN fnONCU_GetJOJL(@TrackingNum, @seq1, '%%', '', '', '', '') AS JO4 ON NMR.TrackingNum = JO4.TrackingNum AND JO4.JointSequence = 3
	LEFT OUTER JOIN fnONCU_GetJOJL(@TrackingNum, @seq1, '%%', '', '', '', '') AS JO5 ON NMR.TrackingNum = JO5.TrackingNum AND JO5.JointSequence = 4
	LEFT OUTER JOIN fnONCU_GetJOJL(@TrackingNum, @seq1, '%%', '', '', '', '') AS JO6 ON NMR.TrackingNum = JO6.TrackingNum AND JO6.JointSequence = 5
	LEFT OUTER JOIN fnONCU_GetJOJL(@TrackingNum, @seq1, '%%', '', '', '', '') AS JO7 ON NMR.TrackingNum = JO7.TrackingNum AND JO7.JointSequence = 6
	LEFT OUTER JOIN fnONCU_GetJOJL(@TrackingNum, @seq1, '%%', '', '', '', '') AS JO8 ON NMR.TrackingNum = JO8.TrackingNum AND JO8.JointSequence = 7
	LEFT OUTER JOIN fnONCU_GetJOJL(@TrackingNum, @seq1, '%%', '', '', '', '') AS JO9 ON NMR.TrackingNum = JO9.TrackingNum AND JO9.JointSequence = 8
	LEFT OUTER JOIN fnONCU_GetJOJL(@TrackingNum, @seq1, '%%', '', '', '', '') AS JO10 ON NMR.TrackingNum = JO10.TrackingNum AND JO10.JointSequence = 9
	LEFT OUTER JOIN fnONCU_GetJOJL(@TrackingNum, @seq1, '%%', '', '', '', '') AS JO11 ON NMR.TrackingNum = JO11.TrackingNum AND JO11.JointSequence = 10
--	LEFT OUTER JOIN IMS.fnONCU_GetCL(@TrackingNum, @seq1, 'C', '') AS MATDISPDATA ON NMR.TrackingNum = MATDISPDATA.TrackingNum
--	LEFT OUTER JOIN IMS.fnONCU_GetCL(@TrackingNum, @seq1, 'D', 'P') AS DIVDISPDATA ON NMR.TrackingNum = DIVDISPDATA.TrackingNum
--	LEFT OUTER JOIN IMS.NewMemberSubAccount AS MATSA ON MATSA.TrackingNum = NMR.TrackingNum AND  MATSA.Sequence = MATDISPDATA.RelatedSequence
--	LEFT OUTER JOIN IMS.NewMemberSubAccount AS DIVSA ON DIVSA.TrackingNum = NMR.TrackingNum AND DIVSA.Sequence = DIVDISPDATA.RelatedSequence
	LEFT OUTER JOIN IMS.udt_ISubAccounts AS IConfig ON IConfig.UniqueID = SA.SubAccountType
WHERE NMR.TrackingNum = @TrackingNum
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spONCU_D41Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spONCU_D41Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

DECLARE @docsubname CHAR(100)
DECLARE @newdocsub CHAR(200)
DECLARE @newdocsubtemp CHAR(200)
DECLARE @docsuffix CHAR(2)
DECLARE @docdesc CHAR(50)
DECLARE @count INT
DECLARE @docindex INT
DECLARE @jocount INT
DECLARE @jbcount INT
DECLARE @totalpages INT
DECLARE @pagecount INT

DECLARE curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT SA.Sequence, CONVERT(CHAR(2), SA.Suffix), RTRIM(SA.Description)
	FROM IMS.NewMemberRequest AS NMR
	INNER JOIN IMS.NewMemberSubAccount AS SA ON NMR.TrackingNum = SA.TrackingNum
	WHERE NMR.TrackingNum = @TrackingNum AND SA.SLType = 'I' AND LEFT(SA.DescAbrv, 1) = 'T' AND SA.Created = 'Y'

OPEN curs
FETCH NEXT FROM curs INTO @docsubname, @docsuffix, @docdesc
SET @count = 0
SET @docindex = 0
--PRINT @@FETCH_STATUS
	WHILE @@FETCH_STATUS = 0
	BEGIN
		SET @count = @count + 1
		SET @newdocsub = 'T-Flex Share Certificate (' + RTRIM(@docdesc) + ' Suffix: ' + CASE LEN(@docsuffix) WHEN 2 THEN @docsuffix WHEN 1 THEN '0' + @docsuffix ELSE 'NA' END + ')'
		--PRINT @count
		SET @jocount = (SELECT COUNT(*) FROM IMS.NewMemberJointLink JL LEFT JOIN IMS.NewMemberJointOwner JO ON JL.TrackingNum = JO.TrackingNum AND JO.JointOwnerType IN ('JO', 'TR', 'OR', 'CJ', 'CO', 'TE') WHERE JL.TrackingNum = @TrackingNum AND JL.SubAccountSequence = RTRIM(@docsubname) AND JL.JointSequence = JO.Sequence)
		PRINT 'JO Count for ' + @docsuffix + ' is: ' + CAST(@jocount AS VARCHAR(2))
		SET @jbcount = (SELECT COUNT(*) FROM IMS.NewMemberJointLink JL LEFT JOIN IMS.NewMemberJointOwner JO ON JL.TrackingNum = JO.TrackingNum AND JO.JointOwnerType IN ('BE', 'CB', 'CT', 'TB') WHERE JL.TrackingNum = @TrackingNum AND JL.SubAccountSequence = RTRIM(@docsubname) AND JL.JointSequence = JO.Sequence)
		PRINT 'JB Count for ' + @docsuffix + ' is: ' + CAST(@jbcount AS VARCHAR(2))
		SET @totalpages = ((@jocount - 1) / 4) + 1
		IF ((@jbcount - 1) / 4) + 1 > @totalpages
		BEGIN
			SET @totalpages = ((@jbcount - 1) / 4) + 1
		END
		PRINT 'Total Pages for ' + @docsuffix + ' is: ' + CAST(@totalpages AS VARCHAR(2))
		SET @pagecount = 1

		WHILE @pagecount <= @totalpages
		BEGIN
			SET @newdocsubtemp = @newdocsub
			IF @totalpages > 1
			BEGIN
				SET @newdocsubtemp = RTRIM(@newdocsub) + ' (' + CAST(@pagecount AS VARCHAR(1)) + ' of ' + CAST(@totalpages AS VARCHAR(1)) + ')'
			END
			SET @docindex = @docindex + 1
			INSERT INTO IMS.NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsubtemp, @TrackingNum)
			SET @pagecount = @pagecount + 1
		END

		FETCH NEXT FROM curs INTO @docsubname, @docsuffix, @docdesc

	END

CLOSE curs
DEALLOCATE curs

SELECT 'ETFLEX' AS DocCode, * FROM IMS.NewMemberDoc WHERE TrackingNum = @TrackingNum
DELETE FROM IMS.NewMemberDoc WHERE TrackingNum = @TrackingNum

Return 1
GO
/****** Object:  StoredProcedure [IMS].[spONCU_D41Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spONCU_D41Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @seq INT
DECLARE @seq1 INT
DECLARE @joseq INT
DECLARE @jo1seq INT
DECLARE @jo2seq INT
DECLARE @jo3seq INT
DECLARE @jo4seq INT
DECLARE @jbseq INT
DECLARE @jb1seq INT
DECLARE @jb2seq INT
DECLARE @jb3seq INT
DECLARE @jb4seq INT
DECLARE @jocount INT
DECLARE @jbcount INT
DECLARE @totalpages INT
DECLARE @pagecount INT
DECLARE @count INT

DECLARE curs2 CURSOR LOCAL FAST_FORWARD FOR
	SELECT DISTINCT CONVERT(INT, SA.Sequence)
	FROM NewMemberRequest AS NMR
	INNER JOIN NewMemberSubAccount AS SA ON NMR.TrackingNum = SA.TrackingNum
	LEFT JOIN NewMemberJointLink AS JL ON JL.TrackingNum = SA.TrackingNum AND JL.SubAccountSequence = SA.Sequence
	WHERE NMR.TrackingNum = @TrackingNum AND SA.SLType = 'I' AND LEFT(SA.DescAbrv, 1) = 'T' AND (JL.Created = 'Y' OR SA.Created = 'Y')
OPEN curs2
FETCH NEXT FROM curs2 INTO @seq
SET @count = 0
--PRINT @@FETCH_STATUS
	WHILE @@FETCH_STATUS = 0
	BEGIN
		SET @jocount = (SELECT COUNT(*) FROM IMS.NewMemberJointLink JL LEFT JOIN IMS.NewMemberJointOwner JO ON JL.TrackingNum = JO.TrackingNum AND JO.JointOwnerType IN ('JO', 'TR', 'OR', 'CJ', 'CO', 'TE') WHERE JL.TrackingNum = @TrackingNum AND JL.SubAccountSequence = @seq AND JL.JointSequence = JO.Sequence)
		PRINT 'JO Count for ' + CAST(@seq AS VARCHAR(2)) + ' is: ' + CAST(@jocount AS VARCHAR(2))
		SET @jbcount = (SELECT COUNT(*) FROM IMS.NewMemberJointLink JL LEFT JOIN IMS.NewMemberJointOwner JO ON JL.TrackingNum = JO.TrackingNum AND JO.JointOwnerType IN ('BE', 'CB', 'CT', 'TB') WHERE JL.TrackingNum = @TrackingNum AND JL.SubAccountSequence = @seq AND JL.JointSequence = JO.Sequence)
		PRINT 'JB Count for ' + CAST(@seq AS VARCHAR(2)) + ' is: ' + CAST(@jbcount AS VARCHAR(2))
		SET @totalpages = ((@jocount - 1) / 5) + 1
		IF ((@jbcount - 1) / 4) + 1 > @totalpages
		BEGIN
			SET @totalpages = ((@jbcount - 1) / 4) + 1
		END
		PRINT 'Total Pages for ' + CAST(@seq AS VARCHAR(2)) + ' is: ' + CAST(@totalpages AS VARCHAR(2))
		SET @pagecount = 1

		WHILE @pagecount <= @totalpages
		BEGIN
--			IF @totalpages > 1
--			BEGIN
--				SET @pagelabel = '(' + CAST(@pagecount AS VARCHAR(1)) + ' of ' + CAST(@totalpages AS VARCHAR(1)) + ')'
--			END
			SET @joseq = (@pagecount - 1) * 4
			SET @jbseq = (@pagecount - 1) * 4
			IF (@DocIndex = @count + 1)
				BEGIN
					SET @seq1 = @seq
					SET @jo1seq = @joseq + 1
					SET @jo2seq = @joseq + 2
					SET @jo3seq = @joseq + 3
					SET @jo4seq = @joseq + 4
					SET @jb1seq = @jbseq + 1
					SET @jb2seq = @jbseq + 2
					SET @jb3seq = @jbseq + 3
					SET @jb4seq = @jbseq + 4
					PRINT 'SELECTED: DocIndex=' + CAST(@DocIndex AS VARCHAR(2)) + ' SASeq=' + CAST(@seq AS VARCHAR(2)) + ' JOSeq=' + CAST(@jo1seq AS VARCHAR(2)) + ' JBSeq=' + CAST(@jb1seq AS VARCHAR(2))
				END
			SET @count = @count + 1
			SET @pagecount = @pagecount + 1
		END

		FETCH NEXT FROM curs2 INTO @seq
	END
CLOSE curs2
DEALLOCATE curs2
SELECT  @DocIndex AS DocIndex
	, RTRIM(NMR.Account) AS Account
	, RIGHT('0' + RTRIM(CONVERT(CHAR(2), SA.Suffix)), 2) AS Suffix
	, RTRIM(NMR.Account) + '-' + RIGHT('0' + RTRIM(CONVERT(CHAR(2), SA.Suffix)), 2) AS Account_Suffix
	, NMR.CreatedOn AS IssueDate
	, '$' + RTRIM(CAST(CONVERT(MONEY, SA.Amount *.01, 2) AS VARCHAR(10))) AS InitialDeposit
	, INVADD.MaturityDate AS MaturityDate
	, RTRIM(CAST(CONVERT(DECIMAL(6,2),CONVERT(FLOAT(1),SA.APR) * 0.0001) AS VARCHAR(10))) + '%' AS InitialRate
	, RTRIM(CAST(CONVERT(DECIMAL(6,2),(POWER((1 + (CONVERT(FLOAT(1), SA.APR) * 0.0001) / 365),365)-1)) AS VARCHAR(10))) + '%' AS APY
	, SA.CreatedBy AS OpenedBy
--	, SA.Term AS Term

	, CASE WHEN NMR.AccountClass = 'O' THEN
		RTRIM(NMR.OrganizationName) ELSE
		RTRIM(RTRIM(NMR.FName) + ' ' + RTRIM(NMR.LName) + ' ' + RTRIM(NMR.MECHTag)) END
	  AS OFullName1
	, RTRIM(JO1.FullName) AS OFullName2
	, RTRIM(JO2.FullName) AS OFullName3
	, RTRIM(JO3.FullName) AS OFullName4
	, RTRIM(JO4.FullName) AS OFullName5
	, CASE WHEN NMR.AccountClass = 'O' THEN
		RTRIM(NMR.OrganizationName) ELSE
		RTRIM(RTRIM(NMR.FName) + ' ' + RTRIM(NMR.LName) + ' ' + RTRIM(NMR.MECHTag)) END
	  AS FullName1
	, RTRIM(JO1.FullName) AS FullName2
	, RTRIM(JO2.FullName) AS FullName3
	, RTRIM(JO3.FullName) AS FullName4
	, RTRIM(JO4.FullName) AS FullName5
	, CASE WHEN NMR.AccountClass = 'O' THEN
		LEFT(NMR.SSN, 2) + '-' + RIGHT(NMR.SSN, 7) ELSE
		LEFT(NMR.SSN, 3) + '-' + LEFT(RIGHT(NMR.SSN, 6), 2) + '-' + RIGHT(NMR.SSN, 4) END
	  AS SSN1
	, JO1.SSN AS SSN2
	, JO2.SSN AS SSN3
	, JO3.SSN AS SSN4
	, JO4.SSN AS SSN5
	, CONVERT(char(10), NMR.DOB, 101) AS DOB1
	, CONVERT(char(10), JO1.DOB, 101) AS DOB2
	, CONVERT(char(10), JO2.DOB, 101) AS DOB3
	, CONVERT(char(10), JO3.DOB, 101) AS DOB4
	, CONVERT(char(10), JO4.DOB, 101) AS DOB5
	, JO1.Address AS JAddress2
	, JO2.Address AS JAddress3
	, JO3.Address AS JAddress4
	, JO4.Address AS JAddress5
	, CASE RTRIM(ISNULL(JO1.Apartment, '')) WHEN '' THEN RTRIM(JO1.Address2) ELSE RTRIM(JO1.Apartment) END AS JApartment2
	, CASE RTRIM(ISNULL(JO2.Apartment, '')) WHEN '' THEN RTRIM(JO2.Address2) ELSE RTRIM(JO2.Apartment) END AS JApartment3
	, CASE RTRIM(ISNULL(JO3.Apartment, '')) WHEN '' THEN RTRIM(JO3.Address2) ELSE RTRIM(JO3.Apartment) END AS JApartment4
	, CASE RTRIM(ISNULL(JO4.Apartment, '')) WHEN '' THEN RTRIM(JO4.Address2) ELSE RTRIM(JO4.Apartment) END AS JApartment5
	, JO1.City AS JCity2
	, JO2.City AS JCity3
	, JO3.City AS JCity4
	, JO4.City AS JCity5
	, JO1.State AS JState2
	, JO2.State AS JState3
	, JO3.State AS JState4
	, JO4.State AS JState5
	, JO1.Zip AS JZip2
	, JO2.Zip AS JZip3
	, JO3.Zip AS JZip4
	, JO4.Zip AS JZip5
	, JO1.FullPhone AS JFullPhone2
	, JO2.FullPhone AS JFullPhone3
	, JO3.FullPhone AS JFullPhone4
	, JO4.FullPhone AS JFullPhone5
	, JO1.Email AS JEmail2
	, JO2.Email AS JEmail3
	, JO3.Email AS JEmail4
	, JO4.Email AS JEmail5
	, RTRIM(JOBE1.FullName) + ' ' + JOBE1.SSN AS BFullNameSSN1
	, RTRIM(JOBE2.FullName) + ' ' + JOBE2.SSN AS BFullNameSSN2
	, RTRIM(JOBE3.FullName) + ' ' + JOBE3.SSN AS BFullNameSSN3
	, RTRIM(JOBE4.FullName) + ' ' + JOBE4.SSN AS BFullNameSSN4
	, RTRIM(JOBE1.FullName) AS BFullName1
	, RTRIM(JOBE2.FullName) AS BFullName2
	, RTRIM(JOBE3.FullName) AS BFullName3
	, RTRIM(JOBE4.FullName) AS BFullName4
--	, RTRIM(JOBE1.BenePercent) AS BE1BenePercent
--	, RTRIM(JOBE2.BenePercent) AS BE2BenePercent
--	, RTRIM(JOBE3.BenePercent) AS BE3BenePercent
--	, RTRIM(JOBE4.BenePercent) AS BE4BenePercent
FROM IMS.NewMemberRequest As NMR	
	LEFT OUTER JOIN IMS.fnONCU_GetSASeq(@TrackingNum, @seq1) AS SA ON NMR.TrackingNum = SA.TrackingNum
	LEFT OUTER JOIN IMS.fnONCU_GetJOJL2(@TrackingNum, 'JO', 'TR', 'OR', 'CJ', 'CO', 'TE', '', '', @seq1) AS JO1 ON NMR.TrackingNum = JO1.TrackingNum AND JO1.JointSequence = @jo1seq
	LEFT OUTER JOIN IMS.fnONCU_GetJOJL2(@TrackingNum, 'JO', 'TR', 'OR', 'CJ', 'CO', 'TE', '', '', @seq1) AS JO2 ON NMR.TrackingNum = JO2.TrackingNum AND JO2.JointSequence = @jo2seq
	LEFT OUTER JOIN IMS.fnONCU_GetJOJL2(@TrackingNum, 'JO', 'TR', 'OR', 'CJ', 'CO', 'TE', '', '', @seq1) AS JO3 ON NMR.TrackingNum = JO3.TrackingNum AND JO3.JointSequence = @jo3seq
	LEFT OUTER JOIN IMS.fnONCU_GetJOJL2(@TrackingNum, 'JO', 'TR', 'OR', 'CJ', 'CO', 'TE', '', '', @seq1) AS JO4 ON NMR.TrackingNum = JO4.TrackingNum AND JO4.JointSequence = @jo4seq
	LEFT OUTER JOIN IMS.fnONCU_GetJOJL2(@TrackingNum, 'BE', 'CB', 'CT', 'TB', '', '', '', '', @seq1) AS JOBE1 ON NMR.TrackingNum = JOBE1.TrackingNum AND JOBE1.JointSequence = @jb1seq
	LEFT OUTER JOIN IMS.fnONCU_GetJOJL2(@TrackingNum, 'BE', 'CB', 'CT', 'TB', '', '', '', '', @seq1) AS JOBE2 ON NMR.TrackingNum = JOBE2.TrackingNum AND JOBE2.JointSequence = @jb2seq
	LEFT OUTER JOIN IMS.fnONCU_GetJOJL2(@TrackingNum, 'BE', 'CB', 'CT', 'TB', '', '', '', '', @seq1) AS JOBE3 ON NMR.TrackingNum = JOBE3.TrackingNum AND JOBE3.JointSequence = @jb3seq
	LEFT OUTER JOIN IMS.fnONCU_GetJOJL2(@TrackingNum, 'BE', 'CB', 'CT', 'TB', '', '', '', '', @seq1) AS JOBE4 ON NMR.TrackingNum = JOBE4.TrackingNum AND JOBE4.JointSequence = @jb4seq
	LEFT OUTER JOIN IMS.NewMemberInvestmentAdd AS INVADD ON INVADD.TrackingNum = NMR.TrackingNum AND INVADD.SubAccountSequence = SA.Sequence
--	LEFT OUTER JOIN IMS.fnONCU_GetCL(@TrackingNum, @seq1, 'C', '') AS MATDISPDATA ON NMR.TrackingNum = MATDISPDATA.TrackingNum
--	LEFT OUTER JOIN IMS.fnONCU_GetCL(@TrackingNum, @seq1, 'D', 'P') AS DIVDISPDATA ON NMR.TrackingNum = DIVDISPDATA.TrackingNum
--	LEFT OUTER JOIN IMS.NewMemberSubAccount AS MATSA ON MATSA.TrackingNum = NMR.TrackingNum AND  MATSA.Sequence = MATDISPDATA.RelatedSequence
--	LEFT OUTER JOIN IMS.NewMemberSubAccount AS DIVSA ON DIVSA.TrackingNum = NMR.TrackingNum AND DIVSA.Sequence = DIVDISPDATA.RelatedSequence
	LEFT OUTER JOIN IMS.udt_ISubAccounts AS IConfig ON IConfig.UniqueID = SA.SubAccountType
WHERE NMR.TrackingNum = @TrackingNum
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spONCU_D42Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spONCU_D42Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

DECLARE @docsubname CHAR(100)
DECLARE @newdocsub CHAR(200)
DECLARE @newdocsubtemp CHAR(200)
DECLARE @docsuffix CHAR(2)
DECLARE @docdesc CHAR(50)
DECLARE @count INT
DECLARE @docindex INT
DECLARE @jocount INT
DECLARE @jbcount INT
DECLARE @totalpages INT
DECLARE @pagecount INT

DECLARE curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT SA.Sequence, CONVERT(CHAR(2), SA.Suffix), RTRIM(SA.Description)
	FROM IMS.NewMemberRequest AS NMR
	INNER JOIN IMS.NewMemberSubAccount AS SA ON NMR.TrackingNum = SA.TrackingNum
	WHERE NMR.TrackingNum = @TrackingNum AND SA.SLType = 'I' AND LEFT(SA.DescAbrv, 1) = 'C' AND SA.Created = 'Y'

OPEN curs
FETCH NEXT FROM curs INTO @docsubname, @docsuffix, @docdesc
SET @count = 0
SET @docindex = 0
--PRINT @@FETCH_STATUS
	WHILE @@FETCH_STATUS = 0
	BEGIN
		SET @count = @count + 1
		SET @newdocsub = 'Credit Builder Certificate (' + RTRIM(@docdesc) + ' Suffix: ' + CASE LEN(@docsuffix) WHEN 2 THEN @docsuffix WHEN 1 THEN '0' + @docsuffix ELSE 'NA' END + ')'
		--PRINT @count
		SET @jocount = (SELECT COUNT(*) FROM IMS.NewMemberJointLink JL LEFT JOIN IMS.NewMemberJointOwner JO ON JL.TrackingNum = JO.TrackingNum AND JO.JointOwnerType IN ('JO', 'TR', 'OR', 'CJ', 'CO', 'TE') WHERE JL.TrackingNum = @TrackingNum AND JL.SubAccountSequence = RTRIM(@docsubname) AND JL.JointSequence = JO.Sequence)
		PRINT 'JO Count for ' + @docsuffix + ' is: ' + CAST(@jocount AS VARCHAR(2))
		SET @jbcount = (SELECT COUNT(*) FROM IMS.NewMemberJointLink JL LEFT JOIN IMS.NewMemberJointOwner JO ON JL.TrackingNum = JO.TrackingNum AND JO.JointOwnerType IN ('BE', 'CB', 'CT', 'TB') WHERE JL.TrackingNum = @TrackingNum AND JL.SubAccountSequence = RTRIM(@docsubname) AND JL.JointSequence = JO.Sequence)
		PRINT 'JB Count for ' + @docsuffix + ' is: ' + CAST(@jbcount AS VARCHAR(2))
		SET @totalpages = ((@jocount - 1) / 4) + 1
		IF ((@jbcount - 1) / 4) + 1 > @totalpages
		BEGIN
			SET @totalpages = ((@jbcount - 1) / 4) + 1
		END
		PRINT 'Total Pages for ' + @docsuffix + ' is: ' + CAST(@totalpages AS VARCHAR(2))
		SET @pagecount = 1

		WHILE @pagecount <= @totalpages
		BEGIN
			SET @newdocsubtemp = @newdocsub
			IF @totalpages > 1
			BEGIN
				SET @newdocsubtemp = RTRIM(@newdocsub) + ' (' + CAST(@pagecount AS VARCHAR(1)) + ' of ' + CAST(@totalpages AS VARCHAR(1)) + ')'
			END
			SET @docindex = @docindex + 1
			INSERT INTO IMS.NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsubtemp, @TrackingNum)
			SET @pagecount = @pagecount + 1
		END

		FETCH NEXT FROM curs INTO @docsubname, @docsuffix, @docdesc

	END

CLOSE curs
DEALLOCATE curs

SELECT 'ECRBLCD' AS DocCode, * FROM IMS.NewMemberDoc WHERE TrackingNum = @TrackingNum
DELETE FROM IMS.NewMemberDoc WHERE TrackingNum = @TrackingNum

Return 1
GO
/****** Object:  StoredProcedure [IMS].[spONCU_D42Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spONCU_D42Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @seq INT
DECLARE @seq1 INT
DECLARE @joseq INT
DECLARE @jo1seq INT
DECLARE @jo2seq INT
DECLARE @jo3seq INT
DECLARE @jo4seq INT
DECLARE @jbseq INT
DECLARE @jb1seq INT
DECLARE @jb2seq INT
DECLARE @jb3seq INT
DECLARE @jb4seq INT
DECLARE @jocount INT
DECLARE @jbcount INT
DECLARE @totalpages INT
DECLARE @pagecount INT
DECLARE @count INT

DECLARE curs2 CURSOR LOCAL FAST_FORWARD FOR
	SELECT DISTINCT CONVERT(INT, SA.Sequence)
	FROM IMS.NewMemberRequest AS NMR
	INNER JOIN IMS.NewMemberSubAccount AS SA ON NMR.TrackingNum = SA.TrackingNum
	LEFT JOIN IMS.NewMemberJointLink AS JL ON JL.TrackingNum = SA.TrackingNum AND JL.SubAccountSequence = SA.Sequence
	WHERE NMR.TrackingNum = @TrackingNum AND SA.SLType = 'I' AND LEFT(SA.DescAbrv, 1) = 'C' AND (JL.Created = 'Y' OR SA.Created = 'Y')
OPEN curs2
FETCH NEXT FROM curs2 INTO @seq
SET @count = 0
--PRINT @@FETCH_STATUS
	WHILE @@FETCH_STATUS = 0
	BEGIN
		SET @jocount = (SELECT COUNT(*) FROM IMS.NewMemberJointLink JL LEFT JOIN IMS.NewMemberJointOwner JO ON JL.TrackingNum = JO.TrackingNum AND JO.JointOwnerType IN ('JO', 'TR', 'OR', 'CJ', 'CO', 'TE') WHERE JL.TrackingNum = @TrackingNum AND JL.SubAccountSequence = @seq AND JL.JointSequence = JO.Sequence)
		PRINT 'JO Count for ' + CAST(@seq AS VARCHAR(2)) + ' is: ' + CAST(@jocount AS VARCHAR(2))
		SET @jbcount = (SELECT COUNT(*) FROM IMS.NewMemberJointLink JL LEFT JOIN IMS.NewMemberJointOwner JO ON JL.TrackingNum = JO.TrackingNum AND JO.JointOwnerType IN ('BE', 'CB', 'CT', 'TB') WHERE JL.TrackingNum = @TrackingNum AND JL.SubAccountSequence = @seq AND JL.JointSequence = JO.Sequence)
		PRINT 'JB Count for ' + CAST(@seq AS VARCHAR(2)) + ' is: ' + CAST(@jbcount AS VARCHAR(2))
		SET @totalpages = ((@jocount - 1) / 5) + 1
		IF ((@jbcount - 1) / 4) + 1 > @totalpages
		BEGIN
			SET @totalpages = ((@jbcount - 1) / 4) + 1
		END
		PRINT 'Total Pages for ' + CAST(@seq AS VARCHAR(2)) + ' is: ' + CAST(@totalpages AS VARCHAR(2))
		SET @pagecount = 1

		WHILE @pagecount <= @totalpages
		BEGIN
--			IF @totalpages > 1
--			BEGIN
--				SET @pagelabel = '(' + CAST(@pagecount AS VARCHAR(1)) + ' of ' + CAST(@totalpages AS VARCHAR(1)) + ')'
--			END
			SET @joseq = (@pagecount - 1) * 4
			SET @jbseq = (@pagecount - 1) * 4
			IF (@DocIndex = @count + 1)
				BEGIN
					SET @seq1 = @seq
					SET @jo1seq = @joseq + 1
					SET @jo2seq = @joseq + 2
					SET @jo3seq = @joseq + 3
					SET @jo4seq = @joseq + 4
					SET @jb1seq = @jbseq + 1
					SET @jb2seq = @jbseq + 2
					SET @jb3seq = @jbseq + 3
					SET @jb4seq = @jbseq + 4
					PRINT 'SELECTED: DocIndex=' + CAST(@DocIndex AS VARCHAR(2)) + ' SASeq=' + CAST(@seq AS VARCHAR(2)) + ' JOSeq=' + CAST(@jo1seq AS VARCHAR(2)) + ' JBSeq=' + CAST(@jb1seq AS VARCHAR(2))
				END
			SET @count = @count + 1
			SET @pagecount = @pagecount + 1
		END

		FETCH NEXT FROM curs2 INTO @seq
	END
CLOSE curs2
DEALLOCATE curs2
SELECT  @DocIndex AS DocIndex
	, RTRIM(NMR.Account) AS Account
	, RIGHT('0' + RTRIM(CONVERT(CHAR(2), SA.Suffix)), 2) AS Suffix
	, RTRIM(NMR.LName) + RTRIM(NMR.OrganizationName) AS LName
	, RTRIM(RTRIM(NMR.FName) + ' ' + NMR.MInitial) AS FName_MInitial
	, RTRIM(NMR.Account) + '-' + RIGHT('0' + RTRIM(CONVERT(CHAR(2), SA.Suffix)), 2) AS Account_Suffix
	, NMR.CreatedOn AS IssueDate
	, '$' + RTRIM(CAST(CONVERT(MONEY, SA.Amount *.01, 2) AS VARCHAR(10))) AS InitialDeposit
	, INVADD.MaturityDate AS MaturityDate
	, RTRIM(CAST(CONVERT(DECIMAL(6,2),CONVERT(FLOAT(1),SA.APR) * 0.0001) AS VARCHAR(10))) + '%' AS InitialRate
	, RTRIM(CAST(CONVERT(DECIMAL(6,2),(POWER((1 + (CONVERT(FLOAT(1), SA.APR) * 0.0001) / 365),365)-1)) AS VARCHAR(10))) + '%' AS APY
	, SA.CreatedBy AS OpenedBy
	, RTRIM(CAST(SA.Term AS VARCHAR(2))) + ' Months' AS Term

	, JO2.AssocCode AS JO02Code
	, RTRIM(JO2.FullName) AS JO02FullName
	, JO2.SSN AS JO02SSN
	, JO2.DOB AS JO02DOB
	, JO2.Address AS JO02Address
	, CASE RTRIM(ISNULL(JO2.Apartment, '')) WHEN '' THEN RTRIM(JO2.Address2) ELSE RTRIM(JO2.Apartment) END AS JO02Apartment
	, JO2.City AS JO02City
	, JO2.State AS JO02State
	, JO2.Zip AS JO02Zip
	, JO2.FullPhone AS JO02FullPhone
	, JO2.Email AS JO02Email
	, RTRIM(JO2.Relationship) AS JO02Relationship
	, RTRIM(JO2.Title) AS JO02Occupation
	, CASE WHEN JO2.AssocCode != 'BE' AND JO2.AssocCode != 'CB' AND JO2.AssocCode != 'TB' AND JO2.AssocCode != 'CT' THEN JO2.AssocCode END AS JO02SCode
	, CASE WHEN JO2.AssocCode != 'BE' AND JO2.AssocCode != 'CB' AND JO2.AssocCode != 'TB' AND JO2.AssocCode != 'CT' THEN RTRIM(JO2.IDState) + RTRIM(JO2.IDSource) + '-' + RTRIM(JO2.IDNumber) + ISNULL(' Exp:' + JO2.IDExpireDate, '') END AS IDInfo2

	, JO3.AssocCode AS JO03Code
	, RTRIM(JO3.FullName) AS JO03FullName
	, JO3.SSN AS JO03SSN
	, JO3.DOB AS JO03DOB
	, JO3.Address AS JO03Address
	, CASE RTRIM(ISNULL(JO3.Apartment, '')) WHEN '' THEN RTRIM(JO3.Address2) ELSE RTRIM(JO3.Apartment) END AS JO03Apartment
	, JO3.City AS JO03City
	, JO3.State AS JO03State
	, JO3.Zip AS JO03Zip
	, JO3.FullPhone AS JO03FullPhone
	, JO3.Email AS JO03Email
	, RTRIM(JO3.Relationship) AS JO03Relationship
	, RTRIM(JO3.Title) AS JO03Occupation
	, CASE WHEN JO3.AssocCode != 'BE' AND JO3.AssocCode != 'CB' AND JO3.AssocCode != 'TB' AND JO3.AssocCode != 'CT' THEN JO3.AssocCode END AS JO03SCode
	, CASE WHEN JO3.AssocCode != 'BE' AND JO3.AssocCode != 'CB' AND JO3.AssocCode != 'TB' AND JO3.AssocCode != 'CT' THEN RTRIM(JO3.IDState) + RTRIM(JO3.IDSource) + '-' + RTRIM(JO3.IDNumber) + ISNULL(' Exp:' + JO3.IDExpireDate, '') END AS IDInfo3

	, JO4.AssocCode AS JO04Code
	, RTRIM(JO4.FullName) AS JO04FullName
	, JO4.SSN AS JO04SSN
	, JO4.DOB AS JO04DOB
	, JO4.Address AS JO04Address
	, CASE RTRIM(ISNULL(JO4.Apartment, '')) WHEN '' THEN RTRIM(JO4.Address2) ELSE RTRIM(JO4.Apartment) END AS JO04Apartment
	, JO4.City AS JO04City
	, JO4.State AS JO04State
	, JO4.Zip AS JO04Zip
	, JO4.FullPhone AS JO04FullPhone
	, JO4.Email AS JO04Email
	, RTRIM(JO4.Relationship) AS JO04Relationship
	, RTRIM(JO4.Title) AS JO04Occupation
	, CASE WHEN JO4.AssocCode != 'BE' AND JO4.AssocCode != 'CB' AND JO4.AssocCode != 'TB' AND JO4.AssocCode != 'CT' THEN JO4.AssocCode END AS JO04SCode
	, CASE WHEN JO4.AssocCode != 'BE' AND JO4.AssocCode != 'CB' AND JO4.AssocCode != 'TB' AND JO4.AssocCode != 'CT' THEN RTRIM(JO4.IDState) + RTRIM(JO4.IDSource) + '-' + RTRIM(JO4.IDNumber) + ISNULL(' Exp:' + JO4.IDExpireDate, '') END AS IDInfo4

	, JO5.AssocCode AS JO05Code
	, RTRIM(JO5.FullName) AS JO05FullName
	, JO5.SSN AS JO05SSN
	, JO5.DOB AS JO05DOB
	, JO5.Address AS JO05Address
	, CASE RTRIM(ISNULL(JO5.Apartment, '')) WHEN '' THEN RTRIM(JO5.Address2) ELSE RTRIM(JO5.Apartment) END AS JO05Apartment
	, JO5.City AS JO05City
	, JO5.State AS JO05State
	, JO5.Zip AS JO05Zip
	, JO5.FullPhone AS JO05FullPhone
	, JO5.Email AS JO05Email
	, RTRIM(JO5.Relationship) AS JO05Relationship
	, RTRIM(JO5.Title) AS JO05Occupation
	, CASE WHEN JO5.AssocCode != 'BE' AND JO5.AssocCode != 'CB' AND JO5.AssocCode != 'TB' AND JO5.AssocCode != 'CT' THEN JO5.AssocCode END AS JO05SCode
	, CASE WHEN JO5.AssocCode != 'BE' AND JO5.AssocCode != 'CB' AND JO5.AssocCode != 'TB' AND JO5.AssocCode != 'CT' THEN RTRIM(JO5.IDState) + RTRIM(JO5.IDSource) + '-' + RTRIM(JO5.IDNumber) + ISNULL(' Exp:' + JO5.IDExpireDate, '') END AS IDInfo5

	, JO6.AssocCode AS JO06Code
	, RTRIM(JO6.FullName) AS JO06FullName
	, JO6.SSN AS JO06SSN
	, JO6.DOB AS JO06DOB
	, JO6.Address AS JO06Address
	, CASE RTRIM(ISNULL(JO6.Apartment, '')) WHEN '' THEN RTRIM(JO6.Address2) ELSE RTRIM(JO6.Apartment) END AS JO06Apartment
	, JO6.City AS JO06City
	, JO6.State AS JO06State
	, JO6.Zip AS JO06Zip
	, JO6.FullPhone AS JO06FullPhone
	, JO6.Email AS JO06Email
	, RTRIM(JO6.Relationship) AS JO06Relationship
	, RTRIM(JO6.Title) AS JO06Occupation
	, CASE WHEN JO6.AssocCode != 'BE' AND JO6.AssocCode != 'CB' AND JO6.AssocCode != 'TB' AND JO6.AssocCode != 'CT' THEN JO6.AssocCode END AS JO06SCode
	, CASE WHEN JO6.AssocCode != 'BE' AND JO6.AssocCode != 'CB' AND JO6.AssocCode != 'TB' AND JO6.AssocCode != 'CT' THEN RTRIM(JO6.IDState) + RTRIM(JO6.IDSource) + '-' + RTRIM(JO6.IDNumber) + ISNULL(' Exp:' + JO6.IDExpireDate, '') END AS IDInfo6

	, JO7.AssocCode AS JO07Code
	, RTRIM(JO7.FullName) AS JO07FullName
	, JO7.SSN AS JO07SSN
	, JO7.DOB AS JO07DOB
	, JO7.Address AS JO07Address
	, CASE RTRIM(ISNULL(JO7.Apartment, '')) WHEN '' THEN RTRIM(JO7.Address2) ELSE RTRIM(JO7.Apartment) END AS JO07Apartment
	, JO7.City AS JO07City
	, JO7.State AS JO07State
	, JO7.Zip AS JO07Zip
	, JO7.FullPhone AS JO07FullPhone
	, JO7.Email AS JO07Email
	, RTRIM(JO7.Relationship) AS JO07Relationship
	, RTRIM(JO7.Title) AS JO07Occupation
	, CASE WHEN JO7.AssocCode != 'BE' AND JO7.AssocCode != 'CB' AND JO7.AssocCode != 'TB' AND JO7.AssocCode != 'CT' THEN JO7.AssocCode END AS JO07SCode
	, CASE WHEN JO7.AssocCode != 'BE' AND JO7.AssocCode != 'CB' AND JO7.AssocCode != 'TB' AND JO7.AssocCode != 'CT' THEN RTRIM(JO7.IDState) + RTRIM(JO7.IDSource) + '-' + RTRIM(JO7.IDNumber) + ISNULL(' Exp:' + JO7.IDExpireDate, '') END AS IDInfo7

	, JO8.AssocCode AS JO08Code
	, RTRIM(JO8.FullName) AS JO08FullName
	, JO8.SSN AS JO08SSN
	, JO8.DOB AS JO08DOB
	, JO8.Address AS JO08Address
	, CASE RTRIM(ISNULL(JO8.Apartment, '')) WHEN '' THEN RTRIM(JO8.Address2) ELSE RTRIM(JO8.Apartment) END AS JO08Apartment
	, JO8.City AS JO08City
	, JO8.State AS JO08State
	, JO8.Zip AS JO08Zip
	, JO8.FullPhone AS JO08FullPhone
	, JO8.Email AS JO08Email
	, RTRIM(JO8.Relationship) AS JO08Relationship
	, RTRIM(JO8.Title) AS JO08Occupation
	, CASE WHEN JO8.AssocCode != 'BE' AND JO8.AssocCode != 'CB' AND JO8.AssocCode != 'TB' AND JO8.AssocCode != 'CT' THEN JO8.AssocCode END AS JO08SCode
	, CASE WHEN JO8.AssocCode != 'BE' AND JO8.AssocCode != 'CB' AND JO8.AssocCode != 'TB' AND JO8.AssocCode != 'CT' THEN RTRIM(JO8.IDState) + RTRIM(JO8.IDSource) + '-' + RTRIM(JO8.IDNumber) + ISNULL(' Exp:' + JO8.IDExpireDate, '') END AS IDInfo8

	, JO9.AssocCode AS JO09Code
	, RTRIM(JO9.FullName) AS JO09FullName
	, JO9.SSN AS JO09SSN
	, JO9.DOB AS JO09DOB
	, JO9.Address AS JO09Address
	, CASE RTRIM(ISNULL(JO9.Apartment, '')) WHEN '' THEN RTRIM(JO9.Address2) ELSE RTRIM(JO9.Apartment) END AS JO09Apartment
	, JO9.City AS JO09City
	, JO9.State AS JO09State
	, JO9.Zip AS JO09Zip
	, JO9.FullPhone AS JO09FullPhone
	, JO9.Email AS JO09Email
	, RTRIM(JO9.Relationship) AS JO09Relationship
	, RTRIM(JO9.Title) AS JO09Occupation
	, CASE WHEN JO9.AssocCode != 'BE' AND JO9.AssocCode != 'CB' AND JO9.AssocCode != 'TB' AND JO9.AssocCode != 'CT' THEN JO9.AssocCode END AS JO09SCode
	, CASE WHEN JO9.AssocCode != 'BE' AND JO9.AssocCode != 'CB' AND JO9.AssocCode != 'TB' AND JO9.AssocCode != 'CT' THEN RTRIM(JO9.IDState) + RTRIM(JO9.IDSource) + '-' + RTRIM(JO9.IDNumber) + ISNULL(' Exp:' + JO9.IDExpireDate, '') END AS IDInfo9

	, JO10.AssocCode AS JO10Code
	, RTRIM(JO10.FullName) AS JO10FullName
	, JO10.SSN AS JO10SSN
	, JO10.DOB AS JO10DOB
	, JO10.Address AS JO10Address
	, CASE RTRIM(ISNULL(JO10.Apartment, '')) WHEN '' THEN RTRIM(JO10.Address2) ELSE RTRIM(JO10.Apartment) END AS JO10Apartment
	, JO10.City AS JO10City
	, JO10.State AS JO10State
	, JO10.Zip AS JO10Zip
	, JO10.FullPhone AS JO10FullPhone
	, JO10.Email AS JO10Email
	, RTRIM(JO10.Relationship) AS JO10Relationship
	, RTRIM(JO10.Title) AS JO10Occupation
	, CASE WHEN JO10.AssocCode != 'BE' AND JO10.AssocCode != 'CB' AND JO10.AssocCode != 'TB' AND JO10.AssocCode != 'CT' THEN JO10.AssocCode END AS JO10SCode
	, CASE WHEN JO10.AssocCode != 'BE' AND JO10.AssocCode != 'CB' AND JO10.AssocCode != 'TB' AND JO10.AssocCode != 'CT' THEN RTRIM(JO10.IDState) + RTRIM(JO10.IDSource) + '-' + RTRIM(JO10.IDNumber) + ISNULL(' Exp:' + JO10.IDExpireDate, '') END AS IDInfo10

	, JO11.AssocCode AS JO11Code
	, RTRIM(JO11.FullName) AS JO11FullName
	, JO11.SSN AS JO11SSN
	, JO11.DOB AS JO11DOB
	, JO11.Address AS JO11Address
	, CASE RTRIM(ISNULL(JO11.Apartment, '')) WHEN '' THEN RTRIM(JO11.Address2) ELSE RTRIM(JO11.Apartment) END AS JO11Apartment
	, JO11.City AS JO11City
	, JO11.State AS JO11State
	, JO11.Zip AS JO11Zip
	, JO11.FullPhone AS JO11FullPhone
	, JO11.Email AS JO11Email
	, RTRIM(JO11.Relationship) AS JO11Relationship
	, RTRIM(JO11.Title) AS JO11Occupation
	, CASE WHEN JO11.AssocCode != 'BE' AND JO11.AssocCode != 'CB' AND JO11.AssocCode != 'TB' AND JO11.AssocCode != 'CT' THEN JO11.AssocCode END AS JO11SCode
	, CASE WHEN JO11.AssocCode != 'BE' AND JO11.AssocCode != 'CB' AND JO11.AssocCode != 'TB' AND JO11.AssocCode != 'CT' THEN RTRIM(JO11.IDState) + RTRIM(JO11.IDSource) + '-' + RTRIM(JO11.IDNumber) + ISNULL(' Exp:' + JO11.IDExpireDate, '') END AS IDInfo11

FROM IMS.NewMemberRequest As NMR	
	LEFT OUTER JOIN IMS.fnONCU_GetSASeq(@TrackingNum, @seq1) AS SA ON NMR.TrackingNum = SA.TrackingNum
	LEFT OUTER JOIN IMS.NewMemberInvestmentAdd AS INVADD ON INVADD.TrackingNum = NMR.TrackingNum AND INVADD.SubAccountSequence = SA.Sequence
	LEFT OUTER JOIN fnONCU_GetJOJL(@TrackingNum, @seq1, '%%', '', '', '', '') AS JO2 ON NMR.TrackingNum = JO2.TrackingNum AND JO2.JointSequence = 1
	LEFT OUTER JOIN fnONCU_GetJOJL(@TrackingNum, @seq1, '%%', '', '', '', '') AS JO3 ON NMR.TrackingNum = JO3.TrackingNum AND JO3.JointSequence = 2
	LEFT OUTER JOIN fnONCU_GetJOJL(@TrackingNum, @seq1, '%%', '', '', '', '') AS JO4 ON NMR.TrackingNum = JO4.TrackingNum AND JO4.JointSequence = 3
	LEFT OUTER JOIN fnONCU_GetJOJL(@TrackingNum, @seq1, '%%', '', '', '', '') AS JO5 ON NMR.TrackingNum = JO5.TrackingNum AND JO5.JointSequence = 4
	LEFT OUTER JOIN fnONCU_GetJOJL(@TrackingNum, @seq1, '%%', '', '', '', '') AS JO6 ON NMR.TrackingNum = JO6.TrackingNum AND JO6.JointSequence = 5
	LEFT OUTER JOIN fnONCU_GetJOJL(@TrackingNum, @seq1, '%%', '', '', '', '') AS JO7 ON NMR.TrackingNum = JO7.TrackingNum AND JO7.JointSequence = 6
	LEFT OUTER JOIN fnONCU_GetJOJL(@TrackingNum, @seq1, '%%', '', '', '', '') AS JO8 ON NMR.TrackingNum = JO8.TrackingNum AND JO8.JointSequence = 7
	LEFT OUTER JOIN fnONCU_GetJOJL(@TrackingNum, @seq1, '%%', '', '', '', '') AS JO9 ON NMR.TrackingNum = JO9.TrackingNum AND JO9.JointSequence = 8
	LEFT OUTER JOIN fnONCU_GetJOJL(@TrackingNum, @seq1, '%%', '', '', '', '') AS JO10 ON NMR.TrackingNum = JO10.TrackingNum AND JO10.JointSequence = 9
	LEFT OUTER JOIN fnONCU_GetJOJL(@TrackingNum, @seq1, '%%', '', '', '', '') AS JO11 ON NMR.TrackingNum = JO11.TrackingNum AND JO11.JointSequence = 10
--	LEFT OUTER JOIN IMS.fnONCU_GetCL(@TrackingNum, @seq1, 'C', '') AS MATDISPDATA ON NMR.TrackingNum = MATDISPDATA.TrackingNum
--	LEFT OUTER JOIN IMS.fnONCU_GetCL(@TrackingNum, @seq1, 'D', 'P') AS DIVDISPDATA ON NMR.TrackingNum = DIVDISPDATA.TrackingNum
--	LEFT OUTER JOIN IMS.NewMemberSubAccount AS MATSA ON MATSA.TrackingNum = NMR.TrackingNum AND  MATSA.Sequence = MATDISPDATA.RelatedSequence
--	LEFT OUTER JOIN IMS.NewMemberSubAccount AS DIVSA ON DIVSA.TrackingNum = NMR.TrackingNum AND DIVSA.Sequence = DIVDISPDATA.RelatedSequence
	LEFT OUTER JOIN IMS.udt_ISubAccounts AS IConfig ON IConfig.UniqueID = SA.SubAccountType
WHERE NMR.TrackingNum = @TrackingNum
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spONCU_D50Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spONCU_D50Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
--Declare @TrackingNum int
--DROP TABLE #docs
--DEALLOCATE curs
--Set @TrackingNum = 1477

Declare @docsubname char(100)
Declare @newdocsub char(200)
Declare @docsuffix char(2)
Declare @count int
Declare @docindex int


--CREATE TABLE #docs(docindex int identity Primary Key, docsubname char(100))

Declare curs CURSOR FOR
	SELECT TOP 1 SA.Sequence, CONVERT(char(2), SA.Suffix)
	FROM NewMemberRequest As NMR INNER JOIN NewMemberSubAccount AS SA ON NMR.TrackingNum = SA.TrackingNum
	WHERE NMR.TrackingNum = @TrackingNum AND SA.ProductType = 'PSA' AND NMR.Branch = 41 AND 1 = 0 -- AND SA.Created = 'Y'

--IF @@ROWCOUNT = 0

OPEN curs
FETCH NEXT FROM curs INTO @docsubname, @docsuffix
SET @newdocsub = 'Membership Agreement and Disclosure Booklet '-- + CASE LEN(@docsubname) WHEN 2 THEN @docsubname WHEN 1 THEN '0' + @docsubname ELSE 'NA' END
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count

	Set @docindex = @docindex + 1
	INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)

      	FETCH NEXT FROM curs INTO @docsubname, @docsuffix

	SET @newdocsub = 'Membership Agreement and Disclosure Booklet '-- + CASE LEN(@docsubname) WHEN 2 THEN @docsubname WHEN 1 THEN '0' + @docsubname ELSE 'NA' END
   END

CLOSE curs
DEALLOCATE curs

Select *  FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Delete FROM NewMemberDoc WHERE TrackingNum = @TrackingNum

--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spONCU_D50Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spONCU_D50Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

SELECT @DocIndex As DocIndex
	--, BE1.fullname AS BE1fullname, BE1.fulladdress AS BE1fulladdress, BE1.DOB AS BE1DOB, BE1.Relationship AS BE1Relationship, CASE LEN(BE1.Suffix) WHEN 2 THEN BE1.Suffix WHEN 1 THEN '0' + BE1.Suffix ELSE 'NA' END AS BE1Suffix
	--, BE2.fullname AS BE2fullname, BE2.fulladdress AS BE2fulladdress, BE2.DOB AS BE2DOB, BE2.Relationship AS BE2Relationship, CASE LEN(BE2.Suffix) WHEN 2 THEN BE2.Suffix WHEN 1 THEN '0' + BE2.Suffix ELSE 'NA' END AS BE2Suffix
	--, BE3.fullname AS BE3fullname, BE3.fulladdress AS BE3fulladdress, BE3.DOB AS BE3DOB, BE3.Relationship AS BE3Relationship, CASE LEN(BE3.Suffix) WHEN 2 THEN BE3.Suffix WHEN 1 THEN '0' + BE3.Suffix ELSE 'NA' END AS BE3Suffix
FROM NewMemberRequest As NMR
	--INNER JOIN udt_AccountTypes AS AType On NMR.AccountType = AType.TypeCode
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
	--LEFT OUTER JOIN fnONCU_GetJOType(@TrackingNum, 'PD', '') AS BE1 ON NMR.TrackingNum = BE1.TrackingNum AND BE1.JointSequence = 1
	--LEFT OUTER JOIN fnONCU_GetJOType(@TrackingNum, 'PD', '') AS BE2 ON NMR.TrackingNum = BE2.TrackingNum AND BE2.JointSequence = 2
	--LEFT OUTER JOIN fnONCU_GetJOType(@TrackingNum, 'PD', '') AS BE3 ON NMR.TrackingNum = BE3.TrackingNum AND BE3.JointSequence = 3
WHERE NMR.TrackingNum = @TrackingNum


Return 1
GO
/****** Object:  StoredProcedure [IMS].[spONCU_D70Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spONCU_D70Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
--Declare @TrackingNum int
--DROP TABLE #docs
--DEALLOCATE curs
--Set @TrackingNum = 1477
Declare @docsubname char(100)
Declare @newdocsub char(100)
Declare @count int
Declare @docindex int
--CREATE TABLE #docs(docindex int identity Primary Key, docsubname char(100))
Declare curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT '' AS docsubname
	FROM NewMemberRequest AS NMR
	LEFT JOIN NewMemberSubAccount SA ON SA.TrackingNum = NMR.TrackingNum
	WHERE NMR.TrackingNum = @TrackingNum AND NMR.Processed = 999 AND NMR.Created = 'Y' AND SA.SubAccountType = 'ESA-01'
--IF @@ROWCOUNT = 0
OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @newdocsub = 'New Account Letter - Essential' + @docsubname
IF @docsubname Is Null
BEGIN
	SET @newdocsub = 'New Account Letter - Essential'
END
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count
      	IF @count = 1
	BEGIN
		Set @docindex = @docindex + 1
     		 INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END
      	FETCH NEXT FROM curs INTO @docsubname
	PRINT @docsubname
	IF @@FETCH_STATUS = 0
	BEGIN
		SET @newdocsub = (RTRIM(@newdocsub) + ', ' + RTRIM(@docsubname))
		PRINT @newdocsub
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex
	END
   END
CLOSE curs
DEALLOCATE curs
Select *  FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Delete FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spONCU_D70Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spONCU_D70Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

SELECT @DocIndex AS DocIndex
	, CONVERT(CHAR(10), NMR.CreatedOn, 101) AS Today
	, 'Dear ' + RTRIM(IMS.fnONCU_TitleCase(LTRIM(CASE WHEN RTRIM(RTRIM(NMR.FName) + ' ' + RTRIM(NMR.LName)) = '' THEN
		CASE WHEN CHARINDEX('/', NMR.OrganizationName) > 0 THEN
			RTRIM(RIGHT(RTRIM(NMR.OrganizationName), LEN(RTRIM(NMR.OrganizationName))-CHARINDEX('/', NMR.OrganizationName)) + ' ' + LEFT(RTRIM(NMR.OrganizationName), CHARINDEX('/', NMR.OrganizationName)-1))
		ELSE
			RTRIM(NMR.OrganizationName)
		END
	  ELSE
		RTRIM(RTRIM(NMR.FName) + ' ' + RTRIM(NMR.LName))
	  END))) + ',' AS DearName
FROM NewMemberRequest AS NMR
	LEFT OUTER JOIN NewMemberHome AS Home ON NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork AS Work ON NMR.TrackingNum = Work.TrackingNum
WHERE NMR.TrackingNum = @TrackingNum
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spONCU_D71Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spONCU_D71Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
--Declare @TrackingNum int
--DROP TABLE #docs
--DEALLOCATE curs
--Set @TrackingNum = 1477
Declare @docsubname char(100)
Declare @newdocsub char(100)
Declare @count int
Declare @docindex int
--CREATE TABLE #docs(docindex int identity Primary Key, docsubname char(100))
Declare curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT '' AS docsubname
	FROM NewMemberRequest AS NMR
	LEFT JOIN NewMemberSubAccount SA ON SA.TrackingNum = NMR.TrackingNum
	WHERE NMR.TrackingNum = @TrackingNum AND NMR.Processed = 999 AND NMR.Created = 'Y' AND SA.SubAccountType = 'X'
--IF @@ROWCOUNT = 0
OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @newdocsub = 'New Account Letter - Express' + @docsubname
IF @docsubname Is Null
BEGIN
	SET @newdocsub = 'New Account Letter - Express'
END
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count
	IF @count = 1
	BEGIN
		Set @docindex = @docindex + 1
     		 INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END
      	FETCH NEXT FROM curs INTO @docsubname
	PRINT @docsubname
	IF @@FETCH_STATUS = 0
	BEGIN
		SET @newdocsub = (RTRIM(@newdocsub) + ', ' + RTRIM(@docsubname))
		PRINT @newdocsub
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex
	END
   END
CLOSE curs
DEALLOCATE curs
Select *  FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Delete FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spONCU_D71Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spONCU_D71Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

SELECT @DocIndex AS DocIndex
	, CONVERT(CHAR(10), NMR.CreatedOn, 101) AS Today
	, 'Dear ' + RTRIM(IMS.fnONCU_TitleCase(LTRIM(CASE WHEN RTRIM(RTRIM(NMR.FName) + ' ' + RTRIM(NMR.LName)) = '' THEN
		CASE WHEN CHARINDEX('/', NMR.OrganizationName) > 0 THEN
			RTRIM(RIGHT(RTRIM(NMR.OrganizationName), LEN(RTRIM(NMR.OrganizationName))-CHARINDEX('/', NMR.OrganizationName)) + ' ' + LEFT(RTRIM(NMR.OrganizationName), CHARINDEX('/', NMR.OrganizationName)-1))
		ELSE
			RTRIM(NMR.OrganizationName)
		END
	  ELSE
		RTRIM(RTRIM(NMR.FName) + ' ' + RTRIM(NMR.LName))
	  END))) + ',' AS DearName
FROM NewMemberRequest AS NMR
	LEFT OUTER JOIN NewMemberHome AS Home ON NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork AS Work ON NMR.TrackingNum = Work.TrackingNum
WHERE NMR.TrackingNum = @TrackingNum
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spONCU_D72Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spONCU_D72Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
--Declare @TrackingNum int
--DROP TABLE #docs
--DEALLOCATE curs
--Set @TrackingNum = 1477
Declare @docsubname char(100)
Declare @newdocsub char(100)
Declare @count int
Declare @docindex int
--CREATE TABLE #docs(docindex int identity Primary Key, docsubname char(100))
Declare curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT '' AS docsubname
	FROM NewMemberRequest AS NMR
	LEFT JOIN NewMemberSubAccount SA ON SA.TrackingNum = NMR.TrackingNum
	WHERE NMR.TrackingNum = @TrackingNum AND NMR.Processed = 999 AND NMR.Created = 'Y' AND SA.SubAccountType = 'GCA-08'
--IF @@ROWCOUNT = 0
OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @newdocsub = 'New Account Letter - Green Checking' + @docsubname
IF @docsubname Is Null
BEGIN
	SET @newdocsub = 'New Account Letter - Green Checking'
END
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count
      	IF @count = 1
	BEGIN
		Set @docindex = @docindex + 1
     		 INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END
      	FETCH NEXT FROM curs INTO @docsubname
	PRINT @docsubname
	IF @@FETCH_STATUS = 0
	BEGIN
		SET @newdocsub = (RTRIM(@newdocsub) + ', ' + RTRIM(@docsubname))
		PRINT @newdocsub
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex
	END
   END
CLOSE curs
DEALLOCATE curs
Select *  FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Delete FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spONCU_D72Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spONCU_D72Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

SELECT @DocIndex AS DocIndex
	, CONVERT(CHAR(10), NMR.CreatedOn, 101) AS Today
	, 'Dear ' + RTRIM(IMS.fnONCU_TitleCase(LTRIM(CASE WHEN RTRIM(RTRIM(NMR.FName) + ' ' + RTRIM(NMR.LName)) = '' THEN
		CASE WHEN CHARINDEX('/', NMR.OrganizationName) > 0 THEN
			RTRIM(RIGHT(RTRIM(NMR.OrganizationName), LEN(RTRIM(NMR.OrganizationName))-CHARINDEX('/', NMR.OrganizationName)) + ' ' + LEFT(RTRIM(NMR.OrganizationName), CHARINDEX('/', NMR.OrganizationName)-1))
		ELSE
			RTRIM(NMR.OrganizationName)
		END
	  ELSE
		RTRIM(RTRIM(NMR.FName) + ' ' + RTRIM(NMR.LName))
	  END))) + ',' AS DearName
FROM NewMemberRequest AS NMR
	LEFT OUTER JOIN NewMemberHome AS Home ON NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork AS Work ON NMR.TrackingNum = Work.TrackingNum
WHERE NMR.TrackingNum = @TrackingNum
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spONCU_D73Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spONCU_D73Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
--Declare @TrackingNum int
--DROP TABLE #docs
--DEALLOCATE curs
--Set @TrackingNum = 1477
Declare @docsubname char(100)
Declare @newdocsub char(100)
Declare @count int
Declare @docindex int
--CREATE TABLE #docs(docindex int identity Primary Key, docsubname char(100))
Declare curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT '' AS docsubname
	FROM NewMemberRequest AS NMR
	LEFT JOIN NewMemberSubAccount SA ON SA.TrackingNum = NMR.TrackingNum
	WHERE NMR.TrackingNum = @TrackingNum AND NMR.Processed = 999 AND NMR.Created = 'Y' AND SA.SubAccountType = 'MCA-08'
--IF @@ROWCOUNT = 0
OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @newdocsub = 'New Account Letter - MyChecking' + @docsubname
IF @docsubname Is Null
BEGIN
	SET @newdocsub = 'New Account Letter - MyChecking'
END
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count
      	IF @count = 1
	BEGIN
		Set @docindex = @docindex + 1
     		 INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END
      	FETCH NEXT FROM curs INTO @docsubname
	PRINT @docsubname
	IF @@FETCH_STATUS = 0
	BEGIN
		SET @newdocsub = (RTRIM(@newdocsub) + ', ' + RTRIM(@docsubname))
		PRINT @newdocsub
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex
	END
   END
CLOSE curs
DEALLOCATE curs
Select *  FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Delete FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spONCU_D73Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spONCU_D73Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

SELECT @DocIndex AS DocIndex
	, CONVERT(CHAR(10), NMR.CreatedOn, 101) AS Today
	, 'Dear ' + RTRIM(IMS.fnONCU_TitleCase(LTRIM(CASE WHEN RTRIM(RTRIM(NMR.FName) + ' ' + RTRIM(NMR.LName)) = '' THEN
		CASE WHEN CHARINDEX('/', NMR.OrganizationName) > 0 THEN
			RTRIM(RIGHT(RTRIM(NMR.OrganizationName), LEN(RTRIM(NMR.OrganizationName))-CHARINDEX('/', NMR.OrganizationName)) + ' ' + LEFT(RTRIM(NMR.OrganizationName), CHARINDEX('/', NMR.OrganizationName)-1))
		ELSE
			RTRIM(NMR.OrganizationName)
		END
	  ELSE
		RTRIM(RTRIM(NMR.FName) + ' ' + RTRIM(NMR.LName))
	  END))) + ',' AS DearName
FROM NewMemberRequest AS NMR
	LEFT OUTER JOIN NewMemberHome AS Home ON NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork AS Work ON NMR.TrackingNum = Work.TrackingNum
WHERE NMR.TrackingNum = @TrackingNum
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spONCU_D74Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spONCU_D74Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
--Declare @TrackingNum int
--DROP TABLE #docs
--DEALLOCATE curs
--Set @TrackingNum = 1477
Declare @docsubname char(100)
Declare @newdocsub char(100)
Declare @count int
Declare @docindex int
--CREATE TABLE #docs(docindex int identity Primary Key, docsubname char(100))
Declare curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT '' AS docsubname
	FROM NewMemberRequest AS NMR
	LEFT JOIN NewMemberSubAccount SA ON SA.TrackingNum = NMR.TrackingNum
	WHERE NMR.TrackingNum = @TrackingNum AND NMR.Processed = 999 AND NMR.Created = 'Y' AND SA.SubAccountType = 'NSA-08'
--IF @@ROWCOUNT = 0
OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @newdocsub = 'New Account Letter - New Start Checking' + @docsubname
IF @docsubname Is Null
BEGIN
	SET @newdocsub = 'New Account Letter - New Start Checking'
END
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count
      	IF @count = 1
	BEGIN
		Set @docindex = @docindex + 1
     		 INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END
      	FETCH NEXT FROM curs INTO @docsubname
	PRINT @docsubname
	IF @@FETCH_STATUS = 0
	BEGIN
		SET @newdocsub = (RTRIM(@newdocsub) + ', ' + RTRIM(@docsubname))
		PRINT @newdocsub
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex
	END
   END
CLOSE curs
DEALLOCATE curs
Select *  FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Delete FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spONCU_D74Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spONCU_D74Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

SELECT @DocIndex AS DocIndex
	, CONVERT(CHAR(10), NMR.CreatedOn, 101) AS Today
	, 'Dear ' + RTRIM(IMS.fnONCU_TitleCase(LTRIM(CASE WHEN RTRIM(RTRIM(NMR.FName) + ' ' + RTRIM(NMR.LName)) = '' THEN
		CASE WHEN CHARINDEX('/', NMR.OrganizationName) > 0 THEN
			RTRIM(RIGHT(RTRIM(NMR.OrganizationName), LEN(RTRIM(NMR.OrganizationName))-CHARINDEX('/', NMR.OrganizationName)) + ' ' + LEFT(RTRIM(NMR.OrganizationName), CHARINDEX('/', NMR.OrganizationName)-1))
		ELSE
			RTRIM(NMR.OrganizationName)
		END
	  ELSE
		RTRIM(RTRIM(NMR.FName) + ' ' + RTRIM(NMR.LName))
	  END))) + ',' AS DearName
FROM NewMemberRequest AS NMR
	LEFT OUTER JOIN NewMemberHome AS Home ON NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork AS Work ON NMR.TrackingNum = Work.TrackingNum
WHERE NMR.TrackingNum = @TrackingNum
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spONCU_D75Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spONCU_D75Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
--Declare @TrackingNum int
--DROP TABLE #docs
--DEALLOCATE curs
--Set @TrackingNum = 1477
Declare @docsubname char(100)
Declare @newdocsub char(100)
Declare @count int
Declare @docindex int
--CREATE TABLE #docs(docindex int identity Primary Key, docsubname char(100))
Declare curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT '' AS docsubname
	FROM NewMemberRequest AS NMR
	LEFT JOIN NewMemberSubAccount SA ON SA.TrackingNum = NMR.TrackingNum
	WHERE NMR.TrackingNum = @TrackingNum AND NMR.Processed = 999 AND NMR.Created = 'Y' AND SA.SubAccountType = 'SDA-08'
--IF @@ROWCOUNT = 0
OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @newdocsub = 'New Account Letter - Regular Checking' + @docsubname
IF @docsubname Is Null
BEGIN
	SET @newdocsub = 'New Account Letter - Regular Checking'
END
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count
      	IF @count = 1
	BEGIN
		Set @docindex = @docindex + 1
     		 INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END
      	FETCH NEXT FROM curs INTO @docsubname
	PRINT @docsubname
	IF @@FETCH_STATUS = 0
	BEGIN
		SET @newdocsub = (RTRIM(@newdocsub) + ', ' + RTRIM(@docsubname))
		PRINT @newdocsub
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex
	END
   END
CLOSE curs
DEALLOCATE curs
Select *  FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Delete FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spONCU_D75Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spONCU_D75Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

SELECT @DocIndex AS DocIndex
	, CONVERT(CHAR(10), NMR.CreatedOn, 101) AS Today
	, 'Dear ' + RTRIM(IMS.fnONCU_TitleCase(LTRIM(CASE WHEN RTRIM(RTRIM(NMR.FName) + ' ' + RTRIM(NMR.LName)) = '' THEN
		CASE WHEN CHARINDEX('/', NMR.OrganizationName) > 0 THEN
			RTRIM(RIGHT(RTRIM(NMR.OrganizationName), LEN(RTRIM(NMR.OrganizationName))-CHARINDEX('/', NMR.OrganizationName)) + ' ' + LEFT(RTRIM(NMR.OrganizationName), CHARINDEX('/', NMR.OrganizationName)-1))
		ELSE
			RTRIM(NMR.OrganizationName)
		END
	  ELSE
		RTRIM(RTRIM(NMR.FName) + ' ' + RTRIM(NMR.LName))
	  END))) + ',' AS DearName
FROM NewMemberRequest AS NMR
	LEFT OUTER JOIN NewMemberHome AS Home ON NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork AS Work ON NMR.TrackingNum = Work.TrackingNum
WHERE NMR.TrackingNum = @TrackingNum
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spONCU_D76Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spONCU_D76Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
--Declare @TrackingNum int
--DROP TABLE #docs
--DEALLOCATE curs
--Set @TrackingNum = 1477
Declare @docsubname char(100)
Declare @newdocsub char(100)
Declare @count int
Declare @docindex int
DECLARE @Display CHAR(1)

--CREATE TABLE #docs(docindex int identity Primary Key, docsubname char(100))
Declare curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT SA.SubAccountType AS docsubname
	FROM NewMemberRequest AS NMR
	LEFT JOIN NewMemberSubAccount SA ON SA.TrackingNum = NMR.TrackingNum
	WHERE NMR.TrackingNum = @TrackingNum AND NMR.Processed = 999 AND NMR.Created = 'Y' AND NMR.Created = 'XXX'-- AND (SA.SubAccountType = 'PSA-01' OR SA.SubAccountType = 'MSA-01')
--IF @@ROWCOUNT = 0

SET @Display = 'N'
OPEN curs
FETCH NEXT FROM curs INTO @docsubname
PRINT @@FETCH_STATUS
	WHILE @@FETCH_STATUS = 0
	BEGIN
		IF RTRIM(@docsubname) = 'PSA-01' OR RTRIM(@docsubname) = 'MSA-01'
		BEGIN
			SET @Display = 'Y'
		END
		IF RTRIM(@docsubname) != 'PSA-01' AND RTRIM(@docsubname) != 'MSA-01'
		BEGIN
			SET @Display = 'N'
		END
		FETCH NEXT FROM curs INTO @docsubname
	END
CLOSE curs
DEALLOCATE curs

SET @count = 0
SET @docindex = 0
SET @newdocsub = 'New Account Letter - Savings Account'
SET @docsubname = ''

IF @Display = 'Y'
BEGIN
	SET @count = @count + 1
	PRINT @count
	IF @count = 1
	BEGIN
		SET @docindex = @docindex + 1
		INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END
	PRINT @docsubname

--	SET @newdocsub = (RTRIM(@newdocsub) + ', ' + RTRIM(@docsubname))
--	PRINT @newdocsub
--	UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex
END

Select *  FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Delete FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spONCU_D76Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spONCU_D76Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

SELECT @DocIndex AS DocIndex
	, CONVERT(CHAR(10), NMR.CreatedOn, 101) AS Today
	, 'Dear ' + RTRIM(IMS.fnONCU_TitleCase(LTRIM(CASE WHEN RTRIM(RTRIM(NMR.FName) + ' ' + RTRIM(NMR.LName)) = '' THEN
		CASE WHEN CHARINDEX('/', NMR.OrganizationName) > 0 THEN
			RTRIM(RIGHT(RTRIM(NMR.OrganizationName), LEN(RTRIM(NMR.OrganizationName))-CHARINDEX('/', NMR.OrganizationName)) + ' ' + LEFT(RTRIM(NMR.OrganizationName), CHARINDEX('/', NMR.OrganizationName)-1))
		ELSE
			RTRIM(NMR.OrganizationName)
		END
	  ELSE
		RTRIM(RTRIM(NMR.FName) + ' ' + RTRIM(NMR.LName))
	  END))) + ',' AS DearName
FROM NewMemberRequest AS NMR
	LEFT OUTER JOIN NewMemberHome AS Home ON NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork AS Work ON NMR.TrackingNum = Work.TrackingNum
WHERE NMR.TrackingNum = @TrackingNum
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spONCU_DG1Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spONCU_DG1Enable] @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

Return 1


GO
/****** Object:  StoredProcedure [IMS].[spONCU_DG1Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spONCU_DG1Fields] @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

Select 'Applications' AS GroupName From NewMemberRequest where trackingnum = @TrackingNum


GO
/****** Object:  StoredProcedure [IMS].[spONCU_DG2Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spONCU_DG2Enable] @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

Return 1


GO
/****** Object:  StoredProcedure [IMS].[spONCU_DG2Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spONCU_DG2Fields] @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

Select 'Forms' AS GroupName From NewMemberRequest where trackingnum = @TrackingNum


GO
/****** Object:  StoredProcedure [IMS].[spONCU_DG3Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spONCU_DG3Enable] @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

Return 1


GO
/****** Object:  StoredProcedure [IMS].[spONCU_DG3Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spONCU_DG3Fields] @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

Select 'Disclosures' AS GroupName From NewMemberRequest where trackingnum = @TrackingNum


GO
/****** Object:  StoredProcedure [IMS].[spONCU_DG5Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spONCU_DG5Enable] @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

Return 1


GO
/****** Object:  StoredProcedure [IMS].[spONCU_DG5Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spONCU_DG5Fields] @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

Select 'Letters' AS GroupName From NewMemberRequest where trackingnum = @TrackingNum


GO
/****** Object:  StoredProcedure [IMS].[spONCU_DP1Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spONCU_DP1Enable] @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

Return 1



GO
/****** Object:  StoredProcedure [IMS].[spONCU_DP1Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spONCU_DP1Fields] @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

SELECT NMR.TrackingNum AS TrackingNumber
	, 'Tracking #: ' + RTRIM(NMR.TrackingNum) AS TrackingNum
	, AltAddress.Address1 AS MailingAddress
	, NMR.CurrBranch As Branch
	, Branches.Description AS BranchName
	, CONVERT(char(10), GetDate(), 101) As TodayDate
	, DATENAME(MM, GetDate()) + RIGHT(CONVERT(char(12), GetDate(), 107), 9) As TodayDateFull
	, CONVERT(char(10), NMR.CreatedOn, 101) As CreatedOn
	, RTRIM(NMR.Account) As Account
	, 'Account #: ' + RTRIM(NMR.Account) As AccountNum
--	, CONVERT(char(2), Home.ResidenceYears, 101) + ' yrs  ' + CONVERT(char(2), Home.ResidenceMonths, 101) + ' mos' AS HowLong
	, UPPER(RTRIM(NMR.FName)) AS FName
	, UPPER(RTRIM(NMR.LName)) AS LName
	, UPPER(RTRIM(NMR.MInitial)) AS MInitial
	, UPPER(CASE NMR.AccountClass WHEN 'P' THEN UPPER(RTRIM(NMR.LName) + ', ' + RTRIM(RTRIM(NMR.FName) + ' ' + RTRIM(NMR.MInitial))) ELSE RTRIM(NMR.OrganizationName) END) AS RevFullName
	, UPPER(CASE NMR.AccountClass WHEN 'P' THEN RTRIM(RTRIM(NMR.FName) + ' ' + RTRIM(NMR.LName) + ' ' + NMR.MECHTag) ELSE RTRIM(NMR.OrganizationName) END) AS FullName
	, UPPER(CASE NMR.AccountClass WHEN 'P' THEN 'Dear ' + RTRIM(RTRIM(NMR.FName) + ' ' + RTRIM(NMR.LName) + ' ' + NMR.MECHTag) + ':' ELSE 'Dear ' + RTRIM(NMR.OrganizationName) + ':' END) AS DearName
	, CASE NMR.AccountClass
		WHEN 'O' THEN Work.Areacode + '-' + LEFT(Work.Phone, 3) + '-' + RIGHT(RTRIM(Work.Phone), 4)
		ELSE Home.Areacode + '-' + LEFT(Home.Phone, 3) + '-' + RIGHT(RTRIM(Home.Phone), 4)
	  END AS HPhoneFull
	, Home.CellPhoneAC + '-' + LEFT(Home.CellPhone, 3) + '-' + RIGHT(RTRIM(Home.CellPhone), 4) AS CPhoneFull
	, CASE NMR.UseTodayForDOB WHEN 'Y' THEN CONVERT(char(10), NMR.CreatedOn, 101) ELSE CONVERT(char(10), NMR.DOB, 101) END AS DOB
	, CASE NMR.AccountClass WHEN 'P' THEN Left(NMR.SSN, 3) + '-' + LEFT(RIGHT(NMR.SSN, 6), 2) + '-' + RIGHT(NMR.SSN, 4) ELSE LEFT(NMR.SSN, 2) + '-' + RIGHT(NMR.SSN, 7) END AS SSN
	, CASE WHEN NMR.SSN != '' THEN 'X' END AS YesSSN
	, UPPER(NMR.MaidenName) AS MaidenName
	, NMR.Password AS Password
	, UPPER(NMR.CreatedBy) AS Seller
	, UPPER(NMR.Department) AS Department
	, CASE WHEN NMR.Created = 'F' Or NMR.Created = 'H' Or NMR.Created = 'I' THEN '' ELSE 'X' END AS YesNewAccount
	, CASE WHEN NMR.Created = 'F' Or NMR.Created = 'H' Or NMR.Created = 'I' THEN 'X' END AS YesChangeAccount
--	, CASE WHEN NMR.Created = 'F' Or NMR.Created = 'H' Or NMR.Created = 'I' THEN NMR.Account END AS ChangeAccount
	, UPPER(CASE WHEN AltAddress.Address1 <> ''
		THEN
			RTRIM(AltAddress.address1 + CASE AltAddress.address2 WHEN '' THEN ''ELSE', ' END + AltAddress.address2 + CASE AltAddress.address3 WHEN '' THEN ''ELSE', ' END + AltAddress.address3)
		ELSE
			CASE NMR.AccountClass
				WHEN 'O' THEN RTRIM(RTRIM(Work.Address1) + CASE ISNULL(Work.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Work.Address2) END + CASE ISNULL(Work.Address3, '') WHEN '' THEN ' ' ELSE ', ' + RTRIM(Work.Address3) END)
				ELSE RTRIM(RTRIM(Home.Address1) + CASE ISNULL(Home.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Home.Address2) END + CASE ISNULL(Home.Address3, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Home.Address3) END)
			END
		END) AS Address
	, UPPER(RTRIM(Home.Address1)) AS Address1
	, UPPER(CASE RTRIM(ISNULL(Home.ApartmentNumber, '')) WHEN '' THEN RTRIM(Home.Address2) ELSE RTRIM(Home.ApartmentNumber) END) AS Apartment
	, UPPER(CASE NMR.AccountClass
		WHEN 'O' THEN RTRIM(RTRIM(Work.Address1) + CASE ISNULL(Work.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Work.Address2) END + CASE ISNULL(Work.Address3, '') WHEN '' THEN ' ' ELSE ', ' + RTRIM(Work.Address3) END) + ', ' + RTRIM(Work.City) + ', ' + Work.State + ' ' + CASE LEN(Work.Zip) WHEN 9 THEN LEFT(Work.Zip, 5) + '-' + Right(Work.Zip, 4) ELSE Work.Zip END
		ELSE RTRIM(RTRIM(Home.Address1) + CASE ISNULL(Home.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Home.Address2) END + CASE ISNULL(Home.Address3, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Home.Address3) END) + ', ' + RTRIM(Home.City) + ', ' + Home.State + ' ' + CASE LEN(Home.Zip) WHEN 9 THEN LEFT(Home.Zip, 5) + '-' + Right(Home.Zip, 4) ELSE Home.Zip END
	  END) AS FullAddress
	, UPPER(CASE NMR.AccountClass
		WHEN 'O' THEN RTRIM(Work.city) + ', ' + Work.state + ' ' + CASE LEN(Work.Zip) WHEN 9 THEN LEFT(Work.zip, 5) + '-' + Right(Work.Zip, 4) ELSE Work.Zip END
		ELSE RTRIM(Home.city) + ', ' + Home.state + ' ' + CASE LEN(Home.Zip) WHEN 9 THEN LEFT(Home.zip, 5) + '-' + Right(Home.Zip, 4) ELSE Home.Zip END
	  END) AS CityStateZip
	, UPPER(CASE NMR.AccountClass
		WHEN 'O' THEN Work.City
		ELSE Home.City
	  END) AS City
	, UPPER(CASE NMR.AccountClass
		WHEN 'O' THEN Work.State
		ELSE Home.State
	  END) AS State
	, UPPER(CASE NMR.AccountClass
		WHEN 'O' THEN CASE LEN(Work.Zip) WHEN 9 THEN LEFT(Work.zip, 5) + '-' + Right(Work.Zip, 4) ELSE Work.Zip END
		ELSE CASE LEN(Home.Zip) WHEN 9 THEN LEFT(Home.zip, 5) + '-' + Right(Home.Zip, 4) ELSE Home.Zip END
	  END) AS Zip		
	, UPPER(RTRIM(NMR.Email1)) AS Email
	, CASE NMR.AccountClass
		WHEN 'O' THEN Work.AreaCode
		ELSE Home.AreaCode
	  END AS AC
	, CASE NMR.AccountClass
		WHEN 'O' THEN LEFT(Work.Phone, 3) + '-' + RIGHT(RTRIM(Work.Phone), 4)
		ELSE LEFT(Home.Phone, 3) + '-' + RIGHT(RTRIM(Home.Phone), 4)
	  END AS Phone
	, UPPER(CASE NMR.AccountClass WHEN 'P' THEN Work.EmployerName ELSE '' END) AS WorkName
	, UPPER(CASE NMR.AccountClass WHEN 'P' THEN Work.EmployerName ELSE '' END) AS Employer
	, UPPER(CASE NMR.AccountClass WHEN 'P' THEN Work.EmployerName ELSE '' END) AS EmployerName
	, UPPER(CASE NMR.AccountClass WHEN 'P' THEN RTRIM(Work.address1 + CASE Work.address2 WHEN '' THEN ''ELSE', ' END + Work.address2 + CASE Work.address3 WHEN '' THEN ''ELSE', ' END + Work.address3) ELSE '' END) AS WorkAddress
	, UPPER(CASE NMR.AccountClass WHEN 'P' THEN Work.City ELSE '' END) AS WorkCity
	, UPPER(CASE NMR.AccountClass WHEN 'P' THEN Work.State ELSE '' END) AS WorkState
	, UPPER(CASE NMR.AccountClass WHEN 'P' THEN CASE LEN(Work.Zip) WHEN 9 THEN LEFT(Work.zip, 5) + '-' + RIGHT(Work.Zip, 4) ELSE Work.Zip END ELSE '' END) AS WorkZip
	, Work.AreaCode AS WorkAC, LEFT(Work.Phone, 3) + '-' + RIGHT(RTRIM(Work.Phone), 4)  AS WorkPhone
	, CASE NMR.AccountClass
		WHEN 'O' THEN Home.Areacode + '-' + LEFT(Home.Phone, 3) + '-' + RIGHT(RTRIM(Home.Phone), 4)
		ELSE Work.Areacode + '-' + LEFT(Work.Phone, 3) + '-' + RIGHT(RTRIM(Work.Phone), 4)
	  END AS WPhoneFull
	, UPPER(RTRIM(Work.JobTitle)) AS Position
	, UPPER(RTRIM(Work.JobTitle)) AS Occupation
	, Work.ProfessionYears As WorkNumYears
	, UPPER(RTRIM(Work.EmployerName) + ' ' + RTRIM(Work.address1 + CASE Work.address2 WHEN '' THEN ''ELSE', ' END + Work.address2 + CASE Work.address3 WHEN '' THEN ''ELSE', ' END + Work.address3) + ', ' + RTRIM(Work.City) + ', ' + RTRIM(Work.State) + ' ' + CASE LEN(Work.Zip) WHEN 9 THEN LEFT(Work.zip, 5) + '-' + Right(Work.Zip, 4) ELSE Work.Zip END) AS WorkNameAddress
	, Work.HireDate
	,   CASE Work.IncomeFrequency
	     	WHEN 'W'  THEN 'Week'
		WHEN 'B' THEN 'Bi-Week'
		WHEN 'M' THEN 'Month'
		WHEN 'S' THEN 'Semi-Month'
		WHEN 'Y' THEN 'Year'
	      END AS IncomeFrequency
	,   CASE Work.IncomeFrequency
	     	WHEN 'W'  THEN (Work.GrossIncome * 52)/100
		WHEN 'B' THEN (Work.GrossIncome * 26)/100
		WHEN 'M' THEN (Work.GrossIncome * 12)/100
		WHEN 'S' THEN (Work.GrossIncome * 24)/100
		WHEN 'Y' THEN (Work.GrossIncome)/100
	      END AS GrossIncome
	, Home.ResidenceYears AS NumYears
	, CASE NMR.AccountClass
		WHEN 'O' THEN 'Yes'
		ELSE CASE WHEN NMR.Citizenship = 'US' Or NMR.Citizenship = 'RA' THEN 'Yes' END
	  END AS YesNoUSCitizen
	, CASE NMR.AccountClass
		WHEN 'O' THEN 'X'
		ELSE CASE WHEN NMR.Citizenship = 'US' Or NMR.Citizenship = 'RA' THEN 'X' END
	  END AS YesUSCitizen
	, CASE NMR.AccountClass
		WHEN 'O' THEN ''
		ELSE CASE WHEN NMR.Citizenship != 'US' And NMR.Citizenship != 'RA' THEN 'X' END
	  END AS NoUSCitizen
	, CASE WHEN NMR.BackupWithholding = 'N' THEN 'X' END AS BackWith
	, 'X' AS YesEligible00
	, CASE WHEN NMR.Qualification3 = 'Location' THEN NMR.Department END AS County
	, RTRIM(NMR.LName) + '/' + RTRIM(RTRIM(NMR.FName) + ' ' + NMR.MInitial) AS SlashName
	, '(' + RTRIM(LTRIM(CAST(NMR.CurrBranch AS VARCHAR(2)))) + ' - ' + RTRIM(Branches.[Description]) + ')' AS SellerBranch
	, 'CITY AND COUNTY CREDIT UNION' AS HCCUName
	, '144 11TH STREET EAST' AS HCCUAddress
	, 'ST. PAUL, MN  44101-2380' AS HCCUCityStateZip
	, '651-225-2700 or 1-800-223-2801' AS HCCUPhone
	, 'www.cccu.com' AS HCCUURL
	, CASE WHEN NMR.SSN != '' THEN Left(NMR.SSN, 3) + '-' + LEFT(RIGHT(NMR.SSN, 6), 2) + '-' + RIGHT(NMR.SSN, 4) END AS 'IMM-CustomerNumber'
FROM NewMemberRequest As NMR
	--INNER JOIN udt_AccountTypes AS AType On NMR.AccountType = AType.TypeCode
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN NewMemberAddress As AltAddress On NMR.TrackingNum = AltAddress.TrackingNum
	LEFT OUTER JOIN Branches On NMR.CurrBranch = Branches.BranchCode
	LEFT OUTER JOIN Departments ON NMR.Department = Departments.Department
WHERE NMR.TrackingNum = @TrackingNum
GO
/****** Object:  StoredProcedure [IMS].[spONCU_Eligibility_Select]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_Eligibility_Select
CREATE PROCEDURE [IMS].[spONCU_Eligibility_Select]
	@ZipCode varchar(5),
	@CensusTract varchar(10)
AS

IF IsNull(@CensusTract, '') = '' AND @ZipCode <> ''
BEGIN
	SELECT Department
	FROM udt_EligibilityByZip
	WHERE ZipCode = @ZipCode
END
GO
/****** Object:  StoredProcedure [IMS].[spONCU_FedReservePendingTransaction_Select]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Jonathan Eagar
-- Create date: 8/25/2011
-- Description:	Returns all FedReserve Pending Transactions
-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_FedReservePendingTransaction_Select
-- =============================================
CREATE PROCEDURE [IMS].[spONCU_FedReservePendingTransaction_Select] 
	-- Add the parameters for the stored procedure here
	@NMRAccountNumber bigint
AS
BEGIN	
	SET @NMRAccountNumber = ISNULL(@NMRAccountNumber, 0)
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	-- Insert statements for procedure here
	
	DECLARE @TransactionSummary TABLE
	(		
		FundingBankID INT,
		TransferAmountTotal DECIMAL(18,2)		
	)
		
	IF @NMRAccountNumber = 0  
	BEGIN
	
	INSERT INTO @TransactionSummary(FundingBankID, TransferAmountTotal)	
	SELECT
		   FB.ID as FundingBankID,			  
		   SUM(FT.Amount) as TransferAmountTotal			   
	FROM IMS.NMRFundingBank FB INNER JOIN IMS.NMRFundingTransaction FT ON FB.ID = FT.FundingBankID						
	WHERE FT.DateTimeLastTransaction IS NULL AND FT.FundingType = 'B'
	GROUP BY FB.ID	
	
	SELECT  FRPT.* FROM
	( 
		(
		SELECT F.ID as FundingID,
			   F.AccountNumber as NMRAccountNumber,
			   FB.TrackingNum as NMRTrackingNumber,
			   NMR.LName + ', ' + NMR.FName as NMRMemberName,
			   FB.ID as FundingBankID,
			   0 as FundingTransactionID,
			   FB.RoutingNumber as FundingBankRouting,
			   FB.AccountNumberEncrypted as FundingBankAccountNumberEncrypted,
			   FB.AccountNumberLast4 as FundingBankAccountAccountLast4,
			   FB.BankName as FundingBankName,
			   FB.AccountType as FundingBankAccountType,
			   FB.Amount1 as VerificationAmount1,
			   FB.Amount2 as VerificationAmount2,
			   0 as TransferAmount,
			   0 as TransferAmountTotal,			   	
			   0 as TargetSubAccountSuffix,
			   0 as TargetSubAccountSeq,
			   FB.DateTimeCreated as DateTimeCreated
		FROM IMS.NMRFunding F INNER JOIN IMS.NMRFundingBank FB ON F.ID = FB.FundingID
								INNER JOIN IMS.NewMemberRequest NMR ON FB.TrackingNum = NMR.TrackingNum
		WHERE FB.VerificationStatus = 'P'	
		)
		UNION ALL
		(	
		SELECT F.ID as FundingID,
			   F.AccountNumber as NMRAccountNumber,
			   FB.TrackingNum as NMRTrackingNumber,			   
			   NMR.LName + ', ' + NMR.FName as NMRMemberName,
			   FB.ID as FundingBankID,
			   FT.ID as FundingTransactionID,
			   FB.RoutingNumber as FundingBankRouting,
			   FB.AccountNumberEncrypted as FundingBankAccountNumberEncrypted,
			   FB.AccountNumberLast4 as FundingBankAccountAccountLast4,
			   FB.BankName as FundingBankName,
			   FB.AccountType as FundingBankAccountType,
				0 as VerificationAmount1,
				0 as VerificationAmount2,
			   FT.Amount as TransferAmount,
			   TS.TransferAmountTotal as TransferAmountTotal,			
			   FT.TargetSubAccountSuffix as TargetSubAccountSuffix,
			   FT.TargetSubAccountSeq as TargetSubAccountSeq,
			   FT.DateTimeCreated as DateTimeCreated 
		FROM IMS.NMRFunding F INNER JOIN IMS.NMRFundingBank FB ON F.ID = FB.FundingID
								INNER JOIN IMS.NMRFundingTransaction FT ON FB.ID = FT.FundingBankID
									INNER JOIN IMS.NewMemberRequest NMR ON FB.TrackingNum = NMR.TrackingNum
										INNER JOIN @TransactionSummary TS ON FB.ID = TS.FundingBankID
		WHERE FT.DateTimeLastTransaction IS NULL AND FT.FundingType = 'B'
		)
	)  FRPT ORDER BY FRPT.NMRTrackingNumber, FRPT.FundingID, FRPT.FundingBankID, FRPT.FundingTransactionID	
	END	
	ELSE
	BEGIN
	
	INSERT INTO @TransactionSummary(FundingBankID, TransferAmountTotal)	
	SELECT	   		   
		   FB.ID as FundingBankID,			  
		   SUM(FT.Amount) as TransferAmountTotal			   
	FROM IMS.NMRFunding F INNER JOIN IMS.NMRFundingBank FB ON F.ID = FB.FundingID 
							INNER JOIN IMS.NMRFundingTransaction FT ON FB.ID = FT.FundingBankID						
	WHERE FT.DateTimeLastTransaction IS NULL AND 
		FT.FundingType = 'B' AND
		F.AccountNumber = @NMRAccountNumber	 
	GROUP BY FB.ID	
	  
	SELECT  FRPT.* FROM
	(   
		(
		SELECT F.ID as FundingID,
			   F.AccountNumber as NMRAccountNumber,
			   FB.TrackingNum as NMRTrackingNumber,
			   NMR.LName + ', ' + NMR.FName as NMRMemberName,
			   FB.ID as FundingBankID,
			   0 as FundingTransactionID,
			   FB.RoutingNumber as FundingBankRouting,
			   FB.AccountNumberEncrypted as FundingBankAccountNumberEncrypted,
			   FB.AccountNumberLast4 as FundingBankAccountAccountLast4,
			   FB.BankName as FundingBankName,
			   FB.AccountType as FundingBankAccountType,
			   FB.Amount1 as VerificationAmount1,
			   FB.Amount2 as VerificationAmount2,
			   0 as TransferAmount,
			   0 as TransferAmountTotal,
			   0 as TargetSubAccountSuffix,
			   0 as TargetSubAccountSeq,
			   FB.DateTimeCreated as DateTimeCreated
		FROM IMS.NMRFunding F INNER JOIN IMS.NMRFundingBank FB ON F.ID = FB.FundingID
								INNER JOIN IMS.NewMemberRequest NMR ON FB.TrackingNum = NMR.TrackingNum
		WHERE	FB.VerificationStatus = 'P' AND 
				F.AccountNumber = @NMRAccountNumber	
		)	
		UNION ALL
		(		
		SELECT F.ID as FundingID,
			   F.AccountNumber as NMRAccountNumber,
			   FB.TrackingNum as NMRTrackingNumber,
			   NMR.LName + ', ' + NMR.FName as NMRMemberName,
			   FB.ID as FundingBankID,
			   FT.ID as FundingTransactionID,
			   FB.RoutingNumber as FundingBankRouting,
			   FB.AccountNumberEncrypted as FundingBankAccountNumberEncrypted,
			   FB.AccountNumberLast4 as FundingBankAccountAccountLast4,
			   FB.BankName as FundingBankName,
			   FB.AccountType as FundingBankAccountType,
				0 as VerificationAmount1,
				0 as VerificationAmount2,
			   FT.Amount as TransferAmount,
			   TS.TransferAmountTotal as TransferAmountTotal,
			   FT.TargetSubAccountSuffix as TargetSubAccountSuffix,
			   FT.TargetSubAccountSeq as TargetSubAccountSeq,
			   FT.DateTimeCreated as DateTimeCreated
		FROM IMS.NMRFunding F 
				INNER JOIN IMS.NMRFundingBank FB ON F.ID = FB.FundingID
					INNER JOIN IMS.NMRFundingTransaction FT ON FB.ID = FT.FundingBankID
						INNER JOIN IMS.NewMemberRequest NMR ON FB.TrackingNum = NMR.TrackingNum
							INNER JOIN @TransactionSummary TS ON FB.ID = TS.FundingBankID
		WHERE	FT.DateTimeLastTransaction IS NULL AND 
				FT.FundingType = 'B' AND 
				F.AccountNumber = @NMRAccountNumber
		)
	)  FRPT	ORDER BY FRPT.NMRTrackingNumber, FRPT.FundingID, FRPT.FundingBankID, FRPT.FundingTransactionID
	END		
END

GO
/****** Object:  StoredProcedure [IMS].[spONCU_ILAApplicationSearch_Select]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_ILAApplicationSearch_Select
CREATE Procedure [IMS].[spONCU_ILAApplicationSearch_Select]
	@TrackingNum varchar(9),
	@SSN varchar(9),
	@Account varchar(9),
	@AppNumber varchar(9),
	@ApplyDate varchar(10)
AS

DECLARE @SQL varchar(1000)
SET @SQL = 'SELECT AI.*, A.UserSessionXML FROM ILA_ApplicationInfo AI INNER JOIN ILA_Application A ON A.TrackingNum = AI.TrackingNum WHERE 1=1'
IF @TrackingNum <> '*'
BEGIN
	SET @SQL = @SQL + ' AND AI.TrackingNum = ''' + @TrackingNum + ''''
END
IF @SSN <> '*'
BEGIN
	SET @SQL = @SQL + ' AND AI.PrimarySSN = ''' + @SSN + ''''
END
IF @Account <> '*'
BEGIN
	SET @SQL = @SQL + ' AND AI.Account = ''' + @Account + ''''
END
IF @AppNumber <> '*'
BEGIN
	SET @SQL = @SQL + ' AND AI.AppNumber = ''' + @AppNumber + ''''
END

EXEC(@SQL)
GO
/****** Object:  StoredProcedure [IMS].[spONCU_OAOReport_ApplicationStatusReport]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_OAOReport_ApplicationStatusReport
CREATE Procedure [IMS].[spONCU_OAOReport_ApplicationStatusReport]
	@StartDate datetime,
	@StopDate datetime
AS

SELECT
	NMR.TrackingNum
	, UPPER(RTRIM(LEFT(NMR.FName, 1)) + ' ' + RTRIM(NMR.LName)) AS MemberName
	, NMR.ApplyDate AS [Date_Time]
	, NMR.CurrBranch AS Branch
	, CASE
		WHEN NMR.Processed = '1' THEN 'In-Process'
		WHEN NMR.Processed = '999' THEN 'Created'
		ELSE 'Denied'
		END AS Status
	, CASE
		WHEN (SELECT COUNT(*) FROM NMRFundingBank AS NMRFB WHERE NMRFB.TrackingNum = NMR.TrackingNum AND NMRFB.VerificationStatus <> 'X' AND NMRFB.VerificationStatus <> 'E') > 0 THEN 'ACH'
		WHEN (SELECT COUNT(*) FROM NMRFundingCard AS NMRFC WHERE NMRFC.TrackingNum = NMR.TrackingNum) > 0 THEN 'Credit Card'
		WHEN (SELECT COUNT(*) FROM NMRFundingTransaction AS NMRFT WHERE NMRFT.TrackingNum = NMR.TrackingNum AND NMRFT.SourceSubAccountSeq <> '') > 0 THEN 'Transfer'
		WHEN (SELECT FundingType FROM NMRFundingTransaction AS NMRFT WHERE NMRFT.TrackingNum = NMR.TrackingNum) = NULL THEN 'Skipped'
		ELSE 'None'
		END AS PaymentMethod
	, (SELECT SUM(Amount) FROM NMRFundingTransaction AS NMRFT WHERE NMRFT.TrackingNum = NMR.TrackingNum GROUP BY NMRFT.TrackingNum) AS InitialAmountFunded
	, NMR.Account AS AccountNumber
FROM IMS.NewMemberRequest NMR
WHERE
	NMR.Processed > 0
	AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> ''
	AND (NMR.ApplyDate >= @StartDate AND NMR.ApplyDate <= @StopDate)
GO
/****** Object:  StoredProcedure [IMS].[spONCU_OAOReport_FundingDetailReport]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_OAOReport_FundingDetailReport
CREATE Procedure [IMS].[spONCU_OAOReport_FundingDetailReport]
	@StartDate datetime,
	@StopDate datetime
AS

SELECT Bank, Card, Existing, Skipped FROM
(
	(SELECT COUNT(DISTINCT NMRFT.TrackingNum) AS Bank
	FROM IMS.NMRFundingTransaction NMRFT
	LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	INNER JOIN IMS.NMRFundingBank NMRFB ON NMRFB.ID = NMRFT.FundingBankID
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND NMRFT.FundingBankID <> '' AND NMR.Processed = 999 AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate) AND (NMRFB.VerificationStatus <> 'E') AND (NMRFB.VerificationStatus <> 'X')) a
		FULL OUTER JOIN
	(SELECT COUNT(DISTINCT NMRFT.TrackingNum) AS Card
	FROM IMS.NMRFundingTransaction NMRFT
	LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND NMRFT.FundingCardID <> '' AND NMR.Processed = 999 AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate)) b ON 1=1
		FULL OUTER JOIN
	(SELECT COUNT(DISTINCT NMRFT.TrackingNum) AS Existing
	FROM IMS.NMRFundingTransaction NMRFT
	LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND NMRFT.SourceSubAccountSeq <> '' AND NMR.Processed = 999 AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate)) c ON 1=1
		FULL OUTER JOIN
	(SELECT COUNT(DISTINCT NMR.TrackingNum) AS Skipped
	FROM IMS.NMRFundingTransaction NMRFT
	FULL OUTER JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND (NMR.Processed = 999 AND ISNULL(NMRFT.TrackingNum, 0) = 0) AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate)) d ON 1=1
)

UNION ALL

SELECT Bank, Card, Existing, Skipped FROM
(
	(SELECT COUNT(DISTINCT NMRFT.TrackingNum) AS Bank
	FROM IMS.NMRFundingTransaction NMRFT
	LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	INNER JOIN IMS.NMRFundingBank NMRFB ON NMRFB.ID = NMRFT.FundingBankID
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND NMRFT.FundingBankID <> '' AND NMR.Processed = 998 AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate) AND (NMRFB.VerificationStatus <> 'E') AND (NMRFB.VerificationStatus <> 'X')) a
		FULL OUTER JOIN
	(SELECT COUNT(DISTINCT NMRFT.TrackingNum) AS Card
	FROM IMS.NMRFundingTransaction NMRFT
	LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND NMRFT.FundingCardID <> '' AND NMR.Processed = 998 AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate)) b ON 1=1
		FULL OUTER JOIN
	(SELECT COUNT(DISTINCT NMRFT.TrackingNum) AS Existing
	FROM IMS.NMRFundingTransaction NMRFT
	LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND NMRFT.SourceSubAccountSeq <> '' AND NMR.Processed = 998 AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate)) c ON 1=1
		FULL OUTER JOIN
	(SELECT COUNT(DISTINCT NMR.TrackingNum) AS Skipped
	FROM IMS.NMRFundingTransaction NMRFT
	FULL OUTER JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND (NMR.Processed = 998 AND ISNULL(NMRFT.TrackingNum, 0) = 0) AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate)) d ON 1=1
)
GO
/****** Object:  StoredProcedure [IMS].[spONCU_ReviewQueue_SelectAll]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Jon Eagar
-- Create date: 7/08/2011
-- Description:	Lists the active NMR records for the Queue Review
-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_ReviewQueue_SelectAll
-- =============================================
CREATE PROCEDURE [IMS].[spONCU_ReviewQueue_SelectAll] 
	-- Add the parameters for the stored procedure here
	@StartDate DATETIME = NULL,
	@EndDate DATETIME = NULL,
	@StatusCode VARCHAR(2) = NULL
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.

	SET NOCOUNT ON;
	
	DECLARE @Hierarchy INT
	DECLARE @StatusID INT

	IF @StartDate IS NOT NULL AND @StartDate <> ''
	BEGIN
		SET @StartDate = CONVERT(DATETIME,(CONVERT(VARCHAR(10), @StartDate, 102)))  --Set Time to beginning of Day
		SET @EndDate = CAST( CONVERT(CHAR(10), @EndDate, 101) + ' 11:59 PM' AS DATETIME) --Set Time to end of day
	END
	
	SET @StatusCode = NULLIF(@StatusCode,'')

	DECLARE @ReviewQueue TABLE
	(
		ID INT IDENTITY(1,1) PRIMARY KEY CLUSTERED,
		TrackingNum INT,	
		Name VARCHAR(250),
		EmployerName VARCHAR(250),
		Account INT,
		StatusName VARCHAR(250),
		StatusID INT,
		FundingComplete VARCHAR(10), 
		ApplyDate DATETIME,
		Teller VARCHAR(50),
		LastPage VARCHAR(250),
		TNExpireDate DATETIME
	)

	IF (@StatusCode IS NOT NULL)
	BEGIN
		SELECT @Hierarchy=RQC.Hierarchy, @StatusID=RQC.ID FROM IMS.ReviewQueueConfig RQC WHERE RQC.StatusCode = @StatusCode
	END

	IF (@Hierarchy > 0 OR @StatusCode IS NULL)
	BEGIN
		--IDV DECLINE
		INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, TNExpireDate)
		SELECT	DISTINCT NMR.TrackingNum, 
				LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
				RTRIM(LTRIM(NMRW.EmployerName)) as EmployerName,			 
				NMR.Account, 
				RQC.StatusName,
				RQC.ID, 
				NMR.FundingComplete, 
				NMR.ApplyDate,
				(SELECT TOP 1 xuser.Initials FROM [IMS].[TellerAssignments] ta Inner Join [IMS].[xUserTable] xuser On ta.[AssignedToId] = xuser.ID WHERE ta.TrackingNumber = NMR.TrackingNum AND NullIf(xuser.Initials, '') IS NOT NULL ORDER BY ta.DateUpdated DESC) AS Seller,
				(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
				NMR.TNExpireDate
		FROM IMS.NewMemberRequest NMR 
				INNER JOIN 
				IMS.NewMemberManualApproval MA 
					ON NMR.TrackingNum = MA.TrackingNum 
						INNER JOIN IMS.ReviewQueueConfig RQC ON RQC.StatusCode = 'ID'
							LEFT JOIN IMS.NewMemberWork NMRW
								ON NMR.TrackingNum = NMRW.TrackingNum
		WHERE NMR.Processed NOT IN (-1, 998, 999) AND (MA.Category = 'ID' AND MA.ApprovalStatus = '') AND (@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate) AND DATALENGTH(NMR.UserSessionXML) > 0  AND NMR.UserSessionXML IS NOT NULL
		
		IF (@Hierarchy > 1 OR @StatusCode IS NULL)
		BEGIN
			--Miscellaneous Decline
			INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, TNExpireDate)
			SELECT	DISTINCT NMR.TrackingNum, 
					LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
					RTRIM(LTRIM(NMRW.EmployerName)) as EmployerName,				 
					NMR.Account, 
					RQC.StatusName,
					RQC.ID, 
					NMR.FundingComplete, 
					NMR.ApplyDate,
					(SELECT TOP 1 xuser.Initials FROM [IMS].[TellerAssignments] ta Inner Join [IMS].[xUserTable] xuser On ta.[AssignedToId] = xuser.ID WHERE ta.TrackingNumber = NMR.TrackingNum AND NullIf(xuser.Initials, '') IS NOT NULL ORDER BY ta.DateUpdated DESC) AS Seller,
					(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
					NMR.TNExpireDate
			FROM IMS.NewMemberRequest NMR 
					INNER JOIN 
					IMS.NewMemberManualApproval MA 
						ON NMR.TrackingNum = MA.TrackingNum AND MA.JointSequence = 0
							INNER JOIN IMS.ReviewQueueConfig RQC ON RQC.StatusCode = 'MD' AND RQC.ReasonCode = LTRIM(RTRIM(MA.ReasonCode))
								LEFT JOIN IMS.NewMemberWork NMRW
									ON NMR.TrackingNum = NMRW.TrackingNum					
			WHERE NOT EXISTS(SELECT TrackingNum FROM @ReviewQueue RQ Where RQ.TrackingNum = NMR.TrackingNum) AND
				  NMR.Processed NOT IN (-1, 998, 999) AND 
				  (MA.ApprovalStatus = '') AND (@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate)AND DATALENGTH(NMR.UserSessionXML) > 0  AND NMR.UserSessionXML IS NOT NULL

			IF (@Hierarchy > 2 OR @StatusCode IS NULL)
			BEGIN
				--Joint Decline
				INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, TNExpireDate)
				SELECT	DISTINCT NMR.TrackingNum, 
						LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
						RTRIM(LTRIM(NMRW.EmployerName)) as EmployerName,				 
						NMR.Account, 
						RQC.StatusName,
						RQC.ID, 
						NMR.FundingComplete, 
						NMR.ApplyDate,
						(SELECT TOP 1 xuser.Initials FROM [IMS].[TellerAssignments] ta Inner Join [IMS].[xUserTable] xuser On ta.[AssignedToId] = xuser.ID WHERE ta.TrackingNumber = NMR.TrackingNum AND NullIf(xuser.Initials, '') IS NOT NULL ORDER BY ta.DateUpdated DESC) AS Seller,
						(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
						NMR.TNExpireDate
				FROM IMS.NewMemberRequest NMR 
						INNER JOIN 
						IMS.NewMemberManualApproval MA 
							ON NMR.TrackingNum = MA.TrackingNum AND MA.JointSequence > 0
								INNER JOIN IMS.ReviewQueueConfig RQC ON RQC.StatusCode = 'JD' AND RQC.ReasonCode = LTRIM(RTRIM(MA.ReasonCode))
									LEFT JOIN IMS.NewMemberWork NMRW
										ON NMR.TrackingNum = NMRW.TrackingNum					
				WHERE NOT EXISTS(SELECT TrackingNum FROM @ReviewQueue RQ Where RQ.TrackingNum = NMR.TrackingNum) AND
					  NMR.Processed NOT IN (-1, 998, 999) AND 
					  (MA.ApprovalStatus = '') AND (@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate)AND DATALENGTH(NMR.UserSessionXML) > 0  AND NMR.UserSessionXML IS NOT NULL

				IF (@Hierarchy > 3 OR @StatusCode IS NULL)
				BEGIN
					--Manual Review
					INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, TNExpireDate)
					SELECT	DISTINCT NMR.TrackingNum, 
							LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
							RTRIM(LTRIM(NMRW.EmployerName)) as EmployerName,				 
							NMR.Account, 
							RQC.StatusName,
							RQC.ID, 
							NMR.FundingComplete, 
							NMR.ApplyDate,
							(SELECT TOP 1 xuser.Initials FROM [IMS].[TellerAssignments] ta Inner Join [IMS].[xUserTable] xuser On ta.[AssignedToId] = xuser.ID WHERE ta.TrackingNumber = NMR.TrackingNum AND NullIf(xuser.Initials, '') IS NOT NULL ORDER BY ta.DateUpdated DESC) AS Seller,
							(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
							NMR.TNExpireDate
					FROM IMS.NewMemberRequest NMR 
							INNER JOIN 
							IMS.NewMemberManualApproval MA 
								ON NMR.TrackingNum = MA.TrackingNum 
									INNER JOIN IMS.ReviewQueueConfig RQC ON RQC.StatusCode = 'MR' AND RQC.ReasonCode = LTRIM(RTRIM(MA.ReasonCode))
										LEFT JOIN IMS.NewMemberWork NMRW
											ON NMR.TrackingNum = NMRW.TrackingNum		
					WHERE NOT EXISTS(SELECT TrackingNum FROM @ReviewQueue RQ Where RQ.TrackingNum = NMR.TrackingNum) AND
						  NMR.Processed NOT IN (-1, 998, 999) AND 
						  (MA.ApprovalStatus = '') AND (@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate) AND DATALENGTH(NMR.UserSessionXML) > 0 AND NMR.UserSessionXML IS NOT NULL

					IF (@Hierarchy > 4 OR @StatusCode IS NULL)
					BEGIN
						--Need Decision/Pending
						INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, TNExpireDate)
						SELECT	DISTINCT NMR.TrackingNum, 
								LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
								RTRIM(LTRIM(NMRW.EmployerName)) as EmployerName,
								NMR.Account, 
								RQC.StatusName,
								RQC.ID, 
								NMR.FundingComplete, 
								NMR.ApplyDate,
								(SELECT TOP 1 xuser.Initials FROM [IMS].[TellerAssignments] ta Inner Join [IMS].[xUserTable] xuser On ta.[AssignedToId] = xuser.ID WHERE ta.TrackingNumber = NMR.TrackingNum AND NullIf(xuser.Initials, '') IS NOT NULL ORDER BY ta.DateUpdated DESC) AS Seller,
								(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
								NMR.TNExpireDate
						FROM IMS.NewMemberRequest NMR 
								INNER JOIN IMS.NewMemberSubAccount SA 
									ON NMR.TrackingNum = SA.TrackingNum
										INNER JOIN IMS.ReviewQueueConfig RQC ON RQC.StatusCode = 'DP'
											LEFT JOIN IMS.NewMemberWork NMRW
												ON NMR.TrackingNum = NMRW.TrackingNum
													LEFT JOIN IMS.NewMemberManualApproval MA 
														ON NMR.TrackingNum = MA.TrackingNum
						WHERE NOT EXISTS(SELECT TrackingNum FROM @ReviewQueue RQ Where RQ.TrackingNum = NMR.TrackingNum) AND
							  NMR.Processed NOT IN (-1, 998, 999) AND 
							  ((SA.Approval <> 'A' AND SA.ApprovedBy = '') OR (MA.ApprovalStatus = '')) AND 
							  (@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate) AND DATALENGTH(NMR.UserSessionXML) > 0 AND NMR.UserSessionXML IS NOT NULL

						IF (@Hierarchy > 5 OR @StatusCode IS NULL)
						BEGIN
							--In Progress
							INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, TNExpireDate)
							SELECT	DISTINCT NMR.TrackingNum, 
									LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
									RTRIM(LTRIM(NMRW.EmployerName)) as EmployerName,			 
									NMR.Account, 
									RQC.StatusName,
									RQC.ID, 
									NMR.FundingComplete, 
									NMR.ApplyDate,
									(SELECT TOP 1 xuser.Initials FROM [IMS].[TellerAssignments] ta Inner Join [IMS].[xUserTable] xuser On ta.[AssignedToId] = xuser.ID WHERE ta.TrackingNumber = NMR.TrackingNum AND NullIf(xuser.Initials, '') IS NOT NULL ORDER BY ta.DateUpdated DESC) AS Seller,
									(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
									NMR.TNExpireDate
							FROM IMS.NewMemberRequest NMR			
									INNER JOIN IMS.ReviewQueueConfig RQC 
										ON RQC.StatusCode = 'IP'
											LEFT JOIN IMS.NewMemberWork NMRW
												ON NMR.TrackingNum = NMRW.TrackingNum
							WHERE NOT EXISTS(SELECT TrackingNum FROM @ReviewQueue RQ WHERE RQ.TrackingNum = NMR.TrackingNum) AND
								  NMR.Processed = 1 AND 
								  (SELECT COUNT(TrackingNum) FROM IMS.NewMemberManualApproval MA WHERE MA.TrackingNum = NMR.TrackingNum AND MA.ApprovalStatus = '') = 0 AND
								  (SELECT COUNT(TrackingNum) FROM IMS.NewMemberSubAccount SA WHERE SA.TrackingNum = NMR.TrackingNum) = (SELECT COUNT(TrackingNum) FROM IMS.NewMemberSubAccount SA WHERE SA.TrackingNum = NMR.TrackingNum AND (SA.Approval = 'A' OR SA.ApprovedBy <> '')) AND	 
								  (@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate) AND DATALENGTH(NMR.UserSessionXML) > 0 AND NMR.UserSessionXML IS NOT NULL

							IF (@Hierarchy > 6 OR @StatusCode IS NULL)
							BEGIN
								--Not Funded
								INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, TNExpireDate)
								SELECT	DISTINCT NMR.TrackingNum, 
										LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
										RTRIM(LTRIM(NMRW.EmployerName)) as EmployerName,			 
										NMR.Account, 
										RQC.StatusName,
										RQC.ID, 
										NMR.FundingComplete, 
										NMR.ApplyDate,
										(SELECT TOP 1 xuser.Initials FROM [IMS].[TellerAssignments] ta Inner Join [IMS].[xUserTable] xuser On ta.[AssignedToId] = xuser.ID WHERE ta.TrackingNumber = NMR.TrackingNum AND NullIf(xuser.Initials, '') IS NOT NULL ORDER BY ta.DateUpdated DESC) AS Seller,
										(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
										NMR.TNExpireDate
								FROM IMS.NewMemberRequest NMR
									INNER JOIN IMS.ReviewQueueConfig RQC 
										ON RQC.StatusCode = 'NF'
											LEFT JOIN IMS.NewMemberWork NMRW
												ON NMR.TrackingNum = NMRW.TrackingNum
								WHERE NOT EXISTS(SELECT TrackingNum FROM @ReviewQueue RQ WHERE RQ.TrackingNum = NMR.TrackingNum) AND
									  NMR.Processed = 999 AND 
									  IsNull(FundingComplete, 'N') <> 'Y' AND
									  (@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate) AND DATALENGTH(NMR.UserSessionXML) > 0 AND NMR.UserSessionXML IS NOT NULL

								IF (@Hierarchy > 7 OR @StatusCode IS NULL)
								BEGIN
									--Awaiting Loan Approval
									INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, TNExpireDate)
									SELECT	DISTINCT NMR.TrackingNum, 
											LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
											RTRIM(LTRIM(NMRW.EmployerName)) as EmployerName,			 
											NMR.Account, 
											RQC.StatusName,
											RQC.ID, 
											NMR.FundingComplete, 
											NMR.ApplyDate,
											(SELECT TOP 1 xuser.Initials FROM [IMS].[TellerAssignments] ta Inner Join [IMS].[xUserTable] xuser On ta.[AssignedToId] = xuser.ID WHERE ta.TrackingNumber = NMR.TrackingNum AND NullIf(xuser.Initials, '') IS NOT NULL ORDER BY ta.DateUpdated DESC) AS Seller,
											(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
											NMR.TNExpireDate
									FROM IMS.NewMemberRequest NMR
										INNER JOIN IMS.ReviewQueueConfig RQC 
											ON RQC.StatusCode = 'AL'
												LEFT JOIN IMS.NewMemberWork NMRW
													ON NMR.TrackingNum = NMRW.TrackingNum
									WHERE NOT EXISTS(SELECT TrackingNum FROM @ReviewQueue RQ WHERE RQ.TrackingNum = NMR.TrackingNum) AND
										  NMR.Processed = 999 AND 
										  IsNull(FundingComplete, 'N') = 'Y' AND
										  (@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate) AND DATALENGTH(NMR.UserSessionXML) > 0 AND NMR.UserSessionXML IS NOT NULL

								END
							END
						END
					END	  
				END
			END
		END
		SELECT 
		TrackingNum as TrackingNumber,		 
		Name,
		EmployerName,
		Account,
		StatusName,
		CASE WHEN FundingComplete <> 'Y' THEN 'N' ELSE 'Y' END as FundingComplete,
		ApplyDate, 
		Teller, 
		LastPage, 
		TNExpireDate,
		(
			SELECT COUNT(*)
			FROM IMS.SecureMailThread SMT
			LEFT JOIN IMS.SecureMailAttachment SMA ON SMA.ThreadId = SMT.ThreadId
			WHERE SMT.TrackingNum = RQ.TrackingNum AND SMA.Status = 'U'
		) AS AttachU,
		(
			SELECT COUNT(*)
			FROM IMS.SecureMailThread SMT
			LEFT JOIN IMS.SecureMailAttachment SMA ON SMA.ThreadId = SMT.ThreadId
			WHERE SMT.TrackingNum = RQ.TrackingNum AND SMA.Status = 'V'
		) AS AttachV,
		(
			SELECT COUNT(*)
			FROM IMS.SecureMailThread SMT
			LEFT JOIN IMS.SecureMailAttachment SMA ON SMA.ThreadId = SMT.ThreadId
			WHERE SMT.TrackingNum = RQ.TrackingNum AND SMA.Status = 'Q'
		) AS AttachQU,
		(
			SELECT COUNT(*)
			FROM IMS.SecureMailThread SMT
			LEFT JOIN IMS.SecureMailAttachment SMA ON SMA.ThreadId = SMT.ThreadId
			WHERE SMT.TrackingNum = RQ.TrackingNum AND SMA.Status = 'QV'
		) AS AttachQV
		FROM @ReviewQueue RQ 
		WHERE RQ.StatusID = @StatusID OR @StatusID IS NULL ORDER BY TrackingNum
	END
END
GO
/****** Object:  StoredProcedure [IMS].[spONCU_SignOnOAO]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.SignOnOAO 
CREATE Procedure [IMS].[spONCU_SignOnOAO]
@TrackingNum int,
@Password varchar(24),
@SSN varchar(9),
@DOB datetime
AS
BEGIN
	SELECT
		n.TrackingNum, 
		ISNULL(CAST(n.Account AS VARCHAR(50)),'') AS Account, 
		n.UserSessionXML, 
		n.AccountType, 
		n.Created, 
		n.Processed, 
		n.TNExpireDate, 
		e.BadLoginAttempts
	FROM IMS.NewMemberRequest n
	JOIN IMS.NewMemberRequestExtra e ON n.TrackingNum = e.TrackingNum
	WHERE 
		n.TrackingNum = @TrackingNum 
		AND (
			(
				(n.Password = @Password COLLATE SQL_Latin1_General_CP1_CS_AS) 
				OR (
					n.SSN = @SSN 
					AND n.DOB = @DOB
				)
			) 
			AND n.Processed <> '998' 
			OR (@Password = 'MoDESTaFF')
		)
-- NOTE: The "COLLATE SQL_Latin1_General_CP1_CS_AS" above makes the password search case sensitive.
END
GO
/****** Object:  StoredProcedure [IMS].[spONCU_SyncCarts]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_SyncCarts

CREATE PROCEDURE [IMS].[spONCU_SyncCarts]
@TrackingNum int,
@SyncMode varchar(1)
AS

IF @SyncMode = 'S' OR @SyncMode = 'B' OR @SyncMode = 'Y'
BEGIN
	--Delete from cart where subaccount record no longer exists
	DELETE FROM IMS.NewMemberShoppingCart
	WHERE TrackingNum = @TrackingNum AND SubAccountID IS NOT NULL AND
		SubAccountID NOT IN (SELECT ID FROM IMS.NewMemberSubAccount
					WHERE TrackingNum = @TrackingNum)
END

IF @SyncMode = 'C' OR @SyncMode = 'B' OR @SyncMode = 'Y'
BEGIN
	--Delete from subaccounts where cart record no longer exists
	DELETE FROM IMS.NewMemberSubAccount
	WHERE TrackingNum = @TrackingNum AND ShoppingCartID IS NOT NULL AND
		ShoppingCartID NOT IN (SELECT ID FROM IMS.NewMemberShoppingCart
					WHERE TrackingNum = @TrackingNum)
END

IF @SyncMode = 'S' OR @SyncMode = 'B' OR @SyncMode = 'Y'
BEGIN
	--Update cart items with changes in the subaccount records
	UPDATE IMS.NewMemberShoppingCart
	SET RequestedAmount = (SELECT Amount FROM IMS.NewMemberSubAccount
				WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberShoppingCart.SubAccountID),
		InsuranceAmount1 = NULL,
		InsuranceAmount2 = NULL
	WHERE TrackingNum = @TrackingNum AND
		SubAccountID IN (SELECT ID FROM IMS.NewMemberSubAccount WHERE TrackingNum = @TrackingNum) AND
		IsNull((SELECT LineOfCredit FROM IMS.udt_LSubAccounts WHERE UniqueID = IMS.NewMemberShoppingCart.ProductID), 'N') = 'N' AND
		(SELECT Amount FROM IMS.NewMemberSubAccount WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberShoppingCart.SubAccountID) <> IMS.NewMemberShoppingCart.RequestedAmount + IsNull(IMS.NewMemberShoppingCart.InsuranceAmount1, 0) + IsNull(IMS.NewMemberShoppingCart.InsuranceAmount2, 0)

	UPDATE IMS.NewMemberShoppingCart
	SET RequestedAmount = (SELECT CreditLimit FROM IMS.NewMemberSubAccount
				WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberShoppingCart.SubAccountID),
		InsuranceAmount1 = NULL,
		InsuranceAmount2 = NULL
	WHERE TrackingNum = @TrackingNum AND
		SubAccountID IN (SELECT ID FROM IMS.NewMemberSubAccount WHERE TrackingNum = @TrackingNum) AND
		(SELECT LineOfCredit FROM IMS.udt_LSubAccounts WHERE UniqueID = IMS.NewMemberShoppingCart.ProductID) = 'Y' AND
		(SELECT CreditLimit FROM IMS.NewMemberSubAccount WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberShoppingCart.SubAccountID) <> IMS.NewMemberShoppingCart.RequestedAmount + IsNull(IMS.NewMemberShoppingCart.InsuranceAmount1, 0) + IsNull(IMS.NewMemberShoppingCart.InsuranceAmount2, 0)

	UPDATE IMS.NewMemberShoppingCart
	SET Term = (SELECT Term FROM IMS.NewMemberSubAccount
				WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberShoppingCart.SubAccountID)
	WHERE TrackingNum = @TrackingNum AND
		SubAccountID IN (SELECT ID FROM IMS.NewMemberSubAccount WHERE TrackingNum = @TrackingNum)

	--Create cart items for new subaccount records
	INSERT INTO IMS.NewMemberShoppingCart
	(ProductID, ProductName, YesNoMaybe, SLType, Approved, TrackingNum, MasterCategoryID, CategoryID,
	Exclude, CreatedBy, CreatedOn, Created, Fulfill, LOSProductID, LOSID,
	ApprovedAmount, RequestedAmount, Requires, LoanType, LoanSubType, Term, InsCode, ClosedFlag, LossFlag, SubAccountID)
	SELECT STP.ProductID, STP.ProductDesc, 'YES', STP.SLType, 'Y', @TrackingNum AS TrackingNum, STP.MasterCategoryID, STP.CategoryID,
		Prod.Exclude, SA.CreatedBy, SA.CreatedOn, SA.Created, STP.Fulfill, STP.LOSProductID, SA.LOSID,
		CASE WHEN Prod.LineOfCredit = 'Y' THEN SA.CreditLimit
		     ELSE SA.Amount
		END AS ApprovedAmount,
		CASE WHEN Prod.LineOfCredit = 'Y' THEN SA.CreditLimit
		     ELSE SA.Amount
		END AS RequestedAmount,
		STP.Requires, STP.LoanType, STP.LoanSubType, SA.Term, SA.InsCode, SA.ClosedFlag, SA.LossFlag, SA.ID AS SubAccountID
	FROM IMS.udt_SalesToolProducts STP INNER JOIN
		IMS.NewMemberSubAccount SA ON SA.SubAccountType = STP.ProductID INNER JOIN
		IMS.NewMemberRequest NMR ON SA.TrackingNum = NMR.TrackingNum INNER JOIN
		IMS.udt_AllSubAccounts Prod ON STP.ProductID = Prod.UniqueID AND ',' + RTrim(Prod.AccountTypes) + ',' LIKE '%,' + RTrim(NMR.AccountType) + ',%'
	WHERE SA.TrackingNum = @TrackingNum AND SA.SubAccountType NOT IN (SELECT ProductID FROM IMS.NewMemberShoppingCart WHERE TrackingNum = @TrackingNum)
	
	--Delete products that require products that are no longer here
	DELETE FROM IMS.NewMemberShoppingCart
	WHERE TrackingNum = @TrackingNum AND NullIf(Requires, '') IS NOT NULL AND
		(SELECT Count(SC2.ID) FROM IMS.NewMemberShoppingCart SC2 INNER JOIN
			(SELECT DISTINCT
			        SUBSTRING(l.List, v.Number+1, CHARINDEX(',', l.List, v.Number+1) -v.Number-1) AS Requires
			   FROM Master.dbo.spt_Values v
			  CROSS JOIN
			        (SELECT ',' + RTRIM(REPLACE(Requires, ', ', ',')) + ',' AS List
				FROM IMS.NewMemberShoppingCart
				WHERE TrackingNum = @TrackingNum AND ProductID = IMS.NewMemberShoppingCart.ProductID) l
			  WHERE v.Type = 'P'
			    AND v.Number BETWEEN 1 AND LEN(l.List)-1
			    AND SUBSTRING(l.List, v.Number, 1)=',') FN ON SC2.ProductID = FN.Requires
			WHERE TrackingNum = @TrackingNum AND SC2.ProductID <> IMS.NewMemberShoppingCart.ProductID) = 0
END

IF @SyncMode = 'C' OR @SyncMode = 'B' OR @SyncMode = 'Y'
BEGIN
	--Update subaccounts with changes in the cart records
	UPDATE IMS.NewMemberSubAccount
	SET Amount = (SELECT RequestedAmount + IsNull(InsuranceAmount1, 0) + IsNull(InsuranceAmount2, 0) FROM IMS.NewMemberShoppingCart
				WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberSubAccount.ShoppingCartID)
	WHERE TrackingNum = @TrackingNum AND
		ShoppingCartID IN (SELECT ID FROM IMS.NewMemberShoppingCart WHERE TrackingNum = @TrackingNum) AND
		IsNull((SELECT LineOfCredit FROM IMS.udt_LSubAccounts WHERE UniqueID = IMS.NewMemberSubAccount.SubAccountType), 'N') = 'N' AND
		(SELECT RequestedAmount + IsNull(InsuranceAmount1, 0) + IsNull(InsuranceAmount2, 0) FROM IMS.NewMemberShoppingCart WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberSubAccount.ShoppingCartID) <> IMS.NewMemberSubAccount.Amount

	UPDATE IMS.NewMemberSubAccount
	SET CreditLimit = (SELECT RequestedAmount + IsNull(InsuranceAmount1, 0) + IsNull(InsuranceAmount2, 0) FROM IMS.NewMemberShoppingCart
				WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberSubAccount.ShoppingCartID)
	WHERE TrackingNum = @TrackingNum AND
		ShoppingCartID IN (SELECT ID FROM IMS.NewMemberShoppingCart WHERE TrackingNum = @TrackingNum) AND
		(SELECT LineOfCredit FROM IMS.udt_LSubAccounts WHERE UniqueID = IMS.NewMemberSubAccount.SubAccountType) = 'Y' AND
		(SELECT RequestedAmount + IsNull(InsuranceAmount1, 0) + IsNull(InsuranceAmount2, 0) FROM IMS.NewMemberShoppingCart WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberSubAccount.ShoppingCartID) <> IMS.NewMemberSubAccount.CreditLimit

	UPDATE IMS.NewMemberSubAccount
	SET Term = (SELECT Term FROM IMS.NewMemberShoppingCart
				WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberSubAccount.ShoppingCartID)
	WHERE TrackingNum = @TrackingNum AND
		ShoppingCartID IN (SELECT ID FROM IMS.NewMemberShoppingCart WHERE TrackingNum = @TrackingNum)

	--Create subaccount records for new cart items
	INSERT INTO IMS.NewMemberSubAccount
	(TrackingNum, Sequence, DescAbrv, SubAccountType, Description, ACC, CollateralCode, SLType, Amount,
	Approval, Created, CreatedBy, CreatedOn, ProductType,
	CreditLimit, StartSuffix, StopSuffix, APR, CashAdvanceAPR, SkipCode, Coupons, Term, Method,
	Frequency, InsCode, DisclosureCode, ReviewDate, MaturityDate, Officer, CurrBranch, StatementOrder, MaturityDisp, 
	DividendDisp, LineofCredit, PaymentPercent, AllowPlastic1, AllowPlastic2, AllowPlastic3, AllowPlastic4, 
	CreateHost, HostCommand, ServiceClass, TaxCode, JointTaxCode, W8TaxCode, KTransferLink, LoanDiscounts, 
	MICRBegin, MICREnd, MICRFormat, PromptMICR, Purpose, FundingOrder, VRLIndex, VRLMargin, 
	VRLCode, VRLFreq, LOSProductID, LOSID, LossFlag, ClosedFlag, ShoppingCartID, Action, Payment)
	SELECT @TrackingNum AS TrackingNum, (SELECT Count(ID) FROM IMS.NewMemberShoppingCart SC2 WHERE TrackingNum = @TrackingNum AND SC2.Approved = 'Y' AND 
		SC2.ProductID NOT IN (SELECT SubAccountType FROM IMS.NewMemberSubAccount SA2 WHERE TrackingNum = @TrackingNum) AND SC2.ID <= SC.ID) + 
		(SELECT IsNull(Max(Sequence), 0) FROM IMS.NewMemberSubAccount SA3 WHERE TrackingNum = @TrackingNum) AS Sequence,
	Prod.DescAbrv, Prod.UniqueID, Prod.Description, Prod.ACC, Prod.CollateralCode, Prod.SLType,
	CASE WHEN Prod.LineOfCredit = 'Y' THEN 0
	     ELSE SC.RequestedAmount + IsNull(SC.InsuranceAmount1, 0) + IsNull(SC.InsuranceAmount2, 0)
	END AS Amount, NMR.Approval, SC.Created, SC.CreatedBy, SC.CreatedOn, Prod.ProductType,
	CASE WHEN Prod.LineOfCredit = 'Y' THEN SC.RequestedAmount
	     ELSE 0
	END AS CreditLimit, Prod.StartSuffix, Prod.StopSuffix, Prod.APR, Prod.CashAdvanceAPR, Prod.SkipCode, Prod.Coupons, Prod.Term, Prod.Method,
	Prod.Frequency, Prod.InsCode, Prod.DisclosureCode, Prod.ReviewDate, Prod.MaturityDate, Prod.Officer, Prod.CurrBranch, Prod.StatementOrder, Prod.MaturityDisp, 
	Prod.DividendDisp, Prod.LineofCredit, Prod.PaymentPercent, Prod.AllowPlastic1, Prod.AllowPlastic2, Prod.AllowPlastic3, Prod.AllowPlastic4, 
	Prod.CreateHost, Prod.HostCommand, Prod.ServiceClass, Prod.TaxCode,Prod.JointTaxCode, Prod.W8TaxCode, Prod.KTransferLink, Prod.LoanDiscounts, 
	Prod.MICRBegin, Prod.MICREnd, Prod.MICRFormat, Prod.PromptMICR, Prod.Purpose, Prod.FundingOrder, Prod.VRLIndex, Prod.VRLMargin, 
	Prod.VRLCode, Prod.VRLFreq, SC.LOSProductID, SC.LOSID, SC.LossFlag, SC.ClosedFlag, SC.ID AS ShoppingCartID, Prod.Action, 0
	FROM IMS.NewMemberShoppingCart SC INNER JOIN
		IMS.NewMemberRequest NMR ON SC.TrackingNum = NMR.TrackingNum INNER JOIN
		IMS.udt_AllSubAccounts Prod ON SC.ProductID = Prod.UniqueID AND ',' + RTrim(Prod.AccountTypes) + ',' LIKE '%,' + RTrim(NMR.AccountType) + ',%'
	WHERE SC.TrackingNum = @TrackingNum AND SC.Approved = 'Y' AND SC.ProductID NOT IN (SELECT SubAccountType FROM IMS.NewMemberSubAccount WHERE TrackingNum = @TrackingNum)
	ORDER BY SC.ID
	
	--Delete products that require products that are no longer here
	DELETE NewMemberSubAccount FROM IMS.NewMemberSubAccount SA
	WHERE TrackingNum = @TrackingNum AND
		(SELECT NullIf(Requires, '') FROM IMS.udt_AllSubAccounts WHERE UniqueID = SA.SubAccountType) IS NOT NULL AND
		(SELECT Count(SA2.ID) FROM IMS.NewMemberSubAccount SA2 INNER JOIN
			(SELECT DISTINCT
			        SUBSTRING(l.List, v.Number+1, CHARINDEX(',', l.List, v.Number+1) -v.Number-1) AS Requires
			   FROM Master.dbo.spt_Values v
			  CROSS JOIN
			        (SELECT ',' + RTRIM(REPLACE(Requires, ', ', ',')) + ',' AS List
				FROM IMS.udt_AllSubAccounts
				WHERE UniqueID = SA.SubAccountType) l
			  WHERE v.Type = 'P'
			    AND v.Number BETWEEN 1 AND LEN(l.List)-1
			    AND SUBSTRING(l.List, v.Number, 1)=',') FN ON SA2.SubAccountType = FN.Requires
			WHERE TrackingNum = @TrackingNum AND SA2.SubAccountType <> SA.SubAccountType) = 0

	--Delete subaccounts that came from shopping cart items that are no longer approved
	DELETE FROM IMS.NewMemberSubAccount
	WHERE TrackingNum = @TrackingNum AND ((ID IN (SELECT SubAccountID
		FROM IMS.NewMemberShoppingCart
		WHERE TrackingNum = @TrackingNum AND SubAccountID IS NOT NULL AND
			Approved = 'N')) OR (ShoppingCartID IS NOT NULL AND 
		ShoppingCartID IN (SELECT ID
		FROM IMS.NewMemberShoppingCart
		WHERE TrackingNum = @TrackingNum AND Approved = 'N')))

	UPDATE IMS.NewMemberShoppingCart
	SET SubAccountID = NULL
	WHERE TrackingNum = @TrackingNum AND Approved = 'N'

	--Delete plastic cards for subaccounts that no longer exist
	DELETE FROM IMS.NewMemberPlasticCard
	WHERE TrackingNum = @TrackingNum AND Sequence IN (SELECT PlasticCardSequence
		FROM IMS.NewMemberSubAccountLink
		WHERE TrackingNum = @TrackingNum AND SubSequence NOT IN (SELECT Sequence
			FROM IMS.NewMemberSubAccount
			WHERE TrackingNum = @TrackingNum))

	DELETE FROM IMS.NewMemberSubAccountLink
	WHERE TrackingNum = @TrackingNum AND SubSequence NOT IN (SELECT Sequence
		FROM IMS.NewMemberSubAccount
		WHERE TrackingNum = @TrackingNum)

	--Delete flags for subaccounts that no longer exist
	DELETE FROM IMS.NewMemberFlag
	WHERE TrackingNum = @TrackingNum AND IsNull(SubAccountSequence, 0) > 0 AND
		SubAccountSequence NOT IN (SELECT Sequence
		FROM IMS.NewMemberSubAccount
		WHERE TrackingNum = @TrackingNum)

	--Delete joint owner links for subaccounts that no longer exist
	DELETE FROM IMS.NewMemberJointLink
	WHERE TrackingNum = @TrackingNum AND SubAccountSequence NOT IN (SELECT Sequence
		FROM IMS.NewMemberSubAccount
		WHERE TrackingNum = @TrackingNum)

	--Delete overdraft links for subaccount that no longer exist
	DELETE FROM IMS.NewMemberOverdraftLink
	WHERE TrackingNum = @TrackingNum AND ((TargetSubAccount > 0 AND
		TargetSubAccount NOT IN (SELECT Sequence
		FROM IMS.NewMemberSubAccount
		WHERE TrackingNum = @TrackingNum)) OR (SourceSubAccount > 0 AND
		SourceSubAccount NOT IN (SELECT Sequence
		FROM IMS.NewMemberSubAccount
		WHERE TrackingNum = @TrackingNum)))
END

--Synchronize IDs
UPDATE IMS.NewMemberSubAccount
SET ShoppingCartID = (SELECT ID FROM IMS.NewMemberShoppingCart
			WHERE TrackingNum = @TrackingNum AND SubAccountID = IMS.NewMemberSubAccount.ID)
WHERE TrackingNum = @TrackingNum AND (SELECT ID FROM IMS.NewMemberShoppingCart
			WHERE TrackingNum = @TrackingNum AND SubAccountID = IMS.NewMemberSubAccount.ID) IS NOT NULL

UPDATE IMS.NewMemberShoppingCart
SET SubAccountID = (SELECT ID FROM IMS.NewMemberSubAccount
			WHERE TrackingNum = @TrackingNum AND ShoppingCartID = IMS.NewMemberShoppingCart.ID)
WHERE TrackingNum = @TrackingNum AND (SELECT ID FROM IMS.NewMemberSubAccount
			WHERE TrackingNum = @TrackingNum AND ShoppingCartID = IMS.NewMemberShoppingCart.ID) IS NOT NULL
GO
/****** Object:  StoredProcedure [IMS].[spONCU_UnreconciledFunding_Select]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		Jonathan Eagar
-- Create date: 5/08/2009
-- Description:	Returns all unreconciled transactions
-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_UnreconciledFunding_Select
-- =============================================
CREATE PROCEDURE [IMS].[spONCU_UnreconciledFunding_Select] 
	-- Add the parameters for the stored procedure here
	@AccountNumber bigint
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
    -- Insert statements for procedure here
     -- Insert statements for procedure here
    IF ISNULL(@AccountNumber, 0) = 0  
    BEGIN
		SELECT	FS.AccountNumber, 
				FS.FundingTransactionID, 
				FS.TrackingNum, 
				FS.GatewayPaymentID, 
				FS.GatewayPaymentStatus, 
				FS.FundingAccountID, 
				FS.FundingType, 
				FS.TargetSubAccountSeq, 
				FS.TargetSubAccountSuffix, 
				FS.TransferAmount, 
				FS.DateTimeCreated, 
				FS.DateTimeLastTransaction,
				FS.MemberName,
				FS.SourceBankName,
				FS.SourceBankRouting,
				FS.SourceAccountLast4,
				FS.SourceCardType
		FROM
		(
			SELECT	VF.AccountNumber, 
					VF.FundingTransactionID , 
					VF.TrackingNum, 
					VF.GatewayPaymentID, 
					PS.PaymentStatus as GatewayPaymentStatus, 
					VF.FundingAccountID, 
					VF.FundingType, 
					VF.TargetSubAccountSeq, 
					VF.TargetSubAccountSuffix, 
					VF.TransferAmount, 
					VF.DateTimeCreated, 
					VF.DateTimeLastTransaction,
					VF.MemberName,
					VF.SourceBankName,
					VF.SourceBankRouting,
					VF.SourceAccountLast4,
					VF.SourceCardType
			FROM
			(	
				(
					SELECT	F.AccountNumber, 
							FT.ID as FundingTransactionID, 
							FT.TrackingNum, 
							FT.GatewayPaymentID, 
							FB.ID as FundingAccountID, 
							FT.FundingType, 
							FT.TargetSubAccountSeq,	
							FT.TargetSubAccountSuffix, 
							FT.Amount as TransferAmount, 
							FT.DateTimeCreated, 
							FT.DateTimeLastTransaction,
							NMR.FName + ' ' + NMR.LName as MemberName,
							FB.BankName as SourceBankName,
							FB.RoutingNumber as SourceBankRouting,
							FB.AccountNumberLast4 as SourceAccountLast4,
							'' as SourceCardType
					FROM IMS.NewMemberRequest as NMR 
					INNER JOIN IMS.NMRFundingTransaction AS FT ON NMR.TrackingNum = FT.TrackingNum
					INNER JOIN IMS.NMRFundingBank AS FB ON FT.FundingBankID = FB.ID 
					INNER JOIN IMS.NMRFunding as F ON F.ID = FB.FundingID 
					WHERE FT.DateTimeReconciled IS NULL AND FT.DateTimeLastReversal IS NULL
				)
				UNION ALL
				(
					SELECT F.AccountNumber, 
					FT.ID as FundingTransactionID, 
					FT.TrackingNum, 
					FT.GatewayPaymentID, 
					FC.ID as FundingAccountID, 
					FT.FundingType, 
					FT.TargetSubAccountSeq,	
					FT.TargetSubAccountSuffix, 
					FT.Amount as TransferAmount, 
					FT.DateTimeCreated, 
					FT.DateTimeLastTransaction,
					NMR.FName + ' ' + NMR.LName as MemberName,
					'' as SourceBankName,
					'' as SourceBankRouting,
					FC.AccountNumberLast4 as SourceAccountLast4,
					FC.CardType as SourceCardType
					FROM IMS.NewMemberRequest as NMR 
					INNER JOIN IMS.NMRFundingTransaction AS FT ON NMR.TrackingNum = FT.TrackingNum
					INNER JOIN IMS.NMRFundingCard AS FC ON FT.FundingCardID = FC.ID 
					INNER JOIN IMS.NMRFunding as F ON F.ID = FC.FundingID 
					WHERE FT.DateTimeReconciled IS NULL AND FT.DateTimeLastReversal IS NULL
				)
			)AS VF LEFT OUTER JOIN IMS.USAePayPaymentStatus AS PS ON VF.GatewayPaymentID = PS.PaymentId
		) AS FS	ORDER BY DateTimeCreated
    END		
    ELSE
	BEGIN    
		SELECT	FS.AccountNumber, 
				FS.FundingTransactionID, 
				FS.TrackingNum, 
				FS.GatewayPaymentID, 
				FS.GatewayPaymentStatus, 
				FS.FundingAccountID, 
				FS.FundingType, 
				FS.TargetSubAccountSeq, 
				FS.TargetSubAccountSuffix, 
				FS.TransferAmount, 
				FS.DateTimeCreated, 
				FS.DateTimeLastTransaction,
				FS.MemberName,
				FS.SourceBankName,
				FS.SourceBankRouting,
				FS.SourceAccountLast4,
				FS.SourceCardType
		FROM
		(
			SELECT	VF.AccountNumber, 
					VF.FundingTransactionID, 
					VF.TrackingNum, 
					VF.GatewayPaymentID, 
					PS.PaymentStatus as GatewayPaymentStatus, 
					VF.FundingAccountID, 
					VF.FundingType, 
					VF.TargetSubAccountSeq, 
					VF.TargetSubAccountSuffix, 
					VF.TransferAmount, 
					VF.DateTimeCreated, 
					VF.DateTimeLastTransaction,
					VF.MemberName,
					VF.SourceBankName,
					VF.SourceBankRouting,
					VF.SourceAccountLast4,
					VF.SourceCardType
			FROM
			(	
				(
					SELECT	F.AccountNumber, 
							FT.ID as FundingTransactionID, 
							FT.TrackingNum, 
							FT.GatewayPaymentID, 
							FB.ID as FundingAccountID, 
							FT.FundingType, 
							FT.TargetSubAccountSeq,	
							FT.TargetSubAccountSuffix, 
							FT.Amount as TransferAmount, 
							FT.DateTimeCreated, 
							FT.DateTimeLastTransaction,
							NMR.FName + ' ' + NMR.LName as MemberName,
							FB.BankName as SourceBankName,
							FB.RoutingNumber as SourceBankRouting,
							FB.AccountNumberLast4 as SourceAccountLast4,
							'' as SourceCardType
					FROM IMS.NewMemberRequest as NMR 
					INNER JOIN IMS.NMRFundingTransaction AS FT ON NMR.TrackingNum = FT.TrackingNum
					INNER JOIN IMS.NMRFundingBank AS FB ON FT.FundingBankID = FB.ID 
					INNER JOIN IMS.NMRFunding as F ON F.ID = FB.FundingID 
					WHERE F.AccountNumber = @AccountNumber AND FT.DateTimeReconciled IS NULL AND FT.DateTimeLastReversal IS NULL
				)
				UNION ALL
				(
					SELECT	F.AccountNumber, 
							FT.ID as FundingTransactionID, 
							FT.TrackingNum, FT.GatewayPaymentID, 
							FC.ID as FundingAccountID, 
							FT.FundingType, 
							FT.TargetSubAccountSeq,	
							FT.TargetSubAccountSuffix, 
							FT.Amount as TransferAmount, 
							FT.DateTimeCreated, 
							FT.DateTimeLastTransaction,
							NMR.FName + ' ' + NMR.LName as MemberName,
							'' as SourceBankName,
							'' as SourceBankRouting,
							FC.AccountNumberLast4 as SourceAccountLast4,
							FC.CardType as SourceCardType
					FROM IMS.NewMemberRequest as NMR 
					INNER JOIN IMS.NMRFundingTransaction AS FT ON NMR.TrackingNum = FT.TrackingNum
					INNER JOIN IMS.NMRFundingCard AS FC ON FT.FundingCardID = FC.ID 
					INNER JOIN IMS.NMRFunding as F ON F.ID = FC.FundingID 
					WHERE F.AccountNumber = @AccountNumber AND FT.DateTimeReconciled IS NULL AND FT.DateTimeLastReversal IS NULL
				)
			)AS VF LEFT OUTER JOIN IMS.USAePayPaymentStatus AS PS ON VF.GatewayPaymentID = PS.PaymentId
		) AS FS	ORDER BY DateTimeCreated
    END		
END

GO
/****** Object:  StoredProcedure [IMS].[spONCU_UnreconciledVerification_Select]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_UnreconciledVerification_Select
CREATE PROCEDURE [IMS].[spONCU_UnreconciledVerification_Select]
	-- Add the parameters for the stored procedure here
	@AccountNumber bigint
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
    IF ISNULL(@AccountNumber, 0) = 0  
    BEGIN
		SELECT      NMRFunding.AccountNumber, NMRFundingBank.ID as FundingBankID, IMS.fnONCU_GetUSAePayPaymentStatus(NMRFundingBank.GatewayPaymentID1) as GatewayPaymentStatus1, IMS.fnONCU_GetUSAePayPaymentStatus(NMRFundingBank.GatewayPaymentID2) as GatewayPaymentStatus2, NMRFundingBank.TrackingNum, NMRFundingBank.AccountNumberLast4, 
						  NMRFundingBank.BankName, NMRFundingBank.AccountType, NMRFundingBank.Amount1, NMRFundingBank.Amount2, 
						  NMRFundingBank.PSIErrorMessage, NMRFundingBank.DateTimeCreated, NMRFundingBank.DateTimeExported, NMRFundingBank.DateTimeLastTransaction
		FROM         NMRFundingBank INNER JOIN
						  NMRFunding ON NMRFundingBank.FundingID = NMRFunding.ID
		WHERE     (NMRFundingBank.DateTimeVerificationReconciled IS NULL AND NMRFundingBank.VerificationStatus = 'V')
    END
    ELSE
	BEGIN    
		SELECT      NMRFunding.AccountNumber, NMRFundingBank.ID as FundingBankID, IMS.fnONCU_GetUSAePayPaymentStatus(NMRFundingBank.GatewayPaymentID1) as GatewayPaymentStatus1, IMS.fnONCU_GetUSAePayPaymentStatus(NMRFundingBank.GatewayPaymentID2) as GatewayPaymentStatus2, NMRFundingBank.TrackingNum, NMRFundingBank.AccountNumberLast4, 
						  NMRFundingBank.BankName, NMRFundingBank.AccountType, NMRFundingBank.Amount1, NMRFundingBank.Amount2, 
						  NMRFundingBank.PSIErrorMessage, NMRFundingBank.DateTimeCreated, NMRFundingBank.DateTimeExported, NMRFundingBank.DateTimeLastTransaction
		FROM         NMRFundingBank INNER JOIN
						  NMRFunding ON NMRFundingBank.FundingID = NMRFunding.ID
		WHERE     (NMRFunding.AccountNumber = @AccountNumber AND DateTimeVerificationReconciled IS NULL AND NMRFundingBank.VerificationStatus = 'V')       
    END	
END


GO
/****** Object:  StoredProcedure [IMS].[spPreLoadILAApplicationFromILA]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE procedure [IMS].[spPreLoadILAApplicationFromILA]
	@oldTrackingNumber int
As
BEGIN

	declare @newTrackingNumber int;
	exec @newTrackingNumber = ims.sp_GetNextTrackingNum
	declare @borrowerNumber int; Set @borrowerNumber = 1; 
	--declare @borrowerTypeCode char; Set @borrowerTypeCode = 'P'

	--Populate App Info
		insert into ims.ILA_ApplicationInfo
		(TrackingNum, ApplyDate, Account, PrimarySSN)
		select top 1
		@newTrackingNumber, GETDATE(), r.Account, r.PrimarySSN
		from ims.ILA_ApplicationInfo r
		where r.TrackingNum = @oldTrackingNumber

	--Populate App Borrower
		insert into ims.ILA_Borrower 
		(TrackingNum, BorrowerTypeCode, BorrowerNum, Account, FName, MInitial, LName, SSN, DOB,
		DriversLicenseState, DriversLicenseNum, DriversLicenseIssueDate, DriversLicenseExpirationDate)

		select top 1
		@newTrackingNumber, r.BorrowerTypeCode, @borrowerNumber, r.Account, r.FName, r.MInitial, r.LName, r.SSN, r.DOB
		,r.DriversLicenseState, r.DriversLicenseNum, r.DriversLicenseIssueDate, r.DriversLicenseExpirationDate
		from ims.ILA_Borrower r 
		where r.TrackingNum = @oldTrackingNumber and r.BorrowerNum = @borrowerNumber

	--Populate Application 
		insert into ims.ILA_Application (TrackingNum) values (@newTrackingNumber)

	--Populate Address
		insert into ims.ILA_BorrowerAddress (TrackingNum, BorrowerNum, AddressTypeCode, Email1,
		Address1, Address2, Address3, City, State, Zip, CntryCode, CntryName
		, Phone, AreaCode, CellPhone, CellPhoneAC, PagerPhone, PagerPhoneAC, Ext, FaxPhone, FaxPhoneAC
		, ResidenceYears, ResidenceMonths)
		
		select top 1
		@newTrackingNumber, @borrowerNumber, a.AddressTypeCode, a.Email1
		, a.Address1, a.Address2, a.Address3, a.City, a.State, a.Zip, a.CntryCode, a.CntryName
		, a.Phone, a.AreaCode, a.CellPhone, a.CellPhoneAC, a.PagerPhone, a.PagerPhoneAC, a.Ext, a.FaxPhone, a.FaxPhoneAC
		,a.ResidenceYears, a.ResidenceMonths
		from ims.ILA_BorrowerAddress a
		where a.TrackingNum = @oldTrackingNumber and a.BorrowerNum = @borrowerNumber
		
	-- Insert Employer Information
		insert into ims.ILA_BorrowerEmployment( TrackingNum, BorrowerNum, EmployerTypeCode,
		OccupationCode, EmployerName, JobTitle, HireDate, AreaCode, Phone, Ext, EmploymentStatus, ProfessionYears, Department, EmployeeNumber, Shift		
		)
		select top 1
		@newTrackingNumber, @borrowerNumber, e.EmployerTypeCode
		,e.OccupationCode, e.EmployerName, e.JobTitle, e.HireDate, e.AreaCode, e.Phone, e.Ext, e.EmploymentStatus, e.ProfessionYears, e.Department, e.EmployeeNumber, e.Shift
		from ims.ILA_BorrowerEmployment e
		where e.TrackingNum = @oldTrackingNumber and e.BorrowerNum = @borrowerNumber

	-- Insert BorrowerIncome
		insert into ims.ILA_BorrowerIncome (TrackingNum, BorrowerNum, IncomeTypeCode
		,GrossIncome, IncomeFrequency, IncomeSource)

		select top 1
		@newTrackingNumber, @borrowerNumber, e.IncomeTypeCode
		,e.GrossIncome, e.IncomeFrequency, e.IncomeSource
		from ims.ILA_BorrowerIncome e
		where e.TrackingNum = @oldTrackingNumber and e.BorrowerNum = @borrowerNumber
		
		select @newTrackingNumber as newTrackingNumber
END



GO
/****** Object:  StoredProcedure [IMS].[spPreLoadILAApplicationFromNMR]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE procedure [IMS].[spPreLoadILAApplicationFromNMR]
	@oldTrackingNumber int
As
BEGIN

	declare @newTrackingNumber int;
	exec @newTrackingNumber = ims.sp_GetNextTrackingNum
	declare @borrowerNumber int; Set @borrowerNumber = 1; 
	declare @borrowerTypeCode char; Set @borrowerTypeCode = 'P'

	--Populate App Info
		insert into ims.ILA_ApplicationInfo
		(TrackingNum, ApplyDate, Account, PrimarySSN)
		select top 1
		@newTrackingNumber, GETDATE(), r.Account, r.SSN
		from ims.NewMemberRequest r
		where r.TrackingNum = @oldTrackingNumber

	--Populate App Borrower
		insert into ims.ILA_Borrower 
		(TrackingNum, BorrowerTypeCode, BorrowerNum, Account, FName, MInitial, LName, SSN, DOB,
		DriversLicenseState, DriversLicenseNum, DriversLicenseIssueDate, DriversLicenseExpirationDate)

		select top 1
		@newTrackingNumber, @borrowerTypeCode, @borrowerNumber, r.Account, r.FName, r.MInitial, r.LName, r.SSN, r.DOB
		,r.DriversLicenseState, r.DriversLicenseNum, r.IDIssueDate, r.IDExpirationDate
		from ims.NewMemberRequest r 
		where r.TrackingNum = @oldTrackingNumber

	--Populate Application 
		insert into ims.ILA_Application (TrackingNum) values (@newTrackingNumber)

	--Populate Address
		insert into ims.ILA_BorrowerAddress (TrackingNum, BorrowerNum, AddressTypeCode,
		Address1, Address2, Address3, City, State, Zip, CntryCode, CntryName
		, Phone, AreaCode, CellPhone, CellPhoneAC, PagerPhone, PagerPhoneAC, Ext, FaxPhone, FaxPhoneAC
		, ResidenceYears, ResidenceMonths)
		
		select top 1
		@newTrackingNumber, @borrowerNumber, 'H'
		, a.Address1, a.Address2, a.Address3, a.City, a.State, a.Zip, a.CntryCode, a.CntryName
		, a.Phone, a.AreaCode, a.CellPhone, a.CellPhoneAC, a.PagerPhone, a.PagerPhoneAC, a.Ext, a.FaxPhone, a.FaxPhoneAC
		,a.ResidenceYears, a.ResidenceMonths
		from ims.NewMemberHome a
		where a.TrackingNum = @oldTrackingNumber

	--Populate Email
		update a set
		a.Email1 = (select r.EMail1 from ims.NewMemberRequest r where r.TrackingNum = @oldTrackingNumber)
		from ims.ILA_BorrowerAddress a
		where a.TrackingNum = @newTrackingNumber and a.BorrowerNum = @borrowerNumber

	-- Insert Employer Information
		insert into ims.ILA_BorrowerEmployment( TrackingNum, BorrowerNum, EmployerTypeCode,
		OccupationCode, EmployerName, JobTitle, HireDate, AreaCode, Phone, Ext, EmploymentStatus, ProfessionYears, Department, EmployeeNumber, Shift		
		)
		select top 1
		@newTrackingNumber, @borrowerNumber, 'C'
		,e.OccupationCode, e.EmployerName, e.JobTitle, e.HireDate, e.AreaCode, e.Phone, e.Ext, e.EmploymentStatus, e.ProfessionYears, e.Department, e.EmployeeNumber, e.Shift
		from ims.NewMemberWork e
		where e.TrackingNum = @oldTrackingNumber

	-- Insert BorrowerIncome
		insert into ims.ILA_BorrowerIncome (TrackingNum, BorrowerNum, IncomeTypeCode
		,GrossIncome, IncomeFrequency, IncomeSource)

		select top 1
		@newTrackingNumber, @borrowerNumber, 'P'
		,e.GrossIncome, e.IncomeFrequency, e.EmployerName
		from ims.newMemberwork e
		where e.TrackingNum = @oldTrackingNumber
		
		select @newTrackingNumber as newTrackingNumber
END



GO
/****** Object:  StoredProcedure [IMS].[spPreLoadNMRFromILAApplication]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


--drop procedure ims.spPreLoadNMRFromILAApplication
CREATE procedure [IMS].[spPreLoadNMRFromILAApplication]
	@oldTrackingNumber int,
	@newPassword varchar(24)
As
BEGIN
	declare @newTrackingNumber int;
	exec @newTrackingNumber = sp_GetNextTrackingNum

	--Prepopulate NMR
		insert into ims.NewMemberRequest( TrackingNum
		, FName, MInitial, LName, SSN, DOB, EMail1, Password, CreatedOn
		, DriversLicenseState, DriversLicenseNum, IDIssueDate, IDExpirationDate
		)

		select top 1
		@newTrackingNumber
		, b.FName, b.MInitial, b.LName, b.SSN, b.DOB, a.Email1, @newPassword, GetDate()
		, b.DriversLicenseState, b.DriversLicenseNum, b.DriversLicenseIssueDate, b.DriversLicenseExpirationDate
		from ims.ILA_ApplicationInfo i
		join ims.ILA_Borrower b on i.trackingNum = b.trackingNum and i.PrimarySSN = b.SSN and b.BorrowerTypeCode = 'P' 
		join ims.ILA_BorrowerAddress a on a.TrackingNum = b.TrackingNum and a.BorrowerNum = b.BorrowerNum
		where i.TrackingNum = @oldTrackingNumber

	--Insert NMR Address
		insert into ims.NewMemberHome( TrackingNum
		, Address1, Address2, Address3, City, State, Zip, CntryCode, CntryName
		, Phone, AreaCode, CellPhone, CellPhoneAC, PagerPhone, PagerPhoneAC, Ext, FaxPhone, FaxPhoneAC
		)

		select top 1
		@newTrackingNumber
		, a.Address1, a.Address2, a.Address3, a.City, a.State, a.Zip, a.CntryCode, a.CntryName
		, a.Phone, a.AreaCode, a.CellPhone, a.CellPhoneAC, a.PagerPhone, a.PagerPhoneAC, a.Ext, a.FaxPhone, a.FaxPhoneAC
		from ims.ILA_ApplicationInfo i
		join ims.ILA_Borrower b on i.trackingNum = b.trackingNum and i.PrimarySSN = b.SSN and b.BorrowerTypeCode = 'P' 
		join ims.ILA_BorrowerAddress a on a.TrackingNum = b.TrackingNum and a.BorrowerNum = b.BorrowerNum
		where i.TrackingNum = @oldTrackingNumber

	-- Insert Employer Information
		insert into ims.NewMemberWork( TrackingNum,
		OccupationCode, EmployerName, JobTitle, HireDate, AreaCode, Phone, Ext, EmploymentStatus, ProfessionYears, Department, EmployeeNumber, Shift
		, GrossIncome, IncomeFrequency
		)
		select top 1
		@newTrackingNumber
		,e.OccupationCode, e.EmployerName, e.JobTitle, e.HireDate, e.AreaCode, e.Phone, e.Ext, e.EmploymentStatus, e.ProfessionYears, e.Department, e.EmployeeNumber, e.Shift
		,p.GrossIncome, p.IncomeFrequency
		from ims.ILA_ApplicationInfo i
		join ims.ILA_Borrower b on i.trackingNum = b.trackingNum and i.PrimarySSN = b.SSN and b.BorrowerTypeCode = 'P' 
		join ims.ILA_BorrowerEmployment e on b.TrackingNum = e.TrackingNum and b.BorrowerNum = e.BorrowerNum
		join ims.ILA_BorrowerIncome p on p.TrackingNum = e.TrackingNum and p.BorrowerNum = e.BorrowerNum
		where i.TrackingNum = @oldTrackingNumber

	-- Insert NMR Extra
		insert into ims.NewMemberRequestExtra (TrackingNum) values (@newTrackingNumber)

		select @newTrackingNumber as newTrackingNumber
END


GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_B103_Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spSafe_D_B103_Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @docsubname CHAR(100)
DECLARE @newdocsub CHAR(200)
DECLARE @count INT
DECLARE @docindex INT

DECLARE curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT '' AS docsubname
	FROM NewMemberSubAccount AS SA
	INNER JOIN NewMemberInvestmentAdd AS INVADD ON INVADD.TrackingNum = SA.TrackingNum AND INVADD.SubAccountSequence = SA.Sequence
	WHERE SA.TrackingNum = @TrackingNum AND SA.SLType = 'I' AND SA.ProductType LIKE 'IRA%' AND SA.Description NOT LIKE '%ROTH%' AND SA.Created = 'Y' AND 1 = 0 -- AND INVADD.ContributionCode = 2	Eventum #4378 says for ANY TRAD IRA

OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count

	IF @count = 1
	BEGIN
		SET @docindex = @docindex + 1
		SET @newdocsub = 'IRA Rollover Certification (B-103)' -- for Suffix(s) ' + CASE LEN(@docsuffix) WHEN 2 THEN @docsuffix WHEN 1 THEN '0' + @docsuffix ELSE 'NA' END
		INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END

      	FETCH NEXT FROM curs INTO @docsubname

	IF @docsubname != NULL
	BEGIN
		SET @newdocsub = @newdocsub + ', ' + @docsubname
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex AND TrackingNum = @TrackingNum
	END
   END

CLOSE curs
DEALLOCATE curs

SELECT 'B103' AS DocCode,* FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
DELETE FROM NewMemberDoc WHERE TrackingNum = @TrackingNum

Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_B103_Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spSafe_D_B103_Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

SELECT @DocIndex As DocIndex
	, RTRIM(NMR.FName) + CASE ISNULL(NMR.MInitial, '') WHEN '' THEN '' ELSE ' ' + RTRIM(NMR.MInitial) END + ' ' + RTRIM(NMR.LName) + CHAR(13) + CHAR(10) +
		CASE WHEN ISNULL(Address.Address1, '') = '' THEN
				RTRIM(RTRIM(Home.Address1) + CASE ISNULL(Home.Address2, '') WHEN '' THEN '' ELSE CHAR(13) + CHAR(10) + RTRIM(Home.Address2) END + CASE ISNULL(Home.Address3, '') WHEN '' THEN '' ELSE CHAR(13) + CHAR(10) + RTRIM(Home.Address3) END) + CHAR(13) + CHAR(10) + RTRIM(Home.City) + ', ' + Home.State + '  ' + CASE LEN(Home.Zip) WHEN 9 THEN LEFT(Home.Zip, 5) + '-' + Right(Home.Zip, 4) ELSE Home.Zip END
			ELSE
				RTRIM(RTRIM(Address.Address1) + CASE ISNULL(Address.Address2, '') WHEN '' THEN '' ELSE CHAR(13) + CHAR(10) + RTRIM(Address.Address2) END + CASE ISNULL(Address.Address3, '') WHEN '' THEN '' ELSE CHAR(13) + CHAR(10) + RTRIM(Address.Address3) END) + CHAR(13) + CHAR(10) + RTRIM(Address.City) + ', ' + Address.State + '  ' + CASE LEN(Address.Zip) WHEN 9 THEN LEFT(Address.Zip, 5) + '-' + Right(Address.Zip, 4) ELSE Address.Zip END
			END AS NameAddress
	, LEFT(NMR.SSN, 3) + '-' + LEFT(RIGHT(NMR.SSN, 6), 2) + '-' + RIGHT(NMR.SSN, 4) AS SSN
	, CONVERT(CHAR(10), NMR.DOB, 101) AS DOB
	, Home.Areacode + '-' + LEFT(Home.Phone, 3) + '-' + RIGHT(RTRIM(Home.Phone), 4) AS HPhone
	, RTRIM(CAST(NMR.Account AS VARCHAR(10))) AS Account

FROM NewMemberRequest As NMR
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN NewMemberAddress As Address On NMR.TrackingNum = Address.TrackingNum
WHERE NMR.TrackingNum = @TrackingNum


Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_B107_Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spSafe_D_B107_Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @docsubname CHAR(100)
DECLARE @docsuffix CHAR(2)
DECLARE @newdocsub CHAR(200)
DECLARE @count INT
DECLARE @docindex INT

DECLARE curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT DISTINCT SA.Sequence, CONVERT(CHAR(2), SA.Suffix)
	FROM NewMemberSubAccount AS SA
	INNER JOIN NewMemberInvestmentAdd AS INVADD ON INVADD.TrackingNum = SA.TrackingNum AND INVADD.SubAccountSequence = SA.Sequence
	WHERE SA.TrackingNum = @TrackingNum AND SA.SLType = 'I' AND SA.ProductType LIKE 'IRA%' AND SA.Description NOT LIKE '%ROTH%' AND SA.Created = 'Y'

OPEN curs
FETCH NEXT FROM curs INTO @docsubname, @docsuffix
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count

--	IF @count = 1
--	BEGIN
		SET @docindex = @docindex + 1
		SET @newdocsub = 'IRA Cont/Inv (B-107) for Suffix(s) ' + CASE LEN(@docsuffix) WHEN 2 THEN @docsuffix WHEN 1 THEN '0' + @docsuffix ELSE 'NA' END
		INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
--	END

      	FETCH NEXT FROM curs INTO @docsubname, @docsuffix

	IF @docsubname != NULL
	BEGIN
		SET @newdocsub = @newdocsub + ', ' + @docsubname
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex AND TrackingNum = @TrackingNum
	END
   END

CLOSE curs
DEALLOCATE curs

SELECT 'B107' AS DocCode,* FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
DELETE FROM NewMemberDoc WHERE TrackingNum = @TrackingNum

Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_B107_Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [IMS].[spSafe_D_B107_Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @seq INT
DECLARE @seq1 INT
DECLARE @count INT

DECLARE curs2 CURSOR LOCAL FAST_FORWARD FOR
	SELECT DISTINCT CONVERT(INT, SA.Sequence)
	FROM NewMemberSubAccount AS SA
	WHERE SA.TrackingNum = @TrackingNum AND SA.SLType = 'I' AND SA.ProductType LIKE 'IRA%' AND SA.Description NOT LIKE '%ROTH%' AND SA.Created = 'Y'

OPEN curs2
FETCH NEXT FROM curs2 INTO @seq
SET @count = 1
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
      	IF (@count = @DocIndex)
		BEGIN
			Set @seq1 = @seq
		END
      	FETCH NEXT FROM curs2 INTO @seq
	SET @count = @count + 1
	PRINT @count
   END
CLOSE curs2
DEALLOCATE curs2

SELECT @DocIndex As DocIndex
	, RTRIM(NMR.FName) + CASE ISNULL(NMR.MInitial, '') WHEN '' THEN '' ELSE ' ' + RTRIM(NMR.MInitial) END + ' ' + RTRIM(NMR.LName) + CHAR(13) + CHAR(10) +
		CASE WHEN ISNULL(Address.Address1, '') = '' THEN
				RTRIM(RTRIM(Home.Address1) + CASE ISNULL(Home.Address2, '') WHEN '' THEN '' ELSE CHAR(13) + CHAR(10) + RTRIM(Home.Address2) END + CASE ISNULL(Home.Address3, '') WHEN '' THEN '' ELSE CHAR(13) + CHAR(10) + RTRIM(Home.Address3) END) + CHAR(13) + CHAR(10) + RTRIM(Home.City) + ', ' + Home.State + '  ' + CASE LEN(Home.Zip) WHEN 9 THEN LEFT(Home.Zip, 5) + '-' + Right(Home.Zip, 4) ELSE Home.Zip END
			ELSE
				RTRIM(RTRIM(Address.Address1) + CASE ISNULL(Address.Address2, '') WHEN '' THEN '' ELSE CHAR(13) + CHAR(10) + RTRIM(Address.Address2) END + CASE ISNULL(Address.Address3, '') WHEN '' THEN '' ELSE CHAR(13) + CHAR(10) + RTRIM(Address.Address3) END) + CHAR(13) + CHAR(10) + RTRIM(Address.City) + ', ' + Address.State + '  ' + CASE LEN(Address.Zip) WHEN 9 THEN LEFT(Address.Zip, 5) + '-' + Right(Address.Zip, 4) ELSE Address.Zip END
			END AS NameAddress
	, RTRIM(NMR.FName) + ' ' + RTRIM(NMR.LName) AS FullName
	, LEFT(NMR.SSN, 3) + '-' + LEFT(RIGHT(NMR.SSN, 6), 2) + '-' + RIGHT(NMR.SSN, 4) AS SSN
	, CONVERT(CHAR(10), NMR.DOB, 101) AS DOB
	, Home.Areacode + '-' + LEFT(Home.Phone, 3) + '-' + RIGHT(RTRIM(Home.Phone), 4) AS HPhone
	, RTRIM(NMR.Email1) AS Email
	, RTRIM(CAST(NMR.Account AS VARCHAR(10))) AS Account
	, RIGHT('00' + RTRIM(CAST(IRA.Suffix AS VARCHAR(2))), 2) AS Suffix

FROM NewMemberRequest As NMR
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN NewMemberAddress As Address On NMR.TrackingNum = Address.TrackingNum
	LEFT OUTER JOIN fnSafe_GetSASeq(@TrackingNum, @seq1) AS IRA ON NMR.TrackingNum = IRA.TrackingNum
WHERE NMR.TrackingNum = @TrackingNum


Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_B1410_Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spSafe_D_B1410_Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @docsubname CHAR(100)
DECLARE @docsuffix CHAR(2)
DECLARE @newdocsub CHAR(200)
DECLARE @count INT
DECLARE @docindex INT

DECLARE curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT DISTINCT SA.Sequence, CONVERT(CHAR(2), SA.Suffix)
	FROM NewMemberSubAccount AS SA
	INNER JOIN NewMemberRequest AS NMR ON NMR.TrackingNum = SA.TrackingNum
	WHERE SA.TrackingNum = @TrackingNum AND SA.SLType = 'I' AND SA.ProductType LIKE 'IRA%' AND SA.Created = 'Y' AND 1 = 0

OPEN curs
FETCH NEXT FROM curs INTO @docsubname, @docsuffix
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count

	SET @docindex = @docindex + 1
	SET @newdocsub = 'IRA Cont / Investment (B-1410) for Suffix(s) ' + CASE LEN(@docsuffix) WHEN 2 THEN @docsuffix WHEN 1 THEN '0' + @docsuffix ELSE 'NA' END
	INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)

      	FETCH NEXT FROM curs INTO @docsubname, @docsuffix

	IF @docsubname != NULL
	BEGIN
		SET @newdocsub = @newdocsub + ', ' + @docsubname
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex AND TrackingNum = @TrackingNum
	END
   END

CLOSE curs
DEALLOCATE curs

SELECT 'B1410' AS DocCode, * FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
DELETE FROM NewMemberDoc WHERE TrackingNum = @TrackingNum

Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_B1410_Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [IMS].[spSafe_D_B1410_Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @seq INT
DECLARE @seq1 INT
DECLARE @count INT

DECLARE curs2 CURSOR LOCAL FAST_FORWARD FOR
	SELECT DISTINCT CONVERT(INT, SA.Sequence)
	FROM NewMemberSubAccount AS SA
	WHERE SA.TrackingNum = @TrackingNum AND SA.SLType = 'I' AND SA.ProductType LIKE 'IRA%' AND SA.Created = 'Y'

OPEN curs2
FETCH NEXT FROM curs2 INTO @seq
SET @count = 1
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
      	IF (@count = @DocIndex)
		BEGIN
			Set @seq1 = @seq
		END
      	FETCH NEXT FROM curs2 INTO @seq
	SET @count = @count + 1
	PRINT @count
   END
CLOSE curs2
DEALLOCATE curs2

SELECT @DocIndex As DocIndex
	, RTRIM(NMR.FName) + CASE ISNULL(NMR.MInitial, '') WHEN '' THEN '' ELSE ' ' + RTRIM(NMR.MInitial) END + ' ' + RTRIM(NMR.LName) + CHAR(13) + CHAR(10) +
		CASE WHEN ISNULL(Address.Address1, '') = '' THEN
				RTRIM(RTRIM(Home.Address1) + CASE ISNULL(Home.Address2, '') WHEN '' THEN '' ELSE CHAR(13) + CHAR(10) + RTRIM(Home.Address2) END + CASE ISNULL(Home.Address3, '') WHEN '' THEN '' ELSE CHAR(13) + CHAR(10) + RTRIM(Home.Address3) END) + CHAR(13) + CHAR(10) + RTRIM(Home.City) + ', ' + Home.State + '  ' + CASE LEN(Home.Zip) WHEN 9 THEN LEFT(Home.Zip, 5) + '-' + Right(Home.Zip, 4) ELSE Home.Zip END
			ELSE
				RTRIM(RTRIM(Address.Address1) + CASE ISNULL(Address.Address2, '') WHEN '' THEN '' ELSE CHAR(13) + CHAR(10) + RTRIM(Address.Address2) END + CASE ISNULL(Address.Address3, '') WHEN '' THEN '' ELSE CHAR(13) + CHAR(10) + RTRIM(Address.Address3) END) + CHAR(13) + CHAR(10) + RTRIM(Address.City) + ', ' + Address.State + '  ' + CASE LEN(Address.Zip) WHEN 9 THEN LEFT(Address.Zip, 5) + '-' + Right(Address.Zip, 4) ELSE Address.Zip END
			END AS NameAddress
	, LEFT(NMR.SSN, 3) + '-' + LEFT(RIGHT(NMR.SSN, 6), 2) + '-' + RIGHT(NMR.SSN, 4) AS SSN
	, CONVERT(CHAR(10), NMR.DOB, 101) AS DOB
	, Home.Areacode + '-' + LEFT(Home.Phone, 3) + '-' + RIGHT(RTRIM(Home.Phone), 4) AS HPhone
	, RTRIM(CAST(NMR.Account AS VARCHAR(10))) + '-' + RIGHT('00' + RTRIM(CAST(IRA.Suffix AS VARCHAR(2))), 2) AS Account

FROM NewMemberRequest As NMR
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN NewMemberAddress As Address On NMR.TrackingNum = Address.TrackingNum
	LEFT OUTER JOIN fnSafe_GetSASeq(@TrackingNum, @seq1) AS IRA ON NMR.TrackingNum = IRA.TrackingNum
WHERE NMR.TrackingNum = @TrackingNum


Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_B301R_Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [IMS].[spSafe_D_B301R_Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @docsubname CHAR(100)
DECLARE @newdocsub CHAR(200)
DECLARE @count INT
DECLARE @docindex INT

DECLARE curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT DISTINCT CONVERT(INT, BE.Sequence)
	FROM NewMemberBeneficiary AS BE
	INNER JOIN NewMemberRequest AS NMR ON NMR.TrackingNum = @TrackingNum
	INNER JOIN NewMemberBeneficiaryLink AS BL ON BE.Sequence = BL.BeneficiarySequence AND BL.TrackingNum = @TrackingNum
	INNER JOIN NewMemberSubAccount AS SA ON BL.SubAccountSequence = SA.Sequence AND SA.TrackingNum = @TrackingNum
	WHERE BE.TrackingNum = @TrackingNum AND (BE.BType IN ('IB', 'IC')) AND SA.SLType = 'I' AND SA.ProductType LIKE 'IRA%' AND SA.Description LIKE '%ROTH%' AND
	(((
		SELECT COUNT(BE2.Sequence)
		FROM NewMemberBeneficiary AS BE2
		LEFT JOIN NewMemberRequest AS NMR2 ON NMR2.TrackingNum = BE2.TrackingNum
		WHERE BE2.TrackingNum = @TrackingNum AND BE2.BType IN ('IB', 'IC')
	) > 5 AND NMR.Created = 'Y'))
	OR
	(SA.Created = 'Y' AND
	(
		SELECT COUNT(*)
		FROM NewMemberSubAccount AS SA2
		WHERE SA2.TrackingNum = @TrackingNum AND SA2.SLType = 'I' AND SA2.ProductType LIKE 'IRA%' AND SA2.Description LIKE '%ROTH%' AND SA2.Created = 'H'
	) > 0)

OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count

      	IF @count = 1 OR @count = 6 OR @count = 11 OR @count = 16
	BEGIN
		SET @docindex = @docindex + 1
		SET @newdocsub = 'Roth IRA Designation of Beneficiary (B-301)' -- for Suffix(s) ' + CASE LEN(@docsuffix) WHEN 2 THEN @docsuffix WHEN 1 THEN '0' + @docsuffix ELSE 'NA' END
		INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END

      	FETCH NEXT FROM curs INTO @docsubname

	IF @docsubname != NULL
	BEGIN
		SET @newdocsub = @newdocsub + ', ' + @docsubname
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex AND TrackingNum = @TrackingNum
	END
   END

CLOSE curs
DEALLOCATE curs

IF @docindex > 1
BEGIN
	UPDATE NewMemberDoc SET DocSubName = RTRIM(DocSubName) + ' (' + CONVERT(VARCHAR, DocIndex) + ' of ' + CONVERT(VARCHAR, @docindex) + ')' WHERE TrackingNum = @TrackingNum
END

SELECT 'B301' AS DocCode, * FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
DELETE FROM NewMemberDoc WHERE TrackingNum = @TrackingNum

Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_B301R_Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [IMS].[spSafe_D_B301R_Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @beseq INT
DECLARE @beseq1 INT
DECLARE @beseq2 INT
DECLARE @beseq3 INT
DECLARE @beseq4 INT
DECLARE @beseq5 INT
DECLARE @count INT
DECLARE @totalpages INT

DECLARE curs2 CURSOR LOCAL FAST_FORWARD FOR
	SELECT DISTINCT CONVERT(INT, BE.Sequence)
	FROM NewMemberBeneficiary AS BE
	INNER JOIN NewMemberBeneficiaryLink AS BL ON BE.Sequence = BL.BeneficiarySequence AND BL.TrackingNum = @TrackingNum
	INNER JOIN NewMemberSubAccount AS SA ON BL.SubAccountSequence = SA.Sequence AND SA.TrackingNum = @TrackingNum
	WHERE BE.TrackingNum = @TrackingNum AND (BE.BType IN ('IB', 'IC')) AND SA.SLType = 'I' AND SA.ProductType LIKE 'IRA%' AND SA.Description LIKE '%ROTH%'

OPEN curs2
FETCH NEXT FROM curs2 INTO @beseq
SET @count = 0
PRINT @@FETCH_STATUS
WHILE @@FETCH_STATUS = 0
BEGIN
      	IF (@count = 0 AND @DocIndex = 1) OR (@count = 5 AND @DocIndex = 2) OR (@count = 10 AND @DocIndex = 3) OR (@count = 15 AND @DocIndex = 4)
		BEGIN
			SET @beseq1 = @beseq
		END
      	IF (@count = 1 AND @DocIndex = 1) OR (@count = 6 AND @DocIndex = 2) OR (@count = 11 AND @DocIndex = 3) OR (@count = 16 AND @DocIndex = 4)
		BEGIN
			SET @beseq2 = @beseq
		END
      	IF (@count = 2 AND @DocIndex = 1) OR (@count = 7 AND @DocIndex = 2) OR (@count = 12 AND @DocIndex = 3) OR (@count = 17 AND @DocIndex = 4)
		BEGIN
			SET @beseq3 = @beseq
		END
      	IF (@count = 3 AND @DocIndex = 1) OR (@count = 8 AND @DocIndex = 2) OR (@count = 13 AND @DocIndex = 3) OR (@count = 18 AND @DocIndex = 4)
		BEGIN
			SET @beseq4 = @beseq
		END
      	IF (@count = 4 AND @DocIndex = 1) OR (@count = 9 AND @DocIndex = 2) OR (@count = 14 AND @DocIndex = 3) OR (@count = 19 AND @DocIndex = 4)
		BEGIN
			SET @beseq5 = @beseq
		END
      	FETCH NEXT FROM curs2 INTO @beseq
	SET @count = @count + 1
	PRINT @count
	SET @totalpages = ((@count-1)/5)+1
END
CLOSE curs2
DEALLOCATE curs2

SELECT @DocIndex As DocIndex
	, CASE WHEN @totalpages > 1 THEN CONVERT(VARCHAR, @DocIndex) + ' of ' + CONVERT(VARCHAR, @totalpages) ELSE '' END AS TotalPages
	, RTRIM(NMR.FName) + CASE ISNULL(NMR.MInitial, '') WHEN '' THEN '' ELSE ' ' + RTRIM(NMR.MInitial) END + ' ' + RTRIM(NMR.LName) + CHAR(13) + CHAR(10) +
		CASE WHEN ISNULL(Address.Address1, '') = '' THEN
				RTRIM(RTRIM(Home.Address1) + CASE ISNULL(Home.Address2, '') WHEN '' THEN '' ELSE CHAR(13) + CHAR(10) + RTRIM(Home.Address2) END + CASE ISNULL(Home.Address3, '') WHEN '' THEN '' ELSE CHAR(13) + CHAR(10) + RTRIM(Home.Address3) END) + CHAR(13) + CHAR(10) + RTRIM(Home.City) + ', ' + Home.State + '  ' + CASE LEN(Home.Zip) WHEN 9 THEN LEFT(Home.Zip, 5) + '-' + Right(Home.Zip, 4) ELSE Home.Zip END
			ELSE
				RTRIM(RTRIM(Address.Address1) + CASE ISNULL(Address.Address2, '') WHEN '' THEN '' ELSE CHAR(13) + CHAR(10) + RTRIM(Address.Address2) END + CASE ISNULL(Address.Address3, '') WHEN '' THEN '' ELSE CHAR(13) + CHAR(10) + RTRIM(Address.Address3) END) + CHAR(13) + CHAR(10) + RTRIM(Address.City) + ', ' + Address.State + '  ' + CASE LEN(Address.Zip) WHEN 9 THEN LEFT(Address.Zip, 5) + '-' + Right(Address.Zip, 4) ELSE Address.Zip END
			END AS NameAddress
	, LEFT(NMR.SSN, 3) + '-' + LEFT(RIGHT(NMR.SSN, 6), 2) + '-' + RIGHT(NMR.SSN, 4) AS SSN
	, CONVERT(CHAR(10), NMR.DOB, 101) AS DOB
	, Home.Areacode + '-' + LEFT(Home.Phone, 3) + '-' + RIGHT(RTRIM(Home.Phone), 4) AS HPhone
	, RTRIM(CAST(NMR.Account AS VARCHAR(10))) AS Account
	, 'X' AS RIRA

	, RTRIM(BE01.FullName)  AS B01FullName
	, RTRIM(BE01.FullAddress)  AS B01FullAddress
	, CONVERT(CHAR(10), BE01.DOB, 101) AS B01DOB
	, LEFT(BE01.SSN, 3) + '-' + LEFT(RIGHT(BE01.SSN, 6), 2) + '-' + RIGHT(BE01.SSN, 4) AS B01SSN
	, RTRIM(BE01.Relationship) AS B01Relationship
	, CASE WHEN BE01.Type = 'IB' THEN 'X' END AS B01TypeP
	, CASE WHEN BE01.Type = 'IC' THEN 'X' END AS B01TypeC
	, RTRIM(BE01.[Percent]) AS B01Percent

	, RTRIM(BE02.FullName)  AS B02FullName
	, RTRIM(BE02.FullAddress)  AS B02FullAddress
	, CONVERT(CHAR(10), BE02.DOB, 101) AS B02DOB
	, LEFT(BE02.SSN, 3) + '-' + LEFT(RIGHT(BE02.SSN, 6), 2) + '-' + RIGHT(BE02.SSN, 4) AS B02SSN
	, RTRIM(BE02.Relationship) AS B02Relationship
	, CASE WHEN BE02.Type = 'IB' THEN 'X' END AS B02TypeP
	, CASE WHEN BE02.Type = 'IC' THEN 'X' END AS B02TypeC
	, RTRIM(BE02.[Percent]) AS B02Percent

	, RTRIM(BE03.FullName)  AS B03FullName
	, RTRIM(BE03.FullAddress)  AS B03FullAddress
	, CONVERT(CHAR(10), BE03.DOB, 101) AS B03DOB
	, LEFT(BE03.SSN, 3) + '-' + LEFT(RIGHT(BE03.SSN, 6), 2) + '-' + RIGHT(BE03.SSN, 4) AS B03SSN
	, RTRIM(BE03.Relationship) AS B03Relationship
	, CASE WHEN BE03.Type = 'IB' THEN 'X' END AS B03TypeP
	, CASE WHEN BE03.Type = 'IC' THEN 'X' END AS B03TypeC
	, RTRIM(BE03.[Percent]) AS B03Percent

	, RTRIM(BE04.FullName)  AS B04FullName
	, RTRIM(BE04.FullAddress)  AS B04FullAddress
	, CONVERT(CHAR(10), BE04.DOB, 101) AS B04DOB
	, LEFT(BE04.SSN, 3) + '-' + LEFT(RIGHT(BE04.SSN, 6), 2) + '-' + RIGHT(BE04.SSN, 4) AS B04SSN
	, RTRIM(BE04.Relationship) AS B04Relationship
	, CASE WHEN BE04.Type = 'IB' THEN 'X' END AS B04TypeP
	, CASE WHEN BE04.Type = 'IC' THEN 'X' END AS B04TypeC
	, RTRIM(BE04.[Percent]) AS B04Percent

	, RTRIM(BE05.FullName)  AS B05FullName
	, RTRIM(BE05.FullAddress)  AS B05FullAddress
	, CONVERT(CHAR(10), BE05.DOB, 101) AS B05DOB
	, LEFT(BE05.SSN, 3) + '-' + LEFT(RIGHT(BE05.SSN, 6), 2) + '-' + RIGHT(BE05.SSN, 4) AS B05SSN
	, RTRIM(BE05.Relationship) AS B05Relationship
	, CASE WHEN BE05.Type = 'IB' THEN 'X' END AS B05TypeP
	, CASE WHEN BE05.Type = 'IC' THEN 'X' END AS B05TypeC
	, RTRIM(BE05.[Percent]) AS B05Percent
FROM NewMemberRequest As NMR
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN NewMemberAddress As Address On NMR.TrackingNum = Address.TrackingNum
	LEFT OUTER JOIN fnSafe_GetBEType(@TrackingNum, 'IB', 'IC', '') AS BE01 ON NMR.TrackingNum = BE01.TrackingNum AND BE01.BeneficiarySequence = @beseq1
	LEFT OUTER JOIN fnSafe_GetBEType(@TrackingNum, 'IB', 'IC', '') AS BE02 ON NMR.TrackingNum = BE02.TrackingNum AND BE02.BeneficiarySequence = @beseq2
	LEFT OUTER JOIN fnSafe_GetBEType(@TrackingNum, 'IB', 'IC', '') AS BE03 ON NMR.TrackingNum = BE03.TrackingNum AND BE03.BeneficiarySequence = @beseq3
	LEFT OUTER JOIN fnSafe_GetBEType(@TrackingNum, 'IB', 'IC', '') AS BE04 ON NMR.TrackingNum = BE04.TrackingNum AND BE04.BeneficiarySequence = @beseq4
	LEFT OUTER JOIN fnSafe_GetBEType(@TrackingNum, 'IB', 'IC', '') AS BE05 ON NMR.TrackingNum = BE05.TrackingNum AND BE05.BeneficiarySequence = @beseq5
WHERE NMR.TrackingNum = @TrackingNum


Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_B301T_Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [IMS].[spSafe_D_B301T_Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @docsubname CHAR(100)
DECLARE @newdocsub CHAR(200)
DECLARE @count INT
DECLARE @docindex INT

DECLARE curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT DISTINCT CONVERT(INT, BE.Sequence)
	FROM NewMemberBeneficiary AS BE
	INNER JOIN NewMemberRequest AS NMR ON NMR.TrackingNum = @TrackingNum
	INNER JOIN NewMemberBeneficiaryLink AS BL ON BE.Sequence = BL.BeneficiarySequence AND BL.TrackingNum = @TrackingNum
	INNER JOIN NewMemberSubAccount AS SA ON BL.SubAccountSequence = SA.Sequence AND SA.TrackingNum = @TrackingNum
	WHERE BE.TrackingNum = @TrackingNum AND (BE.BType IN ('IB', 'IC')) AND SA.SLType = 'I' AND SA.ProductType LIKE 'IRA%' AND SA.Description NOT LIKE '%ROTH%' AND
	(((
		SELECT COUNT(BE2.Sequence)
		FROM NewMemberBeneficiary AS BE2
		LEFT JOIN NewMemberRequest AS NMR2 ON NMR2.TrackingNum = BE2.TrackingNum
		WHERE BE2.TrackingNum = @TrackingNum AND BE2.BType IN ('IB', 'IC')
	) > 5 AND NMR.Created = 'Y'))
	OR
	(SA.Created = 'Y' AND
	(
		SELECT COUNT(*)
		FROM NewMemberSubAccount AS SA2
		WHERE SA2.TrackingNum = @TrackingNum AND SA2.SLType = 'I' AND SA2.ProductType LIKE 'IRA%' AND SA2.Description NOT LIKE '%ROTH%' AND SA2.Created = 'H'
	) > 0)

OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count

      	IF @count = 1 OR @count = 6 OR @count = 11 OR @count = 16
	BEGIN
		SET @docindex = @docindex + 1
		SET @newdocsub = 'Traditional IRA Designation of Beneficiary (B-301)' -- for Suffix(s) ' + CASE LEN(@docsuffix) WHEN 2 THEN @docsuffix WHEN 1 THEN '0' + @docsuffix ELSE 'NA' END
		INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END

      	FETCH NEXT FROM curs INTO @docsubname

	IF @docsubname != NULL
	BEGIN
		SET @newdocsub = @newdocsub + ', ' + @docsubname
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex AND TrackingNum = @TrackingNum
	END
   END

CLOSE curs
DEALLOCATE curs

IF @docindex > 1
BEGIN
	UPDATE NewMemberDoc SET DocSubName = RTRIM(DocSubName) + ' (' + CONVERT(VARCHAR, DocIndex) + ' of ' + CONVERT(VARCHAR, @docindex) + ')' WHERE TrackingNum = @TrackingNum
END

SELECT 'B301' AS DocCode, * FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
DELETE FROM NewMemberDoc WHERE TrackingNum = @TrackingNum

Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_B301T_Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [IMS].[spSafe_D_B301T_Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @beseq INT
DECLARE @beseq1 INT
DECLARE @beseq2 INT
DECLARE @beseq3 INT
DECLARE @beseq4 INT
DECLARE @beseq5 INT
DECLARE @count INT
DECLARE @totalpages INT

DECLARE curs2 CURSOR LOCAL FAST_FORWARD FOR
	SELECT DISTINCT CONVERT(INT, BE.Sequence)
	FROM NewMemberBeneficiary AS BE
	INNER JOIN NewMemberBeneficiaryLink AS BL ON BE.Sequence = BL.BeneficiarySequence AND BL.TrackingNum = @TrackingNum
	INNER JOIN NewMemberSubAccount AS SA ON BL.SubAccountSequence = SA.Sequence AND SA.TrackingNum = @TrackingNum
	WHERE BE.TrackingNum = @TrackingNum AND (BE.BType IN ('IB', 'IC')) AND SA.SLType = 'I' AND SA.ProductType LIKE 'IRA%' AND SA.Description NOT LIKE '%ROTH%'

OPEN curs2
FETCH NEXT FROM curs2 INTO @beseq
SET @count = 0
PRINT @@FETCH_STATUS
WHILE @@FETCH_STATUS = 0
BEGIN
      	IF (@count = 0 AND @DocIndex = 1) OR (@count = 5 AND @DocIndex = 2) OR (@count = 10 AND @DocIndex = 3) OR (@count = 15 AND @DocIndex = 4)
		BEGIN
			SET @beseq1 = @beseq
		END
      	IF (@count = 1 AND @DocIndex = 1) OR (@count = 6 AND @DocIndex = 2) OR (@count = 11 AND @DocIndex = 3) OR (@count = 16 AND @DocIndex = 4)
		BEGIN
			SET @beseq2 = @beseq
		END
      	IF (@count = 2 AND @DocIndex = 1) OR (@count = 7 AND @DocIndex = 2) OR (@count = 12 AND @DocIndex = 3) OR (@count = 17 AND @DocIndex = 4)
		BEGIN
			SET @beseq3 = @beseq
		END
      	IF (@count = 3 AND @DocIndex = 1) OR (@count = 8 AND @DocIndex = 2) OR (@count = 13 AND @DocIndex = 3) OR (@count = 18 AND @DocIndex = 4)
		BEGIN
			SET @beseq4 = @beseq
		END
      	IF (@count = 4 AND @DocIndex = 1) OR (@count = 9 AND @DocIndex = 2) OR (@count = 14 AND @DocIndex = 3) OR (@count = 19 AND @DocIndex = 4)
		BEGIN
			SET @beseq5 = @beseq
		END
      	FETCH NEXT FROM curs2 INTO @beseq
	SET @count = @count + 1
	PRINT @count
	SET @totalpages = ((@count-1)/5)+1
END
CLOSE curs2
DEALLOCATE curs2

SELECT @DocIndex As DocIndex
	, CASE WHEN @totalpages > 1 THEN CONVERT(VARCHAR, @DocIndex) + ' of ' + CONVERT(VARCHAR, @totalpages) ELSE '' END AS TotalPages
	, RTRIM(NMR.FName) + CASE ISNULL(NMR.MInitial, '') WHEN '' THEN '' ELSE ' ' + RTRIM(NMR.MInitial) END + ' ' + RTRIM(NMR.LName) + CHAR(13) + CHAR(10) +
		CASE WHEN ISNULL(Address.Address1, '') = '' THEN
				RTRIM(RTRIM(Home.Address1) + CASE ISNULL(Home.Address2, '') WHEN '' THEN '' ELSE CHAR(13) + CHAR(10) + RTRIM(Home.Address2) END + CASE ISNULL(Home.Address3, '') WHEN '' THEN '' ELSE CHAR(13) + CHAR(10) + RTRIM(Home.Address3) END) + CHAR(13) + CHAR(10) + RTRIM(Home.City) + ', ' + Home.State + '  ' + CASE LEN(Home.Zip) WHEN 9 THEN LEFT(Home.Zip, 5) + '-' + Right(Home.Zip, 4) ELSE Home.Zip END
			ELSE
				RTRIM(RTRIM(Address.Address1) + CASE ISNULL(Address.Address2, '') WHEN '' THEN '' ELSE CHAR(13) + CHAR(10) + RTRIM(Address.Address2) END + CASE ISNULL(Address.Address3, '') WHEN '' THEN '' ELSE CHAR(13) + CHAR(10) + RTRIM(Address.Address3) END) + CHAR(13) + CHAR(10) + RTRIM(Address.City) + ', ' + Address.State + '  ' + CASE LEN(Address.Zip) WHEN 9 THEN LEFT(Address.Zip, 5) + '-' + Right(Address.Zip, 4) ELSE Address.Zip END
			END AS NameAddress
	, LEFT(NMR.SSN, 3) + '-' + LEFT(RIGHT(NMR.SSN, 6), 2) + '-' + RIGHT(NMR.SSN, 4) AS SSN
	, CONVERT(CHAR(10), NMR.DOB, 101) AS DOB
	, Home.Areacode + '-' + LEFT(Home.Phone, 3) + '-' + RIGHT(RTRIM(Home.Phone), 4) AS HPhone
	, RTRIM(CAST(NMR.Account AS VARCHAR(10))) AS Account
	, 'X' AS TIRA

	, RTRIM(BE01.FullName)  AS B01FullName
	, RTRIM(BE01.FullAddress)  AS B01FullAddress
	, CONVERT(CHAR(10), BE01.DOB, 101) AS B01DOB
	, LEFT(BE01.SSN, 3) + '-' + LEFT(RIGHT(BE01.SSN, 6), 2) + '-' + RIGHT(BE01.SSN, 4) AS B01SSN
	, RTRIM(BE01.Relationship) AS B01Relationship
	, CASE WHEN BE01.Type = 'IB' THEN 'X' END AS B01TypeP
	, CASE WHEN BE01.Type = 'IC' THEN 'X' END AS B01TypeC
	, RTRIM(BE01.[Percent]) AS B01Percent

	, RTRIM(BE02.FullName)  AS B02FullName
	, RTRIM(BE02.FullAddress)  AS B02FullAddress
	, CONVERT(CHAR(10), BE02.DOB, 101) AS B02DOB
	, LEFT(BE02.SSN, 3) + '-' + LEFT(RIGHT(BE02.SSN, 6), 2) + '-' + RIGHT(BE02.SSN, 4) AS B02SSN
	, RTRIM(BE02.Relationship) AS B02Relationship
	, CASE WHEN BE02.Type = 'IB' THEN 'X' END AS B02TypeP
	, CASE WHEN BE02.Type = 'IC' THEN 'X' END AS B02TypeC
	, RTRIM(BE02.[Percent]) AS B02Percent

	, RTRIM(BE03.FullName)  AS B03FullName
	, RTRIM(BE03.FullAddress)  AS B03FullAddress
	, CONVERT(CHAR(10), BE03.DOB, 101) AS B03DOB
	, LEFT(BE03.SSN, 3) + '-' + LEFT(RIGHT(BE03.SSN, 6), 2) + '-' + RIGHT(BE03.SSN, 4) AS B03SSN
	, RTRIM(BE03.Relationship) AS B03Relationship
	, CASE WHEN BE03.Type = 'IB' THEN 'X' END AS B03TypeP
	, CASE WHEN BE03.Type = 'IC' THEN 'X' END AS B03TypeC
	, RTRIM(BE03.[Percent]) AS B03Percent

	, RTRIM(BE04.FullName)  AS B04FullName
	, RTRIM(BE04.FullAddress)  AS B04FullAddress
	, CONVERT(CHAR(10), BE04.DOB, 101) AS B04DOB
	, LEFT(BE04.SSN, 3) + '-' + LEFT(RIGHT(BE04.SSN, 6), 2) + '-' + RIGHT(BE04.SSN, 4) AS B04SSN
	, RTRIM(BE04.Relationship) AS B04Relationship
	, CASE WHEN BE04.Type = 'IB' THEN 'X' END AS B04TypeP
	, CASE WHEN BE04.Type = 'IC' THEN 'X' END AS B04TypeC
	, RTRIM(BE04.[Percent]) AS B04Percent

	, RTRIM(BE05.FullName)  AS B05FullName
	, RTRIM(BE05.FullAddress)  AS B05FullAddress
	, CONVERT(CHAR(10), BE05.DOB, 101) AS B05DOB
	, LEFT(BE05.SSN, 3) + '-' + LEFT(RIGHT(BE05.SSN, 6), 2) + '-' + RIGHT(BE05.SSN, 4) AS B05SSN
	, RTRIM(BE05.Relationship) AS B05Relationship
	, CASE WHEN BE05.Type = 'IB' THEN 'X' END AS B05TypeP
	, CASE WHEN BE05.Type = 'IC' THEN 'X' END AS B05TypeC
	, RTRIM(BE05.[Percent]) AS B05Percent
FROM NewMemberRequest As NMR
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN NewMemberAddress As Address On NMR.TrackingNum = Address.TrackingNum
	LEFT OUTER JOIN fnSafe_GetBEType(@TrackingNum, 'IB', 'IC', '') AS BE01 ON NMR.TrackingNum = BE01.TrackingNum AND BE01.BeneficiarySequence = @beseq1
	LEFT OUTER JOIN fnSafe_GetBEType(@TrackingNum, 'IB', 'IC', '') AS BE02 ON NMR.TrackingNum = BE02.TrackingNum AND BE02.BeneficiarySequence = @beseq2
	LEFT OUTER JOIN fnSafe_GetBEType(@TrackingNum, 'IB', 'IC', '') AS BE03 ON NMR.TrackingNum = BE03.TrackingNum AND BE03.BeneficiarySequence = @beseq3
	LEFT OUTER JOIN fnSafe_GetBEType(@TrackingNum, 'IB', 'IC', '') AS BE04 ON NMR.TrackingNum = BE04.TrackingNum AND BE04.BeneficiarySequence = @beseq4
	LEFT OUTER JOIN fnSafe_GetBEType(@TrackingNum, 'IB', 'IC', '') AS BE05 ON NMR.TrackingNum = BE05.TrackingNum AND BE05.BeneficiarySequence = @beseq5
WHERE NMR.TrackingNum = @TrackingNum


Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_B302_Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spSafe_D_B302_Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
--Declare @TrackingNum int
--DROP TABLE #docs
--DEALLOCATE curs

DECLARE @docsubname CHAR(100)
DECLARE @newdocsub CHAR(200)
DECLARE @count INT
DECLARE @docindex INT


--CREATE TABLE #docs(docindex int identity Primary Key, docsubname char(100))

DECLARE curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT '' AS docsubname
	FROM NewMemberRequest AS NMR LEFT JOIN NewMemberSubAccount AS SA ON SA.TrackingNum = NMR.TrackingNum
	WHERE NMR.TrackingNum = @TrackingNum AND SA.SLType = 'I' AND SA.ProductType LIKE 'IRA%' AND SA.Description NOT LIKE '%ROTH%' AND SA.Created = 'Y' AND 1 = 0

--IF @@ROWCOUNT = 0

OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count

      	IF @count = 1
	BEGIN
		SET @docindex = @docindex + 1
		SET @newdocsub = 'IRA Transfer Request (B-302)' -- for Suffix(s) ' + CASE LEN(@docsuffix) WHEN 2 THEN @docsuffix WHEN 1 THEN '0' + @docsuffix ELSE 'NA' END
		INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END

      	FETCH NEXT FROM curs INTO @docsubname

	IF @docsubname != NULL
	BEGIN
		SET @newdocsub = @newdocsub + ', ' + @docsubname
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex AND TrackingNum = @TrackingNum
	END
   END

CLOSE curs
DEALLOCATE curs

SELECT *  FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
DELETE FROM NewMemberDoc WHERE TrackingNum = @TrackingNum

--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_B302_Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spSafe_D_B302_Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

SELECT @DocIndex As DocIndex
	, RTRIM(NMR.FName) + CASE ISNULL(NMR.MInitial, '') WHEN '' THEN '' ELSE ' ' + RTRIM(NMR.MInitial) END + ' ' + RTRIM(NMR.LName) + CHAR(13) + CHAR(10) +
		CASE WHEN ISNULL(Address.Address1, '') = '' THEN
				RTRIM(RTRIM(Home.Address1) + CASE ISNULL(Home.Address2, '') WHEN '' THEN '' ELSE CHAR(13) + CHAR(10) + RTRIM(Home.Address2) END + CASE ISNULL(Home.Address3, '') WHEN '' THEN '' ELSE CHAR(13) + CHAR(10) + RTRIM(Home.Address3) END) + CHAR(13) + CHAR(10) + RTRIM(Home.City) + ', ' + Home.State + '  ' + CASE LEN(Home.Zip) WHEN 9 THEN LEFT(Home.Zip, 5) + '-' + Right(Home.Zip, 4) ELSE Home.Zip END
			ELSE
				RTRIM(RTRIM(Address.Address1) + CASE ISNULL(Address.Address2, '') WHEN '' THEN '' ELSE CHAR(13) + CHAR(10) + RTRIM(Address.Address2) END + CASE ISNULL(Address.Address3, '') WHEN '' THEN '' ELSE CHAR(13) + CHAR(10) + RTRIM(Address.Address3) END) + CHAR(13) + CHAR(10) + RTRIM(Address.City) + ', ' + Address.State + '  ' + CASE LEN(Address.Zip) WHEN 9 THEN LEFT(Address.Zip, 5) + '-' + Right(Address.Zip, 4) ELSE Address.Zip END
			END AS NameAddress
	, LEFT(NMR.SSN, 3) + '-' + LEFT(RIGHT(NMR.SSN, 6), 2) + '-' + RIGHT(NMR.SSN, 4) AS SSN
	, CONVERT(CHAR(10), NMR.DOB, 101) AS DOB
	, Home.Areacode + '-' + LEFT(Home.Phone, 3) + '-' + RIGHT(RTRIM(Home.Phone), 4) AS HPhone
	, '' AS Account
	, RTRIM(NMR.FName) + ' ' + RTRIM(NMR.LName) AS FullName
	, RTRIM(CAST(NMR.Account AS VARCHAR(10))) + '-Trad IRA' AS AccountNumber

FROM NewMemberRequest As NMR
	LEFT OUTER JOIN NewMemberHome AS Home ON NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork AS Work ON NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN NewMemberAddress AS Address ON NMR.TrackingNum = Address.TrackingNum
WHERE NMR.TrackingNum = @TrackingNum


Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_B6098CU_Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spSafe_D_B6098CU_Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @docsubname CHAR(100)
DECLARE @newdocsub CHAR(200)
DECLARE @count INT
DECLARE @docindex INT

DECLARE curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT '' AS docsubname
	FROM NewMemberRequest AS NMR
	LEFT JOIN NewMemberSubAccount AS SA ON SA.TrackingNum = NMR.TrackingNum
	WHERE NMR.TrackingNum = @TrackingNum AND SA.SLType = 'I' AND SA.ProductType LIKE 'IRA%' AND SA.Description LIKE '%ROTH%' AND SA.Created = 'Y' AND
	(
		SELECT COUNT(*)
		FROM NewMemberSubAccount AS SA2
		WHERE SA2.TrackingNum = @TrackingNum AND SA2.SLType = 'I' AND SA2.ProductType LIKE 'IRA%' AND SA2.Description LIKE '%ROTH%' AND SA2.Created = 'H'
	) = 0

OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count

      	IF @count = 1
	BEGIN
		SET @docindex = @docindex + 1
		SET @newdocsub = 'ROTH IRA Simplifier (B-6098CU)' -- for Suffix(s) ' + CASE LEN(@docsuffix) WHEN 2 THEN @docsuffix WHEN 1 THEN '0' + @docsuffix ELSE 'NA' END
		INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END

      	FETCH NEXT FROM curs INTO @docsubname

	IF @docsubname != NULL
	BEGIN
		SET @newdocsub = @newdocsub + ', ' + @docsubname
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex AND TrackingNum = @TrackingNum
	END
   END

CLOSE curs
DEALLOCATE curs

SELECT 'B6098CU' AS DocCode, * FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
DELETE FROM NewMemberDoc WHERE TrackingNum = @TrackingNum

--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_B6098CU_Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [IMS].[spSafe_D_B6098CU_Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @count INT
DECLARE @beseq1 INT
DECLARE @beseq2 INT
DECLARE @beseq3 INT
DECLARE @beseq4 INT
DECLARE @beseq5 INT

SET @beseq1 = 1
SET @beseq2 = 2
SET @beseq3 = 3
SET @beseq4 = 4
SET @beseq5 = 5
SET @count = (SELECT COUNT(*) FROM NewMemberBeneficiary BE WHERE BE.TrackingNum = @TrackingNum AND BE.BType IN ('IB', 'IC'))
IF @count > 5	-- Don't display Beneficiaries if there are more than 5
BEGIN
	SET @beseq1 = 0
	SET @beseq2 = 0
	SET @beseq3 = 0
	SET @beseq4 = 0
	SET @beseq5 = 0
END

SELECT @DocIndex As DocIndex
	, RTRIM(NMR.FName) + CASE ISNULL(NMR.MInitial, '') WHEN '' THEN '' ELSE ' ' + RTRIM(NMR.MInitial) END + ' ' + RTRIM(NMR.LName) + CHAR(13) + CHAR(10) +
		CASE WHEN ISNULL(Address.Address1, '') = '' THEN
				RTRIM(RTRIM(Home.Address1) + CASE ISNULL(Home.Address2, '') WHEN '' THEN '' ELSE CHAR(13) + CHAR(10) + RTRIM(Home.Address2) END + CASE ISNULL(Home.Address3, '') WHEN '' THEN '' ELSE CHAR(13) + CHAR(10) + RTRIM(Home.Address3) END) + CHAR(13) + CHAR(10) + RTRIM(Home.City) + ', ' + Home.State + '  ' + CASE LEN(Home.Zip) WHEN 9 THEN LEFT(Home.Zip, 5) + '-' + Right(Home.Zip, 4) ELSE Home.Zip END
			ELSE
				RTRIM(RTRIM(Address.Address1) + CASE ISNULL(Address.Address2, '') WHEN '' THEN '' ELSE CHAR(13) + CHAR(10) + RTRIM(Address.Address2) END + CASE ISNULL(Address.Address3, '') WHEN '' THEN '' ELSE CHAR(13) + CHAR(10) + RTRIM(Address.Address3) END) + CHAR(13) + CHAR(10) + RTRIM(Address.City) + ', ' + Address.State + '  ' + CASE LEN(Address.Zip) WHEN 9 THEN LEFT(Address.Zip, 5) + '-' + Right(Address.Zip, 4) ELSE Address.Zip END
			END AS NameAddress
	, LEFT(NMR.SSN, 3) + '-' + LEFT(RIGHT(NMR.SSN, 6), 2) + '-' + RIGHT(NMR.SSN, 4) AS SSN
	, Home.Areacode + '-' + LEFT(Home.Phone, 3) + '-' + RIGHT(RTRIM(Home.Phone), 4) AS HPhone
	, Work.Areacode + '-' + LEFT(Work.Phone, 3) + '-' + RIGHT(RTRIM(Work.Phone), 4) AS WPhone
	, RTRIM(CAST(NMR.Account AS VARCHAR(10))) AS Account
	, CONVERT(CHAR(10), NMR.DOB, 101) AS DOB
	, RTRIM(NMR.Email1) AS Email
	, CONVERT(CHAR(10), NMR.CreatedOn, 101) AS DOB

	, RTRIM(BE01.FullName)  AS B01FullName
	, RTRIM(BE01.FullAddress)  AS B01FullAddress
	, CONVERT(CHAR(10), BE01.DOB, 101) AS B01DOB
	, LEFT(BE01.SSN, 3) + '-' + LEFT(RIGHT(BE01.SSN, 6), 2) + '-' + RIGHT(BE01.SSN, 4) AS B01SSN
	, RTRIM(BE01.Relationship) AS B01Relationship
	, CASE WHEN BE01.Type = 'IB' THEN 'X' END AS B01TypeP
	, CASE WHEN BE01.Type = 'IC' THEN 'X' END AS B01TypeC
	, RTRIM(BE01.[Percent]) AS B01Percent

	, RTRIM(BE02.FullName)  AS B02FullName
	, RTRIM(BE02.FullAddress)  AS B02FullAddress
	, CONVERT(CHAR(10), BE02.DOB, 101) AS B02DOB
	, LEFT(BE02.SSN, 3) + '-' + LEFT(RIGHT(BE02.SSN, 6), 2) + '-' + RIGHT(BE02.SSN, 4) AS B02SSN
	, RTRIM(BE02.Relationship) AS B02Relationship
	, CASE WHEN BE02.Type = 'IB' THEN 'X' END AS B02TypeP
	, CASE WHEN BE02.Type = 'IC' THEN 'X' END AS B02TypeC
	, RTRIM(BE02.[Percent]) AS B02Percent

	, RTRIM(BE03.FullName)  AS B03FullName
	, RTRIM(BE03.FullAddress)  AS B03FullAddress
	, CONVERT(CHAR(10), BE03.DOB, 101) AS B03DOB
	, LEFT(BE03.SSN, 3) + '-' + LEFT(RIGHT(BE03.SSN, 6), 2) + '-' + RIGHT(BE03.SSN, 4) AS B03SSN
	, RTRIM(BE03.Relationship) AS B03Relationship
	, CASE WHEN BE03.Type = 'IB' THEN 'X' END AS B03TypeP
	, CASE WHEN BE03.Type = 'IC' THEN 'X' END AS B03TypeC
	, RTRIM(BE03.[Percent]) AS B03Percent

	, RTRIM(BE04.FullName)  AS B04FullName
	, RTRIM(BE04.FullAddress)  AS B04FullAddress
	, CONVERT(CHAR(10), BE04.DOB, 101) AS B04DOB
	, LEFT(BE04.SSN, 3) + '-' + LEFT(RIGHT(BE04.SSN, 6), 2) + '-' + RIGHT(BE04.SSN, 4) AS B04SSN
	, RTRIM(BE04.Relationship) AS B04Relationship
	, CASE WHEN BE04.Type = 'IB' THEN 'X' END AS B04TypeP
	, CASE WHEN BE04.Type = 'IC' THEN 'X' END AS B04TypeC
	, RTRIM(BE04.[Percent]) AS B04Percent

	, RTRIM(BE05.FullName)  AS B05FullName
	, RTRIM(BE05.FullAddress)  AS B05FullAddress
	, CONVERT(CHAR(10), BE05.DOB, 101) AS B05DOB
	, LEFT(BE05.SSN, 3) + '-' + LEFT(RIGHT(BE05.SSN, 6), 2) + '-' + RIGHT(BE05.SSN, 4) AS B05SSN
	, RTRIM(BE05.Relationship) AS B05Relationship
	, CASE WHEN BE05.Type = 'IB' THEN 'X' END AS B05TypeP
	, CASE WHEN BE05.Type = 'IC' THEN 'X' END AS B05TypeC
	, RTRIM(BE05.[Percent]) AS B05Percent
FROM NewMemberRequest As NMR
	LEFT OUTER JOIN NewMemberHome AS Home ON NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork AS Work ON NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN NewMemberAddress AS Address ON NMR.TrackingNum = Address.TrackingNum
	LEFT OUTER JOIN fnSafe_GetBEType(@TrackingNum, 'IB', 'IC', '') AS BE01 ON NMR.TrackingNum = BE01.TrackingNum AND BE01.BeneficiarySequence = @beseq1
	LEFT OUTER JOIN fnSafe_GetBEType(@TrackingNum, 'IB', 'IC', '') AS BE02 ON NMR.TrackingNum = BE02.TrackingNum AND BE02.BeneficiarySequence = @beseq2
	LEFT OUTER JOIN fnSafe_GetBEType(@TrackingNum, 'IB', 'IC', '') AS BE03 ON NMR.TrackingNum = BE03.TrackingNum AND BE03.BeneficiarySequence = @beseq3
	LEFT OUTER JOIN fnSafe_GetBEType(@TrackingNum, 'IB', 'IC', '') AS BE04 ON NMR.TrackingNum = BE04.TrackingNum AND BE04.BeneficiarySequence = @beseq4
	LEFT OUTER JOIN fnSafe_GetBEType(@TrackingNum, 'IB', 'IC', '') AS BE05 ON NMR.TrackingNum = BE05.TrackingNum AND BE05.BeneficiarySequence = @beseq5
WHERE NMR.TrackingNum = @TrackingNum


Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_B6103_Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [IMS].[spSafe_D_B6103_Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @docsubname CHAR(100)
DECLARE @newdocsub CHAR(200)
DECLARE @count INT
DECLARE @docindex INT

DECLARE curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT '' AS docsubname
	FROM NewMemberSubAccount AS SA
	INNER JOIN NewMemberRequest AS NMR ON NMR.TrackingNum = SA.TrackingNum
	WHERE SA.TrackingNum = @TrackingNum AND SA.SLType = 'I' AND SA.ProductType LIKE 'IRA%' AND SA.Description LIKE '%ROTH%' AND SA.Created = 'Y' AND 1 = 0

OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count

      	IF @count = 1
	BEGIN
		SET @docindex = @docindex + 1
		SET @newdocsub = 'ROTH IRA Rollover Certification (B-6103)' -- for Suffix(s) ' + CASE LEN(@docsuffix) WHEN 2 THEN @docsuffix WHEN 1 THEN '0' + @docsuffix ELSE 'NA' END
		INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END

      	FETCH NEXT FROM curs INTO @docsubname

	IF @docsubname != NULL
	BEGIN
		SET @newdocsub = @newdocsub + ', ' + @docsubname
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex AND TrackingNum = @TrackingNum
	END
   END

CLOSE curs
DEALLOCATE curs

SELECT 'B6103' AS DocCode, * FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
DELETE FROM NewMemberDoc WHERE TrackingNum = @TrackingNum

Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_B6103_Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [IMS].[spSafe_D_B6103_Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

SELECT @DocIndex As DocIndex
	, RTRIM(NMR.FName) + CASE ISNULL(NMR.MInitial, '') WHEN '' THEN '' ELSE ' ' + RTRIM(NMR.MInitial) END + ' ' + RTRIM(NMR.LName) + CHAR(13) + CHAR(10) +
		CASE WHEN ISNULL(Address.Address1, '') = '' THEN
				RTRIM(RTRIM(Home.Address1) + CASE ISNULL(Home.Address2, '') WHEN '' THEN '' ELSE CHAR(13) + CHAR(10) + RTRIM(Home.Address2) END + CASE ISNULL(Home.Address3, '') WHEN '' THEN '' ELSE CHAR(13) + CHAR(10) + RTRIM(Home.Address3) END) + CHAR(13) + CHAR(10) + RTRIM(Home.City) + ', ' + Home.State + '  ' + CASE LEN(Home.Zip) WHEN 9 THEN LEFT(Home.Zip, 5) + '-' + Right(Home.Zip, 4) ELSE Home.Zip END
			ELSE
				RTRIM(RTRIM(Address.Address1) + CASE ISNULL(Address.Address2, '') WHEN '' THEN '' ELSE CHAR(13) + CHAR(10) + RTRIM(Address.Address2) END + CASE ISNULL(Address.Address3, '') WHEN '' THEN '' ELSE CHAR(13) + CHAR(10) + RTRIM(Address.Address3) END) + CHAR(13) + CHAR(10) + RTRIM(Address.City) + ', ' + Address.State + '  ' + CASE LEN(Address.Zip) WHEN 9 THEN LEFT(Address.Zip, 5) + '-' + Right(Address.Zip, 4) ELSE Address.Zip END
			END AS NameAddress
	, LEFT(NMR.SSN, 3) + '-' + LEFT(RIGHT(NMR.SSN, 6), 2) + '-' + RIGHT(NMR.SSN, 4) AS SSN
	, CONVERT(CHAR(10), NMR.DOB, 101) AS DOB
	, Home.Areacode + '-' + LEFT(Home.Phone, 3) + '-' + RIGHT(RTRIM(Home.Phone), 4) AS HPhone
	, RTRIM(CAST(NMR.Account AS VARCHAR(10))) AS Account

FROM NewMemberRequest AS NMR
	LEFT OUTER JOIN NewMemberHome AS Home ON NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork AS Work ON NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN NewMemberAddress AS Address ON NMR.TrackingNum = Address.TrackingNum
WHERE NMR.TrackingNum = @TrackingNum


Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_B6107_Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [IMS].[spSafe_D_B6107_Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @docsubname CHAR(100)
DECLARE @docsuffix CHAR(2)
DECLARE @newdocsub CHAR(200)
DECLARE @count INT
DECLARE @docindex INT

DECLARE curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT DISTINCT SA.Sequence, CONVERT(CHAR(2), SA.Suffix)
	FROM NewMemberSubAccount AS SA
	INNER JOIN NewMemberInvestmentAdd AS INVADD ON INVADD.TrackingNum = SA.TrackingNum AND INVADD.SubAccountSequence = SA.Sequence
	WHERE SA.TrackingNum = @TrackingNum AND SA.SLType = 'I' AND SA.ProductType LIKE 'IRA%' AND SA.Description LIKE '%ROTH%' AND SA.Created = 'Y'

OPEN curs
FETCH NEXT FROM curs INTO @docsubname, @docsuffix
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count

--	IF @count = 1
--	BEGIN
		SET @docindex = @docindex + 1
		SET @newdocsub = 'ROTH IRA Cont/Inv (B-6107) for Suffix(s) ' + CASE LEN(@docsuffix) WHEN 2 THEN @docsuffix WHEN 1 THEN '0' + @docsuffix ELSE 'NA' END
		INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
--	END

      	FETCH NEXT FROM curs INTO @docsubname, @docsuffix

	IF @docsubname != NULL
	BEGIN
		SET @newdocsub = @newdocsub + ', ' + @docsubname
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex AND TrackingNum = @TrackingNum
	END
   END

CLOSE curs
DEALLOCATE curs

SELECT 'B6107' AS DocCode, * FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
DELETE FROM NewMemberDoc WHERE TrackingNum = @TrackingNum

Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_B6107_Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [IMS].[spSafe_D_B6107_Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @seq INT
DECLARE @seq1 INT
DECLARE @count INT

DECLARE curs2 CURSOR LOCAL FAST_FORWARD FOR
	SELECT DISTINCT CONVERT(INT, SA.Sequence)
	FROM NewMemberSubAccount AS SA
	WHERE SA.TrackingNum = @TrackingNum AND SA.SLType = 'I' AND SA.ProductType LIKE 'IRA%' AND SA.Description LIKE '%ROTH%' AND SA.Created = 'Y'

OPEN curs2
FETCH NEXT FROM curs2 INTO @seq
SET @count = 1
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
      	IF (@count = @DocIndex)
		BEGIN
			Set @seq1 = @seq
		END
      	FETCH NEXT FROM curs2 INTO @seq
	SET @count = @count + 1
	PRINT @count
   END
CLOSE curs2
DEALLOCATE curs2

SELECT @DocIndex As DocIndex
	, RTRIM(NMR.FName) + CASE ISNULL(NMR.MInitial, '') WHEN '' THEN '' ELSE ' ' + RTRIM(NMR.MInitial) END + ' ' + RTRIM(NMR.LName) + CHAR(13) + CHAR(10) +
		CASE WHEN ISNULL(Address.Address1, '') = '' THEN
				RTRIM(RTRIM(Home.Address1) + CASE ISNULL(Home.Address2, '') WHEN '' THEN '' ELSE CHAR(13) + CHAR(10) + RTRIM(Home.Address2) END + CASE ISNULL(Home.Address3, '') WHEN '' THEN '' ELSE CHAR(13) + CHAR(10) + RTRIM(Home.Address3) END) + CHAR(13) + CHAR(10) + RTRIM(Home.City) + ', ' + Home.State + '  ' + CASE LEN(Home.Zip) WHEN 9 THEN LEFT(Home.Zip, 5) + '-' + Right(Home.Zip, 4) ELSE Home.Zip END
			ELSE
				RTRIM(RTRIM(Address.Address1) + CASE ISNULL(Address.Address2, '') WHEN '' THEN '' ELSE CHAR(13) + CHAR(10) + RTRIM(Address.Address2) END + CASE ISNULL(Address.Address3, '') WHEN '' THEN '' ELSE CHAR(13) + CHAR(10) + RTRIM(Address.Address3) END) + CHAR(13) + CHAR(10) + RTRIM(Address.City) + ', ' + Address.State + '  ' + CASE LEN(Address.Zip) WHEN 9 THEN LEFT(Address.Zip, 5) + '-' + Right(Address.Zip, 4) ELSE Address.Zip END
			END AS NameAddress
	, RTRIM(NMR.FName) + ' ' + RTRIM(NMR.LName) AS FullName
	, LEFT(NMR.SSN, 3) + '-' + LEFT(RIGHT(NMR.SSN, 6), 2) + '-' + RIGHT(NMR.SSN, 4) AS SSN
	, CONVERT(CHAR(10), NMR.DOB, 101) AS DOB
	, Home.Areacode + '-' + LEFT(Home.Phone, 3) + '-' + RIGHT(RTRIM(Home.Phone), 4) AS HPhone
	, RTRIM(NMR.Email1) AS Email
	, RTRIM(CAST(NMR.Account AS VARCHAR(10))) AS Account
	, RIGHT('00' + RTRIM(CAST(IRA.Suffix AS VARCHAR(2))), 2) AS Suffix

FROM NewMemberRequest As NMR
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN NewMemberAddress As Address On NMR.TrackingNum = Address.TrackingNum
	LEFT OUTER JOIN fnSafe_GetSASeq(@TrackingNum, @seq1) AS IRA ON NMR.TrackingNum = IRA.TrackingNum
WHERE NMR.TrackingNum = @TrackingNum


Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_B6302_Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO


CREATE PROCEDURE [IMS].[spSafe_D_B6302_Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
--Declare @TrackingNum int
--DROP TABLE #docs
--DEALLOCATE curs

DECLARE @docsubname CHAR(100)
DECLARE @newdocsub CHAR(200)
DECLARE @count INT
DECLARE @docindex INT


--CREATE TABLE #docs(docindex int identity Primary Key, docsubname char(100))

DECLARE curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT '' AS docsubname
	FROM NewMemberRequest AS NMR LEFT JOIN NewMemberSubAccount AS SA ON SA.TrackingNum = NMR.TrackingNum
	WHERE NMR.TrackingNum = @TrackingNum AND SA.SLType = 'I' AND SA.ProductType LIKE 'IRA%' AND SA.Description LIKE '%ROTH%' AND SA.Created = 'Y' AND 1 = 0

--IF @@ROWCOUNT = 0

OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count

      	IF @count = 1
	BEGIN
		SET @docindex = @docindex + 1
		SET @newdocsub = 'ROTH IRA Transfer Request (B-6302)' -- for Suffix(s) ' + CASE LEN(@docsuffix) WHEN 2 THEN @docsuffix WHEN 1 THEN '0' + @docsuffix ELSE 'NA' END
		INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END

      	FETCH NEXT FROM curs INTO @docsubname

	IF @docsubname != NULL
	BEGIN
		SET @newdocsub = @newdocsub + ', ' + @docsubname
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex AND TrackingNum = @TrackingNum
	END
   END

CLOSE curs
DEALLOCATE curs

SELECT *  FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
DELETE FROM NewMemberDoc WHERE TrackingNum = @TrackingNum

--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_B6302_Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [IMS].[spSafe_D_B6302_Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

SELECT @DocIndex As DocIndex
	, RTRIM(NMR.FName) + CASE ISNULL(NMR.MInitial, '') WHEN '' THEN '' ELSE ' ' + RTRIM(NMR.MInitial) END + ' ' + RTRIM(NMR.LName) + CHAR(13) + CHAR(10) +
		CASE WHEN ISNULL(Address.Address1, '') = '' THEN
				RTRIM(RTRIM(Home.Address1) + CASE ISNULL(Home.Address2, '') WHEN '' THEN '' ELSE CHAR(13) + CHAR(10) + RTRIM(Home.Address2) END + CASE ISNULL(Home.Address3, '') WHEN '' THEN '' ELSE CHAR(13) + CHAR(10) + RTRIM(Home.Address3) END) + CHAR(13) + CHAR(10) + RTRIM(Home.City) + ', ' + Home.State + '  ' + CASE LEN(Home.Zip) WHEN 9 THEN LEFT(Home.Zip, 5) + '-' + Right(Home.Zip, 4) ELSE Home.Zip END
			ELSE
				RTRIM(RTRIM(Address.Address1) + CASE ISNULL(Address.Address2, '') WHEN '' THEN '' ELSE CHAR(13) + CHAR(10) + RTRIM(Address.Address2) END + CASE ISNULL(Address.Address3, '') WHEN '' THEN '' ELSE CHAR(13) + CHAR(10) + RTRIM(Address.Address3) END) + CHAR(13) + CHAR(10) + RTRIM(Address.City) + ', ' + Address.State + '  ' + CASE LEN(Address.Zip) WHEN 9 THEN LEFT(Address.Zip, 5) + '-' + Right(Address.Zip, 4) ELSE Address.Zip END
			END AS NameAddress
	, LEFT(NMR.SSN, 3) + '-' + LEFT(RIGHT(NMR.SSN, 6), 2) + '-' + RIGHT(NMR.SSN, 4) AS SSN
	, CONVERT(CHAR(10), NMR.DOB, 101) AS DOB
	, Home.Areacode + '-' + LEFT(Home.Phone, 3) + '-' + RIGHT(RTRIM(Home.Phone), 4) AS HPhone
	, '' AS Account
	, RTRIM(NMR.FName) + ' ' + RTRIM(NMR.LName) AS FullName
	, RTRIM(CAST(NMR.Account AS VARCHAR(10))) + '-Roth IRA' AS AccountNumber

FROM NewMemberRequest As NMR
	LEFT OUTER JOIN NewMemberHome AS Home ON NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork AS Work ON NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN NewMemberAddress AS Address ON NMR.TrackingNum = Address.TrackingNum
WHERE NMR.TrackingNum = @TrackingNum


Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_B6306_Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO


CREATE PROCEDURE [IMS].[spSafe_D_B6306_Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
--Declare @TrackingNum int
--DROP TABLE #docs
--DEALLOCATE curs

DECLARE @docsubname CHAR(100)
DECLARE @newdocsub CHAR(200)
DECLARE @count INT
DECLARE @docindex INT


--CREATE TABLE #docs(docindex int identity Primary Key, docsubname char(100))

DECLARE curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT '' AS docsubname
	FROM NewMemberSubAccount AS SA
	INNER JOIN NewMemberRequest AS NMR ON NMR.TrackingNum = SA.TrackingNum
	WHERE SA.TrackingNum = @TrackingNum AND SA.SLType = 'I' AND SA.ProductType LIKE 'IRA%' AND SA.Description LIKE '%ROTH%' AND SA.Created = 'Y' AND 1 = 0

--IF @@ROWCOUNT = 0

OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count

      	IF @count = 1
	BEGIN
		SET @docindex = @docindex + 1
		SET @newdocsub = 'ROTH IRA Conversion Certification (B-6306)' -- for Suffix(s) ' + CASE LEN(@docsuffix) WHEN 2 THEN @docsuffix WHEN 1 THEN '0' + @docsuffix ELSE 'NA' END
		INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END

      	FETCH NEXT FROM curs INTO @docsubname

	IF @docsubname != NULL
	BEGIN
		SET @newdocsub = @newdocsub + ', ' + @docsubname
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex AND TrackingNum = @TrackingNum
	END
   END

CLOSE curs
DEALLOCATE curs

SELECT 'B6306' AS DocCode, * FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
DELETE FROM NewMemberDoc WHERE TrackingNum = @TrackingNum

--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_B6306_Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [IMS].[spSafe_D_B6306_Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

SELECT @DocIndex As DocIndex
	, RTRIM(NMR.FName) + CASE ISNULL(NMR.MInitial, '') WHEN '' THEN '' ELSE ' ' + RTRIM(NMR.MInitial) END + ' ' + RTRIM(NMR.LName) + CHAR(13) + CHAR(10) +
		CASE WHEN ISNULL(Address.Address1, '') = '' THEN
				RTRIM(RTRIM(Home.Address1) + CASE ISNULL(Home.Address2, '') WHEN '' THEN '' ELSE CHAR(13) + CHAR(10) + RTRIM(Home.Address2) END + CASE ISNULL(Home.Address3, '') WHEN '' THEN '' ELSE CHAR(13) + CHAR(10) + RTRIM(Home.Address3) END) + CHAR(13) + CHAR(10) + RTRIM(Home.City) + ', ' + Home.State + '  ' + CASE LEN(Home.Zip) WHEN 9 THEN LEFT(Home.Zip, 5) + '-' + Right(Home.Zip, 4) ELSE Home.Zip END
			ELSE
				RTRIM(RTRIM(Address.Address1) + CASE ISNULL(Address.Address2, '') WHEN '' THEN '' ELSE CHAR(13) + CHAR(10) + RTRIM(Address.Address2) END + CASE ISNULL(Address.Address3, '') WHEN '' THEN '' ELSE CHAR(13) + CHAR(10) + RTRIM(Address.Address3) END) + CHAR(13) + CHAR(10) + RTRIM(Address.City) + ', ' + Address.State + '  ' + CASE LEN(Address.Zip) WHEN 9 THEN LEFT(Address.Zip, 5) + '-' + Right(Address.Zip, 4) ELSE Address.Zip END
			END AS NameAddress
	, LEFT(NMR.SSN, 3) + '-' + LEFT(RIGHT(NMR.SSN, 6), 2) + '-' + RIGHT(NMR.SSN, 4) AS SSN
	, CONVERT(CHAR(10), NMR.DOB, 101) AS DOB
	, Home.Areacode + '-' + LEFT(Home.Phone, 3) + '-' + RIGHT(RTRIM(Home.Phone), 4) AS HPhone
	, RTRIM(CAST(NMR.Account AS VARCHAR(10))) AS Account

FROM NewMemberRequest AS NMR
	LEFT OUTER JOIN NewMemberHome AS Home ON NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork AS Work ON NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN NewMemberAddress AS Address ON NMR.TrackingNum = Address.TrackingNum
WHERE NMR.TrackingNum = @TrackingNum


Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_B98CF_Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [IMS].[spSafe_D_B98CF_Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
--Declare @TrackingNum int
--DROP TABLE #docs
--DEALLOCATE curs

DECLARE @docsubname CHAR(100)
DECLARE @newdocsub CHAR(200)
DECLARE @count INT
DECLARE @docindex INT


--CREATE TABLE #docs(docindex int identity Primary Key, docsubname char(100))

DECLARE curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT '' AS docsubname
	FROM NewMemberRequest AS NMR LEFT JOIN NewMemberSubAccount AS SA ON SA.TrackingNum = NMR.TrackingNum
	WHERE NMR.TrackingNum = @TrackingNum AND NMR.Processed = 999 AND SA.Description LIKE ('%IRA%') AND SA.Created = 'Y'

--IF @@ROWCOUNT = 0

OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count

      	IF @count = 1
	BEGIN
		SET @docindex = @docindex + 1
		SET @newdocsub = 'Financial Disclosure (B-98CF)'-- for Suffix(s) ' + CASE LEN(@docsubname) WHEN 2 THEN @docsubname WHEN 1 THEN '0' + @docsubname ELSE 'NA' END
		INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END

      	FETCH NEXT FROM curs INTO @docsubname

	IF @docsubname != NULL
	BEGIN
		SET @newdocsub = @newdocsub + ', ' + @docsubname
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex AND TrackingNum = @TrackingNum
	END
   END

CLOSE curs
DEALLOCATE curs

SELECT *  FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
DELETE FROM NewMemberDoc WHERE TrackingNum = @TrackingNum

--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_B98CF_Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO


CREATE PROCEDURE [IMS].[spSafe_D_B98CF_Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

-- STATIC DOCUMENT
SELECT @DocIndex As DocIndex
FROM NewMemberRequest As NMR
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
WHERE NMR.TrackingNum = @TrackingNum


Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_B98CU_Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO


CREATE PROCEDURE [IMS].[spSafe_D_B98CU_Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @docsubname CHAR(100)
DECLARE @newdocsub CHAR(200)
DECLARE @count INT
DECLARE @docindex INT

DECLARE curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT '' AS docsubname
	FROM NewMemberRequest AS NMR
	LEFT JOIN NewMemberSubAccount AS SA ON SA.TrackingNum = NMR.TrackingNum
	WHERE NMR.TrackingNum = @TrackingNum AND SA.SLType = 'I' AND SA.ProductType LIKE 'IRA%' AND SA.Description NOT LIKE '%ROTH%' AND SA.Created = 'Y' AND
	(
		SELECT COUNT(*)
		FROM NewMemberSubAccount AS SA2
		WHERE SA2.TrackingNum = @TrackingNum AND SA2.SLType = 'I' AND SA2.ProductType LIKE 'IRA%' AND SA2.Description NOT LIKE '%ROTH%' AND SA2.Created = 'H'
	) = 0

OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count

      	IF @count = 1
	BEGIN
		SET @docindex = @docindex + 1
		SET @newdocsub = 'IRA Simplifier (B-98CU)' -- for Suffix(s) ' + CASE LEN(@docsuffix) WHEN 2 THEN @docsuffix WHEN 1 THEN '0' + @docsuffix ELSE 'NA' END
		INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END

      	FETCH NEXT FROM curs INTO @docsubname

	IF @docsubname != NULL
	BEGIN
		SET @newdocsub = @newdocsub + ', ' + @docsubname
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex AND TrackingNum = @TrackingNum
	END
   END

CLOSE curs
DEALLOCATE curs

SELECT 'B98CU' AS DocCode, * FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
DELETE FROM NewMemberDoc WHERE TrackingNum = @TrackingNum

--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_B98CU_Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [IMS].[spSafe_D_B98CU_Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @count INT
DECLARE @beseq1 INT
DECLARE @beseq2 INT
DECLARE @beseq3 INT
DECLARE @beseq4 INT
DECLARE @beseq5 INT

SET @beseq1 = 1
SET @beseq2 = 2
SET @beseq3 = 3
SET @beseq4 = 4
SET @beseq5 = 5
SET @count = (SELECT COUNT(*) FROM NewMemberBeneficiary BE WHERE BE.TrackingNum = @TrackingNum AND BE.BType IN ('IB', 'IC'))
IF @count > 5	-- Don't display Beneficiaries if there are more than 5
BEGIN
	SET @beseq1 = 0
	SET @beseq2 = 0
	SET @beseq3 = 0
	SET @beseq4 = 0
	SET @beseq5 = 0
END

SELECT @DocIndex As DocIndex
	, RTRIM(NMR.FName) + CASE ISNULL(NMR.MInitial, '') WHEN '' THEN '' ELSE ' ' + RTRIM(NMR.MInitial) END + ' ' + RTRIM(NMR.LName) + CHAR(13) + CHAR(10) +
		CASE WHEN ISNULL(Address.Address1, '') = '' THEN
				RTRIM(RTRIM(Home.Address1) + CASE ISNULL(Home.Address2, '') WHEN '' THEN '' ELSE CHAR(13) + CHAR(10) + RTRIM(Home.Address2) END + CASE ISNULL(Home.Address3, '') WHEN '' THEN '' ELSE CHAR(13) + CHAR(10) + RTRIM(Home.Address3) END) + CHAR(13) + CHAR(10) + RTRIM(Home.City) + ', ' + Home.State + '  ' + CASE LEN(Home.Zip) WHEN 9 THEN LEFT(Home.Zip, 5) + '-' + Right(Home.Zip, 4) ELSE Home.Zip END
			ELSE
				RTRIM(RTRIM(Address.Address1) + CASE ISNULL(Address.Address2, '') WHEN '' THEN '' ELSE CHAR(13) + CHAR(10) + RTRIM(Address.Address2) END + CASE ISNULL(Address.Address3, '') WHEN '' THEN '' ELSE CHAR(13) + CHAR(10) + RTRIM(Address.Address3) END) + CHAR(13) + CHAR(10) + RTRIM(Address.City) + ', ' + Address.State + '  ' + CASE LEN(Address.Zip) WHEN 9 THEN LEFT(Address.Zip, 5) + '-' + Right(Address.Zip, 4) ELSE Address.Zip END
			END AS NameAddress
	, LEFT(NMR.SSN, 3) + '-' + LEFT(RIGHT(NMR.SSN, 6), 2) + '-' + RIGHT(NMR.SSN, 4) AS SSN
	, Home.Areacode + '-' + LEFT(Home.Phone, 3) + '-' + RIGHT(RTRIM(Home.Phone), 4) AS HPhone
	, Work.Areacode + '-' + LEFT(Work.Phone, 3) + '-' + RIGHT(RTRIM(Work.Phone), 4) AS WPhone
	, RTRIM(CAST(NMR.Account AS VARCHAR(10))) AS Account
	, CONVERT(CHAR(10), NMR.DOB, 101) AS DOB
	, RTRIM(NMR.Email1) AS Email
	, CONVERT(CHAR(10), NMR.CreatedOn, 101) AS DOB

	, RTRIM(BE01.FullName) AS B01FullName
	, RTRIM(BE01.FullAddress)  AS B01FullAddress
	, CONVERT(CHAR(10), BE01.DOB, 101) AS B01DOB
	, LEFT(BE01.SSN, 3) + '-' + LEFT(RIGHT(BE01.SSN, 6), 2) + '-' + RIGHT(BE01.SSN, 4) AS B01SSN
	, RTRIM(BE01.Relationship) AS B01Relationship
	, CASE WHEN BE01.Type = 'IB' THEN 'X' END AS B01TypeP
	, CASE WHEN BE01.Type = 'IC' THEN 'X' END AS B01TypeC
	, RTRIM(BE01.[Percent]) AS B01Percent

	, RTRIM(BE02.FullName) AS B02FullName
	, RTRIM(BE02.FullAddress)  AS B02FullAddress
	, CONVERT(CHAR(10), BE02.DOB, 101) AS B02DOB
	, LEFT(BE02.SSN, 3) + '-' + LEFT(RIGHT(BE02.SSN, 6), 2) + '-' + RIGHT(BE02.SSN, 4) AS B02SSN
	, RTRIM(BE02.Relationship) AS B02Relationship
	, CASE WHEN BE02.Type = 'IB' THEN 'X' END AS B02TypeP
	, CASE WHEN BE02.Type = 'IC' THEN 'X' END AS B02TypeC
	, RTRIM(BE02.[Percent]) AS B02Percent

	, RTRIM(BE03.FullName) AS B03FullName
	, RTRIM(BE03.FullAddress)  AS B03FullAddress
	, CONVERT(CHAR(10), BE03.DOB, 101) AS B03DOB
	, LEFT(BE03.SSN, 3) + '-' + LEFT(RIGHT(BE03.SSN, 6), 2) + '-' + RIGHT(BE03.SSN, 4) AS B03SSN
	, RTRIM(BE03.Relationship) AS B03Relationship
	, CASE WHEN BE03.Type = 'IB' THEN 'X' END AS B03TypeP
	, CASE WHEN BE03.Type = 'IC' THEN 'X' END AS B03TypeC
	, RTRIM(BE03.[Percent]) AS B03Percent

	, RTRIM(BE04.FullName) AS B04FullName
	, RTRIM(BE04.FullAddress)  AS B04FullAddress
	, CONVERT(CHAR(10), BE04.DOB, 101) AS B04DOB
	, LEFT(BE04.SSN, 3) + '-' + LEFT(RIGHT(BE04.SSN, 6), 2) + '-' + RIGHT(BE04.SSN, 4) AS B04SSN
	, RTRIM(BE04.Relationship) AS B04Relationship
	, CASE WHEN BE04.Type = 'IB' THEN 'X' END AS B04TypeP
	, CASE WHEN BE04.Type = 'IC' THEN 'X' END AS B04TypeC
	, RTRIM(BE04.[Percent]) AS B04Percent

	, RTRIM(BE05.FullName) AS B05FullName
	, RTRIM(BE05.FullAddress)  AS B05FullAddress
	, CONVERT(CHAR(10), BE05.DOB, 101) AS B05DOB
	, LEFT(BE05.SSN, 3) + '-' + LEFT(RIGHT(BE05.SSN, 6), 2) + '-' + RIGHT(BE05.SSN, 4) AS B05SSN
	, RTRIM(BE05.Relationship) AS B05Relationship
	, CASE WHEN BE05.Type = 'IB' THEN 'X' END AS B05TypeP
	, CASE WHEN BE05.Type = 'IC' THEN 'X' END AS B05TypeC
	, RTRIM(BE05.[Percent]) AS B05Percent
FROM NewMemberRequest As NMR
	LEFT OUTER JOIN NewMemberHome AS Home ON NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork AS Work ON NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN NewMemberAddress AS Address ON NMR.TrackingNum = Address.TrackingNum
	LEFT OUTER JOIN fnSafe_GetBEType(@TrackingNum, 'IB', 'IC', '') AS BE01 ON NMR.TrackingNum = BE01.TrackingNum AND BE01.BeneficiarySequence = @beseq1
	LEFT OUTER JOIN fnSafe_GetBEType(@TrackingNum, 'IB', 'IC', '') AS BE02 ON NMR.TrackingNum = BE02.TrackingNum AND BE02.BeneficiarySequence = @beseq2
	LEFT OUTER JOIN fnSafe_GetBEType(@TrackingNum, 'IB', 'IC', '') AS BE03 ON NMR.TrackingNum = BE03.TrackingNum AND BE03.BeneficiarySequence = @beseq3
	LEFT OUTER JOIN fnSafe_GetBEType(@TrackingNum, 'IB', 'IC', '') AS BE04 ON NMR.TrackingNum = BE04.TrackingNum AND BE04.BeneficiarySequence = @beseq4
	LEFT OUTER JOIN fnSafe_GetBEType(@TrackingNum, 'IB', 'IC', '') AS BE05 ON NMR.TrackingNum = BE05.TrackingNum AND BE05.BeneficiarySequence = @beseq5
WHERE NMR.TrackingNum = @TrackingNum


Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_MBR497_Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [IMS].[spSafe_D_MBR497_Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
--Declare @TrackingNum int
--DROP TABLE #docs
--DEALLOCATE curs

DECLARE @docsubname CHAR(100)
DECLARE @newdocsub CHAR(200)
DECLARE @count INT
DECLARE @docindex INT


--CREATE TABLE #docs(docindex int identity Primary Key, docsubname char(100))

DECLARE curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT '' AS docsubname
	FROM NewMemberRequest AS NMR
	WHERE NMR.TrackingNum = @TrackingNum AND NMR.Processed = 999 AND NMR.AccountType IN ('X')

--IF @@ROWCOUNT = 0

OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count

      	IF @count = 1
	BEGIN
		SET @docindex = @docindex + 1
		SET @newdocsub = 'Opt-Out Privacy Notice (MBR-497)'-- for Suffix(s) ' + CASE LEN(@docsubname) WHEN 2 THEN @docsubname WHEN 1 THEN '0' + @docsubname ELSE 'NA' END
		INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END

      	FETCH NEXT FROM curs INTO @docsubname

	IF @docsubname != NULL
	BEGIN
		SET @newdocsub = @newdocsub + ', ' + @docsubname
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex AND TrackingNum = @TrackingNum
	END
   END

CLOSE curs
DEALLOCATE curs

SELECT *  FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
DELETE FROM NewMemberDoc WHERE TrackingNum = @TrackingNum

--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_MBR497_Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [IMS].[spSafe_D_MBR497_Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

-- STATIC DOCUMENT
SELECT @DocIndex As DocIndex
FROM NewMemberRequest As NMR
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
WHERE NMR.TrackingNum = @TrackingNum


Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_MBR500_Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [IMS].[spSafe_D_MBR500_Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
--Declare @TrackingNum int
--DROP TABLE #docs
--DEALLOCATE curs

DECLARE @docsubname CHAR(100)
DECLARE @newdocsub CHAR(200)
DECLARE @count INT
DECLARE @docindex INT


--CREATE TABLE #docs(docindex int identity Primary Key, docsubname char(100))

DECLARE curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT RTRIM(NMR.FName) + ' ' + RTRIM(NMR.LName) AS docsubname
	FROM NewMemberRequest AS NMR
	WHERE NMR.TrackingNum = @TrackingNum AND NMR.Processed = 999 AND NMR.Created = 'Y' AND NMR.AccountType IN ('P', 'LS') AND NMR.Age >= 18

--IF @@ROWCOUNT = 0

OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count

      	IF @count = 1
	BEGIN
		SET @docindex = @docindex + 1
		SET @newdocsub = 'Proxy Card (MBR-500) - ' + @docsubname
		INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END

      	FETCH NEXT FROM curs INTO @docsubname

	IF @docsubname != NULL
	BEGIN
		SET @newdocsub = @newdocsub + ', ' + @docsubname
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex AND TrackingNum = @TrackingNum
	END
   END

CLOSE curs
DEALLOCATE curs

SELECT 'MBR500' AS DocCode, 'PROXY CARD' AS ScanName, * FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
DELETE FROM NewMemberDoc WHERE TrackingNum = @TrackingNum

--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_MBR500_Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [IMS].[spSafe_D_MBR500_Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

SELECT @DocIndex As DocIndex
	--Account
	--SSN
	--FullName
	--ApplyDate
FROM NewMemberRequest As NMR
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
WHERE NMR.TrackingNum = @TrackingNum


Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_MBR500J_Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [IMS].[spSafe_D_MBR500J_Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
--Declare @TrackingNum int
--DROP TABLE #docs
--DEALLOCATE curs

DECLARE @docsubname CHAR(100)
DECLARE @newdocsub CHAR(200)
DECLARE @count INT
DECLARE @docindex INT
DECLARE @JOSeq INT
--DECLARE @NewMemberDoc Table (docindex int, docsubname char(100), TrackingNum int, JOSequences varchar(2))

--CREATE TABLE #docs(docindex int identity Primary Key, docsubname char(100))

DECLARE curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT RTRIM(JO.FName) + ' ' + RTRIM(JO.LName) AS docsubname, RTRIM(CONVERT(CHAR(100), JO.Sequence)) AS JOSeq
	FROM NewMemberJointOwner AS JO INNER JOIN NewMemberRequest AS NMR ON NMR.TrackingNum = JO.TrackingNum
	WHERE JO.TrackingNum = @TrackingNum AND NMR.Processed = 999 AND NMR.AccountType IN ('P') AND NMR.Created = 'Y' AND JO.JointOwnerType IN ('JT', 'MM') AND JO.CreateHost <> 'N' --AND JO.Age >= 18

--IF @@ROWCOUNT = 0

OPEN curs
FETCH NEXT FROM curs INTO @docsubname, @JOSeq
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count

	SET @docindex = @docindex + 1
	SET @newdocsub = 'Proxy Card (MBR-500) - ' + @docsubname
	INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum, JOSequences) VALUES(@docindex, @newdocsub, @TrackingNum, @JOSeq)

      	FETCH NEXT FROM curs INTO @docsubname, @JOSeq

	IF @docsubname != NULL
	BEGIN
		SET @newdocsub = @newdocsub + ', ' + @docsubname
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex AND TrackingNum = @TrackingNum
	END
   END

CLOSE curs
DEALLOCATE curs

SELECT 'MBR500' AS DocCode, 'PROXY CARD' AS ScanName, * FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
DELETE FROM NewMemberDoc WHERE TrackingNum = @TrackingNum

--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_MBR500J_Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [IMS].[spSafe_D_MBR500J_Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

DECLARE @count INT
DECLARE @FullName CHAR(40)
DECLARE @joFullName CHAR(40)
DECLARE @SSN CHAR(11)
DECLARE @joSSN CHAR(11)
DECLARE curs2 CURSOR LOCAL FAST_FORWARD FOR
	SELECT RTRIM(JO.FName) + ' ' + RTRIM(JO.LName) AS FullName, LEFT(JO.SSN, 3) + '-' + LEFT(RIGHT(JO.SSN, 6), 2) + '-' + RIGHT(JO.SSN, 4) AS SSN
	FROM NewMemberJointOwner AS JO INNER JOIN NewMemberRequest AS NMR ON NMR.TrackingNum = JO.TrackingNum
	WHERE JO.TrackingNum = @TrackingNum AND NMR.Processed = 999 AND NMR.AccountType IN ('P') AND NMR.Created = 'Y' AND JO.JointOwnerType IN ('JT', 'MM') AND JO.CreateHost <> 'N' --AND JO.Age >= 18
OPEN curs2
FETCH NEXT FROM curs2 INTO @joFullName, @joSSN
SET @count = 1
PRINT @@FETCH_STATUS
	WHILE @@FETCH_STATUS = 0
	BEGIN
		IF (@count = @DocIndex)
		BEGIN
			SET @FullName = @joFullName
			SET @SSN = @joSSN
		END
		FETCH NEXT FROM curs2 INTO @joFullName, @joSSN
	SET @count = @count + 1
	PRINT @count
	END
CLOSE curs2
DEALLOCATE curs2

SELECT @DocIndex As DocIndex
	--Account
	, RTRIM(@SSN) AS SSN
	, RTRIM(@FullName) AS FullName
	--ApplyDate
FROM NewMemberRequest As NMR
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
WHERE NMR.TrackingNum = @TrackingNum


Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_S1011_Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO


CREATE PROCEDURE [IMS].[spSafe_D_S1011_Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
--Declare @TrackingNum int
--DROP TABLE #docs
--DEALLOCATE curs

Declare @docsubname char(100)
Declare @newdocsub char(200)
Declare @count int
Declare @docindex int


--CREATE TABLE #docs(docindex int identity Primary Key, docsubname char(100))

Declare curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT SA.Suffix AS docsubname
	FROM NewMemberSubAccount AS SA INNER JOIN NewMemberRequest AS NMR ON NMR.TrackingNum = SA.TrackingNum
	WHERE SA.TrackingNum = @TrackingNum AND NMR.Processed = 999 AND NMR.AccountType IN ('P', 'TE', 'TR', 'TT', 'BS', 'BE', 'BH', 'BW', 'BA', 'BC', 'BG', 'BL', 'BP', 'BY', 'M2', 'M5', 'M7', '17', 'BO', 'C', 'CG', 'RP', 'E') AND SA.ProductType = 'SDA'

--IF @@ROWCOUNT = 0

OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count

	Set @docindex = @docindex + 1
	SET @newdocsub = 'My Checking Switch Kit (S-1011) Suffix: ' + CASE LEN(@docsubname) WHEN 2 THEN @docsubname WHEN 1 THEN '0' + @docsubname ELSE 'NA' END
	INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)

      	FETCH NEXT FROM curs INTO @docsubname

	IF @docsubname != NULL
	BEGIN
		SET @newdocsub = @newdocsub + ', ' + @docsubname
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex AND TrackingNum = @TrackingNum
	END
   END

CLOSE curs
DEALLOCATE curs

Select *  FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Delete FROM NewMemberDoc WHERE TrackingNum = @TrackingNum

--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_S1011_Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [IMS].[spSafe_D_S1011_Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

SELECT @DocIndex As DocIndex
	, SSDA.MICRNumber AS MICR
FROM NewMemberRequest As NMR
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN fnSafe_GetSAType(@TrackingNum, 'SDA', 'S') AS SSDA ON NMR.TrackingNum = SSDA.TrackingNum
WHERE NMR.TrackingNum = @TrackingNum


Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_S1064V_Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [IMS].[spSafe_D_S1064V_Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @docsubname CHAR(100)
DECLARE @newdocsub CHAR(200)
DECLARE @count INT
DECLARE @docindex INT

DECLARE curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT '' AS docsubname
	FROM NewMemberSubAccount AS SA INNER JOIN NewMemberRequest AS NMR ON NMR.TrackingNum = SA.TrackingNum
	WHERE SA.TrackingNum = @TrackingNum AND NMR.Processed = 999 AND SA.Created = 'Y' AND SA.CollateralCode = '809' AND SA.VRLCode = '777' AND (SA.ApprovalTier <> '1' AND SA.ApprovalTier <> '2')

--IF @@ROWCOUNT = 0

OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count

      	IF @count = 1
	BEGIN
		Set @docindex = @docindex + 1
		SET @newdocsub = 'Platinum Rewards Agreement (Variable) (S-1064V)'-- for Suffix(s) ' + CASE LEN(@docsubname) WHEN 2 THEN @docsubname WHEN 1 THEN '0' + @docsubname ELSE 'NA' END
		INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
		Set @docindex = @docindex + 1
		SET @newdocsub = 'Platinum Rewards Agreement (Variable) (S-1064V) - Copy'-- for Suffix(s) ' + CASE LEN(@docsubname) WHEN 2 THEN @docsubname WHEN 1 THEN '0' + @docsubname ELSE 'NA' END
		INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END

      	FETCH NEXT FROM curs INTO @docsubname

	IF @docsubname != NULL
	BEGIN
		SET @newdocsub = @newdocsub + ', ' + @docsubname
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex AND TrackingNum = @TrackingNum
	END
   END

CLOSE curs
DEALLOCATE curs

SELECT * FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
DELETE FROM NewMemberDoc WHERE TrackingNum = @TrackingNum

Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_S1064V_Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO


CREATE PROCEDURE [IMS].[spSafe_D_S1064V_Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

SELECT @DocIndex As DocIndex
	, RTRIM(CONVERT(CHAR(10), CAST(ROUND(CAST(S809.APR AS int) * 0.0001, 2, 1) AS Decimal(10,2)))) + '%' AS APR
	, RTRIM(CONVERT(CHAR(10), CAST(CAST(S809.APR AS int) * 0.0001 / 12 AS Decimal(10,3)))) + '%' AS PeriodicRate
	, CASE S809.ApprovalTier
		WHEN '1' THEN '6.65'
		WHEN '2' THEN '7.65'
		WHEN '3' THEN '10.65'
		WHEN '4' THEN '12.65'
		END AS Margin
FROM NewMemberRequest As NMR
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN fnSafe_GetSA(@TrackingNum, '809', '809V') AS S809 ON NMR.TrackingNum = S809.TrackingNum
WHERE NMR.TrackingNum = @TrackingNum


Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_S1064VI_Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO


CREATE PROCEDURE [IMS].[spSafe_D_S1064VI_Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @docsubname CHAR(100)
DECLARE @newdocsub CHAR(200)
DECLARE @count INT
DECLARE @docindex INT

DECLARE curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT '' AS docsubname
	FROM NewMemberSubAccount AS SA INNER JOIN NewMemberRequest AS NMR ON NMR.TrackingNum = SA.TrackingNum
	WHERE SA.TrackingNum = @TrackingNum AND NMR.Processed = 999 AND SA.Created = 'Y' AND SA.CollateralCode = '809' AND SA.VRLCode = '777' AND (SA.ApprovalTier = '1' OR SA.ApprovalTier = '2')

--IF @@ROWCOUNT = 0

OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count

      	IF @count = 1
	BEGIN
		Set @docindex = @docindex + 1
		SET @newdocsub = 'Platinum Rewards Agreement (Variable - Intro) (S-1064VI)'-- for Suffix(s) ' + CASE LEN(@docsubname) WHEN 2 THEN @docsubname WHEN 1 THEN '0' + @docsubname ELSE 'NA' END
		INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
		Set @docindex = @docindex + 1
		SET @newdocsub = 'Platinum Rewards Agreement (Variable - Intro) (S-1064VI) - Copy'-- for Suffix(s) ' + CASE LEN(@docsubname) WHEN 2 THEN @docsubname WHEN 1 THEN '0' + @docsubname ELSE 'NA' END
		INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END

      	FETCH NEXT FROM curs INTO @docsubname

	IF @docsubname != NULL
	BEGIN
		SET @newdocsub = @newdocsub + ', ' + @docsubname
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex AND TrackingNum = @TrackingNum
	END
   END

CLOSE curs
DEALLOCATE curs

SELECT * FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
DELETE FROM NewMemberDoc WHERE TrackingNum = @TrackingNum

Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_S1064VI_Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [IMS].[spSafe_D_S1064VI_Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

SELECT @DocIndex As DocIndex
	, RTRIM(CONVERT(CHAR(10), CAST(ROUND(CAST(S809.APR AS int) * 0.0001, 2, 1) AS Decimal(10,2)))) + '%' AS APR
	, RTRIM(CONVERT(CHAR(10), CAST(CAST(S809.APR AS int) * 0.0001 / 12 AS Decimal(10,3)))) + '%' AS PeriodicRate
-- The values on the next line also need to be updated in ADAPIConfig.
	, CASE S809.ApprovalTier
		WHEN '1' THEN '6.65'
		WHEN '2' THEN '7.65'
		WHEN '3' THEN '10.65'
		WHEN '4' THEN '12.65'
		END AS Margin
	, RTRIM(CONVERT(CHAR(10), CAST(ROUND(CAST('019000' AS int) * 0.0001, 2, 1) AS Decimal(10,2)))) + '%' AS IntroAPR
	, RTRIM(CONVERT(CHAR(10), CAST(CAST('019000' AS int) * 0.0001 / 12 AS Decimal(10,3)))) + '%' AS IntroPeriodicRate
	, '6' AS IntroMonths
	, 'six' AS IntroMonthsWord
FROM NewMemberRequest As NMR
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN fnSafe_GetSA(@TrackingNum, '809', '809V') AS S809 ON NMR.TrackingNum = S809.TrackingNum
WHERE NMR.TrackingNum = @TrackingNum


Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_S132_Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [IMS].[spSafe_D_S132_Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @docsubname CHAR(100)
DECLARE @newdocsub CHAR(200)
DECLARE @count INT
DECLARE @docindex INT

DECLARE curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT '' AS docsubname
	FROM NewMemberSubAccount AS SA
	LEFT JOIN NewMemberRequest AS NMR ON NMR.TrackingNum = SA.TrackingNum
	WHERE SA.TrackingNum = @TrackingNum AND SA.ProductType = 'SDA' AND SA.Created = 'Y' AND NMR.Processed = 999 AND NMR.AccountType IN ('P', 'TE', 'TR', 'TT') AND SA.OptInOptOutOptionID IN (1,2)

OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count

      	IF @count = 1
	BEGIN
		SET @docindex = @docindex + 1
		SET @newdocsub = 'Overdraft Service Options (S-132)' -- Account: ' + @docsubname
		INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END

      	FETCH NEXT FROM curs INTO @docsubname

	IF @docsubname != NULL
	BEGIN
		SET @newdocsub = @newdocsub + ', ' + @docsubname
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex AND TrackingNum = @TrackingNum
	END
   END

CLOSE curs
DEALLOCATE curs

SELECT 'S132' AS DocCode, 'OPT-IN' AS ScanName, * FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
--SELECT * FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
DELETE FROM NewMemberDoc WHERE TrackingNum = @TrackingNum

Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_S132_Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [IMS].[spSafe_D_S132_Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

SELECT @DocIndex As DocIndex
	, CASE WHEN Flag.FlagNumber = 3 THEN
		CASE WHEN NMR.AccountClass = 'P' THEN RTRIM(NMR.FName) + CASE ISNULL(NMR.MInitial, '') WHEN '' THEN '' ELSE ' ' + RTRIM(NMR.MInitial) END + ' ' + RTRIM(NMR.LName)
		ELSE RTRIM(REPLACE(NMR.OrganizationName, '/', '')) END
	  ELSE '' END AS FullName
	, CASE WHEN Flag.FlagNumber = 3 THEN RTRIM(NMR.Account) ELSE '' END AS Account
	, NMR.ApplyDate AS ApplyDate
	, CASE WHEN Flag.FlagNumber = 3 THEN RIGHT('00' + RTRIM(CAST(Flag.Suffix AS VARCHAR(2))), 2) ELSE '' END AS Suffix
FROM NewMemberRequest As NMR
	LEFT OUTER JOIN NewMemberHome AS Home ON NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork AS Work ON NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN NewMemberFlag AS Flag ON NMR.TrackingNum = Flag.TrackingNum AND Flag.FlagNumber = 3
WHERE NMR.TrackingNum = @TrackingNum

Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_S137_Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO


CREATE PROCEDURE [IMS].[spSafe_D_S137_Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

DECLARE @docsubname CHAR(100)
DECLARE @newdocsub CHAR(200)
DECLARE @count INT
DECLARE @docindex INT

DECLARE curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT DISTINCT '' AS docsubname
	FROM IMS.NewMemberRequest AS NMR
	LEFT JOIN IMS.NewMemberPlasticCard AS PC ON PC.TrackingNum = NMR.TrackingNum
	LEFT JOIN IMS.NewMemberSubAccount AS SA ON SA.TrackingNum = NMR.TrackingNum AND (SA.ProductType <> 'CERT' OR SA.SubAccountType = 'HOL04')
	WHERE NMR.TrackingNum = @TrackingNum AND NMR.Processed = 999 AND (((SA.ProductType <> 'CERT' OR SA.SubAccountType = 'HOL04') AND SA.Created = 'Y') OR NMR.Created = 'Y' OR (PC.Created = 'Y' AND PC.TypeCode IN ('C', 'D')))

OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count

      	IF @count = 1
	BEGIN
		SET @docindex = @docindex + 1
		SET @newdocsub = 'Fee Schedule (S-137)'-- for Suffix(s) ' + CASE LEN(@docsubname) WHEN 2 THEN @docsubname WHEN 1 THEN '0' + @docsubname ELSE 'NA' END
		INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END

      	FETCH NEXT FROM curs INTO @docsubname

	IF @docsubname != NULL
	BEGIN
		SET @newdocsub = @newdocsub + ', ' + @docsubname
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex AND TrackingNum = @TrackingNum
	END
   END

CLOSE curs
DEALLOCATE curs

SELECT * FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
DELETE FROM NewMemberDoc WHERE TrackingNum = @TrackingNum

Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_S137_Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [IMS].[spSafe_D_S137_Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

-- STATIC DOCUMENT
SELECT @DocIndex As DocIndex
FROM NewMemberRequest As NMR
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
WHERE NMR.TrackingNum = @TrackingNum


Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_S145_Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [IMS].[spSafe_D_S145_Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @docsubname VARCHAR(1000)
DECLARE @newdocsub CHAR(200)
DECLARE @TempTable TABLE
	(
	[AllSequences]	CHAR(500),
	[JOSequences]	CHAR(500)
	)
DECLARE @ALLSEQ VARCHAR(500)
DECLARE @JOSEQ VARCHAR(500)
DECLARE @BESEQ VARCHAR(500)
DECLARE @SUFF VARCHAR(2)
DECLARE @TEMPCOUNT INT
DECLARE @count INT
DECLARE @docindex INT
DECLARE @Testing INT
DECLARE @Testing2 INT
DECLARE @JOSeqList CHAR(100)
DECLARE @JList CHAR(100)
DECLARE @BESeqList CHAR(100)
DECLARE @BList CHAR(100)
DECLARE @Suffix CHAR(2)
DECLARE @Suffixes CHAR(500)
DECLARE @Suffixes2 CHAR(500)
DECLARE @SuffixList TABLE
	(
	[JOType]	CHAR(2),
	[Suffixes]	CHAR(500)
	)

DECLARE @jocount INT
SET @jocount = (SELECT COUNT(*) FROM IMS.NewMemberJointOwner JO WHERE JO.TrackingNum = @TrackingNum AND JO.JointOwnerType IN ('JM', 'JP', 'JT', 'MM'))
PRINT 'JO Count is: ' + CAST(@jocount AS VARCHAR(2))
DECLARE @jbcount INT
DECLARE @jbseqcount INT
SET @jbcount = (SELECT COUNT(*) FROM IMS.NewMemberJointOwner JO WHERE JO.TrackingNum = @TrackingNum AND JO.JointOwnerType IN ('PB', 'BB'))
PRINT 'JB Count is: ' + CAST(@jbcount AS VARCHAR(2))
DECLARE @buscount INT
SET @buscount = (SELECT COUNT(*) FROM IMS.NewMemberRequest NMR WHERE NMR.TrackingNum = @TrackingNum AND NMR.AccountType IN ('BS', 'BE', 'BH', 'BW'))
PRINT 'Business Count is: ' + CAST(@buscount AS VARCHAR(2))

-- Get Suffixes --------------------------------------------------------------------------------------------------------------------------------------------

-- Get the list of JO's by Suffix
-- This sorts by Suffix
DECLARE tempcur CURSOR LOCAL FAST_FORWARD
FOR
	SELECT DISTINCT SAJO.AllSequences, SAJO.JOSequences, SA.Suffix
	FROM IMS.NewMemberSubAccount AS SA
	LEFT JOIN IMS.NewMemberJointLink AS JL ON JL.TrackingNum = SA.TrackingNum AND JL.SubAccountSequence = SA.Sequence
	LEFT JOIN IMS.fnSafe_GetSAJOSeq(@TrackingNum, 2, 'JM', 'JP', 'JT', 'MM', '', '', '', '', '') AS SAJO ON SAJO.TrackingNum = SA.TrackingNum AND SAJO.Suffix = SA.Suffix
	LEFT JOIN IMS.NewMemberRequest AS NMR ON NMR.TrackingNum = SA.TrackingNum
	WHERE SA.TrackingNum = @TrackingNum AND SA.Created = 'Y' AND SA.ProductType NOT LIKE 'IRA%' AND NMR.Processed = 999 AND NMR.AccountType IN ('P', 'M2', 'M5', 'M7', '17', 'BS', 'BE', 'BH', 'BW') AND SA.ProductType NOT LIKE 'IRA%'
	ORDER BY SA.Suffix
OPEN tempcur
FETCH NEXT FROM tempcur INTO @ALLSEQ, @JOSEQ, @SUFF
WHILE @@FETCH_STATUS = 0
BEGIN
	SET @TEMPCOUNT = (SELECT COUNT(*) FROM @TempTable WHERE JOSequences = @JOSEQ)
	IF @TEMPCOUNT = 0
	BEGIN
		INSERT @TempTable ([AllSequences], [JOSequences]) VALUES (@ALLSEQ, @JOSEQ)
	END
	FETCH NEXT FROM tempcur INTO @ALLSEQ, @JOSEQ, @SUFF
END
CLOSE tempcur
DEALLOCATE tempcur

DECLARE mycur1 CURSOR LOCAL FAST_FORWARD
FOR
	SELECT * FROM @TempTable
OPEN mycur1
FETCH NEXT FROM mycur1 INTO @JOSeqList, @JList

WHILE @@FETCH_STATUS = 0
BEGIN
PRINT '--------------------------------------------------------------------------------------------------------------------'
PRINT 'JOSeqList:' + ISNULL(@JOSeqList, '(none)')

-- Combine a list of Suffixes for each unique list of JO's
	DECLARE mycur2 CURSOR LOCAL FAST_FORWARD
	FOR
		SELECT DISTINCT SA.Suffix
		FROM IMS.NewMemberSubAccount AS SA
		LEFT JOIN IMS.fnSafe_GetSAJOSeq(@TrackingNum, 2, 'JM', 'JP', 'JT', 'MM', '', '', '', '', '') AS SAJO ON SAJO.TrackingNum = SA.TrackingNum AND SAJO.Suffix = SA.Suffix
		WHERE SA.TrackingNum = @TrackingNum AND SA.Created = 'Y' AND SA.ProductType NOT LIKE 'IRA%' AND SAJO.Suffix = SA.Suffix AND SAJO.AllSequences = @JOSeqList
		ORDER BY SA.Suffix
	OPEN mycur2
	FETCH NEXT FROM mycur2
	INTO @Suffix

	SET @Suffixes = ''
	WHILE @@FETCH_STATUS = 0
	BEGIN
		IF @Suffix IS NOT NULL
		BEGIN
			SET @Suffixes = RTRIM(@Suffixes) + CASE WHEN @Suffixes <> '' THEN ', ' ELSE '' END
			SET @Suffixes = RTRIM(@Suffixes) + RIGHT('0' + CAST(RTRIM(@Suffix) AS VARCHAR(2)), 2)
--			PRINT 'Current: ' + RTRIM(@Suffixes) + '  (Added: ' + RTRIM(@Suffix) + ')'
		END


		FETCH NEXT FROM mycur2
		INTO @Suffix
	END
	CLOSE mycur2
	DEALLOCATE mycur2

	SET @Suffixes = REPLACE(@Suffixes, ',', ', ')
	PRINT 'JO SUFFIXES: ' + @Suffixes
	INSERT @SuffixList ([JOType], [Suffixes]) VALUES ('JO', @Suffixes)

	FETCH NEXT FROM mycur1
	INTO @JOSeqList, @JList
END
CLOSE mycur1
DEALLOCATE mycur1

------------------------------------------------------------------------------------------------------------------------------------------------------------------

-- Get the list of BE's by Suffix
DELETE FROM @TempTable
------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- This sorts by Suffix
DECLARE tempcur CURSOR LOCAL FAST_FORWARD
FOR
	SELECT DISTINCT SAJO.AllSequences, SAJO.BESequences, SA.Suffix
	FROM IMS.NewMemberSubAccount AS SA
	LEFT JOIN IMS.NewMemberJointLink AS JL ON JL.TrackingNum = SA.TrackingNum AND JL.SubAccountSequence = SA.Sequence
	LEFT JOIN IMS.fnSafe_GetSAJOSeq(@TrackingNum, 999, '', '', '', '', '', '', 'PB', 'BB', '') AS SAJO ON SAJO.TrackingNum = SA.TrackingNum AND SAJO.Suffix = SA.Suffix
	LEFT JOIN IMS.NewMemberRequest AS NMR ON NMR.TrackingNum = SA.TrackingNum
	WHERE SA.TrackingNum = @TrackingNum AND NMR.Processed = 999 AND NMR.AccountType IN ('P', 'M2', 'M5', 'M7', '17', 'BS', 'BE', 'BH', 'BW') AND SA.ProductType NOT LIKE 'IRA%' AND SAJO.BESequences <> ''
	ORDER BY SA.Suffix
OPEN tempcur
FETCH NEXT FROM tempcur INTO @ALLSEQ, @BESEQ, @SUFF
WHILE @@FETCH_STATUS = 0
BEGIN
	SET @TEMPCOUNT = (SELECT COUNT(*) FROM @TempTable WHERE JOSequences = @BESEQ)
	IF @TEMPCOUNT = 0
	BEGIN
		INSERT @TempTable ([AllSequences], [JOSequences]) VALUES (@ALLSEQ, @BESEQ)
	END
	FETCH NEXT FROM tempcur INTO @ALLSEQ, @BESEQ, @SUFF
END
CLOSE tempcur
DEALLOCATE tempcur

DECLARE mycur1 CURSOR LOCAL FAST_FORWARD
FOR
	SELECT * FROM @TempTable
OPEN mycur1
FETCH NEXT FROM mycur1 INTO @BESeqList, @BList

WHILE @@FETCH_STATUS = 0
BEGIN
PRINT '--------------------------------------------------------------------------------------------------------------------'
PRINT 'BESeqList:' + ISNULL(@BESeqList, '(none)')

-- Combine a list of Suffixes for each unique list of JO's
	DECLARE mycur2 CURSOR LOCAL FAST_FORWARD
	FOR
		SELECT DISTINCT SA.Suffix
		FROM IMS.NewMemberSubAccount AS SA
		LEFT JOIN IMS.fnSafe_GetSAJOSeq(@TrackingNum, 999, '', '', '', '', '', '', 'PB', 'BB', '') AS SAJO ON SAJO.TrackingNum = SA.TrackingNum AND SAJO.Suffix = SA.Suffix
		WHERE SA.TrackingNum = @TrackingNum AND SA.Created = 'Y' AND SA.ProductType NOT LIKE 'IRA%' AND SAJO.Suffix = SA.Suffix AND SAJO.AllSequences = @BESeqList
		ORDER BY SA.Suffix
	OPEN mycur2
	FETCH NEXT FROM mycur2
	INTO @Suffix

	SET @Suffixes = ''
	SET @Suffixes2 = ''
	WHILE @@FETCH_STATUS = 0
	BEGIN
		IF @Suffix IS NOT NULL
		BEGIN
			SET @Suffixes = RTRIM(@Suffixes) + CASE WHEN @Suffixes <> '' THEN ', ' ELSE '' END
			SET @Suffixes = RTRIM(@Suffixes) + RIGHT('0' + CAST(RTRIM(@Suffix) AS VARCHAR(2)), 2)
--			PRINT 'Current: ' + RTRIM(@Suffixes) + '  (Added: ' + RTRIM(@Suffix) + ')'
		END


		FETCH NEXT FROM mycur2
		INTO @Suffix
	END
	CLOSE mycur2
	DEALLOCATE mycur2

	SET @jbseqcount = (LEN(@BESeqList) - LEN(REPLACE(@BESeqList, ',', ''))) + 1
	PRINT 'BE Count for ' + RTRIM(@Suffixes) + ' = ' + CAST(@jbseqcount AS VARCHAR(2))
	SET @Suffixes = REPLACE(@Suffixes, ',', ', ')
	-- Check to see if JO lists are different from BE list
	SET @Testing2 = (SELECT COUNT(*) FROM @SuffixList WHERE JOType = 'JO' AND Suffixes LIKE '%' + RTRIM(@Suffixes) + '%')
	--PRINT @Testing2
	IF @Testing2 = 0 AND CHARINDEX(',', @Suffixes) > 0 -- Eventually, this should be made into a loop. Right now, it only handles a list of 2 suffixes.
	BEGIN
		SET @Suffixes2 = SUBSTRING(@Suffixes, 5, 100)
		SET @Suffixes = LEFT(@Suffixes, 2)
		PRINT 'NEW: ' + RTRIM(@Suffixes) + ' : ' + RTRIM(@Suffixes2)
	END

	SET @Testing = (SELECT COUNT(*) FROM @SuffixList WHERE JOType = 'JO' AND Suffixes = @Suffixes)
	--PRINT @Testing
	IF @Testing = 0 OR @jbseqcount > 2 OR @buscount > 0
	BEGIN
		PRINT 'BE SUFFIXES: ' + @Suffixes
		INSERT @SuffixList ([JOType], [Suffixes]) VALUES ('BE', @Suffixes)
	END

	IF @Suffixes2 <> '' -- Eventually, this should be made part of the loop from above.
	BEGIN
		PRINT 'BE SUFFIXES: ' + @Suffixes2
		INSERT @SuffixList ([JOType], [Suffixes]) VALUES ('BE', @Suffixes2)
		SET @Suffixes2 = ''
	END

	FETCH NEXT FROM mycur1 INTO @BESeqList, @BList
END
CLOSE mycur1
DEALLOCATE mycur1

-- Display Document --------------------------------------------------------------------------------------------------------------------------------------------
DECLARE curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT Suffixes
	FROM @SuffixList
	WHERE JOType = 'BE'
	--ORDER BY Suffixes

OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @count = 0
SET @docindex = 0
--PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count

--      	IF @count = 1 OR @count = 6 OR @count = 11 OR @count = 16 OR @count = 21 OR @count = 26
--	BEGIN
		Set @docindex = @docindex + 1
		SET @newdocsub = 'Designation of Beneficiary (S-145) - Suffixes: ' + @docsubname
		INSERT INTO IMS.NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
--	END

      	FETCH NEXT FROM curs INTO @docsubname

	IF @docsubname != NULL
	BEGIN
		SET @newdocsub = @newdocsub + ', ' + @docsubname
		UPDATE IMS.NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex AND TrackingNum = @TrackingNum
	END
   END

CLOSE curs

DEALLOCATE curs

SELECT 'S145' AS DocCode, 'DESIGNATION OF BENEFICIARY' AS ScanName, * FROM IMS.NewMemberDoc WHERE TrackingNum = @TrackingNum
DELETE FROM IMS.NewMemberDoc WHERE TrackingNum = @TrackingNum

Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_S145_Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO


CREATE PROCEDURE [IMS].[spSafe_D_S145_Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @jocount INT
SET @jocount = (SELECT COUNT(*) FROM IMS.NewMemberJointOwner JO WHERE JO.TrackingNum = @TrackingNum AND JO.JointOwnerType IN ('JM', 'JP', 'JT', 'MM'))
PRINT 'JO Count is: ' + CAST(@jocount AS VARCHAR(2))
DECLARE @jbcount INT
DECLARE @jbseqcount INT
SET @jbcount = (SELECT COUNT(*) FROM IMS.NewMemberJointOwner JO WHERE JO.TrackingNum = @TrackingNum AND JO.JointOwnerType IN ('PB', 'BB'))
PRINT 'JB Count is: ' + CAST(@jbcount AS VARCHAR(2))
DECLARE @buscount INT
SET @buscount = (SELECT COUNT(*) FROM IMS.NewMemberRequest NMR WHERE NMR.TrackingNum = @TrackingNum AND NMR.AccountType IN ('BS', 'BE', 'BH', 'BW'))
PRINT 'Business Count is: ' + CAST(@buscount AS VARCHAR(2))

-- Get the list of JO's by Suffix
-- Get Suffixes --------------------------------------------------------------------------------------------------------------------------------------------
DECLARE @TempTable TABLE
	(
	[AllSequences]	CHAR(500),
	[JOSequences]	CHAR(500)
	)
DECLARE @ALLSEQ VARCHAR(500)
DECLARE @JOSEQ VARCHAR(500)
DECLARE @BESEQ VARCHAR(500)
DECLARE @SUFF VARCHAR(2)
DECLARE @TEMPCOUNT INT
DECLARE @count INT
DECLARE @JOSeqList CHAR(100)
DECLARE @JList CHAR(100)
DECLARE @BESeqList CHAR(100)
DECLARE @BList CHAR(100)
DECLARE @Suffix CHAR(2)
DECLARE @Suffixes CHAR(500)
DECLARE @Suffixes2 CHAR(500)
DECLARE @SuffixList TABLE
	(
	[JOType]	CHAR(2),
	[Suffixes]	CHAR(500)
	)
DECLARE @SuffixFilter CHAR(500)
DECLARE @BFilter CHAR(100)
DECLARE @Testing INT
DECLARE @Testing2 INT

-- Get the list of JO's by Suffix
-- This sorts by Suffix
DECLARE tempcur CURSOR LOCAL FAST_FORWARD
FOR
	SELECT DISTINCT SAJO.AllSequences, SAJO.JOSequences, SA.Suffix
	FROM IMS.NewMemberSubAccount AS SA
	LEFT JOIN IMS.NewMemberJointLink AS JL ON JL.TrackingNum = SA.TrackingNum AND JL.SubAccountSequence = SA.Sequence
	LEFT JOIN IMS.fnSafe_GetSAJOSeq(@TrackingNum, 2, 'JM', 'JP', 'JT', 'MM', '', '', '', '', '') AS SAJO ON SAJO.TrackingNum = SA.TrackingNum AND SAJO.Suffix = SA.Suffix
	LEFT JOIN IMS.NewMemberRequest AS NMR ON NMR.TrackingNum = SA.TrackingNum
	WHERE SA.TrackingNum = @TrackingNum AND SA.Created = 'Y' AND SA.ProductType NOT LIKE 'IRA%' AND NMR.Processed = 999 AND NMR.AccountType IN ('P', 'M2', 'M5', 'M7', '17', 'BS', 'BE', 'BH', 'BW') AND SA.ProductType NOT LIKE 'IRA%'
	ORDER BY SA.Suffix
OPEN tempcur
FETCH NEXT FROM tempcur INTO @ALLSEQ, @JOSEQ, @SUFF
WHILE @@FETCH_STATUS = 0
BEGIN
	SET @TEMPCOUNT = (SELECT COUNT(*) FROM @TempTable WHERE JOSequences = @JOSEQ)
	IF @TEMPCOUNT = 0
	BEGIN
		INSERT @TempTable ([AllSequences], [JOSequences]) VALUES (@ALLSEQ, @JOSEQ)
	END
	FETCH NEXT FROM tempcur INTO @ALLSEQ, @JOSEQ, @SUFF
END
CLOSE tempcur
DEALLOCATE tempcur

DECLARE mycur1 CURSOR LOCAL FAST_FORWARD
FOR
	SELECT * FROM @TempTable
OPEN mycur1
FETCH NEXT FROM mycur1 INTO @JOSeqList, @JList

WHILE @@FETCH_STATUS = 0
BEGIN
PRINT '--------------------------------------------------------------------------------------------------------------------'
PRINT 'JOSeqList:' + ISNULL(@JOSeqList, '(none)')

-- Combine a list of Suffixes for each unique list of JO's
	DECLARE mycur2 CURSOR LOCAL FAST_FORWARD
	FOR
		SELECT DISTINCT SA.Suffix
		FROM IMS.NewMemberSubAccount AS SA
		LEFT JOIN IMS.fnSafe_GetSAJOSeq(@TrackingNum, 2, 'JM', 'JP', 'JT', 'MM', '', '', '', '', '') AS SAJO ON SAJO.TrackingNum = SA.TrackingNum AND SAJO.Suffix = SA.Suffix
		WHERE SA.TrackingNum = @TrackingNum AND SA.Created = 'Y' AND SA.ProductType NOT LIKE 'IRA%' AND SAJO.Suffix = SA.Suffix AND SAJO.AllSequences = @JOSeqList
		ORDER BY SA.Suffix
	OPEN mycur2
	FETCH NEXT FROM mycur2
	INTO @Suffix

	SET @Suffixes = ''
	WHILE @@FETCH_STATUS = 0
	BEGIN
		IF @Suffix IS NOT NULL
		BEGIN
			SET @Suffixes = RTRIM(@Suffixes) + CASE WHEN @Suffixes <> '' THEN ', ' ELSE '' END
			SET @Suffixes = RTRIM(@Suffixes) + RIGHT('0' + CAST(RTRIM(@Suffix) AS VARCHAR(2)), 2)
--			PRINT 'Current: ' + RTRIM(@Suffixes) + '  (Added: ' + RTRIM(@Suffix) + ')'
		END


		FETCH NEXT FROM mycur2
		INTO @Suffix
	END
	CLOSE mycur2
	DEALLOCATE mycur2

	SET @Suffixes = REPLACE(@Suffixes, ',', ', ')
	PRINT 'JO SUFFIXES: ' + @Suffixes
	INSERT @SuffixList ([JOType], [Suffixes]) VALUES ('JO', @Suffixes)

	FETCH NEXT FROM mycur1 INTO @JOSeqList, @JList
END
CLOSE mycur1
DEALLOCATE mycur1

DELETE FROM @TempTable
------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- This sorts by Suffix
DECLARE tempcur CURSOR LOCAL FAST_FORWARD
FOR
	SELECT DISTINCT SAJO.AllSequences, SAJO.BESequences, SA.Suffix
	FROM IMS.NewMemberSubAccount AS SA
	LEFT JOIN IMS.NewMemberJointLink AS JL ON JL.TrackingNum = SA.TrackingNum AND JL.SubAccountSequence = SA.Sequence
	LEFT JOIN IMS.fnSafe_GetSAJOSeq(@TrackingNum, 999, '', '', '', '', '', '', 'PB', 'BB', '') AS SAJO ON SAJO.TrackingNum = SA.TrackingNum AND SAJO.Suffix = SA.Suffix
	LEFT JOIN IMS.NewMemberRequest AS NMR ON NMR.TrackingNum = SA.TrackingNum
	WHERE SA.TrackingNum = @TrackingNum AND NMR.Processed = 999 AND NMR.AccountType IN ('P', 'M2', 'M5', 'M7', '17', 'BS', 'BE', 'BH', 'BW') AND SA.ProductType NOT LIKE 'IRA%' AND SAJO.BESequences <> ''
	ORDER BY SA.Suffix
OPEN tempcur
FETCH NEXT FROM tempcur INTO @ALLSEQ, @BESEQ, @SUFF
WHILE @@FETCH_STATUS = 0
BEGIN
	SET @TEMPCOUNT = (SELECT COUNT(*) FROM @TempTable WHERE JOSequences = @BESEQ)
	IF @TEMPCOUNT = 0
	BEGIN
		INSERT @TempTable ([AllSequences], [JOSequences]) VALUES (@ALLSEQ, @BESEQ)
	END
	FETCH NEXT FROM tempcur INTO @ALLSEQ, @BESEQ, @SUFF
END
CLOSE tempcur
DEALLOCATE tempcur

DECLARE mycur1 CURSOR LOCAL FAST_FORWARD
FOR
	SELECT * FROM @TempTable
OPEN mycur1
FETCH NEXT FROM mycur1 INTO @BESeqList, @BList

SET @count = 0
SET @SuffixFilter = ''
WHILE @@FETCH_STATUS = 0
BEGIN

-- Combine a list of Suffixes for each unique list of JO's
	DECLARE mycur2 CURSOR LOCAL FAST_FORWARD
	FOR
		SELECT DISTINCT SA.Suffix
		FROM IMS.NewMemberSubAccount AS SA
		LEFT JOIN IMS.fnSafe_GetSAJOSeq(@TrackingNum, 999, '', '', '', '', '', '', 'PB', 'BB', '') AS SAJO ON SAJO.TrackingNum = SA.TrackingNum AND SAJO.Suffix = SA.Suffix
		WHERE SA.TrackingNum = @TrackingNum AND SA.Created = 'Y' AND SA.ProductType NOT LIKE 'IRA%' AND SAJO.Suffix = SA.Suffix AND SAJO.AllSequences = @BESeqList
		ORDER BY SA.Suffix
	OPEN mycur2
	FETCH NEXT FROM mycur2
	INTO @Suffix

	SET @Suffixes = ''
	SET @Suffixes2 = ''
	WHILE @@FETCH_STATUS = 0
	BEGIN
		IF @Suffix IS NOT NULL
		BEGIN
			SET @Suffixes = RTRIM(@Suffixes) + CASE WHEN @Suffixes <> '' THEN ', ' ELSE '' END
			SET @Suffixes = RTRIM(@Suffixes) + RIGHT('0' + CAST(RTRIM(@Suffix) AS VARCHAR(2)), 2)
		END


		FETCH NEXT FROM mycur2
		INTO @Suffix
	END
	CLOSE mycur2
	DEALLOCATE mycur2

	PRINT 'Suffixes for ' + RTRIM(@BESeqList) + ': ' + RTRIM(@Suffixes)
	SET @jbseqcount = (LEN(@BESeqList) - LEN(REPLACE(@BESeqList, ',', ''))) + 1
	PRINT 'BE Count for ' + RTRIM(@Suffixes) + ' = ' + CAST(@jbseqcount AS VARCHAR(2))
	SET @Suffixes = REPLACE(@Suffixes, ',', ', ')
	SET @Testing2 = (SELECT COUNT(*) FROM @SuffixList WHERE JOType = 'JO' AND Suffixes LIKE '%' + RTRIM(@Suffixes) + '%')
	PRINT @Testing2
	IF @Testing2 = 0 AND CHARINDEX(',', @Suffixes) > 0 -- Eventually, this should be made into a loop. Right now, it only handles a list of 2 suffixes.
	BEGIN
		SET @Suffixes2 = SUBSTRING(@Suffixes, 5, 100)
		SET @Suffixes = LEFT(@Suffixes, 2)
		PRINT 'NEW: ' + RTRIM(@Suffixes) + ' : ' + RTRIM(@Suffixes2)
	END

	SET @Testing = (SELECT COUNT(*) FROM @SuffixList WHERE JOType = 'JO' AND Suffixes = @Suffixes)
	PRINT @Testing
	IF (@Testing = 0 OR @jbseqcount > 2 OR @buscount > 0) -- If the beneficiaries can be listed on the S333N, then don't include them here.
	BEGIN
		SET @count = @count + 1
		IF @count = @DocIndex
		BEGIN
			SET @SuffixFilter = RTRIM(@Suffixes)
			SET @BFilter = RTRIM(@BList)
		END

		IF @Suffixes2 <> '' -- Eventually, this should be made part of the loop from above.
		BEGIN
			SET @count = @count + 1
			IF @count = @DocIndex
			BEGIN
				SET @SuffixFilter = RTRIM(@Suffixes2)
				SET @BFilter = RTRIM(@BList)
			END
			SET @Suffixes2 = ''
		END
	END

	FETCH NEXT FROM mycur1 INTO @BESeqList, @BList
END
CLOSE mycur1
DEALLOCATE mycur1
PRINT '------------------------------------------------------------------------------------------------------------------------------------'
--PRINT 'Page Number:  ' + CAST(@pagenumber AS VARCHAR(2))
--PRINT 'Total Pages:  ' + CAST(@totalpages AS VARCHAR(2))
PRINT 'SuffixFilter: ' + RTRIM(@SuffixFilter)
PRINT 'BFilter:      ' + RTRIM(@BFilter)

SELECT @DocIndex As DocIndex
	, CASE WHEN NMR.AccountClass = 'O' THEN RTRIM(NMR.OrganizationName) ELSE RTRIM(NMR.FName) + CASE ISNULL(NMR.MInitial, '') WHEN '' THEN '' ELSE ' ' + RTRIM(NMR.MInitial) END + ' ' + RTRIM(NMR.LName) END AS FullName
	, CASE WHEN RTRIM(LTRIM(@SuffixFilter)) = RTRIM(LTRIM(AllSuffixList.Suffixes)) THEN 'X' END AS AllSuffixes
	, CASE WHEN RTRIM(LTRIM(@SuffixFilter)) != RTRIM(LTRIM(AllSuffixList.Suffixes)) THEN 'X' END AS IndividualSuffixes
	, CASE WHEN RTRIM(LTRIM(@SuffixFilter)) != RTRIM(LTRIM(AllSuffixList.Suffixes)) THEN RTRIM(@SuffixFilter) END AS SuffixList

	, RTRIM(PB01.FullName)  AS B01FullName
	, RTRIM(PB01.Relationship) AS B01Relationship
	, CONVERT(CHAR(10), PB01.DOB, 101) AS B01DOB
	, RTRIM(PB01.FullAddress) AS B01Address

	, RTRIM(PB02.FullName)  AS B02FullName
	, RTRIM(PB02.Relationship) AS B02Relationship
	, CONVERT(CHAR(10), PB02.DOB, 101) AS B02DOB
	, RTRIM(PB02.FullAddress) AS B02Address

	, RTRIM(PB03.FullName)  AS B03FullName
	, RTRIM(PB03.Relationship) AS B03Relationship
	, CONVERT(CHAR(10), PB03.DOB, 101) AS B03DOB
	, RTRIM(PB03.FullAddress) AS B03Address

	, RTRIM(PB04.FullName)  AS B04FullName
	, RTRIM(PB04.Relationship) AS B04Relationship
	, CONVERT(CHAR(10), PB04.DOB, 101) AS B04DOB
	, RTRIM(PB04.FullAddress) AS B04Address

	, RTRIM(PB05.FullName)  AS B05FullName
	, RTRIM(PB05.Relationship) AS B05Relationship
	, CONVERT(CHAR(10), PB05.DOB, 101) AS B05DOB
	, RTRIM(PB05.FullAddress) AS B05Address
FROM IMS.NewMemberRequest As NMR
	LEFT OUTER JOIN IMS.NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN IMS.NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN IMS.fnSafe_GetSuffixList(@TrackingNum) AS AllSuffixList ON NMR.TrackingNum = AllSuffixList.TrackingNum
	LEFT OUTER JOIN IMS.fnSafe_GetJOType(@TrackingNum, 'PB', 'BB', '', '', '', '', '@') AS PB01 ON NMR.TrackingNum = PB01.TrackingNum AND PB01.Sequence = IMS.fnSafe_Split(@BFilter, ',', 1)
	LEFT OUTER JOIN IMS.fnSafe_GetJOType(@TrackingNum, 'PB', 'BB', '', '', '', '', '@') AS PB02 ON NMR.TrackingNum = PB02.TrackingNum AND PB02.Sequence = IMS.fnSafe_Split(@BFilter, ',', 2)
	LEFT OUTER JOIN IMS.fnSafe_GetJOType(@TrackingNum, 'PB', 'BB', '', '', '', '', '@') AS PB03 ON NMR.TrackingNum = PB03.TrackingNum AND PB03.Sequence = IMS.fnSafe_Split(@BFilter, ',', 3)
	LEFT OUTER JOIN IMS.fnSafe_GetJOType(@TrackingNum, 'PB', 'BB', '', '', '', '', '@') AS PB04 ON NMR.TrackingNum = PB04.TrackingNum AND PB04.Sequence = IMS.fnSafe_Split(@BFilter, ',', 4)
	LEFT OUTER JOIN IMS.fnSafe_GetJOType(@TrackingNum, 'PB', 'BB', '', '', '', '', '@') AS PB05 ON NMR.TrackingNum = PB05.TrackingNum AND PB05.Sequence = IMS.fnSafe_Split(@BFilter, ',', 5)
WHERE NMR.TrackingNum = @TrackingNum

Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_S238_Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO


CREATE PROCEDURE [IMS].[spSafe_D_S238_Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @docsubname CHAR(100)
DECLARE @newdocsub CHAR(200)
DECLARE @count INT
DECLARE @docindex INT

DECLARE @Account CHAR(20)
SET @Account = (SELECT Account FROM NewMemberRequest WHERE TrackingNum = @TrackingNum)

DECLARE curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT '' AS docsubname
	FROM IMS.NewMemberFlag AS FLAG
	LEFT JOIN IMS.NewMemberRequest AS NMR ON NMR.TrackingNum = FLAG.TrackingNum
	WHERE FLAG.TrackingNum = @TrackingNum AND NMR.Processed = 999 AND (NMR.Created = 'Y' OR NMR.Created = 'I') AND FLAG.FlagNumber = 69

OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count

      	IF @count = 1
	BEGIN
		SET @docindex = @docindex + 1
		SET @newdocsub = 'eStatements Agreement (S-238)'-- for Suffix(s) ' + CASE LEN(@docsubname) WHEN 2 THEN @docsubname WHEN 1 THEN '0' + @docsubname ELSE 'NA' END
		INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END

      	FETCH NEXT FROM curs INTO @docsubname

	IF @docsubname != NULL
	BEGIN
		SET @newdocsub = @newdocsub + ', ' + @docsubname
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex AND TrackingNum = @TrackingNum
	END
   END

CLOSE curs
DEALLOCATE curs

SELECT 'S238' AS DocCode, 'ESTATEMENTS AGREEMENT' AS ScanName, RTRIM(@Account) AS AccountSequences, * FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
DELETE FROM NewMemberDoc WHERE TrackingNum = @TrackingNum

Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_S238_Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [IMS].[spSafe_D_S238_Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

-- STATIC DOCUMENT
SELECT @DocIndex As DocIndex
FROM NewMemberRequest As NMR
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
WHERE NMR.TrackingNum = @TrackingNum


Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_S248_Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO


CREATE PROCEDURE [IMS].[spSafe_D_S248_Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @docsubname CHAR(100)
DECLARE @newdocsub CHAR(200)
DECLARE @count INT
DECLARE @docindex INT

DECLARE curs CURSOR LOCAL FAST_FORWARD FOR
	-- Added condition to display S248 for MMA's for Eventum #5136 09/03/2010 srg
	-- Added condition to display S248 for SDA's for Eventum #5371 10/28/2010 srg
	-- Added condition to display S248 for SPS's for Eventum #5441 11/16/2010 srg
	SELECT '' AS docsubname
	FROM IMS.NewMemberRequest AS NMR
	LEFT JOIN IMS.NewMemberPlasticCard AS PC ON PC.TrackingNum = NMR.TrackingNum
	LEFT JOIN IMS.NewMemberSubAccount AS SA ON SA.TrackingNum = NMR.TrackingNum AND (SA.ProductType = 'MMA' OR SA.ProductType = 'SDA' OR SA.DescAbrv = 'SPS')
	WHERE NMR.TrackingNum = @TrackingNum
		AND NMR.Processed = 999
		AND (((SA.ProductType = 'MMA' OR SA.ProductType = 'SDA' OR SA.DescAbrv = 'SPS') AND SA.Created = 'Y')
			OR NMR.Created = 'Y'
			OR (NMR.C24Access = 'Y' AND NMR.PIN <> '1')
		OR (PC.Created = 'Y' AND PC.TypeCode IN ('C', 'D')))

OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count

      	IF @count = 1
	BEGIN
		SET @docindex = @docindex + 1
		SET @newdocsub = 'Electronic Funds Transfer Disclosure (S-248)'-- for Suffix(s) ' + CASE LEN(@docsubname) WHEN 2 THEN @docsubname WHEN 1 THEN '0' + @docsubname ELSE 'NA' END
		INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END

      	FETCH NEXT FROM curs INTO @docsubname

	IF @docsubname != NULL
	BEGIN
		SET @newdocsub = @newdocsub + ', ' + @docsubname
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex AND TrackingNum = @TrackingNum
	END
   END

CLOSE curs
DEALLOCATE curs

SELECT * FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
DELETE FROM NewMemberDoc WHERE TrackingNum = @TrackingNum

Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_S248_Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [IMS].[spSafe_D_S248_Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

-- STATIC DOCUMENT
SELECT @DocIndex As DocIndex
FROM NewMemberRequest As NMR
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
WHERE NMR.TrackingNum = @TrackingNum


Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_S254_Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO


CREATE PROCEDURE [IMS].[spSafe_D_S254_Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
--Declare @TrackingNum int
--DROP TABLE #docs
--DEALLOCATE curs

Declare @docsubname char(100)
Declare @newdocsub char(200)
Declare @count int
Declare @docindex int


--CREATE TABLE #docs(docindex int identity Primary Key, docsubname char(100))

Declare curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT '' AS docsubname
	FROM NewMemberPlasticCard AS PC INNER JOIN NewMemberRequest AS NMR ON NMR.TrackingNum = PC.TrackingNum
	WHERE PC.TrackingNum = @TrackingNum AND NMR.Processed = 999 AND PC.Created = 'Y' AND PC.TypeCode IN ('C', 'D') AND PC.CardStatus <> '9'

--IF @@ROWCOUNT = 0

OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count

      	IF @count = 1
	BEGIN
		Set @docindex = @docindex + 1
		SET @newdocsub = 'Debit Card Acceptance (S-254)'-- for Suffix(s) ' + CASE LEN(@docsubname) WHEN 2 THEN @docsubname WHEN 1 THEN '0' + @docsubname ELSE 'NA' END
		INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END

      	FETCH NEXT FROM curs INTO @docsubname

	IF @docsubname != NULL
	BEGIN
		SET @newdocsub = @newdocsub + ', ' + @docsubname
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex AND TrackingNum = @TrackingNum
	END
   END

CLOSE curs
DEALLOCATE curs

Select *  FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Delete FROM NewMemberDoc WHERE TrackingNum = @TrackingNum

--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_S254_Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [IMS].[spSafe_D_S254_Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

SELECT @DocIndex As DocIndex
	, '******' + RIGHT(NMR.Account, 3) As Account
	, DATENAME(MM, GETDATE()) + RIGHT(CONVERT(VARCHAR(12), GETDATE(), 107), 9) AS TodayDate
	, IMS.fnSafe_TitleCase(LTRIM(CASE WHEN RTRIM(RTRIM(NMR.FName) + ' ' + RTRIM(NMR.LName)) = '' THEN
		CASE WHEN CHARINDEX('/', NMR.OrganizationName) > 0 THEN
			RTRIM(RIGHT(RTRIM(NMR.OrganizationName), LEN(RTRIM(NMR.OrganizationName))-CHARINDEX('/', NMR.OrganizationName)) + ' ' + LEFT(RTRIM(NMR.OrganizationName), CHARINDEX('/', NMR.OrganizationName)-1))
		ELSE
			RTRIM(NMR.OrganizationName)
		END
	  ELSE
		RTRIM(RTRIM(NMR.FName) + CASE ISNULL(NMR.MInitial, '') WHEN '' THEN '' ELSE ' ' + RTRIM(NMR.MInitial) END + ' ' + RTRIM(NMR.LName))
	  END)) AS FullName
	, REPLACE(RTRIM(IMS.fnSafe_TitleCase(CASE NMR.AccountClass
		WHEN 'O' THEN RTRIM(RTRIM(Work.Address1) + CASE ISNULL(Work.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Work.Address2) END + CASE ISNULL(Work.Address3, '') WHEN '' THEN ' ' ELSE ', ' + RTRIM(Work.Address3) END)
		ELSE RTRIM(RTRIM(Home.Address1) + CASE ISNULL(Home.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Home.Address2) END + CASE ISNULL(Home.Address3, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Home.Address3) END)
	  END)), 'Po Box', 'PO Box') AS Address
	, CASE NMR.AccountClass
		WHEN 'O' THEN RTRIM(IMS.fnSafe_TitleCase(Work.City)) + ', ' + Work.State + ' ' + CASE LEN(Work.Zip) WHEN 9 THEN LEFT(Work.Zip, 5) + '-' + Right(Work.Zip, 4) ELSE Work.Zip END
		ELSE RTRIM(IMS.fnSafe_TitleCase(Home.City)) + ', ' + Home.State + ' ' + CASE LEN(Home.Zip) WHEN 9 THEN LEFT(Home.Zip, 5) + '-' + Right(Home.Zip, 4) ELSE Home.Zip END
	  END AS CityStateZip
	, CASE WHEN CHARINDEX(','+RTRIM(NMR.AccountType)+',', ',BA,BC,BE,BG,BH,BL,BP,BS,BW,BY,') > 0 THEN
		RTRIM(CAST(ROUND(CONVERT(MONEY,PCC.AmountOnline *.0001, 2), 0)*100 AS VARCHAR(10)))
	  ELSE
		RTRIM(CAST(CONVERT(MONEY,PCD.AmountOnline *.01, 2) AS VARCHAR(10)))
	  END AS CashWithdrawals
	, CASE WHEN CHARINDEX(','+RTRIM(NMR.AccountType)+',', ',BA,BC,BE,BG,BH,BL,BP,BS,BW,BY,') > 0 THEN
		RTRIM(CAST(CONVERT(MONEY,PCC.POSOnlineLimit *.01, 2) AS VARCHAR(10)))
	  ELSE
		RTRIM(CAST(CONVERT(MONEY,PCD.POSOnlineLimit *.01, 2) AS VARCHAR(10)))
	  END AS PointOfSale
FROM NewMemberRequest As NMR
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN fnSafe_GetPCPlastic(@TrackingNum, 1, 'C') AS PCC ON NMR.TrackingNum = PCC.TrackingNum
	LEFT OUTER JOIN fnSafe_GetPCPlastic(@TrackingNum, 1, 'D') AS PCD ON NMR.TrackingNum = PCD.TrackingNum
WHERE NMR.TrackingNum = @TrackingNum

Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_S261_Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO


CREATE PROCEDURE [IMS].[spSafe_D_S261_Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
--Declare @TrackingNum int
--DROP TABLE #docs
--DEALLOCATE curs

Declare @docsubname char(100)
Declare @docsuffix char(2)
Declare @newdocsub char(200)
Declare @count int
Declare @docindex int


--CREATE TABLE #docs(docindex int identity Primary Key, docsubname char(100))

Declare curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT DISTINCT SA.Sequence, CONVERT(char(2), SA.Suffix)
	FROM NewMemberSubAccount As SA
	INNER JOIN NewMemberRequest AS NMR ON NMR.TrackingNum = SA.TrackingNum
	WHERE SA.TrackingNum = @TrackingNum AND SA.SLType = 'I' AND SA.ProductType LIKE 'CERT' AND SA.SubaccountType <> 'HOL04' AND SA.Created = 'Y'

--IF @@ROWCOUNT = 0

OPEN curs
FETCH NEXT FROM curs INTO @docsubname, @docsuffix
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count

	Set @docindex = @docindex + 1
	SET @newdocsub = 'Certificate Disclosure (S-261) for Suffix(s) ' + CASE LEN(@docsuffix) WHEN 2 THEN @docsuffix WHEN 1 THEN '0' + @docsuffix ELSE 'NA' END
	INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)

      	FETCH NEXT FROM curs INTO @docsubname, @docsuffix

	IF @docsubname != NULL
	BEGIN
		SET @newdocsub = @newdocsub + ', ' + @docsubname
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex AND TrackingNum = @TrackingNum
	END
   END

CLOSE curs
DEALLOCATE curs

Select *  FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Delete FROM NewMemberDoc WHERE TrackingNum = @TrackingNum

--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_S261_Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [IMS].[spSafe_D_S261_Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @seq INT
DECLARE @seq1 INT
DECLARE @count INT

DECLARE curs2 CURSOR LOCAL FAST_FORWARD FOR
	SELECT DISTINCT CONVERT(INT, SA.Sequence)
	FROM NewMemberSubAccount AS SA
	WHERE SA.TrackingNum = @TrackingNum AND SA.SLType = 'I' AND SA.ProductType LIKE 'CERT' AND SA.SubaccountType <> 'HOL04' AND SA.Created = 'Y'

OPEN curs2
FETCH NEXT FROM curs2 INTO @seq
SET @count = 1
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
      	IF (@count = @DocIndex)
		BEGIN
			Set @seq1 = @seq
		END
      	FETCH NEXT FROM curs2 INTO @seq
	SET @count = @count + 1
	PRINT @count
   END
CLOSE curs2
DEALLOCATE curs2

SELECT @DocIndex As DocIndex
	, RTRIM(CAST(NMR.Account AS VARCHAR(10))) + '-' + RIGHT('00' + RTRIM(CAST(CERT.Suffix AS VARCHAR(2))), 2) AS Account
	, CASE WHEN RTRIM(RTRIM(NMR.FName) + ' ' + RTRIM(NMR.LName)) = '' THEN
		CASE WHEN CHARINDEX('/', NMR.OrganizationName) > 0 THEN
			RTRIM(RIGHT(RTRIM(NMR.OrganizationName), LEN(RTRIM(NMR.OrganizationName))-CHARINDEX('/', NMR.OrganizationName)) + ' ' + LEFT(RTRIM(NMR.OrganizationName), CHARINDEX('/', NMR.OrganizationName)-1))
		ELSE
			RTRIM(NMR.OrganizationName)
		END
	  ELSE
		RTRIM(RTRIM(NMR.FName) + CASE ISNULL(NMR.MInitial, '') WHEN '' THEN '' ELSE ' ' + RTRIM(NMR.MInitial) END + ' ' + RTRIM(NMR.LName))
	  END AS FullName
--	, CASE WHEN NMR.AccountClass = 'O' THEN RTRIM(REPLACE(NMR.OrganizationName, '/', '')) ELSE RTRIM(NMR.FName) + ' ' + RTRIM(NMR.LName) END AS FullName
	, RTRIM(IMS.fnSafe_GetSAJOs(@TrackingNum, @seq1)) AS JointOwners
	, CONVERT(CHAR(10), CERT.CreatedOn, 101) AS IssueDate
	, CONVERT(CHAR(10), INVADD.MaturityDate, 101) AS MaturityDate
	, '$' + RTRIM(CONVERT(VARCHAR(15), CONVERT(MONEY, IConfig.MinBalance)/100, 1)) AS MinimumDeposit
	, RTRIM(CERT.Term) + ' months' AS Term
	, RTRIM(CAST(CONVERT(DECIMAL(6,2), CONVERT(FLOAT(1), CERT.APR) * 0.0001) AS VARCHAR(10))) + '%' AS DividendRate
	, RTRIM(CAST(CONVERT(DECIMAL(6,2),(POWER((1 + (CONVERT(FLOAT(1), CERT.APR) * 0.000001) / 12),12)-1)*100) AS VARCHAR(10))) + '%' AS APY
	, CASE WHEN CERT.SubAccountType = 'ADC46' THEN 'X' END AS VariableRate
	, CASE WHEN CERT.SubAccountType = 'B1207' OR CERT.SubAccountType = 'B2405' OR CERT.SubAccountType = 'B2407' THEN 'X' END AS BumpUpFixedRate
	, CASE WHEN CERT.SubAccountType <> 'ADC46' AND CERT.SubAccountType <> 'B1207' AND CERT.SubAccountType <> 'B2405' AND CERT.SubAccountType <> 'B2407' THEN 'X' END AS FixedRate
	, '$' + RTRIM(CONVERT(VARCHAR(15), CONVERT(MONEY, CERT.Amount)/100, 1)) AS InitialDeposit
	, CASE WHEN INVADD.DividendDisp = '2' THEN
			'Transfer to ' + CASE WHEN ISNULL(DIVDISP.CrossAccount, '') = '' THEN RTRIM(CONVERT(CHAR(10), NMR.Account)) + '-' + RIGHT('0' + RTRIM(CONVERT(CHAR(2), DIVDISP.RelatedSuffix)), 2) ELSE RTRIM(CONVERT(CHAR(10), DIVDISP.CrossAccount)) + '-' + RIGHT('0' + RTRIM(CONVERT(CHAR(2), DIVDISP.CrossSuffix)), 2) END
		ELSE
			'Post to account'
		END AS DividendOption
	, CASE WHEN INVADD.MaturityDisp = 'TRFR' THEN
			'Transfer to ' + CASE WHEN ISNULL(MATDISP.CrossAccount, '') = '' THEN RTRIM(CONVERT(CHAR(10), NMR.Account)) + '-' + RIGHT('0' + RTRIM(CONVERT(CHAR(2), MATDISP.RelatedSuffix)), 2) ELSE RTRIM(CONVERT(CHAR(10), MATDISP.CrossAccount)) + '-' + RIGHT('0' + RTRIM(CONVERT(CHAR(2), MATDISP.CrossSuffix)), 2) END
		ELSE
			'Rollover at new rate'
		END AS MaturityOption
FROM NewMemberRequest As NMR
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN fnSafe_GetSASeq(@TrackingNum, @seq1) AS CERT ON NMR.TrackingNum = CERT.TrackingNum
	LEFT OUTER JOIN NewMemberInvestmentAdd AS INVADD ON INVADD.TrackingNum = NMR.TrackingNum AND INVADD.SubAccountSequence = CERT.Sequence
	LEFT OUTER JOIN fnSafe_GetCL(@TrackingNum, @seq1, 'D', 'P') AS DIVDISP ON NMR.TrackingNum = DIVDISP.TrackingNum
	LEFT OUTER JOIN fnSafe_GetCL(@TrackingNum, @seq1, 'C', 'T') AS MATDISP ON NMR.TrackingNum = MATDISP.TrackingNum
	LEFT OUTER JOIN udt_ISubAccounts AS IConfig ON IConfig.UniqueID = CERT.SubAccountType
WHERE NMR.TrackingNum = @TrackingNum


Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_S273_Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO


CREATE PROCEDURE [IMS].[spSafe_D_S273_Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
--Declare @TrackingNum int
--DROP TABLE #docs
--DEALLOCATE curs

DECLARE @docsubname CHAR(100)
DECLARE @docsuffix CHAR(2)
DECLARE @newdocsub CHAR(200)
DECLARE @count INT
DECLARE @docindex INT


--CREATE TABLE #docs(docindex int identity Primary Key, docsubname char(100))

DECLARE curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT DISTINCT SA.Sequence, CONVERT(char(2), SA.Suffix)
	FROM NewMemberSubAccount As SA
	INNER JOIN NewMemberRequest AS NMR ON NMR.TrackingNum = SA.TrackingNum
	WHERE SA.TrackingNum = @TrackingNum AND SA.SLType = 'I' AND SA.ProductType LIKE 'IRA%' AND SA.SubAccountType NOT IN ('IRA', 'RIA') AND SA.Created = 'Y'

--IF @@ROWCOUNT = 0

OPEN curs
FETCH NEXT FROM curs INTO @docsubname, @docsuffix
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count

	Set @docindex = @docindex + 1
	SET @newdocsub = 'Certificate Disclosure (S-273) for Suffix(s) ' + CASE LEN(@docsuffix) WHEN 2 THEN @docsuffix WHEN 1 THEN '0' + @docsuffix ELSE 'NA' END
	INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)

      	FETCH NEXT FROM curs INTO @docsubname, @docsuffix

	IF @docsubname != NULL
	BEGIN
		SET @newdocsub = @newdocsub + ', ' + @docsubname
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex AND TrackingNum = @TrackingNum
	END
   END

CLOSE curs
DEALLOCATE curs

SELECT *  FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
DELETE FROM NewMemberDoc WHERE TrackingNum = @TrackingNum

--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_S273_Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO


CREATE PROCEDURE [IMS].[spSafe_D_S273_Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @seq INT
DECLARE @seq1 INT
DECLARE @count INT

DECLARE curs2 CURSOR LOCAL FAST_FORWARD FOR
	SELECT DISTINCT CONVERT(INT, SA.Sequence)
	FROM NewMemberSubAccount AS SA
	WHERE SA.TrackingNum = @TrackingNum AND SA.SLType = 'I' AND SA.ProductType LIKE 'IRA%' AND SA.SubAccountType NOT IN ('IRA', 'RIA') AND SA.Created = 'Y'

OPEN curs2
FETCH NEXT FROM curs2 INTO @seq
SET @count = 1
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
      	IF (@count = @DocIndex)
		BEGIN
			Set @seq1 = @seq
		END
      	FETCH NEXT FROM curs2 INTO @seq
	SET @count = @count + 1
	PRINT @count
   END
CLOSE curs2
DEALLOCATE curs2

SELECT @DocIndex As DocIndex
	, RTRIM(CAST(NMR.Account AS VARCHAR(10))) + '-' + RIGHT('00' + RTRIM(CAST(IRA.Suffix AS VARCHAR(2))), 2) AS Account
	, CASE WHEN PATINDEX('%ROTH%', UPPER(IRA.Description)) = 0 THEN 'X' END AS TradIRA
	, CASE WHEN PATINDEX('%ROTH%', UPPER(IRA.Description)) > 0 THEN 'X' END AS RothIRA
	, CASE WHEN NMR.AccountClass = 'O' THEN RTRIM(NMR.OrganizationName) ELSE RTRIM(NMR.FName) + CASE ISNULL(NMR.MInitial, '') WHEN '' THEN '' ELSE ' ' + RTRIM(NMR.MInitial) END + ' ' + RTRIM(NMR.LName) END AS FullName
	, RTRIM(IMS.fnSafe_GetSABEs(@TrackingNum, @seq1)) AS Beneficiaries
	, CONVERT(CHAR(10), IRA.CreatedOn, 101) AS IssueDate
	, CASE WHEN DATEPART(day,INVADD.MaturityDate) = 30 AND (DATEPART(month,INVADD.MaturityDate) = 1 OR DATEPART(month,INVADD.MaturityDate) = 3 OR DATEPART(month,INVADD.MaturityDate) = 5 OR DATEPART(month,INVADD.MaturityDate) = 7 OR DATEPART(month,INVADD.MaturityDate) = 8 OR DATEPART(month,INVADD.MaturityDate) = 10 OR DATEPART(month,INVADD.MaturityDate) = 12) THEN CONVERT(CHAR(10), INVADD.MaturityDate+1, 101) ELSE CONVERT(CHAR(10), INVADD.MaturityDate, 101) END AS MaturityDate
	, '$' + RTRIM(CONVERT(VARCHAR(15), CONVERT(MONEY, IConfig.MinBalance)/100, 1)) AS MinimumDeposit
	, RTRIM(INVADD.Term) + ' months' AS Term
	, RTRIM(CAST(CONVERT(DECIMAL(6,2), CONVERT(FLOAT(1), IRA.APR) * 0.0001) AS VARCHAR(10))) + '%' AS DividendRate
	, RTRIM(CAST(CONVERT(DECIMAL(6,2),(POWER((1 + (CONVERT(FLOAT(1), IRA.APR) * 0.000001) / 12),12)-1)*100) AS VARCHAR(10))) + '%' AS APY
	, CASE WHEN IRA.SubAccountType = 'ADC46' OR IRA.SubAccountType = 'RAD' OR IRA.SubAccountType = 'ADI' THEN 'X' END AS VariableRate
	, CASE WHEN PATINDEX('%BUMP-UP%', UPPER(IRA.Description)) > 0 THEN 'X' END AS BumpUpFixedRate
	, CASE WHEN IRA.SubAccountType <> 'ADC46' AND IRA.SubAccountType <> 'RAD' AND IRA.SubAccountType <> 'ADI' AND PATINDEX('%BUMP-UP%', UPPER(IRA.Description)) = 0 THEN 'X' END AS FixedRate
	, '$' + RTRIM(CONVERT(VARCHAR(15), CONVERT(MONEY, IRA.Amount)/100, 1)) AS Balance
FROM NewMemberRequest As NMR
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN fnSafe_GetSASeq(@TrackingNum, @seq1) AS IRA ON NMR.TrackingNum = IRA.TrackingNum
	LEFT OUTER JOIN NewMemberInvestmentAdd AS INVADD ON INVADD.TrackingNum = NMR.TrackingNum AND INVADD.SubAccountSequence = IRA.Sequence
	LEFT OUTER JOIN fnSafe_GetCL(@TrackingNum, @seq1, 'D', 'P') AS DIVDISP ON NMR.TrackingNum = DIVDISP.TrackingNum
	LEFT OUTER JOIN fnSafe_GetCL(@TrackingNum, @seq1, 'C', 'T') AS MATDISP ON NMR.TrackingNum = MATDISP.TrackingNum
	LEFT OUTER JOIN udt_ISubAccounts AS IConfig ON IConfig.UniqueID = IRA.SubAccountType
WHERE NMR.TrackingNum = @TrackingNum


Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_S274N_Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [IMS].[spSafe_D_S274N_Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
--Declare @TrackingNum int
--DROP TABLE #docs
--DEALLOCATE curs

Declare @docsubname char(100)
Declare @newdocsub char(200)
Declare @count int
Declare @docindex int


--CREATE TABLE #docs(docindex int identity Primary Key, docsubname char(100))

Declare curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT '' AS docsubname
	FROM NewMemberRequest AS NMR
	WHERE NMR.TrackingNum = @TrackingNum AND NMR.Processed = 999 AND NMR.AccountType IN ('X')

--IF @@ROWCOUNT = 0

OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count

      	IF @count = 1
	BEGIN
		Set @docindex = @docindex + 1
		SET @newdocsub = 'VISA Approval Letter (S-274N)'-- for Suffix(s) ' + CASE LEN(@docsubname) WHEN 2 THEN @docsubname WHEN 1 THEN '0' + @docsubname ELSE 'NA' END
		INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END

      	FETCH NEXT FROM curs INTO @docsubname

	IF @docsubname != NULL
	BEGIN
		SET @newdocsub = @newdocsub + ', ' + @docsubname
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex AND TrackingNum = @TrackingNum
	END
   END

CLOSE curs
DEALLOCATE curs

SELECT * FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
DELETE FROM NewMemberDoc WHERE TrackingNum = @TrackingNum

--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_S274N_Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [IMS].[spSafe_D_S274N_Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

SELECT @DocIndex As DocIndex
FROM NewMemberRequest As NMR
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
WHERE NMR.TrackingNum = @TrackingNum


Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_S303_Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [IMS].[spSafe_D_S303_Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL  AS

SELECT 1 AS DocIndex, 'Welcome Letter' AS DocSubname
FROM NewMemberRequest
WHERE TrackingNum = @TrackingNum AND Created IN ('Y') AND AccountType <> 'LS'

RETURN 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_S303_Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO


CREATE PROCEDURE [IMS].[spSafe_D_S303_Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS 
SELECT @DocIndex AS DocIndex, @TrackingNum AS TrackingNum
	, DATENAME(MM, GETDATE()) + RIGHT(CONVERT(VARCHAR(12), GETDATE(), 107), 9) AS TodayDate
	, IMS.fnSafe_TitleCase(LTRIM(CASE WHEN RTRIM(RTRIM(NMR.FName) + ' ' + RTRIM(NMR.LName)) = '' THEN
		CASE WHEN CHARINDEX('/', NMR.OrganizationName) > 0 THEN
			RTRIM(RIGHT(RTRIM(NMR.OrganizationName), LEN(RTRIM(NMR.OrganizationName))-CHARINDEX('/', NMR.OrganizationName)) + ' ' + LEFT(RTRIM(NMR.OrganizationName), CHARINDEX('/', NMR.OrganizationName)-1))
		ELSE
			RTRIM(NMR.OrganizationName)
		END
	  ELSE
		RTRIM(RTRIM(NMR.FName) + CASE ISNULL(NMR.MInitial, '') WHEN '' THEN '' ELSE ' ' + RTRIM(NMR.MInitial) END + ' ' + RTRIM(NMR.LName))
	  END)) AS FullName

	, ISNULL(RTRIM(JO.FName) + ' ' + RTRIM(JO.LName), '') AS JointFullName
	, REPLACE(RTRIM(IMS.fnSafe_TitleCase(CASE NMR.AccountClass
		WHEN 'O' THEN RTRIM(RTRIM(Work.Address1) + CASE ISNULL(Work.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Work.Address2) END + CASE ISNULL(Work.Address3, '') WHEN '' THEN ' ' ELSE ', ' + RTRIM(Work.Address3) END)
		ELSE RTRIM(RTRIM(Home.Address1) + CASE ISNULL(Home.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Home.Address2) END + CASE ISNULL(Home.Address3, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Home.Address3) END)
	  END)), 'Po Box', 'PO Box') AS Address
	, CASE NMR.AccountClass
		WHEN 'O' THEN RTRIM(IMS.fnSafe_TitleCase(Work.City)) + ', ' + Work.State + ' ' + CASE LEN(Work.Zip) WHEN 9 THEN LEFT(Work.Zip, 5) + '-' + Right(Work.Zip, 4) ELSE Work.Zip END
		ELSE RTRIM(IMS.fnSafe_TitleCase(Home.City)) + ', ' + Home.State + ' ' + CASE LEN(Home.Zip) WHEN 9 THEN LEFT(Home.Zip, 5) + '-' + Right(Home.Zip, 4) ELSE Home.Zip END
	  END AS CityStateZip
	, RTRIM(IMS.fnSafe_TitleCase('Dear ' + LTRIM(CASE WHEN NMR.AccountClass = 'P'
		THEN RTRIM(RTRIM(NMR.FName) + RTRIM(' ' + NMR.MInitial) + ' ' + RTRIM(NMR.LName))
		ELSE 
			CASE WHEN RTRIM(RTRIM(NMR.FName) + ' ' + RTRIM(NMR.LName)) = '' THEN
				CASE WHEN CHARINDEX('/', NMR.OrganizationName) > 0 THEN
					RTRIM(RIGHT(RTRIM(NMR.OrganizationName), LEN(RTRIM(NMR.OrganizationName))-CHARINDEX('/', NMR.OrganizationName)) + ' ' + LEFT(RTRIM(NMR.OrganizationName), CHARINDEX('/', NMR.OrganizationName)-1))
				ELSE
					RTRIM(NMR.OrganizationName)
				END
			ELSE
				RTRIM(RTRIM(NMR.FName) + CASE ISNULL(NMR.MInitial, '') WHEN '' THEN '' ELSE ' ' + RTRIM(NMR.MInitial) END + ' ' + RTRIM(NMR.LName))
			END
		END))) + ':' AS DearName
	, RTRIM(NMR.Account) + '-00' AS AccountNumberSuffix
	, RTRIM(Staff.CSFrom) AS SignersName
	, RTRIM(Staff.CSCenter) AS SignersTeam
	, RTRIM(Staff.CSPhone) AS SignersPhone
	, RTRIM(Staff.CSEmail) AS SignersEmail
	, CASE WHEN ISNULL(HAVE001.ProductName, '') != '' THEN
		'Today, you received:'
		+ CASE WHEN ISNULL(HAVE001.ProductName, '') != '' THEN CHAR(13) + CHAR(10) + '  ' + CHAR(149) + ' '+ RTRIM(REPLACE(HAVE001.ProductName, '&reg;', '®')) ELSE '' END
		+ CASE WHEN ISNULL(HAVE002.ProductName, '') != '' THEN CHAR(13) + CHAR(10) + '  ' + CHAR(149) + ' '+ RTRIM(REPLACE(HAVE002.ProductName, '&reg;', '®')) ELSE '' END
		+ CASE WHEN ISNULL(HAVE003.ProductName, '') != '' THEN CHAR(13) + CHAR(10) + '  ' + CHAR(149) + ' '+ RTRIM(REPLACE(HAVE003.ProductName, '&reg;', '®')) ELSE '' END
		+ CASE WHEN ISNULL(HAVE004.ProductName, '') != '' THEN CHAR(13) + CHAR(10) + '  ' + CHAR(149) + ' '+ RTRIM(REPLACE(HAVE004.ProductName, '&reg;', '®')) ELSE '' END
		+ CASE WHEN ISNULL(HAVE005.ProductName, '') != '' THEN CHAR(13) + CHAR(10) + '  ' + CHAR(149) + ' '+ RTRIM(REPLACE(HAVE005.ProductName, '&reg;', '®')) ELSE '' END
		+ CASE WHEN ISNULL(HAVE006.ProductName, '') != '' THEN CHAR(13) + CHAR(10) + '  ' + CHAR(149) + ' '+ RTRIM(REPLACE(HAVE006.ProductName, '&reg;', '®')) ELSE '' END
		+ CASE WHEN ISNULL(HAVE007.ProductName, '') != '' THEN CHAR(13) + CHAR(10) + '  ' + CHAR(149) + ' '+ RTRIM(REPLACE(HAVE007.ProductName, '&reg;', '®')) ELSE '' END
		+ CASE WHEN ISNULL(HAVE008.ProductName, '') != '' THEN CHAR(13) + CHAR(10) + '  ' + CHAR(149) + ' '+ RTRIM(REPLACE(HAVE008.ProductName, '&reg;', '®')) ELSE '' END
		+ CASE WHEN ISNULL(HAVE009.ProductName, '') != '' THEN CHAR(13) + CHAR(10) + '  ' + CHAR(149) + ' '+ RTRIM(REPLACE(HAVE009.ProductName, '&reg;', '®')) ELSE '' END
		+ CASE WHEN ISNULL(HAVE010.ProductName, '') != '' THEN CHAR(13) + CHAR(10) + '  ' + CHAR(149) + ' '+ RTRIM(REPLACE(HAVE010.ProductName, '&reg;', '®')) ELSE '' END
		+ CASE WHEN ISNULL(HAVE011.ProductName, '') != '' THEN CHAR(13) + CHAR(10) + '  ' + CHAR(149) + ' '+ RTRIM(REPLACE(HAVE011.ProductName, '&reg;', '®')) ELSE '' END
		+ CASE WHEN ISNULL(HAVE012.ProductName, '') != '' THEN CHAR(13) + CHAR(10) + '  ' + CHAR(149) + ' '+ RTRIM(REPLACE(HAVE012.ProductName, '&reg;', '®')) ELSE '' END
		+ CASE WHEN ISNULL(HAVE013.ProductName, '') != '' THEN CHAR(13) + CHAR(10) + '  ' + CHAR(149) + ' '+ RTRIM(REPLACE(HAVE013.ProductName, '&reg;', '®')) ELSE '' END
		+ CASE WHEN ISNULL(HAVE014.ProductName, '') != '' THEN CHAR(13) + CHAR(10) + '  ' + CHAR(149) + ' '+ RTRIM(REPLACE(HAVE014.ProductName, '&reg;', '®')) ELSE '' END
		+ CASE WHEN ISNULL(HAVE015.ProductName, '') != '' THEN CHAR(13) + CHAR(10) + '  ' + CHAR(149) + ' '+ RTRIM(REPLACE(HAVE015.ProductName, '&reg;', '®')) ELSE '' END
	  ELSE
		''
	  END AS HAVE001
	, CASE WHEN ISNULL(INTEREST001.ProductName, '') != '' THEN
		'You would like to learn more about:'
		+ CASE WHEN ISNULL(INTEREST001.ProductName, '') != '' THEN CHAR(13) + CHAR(10) + '  ' + CHAR(149) + ' '+ RTRIM(REPLACE(INTEREST001.ProductName, '&reg;', '®')) ELSE '' END
		+ CASE WHEN ISNULL(INTEREST002.ProductName, '') != '' THEN CHAR(13) + CHAR(10) + '  ' + CHAR(149) + ' '+ RTRIM(REPLACE(INTEREST002.ProductName, '&reg;', '®')) ELSE '' END
		+ CASE WHEN ISNULL(INTEREST003.ProductName, '') != '' THEN CHAR(13) + CHAR(10) + '  ' + CHAR(149) + ' '+ RTRIM(REPLACE(INTEREST003.ProductName, '&reg;', '®')) ELSE '' END
		+ CASE WHEN ISNULL(INTEREST004.ProductName, '') != '' THEN CHAR(13) + CHAR(10) + '  ' + CHAR(149) + ' '+ RTRIM(REPLACE(INTEREST004.ProductName, '&reg;', '®')) ELSE '' END
		+ CASE WHEN ISNULL(INTEREST005.ProductName, '') != '' THEN CHAR(13) + CHAR(10) + '  ' + CHAR(149) + ' '+ RTRIM(REPLACE(INTEREST005.ProductName, '&reg;', '®')) ELSE '' END
		+ CASE WHEN ISNULL(INTEREST006.ProductName, '') != '' THEN CHAR(13) + CHAR(10) + '  ' + CHAR(149) + ' '+ RTRIM(REPLACE(INTEREST006.ProductName, '&reg;', '®')) ELSE '' END
		+ CASE WHEN ISNULL(INTEREST007.ProductName, '') != '' THEN CHAR(13) + CHAR(10) + '  ' + CHAR(149) + ' '+ RTRIM(REPLACE(INTEREST007.ProductName, '&reg;', '®')) ELSE '' END
		+ CASE WHEN ISNULL(INTEREST008.ProductName, '') != '' THEN CHAR(13) + CHAR(10) + '  ' + CHAR(149) + ' '+ RTRIM(REPLACE(INTEREST008.ProductName, '&reg;', '®')) ELSE '' END
		+ CASE WHEN ISNULL(INTEREST009.ProductName, '') != '' THEN CHAR(13) + CHAR(10) + '  ' + CHAR(149) + ' '+ RTRIM(REPLACE(INTEREST009.ProductName, '&reg;', '®')) ELSE '' END
		+ CASE WHEN ISNULL(INTEREST010.ProductName, '') != '' THEN CHAR(13) + CHAR(10) + '  ' + CHAR(149) + ' '+ RTRIM(REPLACE(INTEREST010.ProductName, '&reg;', '®')) ELSE '' END
		+ CASE WHEN ISNULL(INTEREST011.ProductName, '') != '' THEN CHAR(13) + CHAR(10) + '  ' + CHAR(149) + ' '+ RTRIM(REPLACE(INTEREST011.ProductName, '&reg;', '®')) ELSE '' END
		+ CASE WHEN ISNULL(INTEREST012.ProductName, '') != '' THEN CHAR(13) + CHAR(10) + '  ' + CHAR(149) + ' '+ RTRIM(REPLACE(INTEREST012.ProductName, '&reg;', '®')) ELSE '' END
		+ CASE WHEN ISNULL(INTEREST013.ProductName, '') != '' THEN CHAR(13) + CHAR(10) + '  ' + CHAR(149) + ' '+ RTRIM(REPLACE(INTEREST013.ProductName, '&reg;', '®')) ELSE '' END
		+ CASE WHEN ISNULL(INTEREST014.ProductName, '') != '' THEN CHAR(13) + CHAR(10) + '  ' + CHAR(149) + ' '+ RTRIM(REPLACE(INTEREST014.ProductName, '&reg;', '®')) ELSE '' END
		+ CASE WHEN ISNULL(INTEREST015.ProductName, '') != '' THEN CHAR(13) + CHAR(10) + '  ' + CHAR(149) + ' '+ RTRIM(REPLACE(INTEREST015.ProductName, '&reg;', '®')) ELSE '' END
	  ELSE
		''
	  END AS LEARN001

FROM NewMemberRequest AS NMR
	LEFT OUTER JOIN NewMemberHome AS Home ON NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork AS Work ON NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN NewMemberStaffInfo AS Staff ON NMR.TrackingNum = Staff.TrackingNum
	LEFT OUTER JOIN NewMemberJointOwner AS JO ON NMR.TrackingNum = JO.TrackingNum AND JO.Sequence = 1
	LEFT OUTER JOIN fnSafe_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', '', '@', 'YES') AS HAVE001 ON NMR.TrackingNum = HAVE001.TrackingNum AND HAVE001.CartSequence = 1
	LEFT OUTER JOIN fnSafe_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', '', '@', 'YES') AS HAVE002 ON NMR.TrackingNum = HAVE002.TrackingNum AND HAVE002.CartSequence = 2
	LEFT OUTER JOIN fnSafe_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', '', '@', 'YES') AS HAVE003 ON NMR.TrackingNum = HAVE003.TrackingNum AND HAVE003.CartSequence = 3
	LEFT OUTER JOIN fnSafe_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', '', '@', 'YES') AS HAVE004 ON NMR.TrackingNum = HAVE004.TrackingNum AND HAVE004.CartSequence = 4
	LEFT OUTER JOIN fnSafe_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', '', '@', 'YES') AS HAVE005 ON NMR.TrackingNum = HAVE005.TrackingNum AND HAVE005.CartSequence = 5
	LEFT OUTER JOIN fnSafe_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', '', '@', 'YES') AS HAVE006 ON NMR.TrackingNum = HAVE006.TrackingNum AND HAVE006.CartSequence = 6
	LEFT OUTER JOIN fnSafe_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', '', '@', 'YES') AS HAVE007 ON NMR.TrackingNum = HAVE007.TrackingNum AND HAVE007.CartSequence = 7
	LEFT OUTER JOIN fnSafe_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', '', '@', 'YES') AS HAVE008 ON NMR.TrackingNum = HAVE008.TrackingNum AND HAVE008.CartSequence = 8
	LEFT OUTER JOIN fnSafe_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', '', '@', 'YES') AS HAVE009 ON NMR.TrackingNum = HAVE009.TrackingNum AND HAVE009.CartSequence = 9
	LEFT OUTER JOIN fnSafe_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', '', '@', 'YES') AS HAVE010 ON NMR.TrackingNum = HAVE010.TrackingNum AND HAVE010.CartSequence = 10
	LEFT OUTER JOIN fnSafe_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', '', '@', 'YES') AS HAVE011 ON NMR.TrackingNum = HAVE011.TrackingNum AND HAVE011.CartSequence = 11
	LEFT OUTER JOIN fnSafe_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', '', '@', 'YES') AS HAVE012 ON NMR.TrackingNum = HAVE012.TrackingNum AND HAVE012.CartSequence = 12
	LEFT OUTER JOIN fnSafe_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', '', '@', 'YES') AS HAVE013 ON NMR.TrackingNum = HAVE013.TrackingNum AND HAVE013.CartSequence = 13
	LEFT OUTER JOIN fnSafe_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', '', '@', 'YES') AS HAVE014 ON NMR.TrackingNum = HAVE014.TrackingNum AND HAVE014.CartSequence = 14
	LEFT OUTER JOIN fnSafe_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', '', '@', 'YES') AS HAVE015 ON NMR.TrackingNum = HAVE015.TrackingNum AND HAVE015.CartSequence = 15
	LEFT OUTER JOIN fnSafe_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', 'L', '', 'MAYBE') AS INTEREST001 ON NMR.TrackingNum = INTEREST001.TrackingNum AND INTEREST001.CartSequence = 1
	LEFT OUTER JOIN fnSafe_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', 'L', '', 'MAYBE') AS INTEREST002 ON NMR.TrackingNum = INTEREST002.TrackingNum AND INTEREST002.CartSequence = 2
	LEFT OUTER JOIN fnSafe_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', 'L', '', 'MAYBE') AS INTEREST003 ON NMR.TrackingNum = INTEREST003.TrackingNum AND INTEREST003.CartSequence = 3
	LEFT OUTER JOIN fnSafe_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', 'L', '', 'MAYBE') AS INTEREST004 ON NMR.TrackingNum = INTEREST004.TrackingNum AND INTEREST004.CartSequence = 4
	LEFT OUTER JOIN fnSafe_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', 'L', '', 'MAYBE') AS INTEREST005 ON NMR.TrackingNum = INTEREST005.TrackingNum AND INTEREST005.CartSequence = 5
	LEFT OUTER JOIN fnSafe_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', 'L', '', 'MAYBE') AS INTEREST006 ON NMR.TrackingNum = INTEREST006.TrackingNum AND INTEREST006.CartSequence = 6
	LEFT OUTER JOIN fnSafe_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', 'L', '', 'MAYBE') AS INTEREST007 ON NMR.TrackingNum = INTEREST007.TrackingNum AND INTEREST007.CartSequence = 7
	LEFT OUTER JOIN fnSafe_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', 'L', '', 'MAYBE') AS INTEREST008 ON NMR.TrackingNum = INTEREST008.TrackingNum AND INTEREST008.CartSequence = 8
	LEFT OUTER JOIN fnSafe_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', 'L', '', 'MAYBE') AS INTEREST009 ON NMR.TrackingNum = INTEREST009.TrackingNum AND INTEREST009.CartSequence = 9
	LEFT OUTER JOIN fnSafe_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', 'L', '', 'MAYBE') AS INTEREST010 ON NMR.TrackingNum = INTEREST010.TrackingNum AND INTEREST010.CartSequence = 10
	LEFT OUTER JOIN fnSafe_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', 'L', '', 'MAYBE') AS INTEREST011 ON NMR.TrackingNum = INTEREST011.TrackingNum AND INTEREST011.CartSequence = 11
	LEFT OUTER JOIN fnSafe_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', 'L', '', 'MAYBE') AS INTEREST012 ON NMR.TrackingNum = INTEREST012.TrackingNum AND INTEREST012.CartSequence = 12
	LEFT OUTER JOIN fnSafe_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', 'L', '', 'MAYBE') AS INTEREST013 ON NMR.TrackingNum = INTEREST013.TrackingNum AND INTEREST013.CartSequence = 13
	LEFT OUTER JOIN fnSafe_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', 'L', '', 'MAYBE') AS INTEREST014 ON NMR.TrackingNum = INTEREST014.TrackingNum AND INTEREST014.CartSequence = 14
	LEFT OUTER JOIN fnSafe_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', 'L', '', 'MAYBE') AS INTEREST015 ON NMR.TrackingNum = INTEREST015.TrackingNum AND INTEREST015.CartSequence = 15
WHERE NMR.TrackingNum = @TrackingNum

RETURN 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_S304_Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [IMS].[spSafe_D_S304_Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL  AS

SELECT 1 AS DocIndex, 'Welcome Letter' AS DocSubname
FROM NewMemberRequest
WHERE TrackingNum = @TrackingNum AND Created IN ('I') AND AccountType <> 'LS'

RETURN 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_S304_Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO


CREATE PROCEDURE [IMS].[spSafe_D_S304_Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS 
SELECT @DocIndex AS DocIndex, @TrackingNum AS TrackingNum
	, DATENAME(MM, GETDATE()) + RIGHT(CONVERT(VARCHAR(12), GETDATE(), 107), 9) AS TodayDate
	, IMS.fnSafe_TitleCase(LTRIM(CASE WHEN RTRIM(RTRIM(NMR.FName) + ' ' + RTRIM(NMR.LName)) = '' THEN
		CASE WHEN CHARINDEX('/', NMR.OrganizationName) > 0 THEN
			RTRIM(RIGHT(RTRIM(NMR.OrganizationName), LEN(RTRIM(NMR.OrganizationName))-CHARINDEX('/', NMR.OrganizationName)) + ' ' + LEFT(RTRIM(NMR.OrganizationName), CHARINDEX('/', NMR.OrganizationName)-1))
		ELSE
			RTRIM(NMR.OrganizationName)
		END
	  ELSE
		RTRIM(RTRIM(NMR.FName) + CASE ISNULL(NMR.MInitial, '') WHEN '' THEN '' ELSE ' ' + RTRIM(NMR.MInitial) END + ' ' + RTRIM(NMR.LName))
	  END)) AS FullName

	, ISNULL(RTRIM(JO.FName) + ' ' + RTRIM(JO.LName), '') AS JointFullName
	, REPLACE(RTRIM(IMS.fnSafe_TitleCase(CASE NMR.AccountClass
		WHEN 'O' THEN RTRIM(RTRIM(Work.Address1) + CASE ISNULL(Work.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Work.Address2) END + CASE ISNULL(Work.Address3, '') WHEN '' THEN ' ' ELSE ', ' + RTRIM(Work.Address3) END)
		ELSE RTRIM(RTRIM(Home.Address1) + CASE ISNULL(Home.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Home.Address2) END + CASE ISNULL(Home.Address3, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Home.Address3) END)
	  END)), 'Po Box', 'PO Box') AS Address
	, CASE NMR.AccountClass
		WHEN 'O' THEN RTRIM(IMS.fnSafe_TitleCase(Work.City)) + ', ' + Work.State + ' ' + CASE LEN(Work.Zip) WHEN 9 THEN LEFT(Work.Zip, 5) + '-' + Right(Work.Zip, 4) ELSE Work.Zip END
		ELSE RTRIM(IMS.fnSafe_TitleCase(Home.City)) + ', ' + Home.State + ' ' + CASE LEN(Home.Zip) WHEN 9 THEN LEFT(Home.Zip, 5) + '-' + Right(Home.Zip, 4) ELSE Home.Zip END
	  END AS CityStateZip
	, RTRIM(IMS.fnSafe_TitleCase('Dear ' + LTRIM(CASE WHEN NMR.AccountClass = 'P'
		THEN RTRIM(RTRIM(NMR.FName) + RTRIM(' ' + NMR.MInitial) + ' ' + RTRIM(NMR.LName))
		ELSE 
			CASE WHEN RTRIM(RTRIM(NMR.FName) + ' ' + RTRIM(NMR.LName)) = '' THEN
				CASE WHEN CHARINDEX('/', NMR.OrganizationName) > 0 THEN
					RTRIM(RIGHT(RTRIM(NMR.OrganizationName), LEN(RTRIM(NMR.OrganizationName))-CHARINDEX('/', NMR.OrganizationName)) + ' ' + LEFT(RTRIM(NMR.OrganizationName), CHARINDEX('/', NMR.OrganizationName)-1))
				ELSE
					RTRIM(NMR.OrganizationName)
				END
			ELSE
				RTRIM(RTRIM(NMR.FName) + CASE ISNULL(NMR.MInitial, '') WHEN '' THEN '' ELSE ' ' + RTRIM(NMR.MInitial) END + ' ' + RTRIM(NMR.LName))
			END
		END))) + ':' AS DearName
	, RTRIM(NMR.Account) + '-00' AS AccountNumberSuffix
	, RTRIM(Staff.CSFrom) AS SignersName
	, RTRIM(Staff.CSCenter) AS SignersTeam
	, RTRIM(Staff.CSPhone) AS SignersPhone
	, RTRIM(Staff.CSEmail) AS SignersEmail
	, CASE WHEN ISNULL(HAVE001.ProductName, '') != '' THEN
		'Today, you received:'
		+ CASE WHEN ISNULL(HAVE001.ProductName, '') != '' THEN CHAR(13) + CHAR(10) + '  ' + CHAR(149) + ' '+ RTRIM(REPLACE(HAVE001.ProductName, '&reg;', '®')) ELSE '' END
		+ CASE WHEN ISNULL(HAVE002.ProductName, '') != '' THEN CHAR(13) + CHAR(10) + '  ' + CHAR(149) + ' '+ RTRIM(REPLACE(HAVE002.ProductName, '&reg;', '®')) ELSE '' END
		+ CASE WHEN ISNULL(HAVE003.ProductName, '') != '' THEN CHAR(13) + CHAR(10) + '  ' + CHAR(149) + ' '+ RTRIM(REPLACE(HAVE003.ProductName, '&reg;', '®')) ELSE '' END
		+ CASE WHEN ISNULL(HAVE004.ProductName, '') != '' THEN CHAR(13) + CHAR(10) + '  ' + CHAR(149) + ' '+ RTRIM(REPLACE(HAVE004.ProductName, '&reg;', '®')) ELSE '' END
		+ CASE WHEN ISNULL(HAVE005.ProductName, '') != '' THEN CHAR(13) + CHAR(10) + '  ' + CHAR(149) + ' '+ RTRIM(REPLACE(HAVE005.ProductName, '&reg;', '®')) ELSE '' END
		+ CASE WHEN ISNULL(HAVE006.ProductName, '') != '' THEN CHAR(13) + CHAR(10) + '  ' + CHAR(149) + ' '+ RTRIM(REPLACE(HAVE006.ProductName, '&reg;', '®')) ELSE '' END
		+ CASE WHEN ISNULL(HAVE007.ProductName, '') != '' THEN CHAR(13) + CHAR(10) + '  ' + CHAR(149) + ' '+ RTRIM(REPLACE(HAVE007.ProductName, '&reg;', '®')) ELSE '' END
		+ CASE WHEN ISNULL(HAVE008.ProductName, '') != '' THEN CHAR(13) + CHAR(10) + '  ' + CHAR(149) + ' '+ RTRIM(REPLACE(HAVE008.ProductName, '&reg;', '®')) ELSE '' END
		+ CASE WHEN ISNULL(HAVE009.ProductName, '') != '' THEN CHAR(13) + CHAR(10) + '  ' + CHAR(149) + ' '+ RTRIM(REPLACE(HAVE009.ProductName, '&reg;', '®')) ELSE '' END
		+ CASE WHEN ISNULL(HAVE010.ProductName, '') != '' THEN CHAR(13) + CHAR(10) + '  ' + CHAR(149) + ' '+ RTRIM(REPLACE(HAVE010.ProductName, '&reg;', '®')) ELSE '' END
		+ CASE WHEN ISNULL(HAVE011.ProductName, '') != '' THEN CHAR(13) + CHAR(10) + '  ' + CHAR(149) + ' '+ RTRIM(REPLACE(HAVE011.ProductName, '&reg;', '®')) ELSE '' END
		+ CASE WHEN ISNULL(HAVE012.ProductName, '') != '' THEN CHAR(13) + CHAR(10) + '  ' + CHAR(149) + ' '+ RTRIM(REPLACE(HAVE012.ProductName, '&reg;', '®')) ELSE '' END
		+ CASE WHEN ISNULL(HAVE013.ProductName, '') != '' THEN CHAR(13) + CHAR(10) + '  ' + CHAR(149) + ' '+ RTRIM(REPLACE(HAVE013.ProductName, '&reg;', '®')) ELSE '' END
		+ CASE WHEN ISNULL(HAVE014.ProductName, '') != '' THEN CHAR(13) + CHAR(10) + '  ' + CHAR(149) + ' '+ RTRIM(REPLACE(HAVE014.ProductName, '&reg;', '®')) ELSE '' END
		+ CASE WHEN ISNULL(HAVE015.ProductName, '') != '' THEN CHAR(13) + CHAR(10) + '  ' + CHAR(149) + ' '+ RTRIM(REPLACE(HAVE015.ProductName, '&reg;', '®')) ELSE '' END
	  ELSE
		''
	  END AS HAVE001
	, CASE WHEN ISNULL(INTEREST001.ProductName, '') != '' THEN
		'You would like to learn more about:'
		+ CASE WHEN ISNULL(INTEREST001.ProductName, '') != '' THEN CHAR(13) + CHAR(10) + '  ' + CHAR(149) + ' '+ RTRIM(REPLACE(INTEREST001.ProductName, '&reg;', '®')) ELSE '' END
		+ CASE WHEN ISNULL(INTEREST002.ProductName, '') != '' THEN CHAR(13) + CHAR(10) + '  ' + CHAR(149) + ' '+ RTRIM(REPLACE(INTEREST002.ProductName, '&reg;', '®')) ELSE '' END
		+ CASE WHEN ISNULL(INTEREST003.ProductName, '') != '' THEN CHAR(13) + CHAR(10) + '  ' + CHAR(149) + ' '+ RTRIM(REPLACE(INTEREST003.ProductName, '&reg;', '®')) ELSE '' END
		+ CASE WHEN ISNULL(INTEREST004.ProductName, '') != '' THEN CHAR(13) + CHAR(10) + '  ' + CHAR(149) + ' '+ RTRIM(REPLACE(INTEREST004.ProductName, '&reg;', '®')) ELSE '' END
		+ CASE WHEN ISNULL(INTEREST005.ProductName, '') != '' THEN CHAR(13) + CHAR(10) + '  ' + CHAR(149) + ' '+ RTRIM(REPLACE(INTEREST005.ProductName, '&reg;', '®')) ELSE '' END
		+ CASE WHEN ISNULL(INTEREST006.ProductName, '') != '' THEN CHAR(13) + CHAR(10) + '  ' + CHAR(149) + ' '+ RTRIM(REPLACE(INTEREST006.ProductName, '&reg;', '®')) ELSE '' END
		+ CASE WHEN ISNULL(INTEREST007.ProductName, '') != '' THEN CHAR(13) + CHAR(10) + '  ' + CHAR(149) + ' '+ RTRIM(REPLACE(INTEREST007.ProductName, '&reg;', '®')) ELSE '' END
		+ CASE WHEN ISNULL(INTEREST008.ProductName, '') != '' THEN CHAR(13) + CHAR(10) + '  ' + CHAR(149) + ' '+ RTRIM(REPLACE(INTEREST008.ProductName, '&reg;', '®')) ELSE '' END
		+ CASE WHEN ISNULL(INTEREST009.ProductName, '') != '' THEN CHAR(13) + CHAR(10) + '  ' + CHAR(149) + ' '+ RTRIM(REPLACE(INTEREST009.ProductName, '&reg;', '®')) ELSE '' END
		+ CASE WHEN ISNULL(INTEREST010.ProductName, '') != '' THEN CHAR(13) + CHAR(10) + '  ' + CHAR(149) + ' '+ RTRIM(REPLACE(INTEREST010.ProductName, '&reg;', '®')) ELSE '' END
		+ CASE WHEN ISNULL(INTEREST011.ProductName, '') != '' THEN CHAR(13) + CHAR(10) + '  ' + CHAR(149) + ' '+ RTRIM(REPLACE(INTEREST011.ProductName, '&reg;', '®')) ELSE '' END
		+ CASE WHEN ISNULL(INTEREST012.ProductName, '') != '' THEN CHAR(13) + CHAR(10) + '  ' + CHAR(149) + ' '+ RTRIM(REPLACE(INTEREST012.ProductName, '&reg;', '®')) ELSE '' END
		+ CASE WHEN ISNULL(INTEREST013.ProductName, '') != '' THEN CHAR(13) + CHAR(10) + '  ' + CHAR(149) + ' '+ RTRIM(REPLACE(INTEREST013.ProductName, '&reg;', '®')) ELSE '' END
		+ CASE WHEN ISNULL(INTEREST014.ProductName, '') != '' THEN CHAR(13) + CHAR(10) + '  ' + CHAR(149) + ' '+ RTRIM(REPLACE(INTEREST014.ProductName, '&reg;', '®')) ELSE '' END
		+ CASE WHEN ISNULL(INTEREST015.ProductName, '') != '' THEN CHAR(13) + CHAR(10) + '  ' + CHAR(149) + ' '+ RTRIM(REPLACE(INTEREST015.ProductName, '&reg;', '®')) ELSE '' END
	  ELSE
		''
	  END AS LEARN001

FROM NewMemberRequest AS NMR
	LEFT OUTER JOIN NewMemberHome AS Home ON NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork AS Work ON NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN NewMemberStaffInfo AS Staff ON NMR.TrackingNum = Staff.TrackingNum
	LEFT OUTER JOIN NewMemberJointOwner AS JO ON NMR.TrackingNum = JO.TrackingNum AND JO.Sequence = 1
	LEFT OUTER JOIN fnSafe_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', '', '', 'YES') AS HAVE001 ON NMR.TrackingNum = HAVE001.TrackingNum AND HAVE001.CartSequence = 1
	LEFT OUTER JOIN fnSafe_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', '', '', 'YES') AS HAVE002 ON NMR.TrackingNum = HAVE002.TrackingNum AND HAVE002.CartSequence = 2
	LEFT OUTER JOIN fnSafe_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', '', '', 'YES') AS HAVE003 ON NMR.TrackingNum = HAVE003.TrackingNum AND HAVE003.CartSequence = 3
	LEFT OUTER JOIN fnSafe_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', '', '', 'YES') AS HAVE004 ON NMR.TrackingNum = HAVE004.TrackingNum AND HAVE004.CartSequence = 4
	LEFT OUTER JOIN fnSafe_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', '', '', 'YES') AS HAVE005 ON NMR.TrackingNum = HAVE005.TrackingNum AND HAVE005.CartSequence = 5
	LEFT OUTER JOIN fnSafe_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', '', '', 'YES') AS HAVE006 ON NMR.TrackingNum = HAVE006.TrackingNum AND HAVE006.CartSequence = 6
	LEFT OUTER JOIN fnSafe_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', '', '', 'YES') AS HAVE007 ON NMR.TrackingNum = HAVE007.TrackingNum AND HAVE007.CartSequence = 7
	LEFT OUTER JOIN fnSafe_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', '', '', 'YES') AS HAVE008 ON NMR.TrackingNum = HAVE008.TrackingNum AND HAVE008.CartSequence = 8
	LEFT OUTER JOIN fnSafe_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', '', '', 'YES') AS HAVE009 ON NMR.TrackingNum = HAVE009.TrackingNum AND HAVE009.CartSequence = 9
	LEFT OUTER JOIN fnSafe_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', '', '', 'YES') AS HAVE010 ON NMR.TrackingNum = HAVE010.TrackingNum AND HAVE010.CartSequence = 10
	LEFT OUTER JOIN fnSafe_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', '', '', 'YES') AS HAVE011 ON NMR.TrackingNum = HAVE011.TrackingNum AND HAVE011.CartSequence = 11
	LEFT OUTER JOIN fnSafe_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', '', '', 'YES') AS HAVE012 ON NMR.TrackingNum = HAVE012.TrackingNum AND HAVE012.CartSequence = 12
	LEFT OUTER JOIN fnSafe_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', '', '', 'YES') AS HAVE013 ON NMR.TrackingNum = HAVE013.TrackingNum AND HAVE013.CartSequence = 13
	LEFT OUTER JOIN fnSafe_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', '', '', 'YES') AS HAVE014 ON NMR.TrackingNum = HAVE014.TrackingNum AND HAVE014.CartSequence = 14
	LEFT OUTER JOIN fnSafe_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', '', '', 'YES') AS HAVE015 ON NMR.TrackingNum = HAVE015.TrackingNum AND HAVE015.CartSequence = 15
	LEFT OUTER JOIN fnSafe_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', 'L', '', 'MAYBE') AS INTEREST001 ON NMR.TrackingNum = INTEREST001.TrackingNum AND INTEREST001.CartSequence = 1
	LEFT OUTER JOIN fnSafe_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', 'L', '', 'MAYBE') AS INTEREST002 ON NMR.TrackingNum = INTEREST002.TrackingNum AND INTEREST002.CartSequence = 2
	LEFT OUTER JOIN fnSafe_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', 'L', '', 'MAYBE') AS INTEREST003 ON NMR.TrackingNum = INTEREST003.TrackingNum AND INTEREST003.CartSequence = 3
	LEFT OUTER JOIN fnSafe_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', 'L', '', 'MAYBE') AS INTEREST004 ON NMR.TrackingNum = INTEREST004.TrackingNum AND INTEREST004.CartSequence = 4
	LEFT OUTER JOIN fnSafe_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', 'L', '', 'MAYBE') AS INTEREST005 ON NMR.TrackingNum = INTEREST005.TrackingNum AND INTEREST005.CartSequence = 5
	LEFT OUTER JOIN fnSafe_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', 'L', '', 'MAYBE') AS INTEREST006 ON NMR.TrackingNum = INTEREST006.TrackingNum AND INTEREST006.CartSequence = 6
	LEFT OUTER JOIN fnSafe_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', 'L', '', 'MAYBE') AS INTEREST007 ON NMR.TrackingNum = INTEREST007.TrackingNum AND INTEREST007.CartSequence = 7
	LEFT OUTER JOIN fnSafe_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', 'L', '', 'MAYBE') AS INTEREST008 ON NMR.TrackingNum = INTEREST008.TrackingNum AND INTEREST008.CartSequence = 8
	LEFT OUTER JOIN fnSafe_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', 'L', '', 'MAYBE') AS INTEREST009 ON NMR.TrackingNum = INTEREST009.TrackingNum AND INTEREST009.CartSequence = 9
	LEFT OUTER JOIN fnSafe_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', 'L', '', 'MAYBE') AS INTEREST010 ON NMR.TrackingNum = INTEREST010.TrackingNum AND INTEREST010.CartSequence = 10
	LEFT OUTER JOIN fnSafe_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', 'L', '', 'MAYBE') AS INTEREST011 ON NMR.TrackingNum = INTEREST011.TrackingNum AND INTEREST011.CartSequence = 11
	LEFT OUTER JOIN fnSafe_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', 'L', '', 'MAYBE') AS INTEREST012 ON NMR.TrackingNum = INTEREST012.TrackingNum AND INTEREST012.CartSequence = 12
	LEFT OUTER JOIN fnSafe_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', 'L', '', 'MAYBE') AS INTEREST013 ON NMR.TrackingNum = INTEREST013.TrackingNum AND INTEREST013.CartSequence = 13
	LEFT OUTER JOIN fnSafe_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', 'L', '', 'MAYBE') AS INTEREST014 ON NMR.TrackingNum = INTEREST014.TrackingNum AND INTEREST014.CartSequence = 14
	LEFT OUTER JOIN fnSafe_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', 'L', '', 'MAYBE') AS INTEREST015 ON NMR.TrackingNum = INTEREST015.TrackingNum AND INTEREST015.CartSequence = 15
WHERE NMR.TrackingNum = @TrackingNum

RETURN 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_S309_Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [IMS].[spSafe_D_S309_Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @docsubname CHAR(100)
DECLARE @newdocsub CHAR(200)
DECLARE @count INT
DECLARE @docindex INT

DECLARE curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT IVR.Account
	FROM NewMemberIVRAccess AS IVR INNER JOIN NewMemberRequest AS NMR ON NMR.TrackingNum = IVR.TrackingNum
	WHERE IVR.TrackingNum = @TrackingNum AND NMR.Processed = 999 AND NMR.AccountType IN ('P', 'TE', 'TR', 'TT', 'M2', 'M5', 'M7', '17') AND 1 = 0

OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count

      	IF @count = 1
	BEGIN
		SET @docindex = @docindex + 1
		SET @newdocsub = 'Cross Account Transfer Agreement (S-309) -- Account: ' + @docsubname
		INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum, AccountSequences) VALUES(@docindex, @newdocsub, @TrackingNum, @docsubname)
	END

      	FETCH NEXT FROM curs INTO @docsubname

	IF @docsubname != NULL
	BEGIN
		SET @newdocsub = @newdocsub + ', ' + @docsubname
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex AND TrackingNum = @TrackingNum
	END
   END

CLOSE curs
DEALLOCATE curs

SELECT 'S309' AS DocCode, 'CALL-24 APPLICATION' AS ScanName, * FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
DELETE FROM NewMemberDoc WHERE TrackingNum = @TrackingNum

Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_S309_Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO


CREATE PROCEDURE [IMS].[spSafe_D_S309_Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

SELECT @DocIndex As DocIndex
	, IVR.Account AS CrossAccountTransferNumber
	, CASE WHEN IVR.AccessType = 'D' THEN 'X' END AS TransferTo
	, CASE WHEN IVR.AccessType = 'W' THEN 'X' END AS TransferFrom
	, CASE WHEN IVR.AccessType = 'A' THEN 'X' END AS TransferToFrom
FROM NewMemberRequest As NMR
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN NewMemberIVRAccess As IVR On NMR.TrackingNum = IVR.TrackingNum
WHERE NMR.TrackingNum = @TrackingNum


Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_S322_Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [IMS].[spSafe_D_S322_Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
--Declare @TrackingNum int
--DROP TABLE #docs
--DEALLOCATE curs

Declare @docsubname char(100)
Declare @newdocsub char(200)
Declare @count int
Declare @docindex int


--CREATE TABLE #docs(docindex int identity Primary Key, docsubname char(100))

Declare curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT '' AS docsubname
	FROM NewMemberSubAccount AS SA INNER JOIN NewMemberRequest AS NMR ON NMR.TrackingNum = SA.TrackingNum
	WHERE SA.TrackingNum = @TrackingNum AND NMR.Processed = 999 AND SA.Created = 'Y' AND (SA.CollateralCode = '750' OR SA.CollateralCode = '755')

--IF @@ROWCOUNT = 0

OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count

      	IF @count = 1
	BEGIN
		Set @docindex = @docindex + 1
		SET @newdocsub = 'Your Billing Rights (S-322)'-- for Suffix(s) ' + CASE LEN(@docsubname) WHEN 2 THEN @docsubname WHEN 1 THEN '0' + @docsubname ELSE 'NA' END
		INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END

      	FETCH NEXT FROM curs INTO @docsubname

	IF @docsubname != NULL
	BEGIN
		SET @newdocsub = @newdocsub + ', ' + @docsubname
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex AND TrackingNum = @TrackingNum
	END
   END

CLOSE curs
DEALLOCATE curs

Select *  FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Delete FROM NewMemberDoc WHERE TrackingNum = @TrackingNum

--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_S322_Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [IMS].[spSafe_D_S322_Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

-- STATIC DOCUMENT
SELECT @DocIndex As DocIndex
FROM NewMemberRequest As NMR
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
WHERE NMR.TrackingNum = @TrackingNum


Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_S327N_Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO


CREATE PROCEDURE [IMS].[spSafe_D_S327N_Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
--Declare @TrackingNum int
--DROP TABLE #docs
--DEALLOCATE curs

Declare @docsubname char(100)
Declare @newdocsub char(200)
Declare @count int
Declare @docindex int


--CREATE TABLE #docs(docindex int identity Primary Key, docsubname char(100))

Declare curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT '' AS docsubname
	FROM NewMemberRequest AS NMR
	WHERE NMR.TrackingNum = @TrackingNum AND NMR.Processed = 999 AND NMR.AccountType IN ('C')

--IF @@ROWCOUNT = 0

OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count

      	IF @count = 1
	BEGIN
		Set @docindex = @docindex + 1
		SET @newdocsub = 'California Uniform Transfers to Minors Act Combined Application & Agreement (S-327N)'-- for Suffix(s) ' + CASE LEN(@docsubname) WHEN 2 THEN @docsubname WHEN 1 THEN '0' + @docsubname ELSE 'NA' END
		INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END

      	FETCH NEXT FROM curs INTO @docsubname

	IF @docsubname != NULL
	BEGIN
		SET @newdocsub = @newdocsub + ', ' + @docsubname
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex AND TrackingNum = @TrackingNum
	END
   END

CLOSE curs
DEALLOCATE curs

SELECT 'S327N' AS DocCode, 'COMBINED APPLICATION' AS ScanName, * FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
DELETE FROM NewMemberDoc WHERE TrackingNum = @TrackingNum

--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_S327N_Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO


CREATE PROCEDURE [IMS].[spSafe_D_S327N_Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

SELECT @DocIndex As DocIndex
	, IMS.fnSafe_GetProducts(@TrackingNum, 1, '@') AS Products1
	, IMS.fnSafe_GetProducts(@TrackingNum, 2, '@') AS Products2
	, IMS.fnSafe_GetProducts(@TrackingNum, 3, '@') AS Products3
	, IMS.fnSafe_GetProducts(@TrackingNum, 4, '@') AS Products4

	, RTRIM(NMR.FName) + CASE ISNULL(NMR.MInitial, '') WHEN '' THEN '' ELSE ' ' + RTRIM(NMR.MInitial) END + ' ' + RTRIM(NMR.LName) + CASE WHEN NMR.Created = 'Y' THEN ' ' + RTRIM(NMR.MECHTag) ELSE '' END AS CFullName
	, RTRIM(NMR.MaidenName) AS CMaidenName
	, CASE WHEN NMR.IDType = 'D' THEN RTRIM(NMR.DriversLicenseNum) ELSE RTRIM(NMR.IDSource) + RTRIM(NMR.IDNumber) END AS CIDNumber
	, NMR.DriversLicenseState AS CIDState
	, CONVERT(CHAR(10), NMR.IDExpirationDate, 101) AS CIDExpirationDate
	, CONVERT(CHAR(10), NMR.DOB, 101) AS CDOB
	, LEFT(NMR.SSN, 3) + '-' + LEFT(RIGHT(NMR.SSN, 6), 2) + '-' + RIGHT(NMR.SSN, 4) AS CSSN
	, RTRIM(RTRIM(Home.Address1) + CASE ISNULL(Home.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Home.Address2) END + CASE ISNULL(Home.Address3, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Home.Address3) END) + ', ' + RTRIM(Home.City) + ', ' + Home.State + ' ' + CASE LEN(Home.Zip) WHEN 9 THEN LEFT(Home.Zip, 5) + '-' + Right(Home.Zip, 4) ELSE Home.Zip END AS CMailingAddress
	, Work.JobTitle AS COccupation
	, Home.CellPhoneAC + '-' + LEFT(Home.CellPhone, 3) + '-' + RIGHT(RTRIM(Home.CellPhone), 4) AS CCPhone
	, Home.Areacode + '-' + LEFT(Home.Phone, 3) + '-' + RIGHT(RTRIM(Home.Phone), 4) AS CHPhone
	, Work.Areacode + '-' + LEFT(Work.Phone, 3) + '-' + RIGHT(RTRIM(Work.Phone), 4) AS CWPhone
	, RTRIM(RTRIM(Address.Address1) + CASE ISNULL(Address.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Address.Address2) END + CASE ISNULL(Address.Address3, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Address.Address3) END) + ', ' + RTRIM(Address.City) + ', ' + Address.State + ' ' + CASE LEN(Address.Zip) WHEN 9 THEN LEFT(Address.Zip, 5) + '-' + Right(Address.Zip, 4) ELSE Address.Zip END AS CAddress

	, CASE WHEN NMR.Created = 'Y' THEN RTRIM(Minor.JOCHTag) + ' ' ELSE '' END + RTRIM(Minor.FullName)  AS MFullName
	, RTRIM(Minor.AgeOfDelivery) AS UntilAge
	, RTRIM(Minor.FullAddress) AS MAddress
	, LEFT(Minor.Phone, 3) + '-' + LEFT(RIGHT(Minor.Phone, 7), 3) + '-' + RIGHT(RTRIM(Minor.Phone), 4) AS MPhone
	, CONVERT(CHAR(10), Minor.DOB, 101) AS MDOB
	, LEFT(Minor.SSN, 3) + '-' + LEFT(RIGHT(Minor.SSN, 6), 2) + '-' + RIGHT(Minor.SSN, 4) AS MSSN

	, RTRIM(Transferer.FullName) AS TFullName
	, RTRIM(SC1.FullName) AS SCFullName01
	, RTRIM(SC2.FullName) AS SCFullName02

	, CASE WHEN NMR.Created = 'Y' AND NMR.Qualification3 = 'Location' THEN RTRIM(Dept.Description) END AS Eligibility
	, CASE WHEN NMR.Created = 'Y' AND NMR.Qualification3 = 'Employer' THEN RTRIM(Dept.Description) END AS Employer
	, CASE WHEN NMR.Created = 'Y' AND NMR.Qualification3 = 'Relative' THEN RTRIM(NMR.Qualification1) + ' / ' + RTRIM(NMR.Qualification2) END AS Relationship

FROM NewMemberRequest As NMR
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN NewMemberAddress As Address On NMR.TrackingNum = Address.TrackingNum
	LEFT OUTER JOIN IMS.Departments As Dept On NMR.Department = Dept.Department
	LEFT OUTER JOIN fnSafe_GetJOType(@TrackingNum, 'MI', '', '', '', '', '', '@') AS Minor ON NMR.TrackingNum = Minor.TrackingNum AND Minor.JointSequence = 1
	LEFT OUTER JOIN fnSafe_GetJOType(@TrackingNum, 'TD', '', '', '', '', '', '@') AS Transferer ON NMR.TrackingNum = Transferer.TrackingNum AND Transferer.JointSequence = 1
	LEFT OUTER JOIN fnSafe_GetJOType(@TrackingNum, 'SC', '', '', '', '', '', '@') AS SC1 ON NMR.TrackingNum = SC1.TrackingNum AND SC1.JointSequence = 1
	LEFT OUTER JOIN fnSafe_GetJOType(@TrackingNum, 'S2', '', '', '', '', '', '@') AS SC2 ON NMR.TrackingNum = SC2.TrackingNum AND SC2.JointSequence = 1
WHERE NMR.TrackingNum = @TrackingNum


Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_S333N_Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [IMS].[spSafe_D_S333N_Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @docsubname VARCHAR(1000)
DECLARE @newdocsub CHAR(200)
DECLARE @TempTable TABLE
	(
	[AllSequences]	CHAR(500),
	[JOSequences]	CHAR(500)
	)
DECLARE @ALLSEQ VARCHAR(500)
DECLARE @JOSEQ VARCHAR(500)
DECLARE @SUFF VARCHAR(2)
DECLARE @TEMPCOUNT INT
DECLARE @count INT
DECLARE @docindex INT
DECLARE @Testing INT
DECLARE @suffixcount INT
DECLARE @lastsuffixlist VARCHAR(100)
DECLARE @lastsuffixcount INT
DECLARE @JOSeqList CHAR(100)
DECLARE @joseqcount INT
DECLARE @BESeqList CHAR(100)
DECLARE @JList CHAR(100)
DECLARE @Suffix CHAR(2)
DECLARE @Suffixes CHAR(500)
DECLARE @SuffixList TABLE
	(
	[JOType]	CHAR(2),
	[Suffixes]	CHAR(500)
	)

DECLARE @jocount INT
SET @jocount = (SELECT COUNT(*) FROM IMS.NewMemberJointOwner JO WHERE JO.TrackingNum = @TrackingNum AND JO.JointOwnerType IN ('JM', 'JP', 'JT', 'MM') AND JO.CreateHost <> 'N')
PRINT 'JO Count is: ' + CAST(@jocount AS VARCHAR(2))
DECLARE @jbcount INT
SET @jbcount = (SELECT COUNT(*) FROM IMS.NewMemberJointOwner JO WHERE JO.TrackingNum = @TrackingNum AND JO.JointOwnerType IN ('PB') AND JO.CreateHost <> 'N')
PRINT 'JB Count is: ' + CAST(@jbcount AS VARCHAR(2))

-- Get Suffixes --------------------------------------------------------------------------------------------------------------------------------------------
-- For the Document List, Beneficiaries are ignored.  If applicable, they will be added in the FIELDS (generation).

-- Get the list of JO's by Suffix
-- This sorts by Suffix
DECLARE tempcur CURSOR LOCAL FAST_FORWARD
FOR
	SELECT DISTINCT SAJO.AllSequences, SAJO.JOSequences, SA.Suffix
	FROM IMS.NewMemberSubAccount AS SA
	LEFT JOIN IMS.NewMemberJointLink AS JL ON JL.TrackingNum = SA.TrackingNum AND JL.SubAccountSequence = SA.Sequence
	LEFT JOIN IMS.fnSafe_GetSAJOSeq(@TrackingNum, 2, 'JM', 'JP', 'JT', 'MM', '', '', '', '', '') AS SAJO ON SAJO.TrackingNum = SA.TrackingNum AND SAJO.Suffix = SA.Suffix
	LEFT JOIN IMS.NewMemberRequest AS NMR ON NMR.TrackingNum = SA.TrackingNum
	WHERE SA.TrackingNum = @TrackingNum AND SA.Created = 'Y' AND SA.ProductType NOT LIKE 'IRA%' AND NMR.Processed = 999 AND NMR.AccountType IN ('P', 'M2', 'M5', 'M7', '17', 'LS') AND SA.ProductType NOT LIKE 'IRA%'
	ORDER BY SA.Suffix
OPEN tempcur
FETCH NEXT FROM tempcur INTO @ALLSEQ, @JOSEQ, @SUFF
WHILE @@FETCH_STATUS = 0
BEGIN
	SET @TEMPCOUNT = (SELECT COUNT(*) FROM @TempTable WHERE JOSequences = @JOSEQ)
	IF @TEMPCOUNT = 0
	BEGIN
		INSERT @TempTable ([AllSequences], [JOSequences]) VALUES (@ALLSEQ, @JOSEQ)
	END
	FETCH NEXT FROM tempcur INTO @ALLSEQ, @JOSEQ, @SUFF
END
CLOSE tempcur
DEALLOCATE tempcur

DECLARE mycur1 CURSOR LOCAL FAST_FORWARD
FOR
	SELECT * FROM @TempTable
OPEN mycur1
FETCH NEXT FROM mycur1 INTO @JOSeqList, @JList

WHILE @@FETCH_STATUS = 0
BEGIN
PRINT '--------------------------------------------------------------------------------------------------------------------'
PRINT 'JOSeqList:' + ISNULL(@JOSeqList, '(none)')

-- Combine a list of Suffixes for each unique list of JO's
	DECLARE mycur2 CURSOR LOCAL FAST_FORWARD
	FOR
		SELECT DISTINCT SA.Suffix
		FROM IMS.NewMemberSubAccount AS SA
		LEFT JOIN IMS.fnSafe_GetSAJOSeq(@TrackingNum, 2, 'JM', 'JP', 'JT', 'MM', '', '', '', '', '') AS SAJO ON SAJO.TrackingNum = SA.TrackingNum AND SAJO.Suffix = SA.Suffix
		WHERE SA.TrackingNum = @TrackingNum AND SA.Created = 'Y' AND SA.ProductType NOT LIKE 'IRA%' AND SAJO.Suffix = SA.Suffix AND SAJO.AllSequences = @JOSeqList
		ORDER BY SA.Suffix
	OPEN mycur2
	FETCH NEXT FROM mycur2
	INTO @Suffix

	SET @Suffixes = ''
	WHILE @@FETCH_STATUS = 0
	BEGIN
		IF @Suffix IS NOT NULL
		BEGIN
			SET @Suffixes = RTRIM(@Suffixes) + CASE WHEN @Suffixes <> '' THEN ', ' ELSE '' END
			SET @Suffixes = RTRIM(@Suffixes) + RIGHT('0' + CAST(RTRIM(@Suffix) AS VARCHAR(2)), 2)
--			PRINT 'Current: ' + RTRIM(@Suffixes) + '  (Added: ' + RTRIM(@Suffix) + ')'
		END


		FETCH NEXT FROM mycur2
		INTO @Suffix
	END
	CLOSE mycur2
	DEALLOCATE mycur2

	SET @Suffixes = REPLACE(@Suffixes, ',', ', ')
	IF RTRIM(@Suffixes) <> ''
	BEGIN
		PRINT 'JO SUFFIXES: ' + @Suffixes
		INSERT @SuffixList ([JOType], [Suffixes]) VALUES ('JO', @Suffixes)
		SET @joseqcount = (LEN(@JOSeqList) - LEN(REPLACE(@JOSeqList, ',', ''))) + 1
		IF @joseqcount > 2
		BEGIN
			INSERT @SuffixList ([JOType], [Suffixes]) VALUES ('JO', @Suffixes)
		END
		IF @joseqcount > 4
		BEGIN
			INSERT @SuffixList ([JOType], [Suffixes]) VALUES ('JO', @Suffixes)
		END
		IF @joseqcount > 6
		BEGIN
			INSERT @SuffixList ([JOType], [Suffixes]) VALUES ('JO', @Suffixes)
		END
		IF @joseqcount > 8
		BEGIN
			INSERT @SuffixList ([JOType], [Suffixes]) VALUES ('JO', @Suffixes)
		END
		IF @joseqcount > 10
		BEGIN
			INSERT @SuffixList ([JOType], [Suffixes]) VALUES ('JO', @Suffixes)
		END
	END

	FETCH NEXT FROM mycur1
	INTO @JOSeqList, @JList
END
CLOSE mycur1
DEALLOCATE mycur1

------------------------------------------------------------------------------------------------------------------------------------------------------------------

-- Get the list of BE's by Suffix, and add them if there are 2 or less AND the suffix list matches.
DECLARE mycur1 CURSOR LOCAL FAST_FORWARD
FOR
	SELECT DISTINCT SAJO.AllSequences
	FROM IMS.NewMemberSubAccount AS SA
	LEFT JOIN IMS.NewMemberJointLink AS JL ON JL.TrackingNum = SA.TrackingNum AND JL.SubAccountSequence = SA.Sequence
	LEFT JOIN IMS.fnSafe_GetSAJOSeq(@TrackingNum, 999, '', '', '', '', '', '', 'PB', '', '') AS SAJO ON SAJO.TrackingNum = SA.TrackingNum AND SAJO.Suffix = SA.Suffix
	LEFT JOIN IMS.NewMemberRequest AS NMR ON NMR.TrackingNum = SA.TrackingNum
	WHERE SA.TrackingNum = @TrackingNum AND NMR.Processed = 999 AND NMR.AccountType IN ('P', 'M2', 'M5', 'M7', '17', 'LS') AND SA.Created = 'Y' AND SA.ProductType NOT LIKE 'IRA%' AND SAJO.AllSequences <> ''
OPEN mycur1
FETCH NEXT FROM mycur1
INTO @BESeqList

WHILE @@FETCH_STATUS = 0
BEGIN
PRINT '--------------------------------------------------------------------------------------------------------------------'
PRINT 'BESeqList:' + ISNULL(@BESeqList, '(none)')

-- Combine a list of Suffixes for each unique list of BE's
	DECLARE mycur2 CURSOR LOCAL FAST_FORWARD
	FOR
		SELECT DISTINCT SA.Suffix
		FROM IMS.NewMemberSubAccount AS SA
		LEFT JOIN IMS.fnSafe_GetSAJOSeq(@TrackingNum, 999, '', '', '', '', '', '', 'PB', '', '') AS SAJO ON SAJO.TrackingNum = SA.TrackingNum AND SAJO.Suffix = SA.Suffix
		WHERE SA.TrackingNum = @TrackingNum AND SA.Created = 'Y' AND SA.ProductType NOT LIKE 'IRA%' AND SAJO.Suffix = SA.Suffix AND SAJO.AllSequences = @BESeqList
		ORDER BY SA.Suffix
	OPEN mycur2
	FETCH NEXT FROM mycur2
	INTO @Suffix

	SET @Suffixes = ''
	WHILE @@FETCH_STATUS = 0
	BEGIN
		IF @Suffix IS NOT NULL
		BEGIN
			SET @Suffixes = RTRIM(@Suffixes) + CASE WHEN @Suffixes <> '' THEN ', ' ELSE '' END
			SET @Suffixes = RTRIM(@Suffixes) + RIGHT('0' + CAST(RTRIM(@Suffix) AS VARCHAR(2)), 2)
--			PRINT 'Current: ' + RTRIM(@Suffixes) + '  (Added: ' + RTRIM(@Suffix) + ')'
		END


		FETCH NEXT FROM mycur2
		INTO @Suffix
	END
	CLOSE mycur2
	DEALLOCATE mycur2

	SET @Suffixes = REPLACE(@Suffixes, ',', ', ')
	SET @Testing = (SELECT COUNT(*) FROM @SuffixList WHERE JOType = 'JO' AND Suffixes = @Suffixes)
	PRINT @Testing
	IF @Testing > 0 AND @jbcount <= 2
	BEGIN
		PRINT 'BE SUFFIXES: ' + @Suffixes
		INSERT @SuffixList ([JOType], [Suffixes]) VALUES ('BE', @Suffixes)
	END

	FETCH NEXT FROM mycur1
	INTO @BESeqList
END
CLOSE mycur1
DEALLOCATE mycur1

-- Display Document --------------------------------------------------------------------------------------------------------------------------------------------
PRINT '--------------------------------------------------------------------------------------------------------------------'
DECLARE curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT Suffixes
	FROM @SuffixList
	WHERE JOType = 'JO' OR JOType = 'OO'
	ORDER BY Suffixes

OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @count = 0
SET @docindex = 0
SET @lastsuffixlist = ''
--PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
   	IF @lastsuffixlist <> @docsubname
   	BEGIN
   		SET @lastsuffixlist = @docsubname
   		SET @lastsuffixcount = 0
   	END
	SET @suffixcount = (SELECT COUNT(*) FROM @SuffixList WHERE JOType = 'JO' AND Suffixes = @docsubname)
PRINT 'Suffix Count for ' + RTRIM(@docsubname) + ': ' + CAST(@suffixcount AS VARCHAR(2))
	SET @count = @count + 1
	SET @lastsuffixcount = @lastsuffixcount + 1
	PRINT @count
	PRINT @lastsuffixcount
	IF @suffixcount > 1
	BEGIN
		SET @docsubname = RTRIM(@docsubname) + ' (' + CAST(@lastsuffixcount AS VARCHAR(2)) + ' of ' + CAST(@suffixcount AS VARCHAR(2)) + ')'
	END

	SET @docindex = @docindex + 1
	SET @newdocsub = 'Combined Application & Addendum (S-333N) - Suffixes: ' + @docsubname
	INSERT INTO IMS.NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)

      	FETCH NEXT FROM curs INTO @docsubname

	IF @docsubname != NULL
	BEGIN
		SET @newdocsub = @newdocsub + ', ' + @docsubname
		UPDATE IMS.NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex AND TrackingNum = @TrackingNum
	END
   END

CLOSE curs
DEALLOCATE curs

--IF @docindex > 1 AND (@jocount > 2 OR @jbcount > 2)
--BEGIN
--	UPDATE IMS.NewMemberDoc SET DocSubName = RTRIM(DocSubName) + ' (' + CONVERT(VARCHAR, DocIndex) + ' of ' + CONVERT(VARCHAR, @docindex) + ')' WHERE TrackingNum = @TrackingNum
--END

SELECT 'S333N' AS DocCode, 'COMBINED APPLICATION' AS ScanName, * FROM IMS.NewMemberDoc WHERE TrackingNum = @TrackingNum
DELETE FROM IMS.NewMemberDoc WHERE TrackingNum = @TrackingNum

Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_S333N_Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [IMS].[spSafe_D_S333N_Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @TempTable TABLE
	(
	[AllSequences]	CHAR(500),
	[JOSequences]	CHAR(500)
	)
DECLARE @ALLSEQ VARCHAR(500)
DECLARE @JOSEQ VARCHAR(500)
DECLARE @SUFF VARCHAR(2)
DECLARE @TEMPCOUNT INT
DECLARE @count INT
DECLARE @pagenumber INT
DECLARE @pagecount INT
DECLARE @JOSeqList CHAR(100)
DECLARE @joseqcount INT
DECLARE @JList CHAR(100)
DECLARE @BList CHAR(100)
DECLARE @Suffix CHAR(2)
DECLARE @Suffixes CHAR(500)
DECLARE @BESuffixes CHAR(500)
DECLARE @SuffixFilter CHAR(500)
DECLARE @JFilter CHAR(100)
DECLARE @BFilter CHAR(100)
DECLARE @totalpages INT

DECLARE @jocount INT
SET @jocount = (SELECT COUNT(*) FROM IMS.NewMemberJointOwner JO WHERE JO.TrackingNum = @TrackingNum AND JO.JointOwnerType IN ('JM', 'JP', 'JT', 'MM') AND JO.CreateHost <> 'N')
PRINT 'JO Count is: ' + CAST(@jocount AS VARCHAR(2))
DECLARE @jbcount INT
SET @jbcount = (SELECT COUNT(*) FROM IMS.NewMemberJointOwner JO WHERE JO.TrackingNum = @TrackingNum AND JO.JointOwnerType IN ('PB') AND JO.CreateHost <> 'N')
PRINT 'JB Count is: ' + CAST(@jbcount AS VARCHAR(2))

-- Get the list of JO's by Suffix
-- This sorts by Suffix
DECLARE tempcur CURSOR LOCAL FAST_FORWARD
FOR
	SELECT DISTINCT SAJO.AllSequences, SAJO.JOSequences, SA.Suffix
	FROM IMS.NewMemberSubAccount AS SA
	LEFT JOIN IMS.NewMemberJointLink AS JL ON JL.TrackingNum = SA.TrackingNum AND JL.SubAccountSequence = SA.Sequence
	LEFT JOIN IMS.fnSafe_GetSAJOSeq(@TrackingNum, 2, 'JM', 'JP', 'JT', 'MM', '', '', '', '', '') AS SAJO ON SAJO.TrackingNum = SA.TrackingNum AND SAJO.Suffix = SA.Suffix
	LEFT JOIN IMS.NewMemberRequest AS NMR ON NMR.TrackingNum = SA.TrackingNum
	WHERE SA.TrackingNum = @TrackingNum AND SA.Created = 'Y' AND SA.ProductType NOT LIKE 'IRA%' AND NMR.Processed = 999 AND NMR.AccountType IN ('P', 'M2', 'M5', 'M7', '17', 'LS') AND SA.ProductType NOT LIKE 'IRA%'
	ORDER BY SA.Suffix
OPEN tempcur
FETCH NEXT FROM tempcur INTO @ALLSEQ, @JOSEQ, @SUFF
WHILE @@FETCH_STATUS = 0
BEGIN
	SET @TEMPCOUNT = (SELECT COUNT(*) FROM @TempTable WHERE JOSequences = @JOSEQ)
	IF @TEMPCOUNT = 0
	BEGIN
		INSERT @TempTable ([AllSequences], [JOSequences]) VALUES (@ALLSEQ, @JOSEQ)
	END
	FETCH NEXT FROM tempcur INTO @ALLSEQ, @JOSEQ, @SUFF
END
CLOSE tempcur
DEALLOCATE tempcur

DECLARE mycur1 CURSOR LOCAL FAST_FORWARD
FOR
	SELECT * FROM @TempTable
OPEN mycur1
FETCH NEXT FROM mycur1 INTO @JOSeqList, @JList

SET @SuffixFilter = ''
SET @count = 0
WHILE @@FETCH_STATUS = 0
BEGIN

-- Combine a list of Suffixes for each unique list of JO's
	DECLARE mycur2 CURSOR LOCAL FAST_FORWARD
	FOR
		SELECT DISTINCT SA.Suffix
		FROM IMS.NewMemberSubAccount AS SA
		LEFT JOIN IMS.fnSafe_GetSAJOSeq(@TrackingNum, 2, 'JM', 'JP', 'JT', 'MM', '', '', '', '', '') AS SAJO ON SAJO.TrackingNum = SA.TrackingNum AND SAJO.Suffix = SA.Suffix
		WHERE SA.TrackingNum = @TrackingNum AND SA.Created = 'Y' AND SA.ProductType NOT LIKE 'IRA%' AND SAJO.Suffix = SA.Suffix AND SAJO.AllSequences = @JOSeqList
		ORDER BY SA.Suffix
	OPEN mycur2
	FETCH NEXT FROM mycur2 INTO @Suffix

	SET @Suffixes = ''
	WHILE @@FETCH_STATUS = 0
	BEGIN
		IF @Suffix IS NOT NULL
		BEGIN
			SET @Suffixes = RTRIM(@Suffixes) + CASE WHEN @Suffixes <> '' THEN ', ' ELSE '' END
			SET @Suffixes = RTRIM(@Suffixes) + RIGHT('0' + CAST(RTRIM(@Suffix) AS VARCHAR(2)), 2)
		END


		FETCH NEXT FROM mycur2 INTO @Suffix
	END
	CLOSE mycur2
	DEALLOCATE mycur2

	PRINT 'Suffixes for ' + RTRIM(@JOSeqList) + ': ' + RTRIM(@Suffixes)
	SET @Suffixes = REPLACE(@Suffixes, ',', ', ')

	SET @joseqcount = (LEN(@JList) - LEN(REPLACE(@JList, ',', ''))) + 1
	PRINT '-- @joseqcount is: ' + CAST(@joseqcount AS VARCHAR(2))
	SET @count = @count + 1
	SET @pagecount = 1
	IF @count = @DocIndex
	BEGIN
		SET @totalpages = (@joseqcount + 1) / 2
		SET @pagenumber = @pagecount
		SET @SuffixFilter = RTRIM(@Suffixes)
		SET @JFilter = RTRIM(@JList)
	END

	IF @joseqcount > 2
	BEGIN
		SET @JList = SUBSTRING(@JList, CHARINDEX(',', @JList, CHARINDEX(',', @JList) + 1) + 2, LEN(@JList))
		SET @count = @count + 1
		SET @pagecount = @pagecount + 1
		IF @count = @DocIndex
		BEGIN
			SET @totalpages = (@joseqcount + 1) / 2
			SET @pagenumber = @pagecount
			SET @SuffixFilter = RTRIM(@Suffixes)
			SET @JFilter = RTRIM(@JList)
		END
	END
	IF @joseqcount > 4
	BEGIN
		SET @JList = SUBSTRING(@JList, CHARINDEX(',', @JList, CHARINDEX(',', @JList) + 1) + 2, LEN(@JList))
		SET @count = @count + 1
		SET @pagecount = @pagecount + 1
		IF @count = @DocIndex
		BEGIN
			SET @totalpages = (@joseqcount + 1) / 2
			SET @pagenumber = @pagecount
			SET @SuffixFilter = RTRIM(@Suffixes)
			SET @JFilter = RTRIM(@JList)
		END
	END
	IF @joseqcount > 6
	BEGIN
		SET @JList = SUBSTRING(@JList, CHARINDEX(',', @JList, CHARINDEX(',', @JList) + 1) + 2, LEN(@JList))
		SET @count = @count + 1
		IF @count = @DocIndex
		BEGIN
			SET @totalpages = (@joseqcount + 1) / 2
			SET @pagenumber = @pagecount
			SET @SuffixFilter = RTRIM(@Suffixes)
			SET @JFilter = RTRIM(@JList)
		END
	END
	IF @joseqcount > 8
	BEGIN
		SET @JList = SUBSTRING(@JList, CHARINDEX(',', @JList, CHARINDEX(',', @JList) + 1) + 2, LEN(@JList))
		SET @count = @count + 1
		IF @count = @DocIndex
		BEGIN
			SET @totalpages = (@joseqcount + 1) / 2
			SET @pagenumber = @pagecount
			SET @SuffixFilter = RTRIM(@Suffixes)
			SET @JFilter = RTRIM(@JList)
		END
	END
	IF @joseqcount > 10
	BEGIN
		SET @JList = SUBSTRING(@JList, CHARINDEX(',', @JList, CHARINDEX(',', @JList) + 1) + 2, LEN(@JList))
		SET @count = @count + 1
		IF @count = @DocIndex
		BEGIN
			SET @totalpages = (@joseqcount + 1) / 2
			SET @pagenumber = @pagecount
			SET @SuffixFilter = RTRIM(@Suffixes)
			SET @JFilter = RTRIM(@JList)
		END
	END

--   	IF @lastsuffixlist <> @Suffixes
--   	BEGIN
--   		SET @lastsuffixlist = @Suffixes
--   		SET @pagecount = 0
--   	END

	SET @BFilter = ''

--===========================================================================================================================================

	-- Get the list of BE's by Suffix
	DECLARE mycur11 CURSOR LOCAL FAST_FORWARD
	FOR
		SELECT DISTINCT SAJO.AllSequences, SAJO.BESequences
		FROM IMS.NewMemberSubAccount AS SA
		LEFT JOIN IMS.NewMemberJointLink AS JL ON JL.TrackingNum = SA.TrackingNum AND JL.SubAccountSequence = SA.Sequence
		LEFT JOIN IMS.fnSafe_GetSAJOSeq(@TrackingNum, 2, '', '', '', '', '', '', 'PB', '', '') AS SAJO ON SAJO.TrackingNum = SA.TrackingNum AND SAJO.Suffix = SA.Suffix
		LEFT JOIN IMS.NewMemberRequest AS NMR ON NMR.TrackingNum = SA.TrackingNum
		WHERE SA.TrackingNum = @TrackingNum AND SA.Created = 'Y' AND SA.ProductType NOT LIKE 'IRA%' AND NMR.Processed = 999 AND NMR.AccountType IN ('P', 'M2', 'M5', 'M7', '17', 'LS') AND SA.ProductType NOT LIKE 'IRA%' AND BESequences <> ''
	OPEN mycur11
	FETCH NEXT FROM mycur11 INTO @JOSeqList, @BList
	
	WHILE @@FETCH_STATUS = 0
	BEGIN
	
	-- Combine a list of Suffixes for each unique list of BE's
		DECLARE mycur12 CURSOR LOCAL FAST_FORWARD
		FOR
			SELECT DISTINCT SA.Suffix
			FROM IMS.NewMemberSubAccount AS SA
			LEFT JOIN IMS.fnSafe_GetSAJOSeq(@TrackingNum, 2, '', '', '', '', '', '', 'PB', '', '') AS SAJO ON SAJO.TrackingNum = SA.TrackingNum AND SAJO.Suffix = SA.Suffix
			WHERE SA.TrackingNum = @TrackingNum AND SA.Created = 'Y' AND SA.ProductType NOT LIKE 'IRA%' AND SAJO.Suffix = SA.Suffix AND SAJO.AllSequences = @JOSeqList
			ORDER BY SA.Suffix
		OPEN mycur12
		FETCH NEXT FROM mycur12 INTO @Suffix
	
		SET @BESuffixes = ''
		WHILE @@FETCH_STATUS = 0
		BEGIN
			IF @Suffix IS NOT NULL
			BEGIN
				SET @BESuffixes = RTRIM(@BESuffixes) + CASE WHEN @BESuffixes <> '' THEN ', ' ELSE '' END
				SET @BESuffixes = RTRIM(@BESuffixes) + RIGHT('0' + CAST(RTRIM(@Suffix) AS VARCHAR(2)), 2)
			END
	
	
			FETCH NEXT FROM mycur12 INTO @Suffix
		END
		CLOSE mycur12
		DEALLOCATE mycur12
	
		PRINT ' -- BE Suffixes for ' + RTRIM(@JOSeqList) + ': ' + RTRIM(@BESuffixes)
		SET @BESuffixes = REPLACE(@BESuffixes, ',', ', ')
		IF RTRIM(@SuffixFilter) <> '' AND @BESuffixes = @SuffixFilter
		BEGIN
			IF @BFilter <> ''
			BEGIN
				SET @BFilter = RTRIM(@BFilter) + ', '
			END
			SET @BFilter = RTRIM(@BFilter) + RTRIM(@BList)
		END

		FETCH NEXT FROM mycur11 INTO @JOSeqList, @BList
	END
	CLOSE mycur11
	DEALLOCATE mycur11

--===========================================================================================================================================


--	IF @SuffixFilter = @Suffixes
--	BEGIN
--		SET @totalpages = @pagecount
--	END

	FETCH NEXT FROM mycur1 INTO @JOSeqList, @JList
END
CLOSE mycur1
DEALLOCATE mycur1
PRINT '------------------------------------------------------------------------------------------------------------------------------------'
PRINT 'Page Number:  ' + CAST(@pagenumber AS VARCHAR(2))
PRINT 'Total Pages:  ' + CAST(@totalpages AS VARCHAR(2))
PRINT 'SuffixFilter: ' + RTRIM(@SuffixFilter)
PRINT 'JFilter:      ' + RTRIM(@JFilter)
PRINT 'BFilter:      ' + RTRIM(@BFilter)

SELECT @DocIndex As DocIndex
	, CASE WHEN @totalpages > 1 THEN CONVERT(VARCHAR, @pagenumber) + ' of ' + CONVERT(VARCHAR, @totalpages) ELSE '' END AS TotalPages

	, IMS.fnSafe_GetProducts(@TrackingNum, 1, @SuffixFilter) AS Products1
	, IMS.fnSafe_GetProducts(@TrackingNum, 2, @SuffixFilter) AS Products2
	, IMS.fnSafe_GetProducts(@TrackingNum, 3, @SuffixFilter) AS Products3
	, IMS.fnSafe_GetProducts(@TrackingNum, 4, @SuffixFilter) AS Products4

	, RTRIM(NMR.FName) + CASE ISNULL(NMR.MInitial, '') WHEN '' THEN '' ELSE ' ' + RTRIM(NMR.MInitial) END + ' ' + RTRIM(NMR.LName) AS FullName
	, RTRIM(NMR.Email1) AS Email
	, CONVERT(CHAR(10), NMR.DOB, 101) AS DOB
	, LEFT(NMR.SSN, 3) + '-' + LEFT(RIGHT(NMR.SSN, 6), 2) + '-' + RIGHT(NMR.SSN, 4) AS SSN
	, RTRIM(RTRIM(Home.Address1) + CASE ISNULL(Home.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Home.Address2) END + CASE ISNULL(Home.Address3, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Home.Address3) END) + CASE ISNULL(Home.ApartmentNumber, '') WHEN '' THEN '' ELSE ' #' + RTRIM(Home.ApartmentNumber) END + ', ' + RTRIM(Home.City) + ', ' + Home.State + ' ' + CASE LEN(Home.Zip) WHEN 9 THEN LEFT(Home.Zip, 5) + '-' + Right(Home.Zip, 4) ELSE Home.Zip END AS MailingAddress
	, RTRIM(RTRIM(Address.Address1) + CASE ISNULL(Address.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Address.Address2) END + CASE ISNULL(Address.Address3, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Address.Address3) END) + ', ' + RTRIM(Address.City) + ', ' + Address.State + ' ' + CASE LEN(Address.Zip) WHEN 9 THEN LEFT(Address.Zip, 5) + '-' + Right(Address.Zip, 4) ELSE Address.Zip END AS Address
	, Home.Areacode + '-' + LEFT(Home.Phone, 3) + '-' + RIGHT(RTRIM(Home.Phone), 4) AS HPhone
	, Work.Areacode + '-' + LEFT(Work.Phone, 3) + '-' + RIGHT(RTRIM(Work.Phone), 4) AS WPhone
	, Home.CellPhoneAC + '-' + LEFT(Home.CellPhone, 3) + '-' + RIGHT(RTRIM(Home.CellPhone), 4) AS CPhone
	, RTRIM(NMR.MaidenName) AS MaidenName
	, CASE WHEN NMR.IDType = 'D' THEN RTRIM(NMR.DriversLicenseNum) ELSE RTRIM(NMR.IDSource) + RTRIM(NMR.IDNumber) END AS IDNumber
	, NMR.DriversLicenseState AS IDState
	, NMR.IDExpirationDate AS IDExpirationDate
	, CASE WHEN NMR.AccountType <> 'M2' AND NMR.AccountType <> 'M5' THEN RTRIM(Work.EmployerName) ELSE '' END AS EmployerName	--M7 removed 12/14/2010 Eventum#5533
	, CASE WHEN UPPER(Work.JobTitle) <> 'BLANK' AND UPPER(Work.JobTitle) <> 'N/A' AND UPPER(Work.JobTitle) <> 'NONE' AND UPPER(Work.JobTitle) <> 'OTHER' AND UPPER(Work.JobTitle) <> 'UNKNOWN'
	  THEN RTRIM(Work.JobTitle)
	  ELSE '' END AS Occupation

	, RTRIM(JO01.FullName)  AS JO01FullName
	, RTRIM(JO01.DriversLicenseNum) AS JO01IDNumber
	, RTRIM(JO01.DriversLicenseState) AS JO01IDState
	, CONVERT(CHAR(10), JO01.IDExpirationDate, 101) AS JO01IDExpirationDate
	, CONVERT(CHAR(10), JO01.DOB, 101) AS JO01DOB
	, LEFT(JO01.SSN, 3) + '-' + LEFT(RIGHT(JO01.SSN, 6), 2) + '-' + RIGHT(JO01.SSN, 4) AS JO01SSN
	, RTRIM(JO01.FullAddress) AS JO01Address
	, RTRIM(JO01.JobTitle) AS JO01Occupation
	, CASE WHEN LEN(JO01.CellPhone) <> 0 THEN LEFT(JO01.CellPhone, 3) + '-' + CASE WHEN LEN(JO01.CellPhone) = 10 THEN LEFT(RIGHT(JO01.CellPhone, 7), 3) + '-' + RIGHT(RTRIM(JO01.CellPhone), 4) ELSE '' END ELSE '' END AS JO01CPhone
	, CASE WHEN LEN(JO01.Phone) <> 0 THEN LEFT(JO01.Phone, 3) + '-' + CASE WHEN LEN(JO01.Phone) = 10 THEN LEFT(RIGHT(JO01.Phone, 7), 3) + '-' + RIGHT(RTRIM(JO01.Phone), 4) ELSE '' END ELSE '' END AS JO01HPhone
	, CASE WHEN LEN(JO01.WorkPhone) <> 0 THEN LEFT(JO01.WorkPhone, 3) + '-' + CASE WHEN LEN(JO01.WorkPhone) = 10 THEN LEFT(RIGHT(JO01.WorkPhone, 7), 3) + '-' + RIGHT(RTRIM(JO01.WorkPhone), 4) ELSE '' END ELSE '' END AS JO01WPhone

	, RTRIM(JO02.FullName)  AS JO02FullName
	, RTRIM(JO02.DriversLicenseNum) AS JO02IDNumber
	, RTRIM(JO02.DriversLicenseState) AS JO02IDState
	, CONVERT(CHAR(10), JO02.IDExpirationDate, 101) AS JO02IDExpirationDate
	, CONVERT(CHAR(10), JO02.DOB, 101) AS JO02DOB
	, LEFT(JO02.SSN, 3) + '-' + LEFT(RIGHT(JO02.SSN, 6), 2) + '-' + RIGHT(JO02.SSN, 4) AS JO02SSN
	, RTRIM(JO02.FullAddress) AS JO02Address
	, RTRIM(JO02.JobTitle) AS JO02Occupation
	, CASE WHEN LEN(JO02.CellPhone) <> 0 THEN LEFT(JO02.CellPhone, 3) + '-' + CASE WHEN LEN(JO02.CellPhone) = 10 THEN LEFT(RIGHT(JO02.CellPhone, 7), 3) + '-' + RIGHT(RTRIM(JO02.CellPhone), 4) ELSE '' END ELSE '' END AS JO02CPhone
	, CASE WHEN LEN(JO02.Phone) <> 0 THEN LEFT(JO02.Phone, 3) + '-' + CASE WHEN LEN(JO02.Phone) = 10 THEN LEFT(RIGHT(JO02.Phone, 7), 3) + '-' + RIGHT(RTRIM(JO02.Phone), 4) ELSE '' END ELSE '' END AS JO02HPhone
	, CASE WHEN LEN(JO02.WorkPhone) <> 0 THEN LEFT(JO02.WorkPhone, 3) + '-' + CASE WHEN LEN(JO02.WorkPhone) = 10 THEN LEFT(RIGHT(JO02.WorkPhone, 7), 3) + '-' + RIGHT(RTRIM(JO02.WorkPhone), 4) ELSE '' END ELSE '' END AS JO02WPhone

	, RTRIM(PB01.FullName)  AS BE01FullName
	, RTRIM(PB01.FullAddress) AS BE01Address
	, RTRIM(PB01.Relationship) AS BE01Relationship
	, CONVERT(CHAR(10), PB01.DOB, 101) AS BE01DOB

	, RTRIM(PB02.FullName)  AS BE02FullName
	, RTRIM(PB02.FullAddress) AS BE02Address
	, RTRIM(PB02.Relationship) AS BE02Relationship
	, CONVERT(CHAR(10), PB02.DOB, 101) AS BE02DOB

	, CASE WHEN NMR.Created = 'Y' THEN
		  CASE NMR.Qualification3
		     	WHEN 'Relative'  THEN RTRIM(NMR.Qualification3) + ': ' + RTRIM(NMR.Qualification1) + ' / ' + RTRIM(NMR.Qualification2)
		     	WHEN 'Location'  THEN RTRIM(NMR.Qualification3) + ': ' + RTRIM(Dept.Description)
		     	WHEN 'Employer'  THEN RTRIM(NMR.Qualification3) + ': ' + RTRIM(Dept.Description)
		  END
	  END AS Eligibility0

	, CASE WHEN JO01.JointOwnerType IN ('JT', 'MM') AND NMR.Created = 'Y' THEN
		--CASE WHEN ISNULL(JO01.JointAccount, '') <> '' THEN
		--	'Existing Member: ' + RTRIM(JO01.JointAccount)
		--ELSE
			CASE JO01.Qualification3
		     	WHEN 'Relative'  THEN RTRIM(JO01.Qualification3) + ': ' + RTRIM(JO01.Qualification1)
		     	WHEN 'Location'  THEN RTRIM(JO01.Qualification3) + ': ' + RTRIM(JO01.DepartmentName)
		     	WHEN 'Employer'  THEN RTRIM(JO01.Qualification3) + ': ' + RTRIM(JO01.DepartmentName)
			END
		--END
	  ELSE ''
	  END AS Eligibility1

	, CASE WHEN JO02.JointOwnerType IN ('JT', 'MM') AND NMR.Created = 'Y' THEN
		--CASE WHEN ISNULL(JO02.JointAccount, '') <> '' THEN
		--	'Existing Member: ' + RTRIM(JO02.JointAccount)
		--ELSE
			CASE JO02.Qualification3
		     	WHEN 'Relative'  THEN RTRIM(JO02.Qualification3) + ': ' + RTRIM(JO02.Qualification1)
		     	WHEN 'Location'  THEN RTRIM(JO02.Qualification3) + ': ' + RTRIM(JO02.DepartmentName)
		     	WHEN 'Employer'  THEN RTRIM(JO02.Qualification3) + ': ' + RTRIM(JO02.DepartmentName)
			END
		--END
	  ELSE ''
	  END AS Eligibility2
FROM IMS.NewMemberRequest As NMR
	LEFT OUTER JOIN IMS.NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN IMS.NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN IMS.NewMemberAddress As Address On NMR.TrackingNum = Address.TrackingNum
	LEFT OUTER JOIN IMS.Departments As Dept On NMR.Department = Dept.Department
	LEFT OUTER JOIN IMS.fnSafe_GetJOType(@TrackingNum, 'JM', 'JP', 'JT', 'MM', '', '', '@') AS JO01 ON NMR.TrackingNum = JO01.TrackingNum AND JO01.Sequence = IMS.fnSafe_Split(@JFilter, ',', 1)
	LEFT OUTER JOIN IMS.fnSafe_GetJOType(@TrackingNum, 'JM', 'JP', 'JT', 'MM', '', '', '@') AS JO02 ON NMR.TrackingNum = JO02.TrackingNum AND JO02.Sequence = IMS.fnSafe_Split(@JFilter, ',', 2)
	LEFT OUTER JOIN IMS.fnSafe_GetJOType(@TrackingNum, 'PB', '', '', '', '', '', '@') AS PB01 ON NMR.TrackingNum = PB01.TrackingNum AND PB01.Sequence = IMS.fnSafe_Split(@BFilter, ',', 1)
	LEFT OUTER JOIN IMS.fnSafe_GetJOType(@TrackingNum, 'PB', '', '', '', '', '', '@') AS PB02 ON NMR.TrackingNum = PB02.TrackingNum AND PB02.Sequence = IMS.fnSafe_Split(@BFilter, ',', 2)
WHERE NMR.TrackingNum = @TrackingNum

Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_S36_Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO


CREATE PROCEDURE [IMS].[spSafe_D_S36_Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
--Declare @TrackingNum int
--DROP TABLE #docs
--DEALLOCATE curs

Declare @docsubname char(100)
Declare @docsuffix char(2)
Declare @newdocsub char(200)
Declare @count int
Declare @docindex int


--CREATE TABLE #docs(docindex int identity Primary Key, docsubname char(100))

Declare curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT DISTINCT SA.Sequence, CONVERT(char(2), SA.Suffix)
	FROM NewMemberSubAccount As SA
	INNER JOIN NewMemberRequest AS NMR ON NMR.TrackingNum = SA.TrackingNum
	WHERE SA.TrackingNum = @TrackingNum AND SA.SLType = 'I' AND SA.ProductType LIKE 'IRA%' AND SA.SubAccountType IN ('IRA', 'RIA') AND SA.Created = 'Y'


--	SELECT DISTINCT SA.Sequence, CONVERT(char(2), SA.Suffix)
--	FROM NewMemberSubAccount As SA
--	INNER JOIN NewMemberRequest AS NMR ON NMR.TrackingNum = SA.TrackingNum
--	WHERE SA.TrackingNum = @TrackingNum AND SA.SLType = 'I' AND SA.ProductType LIKE 'IRA%' AND SA.Created = 'Y'

--IF @@ROWCOUNT = 0

OPEN curs
FETCH NEXT FROM curs INTO @docsubname, @docsuffix
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count

	Set @docindex = @docindex + 1
	SET @newdocsub = 'Accumulation Disclosure (S-36) for Suffix(s) ' + CASE LEN(@docsuffix) WHEN 2 THEN @docsuffix WHEN 1 THEN '0' + @docsuffix ELSE 'NA' END
	INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)

      	FETCH NEXT FROM curs INTO @docsubname, @docsuffix

	IF @docsubname != NULL
	BEGIN
		SET @newdocsub = @newdocsub + ', ' + @docsubname
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex AND TrackingNum = @TrackingNum
	END
   END

CLOSE curs
DEALLOCATE curs

Select *  FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Delete FROM NewMemberDoc WHERE TrackingNum = @TrackingNum

--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_S36_Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO


CREATE PROCEDURE [IMS].[spSafe_D_S36_Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @seq INT
DECLARE @seq1 INT
DECLARE @count INT

DECLARE curs2 CURSOR LOCAL FAST_FORWARD FOR
	SELECT DISTINCT CONVERT(INT, SA.Sequence)
	FROM NewMemberSubAccount AS SA
	WHERE SA.TrackingNum = @TrackingNum AND SA.SLType = 'I' AND SA.ProductType LIKE 'IRA%' AND SA.SubAccountType IN ('IRA', 'RIA') AND SA.Created = 'Y'

OPEN curs2
FETCH NEXT FROM curs2 INTO @seq
SET @count = 1
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
      	IF (@count = @DocIndex)
		BEGIN
			Set @seq1 = @seq
		END
      	FETCH NEXT FROM curs2 INTO @seq
	SET @count = @count + 1
	PRINT @count
   END
CLOSE curs2
DEALLOCATE curs2

SELECT @DocIndex As DocIndex
	, RTRIM(CAST(NMR.Account AS VARCHAR(10))) + '-' + RIGHT('00' + RTRIM(CAST(IRA.Suffix AS VARCHAR(2))), 2) AS Account
	, CASE WHEN PATINDEX('%ROTH%', UPPER(IRA.Description)) = 0 THEN 'X' END AS TradIRA
	, CASE WHEN PATINDEX('%ROTH%', UPPER(IRA.Description)) > 0 THEN 'X' END AS RothIRA
	, RTRIM(NMR.FName) + CASE ISNULL(NMR.MInitial, '') WHEN '' THEN '' ELSE ' ' + RTRIM(NMR.MInitial) END + ' ' + RTRIM(NMR.LName) AS FullName
	, RTRIM(IMS.fnSafe_GetSABEs(@TrackingNum, @seq1)) AS Beneficiaries
	, CONVERT(CHAR(10), IRA.CreatedOn, 101) AS IssueDate
	, CASE WHEN NMR.FundAccount = 'Y' THEN '$' + RTRIM(CONVERT(VARCHAR(15), CONVERT(MONEY, IRA.Amount)/100, 1)) ELSE '$0.00' END AS Balance
FROM NewMemberRequest As NMR
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN fnSafe_GetSASeq(@TrackingNum, @seq1) AS IRA ON NMR.TrackingNum = IRA.TrackingNum
WHERE NMR.TrackingNum = @TrackingNum


Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_S388_Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO


CREATE PROCEDURE [IMS].[spSafe_D_S388_Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
--Declare @TrackingNum int
--DROP TABLE #docs
--DEALLOCATE curs

Declare @docsubname char(100)
Declare @newdocsub char(200)
Declare @count int
Declare @docindex int


--CREATE TABLE #docs(docindex int identity Primary Key, docsubname char(100))

Declare curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT '' AS docsubname
	FROM NewMemberSubAccount AS SA INNER JOIN NewMemberRequest AS NMR ON NMR.TrackingNum = SA.TrackingNum
	WHERE SA.TrackingNum = @TrackingNum AND NMR.Processed = 999 AND (NMR.Created = 'Y' OR (SA.Created = 'Y' AND SA.SubAccountType IN ('NDA-74', 'YMA-16', 'SSA-1', 'KID-16')))

--IF @@ROWCOUNT = 0

OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count

      	IF @count = 1
	BEGIN
		Set @docindex = @docindex + 1
		SET @newdocsub = 'Funds Availability Policy (S-388)'-- for Suffix(s) ' + CASE LEN(@docsubname) WHEN 2 THEN @docsubname WHEN 1 THEN '0' + @docsubname ELSE 'NA' END
		INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END

      	FETCH NEXT FROM curs INTO @docsubname

	IF @docsubname != NULL
	BEGIN
		SET @newdocsub = @newdocsub + ', ' + @docsubname
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex AND TrackingNum = @TrackingNum
	END
   END

CLOSE curs
DEALLOCATE curs

Select *  FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Delete FROM NewMemberDoc WHERE TrackingNum = @TrackingNum

--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_S388_Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO


CREATE PROCEDURE [IMS].[spSafe_D_S388_Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

-- STATIC DOCUMENT
SELECT @DocIndex As DocIndex
FROM NewMemberRequest As NMR
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
WHERE NMR.TrackingNum = @TrackingNum


Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_S402_Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO


CREATE PROCEDURE [IMS].[spSafe_D_S402_Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @docsubname char(100)
DECLARE @newdocsub char(200)
DECLARE @count int
DECLARE @docindex int

DECLARE curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT '' AS docsubname
	FROM NewMemberSubAccount AS SA
	INNER JOIN NewMemberRequest AS NMR ON NMR.TrackingNum = SA.TrackingNum
	WHERE SA.TrackingNum = @TrackingNum AND NMR.Processed = 999 AND (NMR.Created = 'Y' OR (SA.Created = 'Y' AND (SA.ProductType <> 'CERT' OR SA.ProductType = 'HOL04')))

OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count

      	IF @count = 1
	BEGIN
		SET @docindex = @docindex + 1
		SET @newdocsub = 'Account Disclosure & Agreement (S-402)'-- for Suffix(s) ' + CASE LEN(@docsubname) WHEN 2 THEN @docsubname WHEN 1 THEN '0' + @docsubname ELSE 'NA' END
		INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END

      	FETCH NEXT FROM curs INTO @docsubname

	IF @docsubname != NULL
	BEGIN
		SET @newdocsub = @newdocsub + ', ' + @docsubname
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex AND TrackingNum = @TrackingNum
	END
   END

CLOSE curs
DEALLOCATE curs

SELECT * FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
DELETE FROM NewMemberDoc WHERE TrackingNum = @TrackingNum

--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_S402_Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [IMS].[spSafe_D_S402_Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

-- STATIC DOCUMENT
SELECT @DocIndex As DocIndex
FROM NewMemberRequest As NMR
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
WHERE NMR.TrackingNum = @TrackingNum


Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_S443N_Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO


CREATE PROCEDURE [IMS].[spSafe_D_S443N_Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
--Declare @TrackingNum int
--DROP TABLE #docs
--DEALLOCATE curs

Declare @docsubname char(100)
Declare @newdocsub char(200)
Declare @count int
Declare @docindex int


--CREATE TABLE #docs(docindex int identity Primary Key, docsubname char(100))

Declare curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT '' AS docsubname
	FROM NewMemberRequest AS NMR
	WHERE NMR.TrackingNum = @TrackingNum AND NMR.Processed = 999 AND NMR.AccountType IN ('BO', 'CG', 'RP')

--IF @@ROWCOUNT = 0

OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count

      	IF @count = 1
	BEGIN
		SET @docindex = @docindex + 1
		SET @newdocsub = 'Fiduciary Account Application & Agreement (S-443N)'-- for Suffix(s) ' + CASE LEN(@docsubname) WHEN 2 THEN @docsubname WHEN 1 THEN '0' + @docsubname ELSE 'NA' END
		INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END

      	FETCH NEXT FROM curs INTO @docsubname

	IF @docsubname != NULL
	BEGIN
		SET @newdocsub = @newdocsub + ', ' + @docsubname
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex AND TrackingNum = @TrackingNum
	END
   END

CLOSE curs
DEALLOCATE curs

SELECT 'S443N' AS DocCode, * FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
DELETE FROM NewMemberDoc WHERE TrackingNum = @TrackingNum

--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_S443N_Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO


CREATE PROCEDURE [IMS].[spSafe_D_S443N_Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

SELECT @DocIndex As DocIndex
	, IMS.fnSafe_GetProducts(@TrackingNum, 1, '@') AS Products1
	, IMS.fnSafe_GetProducts(@TrackingNum, 2, '@') AS Products2
	, IMS.fnSafe_GetProducts(@TrackingNum, 3, '@') AS Products3
--	, IMS.fnSafe_GetProducts(@TrackingNum, 4, '@') AS Products4
	, CASE WHEN NMR.AccountType = 'BO' THEN 'X' END AS BO
	, CASE WHEN NMR.AccountType = 'CG' AND NMR.MECHTag = 'CNSVTR' THEN 'X' END AS CG_C
	, CASE WHEN NMR.AccountType = 'CG' AND NMR.MECHTag = 'GRDN' THEN 'X' END AS CG_G
	, CASE WHEN NMR.AccountType = 'RP' THEN 'X' END AS RP

	, CASE WHEN NMR.Created = 'Y' THEN RTRIM(Beneficiary.JOCHTag) + ' ' ELSE '' END + RTRIM(Beneficiary.FullName)  AS BFullName
	, CONVERT(CHAR(10), Beneficiary.DOB, 101) AS BDOB
	, LEFT(Beneficiary.SSN, 3) + '-' + LEFT(RIGHT(Beneficiary.SSN, 6), 2) + '-' + RIGHT(Beneficiary.SSN, 4) AS BSSN
	, RTRIM(Beneficiary.FullAddress) AS BMailingAddress
	, '' AS BAddress

	, RTRIM(NMR.CourtName) AS CourtAgency
	, RTRIM(NMR.CaseNumber) AS CaseNumber
	, CONVERT(CHAR(10), NMR.AffirmationDate, 101) AS AffirmationDate

	, RTRIM(NMR.FName) + CASE ISNULL(NMR.MInitial, '') WHEN '' THEN '' ELSE ' ' + RTRIM(NMR.MInitial) END + ' ' + RTRIM(NMR.LName) + CASE WHEN NMR.Created = 'Y' THEN ' ' + RTRIM(NMR.MECHTag) ELSE '' END AS FFullName
	, CONVERT(CHAR(10), NMR.DOB, 101) AS FDOB
	, LEFT(NMR.SSN, 3) + '-' + LEFT(RIGHT(NMR.SSN, 6), 2) + '-' + RIGHT(NMR.SSN, 4) AS FSSN
	, RTRIM(RTRIM(Home.Address1) + CASE ISNULL(Home.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Home.Address2) END + CASE ISNULL(Home.Address3, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Home.Address3) END + CASE ISNULL(Home.ApartmentNumber, '') WHEN '' THEN '' ELSE ' ' + RTRIM(Home.ApartmentNumber) END) + ', ' + RTRIM(Home.City) + ', ' + Home.State + ' ' + CASE LEN(Home.Zip) WHEN 9 THEN LEFT(Home.Zip, 5) + '-' + Right(Home.Zip, 4) ELSE Home.Zip END AS FMailingAddress
	, RTRIM(RTRIM(Address.Address1) + CASE ISNULL(Address.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Address.Address2) END + CASE ISNULL(Address.Address3, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Address.Address3) END) + ', ' + RTRIM(Address.City) + ', ' + Address.State + ' ' + CASE LEN(Address.Zip) WHEN 9 THEN LEFT(Address.Zip, 5) + '-' + Right(Address.Zip, 4) ELSE Address.Zip END AS FAddress
	, CASE WHEN NMR.IDType = 'D' THEN RTRIM(NMR.DriversLicenseNum) ELSE RTRIM(NMR.IDSource) + RTRIM(NMR.IDNumber) END AS FIDNumber
	, NMR.DriversLicenseState AS FIDState
	, NMR.IDExpirationDate AS FIDExpirationDate
	, RTRIM(NMR.MaidenName) AS FMaidenName
	, RTRIM(Work.JobTitle) AS FOccupation
	, Home.CellPhoneAC + '-' + LEFT(Home.CellPhone, 3) + '-' + RIGHT(RTRIM(Home.CellPhone), 4) AS FCPhone
	, Home.Areacode + '-' + LEFT(Home.Phone, 3) + '-' + RIGHT(RTRIM(Home.Phone), 4) AS FHPhone
	, Work.Areacode + '-' + LEFT(Work.Phone, 3) + '-' + RIGHT(RTRIM(Work.Phone), 4) AS FWPhone


	, CASE WHEN NMR.Created = 'Y' AND NMR.Qualification3 = 'Location' THEN RTRIM(Dept.Description) END AS Eligibility
	, CASE WHEN NMR.Created = 'Y' AND NMR.Qualification3 = 'Employer' THEN RTRIM(Dept.Description) END AS Employer
	, CASE WHEN NMR.Created = 'Y' AND NMR.Qualification3 = 'Relative' THEN RTRIM(NMR.Qualification1) + ' / ' + RTRIM(NMR.Qualification2) END AS Relationship
FROM NewMemberRequest As NMR
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN NewMemberAddress As Address On NMR.TrackingNum = Address.TrackingNum
	LEFT OUTER JOIN IMS.Departments As Dept On NMR.Department = Dept.Department
	LEFT OUTER JOIN fnSafe_GetJOType(@TrackingNum, 'CB', '', '', '', '', '', '@') AS Beneficiary ON NMR.TrackingNum = Beneficiary.TrackingNum AND Beneficiary.JointSequence = 1
WHERE NMR.TrackingNum = @TrackingNum


Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_S461N_Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO


CREATE PROCEDURE [IMS].[spSafe_D_S461N_Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
--Declare @TrackingNum int
--DROP TABLE #docs
--DEALLOCATE curs

Declare @docsubname char(100)
Declare @newdocsub char(200)
Declare @count int
Declare @docindex int


--CREATE TABLE #docs(docindex int identity Primary Key, docsubname char(100))

Declare curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT '' AS docsubname
	FROM NewMemberRequest AS NMR
	WHERE NMR.TrackingNum = @TrackingNum AND NMR.Processed = 999 AND NMR.AccountType IN ('E')

--IF @@ROWCOUNT = 0

OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count

      	IF @count = 1
	BEGIN
		SET @docindex = @docindex + 1
		SET @newdocsub = 'Estate Account Application & Agreement (S-461N)'-- for Suffix(s) ' + CASE LEN(@docsubname) WHEN 2 THEN @docsubname WHEN 1 THEN '0' + @docsubname ELSE 'NA' END
		INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END

      	FETCH NEXT FROM curs INTO @docsubname

	IF @docsubname != NULL
	BEGIN
		SET @newdocsub = @newdocsub + ', ' + @docsubname
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex AND TrackingNum = @TrackingNum
	END
   END

CLOSE curs
DEALLOCATE curs

SELECT 'S461N' AS DocCode, 'COMBINED APPLICATION' AS ScanName, * FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
DELETE FROM NewMemberDoc WHERE TrackingNum = @TrackingNum

--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_S461N_Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [IMS].[spSafe_D_S461N_Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

SELECT @DocIndex As DocIndex
	, IMS.fnSafe_GetProducts(@TrackingNum, 1, '@') AS Products1
	, IMS.fnSafe_GetProducts(@TrackingNum, 2, '@') AS Products2
	, IMS.fnSafe_GetProducts(@TrackingNum, 3, '@') AS Products3
	, IMS.fnSafe_GetProducts(@TrackingNum, 4, '@') AS Products4

	, REPLACE(RTRIM(NMR.OrganizationName), '/', '') AS EstateName
	, LEFT(NMR.SSN, 2) + '-' + RIGHT(NMR.SSN, 7) AS EstateTIN
	, RTRIM(NMR.CourtName) AS CourtAgency
	, RTRIM(NMR.CaseNumber) AS CaseNumber
	, CONVERT(CHAR(10), NMR.AffirmationDate, 101) AS AffirmationDate
-- Changed to Mailing Address from Member Tab (Eventum #5467)t
	, RTRIM(RTRIM(Work.Address1) + CASE ISNULL(Work.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Work.Address2) END + CASE ISNULL(Work.Address3, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Work.Address3) END) + ', ' + RTRIM(Work.City) + ', ' + Work.State + ' ' + CASE LEN(Work.Zip) WHEN 9 THEN LEFT(Work.Zip, 5) + '-' + Right(Work.Zip, 4) ELSE Work.Zip END AS MailingAddress

	, RTRIM(EX01.FullName) + ' ' + CASE WHEN NMR.Created = 'Y' THEN RTRIM(EX01.JOCHTag) ELSE '' END AS EFullName
	, CASE WHEN LEN(EX01.CellPhone) <> 0 THEN LEFT(EX01.CellPhone, 3) + '-' + CASE WHEN LEN(EX01.CellPhone) = 10 THEN LEFT(RIGHT(EX01.CellPhone, 7), 3) + '-' + RIGHT(RTRIM(EX01.CellPhone), 4) ELSE '' END ELSE '' END AS ECPhone
	, LEFT(EX01.Phone, 3) + '-' + LEFT(RIGHT(EX01.Phone, 7), 3) + '-' + RIGHT(RTRIM(EX01.Phone), 4) AS EHPhone
	, CASE WHEN LEN(EX01.WorkPhone) <> 0 THEN LEFT(EX01.WorkPhone, 3) + '-' + CASE WHEN LEN(EX01.WorkPhone) = 10 THEN LEFT(RIGHT(EX01.WorkPhone, 7), 3) + '-' + RIGHT(RTRIM(EX01.WorkPhone), 4) ELSE '' END ELSE '' END AS EWPhone
	, RTRIM(EX01.FullAddress) AS EAddress
	, RTRIM(EX01.JobTitle) AS EOccupation
	, RTRIM('') AS EMaidenName
	, RTRIM(EX01.DriversLicenseNum) AS EIDNumber
	, RTRIM(EX01.DriversLicenseState) AS EIDState
	, CONVERT(CHAR(10), EX01.IDExpirationDate, 101) AS EIDExpirationDate
	, CONVERT(CHAR(10), EX01.DOB, 101) AS EDOB
	, LEFT(EX01.SSN, 3) + '-' + LEFT(RIGHT(EX01.SSN, 6), 2) + '-' + RIGHT(EX01.SSN, 4) AS ESSN

	, RTRIM(EX02.FullName) + ' ' + CASE WHEN NMR.Created = 'Y' THEN RTRIM(EX02.JOCHTag) ELSE '' END AS CEFullName
	, CASE WHEN LEN(EX02.CellPhone) <> 0 THEN LEFT(EX02.CellPhone, 3) + '-' + CASE WHEN LEN(EX02.CellPhone) = 10 THEN LEFT(RIGHT(EX02.CellPhone, 7), 3) + '-' + RIGHT(RTRIM(EX02.CellPhone), 4) ELSE '' END ELSE '' END AS CECPhone
	, LEFT(EX02.Phone, 3) + '-' + LEFT(RIGHT(EX02.Phone, 7), 3) + '-' + RIGHT(RTRIM(EX02.Phone), 4) AS CEHPhone
	, CASE WHEN LEN(EX02.WorkPhone) <> 0 THEN LEFT(EX02.WorkPhone, 3) + '-' + CASE WHEN LEN(EX02.WorkPhone) = 10 THEN LEFT(RIGHT(EX02.WorkPhone, 7), 3) + '-' + RIGHT(RTRIM(EX02.WorkPhone), 4) ELSE '' END ELSE '' END AS CEWPhone
	, RTRIM(EX02.FullAddress) AS CEAddress
	, RTRIM(EX02.JobTitle) AS CEOccupation
	, RTRIM('') AS CEMaidenName
	, RTRIM(EX02.DriversLicenseNum) AS CEIDNumber
	, RTRIM(EX02.DriversLicenseState) AS CEIDState
	, CONVERT(CHAR(10), EX02.IDExpirationDate, 101) AS CEIDExpirationDate
	, CONVERT(CHAR(10), EX02.DOB, 101) AS CEDOB
	, LEFT(EX02.SSN, 3) + '-' + LEFT(RIGHT(EX02.SSN, 6), 2) + '-' + RIGHT(EX02.SSN, 4) AS CESSN

	, CASE WHEN NMR.Created = 'Y' AND NMR.Qualification3 = 'Location' THEN RTRIM(Dept.Description) END AS Eligibility
	, CASE WHEN NMR.Created = 'Y' AND NMR.Qualification3 = 'Employer' THEN RTRIM(Dept.Description) END AS Employer
	, CASE WHEN NMR.Created = 'Y' AND NMR.Qualification3 = 'Relative' THEN RTRIM(NMR.Qualification1) + ' / ' + RTRIM(NMR.Qualification2) END AS Relationship

FROM NewMemberRequest As NMR
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN NewMemberAddress As Address On NMR.TrackingNum = Address.TrackingNum
	LEFT OUTER JOIN IMS.Departments As Dept On NMR.Department = Dept.Department
	LEFT OUTER JOIN fnSafe_GetJOType(@TrackingNum, 'EX', '', '', '', '', '', '@') AS EX01 ON NMR.TrackingNum = EX01.TrackingNum AND EX01.JointSequence = 1
	LEFT OUTER JOIN fnSafe_GetJOType(@TrackingNum, 'EX', '', '', '', '', '', '@') AS EX02 ON NMR.TrackingNum = EX02.TrackingNum AND EX02.JointSequence = 2
WHERE NMR.TrackingNum = @TrackingNum


Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_S497A_Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [IMS].[spSafe_D_S497A_Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
--Declare @TrackingNum int
--DROP TABLE #docs
--DEALLOCATE curs

Declare @docsubname char(100)
Declare @newdocsub char(200)
Declare @count int
Declare @docindex int


--CREATE TABLE #docs(docindex int identity Primary Key, docsubname char(100))

Declare curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT '' AS docsubname
	FROM NewMemberSubAccount AS SA INNER JOIN NewMemberRequest AS NMR ON NMR.TrackingNum = SA.TrackingNum
	WHERE SA.TrackingNum = @TrackingNum AND NMR.Processed = 999 AND NMR.AccountType IN ('P', 'TE', 'TR', 'TT', 'M2', 'M5', 'M7', '17', 'BO', 'C', 'CG', 'RP') AND SA.ProductType = 'SDA'

--IF @@ROWCOUNT = 0

OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count

      	IF @count = 1
	BEGIN
		Set @docindex = @docindex + 1
		SET @newdocsub = 'Direct Deposit Form (S-497A)'-- for Suffix(s) ' + CASE LEN(@docsubname) WHEN 2 THEN @docsubname WHEN 1 THEN '0' + @docsubname ELSE 'NA' END
		INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END

      	FETCH NEXT FROM curs INTO @docsubname

	IF @docsubname != NULL
	BEGIN
		SET @newdocsub = @newdocsub + ', ' + @docsubname
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex AND TrackingNum = @TrackingNum
	END
   END

CLOSE curs
DEALLOCATE curs

Select *  FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Delete FROM NewMemberDoc WHERE TrackingNum = @TrackingNum

--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_S497A_Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO


CREATE PROCEDURE [IMS].[spSafe_D_S497A_Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

SELECT @DocIndex As DocIndex
	, CASE WHEN RTRIM(RTRIM(NMR.FName) + ' ' + RTRIM(NMR.LName)) = '' THEN
		CASE WHEN CHARINDEX('/', NMR.OrganizationName) > 0 THEN
			RTRIM(RIGHT(RTRIM(NMR.OrganizationName), LEN(RTRIM(NMR.OrganizationName))-CHARINDEX('/', NMR.OrganizationName)) + ' ' + LEFT(RTRIM(NMR.OrganizationName), CHARINDEX('/', NMR.OrganizationName)-1))
		ELSE
			RTRIM(NMR.OrganizationName)
		END
	  ELSE
		RTRIM(RTRIM(NMR.FName) + CASE ISNULL(NMR.MInitial, '') WHEN '' THEN '' ELSE ' ' + RTRIM(NMR.MInitial) END + ' ' + RTRIM(NMR.LName))
	  END AS FullName
/*	, CASE WHEN NMR.AccountClass = 'O' AND NMR.AccountType <> 'TT' THEN
		CASE WHEN NMR.AccountType = 'TE' THEN
			LEFT(NMR.SSN, 2) + '-' + RIGHT(NMR.SSN, 7)
		ELSE
			LEFT(JO01.SSN, 3) + '-' + LEFT(RIGHT(JO01.SSN, 6), 2) + '-' + RIGHT(JO01.SSN, 4)
		END
	  ELSE
		LEFT(NMR.SSN, 3) + '-' + LEFT(RIGHT(NMR.SSN, 6), 2) + '-' + RIGHT(NMR.SSN, 4)
	  END AS SSN */
	, '' AS SSN --Removing SSN per Gemini 25496
	, CASE WHEN NMR.AccountClass = 'O' THEN
		LEFT(JO01.Phone, 3) + '-' + LEFT(RIGHT(JO01.Phone, 7), 3) + '-' + RIGHT(JO01.Phone, 4)
	  ELSE
		Home.Areacode + '-' + LEFT(Home.Phone, 3) + '-' + RIGHT(RTRIM(Home.Phone), 4)
	  END AS HPhoneFull
--	, CASE WHEN SSDA.Sequence > 0 THEN 'X' END AS Checking
	, CASE WHEN SSDA.Sequence > 0 THEN SSDA.MiscField1 END AS MICR
--	, CASE WHEN SPSA.Sequence > 0 THEN 'X' END AS Savings
	, CASE WHEN SPSA.Sequence > 0 THEN RTRIM(NMR.Account) + RIGHT('0' + RTRIM(CONVERT(CHAR(2), SPSA.Suffix)), 2) END AS SAVAccountSuffix
FROM NewMemberRequest As NMR
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN fnSafe_GetSAType(@TrackingNum, 'SDA', 'S') AS SSDA ON NMR.TrackingNum = SSDA.TrackingNum
	LEFT OUTER JOIN fnSafe_GetSAType(@TrackingNum, 'PSA', 'S') AS SPSA ON NMR.TrackingNum = SPSA.TrackingNum
	LEFT OUTER JOIN fnSafe_GetJOType(@TrackingNum, 'TE', 'TR', 'TT', '', '', '', '@') AS JO01 ON NMR.TrackingNum = JO01.TrackingNum AND JO01.JointSequence = 1
--	LEFT OUTER JOIN fnSafe_GetSAType(@TrackingNum, 'RSA', 'S') AS SRSA ON NMR.TrackingNum = SRSA.TrackingNum
--	LEFT OUTER JOIN fnSafe_GetSAType(@TrackingNum, 'MMA', 'S') AS SMMA ON NMR.TrackingNum = SMMA.TrackingNum
WHERE NMR.TrackingNum = @TrackingNum


Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_S535_Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO


CREATE PROCEDURE [IMS].[spSafe_D_S535_Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

DECLARE @docsubname CHAR(100)
DECLARE @newdocsub CHAR(200)
DECLARE @count INT
DECLARE @docindex INT

DECLARE curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT TOP 1 '' AS docsubname
	FROM NewMemberRequest AS NMR
	LEFT JOIN NewMemberFunds AS Funds ON Funds.TrackingNum = NMR.TrackingNum
	WHERE NMR.TrackingNum = @TrackingNum AND NMR.Processed = 999 AND NMR.Created = 'Y' AND Funds.HoldCode <> ''

OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count

      	IF @count = 1
	BEGIN
		Set @docindex = @docindex + 1
		SET @newdocsub = 'Notice of Extended Check Hold (S-535)'-- for Suffix(s) ' + CASE LEN(@docsubname) WHEN 2 THEN @docsubname WHEN 1 THEN '0' + @docsubname ELSE 'NA' END
		INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END

      	FETCH NEXT FROM curs INTO @docsubname

	IF @docsubname != NULL
	BEGIN
		SET @newdocsub = @newdocsub + ', ' + @docsubname
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex AND TrackingNum = @TrackingNum
	END
   END

CLOSE curs
DEALLOCATE curs

SELECT * FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
DELETE FROM NewMemberDoc WHERE TrackingNum = @TrackingNum

Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_S535_Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO


CREATE PROCEDURE [IMS].[spSafe_D_S535_Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

SELECT @DocIndex As DocIndex
	, CASE WHEN NMR.Created = 'Y' THEN 'X' ELSE '' END AS OverTheCounter
	, CASE WHEN NMR.Created = 'Y' THEN 'X' ELSE '' END AS Action03
	, '$' + CASE Funds.HoldCode
	    WHEN '3' THEN CASE WHEN Funds.Amount > 20000 THEN CAST((Funds.Amount-20000)/100 AS VARCHAR(10)) ELSE '0.00' END
		WHEN '10' THEN CASE WHEN Funds.Amount > 20000 THEN CAST((Funds.Amount-20000)/100 AS VARCHAR(10)) ELSE '0.00' END
		WHEN '1' THEN CASE WHEN Funds.Amount > 500000 THEN CAST((Funds.Amount-500000)/100 AS VARCHAR(10)) ELSE '0.00' END
		WHEN '5' THEN CASE WHEN Funds.Amount > 500000 THEN CAST((Funds.Amount-500000)/100 AS VARCHAR(10)) ELSE '0.00' END
		WHEN '6' THEN CASE WHEN Funds.Amount > 500000 THEN CAST((Funds.Amount-500000)/100 AS VARCHAR(10)) ELSE '0.00' END
		ELSE '0.00'
	  END AS DelayAmount
--	, Funds.Amount AS DelayAmount
	, Funds.ReleaseDate AS AvailableDate
FROM NewMemberRequest As NMR
	LEFT OUTER JOIN NewMemberHome AS Home ON NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork AS Work ON NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN NewMemberFunds AS Funds ON NMR.TrackingNum = Funds.TrackingNum AND Funds.HoldCode <> ''
WHERE NMR.TrackingNum = @TrackingNum


Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_S595_Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [IMS].[spSafe_D_S595_Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
--Declare @TrackingNum int
--DROP TABLE #docs
--DEALLOCATE curs

Declare @docsubname char(100)
Declare @newdocsub char(200)
Declare @count int
Declare @docindex int


--CREATE TABLE #docs(docindex int identity Primary Key, docsubname char(100))

Declare curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT '' AS docsubname
	FROM NewMemberRequest AS NMR
	WHERE NMR.TrackingNum = @TrackingNum AND NMR.Processed = 999 AND NMR.AccountType IN ('X')

--IF @@ROWCOUNT = 0

OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count

      	IF @count = 1
	BEGIN
		SET @docindex = @docindex + 1
		SET @newdocsub = 'General Partnership Statement (S-595)'-- for Suffix(s) ' + CASE LEN(@docsubname) WHEN 2 THEN @docsubname WHEN 1 THEN '0' + @docsubname ELSE 'NA' END
		INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END

      	FETCH NEXT FROM curs INTO @docsubname

	IF @docsubname != NULL
	BEGIN
		SET @newdocsub = @newdocsub + ', ' + @docsubname
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex AND TrackingNum = @TrackingNum
	END
   END

CLOSE curs
DEALLOCATE curs

SELECT 'S595' AS DocCode, 'BUSINESS' AS ScanName, * FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
DELETE FROM NewMemberDoc WHERE TrackingNum = @TrackingNum

--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_S595_Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [IMS].[spSafe_D_S595_Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

-- STATIC DOCUMENT
SELECT @DocIndex As DocIndex
FROM NewMemberRequest As NMR
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
WHERE NMR.TrackingNum = @TrackingNum


Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_S596_Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [IMS].[spSafe_D_S596_Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
--Declare @TrackingNum int
--DROP TABLE #docs
--DEALLOCATE curs

Declare @docsubname char(100)
Declare @newdocsub char(200)
Declare @count int
Declare @docindex int


--CREATE TABLE #docs(docindex int identity Primary Key, docsubname char(100))

Declare curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT '' AS docsubname
	FROM NewMemberRequest AS NMR
	WHERE NMR.TrackingNum = @TrackingNum AND NMR.Processed = 999 AND NMR.AccountType IN ('X')

--IF @@ROWCOUNT = 0

OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count

      	IF @count = 1
	BEGIN
		SET @docindex = @docindex + 1
		SET @newdocsub = 'Certificate of Authorized Member (S-596)'-- for Suffix(s) ' + CASE LEN(@docsubname) WHEN 2 THEN @docsubname WHEN 1 THEN '0' + @docsubname ELSE 'NA' END
		INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END

      	FETCH NEXT FROM curs INTO @docsubname

	IF @docsubname != NULL
	BEGIN
		SET @newdocsub = @newdocsub + ', ' + @docsubname
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex AND TrackingNum = @TrackingNum
	END
   END

CLOSE curs
DEALLOCATE curs

SELECT 'S596' AS DocCode, 'BUSINESS' AS ScanName, * FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
DELETE FROM NewMemberDoc WHERE TrackingNum = @TrackingNum

--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_S596_Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO


CREATE PROCEDURE [IMS].[spSafe_D_S596_Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

-- STATIC DOCUMENT
SELECT @DocIndex As DocIndex
FROM NewMemberRequest As NMR
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
WHERE NMR.TrackingNum = @TrackingNum


Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_S597_Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO


CREATE PROCEDURE [IMS].[spSafe_D_S597_Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @docsubname CHAR(100)
DECLARE @newdocsub CHAR(200)
DECLARE @count INT
DECLARE @docindex INT

DECLARE curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT '' AS docsubname
	FROM NewMemberRequest AS NMR
	WHERE NMR.TrackingNum = @TrackingNum AND NMR.Processed = 999 AND NMR.FundAccount = 'Y'

--IF @@ROWCOUNT = 0

OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count

      	IF @count = 1
	BEGIN
		SET @docindex = @docindex + 1
		SET @newdocsub = 'Deposit Receipt (S-597)'-- for Suffix(s) ' + CASE LEN(@docsubname) WHEN 2 THEN @docsubname WHEN 1 THEN '0' + @docsubname ELSE 'NA' END
		INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
		SET @docindex = @docindex + 1
		SET @newdocsub = 'Deposit Receipt (S-597) - Copy'-- for Suffix(s) ' + CASE LEN(@docsubname) WHEN 2 THEN @docsubname WHEN 1 THEN '0' + @docsubname ELSE 'NA' END
		INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END

      	FETCH NEXT FROM curs INTO @docsubname

	IF @docsubname != NULL
	BEGIN
		SET @newdocsub = @newdocsub + ', ' + @docsubname
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex AND TrackingNum = @TrackingNum
	END
   END

CLOSE curs
DEALLOCATE curs

SELECT *  FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
DELETE FROM NewMemberDoc WHERE TrackingNum = @TrackingNum

Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_S597_Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [IMS].[spSafe_D_S597_Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

SELECT @DocIndex As DocIndex
	, 'EASY CHECK/CASH GIVE/TAKE' AS EASY
	, RTRIM(CONVERT(CHAR(30), GETDATE(), 101)) + ' ' + RTRIM(CONVERT(CHAR(5), GETDATE(), 108)) + ' ' + RIGHT(RTRIM(CONVERT(CHAR(30), GETDATE(), 100)), 2) AS [DateTime]
	, RTRIM(NMR.CreatedBy) + ' BR:' + RTRIM(NMR.CurrBranch) AS TellerBranch
	, 'XXXXX' + RIGHT(RTRIM(NMR.Account), 4) AS MaskAccount
	, CASE WHEN NMR.AccountClass = 'O' THEN RTRIM(NMR.OrganizationName) ELSE RTRIM(NMR.LName) + '/' + RTRIM(NMR.FName) + CASE ISNULL(NMR.MInitial, '') WHEN '' THEN '' ELSE ' ' + RTRIM(NMR.MInitial) END END AS FullNameRev
	, 'EFF Date: ' + CONVERT(CHAR(10), NMR.CreatedOn, 101) AS EffectiveDate

	, CASE WHEN ISNULL(CASH.Amount, 0) > 0 THEN 'CASH:' + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(CHECK1.Amount, 0) > 0 THEN 'CHECK 1:' + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(CHECK2.Amount, 0) > 0 THEN 'CHECK 2:' + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(CHECK3.Amount, 0) > 0 THEN 'CHECK 3:' + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(CHECK4.Amount, 0) > 0 THEN 'CHECK 4:' + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(XACCT.Amount, 0) > 0 THEN
		CASE WHEN ISNULL(XACCT.SourceAccount, '') = '' THEN 'FROM SFX-' + RIGHT('0' + CONVERT(VARCHAR(2), XACCT.Suffix), 2)
		ELSE 'FROM ACC-XXXXX' + RIGHT(RTRIM(CONVERT(VARCHAR(10), XACCT.SourceAccount)), 4) + '-' + RIGHT('0' + CONVERT(VARCHAR(2), XACCT.SourceSuffix), 2) + ':' END
	 + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(XSUB01.Amount, 0) > 0 THEN 'FROM SFX-' + RIGHT('0' + CONVERT(VARCHAR(2), XSUB01.Suffix), 2) + ':' + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(XSUB02.Amount, 0) > 0 THEN 'FROM SFX-' + RIGHT('0' + CONVERT(VARCHAR(2), XSUB02.Suffix), 2) + ':' + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(XSUB03.Amount, 0) > 0 THEN 'FROM SFX-' + RIGHT('0' + CONVERT(VARCHAR(2), XSUB03.Suffix), 2) + ':' + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(XSUB04.Amount, 0) > 0 THEN 'FROM SFX-' + RIGHT('0' + CONVERT(VARCHAR(2), XSUB04.Suffix), 2) + ':' + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(XSUB05.Amount, 0) > 0 THEN 'FROM SFX-' + RIGHT('0' + CONVERT(VARCHAR(2), XSUB05.Suffix), 2) + ':' + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(XSUB06.Amount, 0) > 0 THEN 'FROM SFX-' + RIGHT('0' + CONVERT(VARCHAR(2), XSUB06.Suffix), 2) + ':' + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(XSUB07.Amount, 0) > 0 THEN 'FROM SFX-' + RIGHT('0' + CONVERT(VARCHAR(2), XSUB07.Suffix), 2) + ':' + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(XSUB08.Amount, 0) > 0 THEN 'FROM SFX-' + RIGHT('0' + CONVERT(VARCHAR(2), XSUB08.Suffix), 2) + ':' + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(XSUB09.Amount, 0) > 0 THEN 'FROM SFX-' + RIGHT('0' + CONVERT(VARCHAR(2), XSUB09.Suffix), 2) + ':' + CHAR(13) + CHAR(10) ELSE '' END +
	  '' AS FR_Source

	, CASE WHEN ISNULL(CASH.Amount, 0) > 0 THEN CONVERT(VARCHAR(15), CONVERT(MONEY, CASH.Amount/100), 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(CHECK1.Amount, 0) > 0 THEN CONVERT(VARCHAR(15), CONVERT(MONEY, CHECK1.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(CHECK2.Amount, 0) > 0 THEN CONVERT(VARCHAR(15), CONVERT(MONEY, CHECK2.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(CHECK3.Amount, 0) > 0 THEN CONVERT(VARCHAR(15), CONVERT(MONEY, CHECK3.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(CHECK4.Amount, 0) > 0 THEN CONVERT(VARCHAR(15), CONVERT(MONEY, CHECK4.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(XACCT.Amount, 0) > 0 THEN CONVERT(VARCHAR(15), CONVERT(MONEY, XACCT.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(XSUB01.Amount, 0) > 0 THEN CONVERT(VARCHAR(15), CONVERT(MONEY, XSUB01.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(XSUB02.Amount, 0) > 0 THEN CONVERT(VARCHAR(15), CONVERT(MONEY, XSUB02.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(XSUB03.Amount, 0) > 0 THEN CONVERT(VARCHAR(15), CONVERT(MONEY, XSUB03.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(XSUB04.Amount, 0) > 0 THEN CONVERT(VARCHAR(15), CONVERT(MONEY, XSUB04.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(XSUB05.Amount, 0) > 0 THEN CONVERT(VARCHAR(15), CONVERT(MONEY, XSUB05.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(XSUB06.Amount, 0) > 0 THEN CONVERT(VARCHAR(15), CONVERT(MONEY, XSUB06.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(XSUB07.Amount, 0) > 0 THEN CONVERT(VARCHAR(15), CONVERT(MONEY, XSUB07.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(XSUB08.Amount, 0) > 0 THEN CONVERT(VARCHAR(15), CONVERT(MONEY, XSUB08.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(XSUB09.Amount, 0) > 0 THEN CONVERT(VARCHAR(15), CONVERT(MONEY, XSUB09.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  '' AS FR_Amount

	, CASE WHEN ISNULL(CASH.Amount, 0) > 0 THEN ISNULL(CONVERT(CHAR(10), CASH.ReleaseDate, 101), '') + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(CHECK1.Amount, 0) > 0 THEN ISNULL(CONVERT(CHAR(10), CHECK1.ReleaseDate, 101), '') + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(CHECK2.Amount, 0) > 0 THEN ISNULL(CONVERT(CHAR(10), CHECK2.ReleaseDate, 101), '') + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(CHECK3.Amount, 0) > 0 THEN ISNULL(CONVERT(CHAR(10), CHECK3.ReleaseDate, 101), '') + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(CHECK4.Amount, 0) > 0 THEN ISNULL(CONVERT(CHAR(10), CHECK4.ReleaseDate, 101), '') + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(XACCT.Amount, 0) > 0 THEN ISNULL(CONVERT(CHAR(10), XACCT.ReleaseDate, 101), '') + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(XSUB01.Amount, 0) > 0 THEN ISNULL(CONVERT(CHAR(10), XSUB01.ReleaseDate, 101), '') + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(XSUB02.Amount, 0) > 0 THEN ISNULL(CONVERT(CHAR(10), XSUB02.ReleaseDate, 101), '') + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(XSUB03.Amount, 0) > 0 THEN ISNULL(CONVERT(CHAR(10), XSUB03.ReleaseDate, 101), '') + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(XSUB04.Amount, 0) > 0 THEN ISNULL(CONVERT(CHAR(10), XSUB04.ReleaseDate, 101), '') + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(XSUB05.Amount, 0) > 0 THEN ISNULL(CONVERT(CHAR(10), XSUB05.ReleaseDate, 101), '') + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(XSUB06.Amount, 0) > 0 THEN ISNULL(CONVERT(CHAR(10), XSUB06.ReleaseDate, 101), '') + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(XSUB07.Amount, 0) > 0 THEN ISNULL(CONVERT(CHAR(10), XSUB07.ReleaseDate, 101), '') + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(XSUB08.Amount, 0) > 0 THEN ISNULL(CONVERT(CHAR(10), XSUB08.ReleaseDate, 101), '') + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(XSUB09.Amount, 0) > 0 THEN ISNULL(CONVERT(CHAR(10), XSUB09.ReleaseDate, 101), '') + CHAR(13) + CHAR(10) ELSE '' END +
	  '' AS FR_ReleaseDate

	, CASE WHEN ISNULL(SUB01.Amount, 0) > 0 AND (SUB01.SLType = 'S' OR SUB01.SLType = 'I') AND SUB01.Created = 'Y' THEN RIGHT('0' + CONVERT(VARCHAR(2), SUB01.Suffix), 2) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB02.Amount, 0) > 0 AND (SUB02.SLType = 'S' OR SUB02.SLType = 'I') AND SUB02.Created = 'Y' THEN RIGHT('0' + CONVERT(VARCHAR(2), SUB02.Suffix), 2) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB03.Amount, 0) > 0 AND (SUB03.SLType = 'S' OR SUB03.SLType = 'I') AND SUB03.Created = 'Y' THEN RIGHT('0' + CONVERT(VARCHAR(2), SUB03.Suffix), 2) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB04.Amount, 0) > 0 AND (SUB04.SLType = 'S' OR SUB04.SLType = 'I') AND SUB04.Created = 'Y' THEN RIGHT('0' + CONVERT(VARCHAR(2), SUB04.Suffix), 2) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB05.Amount, 0) > 0 AND (SUB05.SLType = 'S' OR SUB05.SLType = 'I') AND SUB05.Created = 'Y' THEN RIGHT('0' + CONVERT(VARCHAR(2), SUB05.Suffix), 2) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB06.Amount, 0) > 0 AND (SUB06.SLType = 'S' OR SUB06.SLType = 'I') AND SUB06.Created = 'Y' THEN RIGHT('0' + CONVERT(VARCHAR(2), SUB06.Suffix), 2) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB07.Amount, 0) > 0 AND (SUB07.SLType = 'S' OR SUB07.SLType = 'I') AND SUB07.Created = 'Y' THEN RIGHT('0' + CONVERT(VARCHAR(2), SUB07.Suffix), 2) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB08.Amount, 0) > 0 AND (SUB08.SLType = 'S' OR SUB08.SLType = 'I') AND SUB08.Created = 'Y' THEN RIGHT('0' + CONVERT(VARCHAR(2), SUB08.Suffix), 2) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB09.Amount, 0) > 0 AND (SUB09.SLType = 'S' OR SUB09.SLType = 'I') AND SUB09.Created = 'Y' THEN RIGHT('0' + CONVERT(VARCHAR(2), SUB09.Suffix), 2) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB10.Amount, 0) > 0 AND (SUB10.SLType = 'S' OR SUB10.SLType = 'I') AND SUB10.Created = 'Y' THEN RIGHT('0' + CONVERT(VARCHAR(2), SUB10.Suffix), 2) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB11.Amount, 0) > 0 AND (SUB11.SLType = 'S' OR SUB11.SLType = 'I') AND SUB11.Created = 'Y' THEN RIGHT('0' + CONVERT(VARCHAR(2), SUB11.Suffix), 2) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB12.Amount, 0) > 0 AND (SUB12.SLType = 'S' OR SUB12.SLType = 'I') AND SUB12.Created = 'Y' THEN RIGHT('0' + CONVERT(VARCHAR(2), SUB12.Suffix), 2) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB13.Amount, 0) > 0 AND (SUB13.SLType = 'S' OR SUB13.SLType = 'I') AND SUB13.Created = 'Y' THEN RIGHT('0' + CONVERT(VARCHAR(2), SUB13.Suffix), 2) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB14.Amount, 0) > 0 AND (SUB14.SLType = 'S' OR SUB14.SLType = 'I') AND SUB14.Created = 'Y' THEN RIGHT('0' + CONVERT(VARCHAR(2), SUB14.Suffix), 2) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB15.Amount, 0) > 0 AND (SUB15.SLType = 'S' OR SUB15.SLType = 'I') AND SUB15.Created = 'Y' THEN RIGHT('0' + CONVERT(VARCHAR(2), SUB15.Suffix), 2) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB16.Amount, 0) > 0 AND (SUB16.SLType = 'S' OR SUB16.SLType = 'I') AND SUB16.Created = 'Y' THEN RIGHT('0' + CONVERT(VARCHAR(2), SUB16.Suffix), 2) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB17.Amount, 0) > 0 AND (SUB17.SLType = 'S' OR SUB17.SLType = 'I') AND SUB17.Created = 'Y' THEN RIGHT('0' + CONVERT(VARCHAR(2), SUB17.Suffix), 2) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB18.Amount, 0) > 0 AND (SUB18.SLType = 'S' OR SUB18.SLType = 'I') AND SUB18.Created = 'Y' THEN RIGHT('0' + CONVERT(VARCHAR(2), SUB18.Suffix), 2) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB19.Amount, 0) > 0 AND (SUB19.SLType = 'S' OR SUB19.SLType = 'I') AND SUB19.Created = 'Y' THEN RIGHT('0' + CONVERT(VARCHAR(2), SUB19.Suffix), 2) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB20.Amount, 0) > 0 AND (SUB20.SLType = 'S' OR SUB20.SLType = 'I') AND SUB20.Created = 'Y' THEN RIGHT('0' + CONVERT(VARCHAR(2), SUB20.Suffix), 2) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB21.Amount, 0) > 0 AND (SUB21.SLType = 'S' OR SUB21.SLType = 'I') AND SUB21.Created = 'Y' THEN RIGHT('0' + CONVERT(VARCHAR(2), SUB21.Suffix), 2) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB22.Amount, 0) > 0 AND (SUB22.SLType = 'S' OR SUB22.SLType = 'I') AND SUB22.Created = 'Y' THEN RIGHT('0' + CONVERT(VARCHAR(2), SUB22.Suffix), 2) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB23.Amount, 0) > 0 AND (SUB23.SLType = 'S' OR SUB23.SLType = 'I') AND SUB23.Created = 'Y' THEN RIGHT('0' + CONVERT(VARCHAR(2), SUB23.Suffix), 2) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB24.Amount, 0) > 0 AND (SUB24.SLType = 'S' OR SUB24.SLType = 'I') AND SUB24.Created = 'Y' THEN RIGHT('0' + CONVERT(VARCHAR(2), SUB24.Suffix), 2) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB25.Amount, 0) > 0 AND (SUB25.SLType = 'S' OR SUB25.SLType = 'I') AND SUB25.Created = 'Y' THEN RIGHT('0' + CONVERT(VARCHAR(2), SUB25.Suffix), 2) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB26.Amount, 0) > 0 AND (SUB26.SLType = 'S' OR SUB26.SLType = 'I') AND SUB26.Created = 'Y' THEN RIGHT('0' + CONVERT(VARCHAR(2), SUB26.Suffix), 2) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB27.Amount, 0) > 0 AND (SUB27.SLType = 'S' OR SUB27.SLType = 'I') AND SUB27.Created = 'Y' THEN RIGHT('0' + CONVERT(VARCHAR(2), SUB27.Suffix), 2) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB28.Amount, 0) > 0 AND (SUB28.SLType = 'S' OR SUB28.SLType = 'I') AND SUB28.Created = 'Y' THEN RIGHT('0' + CONVERT(VARCHAR(2), SUB28.Suffix), 2) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB29.Amount, 0) > 0 AND (SUB29.SLType = 'S' OR SUB29.SLType = 'I') AND SUB29.Created = 'Y' THEN RIGHT('0' + CONVERT(VARCHAR(2), SUB29.Suffix), 2) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB30.Amount, 0) > 0 AND (SUB30.SLType = 'S' OR SUB30.SLType = 'I') AND SUB30.Created = 'Y' THEN RIGHT('0' + CONVERT(VARCHAR(2), SUB30.Suffix), 2) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB31.Amount, 0) > 0 AND (SUB31.SLType = 'S' OR SUB31.SLType = 'I') AND SUB31.Created = 'Y' THEN RIGHT('0' + CONVERT(VARCHAR(2), SUB31.Suffix), 2) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB32.Amount, 0) > 0 AND (SUB32.SLType = 'S' OR SUB32.SLType = 'I') AND SUB32.Created = 'Y' THEN RIGHT('0' + CONVERT(VARCHAR(2), SUB32.Suffix), 2) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB33.Amount, 0) > 0 AND (SUB33.SLType = 'S' OR SUB33.SLType = 'I') AND SUB33.Created = 'Y' THEN RIGHT('0' + CONVERT(VARCHAR(2), SUB33.Suffix), 2) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB34.Amount, 0) > 0 AND (SUB34.SLType = 'S' OR SUB34.SLType = 'I') AND SUB34.Created = 'Y' THEN RIGHT('0' + CONVERT(VARCHAR(2), SUB34.Suffix), 2) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB35.Amount, 0) > 0 AND (SUB35.SLType = 'S' OR SUB35.SLType = 'I') AND SUB35.Created = 'Y' THEN RIGHT('0' + CONVERT(VARCHAR(2), SUB35.Suffix), 2) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB36.Amount, 0) > 0 AND (SUB36.SLType = 'S' OR SUB36.SLType = 'I') AND SUB36.Created = 'Y' THEN RIGHT('0' + CONVERT(VARCHAR(2), SUB36.Suffix), 2) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB37.Amount, 0) > 0 AND (SUB37.SLType = 'S' OR SUB37.SLType = 'I') AND SUB37.Created = 'Y' THEN RIGHT('0' + CONVERT(VARCHAR(2), SUB37.Suffix), 2) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB38.Amount, 0) > 0 AND (SUB38.SLType = 'S' OR SUB38.SLType = 'I') AND SUB38.Created = 'Y' THEN RIGHT('0' + CONVERT(VARCHAR(2), SUB38.Suffix), 2) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB39.Amount, 0) > 0 AND (SUB39.SLType = 'S' OR SUB39.SLType = 'I') AND SUB39.Created = 'Y' THEN RIGHT('0' + CONVERT(VARCHAR(2), SUB39.Suffix), 2) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB40.Amount, 0) > 0 AND (SUB40.SLType = 'S' OR SUB40.SLType = 'I') AND SUB40.Created = 'Y' THEN RIGHT('0' + CONVERT(VARCHAR(2), SUB40.Suffix), 2) + CHAR(13) + CHAR(10) ELSE '' END +
	  '' AS FD_Suffix

	, CASE WHEN ISNULL(SUB01.Amount, 0) > 0 AND (SUB01.SLType = 'S' OR SUB01.SLType = 'I') AND SUB01.Created = 'Y' THEN '.00' + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB02.Amount, 0) > 0 AND (SUB02.SLType = 'S' OR SUB02.SLType = 'I') AND SUB02.Created = 'Y' THEN '.00' + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB03.Amount, 0) > 0 AND (SUB03.SLType = 'S' OR SUB03.SLType = 'I') AND SUB03.Created = 'Y' THEN '.00' + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB04.Amount, 0) > 0 AND (SUB04.SLType = 'S' OR SUB04.SLType = 'I') AND SUB04.Created = 'Y' THEN '.00' + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB05.Amount, 0) > 0 AND (SUB05.SLType = 'S' OR SUB05.SLType = 'I') AND SUB05.Created = 'Y' THEN '.00' + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB06.Amount, 0) > 0 AND (SUB06.SLType = 'S' OR SUB06.SLType = 'I') AND SUB06.Created = 'Y' THEN '.00' + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB07.Amount, 0) > 0 AND (SUB07.SLType = 'S' OR SUB07.SLType = 'I') AND SUB07.Created = 'Y' THEN '.00' + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB08.Amount, 0) > 0 AND (SUB08.SLType = 'S' OR SUB08.SLType = 'I') AND SUB08.Created = 'Y' THEN '.00' + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB09.Amount, 0) > 0 AND (SUB09.SLType = 'S' OR SUB09.SLType = 'I') AND SUB09.Created = 'Y' THEN '.00' + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB10.Amount, 0) > 0 AND (SUB10.SLType = 'S' OR SUB10.SLType = 'I') AND SUB10.Created = 'Y' THEN '.00' + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB11.Amount, 0) > 0 AND (SUB11.SLType = 'S' OR SUB11.SLType = 'I') AND SUB11.Created = 'Y' THEN '.00' + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB12.Amount, 0) > 0 AND (SUB12.SLType = 'S' OR SUB12.SLType = 'I') AND SUB12.Created = 'Y' THEN '.00' + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB13.Amount, 0) > 0 AND (SUB13.SLType = 'S' OR SUB13.SLType = 'I') AND SUB13.Created = 'Y' THEN '.00' + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB14.Amount, 0) > 0 AND (SUB14.SLType = 'S' OR SUB14.SLType = 'I') AND SUB14.Created = 'Y' THEN '.00' + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB15.Amount, 0) > 0 AND (SUB15.SLType = 'S' OR SUB15.SLType = 'I') AND SUB15.Created = 'Y' THEN '.00' + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB16.Amount, 0) > 0 AND (SUB16.SLType = 'S' OR SUB16.SLType = 'I') AND SUB16.Created = 'Y' THEN '.00' + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB17.Amount, 0) > 0 AND (SUB17.SLType = 'S' OR SUB17.SLType = 'I') AND SUB17.Created = 'Y' THEN '.00' + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB18.Amount, 0) > 0 AND (SUB18.SLType = 'S' OR SUB18.SLType = 'I') AND SUB18.Created = 'Y' THEN '.00' + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB19.Amount, 0) > 0 AND (SUB19.SLType = 'S' OR SUB19.SLType = 'I') AND SUB19.Created = 'Y' THEN '.00' + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB20.Amount, 0) > 0 AND (SUB20.SLType = 'S' OR SUB20.SLType = 'I') AND SUB20.Created = 'Y' THEN '.00' + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB21.Amount, 0) > 0 AND (SUB21.SLType = 'S' OR SUB21.SLType = 'I') AND SUB21.Created = 'Y' THEN '.00' + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB22.Amount, 0) > 0 AND (SUB22.SLType = 'S' OR SUB22.SLType = 'I') AND SUB22.Created = 'Y' THEN '.00' + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB23.Amount, 0) > 0 AND (SUB23.SLType = 'S' OR SUB23.SLType = 'I') AND SUB23.Created = 'Y' THEN '.00' + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB24.Amount, 0) > 0 AND (SUB24.SLType = 'S' OR SUB24.SLType = 'I') AND SUB24.Created = 'Y' THEN '.00' + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB25.Amount, 0) > 0 AND (SUB25.SLType = 'S' OR SUB25.SLType = 'I') AND SUB25.Created = 'Y' THEN '.00' + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB26.Amount, 0) > 0 AND (SUB26.SLType = 'S' OR SUB26.SLType = 'I') AND SUB26.Created = 'Y' THEN '.00' + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB27.Amount, 0) > 0 AND (SUB27.SLType = 'S' OR SUB27.SLType = 'I') AND SUB27.Created = 'Y' THEN '.00' + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB28.Amount, 0) > 0 AND (SUB28.SLType = 'S' OR SUB28.SLType = 'I') AND SUB28.Created = 'Y' THEN '.00' + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB29.Amount, 0) > 0 AND (SUB29.SLType = 'S' OR SUB29.SLType = 'I') AND SUB29.Created = 'Y' THEN '.00' + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB30.Amount, 0) > 0 AND (SUB30.SLType = 'S' OR SUB30.SLType = 'I') AND SUB30.Created = 'Y' THEN '.00' + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB31.Amount, 0) > 0 AND (SUB31.SLType = 'S' OR SUB31.SLType = 'I') AND SUB31.Created = 'Y' THEN '.00' + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB32.Amount, 0) > 0 AND (SUB32.SLType = 'S' OR SUB32.SLType = 'I') AND SUB32.Created = 'Y' THEN '.00' + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB33.Amount, 0) > 0 AND (SUB33.SLType = 'S' OR SUB33.SLType = 'I') AND SUB33.Created = 'Y' THEN '.00' + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB34.Amount, 0) > 0 AND (SUB34.SLType = 'S' OR SUB34.SLType = 'I') AND SUB34.Created = 'Y' THEN '.00' + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB35.Amount, 0) > 0 AND (SUB35.SLType = 'S' OR SUB35.SLType = 'I') AND SUB35.Created = 'Y' THEN '.00' + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB36.Amount, 0) > 0 AND (SUB36.SLType = 'S' OR SUB36.SLType = 'I') AND SUB36.Created = 'Y' THEN '.00' + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB37.Amount, 0) > 0 AND (SUB37.SLType = 'S' OR SUB37.SLType = 'I') AND SUB37.Created = 'Y' THEN '.00' + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB38.Amount, 0) > 0 AND (SUB38.SLType = 'S' OR SUB38.SLType = 'I') AND SUB38.Created = 'Y' THEN '.00' + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB39.Amount, 0) > 0 AND (SUB39.SLType = 'S' OR SUB39.SLType = 'I') AND SUB39.Created = 'Y' THEN '.00' + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB40.Amount, 0) > 0 AND (SUB40.SLType = 'S' OR SUB40.SLType = 'I') AND SUB40.Created = 'Y' THEN '.00' + CHAR(13) + CHAR(10) ELSE '' END +
	  '' AS FD_BeginningBalance

	, CASE WHEN ISNULL(SUB01.Amount, 0) > 0 AND (SUB01.SLType = 'S' OR SUB01.SLType = 'I') AND SUB01.Created = 'Y' THEN 'DEP' + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB02.Amount, 0) > 0 AND (SUB02.SLType = 'S' OR SUB02.SLType = 'I') AND SUB02.Created = 'Y' THEN 'DEP' + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB03.Amount, 0) > 0 AND (SUB03.SLType = 'S' OR SUB03.SLType = 'I') AND SUB03.Created = 'Y' THEN 'DEP' + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB04.Amount, 0) > 0 AND (SUB04.SLType = 'S' OR SUB04.SLType = 'I') AND SUB04.Created = 'Y' THEN 'DEP' + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB05.Amount, 0) > 0 AND (SUB05.SLType = 'S' OR SUB05.SLType = 'I') AND SUB05.Created = 'Y' THEN 'DEP' + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB06.Amount, 0) > 0 AND (SUB06.SLType = 'S' OR SUB06.SLType = 'I') AND SUB06.Created = 'Y' THEN 'DEP' + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB07.Amount, 0) > 0 AND (SUB07.SLType = 'S' OR SUB07.SLType = 'I') AND SUB07.Created = 'Y' THEN 'DEP' + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB08.Amount, 0) > 0 AND (SUB08.SLType = 'S' OR SUB08.SLType = 'I') AND SUB08.Created = 'Y' THEN 'DEP' + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB09.Amount, 0) > 0 AND (SUB09.SLType = 'S' OR SUB09.SLType = 'I') AND SUB09.Created = 'Y' THEN 'DEP' + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB10.Amount, 0) > 0 AND (SUB10.SLType = 'S' OR SUB10.SLType = 'I') AND SUB10.Created = 'Y' THEN 'DEP' + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB11.Amount, 0) > 0 AND (SUB11.SLType = 'S' OR SUB11.SLType = 'I') AND SUB11.Created = 'Y' THEN 'DEP' + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB12.Amount, 0) > 0 AND (SUB12.SLType = 'S' OR SUB12.SLType = 'I') AND SUB12.Created = 'Y' THEN 'DEP' + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB13.Amount, 0) > 0 AND (SUB13.SLType = 'S' OR SUB13.SLType = 'I') AND SUB13.Created = 'Y' THEN 'DEP' + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB14.Amount, 0) > 0 AND (SUB14.SLType = 'S' OR SUB14.SLType = 'I') AND SUB14.Created = 'Y' THEN 'DEP' + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB15.Amount, 0) > 0 AND (SUB15.SLType = 'S' OR SUB15.SLType = 'I') AND SUB15.Created = 'Y' THEN 'DEP' + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB16.Amount, 0) > 0 AND (SUB16.SLType = 'S' OR SUB16.SLType = 'I') AND SUB16.Created = 'Y' THEN 'DEP' + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB17.Amount, 0) > 0 AND (SUB17.SLType = 'S' OR SUB17.SLType = 'I') AND SUB17.Created = 'Y' THEN 'DEP' + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB18.Amount, 0) > 0 AND (SUB18.SLType = 'S' OR SUB18.SLType = 'I') AND SUB18.Created = 'Y' THEN 'DEP' + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB19.Amount, 0) > 0 AND (SUB19.SLType = 'S' OR SUB19.SLType = 'I') AND SUB19.Created = 'Y' THEN 'DEP' + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB20.Amount, 0) > 0 AND (SUB20.SLType = 'S' OR SUB20.SLType = 'I') AND SUB20.Created = 'Y' THEN 'DEP' + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB21.Amount, 0) > 0 AND (SUB21.SLType = 'S' OR SUB21.SLType = 'I') AND SUB21.Created = 'Y' THEN 'DEP' + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB22.Amount, 0) > 0 AND (SUB22.SLType = 'S' OR SUB22.SLType = 'I') AND SUB22.Created = 'Y' THEN 'DEP' + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB23.Amount, 0) > 0 AND (SUB23.SLType = 'S' OR SUB23.SLType = 'I') AND SUB23.Created = 'Y' THEN 'DEP' + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB24.Amount, 0) > 0 AND (SUB24.SLType = 'S' OR SUB24.SLType = 'I') AND SUB24.Created = 'Y' THEN 'DEP' + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB25.Amount, 0) > 0 AND (SUB25.SLType = 'S' OR SUB25.SLType = 'I') AND SUB25.Created = 'Y' THEN 'DEP' + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB26.Amount, 0) > 0 AND (SUB26.SLType = 'S' OR SUB26.SLType = 'I') AND SUB26.Created = 'Y' THEN 'DEP' + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB27.Amount, 0) > 0 AND (SUB27.SLType = 'S' OR SUB27.SLType = 'I') AND SUB27.Created = 'Y' THEN 'DEP' + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB28.Amount, 0) > 0 AND (SUB28.SLType = 'S' OR SUB28.SLType = 'I') AND SUB28.Created = 'Y' THEN 'DEP' + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB29.Amount, 0) > 0 AND (SUB29.SLType = 'S' OR SUB29.SLType = 'I') AND SUB29.Created = 'Y' THEN 'DEP' + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB30.Amount, 0) > 0 AND (SUB30.SLType = 'S' OR SUB30.SLType = 'I') AND SUB30.Created = 'Y' THEN 'DEP' + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB31.Amount, 0) > 0 AND (SUB31.SLType = 'S' OR SUB31.SLType = 'I') AND SUB31.Created = 'Y' THEN 'DEP' + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB32.Amount, 0) > 0 AND (SUB32.SLType = 'S' OR SUB32.SLType = 'I') AND SUB32.Created = 'Y' THEN 'DEP' + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB33.Amount, 0) > 0 AND (SUB33.SLType = 'S' OR SUB33.SLType = 'I') AND SUB33.Created = 'Y' THEN 'DEP' + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB34.Amount, 0) > 0 AND (SUB34.SLType = 'S' OR SUB34.SLType = 'I') AND SUB34.Created = 'Y' THEN 'DEP' + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB35.Amount, 0) > 0 AND (SUB35.SLType = 'S' OR SUB35.SLType = 'I') AND SUB35.Created = 'Y' THEN 'DEP' + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB36.Amount, 0) > 0 AND (SUB36.SLType = 'S' OR SUB36.SLType = 'I') AND SUB36.Created = 'Y' THEN 'DEP' + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB37.Amount, 0) > 0 AND (SUB37.SLType = 'S' OR SUB37.SLType = 'I') AND SUB37.Created = 'Y' THEN 'DEP' + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB38.Amount, 0) > 0 AND (SUB38.SLType = 'S' OR SUB38.SLType = 'I') AND SUB38.Created = 'Y' THEN 'DEP' + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB39.Amount, 0) > 0 AND (SUB39.SLType = 'S' OR SUB39.SLType = 'I') AND SUB39.Created = 'Y' THEN 'DEP' + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB40.Amount, 0) > 0 AND (SUB40.SLType = 'S' OR SUB40.SLType = 'I') AND SUB40.Created = 'Y' THEN 'DEP' + CHAR(13) + CHAR(10) ELSE '' END +
	  '' AS FD_Tran

	, CASE WHEN ISNULL(SUB01.Amount, 0) > 0 AND (SUB01.SLType = 'S' OR SUB01.SLType = 'I') AND SUB01.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB01.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB02.Amount, 0) > 0 AND (SUB02.SLType = 'S' OR SUB02.SLType = 'I') AND SUB02.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB02.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB03.Amount, 0) > 0 AND (SUB03.SLType = 'S' OR SUB03.SLType = 'I') AND SUB03.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB03.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB04.Amount, 0) > 0 AND (SUB04.SLType = 'S' OR SUB04.SLType = 'I') AND SUB04.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB04.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB05.Amount, 0) > 0 AND (SUB05.SLType = 'S' OR SUB05.SLType = 'I') AND SUB05.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB05.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB06.Amount, 0) > 0 AND (SUB06.SLType = 'S' OR SUB06.SLType = 'I') AND SUB06.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB06.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB07.Amount, 0) > 0 AND (SUB07.SLType = 'S' OR SUB07.SLType = 'I') AND SUB07.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB07.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB08.Amount, 0) > 0 AND (SUB08.SLType = 'S' OR SUB08.SLType = 'I') AND SUB08.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB08.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB09.Amount, 0) > 0 AND (SUB09.SLType = 'S' OR SUB09.SLType = 'I') AND SUB09.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB09.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB10.Amount, 0) > 0 AND (SUB10.SLType = 'S' OR SUB10.SLType = 'I') AND SUB10.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB10.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB11.Amount, 0) > 0 AND (SUB11.SLType = 'S' OR SUB11.SLType = 'I') AND SUB11.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB11.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB12.Amount, 0) > 0 AND (SUB12.SLType = 'S' OR SUB12.SLType = 'I') AND SUB12.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB12.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB13.Amount, 0) > 0 AND (SUB13.SLType = 'S' OR SUB13.SLType = 'I') AND SUB13.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB13.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB14.Amount, 0) > 0 AND (SUB14.SLType = 'S' OR SUB14.SLType = 'I') AND SUB14.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB14.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB15.Amount, 0) > 0 AND (SUB15.SLType = 'S' OR SUB15.SLType = 'I') AND SUB15.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB15.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB16.Amount, 0) > 0 AND (SUB16.SLType = 'S' OR SUB16.SLType = 'I') AND SUB16.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB16.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB17.Amount, 0) > 0 AND (SUB17.SLType = 'S' OR SUB17.SLType = 'I') AND SUB17.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB17.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB18.Amount, 0) > 0 AND (SUB18.SLType = 'S' OR SUB18.SLType = 'I') AND SUB18.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB18.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB19.Amount, 0) > 0 AND (SUB19.SLType = 'S' OR SUB19.SLType = 'I') AND SUB19.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB19.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB20.Amount, 0) > 0 AND (SUB20.SLType = 'S' OR SUB20.SLType = 'I') AND SUB20.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB20.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB21.Amount, 0) > 0 AND (SUB21.SLType = 'S' OR SUB21.SLType = 'I') AND SUB21.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB21.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB22.Amount, 0) > 0 AND (SUB22.SLType = 'S' OR SUB22.SLType = 'I') AND SUB22.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB22.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB23.Amount, 0) > 0 AND (SUB23.SLType = 'S' OR SUB23.SLType = 'I') AND SUB23.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB23.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB24.Amount, 0) > 0 AND (SUB24.SLType = 'S' OR SUB24.SLType = 'I') AND SUB24.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB24.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB25.Amount, 0) > 0 AND (SUB25.SLType = 'S' OR SUB25.SLType = 'I') AND SUB25.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB25.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB26.Amount, 0) > 0 AND (SUB26.SLType = 'S' OR SUB26.SLType = 'I') AND SUB26.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB26.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB27.Amount, 0) > 0 AND (SUB27.SLType = 'S' OR SUB27.SLType = 'I') AND SUB27.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB27.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB28.Amount, 0) > 0 AND (SUB28.SLType = 'S' OR SUB28.SLType = 'I') AND SUB28.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB28.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB29.Amount, 0) > 0 AND (SUB29.SLType = 'S' OR SUB29.SLType = 'I') AND SUB29.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB29.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB30.Amount, 0) > 0 AND (SUB30.SLType = 'S' OR SUB30.SLType = 'I') AND SUB30.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB30.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB31.Amount, 0) > 0 AND (SUB31.SLType = 'S' OR SUB31.SLType = 'I') AND SUB31.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB31.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB32.Amount, 0) > 0 AND (SUB32.SLType = 'S' OR SUB32.SLType = 'I') AND SUB32.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB32.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB33.Amount, 0) > 0 AND (SUB33.SLType = 'S' OR SUB33.SLType = 'I') AND SUB33.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB33.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB34.Amount, 0) > 0 AND (SUB34.SLType = 'S' OR SUB34.SLType = 'I') AND SUB34.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB34.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB35.Amount, 0) > 0 AND (SUB35.SLType = 'S' OR SUB35.SLType = 'I') AND SUB35.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB35.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB36.Amount, 0) > 0 AND (SUB36.SLType = 'S' OR SUB36.SLType = 'I') AND SUB36.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB36.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB37.Amount, 0) > 0 AND (SUB37.SLType = 'S' OR SUB37.SLType = 'I') AND SUB37.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB37.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB38.Amount, 0) > 0 AND (SUB38.SLType = 'S' OR SUB38.SLType = 'I') AND SUB38.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB38.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB39.Amount, 0) > 0 AND (SUB39.SLType = 'S' OR SUB39.SLType = 'I') AND SUB39.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB39.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB40.Amount, 0) > 0 AND (SUB40.SLType = 'S' OR SUB40.SLType = 'I') AND SUB40.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB40.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  '' AS FD_Amount

	, CASE WHEN ISNULL(SUB01.Amount, 0) > 0 AND (SUB01.SLType = 'S' OR SUB01.SLType = 'I') AND SUB01.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB01.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB02.Amount, 0) > 0 AND (SUB02.SLType = 'S' OR SUB02.SLType = 'I') AND SUB02.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB02.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB03.Amount, 0) > 0 AND (SUB03.SLType = 'S' OR SUB03.SLType = 'I') AND SUB03.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB03.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB04.Amount, 0) > 0 AND (SUB04.SLType = 'S' OR SUB04.SLType = 'I') AND SUB04.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB04.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB05.Amount, 0) > 0 AND (SUB05.SLType = 'S' OR SUB05.SLType = 'I') AND SUB05.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB05.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB06.Amount, 0) > 0 AND (SUB06.SLType = 'S' OR SUB06.SLType = 'I') AND SUB06.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB06.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB07.Amount, 0) > 0 AND (SUB07.SLType = 'S' OR SUB07.SLType = 'I') AND SUB07.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB07.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB08.Amount, 0) > 0 AND (SUB08.SLType = 'S' OR SUB08.SLType = 'I') AND SUB08.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB08.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB09.Amount, 0) > 0 AND (SUB09.SLType = 'S' OR SUB09.SLType = 'I') AND SUB09.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB09.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB10.Amount, 0) > 0 AND (SUB10.SLType = 'S' OR SUB10.SLType = 'I') AND SUB10.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB10.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB11.Amount, 0) > 0 AND (SUB11.SLType = 'S' OR SUB11.SLType = 'I') AND SUB11.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB11.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB12.Amount, 0) > 0 AND (SUB12.SLType = 'S' OR SUB12.SLType = 'I') AND SUB12.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB12.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB13.Amount, 0) > 0 AND (SUB13.SLType = 'S' OR SUB13.SLType = 'I') AND SUB13.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB13.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB14.Amount, 0) > 0 AND (SUB14.SLType = 'S' OR SUB14.SLType = 'I') AND SUB14.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB14.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB15.Amount, 0) > 0 AND (SUB15.SLType = 'S' OR SUB15.SLType = 'I') AND SUB15.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB15.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB16.Amount, 0) > 0 AND (SUB16.SLType = 'S' OR SUB16.SLType = 'I') AND SUB16.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB16.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB17.Amount, 0) > 0 AND (SUB17.SLType = 'S' OR SUB17.SLType = 'I') AND SUB17.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB17.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB18.Amount, 0) > 0 AND (SUB18.SLType = 'S' OR SUB18.SLType = 'I') AND SUB18.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB18.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB19.Amount, 0) > 0 AND (SUB19.SLType = 'S' OR SUB19.SLType = 'I') AND SUB19.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB19.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB20.Amount, 0) > 0 AND (SUB20.SLType = 'S' OR SUB20.SLType = 'I') AND SUB20.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB20.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB21.Amount, 0) > 0 AND (SUB21.SLType = 'S' OR SUB21.SLType = 'I') AND SUB21.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB21.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB22.Amount, 0) > 0 AND (SUB22.SLType = 'S' OR SUB22.SLType = 'I') AND SUB22.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB22.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB23.Amount, 0) > 0 AND (SUB23.SLType = 'S' OR SUB23.SLType = 'I') AND SUB23.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB23.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB24.Amount, 0) > 0 AND (SUB24.SLType = 'S' OR SUB24.SLType = 'I') AND SUB24.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB24.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB25.Amount, 0) > 0 AND (SUB25.SLType = 'S' OR SUB25.SLType = 'I') AND SUB25.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB25.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB26.Amount, 0) > 0 AND (SUB26.SLType = 'S' OR SUB26.SLType = 'I') AND SUB26.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB26.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB27.Amount, 0) > 0 AND (SUB27.SLType = 'S' OR SUB27.SLType = 'I') AND SUB27.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB27.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB28.Amount, 0) > 0 AND (SUB28.SLType = 'S' OR SUB28.SLType = 'I') AND SUB28.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB28.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB29.Amount, 0) > 0 AND (SUB29.SLType = 'S' OR SUB29.SLType = 'I') AND SUB29.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB29.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB30.Amount, 0) > 0 AND (SUB30.SLType = 'S' OR SUB30.SLType = 'I') AND SUB30.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB30.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB31.Amount, 0) > 0 AND (SUB31.SLType = 'S' OR SUB31.SLType = 'I') AND SUB31.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB31.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB32.Amount, 0) > 0 AND (SUB32.SLType = 'S' OR SUB32.SLType = 'I') AND SUB32.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB32.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB33.Amount, 0) > 0 AND (SUB33.SLType = 'S' OR SUB33.SLType = 'I') AND SUB33.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB33.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB34.Amount, 0) > 0 AND (SUB34.SLType = 'S' OR SUB34.SLType = 'I') AND SUB34.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB34.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB35.Amount, 0) > 0 AND (SUB35.SLType = 'S' OR SUB35.SLType = 'I') AND SUB35.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB35.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB36.Amount, 0) > 0 AND (SUB36.SLType = 'S' OR SUB36.SLType = 'I') AND SUB36.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB36.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB37.Amount, 0) > 0 AND (SUB37.SLType = 'S' OR SUB37.SLType = 'I') AND SUB37.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB37.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB38.Amount, 0) > 0 AND (SUB38.SLType = 'S' OR SUB38.SLType = 'I') AND SUB38.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB38.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB39.Amount, 0) > 0 AND (SUB39.SLType = 'S' OR SUB39.SLType = 'I') AND SUB39.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB39.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB40.Amount, 0) > 0 AND (SUB40.SLType = 'S' OR SUB40.SLType = 'I') AND SUB40.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB40.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  '' AS FD_SharePrincipal

	, CASE WHEN ISNULL(SUB01.Amount, 0) > 0 AND (SUB01.SLType = 'S' OR SUB01.SLType = 'I') AND SUB01.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB01.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB02.Amount, 0) > 0 AND (SUB02.SLType = 'S' OR SUB02.SLType = 'I') AND SUB02.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB02.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB03.Amount, 0) > 0 AND (SUB03.SLType = 'S' OR SUB03.SLType = 'I') AND SUB03.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB03.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB04.Amount, 0) > 0 AND (SUB04.SLType = 'S' OR SUB04.SLType = 'I') AND SUB04.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB04.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB05.Amount, 0) > 0 AND (SUB05.SLType = 'S' OR SUB05.SLType = 'I') AND SUB05.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB05.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB06.Amount, 0) > 0 AND (SUB06.SLType = 'S' OR SUB06.SLType = 'I') AND SUB06.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB06.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB07.Amount, 0) > 0 AND (SUB07.SLType = 'S' OR SUB07.SLType = 'I') AND SUB07.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB07.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB08.Amount, 0) > 0 AND (SUB08.SLType = 'S' OR SUB08.SLType = 'I') AND SUB08.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB08.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB09.Amount, 0) > 0 AND (SUB09.SLType = 'S' OR SUB09.SLType = 'I') AND SUB09.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB09.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB10.Amount, 0) > 0 AND (SUB10.SLType = 'S' OR SUB10.SLType = 'I') AND SUB10.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB10.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB11.Amount, 0) > 0 AND (SUB11.SLType = 'S' OR SUB11.SLType = 'I') AND SUB11.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB11.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB12.Amount, 0) > 0 AND (SUB12.SLType = 'S' OR SUB12.SLType = 'I') AND SUB12.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB12.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB13.Amount, 0) > 0 AND (SUB13.SLType = 'S' OR SUB13.SLType = 'I') AND SUB13.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB13.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB14.Amount, 0) > 0 AND (SUB14.SLType = 'S' OR SUB14.SLType = 'I') AND SUB14.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB14.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB15.Amount, 0) > 0 AND (SUB15.SLType = 'S' OR SUB15.SLType = 'I') AND SUB15.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB15.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB16.Amount, 0) > 0 AND (SUB16.SLType = 'S' OR SUB16.SLType = 'I') AND SUB16.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB16.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB17.Amount, 0) > 0 AND (SUB17.SLType = 'S' OR SUB17.SLType = 'I') AND SUB17.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB17.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB18.Amount, 0) > 0 AND (SUB18.SLType = 'S' OR SUB18.SLType = 'I') AND SUB18.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB18.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB19.Amount, 0) > 0 AND (SUB19.SLType = 'S' OR SUB19.SLType = 'I') AND SUB19.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB19.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB20.Amount, 0) > 0 AND (SUB20.SLType = 'S' OR SUB20.SLType = 'I') AND SUB20.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB20.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB21.Amount, 0) > 0 AND (SUB21.SLType = 'S' OR SUB21.SLType = 'I') AND SUB21.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB21.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB22.Amount, 0) > 0 AND (SUB22.SLType = 'S' OR SUB22.SLType = 'I') AND SUB22.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB22.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB23.Amount, 0) > 0 AND (SUB23.SLType = 'S' OR SUB23.SLType = 'I') AND SUB23.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB23.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB24.Amount, 0) > 0 AND (SUB24.SLType = 'S' OR SUB24.SLType = 'I') AND SUB24.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB24.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB25.Amount, 0) > 0 AND (SUB25.SLType = 'S' OR SUB25.SLType = 'I') AND SUB25.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB25.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB26.Amount, 0) > 0 AND (SUB26.SLType = 'S' OR SUB26.SLType = 'I') AND SUB26.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB26.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB27.Amount, 0) > 0 AND (SUB27.SLType = 'S' OR SUB27.SLType = 'I') AND SUB27.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB27.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB28.Amount, 0) > 0 AND (SUB28.SLType = 'S' OR SUB28.SLType = 'I') AND SUB28.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB28.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB29.Amount, 0) > 0 AND (SUB29.SLType = 'S' OR SUB29.SLType = 'I') AND SUB29.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB29.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB30.Amount, 0) > 0 AND (SUB30.SLType = 'S' OR SUB30.SLType = 'I') AND SUB30.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB30.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB31.Amount, 0) > 0 AND (SUB31.SLType = 'S' OR SUB31.SLType = 'I') AND SUB31.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB31.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB32.Amount, 0) > 0 AND (SUB32.SLType = 'S' OR SUB32.SLType = 'I') AND SUB32.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB32.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB33.Amount, 0) > 0 AND (SUB33.SLType = 'S' OR SUB33.SLType = 'I') AND SUB33.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB33.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB34.Amount, 0) > 0 AND (SUB34.SLType = 'S' OR SUB34.SLType = 'I') AND SUB34.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB34.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB35.Amount, 0) > 0 AND (SUB35.SLType = 'S' OR SUB35.SLType = 'I') AND SUB35.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB35.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB36.Amount, 0) > 0 AND (SUB36.SLType = 'S' OR SUB36.SLType = 'I') AND SUB36.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB36.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB37.Amount, 0) > 0 AND (SUB37.SLType = 'S' OR SUB37.SLType = 'I') AND SUB37.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB37.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB38.Amount, 0) > 0 AND (SUB38.SLType = 'S' OR SUB38.SLType = 'I') AND SUB38.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB38.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB39.Amount, 0) > 0 AND (SUB39.SLType = 'S' OR SUB39.SLType = 'I') AND SUB39.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB39.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CASE WHEN ISNULL(SUB40.Amount, 0) > 0 AND (SUB40.SLType = 'S' OR SUB40.SLType = 'I') AND SUB40.Created = 'Y' THEN CONVERT(VARCHAR(15), CONVERT(MONEY, SUB40.Amount)/100, 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  '' AS FD_NewBalance

	, 'FUNDS RECEIVED:' + CHAR(13) + CHAR(10) +
	  'FUNDS DEPOSITED:' + CHAR(13) + CHAR(10) +
	  CASE WHEN ISNULL(NMR.NewMemberFee, 0) > 0 THEN 'MEMBERSHIP ENTRANCE FEE:' ELSE '' END +
	  'CASH RETURNED:' + CHAR(13) + CHAR(10) +
	  '' AS TotalsLabels

	, CONVERT(VARCHAR(15), CONVERT(MONEY,	ISNULL(CASH.Amount, 0) +
							ISNULL(CHECK1.Amount, 0) +
							ISNULL(CHECK2.Amount, 0) +
							ISNULL(CHECK3.Amount, 0) +
							ISNULL(CHECK4.Amount, 0) +
							ISNULL(XACCT.Amount, 0) +
							ISNULL(XSUB01.Amount, 0) +
							ISNULL(XSUB02.Amount, 0) +
							ISNULL(XSUB03.Amount, 0) +
							ISNULL(XSUB04.Amount, 0) +
							ISNULL(XSUB05.Amount, 0) +
							ISNULL(XSUB06.Amount, 0) +
							ISNULL(XSUB07.Amount, 0) +
							ISNULL(XSUB08.Amount, 0) +
							ISNULL(XSUB09.Amount, 0))/100, 1) +
							CHAR(13) + CHAR(10) +
	  CONVERT(VARCHAR(15), CONVERT(MONEY,	CASE WHEN SUB01.Created = 'Y' THEN ISNULL(SUB01.Amount, 0) ELSE 0 END +
							CASE WHEN SUB02.Created = 'Y' THEN ISNULL(SUB02.Amount, 0) ELSE 0 END +
							CASE WHEN SUB03.Created = 'Y' THEN ISNULL(SUB03.Amount, 0) ELSE 0 END +
							CASE WHEN SUB04.Created = 'Y' THEN ISNULL(SUB04.Amount, 0) ELSE 0 END +
							CASE WHEN SUB05.Created = 'Y' THEN ISNULL(SUB05.Amount, 0) ELSE 0 END +
							CASE WHEN SUB06.Created = 'Y' THEN ISNULL(SUB06.Amount, 0) ELSE 0 END +
							CASE WHEN SUB07.Created = 'Y' THEN ISNULL(SUB07.Amount, 0) ELSE 0 END +
							CASE WHEN SUB08.Created = 'Y' THEN ISNULL(SUB08.Amount, 0) ELSE 0 END +
							CASE WHEN SUB09.Created = 'Y' THEN ISNULL(SUB09.Amount, 0) ELSE 0 END +
							CASE WHEN SUB10.Created = 'Y' THEN ISNULL(SUB10.Amount, 0) ELSE 0 END +
							CASE WHEN SUB11.Created = 'Y' THEN ISNULL(SUB11.Amount, 0) ELSE 0 END +
							CASE WHEN SUB12.Created = 'Y' THEN ISNULL(SUB12.Amount, 0) ELSE 0 END +
							CASE WHEN SUB13.Created = 'Y' THEN ISNULL(SUB13.Amount, 0) ELSE 0 END +
							CASE WHEN SUB14.Created = 'Y' THEN ISNULL(SUB14.Amount, 0) ELSE 0 END +
							CASE WHEN SUB15.Created = 'Y' THEN ISNULL(SUB15.Amount, 0) ELSE 0 END +
							CASE WHEN SUB16.Created = 'Y' THEN ISNULL(SUB16.Amount, 0) ELSE 0 END +
							CASE WHEN SUB17.Created = 'Y' THEN ISNULL(SUB17.Amount, 0) ELSE 0 END +
							CASE WHEN SUB18.Created = 'Y' THEN ISNULL(SUB18.Amount, 0) ELSE 0 END +
							CASE WHEN SUB19.Created = 'Y' THEN ISNULL(SUB19.Amount, 0) ELSE 0 END +
							CASE WHEN SUB20.Created = 'Y' THEN ISNULL(SUB20.Amount, 0) ELSE 0 END +
							CASE WHEN SUB21.Created = 'Y' THEN ISNULL(SUB21.Amount, 0) ELSE 0 END +
							CASE WHEN SUB22.Created = 'Y' THEN ISNULL(SUB22.Amount, 0) ELSE 0 END +
							CASE WHEN SUB23.Created = 'Y' THEN ISNULL(SUB23.Amount, 0) ELSE 0 END +
							CASE WHEN SUB24.Created = 'Y' THEN ISNULL(SUB24.Amount, 0) ELSE 0 END +
							CASE WHEN SUB25.Created = 'Y' THEN ISNULL(SUB25.Amount, 0) ELSE 0 END +
							CASE WHEN SUB26.Created = 'Y' THEN ISNULL(SUB26.Amount, 0) ELSE 0 END +
							CASE WHEN SUB27.Created = 'Y' THEN ISNULL(SUB27.Amount, 0) ELSE 0 END +
							CASE WHEN SUB28.Created = 'Y' THEN ISNULL(SUB28.Amount, 0) ELSE 0 END +
							CASE WHEN SUB29.Created = 'Y' THEN ISNULL(SUB29.Amount, 0) ELSE 0 END +
							CASE WHEN SUB30.Created = 'Y' THEN ISNULL(SUB30.Amount, 0) ELSE 0 END +
							CASE WHEN SUB31.Created = 'Y' THEN ISNULL(SUB31.Amount, 0) ELSE 0 END +
							CASE WHEN SUB32.Created = 'Y' THEN ISNULL(SUB32.Amount, 0) ELSE 0 END +
							CASE WHEN SUB33.Created = 'Y' THEN ISNULL(SUB33.Amount, 0) ELSE 0 END +
							CASE WHEN SUB34.Created = 'Y' THEN ISNULL(SUB34.Amount, 0) ELSE 0 END +
							CASE WHEN SUB35.Created = 'Y' THEN ISNULL(SUB35.Amount, 0) ELSE 0 END +
							CASE WHEN SUB36.Created = 'Y' THEN ISNULL(SUB36.Amount, 0) ELSE 0 END +
							CASE WHEN SUB37.Created = 'Y' THEN ISNULL(SUB37.Amount, 0) ELSE 0 END +
							CASE WHEN SUB38.Created = 'Y' THEN ISNULL(SUB38.Amount, 0) ELSE 0 END +
							CASE WHEN SUB39.Created = 'Y' THEN ISNULL(SUB39.Amount, 0) ELSE 0 END +
							CASE WHEN SUB40.Created = 'Y' THEN ISNULL(SUB40.Amount, 0) ELSE 0 END)/100, 1) +
							CHAR(13) + CHAR(10) +
	  CASE WHEN ISNULL(NMR.NewMemberFee, 0) > 0 THEN CONVERT(VARCHAR(15), CONVERT(MONEY, NMR.NewMemberFee/100), 1) + CHAR(13) + CHAR(10) ELSE '' END +
	  CONVERT(VARCHAR(15), CONVERT(MONEY,	ISNULL(CASH.Amount, 0) +
							ISNULL(CHECK1.Amount, 0) +
							ISNULL(CHECK2.Amount, 0) +
							ISNULL(CHECK3.Amount, 0) +
							ISNULL(CHECK4.Amount, 0) +
							ISNULL(XACCT.Amount, 0) +
							ISNULL(XSUB01.Amount, 0) +
							ISNULL(XSUB02.Amount, 0) +
							ISNULL(XSUB03.Amount, 0) +
							ISNULL(XSUB04.Amount, 0) +
							ISNULL(XSUB05.Amount, 0) +
							ISNULL(XSUB06.Amount, 0) +
							ISNULL(XSUB07.Amount, 0) +
							ISNULL(XSUB08.Amount, 0) +
							ISNULL(XSUB09.Amount, 0) -
							CASE WHEN SUB01.Created = 'Y' THEN ISNULL(SUB01.Amount, 0) ELSE 0 END -
							CASE WHEN SUB02.Created = 'Y' THEN ISNULL(SUB02.Amount, 0) ELSE 0 END -
							CASE WHEN SUB03.Created = 'Y' THEN ISNULL(SUB03.Amount, 0) ELSE 0 END -
							CASE WHEN SUB04.Created = 'Y' THEN ISNULL(SUB04.Amount, 0) ELSE 0 END -
							CASE WHEN SUB05.Created = 'Y' THEN ISNULL(SUB05.Amount, 0) ELSE 0 END -
							CASE WHEN SUB06.Created = 'Y' THEN ISNULL(SUB06.Amount, 0) ELSE 0 END -
							CASE WHEN SUB07.Created = 'Y' THEN ISNULL(SUB07.Amount, 0) ELSE 0 END -
							CASE WHEN SUB08.Created = 'Y' THEN ISNULL(SUB08.Amount, 0) ELSE 0 END -
							CASE WHEN SUB09.Created = 'Y' THEN ISNULL(SUB09.Amount, 0) ELSE 0 END -
							CASE WHEN SUB10.Created = 'Y' THEN ISNULL(SUB10.Amount, 0) ELSE 0 END -
							CASE WHEN SUB11.Created = 'Y' THEN ISNULL(SUB11.Amount, 0) ELSE 0 END -
							CASE WHEN SUB12.Created = 'Y' THEN ISNULL(SUB12.Amount, 0) ELSE 0 END -
							CASE WHEN SUB13.Created = 'Y' THEN ISNULL(SUB13.Amount, 0) ELSE 0 END -
							CASE WHEN SUB14.Created = 'Y' THEN ISNULL(SUB14.Amount, 0) ELSE 0 END -
							CASE WHEN SUB15.Created = 'Y' THEN ISNULL(SUB15.Amount, 0) ELSE 0 END -
							CASE WHEN SUB16.Created = 'Y' THEN ISNULL(SUB16.Amount, 0) ELSE 0 END -
							CASE WHEN SUB17.Created = 'Y' THEN ISNULL(SUB17.Amount, 0) ELSE 0 END -
							CASE WHEN SUB18.Created = 'Y' THEN ISNULL(SUB18.Amount, 0) ELSE 0 END -
							CASE WHEN SUB19.Created = 'Y' THEN ISNULL(SUB19.Amount, 0) ELSE 0 END -
							CASE WHEN SUB20.Created = 'Y' THEN ISNULL(SUB20.Amount, 0) ELSE 0 END -
							CASE WHEN SUB21.Created = 'Y' THEN ISNULL(SUB21.Amount, 0) ELSE 0 END -
							CASE WHEN SUB22.Created = 'Y' THEN ISNULL(SUB22.Amount, 0) ELSE 0 END -
							CASE WHEN SUB23.Created = 'Y' THEN ISNULL(SUB23.Amount, 0) ELSE 0 END -
							CASE WHEN SUB24.Created = 'Y' THEN ISNULL(SUB24.Amount, 0) ELSE 0 END -
							CASE WHEN SUB25.Created = 'Y' THEN ISNULL(SUB25.Amount, 0) ELSE 0 END -
							CASE WHEN SUB26.Created = 'Y' THEN ISNULL(SUB26.Amount, 0) ELSE 0 END -
							CASE WHEN SUB27.Created = 'Y' THEN ISNULL(SUB27.Amount, 0) ELSE 0 END -
							CASE WHEN SUB28.Created = 'Y' THEN ISNULL(SUB28.Amount, 0) ELSE 0 END -
							CASE WHEN SUB29.Created = 'Y' THEN ISNULL(SUB29.Amount, 0) ELSE 0 END -
							CASE WHEN SUB30.Created = 'Y' THEN ISNULL(SUB30.Amount, 0) ELSE 0 END -
							CASE WHEN SUB31.Created = 'Y' THEN ISNULL(SUB31.Amount, 0) ELSE 0 END -
							CASE WHEN SUB32.Created = 'Y' THEN ISNULL(SUB32.Amount, 0) ELSE 0 END -
							CASE WHEN SUB33.Created = 'Y' THEN ISNULL(SUB33.Amount, 0) ELSE 0 END -
							CASE WHEN SUB34.Created = 'Y' THEN ISNULL(SUB34.Amount, 0) ELSE 0 END -
							CASE WHEN SUB35.Created = 'Y' THEN ISNULL(SUB35.Amount, 0) ELSE 0 END -
							CASE WHEN SUB36.Created = 'Y' THEN ISNULL(SUB36.Amount, 0) ELSE 0 END -
							CASE WHEN SUB37.Created = 'Y' THEN ISNULL(SUB37.Amount, 0) ELSE 0 END -
							CASE WHEN SUB38.Created = 'Y' THEN ISNULL(SUB38.Amount, 0) ELSE 0 END -
							CASE WHEN SUB39.Created = 'Y' THEN ISNULL(SUB39.Amount, 0) ELSE 0 END -
							CASE WHEN SUB40.Created = 'Y' THEN ISNULL(SUB40.Amount, 0) ELSE 0 END -
							ISNULL(NMR.NewMemberFee, 0))/100, 1) +
							CHAR(13) + CHAR(10) +
	  '' AS TotalsAmounts

FROM NewMemberRequest As NMR
	LEFT OUTER JOIN fnSafe_GetFund(@TrackingNum, '1' ) AS CASH ON NMR.TrackingNum = CASH.TrackingNum
	LEFT OUTER JOIN fnSafe_GetFund(@TrackingNum, '2' ) AS CHECK1 ON NMR.TrackingNum = CHECK1.TrackingNum
	LEFT OUTER JOIN fnSafe_GetFund(@TrackingNum, '3' ) AS CHECK2 ON NMR.TrackingNum = CHECK2.TrackingNum
	LEFT OUTER JOIN fnSafe_GetFund(@TrackingNum, '4' ) AS CHECK3 ON NMR.TrackingNum = CHECK3.TrackingNum
	LEFT OUTER JOIN fnSafe_GetFund(@TrackingNum, '5' ) AS CHECK4 ON NMR.TrackingNum = CHECK4.TrackingNum
	LEFT OUTER JOIN fnSafe_GetFund(@TrackingNum, '6' ) AS XACCT ON NMR.TrackingNum = XACCT.TrackingNum
	LEFT OUTER JOIN fnSafe_GetFund(@TrackingNum, '7' ) AS XSUB01 ON NMR.TrackingNum = XSUB01.TrackingNum
	LEFT OUTER JOIN fnSafe_GetFund(@TrackingNum, '8' ) AS XSUB02 ON NMR.TrackingNum = XSUB02.TrackingNum
	LEFT OUTER JOIN fnSafe_GetFund(@TrackingNum, '9' ) AS XSUB03 ON NMR.TrackingNum = XSUB03.TrackingNum
	LEFT OUTER JOIN fnSafe_GetFund(@TrackingNum, '10' ) AS XSUB04 ON NMR.TrackingNum = XSUB04.TrackingNum
	LEFT OUTER JOIN fnSafe_GetFund(@TrackingNum, '11' ) AS XSUB05 ON NMR.TrackingNum = XSUB05.TrackingNum
	LEFT OUTER JOIN fnSafe_GetFund(@TrackingNum, '12' ) AS XSUB06 ON NMR.TrackingNum = XSUB06.TrackingNum
	LEFT OUTER JOIN fnSafe_GetFund(@TrackingNum, '13' ) AS XSUB07 ON NMR.TrackingNum = XSUB07.TrackingNum
	LEFT OUTER JOIN fnSafe_GetFund(@TrackingNum, '14' ) AS XSUB08 ON NMR.TrackingNum = XSUB08.TrackingNum
	LEFT OUTER JOIN fnSafe_GetFund(@TrackingNum, '15' ) AS XSUB09 ON NMR.TrackingNum = XSUB09.TrackingNum
	LEFT OUTER JOIN fnSafe_GetFund(@TrackingNum, '16' ) AS XSUB10 ON NMR.TrackingNum = XSUB10.TrackingNum
	LEFT OUTER JOIN fnSafe_GetFund(@TrackingNum, '17' ) AS XSUB11 ON NMR.TrackingNum = XSUB11.TrackingNum
	LEFT OUTER JOIN fnSafe_GetFund(@TrackingNum, '18' ) AS XSUB12 ON NMR.TrackingNum = XSUB12.TrackingNum
	LEFT OUTER JOIN fnSafe_GetFund(@TrackingNum, '19' ) AS XSUB13 ON NMR.TrackingNum = XSUB13.TrackingNum
	LEFT OUTER JOIN fnSafe_GetFund(@TrackingNum, '20' ) AS XSUB14 ON NMR.TrackingNum = XSUB14.TrackingNum
	LEFT OUTER JOIN fnSafe_GetFund(@TrackingNum, '21' ) AS XSUB15 ON NMR.TrackingNum = XSUB15.TrackingNum
	LEFT OUTER JOIN fnSafe_GetFund(@TrackingNum, '22' ) AS XSUB16 ON NMR.TrackingNum = XSUB16.TrackingNum
	LEFT OUTER JOIN fnSafe_GetFund(@TrackingNum, '23' ) AS XSUB17 ON NMR.TrackingNum = XSUB17.TrackingNum
	LEFT OUTER JOIN fnSafe_GetFund(@TrackingNum, '24' ) AS XSUB18 ON NMR.TrackingNum = XSUB18.TrackingNum
	LEFT OUTER JOIN fnSafe_GetFund(@TrackingNum, '25' ) AS XSUB19 ON NMR.TrackingNum = XSUB19.TrackingNum	
	LEFT OUTER JOIN fnSafe_GetFund(@TrackingNum, '26' ) AS XSUB20 ON NMR.TrackingNum = XSUB20.TrackingNum
	LEFT OUTER JOIN fnSafe_GetSASeq(@TrackingNum, '1' ) AS SUB01 ON NMR.TrackingNum = SUB01.TrackingNum
	LEFT OUTER JOIN fnSafe_GetSASeq(@TrackingNum, '2' ) AS SUB02 ON NMR.TrackingNum = SUB02.TrackingNum
	LEFT OUTER JOIN fnSafe_GetSASeq(@TrackingNum, '3' ) AS SUB03 ON NMR.TrackingNum = SUB03.TrackingNum
	LEFT OUTER JOIN fnSafe_GetSASeq(@TrackingNum, '4' ) AS SUB04 ON NMR.TrackingNum = SUB04.TrackingNum
	LEFT OUTER JOIN fnSafe_GetSASeq(@TrackingNum, '5' ) AS SUB05 ON NMR.TrackingNum = SUB05.TrackingNum
	LEFT OUTER JOIN fnSafe_GetSASeq(@TrackingNum, '6' ) AS SUB06 ON NMR.TrackingNum = SUB06.TrackingNum
	LEFT OUTER JOIN fnSafe_GetSASeq(@TrackingNum, '7' ) AS SUB07 ON NMR.TrackingNum = SUB07.TrackingNum
	LEFT OUTER JOIN fnSafe_GetSASeq(@TrackingNum, '8' ) AS SUB08 ON NMR.TrackingNum = SUB08.TrackingNum
	LEFT OUTER JOIN fnSafe_GetSASeq(@TrackingNum, '9' ) AS SUB09 ON NMR.TrackingNum = SUB09.TrackingNum
	LEFT OUTER JOIN fnSafe_GetSASeq(@TrackingNum, '10' ) AS SUB10 ON NMR.TrackingNum = SUB10.TrackingNum
	LEFT OUTER JOIN fnSafe_GetSASeq(@TrackingNum, '11' ) AS SUB11 ON NMR.TrackingNum = SUB11.TrackingNum
	LEFT OUTER JOIN fnSafe_GetSASeq(@TrackingNum, '12' ) AS SUB12 ON NMR.TrackingNum = SUB12.TrackingNum
	LEFT OUTER JOIN fnSafe_GetSASeq(@TrackingNum, '13' ) AS SUB13 ON NMR.TrackingNum = SUB13.TrackingNum
	LEFT OUTER JOIN fnSafe_GetSASeq(@TrackingNum, '14' ) AS SUB14 ON NMR.TrackingNum = SUB14.TrackingNum
	LEFT OUTER JOIN fnSafe_GetSASeq(@TrackingNum, '15' ) AS SUB15 ON NMR.TrackingNum = SUB15.TrackingNum
	LEFT OUTER JOIN fnSafe_GetSASeq(@TrackingNum, '16' ) AS SUB16 ON NMR.TrackingNum = SUB16.TrackingNum
	LEFT OUTER JOIN fnSafe_GetSASeq(@TrackingNum, '17' ) AS SUB17 ON NMR.TrackingNum = SUB17.TrackingNum
	LEFT OUTER JOIN fnSafe_GetSASeq(@TrackingNum, '18' ) AS SUB18 ON NMR.TrackingNum = SUB18.TrackingNum
	LEFT OUTER JOIN fnSafe_GetSASeq(@TrackingNum, '19' ) AS SUB19 ON NMR.TrackingNum = SUB19.TrackingNum
	LEFT OUTER JOIN fnSafe_GetSASeq(@TrackingNum, '20' ) AS SUB20 ON NMR.TrackingNum = SUB20.TrackingNum
	LEFT OUTER JOIN fnSafe_GetSASeq(@TrackingNum, '21' ) AS SUB21 ON NMR.TrackingNum = SUB21.TrackingNum
	LEFT OUTER JOIN fnSafe_GetSASeq(@TrackingNum, '22' ) AS SUB22 ON NMR.TrackingNum = SUB22.TrackingNum
	LEFT OUTER JOIN fnSafe_GetSASeq(@TrackingNum, '23' ) AS SUB23 ON NMR.TrackingNum = SUB23.TrackingNum
	LEFT OUTER JOIN fnSafe_GetSASeq(@TrackingNum, '24' ) AS SUB24 ON NMR.TrackingNum = SUB24.TrackingNum
	LEFT OUTER JOIN fnSafe_GetSASeq(@TrackingNum, '25' ) AS SUB25 ON NMR.TrackingNum = SUB25.TrackingNum
	LEFT OUTER JOIN fnSafe_GetSASeq(@TrackingNum, '26' ) AS SUB26 ON NMR.TrackingNum = SUB26.TrackingNum
	LEFT OUTER JOIN fnSafe_GetSASeq(@TrackingNum, '27' ) AS SUB27 ON NMR.TrackingNum = SUB27.TrackingNum
	LEFT OUTER JOIN fnSafe_GetSASeq(@TrackingNum, '28' ) AS SUB28 ON NMR.TrackingNum = SUB28.TrackingNum
	LEFT OUTER JOIN fnSafe_GetSASeq(@TrackingNum, '29' ) AS SUB29 ON NMR.TrackingNum = SUB29.TrackingNum
	LEFT OUTER JOIN fnSafe_GetSASeq(@TrackingNum, '30' ) AS SUB30 ON NMR.TrackingNum = SUB30.TrackingNum
	LEFT OUTER JOIN fnSafe_GetSASeq(@TrackingNum, '31' ) AS SUB31 ON NMR.TrackingNum = SUB31.TrackingNum
	LEFT OUTER JOIN fnSafe_GetSASeq(@TrackingNum, '32' ) AS SUB32 ON NMR.TrackingNum = SUB32.TrackingNum
	LEFT OUTER JOIN fnSafe_GetSASeq(@TrackingNum, '33' ) AS SUB33 ON NMR.TrackingNum = SUB33.TrackingNum
	LEFT OUTER JOIN fnSafe_GetSASeq(@TrackingNum, '34' ) AS SUB34 ON NMR.TrackingNum = SUB34.TrackingNum
	LEFT OUTER JOIN fnSafe_GetSASeq(@TrackingNum, '35' ) AS SUB35 ON NMR.TrackingNum = SUB35.TrackingNum
	LEFT OUTER JOIN fnSafe_GetSASeq(@TrackingNum, '36' ) AS SUB36 ON NMR.TrackingNum = SUB36.TrackingNum
	LEFT OUTER JOIN fnSafe_GetSASeq(@TrackingNum, '37' ) AS SUB37 ON NMR.TrackingNum = SUB37.TrackingNum
	LEFT OUTER JOIN fnSafe_GetSASeq(@TrackingNum, '38' ) AS SUB38 ON NMR.TrackingNum = SUB38.TrackingNum
	LEFT OUTER JOIN fnSafe_GetSASeq(@TrackingNum, '39' ) AS SUB39 ON NMR.TrackingNum = SUB39.TrackingNum
	LEFT OUTER JOIN fnSafe_GetSASeq(@TrackingNum, '40' ) AS SUB40 ON NMR.TrackingNum = SUB40.TrackingNum
WHERE NMR.TrackingNum = @TrackingNum


Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_S598_Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO


CREATE PROCEDURE [IMS].[spSafe_D_S598_Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
--Declare @TrackingNum int
--DROP TABLE #docs
--DEALLOCATE curs

Declare @docsubname char(100)
Declare @newdocsub char(200)
Declare @count int
Declare @docindex int


--CREATE TABLE #docs(docindex int identity Primary Key, docsubname char(100))

Declare curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT '' AS docsubname
	FROM NewMemberRequest AS NMR
	WHERE NMR.TrackingNum = @TrackingNum AND NMR.Processed = 999 AND NMR.AccountType IN ('X')

--IF @@ROWCOUNT = 0

OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count

      	IF @count = 1
	BEGIN
		SET @docindex = @docindex + 1
		SET @newdocsub = 'Certificate of Managing General Partner (S-598)'-- for Suffix(s) ' + CASE LEN(@docsubname) WHEN 2 THEN @docsubname WHEN 1 THEN '0' + @docsubname ELSE 'NA' END
		INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END

      	FETCH NEXT FROM curs INTO @docsubname

	IF @docsubname != NULL
	BEGIN
		SET @newdocsub = @newdocsub + ', ' + @docsubname
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex AND TrackingNum = @TrackingNum
	END
   END

CLOSE curs
DEALLOCATE curs

SELECT 'S598' AS DocCode, 'BUSINESS' AS ScanName, * FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
DELETE FROM NewMemberDoc WHERE TrackingNum = @TrackingNum

--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_S598_Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [IMS].[spSafe_D_S598_Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

-- STATIC DOCUMENT
SELECT @DocIndex As DocIndex
FROM NewMemberRequest As NMR
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
WHERE NMR.TrackingNum = @TrackingNum


Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_S604F_Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO


CREATE PROCEDURE [IMS].[spSafe_D_S604F_Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
--Declare @TrackingNum int
--DROP TABLE #docs
--DEALLOCATE curs

Declare @docsubname char(100)
Declare @newdocsub char(200)
Declare @count int
Declare @docindex int


--CREATE TABLE #docs(docindex int identity Primary Key, docsubname char(100))

Declare curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT '' AS docsubname
	FROM NewMemberRequest AS NMR
	WHERE NMR.TrackingNum = @TrackingNum AND NMR.Processed = 999 AND NMR.AccountType IN ('X')

--IF @@ROWCOUNT = 0

OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count

      	IF @count = 1
	BEGIN
		Set @docindex = @docindex + 1
		SET @newdocsub = 'Business Account Profile (S-604F)'-- for Suffix(s) ' + CASE LEN(@docsubname) WHEN 2 THEN @docsubname WHEN 1 THEN '0' + @docsubname ELSE 'NA' END
		INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END

      	FETCH NEXT FROM curs INTO @docsubname

	IF @docsubname != NULL
	BEGIN
		SET @newdocsub = @newdocsub + ', ' + @docsubname
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex AND TrackingNum = @TrackingNum
	END
   END

CLOSE curs
DEALLOCATE curs

Select *  FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Delete FROM NewMemberDoc WHERE TrackingNum = @TrackingNum

--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_S604F_Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [IMS].[spSafe_D_S604F_Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

SELECT @DocIndex As DocIndex
FROM NewMemberRequest As NMR
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
WHERE NMR.TrackingNum = @TrackingNum


Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_S627V_Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO


CREATE PROCEDURE [IMS].[spSafe_D_S627V_Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
--Declare @TrackingNum int
--DROP TABLE #docs
--DEALLOCATE curs

Declare @docsubname char(100)
Declare @newdocsub char(200)
Declare @count int
Declare @docindex int


--CREATE TABLE #docs(docindex int identity Primary Key, docsubname char(100))

Declare curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT '' AS docsubname
	FROM NewMemberSubAccount AS SA INNER JOIN NewMemberRequest AS NMR ON NMR.TrackingNum = SA.TrackingNum
	WHERE SA.TrackingNum = @TrackingNum AND NMR.Processed = 999 AND SA.Created = 'Y' AND SA.CollateralCode = '755' AND SA.VRLCode = '777' AND (SA.ApprovalTier <> '1' AND SA.ApprovalTier <> '2')

--IF @@ROWCOUNT = 0

OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count

      	IF @count = 1
	BEGIN
		Set @docindex = @docindex + 1
		SET @newdocsub = 'Platinum Rewards Agreement (Variable) (S-627V)'-- for Suffix(s) ' + CASE LEN(@docsubname) WHEN 2 THEN @docsubname WHEN 1 THEN '0' + @docsubname ELSE 'NA' END
		INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
		Set @docindex = @docindex + 1
		SET @newdocsub = 'Platinum Rewards Agreement (Variable) (S-627V) - Copy'-- for Suffix(s) ' + CASE LEN(@docsubname) WHEN 2 THEN @docsubname WHEN 1 THEN '0' + @docsubname ELSE 'NA' END
		INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END

      	FETCH NEXT FROM curs INTO @docsubname

	IF @docsubname != NULL
	BEGIN
		SET @newdocsub = @newdocsub + ', ' + @docsubname
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex AND TrackingNum = @TrackingNum
	END
   END

CLOSE curs
DEALLOCATE curs

Select *  FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Delete FROM NewMemberDoc WHERE TrackingNum = @TrackingNum

--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_S627V_Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [IMS].[spSafe_D_S627V_Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

SELECT @DocIndex As DocIndex
	, RTRIM(CONVERT(CHAR(10), CAST(ROUND(CAST(S755.APR AS int) * 0.0001, 2, 1) AS Decimal(10,2)))) + '%' AS APR
	, RTRIM(CONVERT(CHAR(10), CAST(CAST(S755.APR AS int) * 0.0001 / 12 AS Decimal(10,3)))) + '%' AS PeriodicRate
	, CASE S755.ApprovalTier
		WHEN '1' THEN '5.65'
		WHEN '2' THEN '6.65'
		WHEN '3' THEN '9.65'
		WHEN '4' THEN '11.65'
		END AS Margin
FROM NewMemberRequest As NMR
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN fnSafe_GetSA(@TrackingNum, '755', '755V') AS S755 ON NMR.TrackingNum = S755.TrackingNum
WHERE NMR.TrackingNum = @TrackingNum


Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_S627VI_Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [IMS].[spSafe_D_S627VI_Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
--Declare @TrackingNum int
--DROP TABLE #docs
--DEALLOCATE curs

Declare @docsubname char(100)
Declare @newdocsub char(200)
Declare @count int
Declare @docindex int


--CREATE TABLE #docs(docindex int identity Primary Key, docsubname char(100))

Declare curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT '' AS docsubname
	FROM NewMemberSubAccount AS SA INNER JOIN NewMemberRequest AS NMR ON NMR.TrackingNum = SA.TrackingNum
	WHERE SA.TrackingNum = @TrackingNum AND NMR.Processed = 999 AND SA.Created = 'Y' AND SA.CollateralCode = '755' AND SA.VRLCode = '777' AND (SA.ApprovalTier = '1' OR SA.ApprovalTier = '2')

--IF @@ROWCOUNT = 0

OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count

      	IF @count = 1
	BEGIN
		Set @docindex = @docindex + 1
		SET @newdocsub = 'Platinum Rewards Agreement (Variable - Intro) (S-627VI)'-- for Suffix(s) ' + CASE LEN(@docsubname) WHEN 2 THEN @docsubname WHEN 1 THEN '0' + @docsubname ELSE 'NA' END
		INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
		Set @docindex = @docindex + 1
		SET @newdocsub = 'Platinum Rewards Agreement (Variable - Intro) (S-627VI) - Copy'-- for Suffix(s) ' + CASE LEN(@docsubname) WHEN 2 THEN @docsubname WHEN 1 THEN '0' + @docsubname ELSE 'NA' END
		INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END

      	FETCH NEXT FROM curs INTO @docsubname

	IF @docsubname != NULL
	BEGIN
		SET @newdocsub = @newdocsub + ', ' + @docsubname
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex AND TrackingNum = @TrackingNum
	END
   END

CLOSE curs
DEALLOCATE curs

Select *  FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Delete FROM NewMemberDoc WHERE TrackingNum = @TrackingNum

--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_S627VI_Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO


CREATE PROCEDURE [IMS].[spSafe_D_S627VI_Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

SELECT @DocIndex As DocIndex
	, RTRIM(CONVERT(CHAR(10), CAST(ROUND(CAST(S755.APR AS INT) * 0.0001, 2, 1) AS Decimal(10,2)))) + '%' AS APR
	, RTRIM(CONVERT(CHAR(10), CAST(CAST(S755.APR AS INT) * 0.0001 / 12 AS Decimal(10,3)))) + '%' AS PeriodicRate
-- The values on the next line also need to be updated in ADAPIConfig.
	, CASE S755.ApprovalTier
		WHEN '1' THEN '5.65'
		WHEN '2' THEN '6.65'
		WHEN '3' THEN '9.65'
		WHEN '4' THEN '11.65'
		END AS Margin
	, RTRIM(CONVERT(CHAR(10), CAST(ROUND(CAST('019000' AS INT) * 0.0001, 2, 1) AS Decimal(10,2)))) + '%' AS IntroAPR
	, RTRIM(CONVERT(CHAR(10), CAST(CAST('019000' AS INT) * 0.0001 / 12 AS Decimal(10,3)))) + '%' AS IntroPeriodicRate
	, '6' AS IntroMonths
	, 'six' AS IntroMonthsWord
FROM NewMemberRequest As NMR
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN fnSafe_GetSA(@TrackingNum, '755', '755V') AS S755 ON NMR.TrackingNum = S755.TrackingNum
WHERE NMR.TrackingNum = @TrackingNum


Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_S628V_Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [IMS].[spSafe_D_S628V_Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
--Declare @TrackingNum int
--DROP TABLE #docs
--DEALLOCATE curs

Declare @docsubname char(100)
Declare @newdocsub char(200)
Declare @count int
Declare @docindex int


--CREATE TABLE #docs(docindex int identity Primary Key, docsubname char(100))

Declare curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT '' AS docsubname
	FROM NewMemberSubAccount AS SA INNER JOIN NewMemberRequest AS NMR ON NMR.TrackingNum = SA.TrackingNum
	WHERE SA.TrackingNum = @TrackingNum AND NMR.Processed = 999 AND SA.Created = 'Y' AND SA.CollateralCode = '750' AND SA.VRLCode = '777' AND (SA.ApprovalTier <> '1' AND SA.ApprovalTier <> '2')

--IF @@ROWCOUNT = 0

OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count

      	IF @count = 1
	BEGIN
		Set @docindex = @docindex + 1
		SET @newdocsub = 'Platinum Agreement (Variable) (S-628V)'-- for Suffix(s) ' + CASE LEN(@docsubname) WHEN 2 THEN @docsubname WHEN 1 THEN '0' + @docsubname ELSE 'NA' END
		INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
		Set @docindex = @docindex + 1
		SET @newdocsub = 'Platinum Agreement (Variable) (S-628V) - Copy'-- for Suffix(s) ' + CASE LEN(@docsubname) WHEN 2 THEN @docsubname WHEN 1 THEN '0' + @docsubname ELSE 'NA' END
		INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END

      	FETCH NEXT FROM curs INTO @docsubname

	IF @docsubname != NULL
	BEGIN
		SET @newdocsub = @newdocsub + ', ' + @docsubname
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex AND TrackingNum = @TrackingNum
	END
   END

CLOSE curs
DEALLOCATE curs

Select *  FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Delete FROM NewMemberDoc WHERE TrackingNum = @TrackingNum

--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_S628V_Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [IMS].[spSafe_D_S628V_Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

SELECT @DocIndex As DocIndex
	, RTRIM(CONVERT(CHAR(10), CAST(ROUND(CAST(S750.APR AS int) * 0.0001, 2, 1) AS Decimal(10,2)))) + '%' AS APR
	, RTRIM(CONVERT(CHAR(10), CAST(CAST(S750.APR AS int) * 0.0001 / 12 AS Decimal(10,3)))) + '%' AS PeriodicRate
	, CASE S750.ApprovalTier
		WHEN '1' THEN '4.65'
		WHEN '2' THEN '5.65'
		WHEN '3' THEN '8.65'
		WHEN '4' THEN '10.65'
		END AS Margin
FROM NewMemberRequest As NMR
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN fnSafe_GetSA(@TrackingNum, '750', '750V') AS S750 ON NMR.TrackingNum = S750.TrackingNum
WHERE NMR.TrackingNum = @TrackingNum


Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_S628VI_Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO


CREATE PROCEDURE [IMS].[spSafe_D_S628VI_Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
--Declare @TrackingNum int
--DROP TABLE #docs
--DEALLOCATE curs

Declare @docsubname char(100)
Declare @newdocsub char(200)
Declare @count int
Declare @docindex int


--CREATE TABLE #docs(docindex int identity Primary Key, docsubname char(100))

Declare curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT '' AS docsubname
	FROM NewMemberSubAccount AS SA INNER JOIN NewMemberRequest AS NMR ON NMR.TrackingNum = SA.TrackingNum
	WHERE SA.TrackingNum = @TrackingNum AND NMR.Processed = 999 AND SA.Created = 'Y' AND SA.CollateralCode = '750' AND SA.VRLCode = '777' AND (SA.ApprovalTier = '1' OR SA.ApprovalTier = '2')

--IF @@ROWCOUNT = 0

OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count

      	IF @count = 1
	BEGIN
		Set @docindex = @docindex + 1
		SET @newdocsub = 'Platinum Agreement (Variable - Intro) (S-628VI)'-- for Suffix(s) ' + CASE LEN(@docsubname) WHEN 2 THEN @docsubname WHEN 1 THEN '0' + @docsubname ELSE 'NA' END
		INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
		Set @docindex = @docindex + 1
		SET @newdocsub = 'Platinum Agreement (Variable - Intro) (S-628VI) - Copy'-- for Suffix(s) ' + CASE LEN(@docsubname) WHEN 2 THEN @docsubname WHEN 1 THEN '0' + @docsubname ELSE 'NA' END
		INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END

      	FETCH NEXT FROM curs INTO @docsubname

	IF @docsubname != NULL
	BEGIN
		SET @newdocsub = @newdocsub + ', ' + @docsubname
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex AND TrackingNum = @TrackingNum
	END
   END

CLOSE curs
DEALLOCATE curs

Select *  FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Delete FROM NewMemberDoc WHERE TrackingNum = @TrackingNum

--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_S628VI_Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [IMS].[spSafe_D_S628VI_Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

SELECT @DocIndex As DocIndex
	, RTRIM(CONVERT(CHAR(10), CAST(ROUND(CAST(S750.APR AS INT) * 0.0001, 2, 1) AS Decimal(10,2)))) + '%' AS APR
	, RTRIM(CONVERT(CHAR(10), CAST(CAST(S750.APR AS INT) * 0.0001 / 12 AS Decimal(10,3)))) + '%' AS PeriodicRate
-- The values on the next line also need to be updated in ADAPIConfig.
	, CASE S750.ApprovalTier
		WHEN '1' THEN '4.65'
		WHEN '2' THEN '5.65'
		WHEN '3' THEN '8.65'
		WHEN '4' THEN '10.65'
		END AS Margin
	, RTRIM(CONVERT(CHAR(10), CAST(ROUND(CAST('019000' AS INT) * 0.0001, 2, 1) AS Decimal(10,2)))) + '%' AS IntroAPR
	, RTRIM(CONVERT(CHAR(10), CAST(CAST('019000' AS INT) * 0.0001 / 12 AS Decimal(10,3)))) + '%' AS IntroPeriodicRate
	, '6' AS IntroMonths
	, 'six' AS IntroMonthsWord
FROM NewMemberRequest As NMR
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN fnSafe_GetSA(@TrackingNum, '750', '750V') AS S750 ON NMR.TrackingNum = S750.TrackingNum
WHERE NMR.TrackingNum = @TrackingNum


Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_S644_Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spSafe_D_S644_Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
--Declare @TrackingNum int
--DROP TABLE #docs
--DEALLOCATE curs

Declare @docsubname char(100)
Declare @newdocsub char(200)
Declare @count int
Declare @docindex int


--CREATE TABLE #docs(docindex int identity Primary Key, docsubname char(100))

Declare curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT '' AS docsubname
	FROM NewMemberSubAccount AS SA INNER JOIN NewMemberRequest AS NMR ON NMR.TrackingNum = SA.TrackingNum
	WHERE SA.TrackingNum = @TrackingNum AND NMR.Processed = 999 AND (NMR.Created = 'Y' OR (SA.Created = 'Y' AND SA.SubAccountType IN ('NDA-74', 'YMA-16', 'SSA-1', 'KID-16')))

--IF @@ROWCOUNT = 0

OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count

      	IF @count = 1
	BEGIN
		Set @docindex = @docindex + 1
		SET @newdocsub = 'Privacy Policy (S-644)'-- for Suffix(s) ' + CASE LEN(@docsubname) WHEN 2 THEN @docsubname WHEN 1 THEN '0' + @docsubname ELSE 'NA' END
		INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END

      	FETCH NEXT FROM curs INTO @docsubname

	IF @docsubname != NULL
	BEGIN
		SET @newdocsub = @newdocsub + ', ' + @docsubname
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex AND TrackingNum = @TrackingNum
	END
   END

CLOSE curs
DEALLOCATE curs

Select *  FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Delete FROM NewMemberDoc WHERE TrackingNum = @TrackingNum

--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_S644_Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO


CREATE PROCEDURE [IMS].[spSafe_D_S644_Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

-- STATIC DOCUMENT
SELECT @DocIndex As DocIndex
FROM NewMemberRequest As NMR
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
WHERE NMR.TrackingNum = @TrackingNum


Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_S695N_Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [IMS].[spSafe_D_S695N_Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @Suffix CHAR(2)
DECLARE @Suffixes VARCHAR(1000)
DECLARE @docsubname CHAR(100)
DECLARE @newdocsub CHAR(200)
DECLARE @count INT
DECLARE @docindex INT

-- Get Suffixes --------------------------------------------------------------------------------------------------------------------------------------------
DECLARE mycur2 CURSOR LOCAL FAST_FORWARD
FOR
	SELECT Suffix
	FROM NewMemberSubAccount AS SA
	WHERE SA.TrackingNum = @TrackingNum AND SA.Created = 'Y' AND SA.ProductType NOT LIKE 'IRA%'
	ORDER BY Suffix
	
OPEN mycur2
FETCH NEXT FROM mycur2
INTO @Suffix

SET @Suffixes = ''
WHILE @@FETCH_STATUS = 0
BEGIN
	IF @Suffix IS NOT NULL
	BEGIN
		SET @Suffixes = @Suffixes + CASE WHEN @Suffixes <> '' THEN ', ' ELSE '' END
		SET @Suffixes = @Suffixes + RIGHT('0' + RTRIM(CONVERT(CHAR(2), @Suffix)), 2)
	END


	FETCH NEXT FROM mycur2
	INTO @Suffix
END
CLOSE mycur2
DEALLOCATE mycur2

-- Display Document --------------------------------------------------------------------------------------------------------------------------------------------
DECLARE curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT @Suffixes
	FROM NewMemberJointOwner AS JO
	LEFT JOIN NewMemberRequest AS NMR ON NMR.TrackingNum = JO.TrackingNum
	WHERE JO.TrackingNum = @TrackingNum AND NMR.Processed = 999 AND NMR.AccountType IN ('BS', 'BE', 'BH', 'BW', 'BA', 'BC', 'BG', 'BL', 'BP', 'BY') AND JO.JointOwnerType IN ('AE', 'AS')

OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count

      	IF @count = 1 OR @count = 4 OR @count = 7 OR @count = 10 OR @count = 13 OR @count = 16 OR @count = 19 OR @count = 22
	BEGIN
		SET @docindex = @docindex + 1
		SET @newdocsub = 'Business Account Application (S-695N) - Suffixes: ' + @docsubname
		INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END

      	FETCH NEXT FROM curs INTO @docsubname

	IF @docsubname != NULL
	BEGIN
		SET @newdocsub = @newdocsub + ', ' + @docsubname
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex AND TrackingNum = @TrackingNum
	END
   END

CLOSE curs
DEALLOCATE curs

IF @docindex > 1
BEGIN
	UPDATE NewMemberDoc SET DocSubName = RTRIM(DocSubName) + ' (' + CONVERT(VARCHAR, DocIndex) + ' of ' + CONVERT(VARCHAR, @docindex) + ')' WHERE TrackingNum = @TrackingNum
END

SELECT 'S695N' AS DocCode, 'COMBINED APPLICATION' AS ScanName, * FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
DELETE FROM NewMemberDoc WHERE TrackingNum = @TrackingNum

--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_S695N_Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO


CREATE PROCEDURE [IMS].[spSafe_D_S695N_Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @joseq INT
DECLARE @joseq1 INT
DECLARE @joseq2 INT
DECLARE @joseq3 INT
DECLARE @count INT
DECLARE @totalpages INT

DECLARE curs2 CURSOR LOCAL FAST_FORWARD FOR
	SELECT CONVERT(INT, JO.Sequence)
	FROM NewMemberJointOwner AS JO
	LEFT JOIN NewMemberRequest AS NMR ON NMR.TrackingNum = JO.TrackingNum
	WHERE JO.TrackingNum = @TrackingNum AND NMR.Processed = 999 AND NMR.AccountType IN ('BS', 'BE', 'BH', 'BW', 'BA', 'BC', 'BG', 'BL', 'BP', 'BY') AND JO.JointOwnerType IN ('AE', 'AS')
OPEN curs2
FETCH NEXT FROM curs2 INTO @joseq
SET @count = 0
PRINT @@FETCH_STATUS
WHILE @@FETCH_STATUS = 0
BEGIN
      	IF (@count = 0 AND @DocIndex = 1) OR (@count = 3 AND @DocIndex = 2) OR (@count = 6 AND @DocIndex = 3) OR (@count = 9 AND @DocIndex = 4) OR (@count = 12 AND @DocIndex = 5)
		BEGIN
			SET @joseq1 = @joseq
		END
      	IF (@count = 1 AND @DocIndex = 1) OR (@count = 4 AND @DocIndex = 2) OR (@count = 7 AND @DocIndex = 3) OR (@count = 10 AND @DocIndex = 4) OR (@count = 13 AND @DocIndex = 5)
		BEGIN
			SET @joseq2 = @joseq
		END
      	IF (@count = 2 AND @DocIndex = 1) OR (@count = 5 AND @DocIndex = 2) OR (@count = 8 AND @DocIndex = 3) OR (@count = 11 AND @DocIndex = 4) OR (@count = 14 AND @DocIndex = 5)
		BEGIN
			SET @joseq3 = @joseq
		END
      	FETCH NEXT FROM curs2 INTO @joseq
	SET @count = @count + 1
	PRINT @count
	SET @totalpages = (@count/4)+1
END
CLOSE curs2
DEALLOCATE curs2

SELECT @DocIndex As DocIndex
	, CASE WHEN @totalpages > 1 THEN CONVERT(VARCHAR, @DocIndex) + ' of ' + CONVERT(VARCHAR, @totalpages) ELSE '' END AS TotalPages
	, IMS.fnSafe_GetProducts(@TrackingNum, 1, '@') AS Products1
	, IMS.fnSafe_GetProducts(@TrackingNum, 2, '@') AS Products2
--	, IMS.fnSafe_GetProducts(@TrackingNum, 3) AS Products3
--	, IMS.fnSafe_GetProducts(@TrackingNum, 4) AS Products4
	, CASE WHEN CHARINDEX(','+RTRIM(NMR.AccountType)+',', ',BA,BC,BE,BG,BH,BL,BP,BS,BW,BY,') > 0 THEN
		'$' + RTRIM(CAST(ROUND(CONVERT(INT,PCC.AmountOnline *.0001), 0)*100 AS VARCHAR(10))) + '/$' + 
		CASE WHEN LEN(PCC.POSOnlineLimit) = 6 THEN
			LEFT(RTRIM(CAST(CONVERT(INT,PCC.POSOnlineLimit *.01) AS VARCHAR(10))), 1) + ',' + RIGHT(RTRIM(CAST(CONVERT(INT,PCC.POSOnlineLimit *.01) AS VARCHAR(10))),3)
		ELSE
			RTRIM(CAST(CONVERT(INT,PCC.POSOnlineLimit *.01) AS VARCHAR(10)))
		END
	  ELSE
		'$' + RTRIM(CAST(ROUND(CONVERT(INT,PCD.AmountOnline *.0001), 0)*100 AS VARCHAR(10))) + '/$' + 
		CASE WHEN LEN(PCD.POSOnlineLimit) = 6 THEN
			LEFT(RTRIM(CAST(CONVERT(INT,PCD.POSOnlineLimit *.01) AS VARCHAR(10))), 1) + ',' + RIGHT(RTRIM(CAST(CONVERT(INT,PCD.POSOnlineLimit *.01) AS VARCHAR(10))),3)
		ELSE
			RTRIM(CAST(CONVERT(INT,PCD.POSOnlineLimit *.01) AS VARCHAR(10)))
		END
	  END AS PointOfSale

	, CASE WHEN NMR.AccountType = 'BS' OR NMR.AccountType = 'BE' THEN 'X' END AS BS_BE
	, CASE WHEN NMR.AccountType = 'BH' OR NMR.AccountType = 'BW' THEN 'X' END AS BH_BW
	, CASE WHEN NMR.AccountType = 'BA' THEN 'X' END AS BA
	, CASE WHEN NMR.AccountType = 'BC' THEN 'X' END AS BC
	, CASE WHEN NMR.AccountType = 'BG' THEN 'X' END AS BG
	, CASE WHEN NMR.AccountType = 'BL' THEN 'X' END AS BL
	, CASE WHEN NMR.AccountType = 'BP' THEN 'X' END AS BP
	, CASE WHEN NMR.AccountType = 'BY' THEN 'X' END AS [BY]

	, CASE WHEN RTRIM(RTRIM(NMR.FName) + ' ' + RTRIM(NMR.LName)) = '' THEN
		CASE WHEN CHARINDEX('/', NMR.OrganizationName) > 0 THEN
			RTRIM(RIGHT(RTRIM(NMR.OrganizationName), LEN(RTRIM(NMR.OrganizationName))-CHARINDEX('/', NMR.OrganizationName)) + ' ' + LEFT(RTRIM(NMR.OrganizationName), CHARINDEX('/', NMR.OrganizationName)-1))
		ELSE
			RTRIM(NMR.OrganizationName)
		END
	  ELSE
		RTRIM(RTRIM(NMR.FName) + CASE ISNULL(NMR.MInitial, '') WHEN '' THEN '' ELSE ' ' + RTRIM(NMR.MInitial) END + ' ' + RTRIM(NMR.LName))
	  END AS BusinessName
	, RTRIM('') AS BusinessDBA
	, RTRIM(Work.JobTitle) AS BusinessType
	, CASE WHEN NMR.AccountType IN ('BH', 'BS') THEN
		RTRIM(AS01.FullName)
	  ELSE
		CASE WHEN CHARINDEX('/', NMR.OrganizationName) > 0 THEN
			RTRIM(RIGHT(RTRIM(NMR.OrganizationName), LEN(RTRIM(NMR.OrganizationName))-CHARINDEX('/', NMR.OrganizationName)) + ' ' + LEFT(RTRIM(NMR.OrganizationName), CHARINDEX('/', NMR.OrganizationName)-1))
		ELSE
			RTRIM(NMR.OrganizationName)
		END
	  END AS BusinessTaxReportingName
	, CASE WHEN NMR.AccountType IN ('BH', 'BS') THEN LEFT(AS01.SSN, 3) + '-' + LEFT(RIGHT(AS01.SSN, 6), 2) + '-' + RIGHT(AS01.SSN, 4) ELSE LEFT(NMR.SSN, 2) + '-' + RIGHT(NMR.SSN, 7) END AS BusinessSSN
	, LEFT(Work.AreaCode, 3) + '-' + LEFT(RIGHT(RTRIM(Work.Phone), 7), 3) + '-' + RIGHT(RTRIM(Work.Phone), 4) AS BusinessPhone
	, CONVERT(CHAR(10), NMR.DOB, 101) AS BusinessDate
	, RTRIM(RTRIM(Work.Address1) + CASE ISNULL(Work.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Work.Address2) END + CASE ISNULL(Work.Address3, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Work.Address3) END) + ', ' + RTRIM(Work.City) + ', ' + Work.State + ' ' + CASE LEN(Work.Zip) WHEN 9 THEN LEFT(Work.Zip, 5) + '-' + Right(Work.Zip, 4) ELSE Work.Zip END AS BusinessMailingAddress
	, RTRIM(RTRIM(Address.Address1) + CASE ISNULL(Address.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Address.Address2) END + CASE ISNULL(Address.Address3, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Address.Address3) END) + ', ' + RTRIM(Address.City) + ', ' + Address.State + ' ' + CASE LEN(Address.Zip) WHEN 9 THEN LEFT(Address.Zip, 5) + '-' + Right(Address.Zip, 4) ELSE Address.Zip END AS BusinessAddress

	, CASE WHEN NMR.AccountType = 'BS' OR NMR.AccountType = 'BH' THEN RTRIM(AS01.FullName) ELSE RTRIM(AE01.FullName) END AS ASFullName01
	, CASE WHEN NMR.AccountType = 'BS' OR NMR.AccountType = 'BH' THEN RTRIM(AS01.Title) ELSE RTRIM(AE01.Title) END AS ASTitle01
	, CASE WHEN NMR.AccountType = 'BS' OR NMR.AccountType = 'BH' THEN CONVERT(CHAR(10), AS01.DOB, 101) ELSE CONVERT(CHAR(10), AE01.DOB, 101) END AS ASDOB01
	, CASE WHEN NMR.AccountType = 'BS' OR NMR.AccountType = 'BH' THEN LEFT(AS01.SSN, 3) + '-' + LEFT(RIGHT(AS01.SSN, 6), 2) + '-' + RIGHT(AS01.SSN, 4) ELSE LEFT(AE01.SSN, 3) + '-' + LEFT(RIGHT(AE01.SSN, 6), 2) + '-' + RIGHT(AE01.SSN, 4) END AS ASSSN01
	, CASE WHEN NMR.AccountType = 'BS' OR NMR.AccountType = 'BH' THEN RTRIM(AS01.FullAddress) ELSE RTRIM(AE01.FullAddress) END AS PAddress01
	, CASE WHEN NMR.AccountType = 'BS' OR NMR.AccountType = 'BH' THEN LEFT(AS01.CellPhone, 3) + '-' + LEFT(RIGHT(RTRIM(AS01.CellPhone), 7), 3) + '-' + RIGHT(RTRIM(AS01.CellPhone), 4) ELSE LEFT(AE01.CellPhone, 3) + '-' + LEFT(RIGHT(RTRIM(AE01.CellPhone), 7), 3) + '-' + RIGHT(RTRIM(AE01.CellPhone), 4) END AS ASCPhone01
	, CASE WHEN NMR.AccountType = 'BS' OR NMR.AccountType = 'BH' THEN RTRIM(AS01.DriversLicenseNum) ELSE RTRIM(AE01.DriversLicenseNum) END AS ASIDNumber01
	, CASE WHEN NMR.AccountType = 'BS' OR NMR.AccountType = 'BH' THEN RTRIM(AS01.DriversLicenseState) ELSE RTRIM(AE01.DriversLicenseState) END AS ASIDState01
	, CASE WHEN NMR.AccountType = 'BS' OR NMR.AccountType = 'BH' THEN CONVERT(CHAR(10), AS01.IDExpirationDate, 101) ELSE CONVERT(CHAR(10), AE01.IDExpirationDate, 101) END AS ASIDExpirationDate01

	, CASE WHEN NMR.AccountType = 'BS' OR NMR.AccountType = 'BH' THEN RTRIM(AS02.FullName) ELSE RTRIM(AE02.FullName) END AS ASFullName02
	, CASE WHEN NMR.AccountType = 'BS' OR NMR.AccountType = 'BH' THEN RTRIM(AS02.Title) ELSE RTRIM(AE02.Title) END AS ASTitle02
	, CASE WHEN NMR.AccountType = 'BS' OR NMR.AccountType = 'BH' THEN CONVERT(CHAR(10), AS02.DOB, 101) ELSE CONVERT(CHAR(10), AE02.DOB, 101) END AS ASDOB02
	, CASE WHEN NMR.AccountType = 'BS' OR NMR.AccountType = 'BH' THEN LEFT(AS02.SSN, 3) + '-' + LEFT(RIGHT(AS02.SSN, 6), 2) + '-' + RIGHT(AS02.SSN, 4) ELSE LEFT(AE02.SSN, 3) + '-' + LEFT(RIGHT(AE02.SSN, 6), 2) + '-' + RIGHT(AE02.SSN, 4) END AS ASSSN02
	, CASE WHEN NMR.AccountType = 'BS' OR NMR.AccountType = 'BH' THEN RTRIM(AS02.FullAddress) ELSE RTRIM(AE02.FullAddress) END AS PAddress02
	, CASE WHEN NMR.AccountType = 'BS' OR NMR.AccountType = 'BH' THEN LEFT(AS02.CellPhone, 3) + '-' + LEFT(RIGHT(RTRIM(AS02.CellPhone), 7), 3) + '-' + RIGHT(RTRIM(AS02.CellPhone), 4) ELSE LEFT(AE02.CellPhone, 3) + '-' + LEFT(RIGHT(RTRIM(AE02.CellPhone), 7), 3) + '-' + RIGHT(RTRIM(AE02.CellPhone), 4) END AS ASCPhone02
	, CASE WHEN NMR.AccountType = 'BS' OR NMR.AccountType = 'BH' THEN RTRIM(AS02.DriversLicenseNum) ELSE RTRIM(AE02.DriversLicenseNum) END AS ASIDNumber02
	, CASE WHEN NMR.AccountType = 'BS' OR NMR.AccountType = 'BH' THEN RTRIM(AS02.DriversLicenseState) ELSE RTRIM(AE02.DriversLicenseState) END AS ASIDState02
	, CASE WHEN NMR.AccountType = 'BS' OR NMR.AccountType = 'BH' THEN CONVERT(CHAR(10), AS02.IDExpirationDate, 101) ELSE CONVERT(CHAR(10), AE02.IDExpirationDate, 101) END AS ASIDExpirationDate02

	, CASE WHEN NMR.AccountType = 'BS' OR NMR.AccountType = 'BH' THEN RTRIM(AS03.FullName) ELSE RTRIM(AE03.FullName) END AS ASFullName03
	, CASE WHEN NMR.AccountType = 'BS' OR NMR.AccountType = 'BH' THEN RTRIM(AS03.Title) ELSE RTRIM(AE03.Title) END AS ASTitle03
	, CASE WHEN NMR.AccountType = 'BS' OR NMR.AccountType = 'BH' THEN CONVERT(CHAR(10), AS03.DOB, 101) ELSE CONVERT(CHAR(10), AE03.DOB, 101) END AS ASDOB03
	, CASE WHEN NMR.AccountType = 'BS' OR NMR.AccountType = 'BH' THEN LEFT(AS03.SSN, 3) + '-' + LEFT(RIGHT(AS03.SSN, 6), 2) + '-' + RIGHT(AS03.SSN, 4) ELSE LEFT(AE03.SSN, 3) + '-' + LEFT(RIGHT(AE03.SSN, 6), 2) + '-' + RIGHT(AE03.SSN, 4) END AS ASSSN03
	, CASE WHEN NMR.AccountType = 'BS' OR NMR.AccountType = 'BH' THEN RTRIM(AS03.FullAddress) ELSE RTRIM(AE03.FullAddress) END AS PAddress03
	, CASE WHEN NMR.AccountType = 'BS' OR NMR.AccountType = 'BH' THEN LEFT(AS03.CellPhone, 3) + '-' + LEFT(RIGHT(RTRIM(AS03.CellPhone), 7), 3) + '-' + RIGHT(RTRIM(AS03.CellPhone), 4) ELSE LEFT(AE03.CellPhone, 3) + '-' + LEFT(RIGHT(RTRIM(AE03.CellPhone), 7), 3) + '-' + RIGHT(RTRIM(AE03.CellPhone), 4) END AS ASCPhone03
	, CASE WHEN NMR.AccountType = 'BS' OR NMR.AccountType = 'BH' THEN RTRIM(AS03.DriversLicenseNum) ELSE RTRIM(AE03.DriversLicenseNum) END AS ASIDNumber03
	, CASE WHEN NMR.AccountType = 'BS' OR NMR.AccountType = 'BH' THEN RTRIM(AS03.DriversLicenseState) ELSE RTRIM(AE03.DriversLicenseState) END AS ASIDState03
	, CASE WHEN NMR.AccountType = 'BS' OR NMR.AccountType = 'BH' THEN CONVERT(CHAR(10), AS03.IDExpirationDate, 101) ELSE CONVERT(CHAR(10), AE03.IDExpirationDate, 101) END AS ASIDExpirationDate03

	, CASE WHEN NMR.Created = 'Y' AND NMR.Qualification3 = 'Location' THEN RTRIM(Dept.Description) END AS Eligibility
FROM NewMemberRequest As NMR
	LEFT OUTER JOIN IMS.NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN IMS.NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN IMS.NewMemberAddress As Address On NMR.TrackingNum = Address.TrackingNum
	LEFT OUTER JOIN IMS.Departments As Dept On NMR.Department = Dept.Department
	LEFT OUTER JOIN fnSafe_GetPCPlastic(@TrackingNum, 1, 'C') AS PCC ON NMR.TrackingNum = PCC.TrackingNum
	LEFT OUTER JOIN fnSafe_GetPCPlastic(@TrackingNum, 1, 'D') AS PCD ON NMR.TrackingNum = PCD.TrackingNum
	LEFT OUTER JOIN fnSafe_GetJOType(@TrackingNum, 'PB', '', '', '', '', '', '@') AS Beneficiary ON NMR.TrackingNum = Beneficiary.TrackingNum AND Beneficiary.JointSequence = 1
	LEFT OUTER JOIN fnSafe_GetJOType(@TrackingNum, 'AE', '', '', '', '', '', '@') AS AE01 ON NMR.TrackingNum = AE01.TrackingNum AND AE01.Sequence = @joseq1
	LEFT OUTER JOIN fnSafe_GetJOType(@TrackingNum, 'AE', '', '', '', '', '', '@') AS AE02 ON NMR.TrackingNum = AE02.TrackingNum AND AE02.Sequence = @joseq2
	LEFT OUTER JOIN fnSafe_GetJOType(@TrackingNum, 'AE', '', '', '', '', '', '@') AS AE03 ON NMR.TrackingNum = AE03.TrackingNum AND AE03.Sequence = @joseq3
	LEFT OUTER JOIN fnSafe_GetJOType(@TrackingNum, 'AS', '', '', '', '', '', '@') AS AS01 ON NMR.TrackingNum = AS01.TrackingNum AND AS01.Sequence = @joseq1
	LEFT OUTER JOIN fnSafe_GetJOType(@TrackingNum, 'AS', '', '', '', '', '', '@') AS AS02 ON NMR.TrackingNum = AS02.TrackingNum AND AS02.Sequence = @joseq2
	LEFT OUTER JOIN fnSafe_GetJOType(@TrackingNum, 'AS', '', '', '', '', '', '@') AS AS03 ON NMR.TrackingNum = AS03.TrackingNum AND AS03.Sequence = @joseq3
WHERE NMR.TrackingNum = @TrackingNum


Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_S735_Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [IMS].[spSafe_D_S735_Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
--Declare @TrackingNum int
--DROP TABLE #docs
--DEALLOCATE curs

Declare @docsubname char(100)
Declare @newdocsub char(200)
Declare @count int
Declare @docindex int


--CREATE TABLE #docs(docindex int identity Primary Key, docsubname char(100))

Declare curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT '' AS docsubname
	FROM NewMemberRequest AS NMR
	WHERE NMR.TrackingNum = @TrackingNum AND NMR.Processed = 999 AND NMR.AccountType IN ('X')

--IF @@ROWCOUNT = 0

OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count

      	IF @count = 1
	BEGIN
		SET @docindex = @docindex + 1
		SET @newdocsub = 'Letter of Authority to SAFE Credit Union (S-735)'-- for Suffix(s) ' + CASE LEN(@docsubname) WHEN 2 THEN @docsubname WHEN 1 THEN '0' + @docsubname ELSE 'NA' END
		INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END

      	FETCH NEXT FROM curs INTO @docsubname

	IF @docsubname != NULL
	BEGIN
		SET @newdocsub = @newdocsub + ', ' + @docsubname
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex AND TrackingNum = @TrackingNum
	END
   END

CLOSE curs
DEALLOCATE curs

SELECT 'S735' AS DocCode, 'BUSINESS' AS ScanName, * FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
DELETE FROM NewMemberDoc WHERE TrackingNum = @TrackingNum

--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_S735_Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [IMS].[spSafe_D_S735_Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

-- STATIC DOCUMENT
SELECT @DocIndex As DocIndex
FROM NewMemberRequest As NMR
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
WHERE NMR.TrackingNum = @TrackingNum


Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_S740_Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [IMS].[spSafe_D_S740_Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
--Declare @TrackingNum int
--DROP TABLE #docs
--DEALLOCATE curs

Declare @docsubname char(100)
Declare @newdocsub char(200)
Declare @count int
Declare @docindex int


--CREATE TABLE #docs(docindex int identity Primary Key, docsubname char(100))

Declare curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT SA.Suffix AS docsubname
	FROM NewMemberSubAccount AS SA INNER JOIN NewMemberRequest AS NMR ON NMR.TrackingNum = SA.TrackingNum
	WHERE SA.TrackingNum = @TrackingNum AND NMR.Processed = 999 AND NMR.AccountType IN ('P', 'TE', 'TR', 'TT', 'BS', 'BE', 'BH', 'BW', 'BA', 'BC', 'BG', 'BL', 'BP', 'BY', 'M2', 'M5', 'M7', '17', 'BO', 'C', 'CG', 'RP', 'E') AND SA.ProductType = 'SDA' AND SA.ProductType = 'XXX'

--IF @@ROWCOUNT = 0

OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count

	Set @docindex = @docindex + 1
	SET @newdocsub = 'Switch Kit (S-740) Suffix: ' + CASE LEN(@docsubname) WHEN 2 THEN @docsubname WHEN 1 THEN '0' + @docsubname ELSE 'NA' END
	INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)

      	FETCH NEXT FROM curs INTO @docsubname

	IF @docsubname != NULL
	BEGIN
		SET @newdocsub = @newdocsub + ', ' + @docsubname
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex AND TrackingNum = @TrackingNum
	END
   END

CLOSE curs
DEALLOCATE curs

Select *  FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Delete FROM NewMemberDoc WHERE TrackingNum = @TrackingNum

--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_S740_Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO


CREATE PROCEDURE [IMS].[spSafe_D_S740_Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

SELECT @DocIndex As DocIndex
	, SSDA.MICRNumber AS MICR
FROM NewMemberRequest As NMR
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN fnSafe_GetSAType(@TrackingNum, 'SDA', 'S') AS SSDA ON NMR.TrackingNum = SSDA.TrackingNum
WHERE NMR.TrackingNum = @TrackingNum


Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_S769N_Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO


CREATE PROCEDURE [IMS].[spSafe_D_S769N_Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
--Declare @TrackingNum int
--DROP TABLE #docs
--DEALLOCATE curs

Declare @docsubname char(100)
Declare @newdocsub char(200)
Declare @count int
Declare @docindex int


--CREATE TABLE #docs(docindex int identity Primary Key, docsubname char(100))

Declare curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT '' AS docsubname
	FROM NewMemberRequest AS NMR
	WHERE NMR.TrackingNum = @TrackingNum AND NMR.Processed = 999 AND NMR.AccountType IN ('TE', 'TR', 'TT')

--IF @@ROWCOUNT = 0

OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count

      	IF @count = 1
	BEGIN
		SET @docindex = @docindex + 1
		SET @newdocsub = 'Trust Account Application & Agreement (S-769N)'-- for Suffix(s) ' + CASE LEN(@docsubname) WHEN 2 THEN @docsubname WHEN 1 THEN '0' + @docsubname ELSE 'NA' END
		INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END

      	FETCH NEXT FROM curs INTO @docsubname

	IF @docsubname != NULL
	BEGIN
		SET @newdocsub = @newdocsub + ', ' + @docsubname
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex AND TrackingNum = @TrackingNum
	END
   END

CLOSE curs
DEALLOCATE curs

SELECT 'S769N' AS DocCode, 'COMBINED APPLICATION' AS ScanName, * FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
DELETE FROM NewMemberDoc WHERE TrackingNum = @TrackingNum

--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_S769N_Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spSafe_D_S769N_Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

SELECT @DocIndex As DocIndex
	, CASE WHEN NMR.RevocableTrust = 'R' THEN 'X' END AS Revocable
	, CASE WHEN NMR.RevocableTrust = 'I' THEN 'X' END AS Irrevocable
	, IMS.fnSafe_GetProducts(@TrackingNum, 1, '@') AS Products1
	, IMS.fnSafe_GetProducts(@TrackingNum, 2, '@') AS Products2
	, IMS.fnSafe_GetProducts(@TrackingNum, 3, '@') AS Products3
	, IMS.fnSafe_GetProducts(@TrackingNum, 4, '@') AS Products4

	, CASE WHEN RTRIM(RTRIM(NMR.FName) + ' ' + RTRIM(NMR.LName)) = '' THEN
		CASE WHEN CHARINDEX('/', NMR.OrganizationName) > 0 THEN
			RTRIM(RIGHT(RTRIM(NMR.OrganizationName), LEN(RTRIM(NMR.OrganizationName))-CHARINDEX('/', NMR.OrganizationName)) + ' ' + LEFT(RTRIM(NMR.OrganizationName), CHARINDEX('/', NMR.OrganizationName)-1))
		ELSE
			RTRIM(NMR.OrganizationName)
		END
	  ELSE
		RTRIM(RTRIM(NMR.FName) + CASE ISNULL(NMR.MInitial, '') WHEN '' THEN '' ELSE ' ' + RTRIM(NMR.MInitial) END + ' ' + RTRIM(NMR.LName))
	  END AS TrustName
	, CONVERT(CHAR(10), NMR.TrustDated, 101) AS TrustDate
	, CASE WHEN NMR.AccountType IN ('TE', 'TT') THEN
		CASE WHEN CHARINDEX('/', NMR.OrganizationName) > 0 THEN
			RTRIM(RIGHT(RTRIM(NMR.OrganizationName), LEN(RTRIM(NMR.OrganizationName))-CHARINDEX('/', NMR.OrganizationName)) + ' ' + LEFT(RTRIM(NMR.OrganizationName), CHARINDEX('/', NMR.OrganizationName)-1))
		ELSE
			RTRIM(NMR.OrganizationName)
		END
	  ELSE
		RTRIM(TE01.FullName)
	  END AS TaxReportingName
	, CASE WHEN NMR.AccountType IN ('TE', 'TT') THEN
		CASE WHEN NMR.AccountType = 'TT' THEN
			LEFT(NMR.SSN, 3) + '-' + LEFT(RIGHT(NMR.SSN, 6), 2) + '-' + RIGHT(NMR.SSN, 4)
		ELSE
			LEFT(NMR.SSN, 2) + '-' + RIGHT(NMR.SSN, 7)
		END
	  ELSE
		LEFT(TE01.SSN, 3) + '-' + LEFT(RIGHT(TE01.SSN, 6), 2) + '-' + RIGHT(TE01.SSN, 4)
	  END AS ReportingTIN
	, CASE WHEN NMR.AccountType IN ('TE', 'TT') THEN
		RTRIM(TE01.FullAddress)
	  ELSE
		RTRIM(RTRIM(Work.Address1) + CASE ISNULL(Work.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Work.Address2) END + CASE ISNULL(Work.Address3, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Work.Address3) END) + ', ' + RTRIM(Work.City) + ', ' + Work.State + ' ' + CASE LEN(Work.Zip) WHEN 9 THEN LEFT(Work.Zip, 5) + '-' + Right(Work.Zip, 4) ELSE Work.Zip END
	  END AS MailingAddress
	, LTRIM(IMS.fnSafe_GetJOTypes(@TrackingNum, 'TO')) AS Trustors

	, RTRIM(TE01.FullName) AS TE01FullName
	, CONVERT(CHAR(10), TE01.DOB, 101) AS TE01DOB
	, LEFT(TE01.SSN, 3) + '-' + LEFT(RIGHT(TE01.SSN, 6), 2) + '-' + RIGHT(TE01.SSN, 4) AS TE01SSN
	, RTRIM(TE01.FullAddress) AS TE01Address
	, CASE WHEN LEN(TE01.CellPhone) <> 0 THEN LEFT(TE01.CellPhone, 3) + '-' + CASE WHEN LEN(TE01.CellPhone) = 10 THEN LEFT(RIGHT(TE01.CellPhone, 7), 3) + '-' + RIGHT(RTRIM(TE01.CellPhone), 4) ELSE '' END ELSE '' END AS TE01CPhone
	, LEFT(TE01.Phone, 3) + '-' + LEFT(RIGHT(TE01.Phone, 7), 3) + '-' + RIGHT(RTRIM(TE01.Phone), 4) AS TE01HPhone
	, CASE WHEN LEN(TE01.WorkPhone) <> 0 THEN LEFT(TE01.WorkPhone, 3) + '-' + CASE WHEN LEN(TE01.WorkPhone) = 10 THEN LEFT(RIGHT(TE01.WorkPhone, 7), 3) + '-' + RIGHT(RTRIM(TE01.WorkPhone), 4) ELSE '' END ELSE '' END AS TE01WPhone
	, RTRIM(TE01.DriversLicenseNum) AS TE01IDNumber
	, RTRIM(TE01.DriversLicenseState) AS TE01IDState
	, CONVERT(CHAR(10), TE01.IDExpirationDate, 101) AS TE01IDExpirationDate
	, RTRIM(TE01.JobTitle) AS TE01Occupation

	, RTRIM(TE02.FullName) AS TE02FullName
	, CONVERT(CHAR(10), TE02.DOB, 101) AS TE02DOB
	, LEFT(TE02.SSN, 3) + '-' + LEFT(RIGHT(TE02.SSN, 6), 2) + '-' + RIGHT(TE02.SSN, 4) AS TE02SSN
	, RTRIM(TE02.FullAddress) AS TE02Address
	, CASE WHEN LEN(TE02.CellPhone) <> 0 THEN LEFT(TE02.CellPhone, 3) + '-' + CASE WHEN LEN(TE02.CellPhone) = 10 THEN LEFT(RIGHT(TE02.CellPhone, 7), 3) + '-' + RIGHT(RTRIM(TE02.CellPhone), 4) ELSE '' END ELSE '' END AS TE02CPhone
	, LEFT(TE02.Phone, 3) + '-' + LEFT(RIGHT(TE02.Phone, 7), 3) + '-' + RIGHT(RTRIM(TE02.Phone), 4) AS TE02HPhone
	, CASE WHEN LEN(TE02.WorkPhone) <> 0 THEN LEFT(TE02.WorkPhone, 3) + '-' + CASE WHEN LEN(TE02.WorkPhone) = 10 THEN LEFT(RIGHT(TE02.WorkPhone, 7), 3) + '-' + RIGHT(RTRIM(TE02.WorkPhone), 4) ELSE '' END ELSE '' END AS TE02WPhone
	, RTRIM(TE02.DriversLicenseNum) AS TE02IDNumber
	, RTRIM(TE02.DriversLicenseState) AS TE02IDState
	, CONVERT(CHAR(10), TE02.IDExpirationDate, 101) AS TE02IDExpirationDate
	, RTRIM(TE02.JobTitle) AS TE02Occupation

--	, RTRIM(TE03.FullName) AS TE03FullName
--	, RTRIM(TE03.DriversLicenseNum) AS TE03IDNumber
--	, RTRIM(TE03.DriversLicenseState) AS TE03IDState
--	, CONVERT(CHAR(10), TE03.DOB, 101) AS TE03DOB
--	, LEFT(TE03.SSN, 3) + '-' + LEFT(RIGHT(TE03.SSN, 6), 2) + '-' + RIGHT(TE03.SSN, 4) AS TE03SSN
--	, CONVERT(CHAR(10), TE03.IDExpirationDate, 101) AS TE03IDExpirationDate
--	, RTRIM(TE03.FullAddress) AS TE03Address
--	, LEFT(TE03.Phone, 3) + '-' + LEFT(RIGHT(TE03.Phone, 7), 3) + '-' + RIGHT(RTRIM(TE03.Phone), 4) AS TE03HPhone
--	, CASE WHEN LEN(TE03.WorkPhone) <> 0 THEN LEFT(TE03.WorkPhone, 3) + '-' + CASE WHEN LEN(TE03.WorkPhone) = 10 THEN LEFT(RIGHT(TE03.WorkPhone, 7), 3) + '-' + RIGHT(RTRIM(TE03.WorkPhone), 4) ELSE '' END ELSE '' END AS TE03WPhone

	, RTRIM(ST01.FullName) AS ST01FullName
	, RTRIM(ST02.FullName) AS ST02FullName
	, RTRIM(ST03.FullName) AS ST03FullName
	, RTRIM(ST04.FullName) AS ST04FullName

	, RTRIM(TB01.FullName) AS TB01FullName
	, RTRIM(TB01.Relationship) AS TB01Relationship
	, RTRIM(TB02.FullName) AS TB02FullName
	, RTRIM(TB02.Relationship) AS TB02Relationship
	, RTRIM(TB03.FullName) AS TB03FullName
	, RTRIM(TB03.Relationship) AS TB03Relationship
	, RTRIM(TB04.FullName) AS TB04FullName
	, RTRIM(TB04.Relationship) AS TB04Relationship

	, CASE WHEN NMR.Created = 'Y' AND NMR.Qualification3 = 'Location' THEN RTRIM(Dept.Description) END AS Eligibility
	, CASE WHEN NMR.Created = 'Y' AND NMR.Qualification3 = 'Employer' THEN RTRIM(Dept.Description) END AS Employer
	, CASE WHEN NMR.Created = 'Y' AND NMR.Qualification3 = 'Relative' THEN RTRIM(NMR.Qualification1) + ' / ' + RTRIM(NMR.Qualification2) END AS Relationship

FROM NewMemberRequest As NMR
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN IMS.Departments As Dept On NMR.Department = Dept.Department
	LEFT OUTER JOIN fnSafe_GetJOType(@TrackingNum, 'TO', '', '', '', '', '', '@') AS TO01 ON NMR.TrackingNum = TO01.TrackingNum AND TO01.JointSequence = 1
	LEFT OUTER JOIN fnSafe_GetJOType(@TrackingNum, 'TE', 'TR', 'TT', '', '', '', '@') AS TE01 ON NMR.TrackingNum = TE01.TrackingNum AND TE01.JointSequence = 1
	LEFT OUTER JOIN fnSafe_GetJOType(@TrackingNum, 'TE', 'TR', 'TT', '', '', '', '@') AS TE02 ON NMR.TrackingNum = TE02.TrackingNum AND TE02.JointSequence = 2
	LEFT OUTER JOIN fnSafe_GetJOType(@TrackingNum, 'TE', 'TR', 'TT', '', '', '', '@') AS TE03 ON NMR.TrackingNum = TE03.TrackingNum AND TE03.JointSequence = 3
	LEFT OUTER JOIN fnSafe_GetJOType(@TrackingNum, 'ST', '', '', '', '', '', '@') AS ST01 ON NMR.TrackingNum = ST01.TrackingNum AND ST01.JointSequence = 1
	LEFT OUTER JOIN fnSafe_GetJOType(@TrackingNum, 'ST', '', '', '', '', '', '@') AS ST02 ON NMR.TrackingNum = ST02.TrackingNum AND ST02.JointSequence = 2
	LEFT OUTER JOIN fnSafe_GetJOType(@TrackingNum, 'ST', '', '', '', '', '', '@') AS ST03 ON NMR.TrackingNum = ST03.TrackingNum AND ST03.JointSequence = 3
	LEFT OUTER JOIN fnSafe_GetJOType(@TrackingNum, 'ST', '', '', '', '', '', '@') AS ST04 ON NMR.TrackingNum = ST04.TrackingNum AND ST04.JointSequence = 4
	LEFT OUTER JOIN fnSafe_GetJOType(@TrackingNum, 'TB', '', '', '', '', '', '@') AS TB01 ON NMR.TrackingNum = TB01.TrackingNum AND TB01.JointSequence = 1
	LEFT OUTER JOIN fnSafe_GetJOType(@TrackingNum, 'TB', '', '', '', '', '', '@') AS TB02 ON NMR.TrackingNum = TB02.TrackingNum AND TB02.JointSequence = 2
	LEFT OUTER JOIN fnSafe_GetJOType(@TrackingNum, 'TB', '', '', '', '', '', '@') AS TB03 ON NMR.TrackingNum = TB03.TrackingNum AND TB03.JointSequence = 3
	LEFT OUTER JOIN fnSafe_GetJOType(@TrackingNum, 'TB', '', '', '', '', '', '@') AS TB04 ON NMR.TrackingNum = TB04.TrackingNum AND TB04.JointSequence = 4
WHERE NMR.TrackingNum = @TrackingNum


Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_W8BEN_Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO


CREATE PROCEDURE [IMS].[spSafe_D_W8BEN_Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
--Declare @TrackingNum int
--DROP TABLE #docs
--DEALLOCATE curs

Declare @docsubname char(100)
Declare @newdocsub char(200)
Declare @count int
Declare @docindex int


--CREATE TABLE #docs(docindex int identity Primary Key, docsubname char(100))

Declare curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT RTRIM(NMR.FName) + ' ' + RTRIM(NMR.LName) AS docsubname
	FROM NewMemberRequest AS NMR
	WHERE NMR.TrackingNum = @TrackingNum AND NMR.Processed = 999 AND NMR.Citizenship = 'NR'

--IF @@ROWCOUNT = 0

OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count

      	IF @count = 1
	BEGIN
		Set @docindex = @docindex + 1
		SET @newdocsub = 'Certificate of Foreign Status (Tax Withholding) (W8BEN)' + @docsubname
		INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END

      	FETCH NEXT FROM curs INTO @docsubname

	IF @docsubname != NULL
	BEGIN
		SET @newdocsub = @newdocsub + ', ' + @docsubname
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex AND TrackingNum = @TrackingNum
	END
   END

CLOSE curs
DEALLOCATE curs

Select *  FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Delete FROM NewMemberDoc WHERE TrackingNum = @TrackingNum

--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_W8BEN_Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [IMS].[spSafe_D_W8BEN_Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

-- STATIC DOCUMENT
SELECT @DocIndex As DocIndex
FROM NewMemberRequest As NMR
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
WHERE NMR.TrackingNum = @TrackingNum


Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_WelcomeLetterEnable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO


CREATE PROCEDURE [IMS].[spSafe_D_WelcomeLetterEnable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL  AS

SELECT 1 AS DocIndex, 'Welcome Letter' AS DocSubname
FROM NewMemberRequest
WHERE TrackingNum = @TrackingNum AND AccountType <> 'LS' AND 1 = 0

RETURN 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_D_WelcomeLetterFields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO


CREATE PROCEDURE [IMS].[spSafe_D_WelcomeLetterFields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS 
SELECT @DocIndex AS DocIndex, @TrackingNum AS TrackingNum
	, DATENAME(MM, GETDATE()) + RIGHT(CONVERT(VARCHAR(12), GETDATE(), 107), 9) AS TodayDate
	, IMS.fnSafe_TitleCase(LTRIM(CASE WHEN RTRIM(RTRIM(NMR.FName) + ' ' + RTRIM(NMR.LName)) = '' THEN
		CASE WHEN CHARINDEX('/', NMR.OrganizationName) > 0 THEN
			RTRIM(RIGHT(RTRIM(NMR.OrganizationName), LEN(RTRIM(NMR.OrganizationName))-CHARINDEX('/', NMR.OrganizationName)) + ' ' + LEFT(RTRIM(NMR.OrganizationName), CHARINDEX('/', NMR.OrganizationName)-1))
		ELSE
			RTRIM(NMR.OrganizationName)
		END
	  ELSE
		RTRIM(RTRIM(NMR.FName) + CASE ISNULL(NMR.MInitial, '') WHEN '' THEN '' ELSE ' ' + RTRIM(NMR.MInitial) END + ' ' + RTRIM(NMR.LName))
	  END)) AS FullName
--	, AS Address
--	, AS CityStateZip
	, REPLACE(RTRIM(IMS.fnSafe_TitleCase(CASE NMR.AccountClass
		WHEN 'O' THEN RTRIM(RTRIM(Work.Address1) + CASE ISNULL(Work.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Work.Address2) END + CASE ISNULL(Work.Address3, '') WHEN '' THEN ' ' ELSE ', ' + RTRIM(Work.Address3) END)
		ELSE RTRIM(RTRIM(Home.Address1) + CASE ISNULL(Home.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Home.Address2) END + CASE ISNULL(Home.Address3, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Home.Address3) END)
	  END)), 'Po Box', 'PO Box') AS Address
	, CASE NMR.AccountClass
		WHEN 'O' THEN RTRIM(IMS.fnSafe_TitleCase(Work.City)) + ', ' + Work.State + ' ' + CASE LEN(Work.Zip) WHEN 9 THEN LEFT(Work.Zip, 5) + '-' + Right(Work.Zip, 4) ELSE Work.Zip END
		ELSE RTRIM(IMS.fnSafe_TitleCase(Home.City)) + ', ' + Home.State + ' ' + CASE LEN(Home.Zip) WHEN 9 THEN LEFT(Home.Zip, 5) + '-' + Right(Home.Zip, 4) ELSE Home.Zip END
	  END AS CityStateZip
	, RTRIM(IMS.fnSafe_TitleCase('Dear ' + LTRIM(CASE WHEN NMR.AccountClass = 'P'
		THEN RTRIM(RTRIM(NMR.FName) + RTRIM(' ' + NMR.MInitial) + ' ' + RTRIM(NMR.LName))
		ELSE 
			CASE WHEN RTRIM(RTRIM(NMR.FName) + ' ' + RTRIM(NMR.LName)) = '' THEN
				CASE WHEN CHARINDEX('/', NMR.OrganizationName) > 0 THEN
					RTRIM(RIGHT(RTRIM(NMR.OrganizationName), LEN(RTRIM(NMR.OrganizationName))-CHARINDEX('/', NMR.OrganizationName)) + ' ' + LEFT(RTRIM(NMR.OrganizationName), CHARINDEX('/', NMR.OrganizationName)-1))
				ELSE
					RTRIM(NMR.OrganizationName)
				END
			ELSE
				RTRIM(RTRIM(NMR.FName) + CASE ISNULL(NMR.MInitial, '') WHEN '' THEN '' ELSE ' ' + RTRIM(NMR.MInitial) END + ' ' + RTRIM(NMR.LName))
			END
		END))) + ':' AS DearName
	, CASE WHEN NMR.Created = 'Y' OR NMR.Created = 'N'	THEN 'Congratulations  on  your  decision  to  become  a  SAFE  Credit  Union  member!   With  high-rate  savings'
								ELSE 'Thank  you  for  growing  your  relationship  with  SAFE  Credit  Union!   By  taking  advantage  of  SAFE''s'
		END AS Line001
	, CASE WHEN NMR.Created = 'Y' OR NMR.Created = 'N'	THEN 'products,   low-rate  loans,   an  expansive  network  of  ATMs,   and  powerful,   free  online  account'
								ELSE 'high-yield  savings  products,  low-rate  loans,  expansive  network  of  ATMs,  and  innovative  online'
		END AS Line002
	, CASE WHEN NMR.Created = 'Y' OR NMR.Created = 'N'	THEN 'management tools, SAFE Credit Union helps you keep more of what you earn.'
								ELSE 'account management tools, you can keep more of what you earn.'
		END AS Line003
	, CASE WHEN NMR.Created = 'Y' OR NMR.Created = 'N'	THEN ''
								ELSE ''
		END AS Line004
	, CASE WHEN NMR.Created = 'Y' OR NMR.Created = 'N'	THEN 'A summary of the products and services you selected today follows below, as well as a summary of'
								ELSE 'A summary  of the products and  services you  added today follows below,  as well as a  summary of'
		END AS Line005
	, CASE WHEN NMR.Created = 'Y' OR NMR.Created = 'N'	THEN 'the products and services you''ve indicated that you would like to learn more about.  I have included'
								ELSE 'the products and services you''ve indicated that you would like to learn more about.  I have included'
		END AS Line006
	, CASE WHEN NMR.Created = 'Y' OR NMR.Created = 'N'	THEN 'information about these products in your membership packet.'
								ELSE 'information about these products for your review.'
		END AS Line007
	, CASE WHEN NMR.Created = 'Y' OR NMR.Created = 'N'	THEN ''
								ELSE ''
		END AS Line008
	, CASE WHEN NMR.Created = 'Y' OR NMR.Created = 'N'	THEN 'Our  mission  is  to  provide  exceptional  experiences,  best  solutions,  and  professional  experts  to'
								ELSE 'Our  mission  is  to  provide  exceptional  experiences,  best  solutions,  and  professional  experts  to'
		END AS Line009
	, CASE WHEN NMR.Created = 'Y' OR NMR.Created = 'N'	THEN 'help our members improve their lifelong financial well-being.  If you have questions about your new'
								ELSE 'help our members improve their lifelong financial well-being.  If you have questions about your new'
		END AS Line010
	, CASE WHEN NMR.Created = 'Y' OR NMR.Created = 'N'	THEN 'SAFE membership, or would like to learn more about the resources available to you, please contact a'
								ELSE 'products,  or  would  like  to  learn  more  about  the  resources  available  to  you,  please  contact  a'
		END AS Line011
	, CASE WHEN NMR.Created = 'Y' OR NMR.Created = 'N'	THEN 'Call Center Representative at (916) 979-7233 or (800) SEE-SAFE, or visit us online at safecu.org.'
								ELSE 'Call Center Representative at (916) 979-7233 or (800) SEE-SAFE, or visit us online at safecu.org.'
		END AS Line012
	, CASE WHEN NMR.Created = 'Y' OR NMR.Created = 'N'	THEN ''
								ELSE ''
		END AS Line013
	, CASE WHEN NMR.Created = 'Y' OR NMR.Created = 'N'	THEN 'Thank you for choosing SAFE Credit Union to help you keep more of what you earn.'
								ELSE 'Thank you for choosing SAFE Credit Union to help you keep more of what you earn.'
		END AS Line014
	, CASE WHEN NMR.Created = 'Y' OR NMR.Created = 'N'	THEN ''
								ELSE ''
		END AS Line015
	, 'Sincerely,' AS Line016
	, RTRIM(Staff.CSFrom) AS Line020
	, RTRIM(Staff.CSCenter) AS Line021
	, RTRIM(Staff.CSPhone) AS Line022
	, RTRIM(Staff.CSEmail) AS Line023
	, 'SAFE Credit Union' AS Line024
	, 'Enclosures' AS Enclosures
	, CASE WHEN ISNULL(HAVE001.ProductName, '') != '' THEN
		'Today, you received:'
		+ CASE WHEN ISNULL(HAVE001.ProductName, '') != '' THEN CHAR(13) + CHAR(10) + '  ' + CHAR(149) + ' '+ RTRIM(REPLACE(HAVE001.ProductName, '&reg;', '®')) ELSE '' END
		+ CASE WHEN ISNULL(HAVE002.ProductName, '') != '' THEN CHAR(13) + CHAR(10) + '  ' + CHAR(149) + ' '+ RTRIM(REPLACE(HAVE002.ProductName, '&reg;', '®')) ELSE '' END
		+ CASE WHEN ISNULL(HAVE003.ProductName, '') != '' THEN CHAR(13) + CHAR(10) + '  ' + CHAR(149) + ' '+ RTRIM(REPLACE(HAVE003.ProductName, '&reg;', '®')) ELSE '' END
		+ CASE WHEN ISNULL(HAVE004.ProductName, '') != '' THEN CHAR(13) + CHAR(10) + '  ' + CHAR(149) + ' '+ RTRIM(REPLACE(HAVE004.ProductName, '&reg;', '®')) ELSE '' END
		+ CASE WHEN ISNULL(HAVE005.ProductName, '') != '' THEN CHAR(13) + CHAR(10) + '  ' + CHAR(149) + ' '+ RTRIM(REPLACE(HAVE005.ProductName, '&reg;', '®')) ELSE '' END
		+ CASE WHEN ISNULL(HAVE006.ProductName, '') != '' THEN CHAR(13) + CHAR(10) + '  ' + CHAR(149) + ' '+ RTRIM(REPLACE(HAVE006.ProductName, '&reg;', '®')) ELSE '' END
		+ CASE WHEN ISNULL(HAVE007.ProductName, '') != '' THEN CHAR(13) + CHAR(10) + '  ' + CHAR(149) + ' '+ RTRIM(REPLACE(HAVE007.ProductName, '&reg;', '®')) ELSE '' END
		+ CASE WHEN ISNULL(HAVE008.ProductName, '') != '' THEN CHAR(13) + CHAR(10) + '  ' + CHAR(149) + ' '+ RTRIM(REPLACE(HAVE008.ProductName, '&reg;', '®')) ELSE '' END
		+ CASE WHEN ISNULL(HAVE009.ProductName, '') != '' THEN CHAR(13) + CHAR(10) + '  ' + CHAR(149) + ' '+ RTRIM(REPLACE(HAVE009.ProductName, '&reg;', '®')) ELSE '' END
		+ CASE WHEN ISNULL(HAVE010.ProductName, '') != '' THEN CHAR(13) + CHAR(10) + '  ' + CHAR(149) + ' '+ RTRIM(REPLACE(HAVE010.ProductName, '&reg;', '®')) ELSE '' END
		+ CASE WHEN ISNULL(HAVE011.ProductName, '') != '' THEN CHAR(13) + CHAR(10) + '  ' + CHAR(149) + ' '+ RTRIM(REPLACE(HAVE011.ProductName, '&reg;', '®')) ELSE '' END
		+ CASE WHEN ISNULL(HAVE012.ProductName, '') != '' THEN CHAR(13) + CHAR(10) + '  ' + CHAR(149) + ' '+ RTRIM(REPLACE(HAVE012.ProductName, '&reg;', '®')) ELSE '' END
		+ CASE WHEN ISNULL(HAVE013.ProductName, '') != '' THEN CHAR(13) + CHAR(10) + '  ' + CHAR(149) + ' '+ RTRIM(REPLACE(HAVE013.ProductName, '&reg;', '®')) ELSE '' END
		+ CASE WHEN ISNULL(HAVE014.ProductName, '') != '' THEN CHAR(13) + CHAR(10) + '  ' + CHAR(149) + ' '+ RTRIM(REPLACE(HAVE014.ProductName, '&reg;', '®')) ELSE '' END
		+ CASE WHEN ISNULL(HAVE015.ProductName, '') != '' THEN CHAR(13) + CHAR(10) + '  ' + CHAR(149) + ' '+ RTRIM(REPLACE(HAVE015.ProductName, '&reg;', '®')) ELSE '' END
	  ELSE
		''
	  END AS HAVE001
	, CASE WHEN ISNULL(INTEREST001.ProductName, '') != '' THEN
		'You would like to learn more about:'
		+ CASE WHEN ISNULL(INTEREST001.ProductName, '') != '' THEN CHAR(13) + CHAR(10) + '  ' + CHAR(149) + ' '+ RTRIM(REPLACE(INTEREST001.ProductName, '&reg;', '®')) ELSE '' END
		+ CASE WHEN ISNULL(INTEREST002.ProductName, '') != '' THEN CHAR(13) + CHAR(10) + '  ' + CHAR(149) + ' '+ RTRIM(REPLACE(INTEREST002.ProductName, '&reg;', '®')) ELSE '' END
		+ CASE WHEN ISNULL(INTEREST003.ProductName, '') != '' THEN CHAR(13) + CHAR(10) + '  ' + CHAR(149) + ' '+ RTRIM(REPLACE(INTEREST003.ProductName, '&reg;', '®')) ELSE '' END
		+ CASE WHEN ISNULL(INTEREST004.ProductName, '') != '' THEN CHAR(13) + CHAR(10) + '  ' + CHAR(149) + ' '+ RTRIM(REPLACE(INTEREST004.ProductName, '&reg;', '®')) ELSE '' END
		+ CASE WHEN ISNULL(INTEREST005.ProductName, '') != '' THEN CHAR(13) + CHAR(10) + '  ' + CHAR(149) + ' '+ RTRIM(REPLACE(INTEREST005.ProductName, '&reg;', '®')) ELSE '' END
		+ CASE WHEN ISNULL(INTEREST006.ProductName, '') != '' THEN CHAR(13) + CHAR(10) + '  ' + CHAR(149) + ' '+ RTRIM(REPLACE(INTEREST006.ProductName, '&reg;', '®')) ELSE '' END
		+ CASE WHEN ISNULL(INTEREST007.ProductName, '') != '' THEN CHAR(13) + CHAR(10) + '  ' + CHAR(149) + ' '+ RTRIM(REPLACE(INTEREST007.ProductName, '&reg;', '®')) ELSE '' END
		+ CASE WHEN ISNULL(INTEREST008.ProductName, '') != '' THEN CHAR(13) + CHAR(10) + '  ' + CHAR(149) + ' '+ RTRIM(REPLACE(INTEREST008.ProductName, '&reg;', '®')) ELSE '' END
		+ CASE WHEN ISNULL(INTEREST009.ProductName, '') != '' THEN CHAR(13) + CHAR(10) + '  ' + CHAR(149) + ' '+ RTRIM(REPLACE(INTEREST009.ProductName, '&reg;', '®')) ELSE '' END
		+ CASE WHEN ISNULL(INTEREST010.ProductName, '') != '' THEN CHAR(13) + CHAR(10) + '  ' + CHAR(149) + ' '+ RTRIM(REPLACE(INTEREST010.ProductName, '&reg;', '®')) ELSE '' END
		+ CASE WHEN ISNULL(INTEREST011.ProductName, '') != '' THEN CHAR(13) + CHAR(10) + '  ' + CHAR(149) + ' '+ RTRIM(REPLACE(INTEREST011.ProductName, '&reg;', '®')) ELSE '' END
		+ CASE WHEN ISNULL(INTEREST012.ProductName, '') != '' THEN CHAR(13) + CHAR(10) + '  ' + CHAR(149) + ' '+ RTRIM(REPLACE(INTEREST012.ProductName, '&reg;', '®')) ELSE '' END
		+ CASE WHEN ISNULL(INTEREST013.ProductName, '') != '' THEN CHAR(13) + CHAR(10) + '  ' + CHAR(149) + ' '+ RTRIM(REPLACE(INTEREST013.ProductName, '&reg;', '®')) ELSE '' END
		+ CASE WHEN ISNULL(INTEREST014.ProductName, '') != '' THEN CHAR(13) + CHAR(10) + '  ' + CHAR(149) + ' '+ RTRIM(REPLACE(INTEREST014.ProductName, '&reg;', '®')) ELSE '' END
		+ CASE WHEN ISNULL(INTEREST015.ProductName, '') != '' THEN CHAR(13) + CHAR(10) + '  ' + CHAR(149) + ' '+ RTRIM(REPLACE(INTEREST015.ProductName, '&reg;', '®')) ELSE '' END
	  ELSE
		''
	  END AS LEARN001
	, CASE WHEN NMR.Created = 'Y' OR NMR.Created = 'N'	THEN 'S-303'
								ELSE 'S-304'
		END AS FormNumber
FROM NewMemberRequest AS NMR
	LEFT OUTER JOIN NewMemberHome AS Home ON NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork AS Work ON NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN NewMemberStaffInfo AS Staff ON NMR.TrackingNum = Staff.TrackingNum
	LEFT OUTER JOIN fnSafe_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', '', '', 'YES') AS HAVE001 ON NMR.TrackingNum = HAVE001.TrackingNum AND HAVE001.CartSequence = 1
	LEFT OUTER JOIN fnSafe_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', '', '', 'YES') AS HAVE002 ON NMR.TrackingNum = HAVE002.TrackingNum AND HAVE002.CartSequence = 2
	LEFT OUTER JOIN fnSafe_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', '', '', 'YES') AS HAVE003 ON NMR.TrackingNum = HAVE003.TrackingNum AND HAVE003.CartSequence = 3
	LEFT OUTER JOIN fnSafe_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', '', '', 'YES') AS HAVE004 ON NMR.TrackingNum = HAVE004.TrackingNum AND HAVE004.CartSequence = 4
	LEFT OUTER JOIN fnSafe_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', '', '', 'YES') AS HAVE005 ON NMR.TrackingNum = HAVE005.TrackingNum AND HAVE005.CartSequence = 5
	LEFT OUTER JOIN fnSafe_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', '', '', 'YES') AS HAVE006 ON NMR.TrackingNum = HAVE006.TrackingNum AND HAVE006.CartSequence = 6
	LEFT OUTER JOIN fnSafe_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', '', '', 'YES') AS HAVE007 ON NMR.TrackingNum = HAVE007.TrackingNum AND HAVE007.CartSequence = 7
	LEFT OUTER JOIN fnSafe_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', '', '', 'YES') AS HAVE008 ON NMR.TrackingNum = HAVE008.TrackingNum AND HAVE008.CartSequence = 8
	LEFT OUTER JOIN fnSafe_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', '', '', 'YES') AS HAVE009 ON NMR.TrackingNum = HAVE009.TrackingNum AND HAVE009.CartSequence = 9
	LEFT OUTER JOIN fnSafe_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', '', '', 'YES') AS HAVE010 ON NMR.TrackingNum = HAVE010.TrackingNum AND HAVE010.CartSequence = 10
	LEFT OUTER JOIN fnSafe_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', '', '', 'YES') AS HAVE011 ON NMR.TrackingNum = HAVE011.TrackingNum AND HAVE011.CartSequence = 11
	LEFT OUTER JOIN fnSafe_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', '', '', 'YES') AS HAVE012 ON NMR.TrackingNum = HAVE012.TrackingNum AND HAVE012.CartSequence = 12
	LEFT OUTER JOIN fnSafe_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', '', '', 'YES') AS HAVE013 ON NMR.TrackingNum = HAVE013.TrackingNum AND HAVE013.CartSequence = 13
	LEFT OUTER JOIN fnSafe_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', '', '', 'YES') AS HAVE014 ON NMR.TrackingNum = HAVE014.TrackingNum AND HAVE014.CartSequence = 14
	LEFT OUTER JOIN fnSafe_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', '', '', 'YES') AS HAVE015 ON NMR.TrackingNum = HAVE015.TrackingNum AND HAVE015.CartSequence = 15
	LEFT OUTER JOIN fnSafe_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', 'L', '', 'MAYBE') AS INTEREST001 ON NMR.TrackingNum = INTEREST001.TrackingNum AND INTEREST001.CartSequence = 1
	LEFT OUTER JOIN fnSafe_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', 'L', '', 'MAYBE') AS INTEREST002 ON NMR.TrackingNum = INTEREST002.TrackingNum AND INTEREST002.CartSequence = 2
	LEFT OUTER JOIN fnSafe_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', 'L', '', 'MAYBE') AS INTEREST003 ON NMR.TrackingNum = INTEREST003.TrackingNum AND INTEREST003.CartSequence = 3
	LEFT OUTER JOIN fnSafe_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', 'L', '', 'MAYBE') AS INTEREST004 ON NMR.TrackingNum = INTEREST004.TrackingNum AND INTEREST004.CartSequence = 4
	LEFT OUTER JOIN fnSafe_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', 'L', '', 'MAYBE') AS INTEREST005 ON NMR.TrackingNum = INTEREST005.TrackingNum AND INTEREST005.CartSequence = 5
	LEFT OUTER JOIN fnSafe_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', 'L', '', 'MAYBE') AS INTEREST006 ON NMR.TrackingNum = INTEREST006.TrackingNum AND INTEREST006.CartSequence = 6
	LEFT OUTER JOIN fnSafe_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', 'L', '', 'MAYBE') AS INTEREST007 ON NMR.TrackingNum = INTEREST007.TrackingNum AND INTEREST007.CartSequence = 7
	LEFT OUTER JOIN fnSafe_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', 'L', '', 'MAYBE') AS INTEREST008 ON NMR.TrackingNum = INTEREST008.TrackingNum AND INTEREST008.CartSequence = 8
	LEFT OUTER JOIN fnSafe_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', 'L', '', 'MAYBE') AS INTEREST009 ON NMR.TrackingNum = INTEREST009.TrackingNum AND INTEREST009.CartSequence = 9
	LEFT OUTER JOIN fnSafe_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', 'L', '', 'MAYBE') AS INTEREST010 ON NMR.TrackingNum = INTEREST010.TrackingNum AND INTEREST010.CartSequence = 10
	LEFT OUTER JOIN fnSafe_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', 'L', '', 'MAYBE') AS INTEREST011 ON NMR.TrackingNum = INTEREST011.TrackingNum AND INTEREST011.CartSequence = 11
	LEFT OUTER JOIN fnSafe_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', 'L', '', 'MAYBE') AS INTEREST012 ON NMR.TrackingNum = INTEREST012.TrackingNum AND INTEREST012.CartSequence = 12
	LEFT OUTER JOIN fnSafe_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', 'L', '', 'MAYBE') AS INTEREST013 ON NMR.TrackingNum = INTEREST013.TrackingNum AND INTEREST013.CartSequence = 13
	LEFT OUTER JOIN fnSafe_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', 'L', '', 'MAYBE') AS INTEREST014 ON NMR.TrackingNum = INTEREST014.TrackingNum AND INTEREST014.CartSequence = 14
	LEFT OUTER JOIN fnSafe_GetCartItems(@TrackingNum, 'F', 'I', 'O', 'P', 'S', 'L', '', 'MAYBE') AS INTEREST015 ON NMR.TrackingNum = INTEREST015.TrackingNum AND INTEREST015.CartSequence = 15
WHERE NMR.TrackingNum = @TrackingNum AND NMR.AccountType <> 'LS'

RETURN 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_DG1Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [IMS].[spSafe_DG1Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_DG1Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spSafe_DG1Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

Select 'Applications' AS GroupName From NewMemberRequest where trackingnum = @TrackingNum
GO
/****** Object:  StoredProcedure [IMS].[spSafe_DG2Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spSafe_DG2Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_DG2Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spSafe_DG2Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

Select 'Forms' AS GroupName From NewMemberRequest where trackingnum = @TrackingNum
GO
/****** Object:  StoredProcedure [IMS].[spSafe_DG3Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spSafe_DG3Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_DG3Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spSafe_DG3Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

Select 'Disclosures' AS GroupName From NewMemberRequest where trackingnum = @TrackingNum
GO
/****** Object:  StoredProcedure [IMS].[spSafe_DG4Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spSafe_DG4Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_DG4Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spSafe_DG4Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

Select 'Receipts' AS GroupName From NewMemberRequest where trackingnum = @TrackingNum
GO
/****** Object:  StoredProcedure [IMS].[spSafe_DP1Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [IMS].[spSafe_DP1Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSafe_DP1Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spSafe_DP1Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

SELECT 'Tracking #' + RTRIM(CAST(NMR.TrackingNum AS VARCHAR(20))) AS TrackingNumber
	, AltAddress.Address1 AS MailingAddress
	, NMR.CurrBranch As Branch
	, Branches.Description AS BranchName
	, CONVERT(char(10), GetDate(), 101) As TodayDate
	, CONVERT(char(10), GetDate(), 101) As ApplyDate
	, DATENAME(MM, GetDate()) + RIGHT(CONVERT(char(12), GetDate(), 107), 9) As TodayDateFull
	, CONVERT(char(10), NMR.CreatedOn, 101) As CreatedOn
	, NMR.Account As Account
--	, CONVERT(char(2), Home.ResidenceYears, 101) + ' yrs  ' + CONVERT(char(2), Home.ResidenceMonths, 101) + ' mos' AS HowLong
	, NMR.FName, NMR.LName, NMR.MInitial
	, CASE NMR.AccountClass WHEN 'P' THEN UPPER(RTRIM(NMR.LName) + ', ' + RTRIM(RTRIM(NMR.FName) + ' ' + RTRIM(NMR.MInitial))) ELSE RTRIM(NMR.OrganizationName) END AS RevFullName
	, CASE NMR.AccountClass WHEN 'P' THEN UPPER(RTRIM(RTRIM(NMR.FName) + CASE ISNULL(NMR.MInitial, '') WHEN '' THEN '' ELSE ' ' + RTRIM(NMR.MInitial) END + ' ' + RTRIM(NMR.LName) + ' ' + NMR.MECHTag)) ELSE UPPER(RTRIM(NMR.OrganizationName)) END AS FullName
	, CASE NMR.AccountClass WHEN 'P' THEN 'Dear ' + RTRIM(RTRIM(NMR.FName) + CASE ISNULL(NMR.MInitial, '') WHEN '' THEN '' ELSE ' ' + RTRIM(NMR.MInitial) END + ' ' + RTRIM(NMR.LName) + ' ' + NMR.MECHTag) + ':' ELSE 'Dear ' + RTRIM(NMR.OrganizationName) + ':' END AS DearName
	, Home.Areacode + '-' + LEFT(Home.Phone, 3) + '-' + RIGHT(RTRIM(Home.Phone), 4) AS HPhoneFull
	, Home.CellPhoneAC + '-' + LEFT(Home.CellPhone, 3) + '-' + RIGHT(RTRIM(Home.CellPhone), 4) AS CPhoneFull
	, CASE NMR.UseTodayForDOB WHEN 'Y' THEN CONVERT(char(10), NMR.CreatedOn, 101) ELSE CONVERT(char(10), NMR.DOB, 101) END AS DOB
	, CASE NMR.AccountClass WHEN 'P' THEN Left(NMR.SSN, 3) + '-' + LEFT(RIGHT(NMR.SSN, 6), 2) + '-' + RIGHT(NMR.SSN, 4) ELSE LEFT(NMR.SSN, 2) + '-' + RIGHT(NMR.SSN, 7) END AS SSN
	, RTRIM(NMR.DriversLicenseNum) + '/' + NMR.DriversLicenseState AS DL
	, CASE NMR.IDType WHEN 'D' THEN 'Drivers License' ELSE NMR.IDSource END AS IDType
	, CASE NMR.IDType WHEN 'D' THEN NMR.DriversLicenseNum ELSE NMR.IDNumber END AS ID
	, CONVERT(char(10), NMR.IDIssueDate, 101) AS IDIssueDate
	, CONVERT(char(10), NMR.IDExpirationDate, 101) AS IDExpDate
	, NMR.DriversLicenseState AS IDState
	, NMR.MaidenName AS MaidenName
	, NMR.Password AS Password
	, NMR.CreatedBy AS Seller
	, NMR.Department AS Department
	, CASE WHEN NMR.Created = 'F' Or NMR.Created = 'H' Or NMR.Created = 'I' THEN '' ELSE 'X' END AS YesNewAccount
	, CASE WHEN NMR.Created = 'F' Or NMR.Created = 'H' Or NMR.Created = 'I' THEN 'X' END AS YesChangeAccount
--	, CASE WHEN NMR.Created = 'F' Or NMR.Created = 'H' Or NMR.Created = 'I' THEN NMR.Account END AS ChangeAccount
	, CASE NMR.AccountClass
		WHEN 'O' THEN RTRIM(RTRIM(Work.Address1) + CASE ISNULL(Work.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Work.Address2) END + CASE ISNULL(Work.Address3, '') WHEN '' THEN ' ' ELSE ', ' + RTRIM(Work.Address3) END)
		ELSE RTRIM(RTRIM(Home.Address1) + CASE ISNULL(Home.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Home.Address2) END + CASE ISNULL(Home.Address3, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Home.Address3) END)
	  END AS Address
	, CASE NMR.AccountClass
		WHEN 'O' THEN RTRIM(RTRIM(Work.Address1) + CASE ISNULL(Work.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Work.Address2) END + CASE ISNULL(Work.Address3, '') WHEN '' THEN ' ' ELSE ', ' + RTRIM(Work.Address3) END) + ', ' + RTRIM(Work.City) + ', ' + Work.State + ' ' + CASE LEN(Work.Zip) WHEN 9 THEN LEFT(Work.Zip, 5) + '-' + Right(Work.Zip, 4) ELSE Work.Zip END
		ELSE RTRIM(RTRIM(Home.Address1) + CASE ISNULL(Home.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Home.Address2) END + CASE ISNULL(Home.Address3, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Home.Address3) END) + ', ' + RTRIM(Home.City) + ', ' + Home.State + ' ' + CASE LEN(Home.Zip) WHEN 9 THEN LEFT(Home.Zip, 5) + '-' + Right(Home.Zip, 4) ELSE Home.Zip END
	  END AS FullAddress
	, CASE NMR.AccountClass
		WHEN 'O' THEN RTRIM(Work.city) + ', ' + Work.state + ' ' + CASE LEN(Work.Zip) WHEN 9 THEN LEFT(Work.zip, 5) + '-' + Right(Work.Zip, 4) ELSE Work.Zip END
		ELSE RTRIM(Home.city) + ', ' + Home.state + ' ' + CASE LEN(Home.Zip) WHEN 9 THEN LEFT(Home.zip, 5) + '-' + Right(Home.Zip, 4) ELSE Home.Zip END
	  END AS CityStateZip
	, CASE NMR.AccountClass
		WHEN 'O' THEN Work.City
		ELSE Home.City
	  END AS City
	, CASE NMR.AccountClass
		WHEN 'O' THEN Work.State
		ELSE Home.State
	  END AS State
	, CASE NMR.AccountClass
		WHEN 'O' THEN CASE LEN(Work.Zip) WHEN 9 THEN LEFT(Work.zip, 5) + '-' + Right(Work.Zip, 4) ELSE Work.Zip END
		ELSE CASE LEN(Home.Zip) WHEN 9 THEN LEFT(Home.zip, 5) + '-' + Right(Home.Zip, 4) ELSE Home.Zip END
	  END AS Zip		
	, RTRIM(NMR.Email1) AS Email
	, CASE NMR.AccountClass
		WHEN 'O' THEN Work.AreaCode
		ELSE Home.AreaCode
	  END AS AC
	, CASE NMR.AccountClass
		WHEN 'O' THEN LEFT(Work.Phone, 3) + '-' + RIGHT(RTRIM(Work.Phone), 4)
		ELSE LEFT(Home.Phone, 3) + '-' + RIGHT(RTRIM(Home.Phone), 4)
	  END AS Phone
	, CASE NMR.AccountClass WHEN 'P' THEN Work.EmployerName ELSE '' END AS WorkName
	, CASE NMR.AccountClass WHEN 'P' THEN Work.EmployerName ELSE '' END AS Employer
	, CASE NMR.AccountClass WHEN 'P' THEN RTRIM(Work.address1 + CASE Work.address2 WHEN '' THEN ''ELSE', ' END + Work.address2 + CASE Work.address3 WHEN '' THEN ''ELSE', ' END + Work.address3) ELSE '' END AS WorkAddress
	, CASE NMR.AccountClass WHEN 'P' THEN Work.City ELSE '' END AS WorkCity
	, CASE NMR.AccountClass WHEN 'P' THEN Work.State ELSE '' END AS WorkState
	, CASE NMR.AccountClass WHEN 'P' THEN CASE LEN(Work.Zip) WHEN 9 THEN LEFT(Work.zip, 5) + '-' + RIGHT(Work.Zip, 4) ELSE Work.Zip END ELSE '' END AS WorkZip
	, Work.AreaCode AS WorkAC, LEFT(Work.Phone, 3) + '-' + RIGHT(RTRIM(Work.Phone), 4)  AS WorkPhone
	, Work.AreaCode + '-' + LEFT(Work.Phone, 3) + '-' + RIGHT(RTRIM(Work.Phone), 4)  AS WPhoneFull
	, Work.JobTitle AS Position
	, Work.JobTitle AS Occupation
	, Work.ProfessionYears As WorkNumYears
	,  RTRIM(Work.EmployerName) + ' ' + RTRIM(Work.address1 + CASE Work.address2 WHEN '' THEN ''ELSE', ' END + Work.address2 + CASE Work.address3 WHEN '' THEN ''ELSE', ' END + Work.address3) + ', ' + RTRIM(Work.City) + ', ' + RTRIM(Work.State) + ' ' + CASE LEN(Work.Zip) WHEN 9 THEN LEFT(Work.zip, 5) + '-' + Right(Work.Zip, 4) ELSE Work.Zip END AS WorkNameAddress
	, Work.HireDate
	,   CASE Work.IncomeFrequency
	     	WHEN 'W'  THEN 'Week'
		WHEN 'B' THEN 'Bi-Week'
		WHEN 'M' THEN 'Month'
		WHEN 'S' THEN 'Semi-Month'
		WHEN 'Y' THEN 'Year'
	      END AS IncomeFrequency
	,   CASE Work.IncomeFrequency
	     	WHEN 'W'  THEN (Work.GrossIncome * 52)/100
		WHEN 'B' THEN (Work.GrossIncome * 26)/100
		WHEN 'M' THEN (Work.GrossIncome * 12)/100
		WHEN 'S' THEN (Work.GrossIncome * 24)/100
		WHEN 'Y' THEN (Work.GrossIncome)/100
	      END AS GrossIncome
	, Home.ResidenceYears AS NumYears
	, CASE NMR.AccountClass
		WHEN 'O' THEN 'Yes'
		ELSE CASE WHEN NMR.Citizenship = 'US' Or NMR.Citizenship = 'RA' THEN 'Yes' END
	  END AS YesNoUSCitizen
	, CASE NMR.AccountClass
		WHEN 'O' THEN 'X'
		ELSE CASE WHEN NMR.Citizenship = 'US' Or NMR.Citizenship = 'RA' THEN 'X' END
	  END AS YesUSCitizen
	, CASE NMR.AccountClass
		WHEN 'O' THEN ''
		ELSE CASE WHEN NMR.Citizenship != 'US' And NMR.Citizenship != 'RA' THEN 'X' END
	  END AS NoUSCitizen

--	, CASE WHEN NMR.Qualification3 = 'Location' THEN RTRIM(Departments.Description) END AS Eligibility
--	, CASE WHEN NMR.Qualification3 = 'Employer' THEN RTRIM(Departments.Description) END AS Employer
--	, CASE WHEN NMR.Qualification3 = 'Relative' THEN RTRIM(NMR.Qualification1) + ' / ' + RTRIM(NMR.Qualification2) END AS Relationship

	, RTRIM(NMR.LName) + '/' + RTRIM(RTRIM(NMR.FName) + ' ' + NMR.MInitial) AS SlashName
	, '(' + RTRIM(LTRIM(CAST(NMR.CurrBranch AS VARCHAR(2)))) + ' - ' + RTRIM(Branches.[Description]) + ')' AS SellerBranch
	, 'SOUTH CAROLINA FEDERAL CREDIT UNION' AS HCCUName
	, 'P.O. BOX 190012' AS HCCUAddress
	, 'NORTH CHARLESTON, SC  29419-9012' AS HCCUCityStateZip
	, '(800)845-0432' AS HCCUPhone
FROM NewMemberRequest As NMR
	--INNER JOIN udt_AccountTypes AS AType On NMR.AccountType = AType.TypeCode
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN NewMemberAddress As AltAddress On NMR.TrackingNum = AltAddress.TrackingNum
	LEFT OUTER JOIN Branches On NMR.CurrBranch = Branches.BranchCode
	LEFT OUTER JOIN Departments ON NMR.Department = Departments.Department
WHERE NMR.TrackingNum = @TrackingNum
GO
/****** Object:  StoredProcedure [IMS].[spSafe_Eligibility_Select]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_Eligibility_Select
CREATE PROCEDURE [IMS].[spSafe_Eligibility_Select]
	@ZipCode varchar(5),
	@CensusTract varchar(10)
AS

IF IsNull(@CensusTract, '') = '' AND @ZipCode <> ''
BEGIN
	SELECT Department
	FROM udt_EligibilityByZip
	WHERE ZipCode = @ZipCode
END
GO
/****** Object:  StoredProcedure [IMS].[spSafe_FedReservePendingTransaction_Select]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Jonathan Eagar
-- Create date: 8/25/2011
-- Description:	Returns all FedReserve Pending Transactions
-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_FedReservePendingTransaction_Select
-- =============================================
CREATE PROCEDURE [IMS].[spSafe_FedReservePendingTransaction_Select] 
	-- Add the parameters for the stored procedure here
	@NMRAccountNumber bigint
AS
BEGIN	
	SET @NMRAccountNumber = ISNULL(@NMRAccountNumber, 0)
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	-- Insert statements for procedure here
	
	DECLARE @TransactionSummary TABLE
	(		
		FundingBankID INT,
		TransferAmountTotal DECIMAL(18,2)		
	)
		
	IF @NMRAccountNumber = 0  
	BEGIN
	
	INSERT INTO @TransactionSummary(FundingBankID, TransferAmountTotal)	
	SELECT
		   FB.ID as FundingBankID,			  
		   SUM(FT.Amount) as TransferAmountTotal			   
	FROM IMS.NMRFundingBank FB INNER JOIN IMS.NMRFundingTransaction FT ON FB.ID = FT.FundingBankID						
	WHERE FT.DateTimeLastTransaction IS NULL AND FT.FundingType = 'B'
	GROUP BY FB.ID	
	
	SELECT  FRPT.* FROM
	( 
		(
		SELECT F.ID as FundingID,
			   F.AccountNumber as NMRAccountNumber,
			   FB.TrackingNum as NMRTrackingNumber,
			   RTRIM(NMR.LName) + ', ' + RTRIM(NMR.FName) as NMRMemberName,
			   FB.ID as FundingBankID,
			   0 as FundingTransactionID,
			   FB.RoutingNumber as FundingBankRouting,
			   FB.AccountNumberEncrypted as FundingBankAccountNumberEncrypted,
			   FB.AccountNumberLast4 as FundingBankAccountAccountLast4,
			   FB.BankName as FundingBankName,
			   FB.AccountType as FundingBankAccountType,
			   FB.Amount1 as VerificationAmount1,
			   FB.Amount2 as VerificationAmount2,
			   0 as TransferAmount,
			   0 as TransferAmountTotal,			   	
			   0 as TargetSubAccountSuffix,
			   0 as TargetSubAccountSeq,
			   FB.DateTimeCreated as DateTimeCreated
		FROM IMS.NMRFunding F INNER JOIN IMS.NMRFundingBank FB ON F.ID = FB.FundingID
								INNER JOIN IMS.NewMemberRequest NMR ON FB.TrackingNum = NMR.TrackingNum
		WHERE FB.VerificationStatus = 'P'	
		)
		UNION ALL
		(	
		SELECT F.ID as FundingID,
			   F.AccountNumber as NMRAccountNumber,
			   FB.TrackingNum as NMRTrackingNumber,			   
			   RTRIM(NMR.LName) + ', ' + RTRIM(NMR.FName) as NMRMemberName,
			   FB.ID as FundingBankID,
			   FT.ID as FundingTransactionID,
			   FB.RoutingNumber as FundingBankRouting,
			   FB.AccountNumberEncrypted as FundingBankAccountNumberEncrypted,
			   FB.AccountNumberLast4 as FundingBankAccountAccountLast4,
			   FB.BankName as FundingBankName,
			   FB.AccountType as FundingBankAccountType,
				0 as VerificationAmount1,
				0 as VerificationAmount2,
			   FT.Amount as TransferAmount,
			   TS.TransferAmountTotal as TransferAmountTotal,			
			   FT.TargetSubAccountSuffix as TargetSubAccountSuffix,
			   FT.TargetSubAccountSeq as TargetSubAccountSeq,
			   FT.DateTimeCreated as DateTimeCreated 
		FROM IMS.NMRFunding F INNER JOIN IMS.NMRFundingBank FB ON F.ID = FB.FundingID
								INNER JOIN IMS.NMRFundingTransaction FT ON FB.ID = FT.FundingBankID
									INNER JOIN IMS.NewMemberRequest NMR ON FB.TrackingNum = NMR.TrackingNum
										INNER JOIN @TransactionSummary TS ON FB.ID = TS.FundingBankID
		WHERE FT.DateTimeLastTransaction IS NULL AND FT.FundingType = 'B'
		)
	)  FRPT ORDER BY FRPT.NMRTrackingNumber, FRPT.FundingID, FRPT.FundingBankID, FRPT.FundingTransactionID	
	END	
	ELSE
	BEGIN
	
	INSERT INTO @TransactionSummary(FundingBankID, TransferAmountTotal)	
	SELECT	   		   
		   FB.ID as FundingBankID,			  
		   SUM(FT.Amount) as TransferAmountTotal			   
	FROM IMS.NMRFunding F INNER JOIN IMS.NMRFundingBank FB ON F.ID = FB.FundingID 
							INNER JOIN IMS.NMRFundingTransaction FT ON FB.ID = FT.FundingBankID						
	WHERE FT.DateTimeLastTransaction IS NULL AND 
		FT.FundingType = 'B' AND
		F.AccountNumber = @NMRAccountNumber	 
	GROUP BY FB.ID	
	  
	SELECT  FRPT.* FROM
	(   
		(
		SELECT F.ID as FundingID,
			   F.AccountNumber as NMRAccountNumber,
			   FB.TrackingNum as NMRTrackingNumber,
			   RTRIM(NMR.LName) + ', ' + RTRIM(NMR.FName) as NMRMemberName,
			   FB.ID as FundingBankID,
			   0 as FundingTransactionID,
			   FB.RoutingNumber as FundingBankRouting,
			   FB.AccountNumberEncrypted as FundingBankAccountNumberEncrypted,
			   FB.AccountNumberLast4 as FundingBankAccountAccountLast4,
			   FB.BankName as FundingBankName,
			   FB.AccountType as FundingBankAccountType,
			   FB.Amount1 as VerificationAmount1,
			   FB.Amount2 as VerificationAmount2,
			   0 as TransferAmount,
			   0 as TransferAmountTotal,
			   0 as TargetSubAccountSuffix,
			   0 as TargetSubAccountSeq,
			   FB.DateTimeCreated as DateTimeCreated
		FROM IMS.NMRFunding F INNER JOIN IMS.NMRFundingBank FB ON F.ID = FB.FundingID
								INNER JOIN IMS.NewMemberRequest NMR ON FB.TrackingNum = NMR.TrackingNum
		WHERE	FB.VerificationStatus = 'P' AND 
				F.AccountNumber = @NMRAccountNumber	
		)	
		UNION ALL
		(		
		SELECT F.ID as FundingID,
			   F.AccountNumber as NMRAccountNumber,
			   FB.TrackingNum as NMRTrackingNumber,
			   RTRIM(NMR.LName) + ', ' + RTRIM(NMR.FName) as NMRMemberName,
			   FB.ID as FundingBankID,
			   FT.ID as FundingTransactionID,
			   FB.RoutingNumber as FundingBankRouting,
			   FB.AccountNumberEncrypted as FundingBankAccountNumberEncrypted,
			   FB.AccountNumberLast4 as FundingBankAccountAccountLast4,
			   FB.BankName as FundingBankName,
			   FB.AccountType as FundingBankAccountType,
				0 as VerificationAmount1,
				0 as VerificationAmount2,
			   FT.Amount as TransferAmount,
			   TS.TransferAmountTotal as TransferAmountTotal,
			   FT.TargetSubAccountSuffix as TargetSubAccountSuffix,
			   FT.TargetSubAccountSeq as TargetSubAccountSeq,
			   FT.DateTimeCreated as DateTimeCreated
		FROM IMS.NMRFunding F 
				INNER JOIN IMS.NMRFundingBank FB ON F.ID = FB.FundingID
					INNER JOIN IMS.NMRFundingTransaction FT ON FB.ID = FT.FundingBankID
						INNER JOIN IMS.NewMemberRequest NMR ON FB.TrackingNum = NMR.TrackingNum
							INNER JOIN @TransactionSummary TS ON FB.ID = TS.FundingBankID
		WHERE	FT.DateTimeLastTransaction IS NULL AND 
				FT.FundingType = 'B' AND 
				F.AccountNumber = @NMRAccountNumber
		)
	)  FRPT	ORDER BY FRPT.NMRTrackingNumber, FRPT.FundingID, FRPT.FundingBankID, FRPT.FundingTransactionID
	END		
END

GO
/****** Object:  StoredProcedure [IMS].[spSafe_ILAApplicationSearch_Select]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_ILAApplicationSearch_Select
CREATE Procedure [IMS].[spSafe_ILAApplicationSearch_Select]
	@TrackingNum varchar(9),
	@SSN varchar(9),
	@Account varchar(9),
	@AppNumber varchar(9)
AS

DECLARE @SQL varchar(1000)
SET @SQL = 'SELECT AI.*, A.UserSessionXML FROM ILA_ApplicationInfo AI INNER JOIN ILA_Application A ON A.TrackingNum = AI.TrackingNum WHERE 1=1'
IF @TrackingNum <> '*'
BEGIN
	SET @SQL = @SQL + ' AND AI.TrackingNum = ''' + @TrackingNum + ''''
END
IF @SSN <> '*'
BEGIN
	SET @SQL = @SQL + ' AND AI.PrimarySSN = ''' + @SSN + ''''
END
IF @Account <> '*'
BEGIN
	SET @SQL = @SQL + ' AND AI.Account = ''' + @Account + ''''
END
IF @AppNumber <> '*'
BEGIN
	SET @SQL = @SQL + ' AND AI.AppNumber = ''' + @AppNumber + ''''
END

EXEC(@SQL)
GO
/****** Object:  StoredProcedure [IMS].[spSafe_OAOReport_ApplicationStatusReport]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_OAOReport_ApplicationStatusReport
CREATE Procedure [IMS].[spSafe_OAOReport_ApplicationStatusReport]
	@StartDate datetime,
	@StopDate datetime
AS

SELECT
	NMR.TrackingNum
	, UPPER(RTRIM(LEFT(NMR.FName, 1))) + '&nbsp;' + UPPER(RTRIM(NMR.LName)) AS MemberName
	, NMR.ApplyDate AS [Date_Time]
	, NMR.CurrBranch AS Branch
	, CASE
		WHEN NMR.FundingComplete = 'Y' AND ISNULL(NMRFT.DateTimeLastTransaction, '') <> '' THEN '<div style="padding:0; margin:-14px 4px; line-height:1.0;">Funded' + '<br />' + '<span style="font-size:9px;">(' + CONVERT(CHAR(10), NMRFT.DateTimeLastTransaction, 101) + ')</span></div>'
		WHEN NMR.FundingComplete = 'Y' AND ISNULL(NMRFT.DateTimeLastTransaction, '') = '' THEN 'Completed'
		WHEN NMR.Processed = '1' THEN 'In-Process'
		WHEN NMR.Processed = '999' THEN 'Created'
		ELSE 'Denied'
		END AS Status
	, CASE
		WHEN (SELECT COUNT(*) FROM NMRFundingBank AS NMRFB WHERE NMRFB.TrackingNum = NMR.TrackingNum AND NMRFB.VerificationStatus = 'D') > 0 THEN '<div style="padding:0; margin:-14px 4px; line-height:1.0;">ACH' + '<br />' + '<span style="font-size:9px;">(Declined)</span></div>'
		WHEN (SELECT COUNT(*) FROM NMRFundingBank AS NMRFB WHERE NMRFB.TrackingNum = NMR.TrackingNum AND NMRFB.VerificationStatus = 'E') > 0 THEN '<div style="padding:0; margin:-14px 4px; line-height:1.0;">ACH' + '<br />' + '<span style="font-size:9px;">(Error)</span></div>'
		WHEN (SELECT COUNT(*) FROM NMRFundingBank AS NMRFB WHERE NMRFB.TrackingNum = NMR.TrackingNum AND NMRFB.VerificationStatus = 'P') > 0 THEN '<div style="padding:0; margin:-14px 4px; line-height:1.0;">ACH' + '<br />' + '<span style="font-size:9px;">(Pending Export)</span></div>'
		WHEN (SELECT COUNT(*) FROM NMRFundingBank AS NMRFB WHERE NMRFB.TrackingNum = NMR.TrackingNum AND NMRFB.VerificationStatus = 'R') > 0 THEN '<div style="padding:0; margin:-14px 4px; line-height:1.0;">ACH' + '<br />' + '<span style="font-size:9px;">(MA Required)</span></div>'
		WHEN (SELECT COUNT(*) FROM NMRFundingBank AS NMRFB WHERE NMRFB.TrackingNum = NMR.TrackingNum AND NMRFB.VerificationStatus = 'V') > 0 THEN '<div style="padding:0; margin:-14px 4px; line-height:1.0;">ACH' + '<br />' + '<span style="font-size:9px;">(Verified)</span></div>'
		WHEN (SELECT COUNT(*) FROM NMRFundingBank AS NMRFB WHERE NMRFB.TrackingNum = NMR.TrackingNum AND NMRFB.VerificationStatus = 'W') > 0 THEN '<div style="padding:0; margin:-14px 4px; line-height:1.0;">ACH' + '<br />' + '<span style="font-size:9px;">(Pending)</span></div>'
		WHEN (SELECT COUNT(*) FROM NMRFundingBank AS NMRFB WHERE NMRFB.TrackingNum = NMR.TrackingNum AND NMRFB.VerificationStatus = 'X') > 0 THEN '<div style="padding:0; margin:-14px 4px; line-height:1.0;">ACH' + '<br />' + '<span style="font-size:9px;">(Cancelled)</span></div>'
		WHEN (SELECT COUNT(*) FROM NMRFundingCard AS NMRFC WHERE NMRFC.TrackingNum = NMR.TrackingNum) > 0 THEN 'Credit&nbsp;Card'
		WHEN (SELECT COUNT(*) FROM NMRFundingTransaction AS NMRFT WHERE NMRFT.TrackingNum = NMR.TrackingNum AND NMRFT.SourceSubAccountSeq <> '') > 0 THEN 'Transfer'
--		WHEN (SELECT FundingType FROM NMRFundingTransaction AS NMRFT WHERE NMRFT.TrackingNum = NMR.TrackingNum) = NULL THEN 'Skipped'
		WHEN NMR.FundingComplete = 'Y' AND ISNULL(NMRFT.DateTimeLastTransaction, '') = '' THEN 'Skipped'
		ELSE '&nbsp;'
		END AS PaymentMethod
	, (SELECT SUM(Amount) FROM NMRFundingTransaction AS NMRFT WHERE NMRFT.TrackingNum = NMR.TrackingNum GROUP BY NMRFT.TrackingNum) AS InitialAmountFunded
	, NMR.Account AS AccountNumber
FROM IMS.NewMemberRequest NMR
LEFT JOIN NMRFundingBank NMRFB ON NMRFB.TrackingNum = NMR.TrackingNum
LEFT JOIN NMRFundingCard NMRFC ON NMRFC.TrackingNum = NMR.TrackingNum
LEFT JOIN NMRFundingTransaction NMRFT ON NMRFT.TrackingNum = NMR.TrackingNum AND NMRFT.TargetSubAccountSeq = 1
WHERE
	NMR.Processed > 0
	AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> ''
	AND (NMR.ApplyDate >= @StartDate AND NMR.ApplyDate <= @StopDate)
ORDER BY
	[Date_Time] DESC
GO
/****** Object:  StoredProcedure [IMS].[spSafe_OAOReport_FundingDetailReport]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_OAOReport_FundingDetailReport
CREATE Procedure [IMS].[spSafe_OAOReport_FundingDetailReport]
	@StartDate datetime,
	@StopDate datetime
AS

SELECT Bank, Card, Existing, Skipped FROM
(
	(SELECT COUNT(DISTINCT NMRFT.TrackingNum) AS Bank
	FROM IMS.NMRFundingTransaction NMRFT
	LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	INNER JOIN IMS.NMRFundingBank NMRFB ON NMRFB.ID = NMRFT.FundingBankID
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND NMRFT.FundingBankID <> '' AND NMR.Processed = 999 AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate) AND (NMRFB.VerificationStatus <> 'E') AND (NMRFB.VerificationStatus <> 'X')) a
		FULL OUTER JOIN
	(SELECT COUNT(DISTINCT NMRFT.TrackingNum) AS Card
	FROM IMS.NMRFundingTransaction NMRFT
	LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND NMRFT.FundingCardID <> '' AND NMR.Processed = 999 AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate)) b ON 1=1
		FULL OUTER JOIN
	(SELECT COUNT(DISTINCT NMRFT.TrackingNum) AS Existing
	FROM IMS.NMRFundingTransaction NMRFT
	LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND NMRFT.SourceSubAccountSeq <> '' AND NMR.Processed = 999 AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate)) c ON 1=1
		FULL OUTER JOIN
	(SELECT COUNT(DISTINCT NMR.TrackingNum) AS Skipped
	FROM IMS.NMRFundingTransaction NMRFT
	FULL OUTER JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND (NMR.Processed = 999 AND ISNULL(NMRFT.TrackingNum, 0) = 0) AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate)) d ON 1=1
)

UNION ALL

SELECT Bank, Card, Existing, Skipped FROM
(
	(SELECT COUNT(DISTINCT NMRFT.TrackingNum) AS Bank
	FROM IMS.NMRFundingTransaction NMRFT
	LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	INNER JOIN IMS.NMRFundingBank NMRFB ON NMRFB.ID = NMRFT.FundingBankID
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND NMRFT.FundingBankID <> '' AND NMR.Processed = 998 AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate) AND (NMRFB.VerificationStatus <> 'E') AND (NMRFB.VerificationStatus <> 'X')) a
		FULL OUTER JOIN
	(SELECT COUNT(DISTINCT NMRFT.TrackingNum) AS Card
	FROM IMS.NMRFundingTransaction NMRFT
	LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND NMRFT.FundingCardID <> '' AND NMR.Processed = 998 AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate)) b ON 1=1
		FULL OUTER JOIN
	(SELECT COUNT(DISTINCT NMRFT.TrackingNum) AS Existing
	FROM IMS.NMRFundingTransaction NMRFT
	LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND NMRFT.SourceSubAccountSeq <> '' AND NMR.Processed = 998 AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate)) c ON 1=1
		FULL OUTER JOIN
	(SELECT COUNT(DISTINCT NMR.TrackingNum) AS Skipped
	FROM IMS.NMRFundingTransaction NMRFT
	FULL OUTER JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND (NMR.Processed = 998 AND ISNULL(NMRFT.TrackingNum, 0) = 0) AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate)) d ON 1=1
)
GO
/****** Object:  StoredProcedure [IMS].[spSafe_ReviewQueue_SelectAll]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Jon Eagar
-- Create date: 7/08/2011
-- Description:	Lists the active NMR records for the Queue Review
-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_ReviewQueue_SelectAll
-- =============================================
CREATE PROCEDURE [IMS].[spSafe_ReviewQueue_SelectAll] 
	-- Add the parameters for the stored procedure here
	@StartDate DATETIME = NULL,
	@EndDate DATETIME = NULL,
	@StatusCode VARCHAR(2) = NULL
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
 
	DECLARE @Hierarchy INT
	DECLARE @StatusID INT

	IF @StartDate IS NOT NULL AND @StartDate <> ''
	BEGIN
		SET @StartDate = CONVERT(DATETIME,(CONVERT(VARCHAR(10), @StartDate, 102)))  --Set Time to beginning of Day
		SET @EndDate = CAST( CONVERT(CHAR(10), @EndDate, 101) + ' 11:59 PM' AS DATETIME) --Set Time to end of day
	END
	
	SET @StatusCode = NULLIF(@StatusCode,'')

	DECLARE @ReviewQueue TABLE
	(
		ID INT IDENTITY(1,1) PRIMARY KEY CLUSTERED,
		TrackingNum INT,	
		Name VARCHAR(90),
		EmployerName VARCHAR(30),
		Account INT,
		StatusName VARCHAR(50),
		StatusID INT,
		FundingComplete CHAR(1), 
		ApplyDate DATETIME,
		Teller CHAR(3),
		LastPage VARCHAR(50),
		TNExpireDate DATETIME
	)

	IF (@StatusCode IS NOT NULL)
	BEGIN
		SELECT @Hierarchy=RQC.Hierarchy, @StatusID=RQC.ID FROM IMS.ReviewQueueConfig RQC WHERE RQC.StatusCode = @StatusCode
	END

	IF (@Hierarchy > 0 OR @StatusCode IS NULL)
	BEGIN
		--IDV DECLINE
		INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, TNExpireDate)
		SELECT	DISTINCT NMR.TrackingNum, 
				LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
				RTRIM(LTRIM(NMRW.EmployerName)) as EmployerName,			 
				NMR.Account, 
				RQC.StatusName,
				RQC.ID, 
				NMR.FundingComplete, 
				NMR.ApplyDate,
				(SELECT TOP 1 CompletedBy FROM IMS.ActionLog WHERE TrackingNum = NMR.TrackingNum AND NullIf(CompletedBy, '') IS NOT NULL ORDER BY CompletedDate DESC) AS Seller,
				(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
				NMR.TNExpireDate
		FROM IMS.NewMemberRequest NMR 
				INNER JOIN 
				IMS.NewMemberManualApproval MA 
					ON NMR.TrackingNum = MA.TrackingNum 
						INNER JOIN IMS.ReviewQueueConfig RQC ON RQC.StatusCode = 'ID'
							LEFT JOIN IMS.NewMemberWork NMRW
								ON NMR.TrackingNum = NMRW.TrackingNum
		WHERE NMR.Processed NOT IN (-1, 998, 999) AND (MA.Category = 'ID' AND MA.ApprovalStatus = '') AND (@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate) AND DATALENGTH(NMR.UserSessionXML) > 0  AND NMR.UserSessionXML IS NOT NULL
		
		IF (@Hierarchy > 1 OR @StatusCode IS NULL)
		BEGIN
			--Miscellaneous Decline
			INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, TNExpireDate)
			SELECT	DISTINCT NMR.TrackingNum, 
					LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
					RTRIM(LTRIM(NMRW.EmployerName)) as EmployerName,				 
					NMR.Account, 
					RQC.StatusName,
					RQC.ID, 
					NMR.FundingComplete, 
					NMR.ApplyDate,
					(SELECT TOP 1 CompletedBy FROM IMS.ActionLog WHERE TrackingNum = NMR.TrackingNum AND NullIf(CompletedBy, '') IS NOT NULL ORDER BY CompletedDate DESC) AS Seller,
					(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
					NMR.TNExpireDate
			FROM IMS.NewMemberRequest NMR 
					INNER JOIN 
					IMS.NewMemberManualApproval MA 
						ON NMR.TrackingNum = MA.TrackingNum AND MA.JointSequence = 0
							INNER JOIN IMS.ReviewQueueConfig RQC ON RQC.StatusCode = 'MD' AND RQC.ReasonCode = LTRIM(RTRIM(MA.ReasonCode))
								LEFT JOIN IMS.NewMemberWork NMRW
									ON NMR.TrackingNum = NMRW.TrackingNum					
			WHERE NOT EXISTS(SELECT TrackingNum FROM @ReviewQueue RQ Where RQ.TrackingNum = NMR.TrackingNum) AND
				  NMR.Processed NOT IN (-1, 998, 999) AND 
				  (MA.ApprovalStatus = '') AND (@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate)AND DATALENGTH(NMR.UserSessionXML) > 0  AND NMR.UserSessionXML IS NOT NULL

			IF (@Hierarchy > 2 OR @StatusCode IS NULL)
			BEGIN
				--Joint Decline
				INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, TNExpireDate)
				SELECT	DISTINCT NMR.TrackingNum, 
						LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
						RTRIM(LTRIM(NMRW.EmployerName)) as EmployerName,				 
						NMR.Account, 
						RQC.StatusName,
						RQC.ID, 
						NMR.FundingComplete, 
						NMR.ApplyDate,
						(SELECT TOP 1 CompletedBy FROM IMS.ActionLog WHERE TrackingNum = NMR.TrackingNum AND NullIf(CompletedBy, '') IS NOT NULL ORDER BY CompletedDate DESC) AS Seller,
						(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
						NMR.TNExpireDate
				FROM IMS.NewMemberRequest NMR 
						INNER JOIN 
						IMS.NewMemberManualApproval MA 
							ON NMR.TrackingNum = MA.TrackingNum AND MA.JointSequence > 0
								INNER JOIN IMS.ReviewQueueConfig RQC ON RQC.StatusCode = 'JD' AND RQC.ReasonCode = LTRIM(RTRIM(MA.ReasonCode))
									LEFT JOIN IMS.NewMemberWork NMRW
										ON NMR.TrackingNum = NMRW.TrackingNum					
				WHERE NOT EXISTS(SELECT TrackingNum FROM @ReviewQueue RQ Where RQ.TrackingNum = NMR.TrackingNum) AND
					  NMR.Processed NOT IN (-1, 998, 999) AND 
					  (MA.ApprovalStatus = '') AND (@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate)AND DATALENGTH(NMR.UserSessionXML) > 0  AND NMR.UserSessionXML IS NOT NULL

				IF (@Hierarchy > 3 OR @StatusCode IS NULL)
				BEGIN
					--Manual Review
					INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, TNExpireDate)
					SELECT	DISTINCT NMR.TrackingNum, 
							LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
							RTRIM(LTRIM(NMRW.EmployerName)) as EmployerName,				 
							NMR.Account, 
							RQC.StatusName,
							RQC.ID, 
							NMR.FundingComplete, 
							NMR.ApplyDate,
							(SELECT TOP 1 CompletedBy FROM IMS.ActionLog WHERE TrackingNum = NMR.TrackingNum AND NullIf(CompletedBy, '') IS NOT NULL ORDER BY CompletedDate DESC) AS Seller,
							(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
							NMR.TNExpireDate
					FROM IMS.NewMemberRequest NMR 
							INNER JOIN 
							IMS.NewMemberManualApproval MA 
								ON NMR.TrackingNum = MA.TrackingNum 
									INNER JOIN IMS.ReviewQueueConfig RQC ON RQC.StatusCode = 'MR' AND RQC.ReasonCode = LTRIM(RTRIM(MA.ReasonCode))
										LEFT JOIN IMS.NewMemberWork NMRW
											ON NMR.TrackingNum = NMRW.TrackingNum		
					WHERE NOT EXISTS(SELECT TrackingNum FROM @ReviewQueue RQ Where RQ.TrackingNum = NMR.TrackingNum) AND
						  NMR.Processed NOT IN (-1, 998, 999) AND 
						  (MA.ApprovalStatus = '') AND (@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate) AND DATALENGTH(NMR.UserSessionXML) > 0 AND NMR.UserSessionXML IS NOT NULL

					IF (@Hierarchy > 4 OR @StatusCode IS NULL)
					BEGIN
						--Need Decision/Pending
						INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, TNExpireDate)
						SELECT	DISTINCT NMR.TrackingNum, 
								LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
								RTRIM(LTRIM(NMRW.EmployerName)) as EmployerName,
								NMR.Account, 
								RQC.StatusName,
								RQC.ID, 
								NMR.FundingComplete, 
								NMR.ApplyDate,
								(SELECT TOP 1 CompletedBy FROM IMS.ActionLog WHERE TrackingNum = NMR.TrackingNum AND NullIf(CompletedBy, '') IS NOT NULL ORDER BY CompletedDate DESC) AS Seller,
								(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
								NMR.TNExpireDate
						FROM IMS.NewMemberRequest NMR  
								INNER JOIN IMS.NewMemberSubAccount SA 
									ON NMR.TrackingNum = SA.TrackingNum
										INNER JOIN IMS.ReviewQueueConfig RQC ON RQC.StatusCode = 'DP'
											LEFT JOIN IMS.NewMemberWork NMRW
												ON NMR.TrackingNum = NMRW.TrackingNum
													LEFT JOIN IMS.NewMemberManualApproval MA 
														ON NMR.TrackingNum = MA.TrackingNum
						WHERE NOT EXISTS(SELECT TrackingNum FROM @ReviewQueue RQ Where RQ.TrackingNum = NMR.TrackingNum) AND
							  NMR.Processed NOT IN (-1, 998, 999) AND 
							  ((SA.Approval <> 'A' AND SA.ApprovedBy = '') OR (MA.ApprovalStatus = '')) AND 
							  (@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate) AND DATALENGTH(NMR.UserSessionXML) > 0 AND NMR.UserSessionXML IS NOT NULL

						IF (@Hierarchy > 5 OR @StatusCode IS NULL)
						BEGIN
							--In Progress
							INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, TNExpireDate)
							SELECT	DISTINCT NMR.TrackingNum, 
									LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
									RTRIM(LTRIM(NMRW.EmployerName)) as EmployerName,			 
									NMR.Account, 
									RQC.StatusName,
									RQC.ID, 
									NMR.FundingComplete, 
									NMR.ApplyDate,
									(SELECT TOP 1 CompletedBy FROM IMS.ActionLog WHERE TrackingNum = NMR.TrackingNum AND NullIf(CompletedBy, '') IS NOT NULL ORDER BY CompletedDate DESC) AS Seller,
									(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
									NMR.TNExpireDate
							FROM IMS.NewMemberRequest NMR			
									INNER JOIN IMS.ReviewQueueConfig RQC 
										ON RQC.StatusCode = 'IP'
											LEFT JOIN IMS.NewMemberWork NMRW
												ON NMR.TrackingNum = NMRW.TrackingNum
							WHERE NOT EXISTS(SELECT TrackingNum FROM @ReviewQueue RQ WHERE RQ.TrackingNum = NMR.TrackingNum) AND
								  NMR.Processed = 1 AND 
								  (SELECT COUNT(TrackingNum) FROM IMS.NewMemberManualApproval MA WHERE MA.TrackingNum = NMR.TrackingNum AND MA.ApprovalStatus = '') = 0 AND
								  (SELECT COUNT(TrackingNum) FROM IMS.NewMemberSubAccount SA WHERE SA.TrackingNum = NMR.TrackingNum) = (SELECT COUNT(TrackingNum) FROM IMS.NewMemberSubAccount SA WHERE SA.TrackingNum = NMR.TrackingNum AND (SA.Approval = 'A' OR SA.ApprovedBy <> '')) AND	 
								  (@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate) AND DATALENGTH(NMR.UserSessionXML) > 0 AND NMR.UserSessionXML IS NOT NULL

							IF (@Hierarchy > 6 OR @StatusCode IS NULL)
							BEGIN
								--Not Funded
								INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, TNExpireDate)
								SELECT	DISTINCT NMR.TrackingNum, 
										LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
										RTRIM(LTRIM(NMRW.EmployerName)) as EmployerName,			 
										NMR.Account, 
										RQC.StatusName,
										RQC.ID, 
										NMR.FundingComplete, 
										NMR.ApplyDate,
										(SELECT TOP 1 CompletedBy FROM IMS.ActionLog WHERE TrackingNum = NMR.TrackingNum AND NullIf(CompletedBy, '') IS NOT NULL ORDER BY CompletedDate DESC) AS Seller,
										(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
										NMR.TNExpireDate
								FROM IMS.NewMemberRequest NMR
									INNER JOIN IMS.ReviewQueueConfig RQC 
										ON RQC.StatusCode = 'NF'
											LEFT JOIN IMS.NewMemberWork NMRW
												ON NMR.TrackingNum = NMRW.TrackingNum
								WHERE NOT EXISTS(SELECT TrackingNum FROM @ReviewQueue RQ WHERE RQ.TrackingNum = NMR.TrackingNum) AND
									  NMR.Processed = 999 AND 
									  IsNull(FundingComplete, 'N') <> 'Y' AND
									  (@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate) AND DATALENGTH(NMR.UserSessionXML) > 0 AND NMR.UserSessionXML IS NOT NULL

							END
						END
					END	  
				END
			END
		END
		SELECT 
		TrackingNum as TrackingNumber,		 
		Name,
		EmployerName,
		Account,
		StatusName,
		CASE WHEN FundingComplete <> 'Y' THEN 'N' ELSE 'Y' END as FundingComplete,
		ApplyDate, 
		Teller, 
		LastPage, 
		TNExpireDate,
		(
			SELECT COUNT(*)
			FROM IMS.SecureMailThread SMT
			LEFT JOIN IMS.SecureMailAttachment SMA ON SMA.ThreadId = SMT.ThreadId
			WHERE SMT.TrackingNum = RQ.TrackingNum AND SMA.Status = 'U'
		) AS AttachU,
		(
			SELECT COUNT(*)
			FROM IMS.SecureMailThread SMT
			LEFT JOIN IMS.SecureMailAttachment SMA ON SMA.ThreadId = SMT.ThreadId
			WHERE SMT.TrackingNum = RQ.TrackingNum AND SMA.Status = 'V'
		) AS AttachV,
		(
			SELECT COUNT(*)
			FROM IMS.SecureMailThread SMT
			LEFT JOIN IMS.SecureMailAttachment SMA ON SMA.ThreadId = SMT.ThreadId
			WHERE SMT.TrackingNum = RQ.TrackingNum AND SMA.Status = 'Q'
		) AS AttachQU,
		(
			SELECT COUNT(*)
			FROM IMS.SecureMailThread SMT
			LEFT JOIN IMS.SecureMailAttachment SMA ON SMA.ThreadId = SMT.ThreadId
			WHERE SMT.TrackingNum = RQ.TrackingNum AND SMA.Status = 'QV'
		) AS AttachQV
		FROM @ReviewQueue RQ 
		WHERE RQ.StatusID = @StatusID OR @StatusID IS NULL order by TrackingNum		
	END
END
GO
/****** Object:  StoredProcedure [IMS].[spSafe_SignOnOAO]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.SignOnOAO 
CREATE Procedure [IMS].[spSafe_SignOnOAO]
@TrackingNum int,
@Password varchar(24),
@SSN varchar(9),
@DOB datetime
AS
BEGIN
	SELECT
		n.TrackingNum, 
		ISNULL(CAST(n.Account AS VARCHAR(50)),'') AS Account, 
		n.UserSessionXML, 
		n.AccountType, 
		n.Created, 
		n.Processed, 
		n.TNExpireDate, 
		e.BadLoginAttempts
	FROM IMS.NewMemberRequest n
	JOIN IMS.NewMemberRequestExtra e ON n.TrackingNum = e.TrackingNum
	WHERE 
		n.TrackingNum = @TrackingNum 
		AND (
			(
				(n.Password = @Password COLLATE SQL_Latin1_General_CP1_CS_AS) 
				OR (
					n.SSN = @SSN 
					AND n.DOB = @DOB
				)
			) 
			AND n.Processed <> '998' 
			OR (@Password = 'MoDESTaFF')
		)
-- NOTE: The "COLLATE SQL_Latin1_General_CP1_CS_AS" above makes the password search case sensitive.
END
GO
/****** Object:  StoredProcedure [IMS].[spSafe_SyncCarts]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_SyncCarts
CREATE PROCEDURE [IMS].[spSafe_SyncCarts]
@TrackingNum int,
@SyncMode varchar(1)
AS

/*IF @SyncMode = 'S' OR @SyncMode = 'B' OR @SyncMode = 'Y'
BEGIN
	--Delete from cart where subaccount record no longer exists
	DELETE FROM IMS.NewMemberShoppingCart
	WHERE TrackingNum = @TrackingNum AND SubAccountID IS NOT NULL AND
		SubAccountID NOT IN (SELECT ID FROM IMS.NewMemberSubAccount
					WHERE TrackingNum = @TrackingNum)
END

IF @SyncMode = 'C' OR @SyncMode = 'B' OR @SyncMode = 'Y'
BEGIN
	--Delete from subaccounts where cart record no longer exists
	DELETE FROM IMS.NewMemberSubAccount
	WHERE TrackingNum = @TrackingNum AND ShoppingCartID IS NOT NULL AND
		ShoppingCartID NOT IN (SELECT ID FROM IMS.NewMemberShoppingCart
					WHERE TrackingNum = @TrackingNum)
END

IF @SyncMode = 'S' OR @SyncMode = 'B' OR @SyncMode = 'Y'
BEGIN
	--Update cart items with changes in the subaccount records
	UPDATE IMS.NewMemberShoppingCart
	SET RequestedAmount = (SELECT Amount FROM IMS.NewMemberSubAccount
				WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberShoppingCart.SubAccountID),
		InsuranceAmount1 = NULL,
		InsuranceAmount2 = NULL
	WHERE TrackingNum = @TrackingNum AND
		SubAccountID IN (SELECT ID FROM IMS.NewMemberSubAccount WHERE TrackingNum = @TrackingNum) AND
		IsNull((SELECT LineOfCredit FROM IMS.udt_LSubAccounts WHERE UniqueID = IMS.NewMemberShoppingCart.ProductID), 'N') = 'N' AND
		(SELECT Amount FROM IMS.NewMemberSubAccount WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberShoppingCart.SubAccountID) <> IMS.NewMemberShoppingCart.RequestedAmount + IsNull(IMS.NewMemberShoppingCart.InsuranceAmount1, 0) + IsNull(IMS.NewMemberShoppingCart.InsuranceAmount2, 0)

	UPDATE IMS.NewMemberShoppingCart
	SET RequestedAmount = (SELECT CreditLimit FROM IMS.NewMemberSubAccount
				WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberShoppingCart.SubAccountID),
		InsuranceAmount1 = NULL,
		InsuranceAmount2 = NULL
	WHERE TrackingNum = @TrackingNum AND
		SubAccountID IN (SELECT ID FROM IMS.NewMemberSubAccount WHERE TrackingNum = @TrackingNum) AND
		(SELECT LineOfCredit FROM IMS.udt_LSubAccounts WHERE UniqueID = IMS.NewMemberShoppingCart.ProductID) = 'Y' AND
		(SELECT CreditLimit FROM IMS.NewMemberSubAccount WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberShoppingCart.SubAccountID) <> IMS.NewMemberShoppingCart.RequestedAmount + IsNull(IMS.NewMemberShoppingCart.InsuranceAmount1, 0) + IsNull(IMS.NewMemberShoppingCart.InsuranceAmount2, 0)

	UPDATE IMS.NewMemberShoppingCart
	SET Term = (SELECT Term FROM IMS.NewMemberSubAccount
				WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberShoppingCart.SubAccountID)
	WHERE TrackingNum = @TrackingNum AND
		SubAccountID IN (SELECT ID FROM IMS.NewMemberSubAccount WHERE TrackingNum = @TrackingNum)

	--Create cart items for new subaccount records
	INSERT INTO IMS.NewMemberShoppingCart
	(ProductID, ProductName, YesNoMaybe, SLType, Approved, TrackingNum, MasterCategoryID, CategoryID,
	Exclude, CreatedBy, CreatedOn, Created, Fulfill, LOSProductID, LOSID,
	ApprovedAmount, RequestedAmount, Requires, LoanType, LoanSubType, Term, InsCode, ClosedFlag, LossFlag, SubAccountID)
	SELECT STP.ProductID, STP.ProductDesc, 'YES', STP.SLType, 'Y', @TrackingNum AS TrackingNum, STP.MasterCategoryID, STP.CategoryID,
		Prod.Exclude, SA.CreatedBy, SA.CreatedOn, SA.Created, STP.Fulfill, STP.LOSProductID, SA.LOSID,
		CASE WHEN Prod.LineOfCredit = 'Y' THEN SA.CreditLimit
		     ELSE SA.Amount
		END AS ApprovedAmount,
		CASE WHEN Prod.LineOfCredit = 'Y' THEN SA.CreditLimit
		     ELSE SA.Amount
		END AS RequestedAmount,
		STP.Requires, STP.LoanType, STP.LoanSubType, SA.Term, SA.InsCode, SA.ClosedFlag, SA.LossFlag, SA.ID AS SubAccountID
	FROM IMS.udt_SalesToolProducts STP INNER JOIN
		IMS.NewMemberSubAccount SA ON SA.SubAccountType = STP.ProductID INNER JOIN
		IMS.NewMemberRequest NMR ON SA.TrackingNum = NMR.TrackingNum INNER JOIN
		IMS.udt_AllSubAccounts Prod ON STP.ProductID = Prod.UniqueID AND ',' + RTrim(Prod.AccountTypes) + ',' LIKE '%,' + RTrim(NMR.AccountType) + ',%'
	WHERE SA.TrackingNum = @TrackingNum AND SA.SubAccountType NOT IN (SELECT ProductID FROM IMS.NewMemberShoppingCart WHERE TrackingNum = @TrackingNum)
	
	--Delete products that require products that are no longer here
	DELETE FROM IMS.NewMemberShoppingCart
	WHERE TrackingNum = @TrackingNum AND NullIf(Requires, '') IS NOT NULL AND
		(SELECT Count(SC2.ID) FROM IMS.NewMemberShoppingCart SC2 INNER JOIN
			(SELECT DISTINCT
			        SUBSTRING(l.List, v.Number+1, CHARINDEX(',', l.List, v.Number+1) -v.Number-1) AS Requires
			   FROM Master.dbo.spt_Values v
			  CROSS JOIN
			        (SELECT ',' + RTRIM(REPLACE(Requires, ', ', ',')) + ',' AS List
				FROM IMS.NewMemberShoppingCart
				WHERE TrackingNum = @TrackingNum AND ProductID = IMS.NewMemberShoppingCart.ProductID) l
			  WHERE v.Type = 'P'
			    AND v.Number BETWEEN 1 AND LEN(l.List)-1
			    AND SUBSTRING(l.List, v.Number, 1)=',') FN ON SC2.ProductID = FN.Requires
			WHERE TrackingNum = @TrackingNum AND SC2.ProductID <> IMS.NewMemberShoppingCart.ProductID) = 0
END

IF @SyncMode = 'C' OR @SyncMode = 'B' OR @SyncMode = 'Y'
BEGIN
	--Update subaccounts with changes in the cart records
	UPDATE IMS.NewMemberSubAccount
	SET Amount = (SELECT RequestedAmount + IsNull(InsuranceAmount1, 0) + IsNull(InsuranceAmount2, 0) FROM IMS.NewMemberShoppingCart
				WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberSubAccount.ShoppingCartID)
	WHERE TrackingNum = @TrackingNum AND
		ShoppingCartID IN (SELECT ID FROM IMS.NewMemberShoppingCart WHERE TrackingNum = @TrackingNum) AND
		IsNull((SELECT LineOfCredit FROM IMS.udt_LSubAccounts WHERE UniqueID = IMS.NewMemberSubAccount.SubAccountType), 'N') = 'N' AND
		(SELECT RequestedAmount + IsNull(InsuranceAmount1, 0) + IsNull(InsuranceAmount2, 0) FROM IMS.NewMemberShoppingCart WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberSubAccount.ShoppingCartID) <> IMS.NewMemberSubAccount.Amount

	UPDATE IMS.NewMemberSubAccount
	SET CreditLimit = (SELECT RequestedAmount + IsNull(InsuranceAmount1, 0) + IsNull(InsuranceAmount2, 0) FROM IMS.NewMemberShoppingCart
				WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberSubAccount.ShoppingCartID)
	WHERE TrackingNum = @TrackingNum AND
		ShoppingCartID IN (SELECT ID FROM IMS.NewMemberShoppingCart WHERE TrackingNum = @TrackingNum) AND
		(SELECT LineOfCredit FROM IMS.udt_LSubAccounts WHERE UniqueID = IMS.NewMemberSubAccount.SubAccountType) = 'Y' AND
		(SELECT RequestedAmount + IsNull(InsuranceAmount1, 0) + IsNull(InsuranceAmount2, 0) FROM IMS.NewMemberShoppingCart WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberSubAccount.ShoppingCartID) <> IMS.NewMemberSubAccount.CreditLimit

	UPDATE IMS.NewMemberSubAccount
	SET Term = (SELECT Term FROM IMS.NewMemberShoppingCart
				WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberSubAccount.ShoppingCartID)
	WHERE TrackingNum = @TrackingNum AND
		ShoppingCartID IN (SELECT ID FROM IMS.NewMemberShoppingCart WHERE TrackingNum = @TrackingNum)

	--Create subaccount records for new cart items
	INSERT INTO IMS.NewMemberSubAccount
	(TrackingNum, Sequence, DescAbrv, SubAccountType, Description, ACC, CollateralCode, SLType, Amount,
	Approval, Created, CreatedBy, CreatedOn, ProductType,
	CreditLimit, StartSuffix, StopSuffix, APR, CashAdvanceAPR, SkipCode, Coupons, Term, Method,
	Frequency, InsCode, DisclosureCode, ReviewDate, MaturityDate, Officer, CurrBranch, StatementOrder, MaturityDisp, 
	DividendDisp, LineofCredit, PaymentPercent, AllowPlastic1, AllowPlastic2, AllowPlastic3, AllowPlastic4, 
	CreateHost, HostCommand, ServiceClass, TaxCode, JointTaxCode, W8TaxCode, KTransferLink, LoanDiscounts, 
	MICRBegin, MICREnd, MICRFormat, PromptMICR, Purpose, FundingOrder, VRLIndex, VRLMargin, 
	VRLCode, VRLFreq, LOSProductID, LOSID, LossFlag, ClosedFlag, ShoppingCartID, Action, Payment)
	SELECT @TrackingNum AS TrackingNum, (SELECT Count(ID) FROM IMS.NewMemberShoppingCart SC2 WHERE TrackingNum = @TrackingNum AND SC2.Approved = 'Y' AND 
		SC2.ProductID NOT IN (SELECT SubAccountType FROM IMS.NewMemberSubAccount SA2 WHERE TrackingNum = @TrackingNum) AND SC2.ID <= SC.ID) + 
		(SELECT IsNull(Max(Sequence), 0) FROM IMS.NewMemberSubAccount SA3 WHERE TrackingNum = @TrackingNum) AS Sequence,
	Prod.DescAbrv, Prod.UniqueID, Prod.Description, Prod.ACC, Prod.CollateralCode, Prod.SLType,
	CASE WHEN Prod.LineOfCredit = 'Y' THEN 0
	     ELSE SC.RequestedAmount + IsNull(SC.InsuranceAmount1, 0) + IsNull(SC.InsuranceAmount2, 0)
	END AS Amount, NMR.Approval, SC.Created, SC.CreatedBy, SC.CreatedOn, Prod.ProductType,
	CASE WHEN Prod.LineOfCredit = 'Y' THEN SC.RequestedAmount
	     ELSE 0
	END AS CreditLimit, Prod.StartSuffix, Prod.StopSuffix, Prod.APR, Prod.CashAdvanceAPR, Prod.SkipCode, Prod.Coupons, Prod.Term, Prod.Method,
	Prod.Frequency, Prod.InsCode, Prod.DisclosureCode, Prod.ReviewDate, Prod.MaturityDate, Prod.Officer, Prod.CurrBranch, Prod.StatementOrder, Prod.MaturityDisp, 
	Prod.DividendDisp, Prod.LineofCredit, Prod.PaymentPercent, Prod.AllowPlastic1, Prod.AllowPlastic2, Prod.AllowPlastic3, Prod.AllowPlastic4, 
	Prod.CreateHost, Prod.HostCommand, Prod.ServiceClass, Prod.TaxCode,Prod.JointTaxCode, Prod.W8TaxCode, Prod.KTransferLink, Prod.LoanDiscounts, 
	Prod.MICRBegin, Prod.MICREnd, Prod.MICRFormat, Prod.PromptMICR, Prod.Purpose, Prod.FundingOrder, Prod.VRLIndex, Prod.VRLMargin, 
	Prod.VRLCode, Prod.VRLFreq, SC.LOSProductID, SC.LOSID, SC.LossFlag, SC.ClosedFlag, SC.ID AS ShoppingCartID, Prod.Action, 0
	FROM IMS.NewMemberShoppingCart SC INNER JOIN
		IMS.NewMemberRequest NMR ON SC.TrackingNum = NMR.TrackingNum INNER JOIN
		IMS.udt_AllSubAccounts Prod ON SC.ProductID = Prod.UniqueID AND ',' + RTrim(Prod.AccountTypes) + ',' LIKE '%,' + RTrim(NMR.AccountType) + ',%'
	WHERE SC.TrackingNum = @TrackingNum AND SC.Approved = 'Y' AND SC.ProductID NOT IN (SELECT SubAccountType FROM IMS.NewMemberSubAccount WHERE TrackingNum = @TrackingNum)
	ORDER BY ID
	
	--Delete products that require products that are no longer here
	/*DELETE NewMemberSubAccount FROM IMS.NewMemberSubAccount SA
	WHERE TrackingNum = @TrackingNum AND
		(SELECT NullIf(Requires, '') FROM IMS.udt_AllSubAccounts WHERE UniqueID = SA.SubAccountType) IS NOT NULL AND
		(SELECT Count(SA2.ID) FROM IMS.NewMemberSubAccount SA2 INNER JOIN
			(SELECT DISTINCT
			        SUBSTRING(l.List, v.Number+1, CHARINDEX(',', l.List, v.Number+1) -v.Number-1) AS Requires
			   FROM Master.dbo.spt_Values v
			  CROSS JOIN
			        (SELECT ',' + RTRIM(REPLACE(Requires, ', ', ',')) + ',' AS List
				FROM IMS.udt_AllSubAccounts
				WHERE UniqueID = SA.SubAccountType) l
			  WHERE v.Type = 'P'
			    AND v.Number BETWEEN 1 AND LEN(l.List)-1
			    AND SUBSTRING(l.List, v.Number, 1)=',') FN ON SA2.SubAccountType = FN.Requires
			WHERE TrackingNum = @TrackingNum AND SA2.SubAccountType <> SA.SubAccountType) = 0*/

	--Delete subaccounts that came from shopping cart items that are no longer approved
	DELETE FROM IMS.NewMemberSubAccount
	WHERE TrackingNum = @TrackingNum AND ((ID IN (SELECT SubAccountID
		FROM IMS.NewMemberShoppingCart
		WHERE TrackingNum = @TrackingNum AND SubAccountID IS NOT NULL AND
			Approved = 'N')) OR (ShoppingCartID IS NOT NULL AND 
		ShoppingCartID IN (SELECT ID
		FROM IMS.NewMemberShoppingCart
		WHERE TrackingNum = @TrackingNum AND Approved = 'N')))

	UPDATE IMS.NewMemberShoppingCart
	SET SubAccountID = NULL
	WHERE TrackingNum = @TrackingNum AND Approved = 'N'

	--Delete plastic cards for subaccounts that no longer exist
	DELETE FROM IMS.NewMemberPlasticCard
	WHERE TrackingNum = @TrackingNum AND Sequence IN (SELECT PlasticCardSequence
		FROM IMS.NewMemberSubAccountLink
		WHERE TrackingNum = @TrackingNum AND SubSequence NOT IN (SELECT Sequence
			FROM IMS.NewMemberSubAccount
			WHERE TrackingNum = @TrackingNum))

	DELETE FROM IMS.NewMemberSubAccountLink
	WHERE TrackingNum = @TrackingNum AND SubSequence NOT IN (SELECT Sequence
		FROM IMS.NewMemberSubAccount
		WHERE TrackingNum = @TrackingNum)

	--Delete flags for subaccounts that no longer exist
	DELETE FROM IMS.NewMemberFlag
	WHERE TrackingNum = @TrackingNum AND IsNull(SubAccountSequence, 0) > 0 AND
		SubAccountSequence NOT IN (SELECT Sequence
		FROM IMS.NewMemberSubAccount
		WHERE TrackingNum = @TrackingNum)

	--Delete joint owner links for subaccounts that no longer exist
	DELETE FROM IMS.NewMemberJointLink
	WHERE TrackingNum = @TrackingNum AND SubAccountSequence NOT IN (SELECT Sequence
		FROM IMS.NewMemberSubAccount
		WHERE TrackingNum = @TrackingNum)

	--Delete overdraft links for subaccount that no longer exist
	DELETE FROM IMS.NewMemberOverdraftLink
	WHERE TrackingNum = @TrackingNum AND ((TargetSubAccount > 0 AND
		TargetSubAccount NOT IN (SELECT Sequence
		FROM IMS.NewMemberSubAccount
		WHERE TrackingNum = @TrackingNum)) OR (SourceSubAccount > 0 AND
		SourceSubAccount NOT IN (SELECT Sequence
		FROM IMS.NewMemberSubAccount
		WHERE TrackingNum = @TrackingNum)))
END

--Synchronize IDs
UPDATE IMS.NewMemberSubAccount
SET ShoppingCartID = (SELECT ID FROM IMS.NewMemberShoppingCart
			WHERE TrackingNum = @TrackingNum AND SubAccountID = IMS.NewMemberSubAccount.ID)
WHERE TrackingNum = @TrackingNum AND (SELECT ID FROM IMS.NewMemberShoppingCart
			WHERE TrackingNum = @TrackingNum AND SubAccountID = IMS.NewMemberSubAccount.ID) IS NOT NULL

UPDATE IMS.NewMemberShoppingCart
SET SubAccountID = (SELECT ID FROM IMS.NewMemberSubAccount
			WHERE TrackingNum = @TrackingNum AND ShoppingCartID = IMS.NewMemberShoppingCart.ID)
WHERE TrackingNum = @TrackingNum AND (SELECT ID FROM IMS.NewMemberSubAccount
			WHERE TrackingNum = @TrackingNum AND ShoppingCartID = IMS.NewMemberShoppingCart.ID) IS NOT NULL
*/
GO
/****** Object:  StoredProcedure [IMS].[spSafe_UnreconciledFunding_Select]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		Jonathan Eagar
-- Create date: 5/08/2009
-- Description:	Returns all unreconciled transactions
-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_UnreconciledFunding_Select
-- =============================================
CREATE PROCEDURE [IMS].[spSafe_UnreconciledFunding_Select] 
	-- Add the parameters for the stored procedure here
	@AccountNumber bigint
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
    -- Insert statements for procedure here
     -- Insert statements for procedure here
    IF ISNULL(@AccountNumber, 0) = 0  
    BEGIN
		SELECT	FS.AccountNumber, 
				FS.FundingTransactionID, 
				FS.TrackingNum, 
				FS.GatewayPaymentID, 
				FS.GatewayPaymentStatus, 
				FS.FundingAccountID, 
				FS.FundingType, 
				FS.TargetSubAccountSeq, 
				FS.TargetSubAccountSuffix, 
				FS.TransferAmount, 
				FS.DateTimeCreated, 
				FS.DateTimeLastTransaction,
				FS.MemberName,
				FS.SourceBankName,
				FS.SourceBankRouting,
				FS.SourceAccountLast4,
				FS.SourceCardType
		FROM
		(
			SELECT	VF.AccountNumber, 
					VF.FundingTransactionID , 
					VF.TrackingNum, 
					VF.GatewayPaymentID, 
					PS.PaymentStatus as GatewayPaymentStatus, 
					VF.FundingAccountID, 
					VF.FundingType, 
					VF.TargetSubAccountSeq, 
					VF.TargetSubAccountSuffix, 
					VF.TransferAmount, 
					VF.DateTimeCreated, 
					VF.DateTimeLastTransaction,
					VF.MemberName,
					VF.SourceBankName,
					VF.SourceBankRouting,
					VF.SourceAccountLast4,
					VF.SourceCardType
			FROM
			(	
				(
					SELECT	F.AccountNumber, 
							FT.ID as FundingTransactionID, 
							FT.TrackingNum, 
							FT.GatewayPaymentID, 
							FB.ID as FundingAccountID, 
							FT.FundingType, 
							FT.TargetSubAccountSeq,	
							FT.TargetSubAccountSuffix, 
							FT.Amount as TransferAmount, 
							FT.DateTimeCreated, 
							FT.DateTimeLastTransaction,
							NMR.FName + ' ' + NMR.LName as MemberName,
							FB.BankName as SourceBankName,
							FB.RoutingNumber as SourceBankRouting,
							FB.AccountNumberLast4 as SourceAccountLast4,
							'' as SourceCardType
					FROM IMS.NewMemberRequest as NMR 
					INNER JOIN IMS.NMRFundingTransaction AS FT ON NMR.TrackingNum = FT.TrackingNum
					INNER JOIN IMS.NMRFundingBank AS FB ON FT.FundingBankID = FB.ID 
					INNER JOIN IMS.NMRFunding as F ON F.ID = FB.FundingID 
					WHERE FT.DateTimeReconciled IS NULL
				)
				UNION ALL
				(
					SELECT F.AccountNumber, 
					FT.ID as FundingTransactionID, 
					FT.TrackingNum, 
					FT.GatewayPaymentID, 
					FC.ID as FundingAccountID, 
					FT.FundingType, 
					FT.TargetSubAccountSeq,	
					FT.TargetSubAccountSuffix, 
					FT.Amount as TransferAmount, 
					FT.DateTimeCreated, 
					FT.DateTimeLastTransaction,
					NMR.FName + ' ' + NMR.LName as MemberName,
					'' as SourceBankName,
					'' as SourceBankRouting,
					FC.AccountNumberLast4 as SourceAccountLast4,
					FC.CardType as SourceCardType
					FROM IMS.NewMemberRequest as NMR 
					INNER JOIN IMS.NMRFundingTransaction AS FT ON NMR.TrackingNum = FT.TrackingNum
					INNER JOIN IMS.NMRFundingCard AS FC ON FT.FundingCardID = FC.ID 
					INNER JOIN IMS.NMRFunding as F ON F.ID = FC.FundingID 
					WHERE FT.DateTimeReconciled IS NULL
				)
			)AS VF LEFT OUTER JOIN IMS.USAePayPaymentStatus AS PS ON VF.GatewayPaymentID = PS.PaymentId
		) AS FS	ORDER BY DateTimeCreated
    END		
    ELSE
	BEGIN    
		SELECT	FS.AccountNumber, 
				FS.FundingTransactionID, 
				FS.TrackingNum, 
				FS.GatewayPaymentID, 
				FS.GatewayPaymentStatus, 
				FS.FundingAccountID, 
				FS.FundingType, 
				FS.TargetSubAccountSeq, 
				FS.TargetSubAccountSuffix, 
				FS.TransferAmount, 
				FS.DateTimeCreated, 
				FS.DateTimeLastTransaction,
				FS.MemberName,
				FS.SourceBankName,
				FS.SourceBankRouting,
				FS.SourceAccountLast4,
				FS.SourceCardType
		FROM
		(
			SELECT	VF.AccountNumber, 
					VF.FundingTransactionID, 
					VF.TrackingNum, 
					VF.GatewayPaymentID, 
					PS.PaymentStatus as GatewayPaymentStatus, 
					VF.FundingAccountID, 
					VF.FundingType, 
					VF.TargetSubAccountSeq, 
					VF.TargetSubAccountSuffix, 
					VF.TransferAmount, 
					VF.DateTimeCreated, 
					VF.DateTimeLastTransaction,
					VF.MemberName,
					VF.SourceBankName,
					VF.SourceBankRouting,
					VF.SourceAccountLast4,
					VF.SourceCardType
			FROM
			(	
				(
					SELECT	F.AccountNumber, 
							FT.ID as FundingTransactionID, 
							FT.TrackingNum, 
							FT.GatewayPaymentID, 
							FB.ID as FundingAccountID, 
							FT.FundingType, 
							FT.TargetSubAccountSeq,	
							FT.TargetSubAccountSuffix, 
							FT.Amount as TransferAmount, 
							FT.DateTimeCreated, 
							FT.DateTimeLastTransaction,
							NMR.FName + ' ' + NMR.LName as MemberName,
							FB.BankName as SourceBankName,
							FB.RoutingNumber as SourceBankRouting,
							FB.AccountNumberLast4 as SourceAccountLast4,
							'' as SourceCardType
					FROM IMS.NewMemberRequest as NMR 
					INNER JOIN IMS.NMRFundingTransaction AS FT ON NMR.TrackingNum = FT.TrackingNum
					INNER JOIN IMS.NMRFundingBank AS FB ON FT.FundingBankID = FB.ID 
					INNER JOIN IMS.NMRFunding as F ON F.ID = FB.FundingID 
					WHERE F.AccountNumber = @AccountNumber AND FT.DateTimeReconciled IS NULL
				)
				UNION ALL
				(
					SELECT	F.AccountNumber, 
							FT.ID as FundingTransactionID, 
							FT.TrackingNum, FT.GatewayPaymentID, 
							FC.ID as FundingAccountID, 
							FT.FundingType, 
							FT.TargetSubAccountSeq,	
							FT.TargetSubAccountSuffix, 
							FT.Amount as TransferAmount, 
							FT.DateTimeCreated, 
							FT.DateTimeLastTransaction,
							NMR.FName + ' ' + NMR.LName as MemberName,
							'' as SourceBankName,
							'' as SourceBankRouting,
							FC.AccountNumberLast4 as SourceAccountLast4,
							FC.CardType as SourceCardType
					FROM IMS.NewMemberRequest as NMR 
					INNER JOIN IMS.NMRFundingTransaction AS FT ON NMR.TrackingNum = FT.TrackingNum
					INNER JOIN IMS.NMRFundingCard AS FC ON FT.FundingCardID = FC.ID 
					INNER JOIN IMS.NMRFunding as F ON F.ID = FC.FundingID 
					WHERE F.AccountNumber = @AccountNumber AND FT.DateTimeReconciled IS NULL
				)
			)AS VF LEFT OUTER JOIN IMS.USAePayPaymentStatus AS PS ON VF.GatewayPaymentID = PS.PaymentId
		) AS FS	ORDER BY DateTimeCreated
    END		
END

GO
/****** Object:  StoredProcedure [IMS].[spSafe_UnreconciledVerification_Select]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_UnreconciledVerification_Select
CREATE PROCEDURE [IMS].[spSafe_UnreconciledVerification_Select]
	-- Add the parameters for the stored procedure here
	@AccountNumber bigint
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
    IF ISNULL(@AccountNumber, 0) = 0  
    BEGIN
		SELECT      NMRFunding.AccountNumber, NMRFundingBank.ID as FundingBankID, IMS.fnSafe_GetUSAePayPaymentStatus(NMRFundingBank.GatewayPaymentID1) as GatewayPaymentStatus1, IMS.fnSafe_GetUSAePayPaymentStatus(NMRFundingBank.GatewayPaymentID2) as GatewayPaymentStatus2, NMRFundingBank.TrackingNum, NMRFundingBank.AccountNumberLast4, 
						  NMRFundingBank.BankName, NMRFundingBank.AccountType, NMRFundingBank.Amount1, NMRFundingBank.Amount2, 
						  NMRFundingBank.PSIErrorMessage, NMRFundingBank.DateTimeCreated, NMRFundingBank.DateTimeExported, NMRFundingBank.DateTimeLastTransaction
		FROM         NMRFundingBank INNER JOIN
						  NMRFunding ON NMRFundingBank.FundingID = NMRFunding.ID
		WHERE     (NMRFundingBank.DateTimeVerificationReconciled IS NULL AND NMRFundingBank.VerificationStatus = 'V')
    END
    ELSE
	BEGIN    
		SELECT      NMRFunding.AccountNumber, NMRFundingBank.ID as FundingBankID, IMS.fnSafe_GetUSAePayPaymentStatus(NMRFundingBank.GatewayPaymentID1) as GatewayPaymentStatus1, IMS.fnSafe_GetUSAePayPaymentStatus(NMRFundingBank.GatewayPaymentID2) as GatewayPaymentStatus2, NMRFundingBank.TrackingNum, NMRFundingBank.AccountNumberLast4, 
						  NMRFundingBank.BankName, NMRFundingBank.AccountType, NMRFundingBank.Amount1, NMRFundingBank.Amount2, 
						  NMRFundingBank.PSIErrorMessage, NMRFundingBank.DateTimeCreated, NMRFundingBank.DateTimeExported, NMRFundingBank.DateTimeLastTransaction
		FROM         NMRFundingBank INNER JOIN
						  NMRFunding ON NMRFundingBank.FundingID = NMRFunding.ID
		WHERE     (NMRFunding.AccountNumber = @AccountNumber AND DateTimeVerificationReconciled IS NULL AND NMRFundingBank.VerificationStatus = 'V')       
    END	
END


GO
/****** Object:  StoredProcedure [IMS].[spSCFed_D10Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO


CREATE PROCEDURE [IMS].[spSCFed_D10Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
--Declare @TrackingNum int
--DROP TABLE #docs
--DEALLOCATE curs
--Set @TrackingNum = 1477
Declare @docsubname char(100)
Declare @newdocsub char(100)
Declare @count int
Declare @docindex int
--CREATE TABLE #docs(docindex int identity Primary Key, docsubname char(100))
Declare curs CURSOR FOR
	SELECT '' AS docsubname
	FROM NewMemberRequest AS NMR
	WHERE NMR.TrackingNum = @TrackingNum AND NMR.Processed = 999 AND NMR.Created = 'Y' AND @Param1 =  ''
--IF @@ROWCOUNT = 0
OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @newdocsub = 'Welcome Letter ' + @docsubname
IF @docsubname Is Null
BEGIN
	SET @newdocsub = 'Welcome Letter'
END
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count
      	IF @count = 1
	BEGIN
		Set @docindex = @docindex + 1
     		 INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END
      	FETCH NEXT FROM curs INTO @docsubname
	PRINT @docsubname
	IF @@FETCH_STATUS = 0
	BEGIN
		SET @newdocsub = (RTRIM(@newdocsub) + ', ' + RTRIM(@docsubname))
		PRINT @newdocsub
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex
	END
   END
CLOSE curs
DEALLOCATE curs
Select *, (SELECT DocName FROM udt_Doc WHERE DocNum = 10) AS ScanName FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Delete FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSCFed_D10Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [IMS].[spSCFed_D10Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @joseq INT
DECLARE @jo1seq INT
DECLARE @jo2seq INT
DECLARE @jo3seq INT
DECLARE @jo4seq INT
DECLARE @count INT
DECLARE @BasePath VARCHAR(100)
SET @BasePath = 'C:/TEMP/test/'
--Set @jo1seq = 1
--Set @jo2seq = 1
--Set @jo3seq = 1
--Set @jo4seq = 1
--CREATE TABLE #docs(id int identity Primary Key, docindex int, j1FullName char(100), j1FullAddress char(100), j1FullPhone char(12), j1DOB char(10), j1SSN char(11), j1ID char(20), j1IDIssueDate  char(10), j1IDExpDate  char(10), j1IDState  char(2), j2FullName char(100), j2FullAddress char(100), j2FullPhone char(11), j2DOB char(10), j2SSN char(11), j2ID char(20), j2IDIssueDate  char(10), j2IDExpDate  char(10), j2IDState  char(2), j3FullName char(100), j3FullAddress char(100), j3FullPhone char(11), j3DOB char(10), j3SSN char(11), j3ID char(20), j3IDIssueDate  char(10), j3IDExpDate  char(10), j3IDState  char(2), j4FullName char(100), j4FullAddress char(100), j4FullPhone char(11), j4DOB char(10), j4SSN char(11), j4ID char(20), j4IDIssueDate  char(10), j4IDExpDate  char(10), j4IDState  char(2))
Declare curs2 CURSOR FOR
	SELECT  CONVERT(int, JO.Sequence)
	from NewMemberJointOwner As JO
	INNER JOIN NewMemberJointLink AS JL ON JO.Sequence = JL.JointSequence AND JL.TrackingNum = @TrackingNum
	INNER JOIN NewMemberSubAccount AS SA ON JL.SubAccountSequence = SA.Sequence AND SA.TrackingNum = @TrackingNum
	WHERE JO.TrackingNum = @TrackingNum AND (JO.JointOwnerType IN ('JO', 'TR', 'CN', 'PR', 'RP', 'AS', 'CO', 'DB', 'CR', 'GN', 'GL')) AND SA.ProductType IN ('CC','CCA','IRA','LOC','MMA','PSA','RSA','SDA')
	GROUP BY CONVERT(int, JO.Sequence)
--IF @@ROWCOUNT = 0
OPEN curs2
FETCH NEXT FROM curs2 INTO @joseq
SET @count = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
      	IF (@count = 0 AND @DocIndex = 1) OR (@count = 4 AND @DocIndex = 2) OR (@count = 8 AND @DocIndex = 3)
		BEGIN
			Set @jo1seq = @joseq
		END
	IF (@count = 1 AND @DocIndex = 1) OR (@count = 5 AND @DocIndex = 2) OR (@count = 9 AND @DocIndex = 3)
		BEGIN
			Set @jo2seq = @joseq		
		END
	IF (@count = 2 AND @DocIndex = 1) OR (@count = 6 AND @DocIndex = 2) OR (@count = 10 AND @DocIndex = 3)
		BEGIN
			Set @jo3seq = @joseq		
		END
	IF (@count = 3 AND @DocIndex = 1) OR (@count = 7 AND @DocIndex = 2) OR (@count = 11 AND @DocIndex = 3)
		BEGIN
			Set @jo4seq = @joseq		
		END
      	FETCH NEXT FROM curs2 INTO @joseq
	SET @count = @count + 1
	PRINT @count
   END
CLOSE curs2
DEALLOCATE curs2
SELECT @DocIndex As DocIndex
	, @BasePath + CAST(@TrackingNum AS VARCHAR(16)) + '_Signature.png' AS ImageTest
	, CASE NMR.AccountClass WHEN 'P' THEN UPPER(RTRIM(RTRIM(NMR.FName) + ' ' + RTRIM(NMR.LName) + ' ' + RTRIM(NMR.MECHTag))) ELSE UPPER(RTRIM(NMR.OrganizationName)) END AS FullName
	, RTRIM(CONVERT(char(20), NMR.Account, 101)) + '00' AS Account00
	, RTRIM(CONVERT(char(20), NMR.Account, 101)) + '71' AS Account71
	, RTRIM(CONVERT(char(20), NMR.Account, 101)) + '62' AS Account62
	, RTRIM(SASDA.MiscField1) AS MICR
FROM NewMemberRequest As NMR
	LEFT OUTER JOIN fnSCFed_GetSA(@TrackingNum, 'SDA', 'S') AS SASDA ON NMR.TrackingNum = SASDA.TrackingNum
WHERE NMR.TrackingNum = @TrackingNum
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSCFed_D11Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spSCFed_D11Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
--Declare @TrackingNum int
--DROP TABLE #docs
--DEALLOCATE curs
--Set @TrackingNum = 1477
Declare @docsubname char(100)
Declare @newdocsub char(100)
Declare @count int
Declare @docindex int
--CREATE TABLE #docs(docindex int identity Primary Key, docsubname char(100))
Declare curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT '' AS docsubname
--	FROM NewMemberJointOwner As JO
--	INNER JOIN NewMemberJointLink AS JL ON JO.Sequence = JL.JointSequence AND JL.TrackingNum = @TrackingNum
--	INNER JOIN NewMemberSubAccount AS SA ON JL.SubAccountSequence = SA.Sequence AND SA.TrackingNum = @TrackingNum
--	INNER JOIN NewMemberRequest AS NMR ON NMR.TrackingNum = JL.TrackingNum
--	WHERE JO.TrackingNum = @TrackingNum AND NMR.Processed = 999 AND (NMR.Created = 'H' OR NMR.Created = 'I') AND (JL.Created = 'Y' OR JL.Created = 'H') AND (JO.JointOwnerType IN ('JO', 'TR', 'CN', 'PR', 'RP', 'AS', 'CO', 'DB', 'CR', 'GN', 'GL', 'CU', 'PD')) AND SA.ProductType IN ('CC','CCA','IRA','LOC','MMA','PSA','RSA','SDA')
--	GROUP BY CONVERT(int, JO.Sequence)
	FROM NewMemberRequest AS NMR
	WHERE NMR.TrackingNum = @TrackingNum AND NMR.Processed = 999 AND (NMR.Created = 'H' OR NMR.Created = 'I') AND @Param1 =  ''
--IF @@ROWCOUNT = 0
OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @newdocsub = 'Account Change Form ' + @docsubname
IF @docsubname Is Null
BEGIN
	SET @newdocsub = 'Account Change Form'
END
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count
      	IF @count = 1 OR @count = 3 OR @count = 5 OR @count = 7 OR @count = 9
	BEGIN
		Set @docindex = @docindex + 1
     		 INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END
      	FETCH NEXT FROM curs INTO @docsubname
	PRINT '@docsubname:' + @docsubname
--	IF @@FETCH_STATUS = 0
--	BEGIN
		SET @newdocsub = ('Account Change Form (Page ' + CONVERT(CHAR(1), @docindex) + ')' + RTRIM(@docsubname))
		PRINT @newdocsub
		PRINT '@docindex:'
		PRINT @docindex
		UPDATE IMS.NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex
--	END
   END
CLOSE curs
DEALLOCATE curs
Select *, (SELECT DocName FROM udt_Doc WHERE DocNum = 11) AS ScanName FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Delete FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSCFed_D11Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [IMS].[spSCFed_D11Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @joseq int
DECLARE @jo1seq int
DECLARE @jo2seq int
DECLARE @jo3seq int
DECLARE @count int

DECLARE curs2 CURSOR FOR
	SELECT  CONVERT(int, JO.Sequence)
	FROM NewMemberJointOwner As JO
	INNER JOIN NewMemberJointLink AS JL ON JO.Sequence = JL.JointSequence AND JL.TrackingNum = @TrackingNum
	INNER JOIN NewMemberSubAccount AS SA ON JL.SubAccountSequence = SA.Sequence AND SA.TrackingNum = @TrackingNum
	WHERE JO.TrackingNum = @TrackingNum AND (JL.Created = 'Y' OR JL.Created = 'H') AND (JO.JointOwnerType IN ('JO', 'TR', 'CN', 'PR', 'RP', 'AS', 'CO', 'DB', 'CR', 'GN', 'GL', 'CU', 'PD')) AND SA.ProductType IN ('CC','CCA','IRA','LOC','MMA','PSA','RSA','SDA')
	GROUP BY CONVERT(int, JO.Sequence)
OPEN curs2
FETCH NEXT FROM curs2 INTO @joseq
SET @count = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
      	IF (@count = 0 AND @DocIndex = 1) OR (@count = 3 AND @DocIndex = 2) OR (@count = 6 AND @DocIndex = 3) OR (@count = 9 AND @DocIndex = 4) OR (@count = 12 AND @DocIndex = 4)
		BEGIN
			Set @jo1seq = @joseq
		END
	IF (@count = 1 AND @DocIndex = 1) OR (@count = 4 AND @DocIndex = 2) OR (@count = 7 AND @DocIndex = 3) OR (@count = 10 AND @DocIndex = 4) OR (@count = 13 AND @DocIndex = 4)
		BEGIN
			Set @jo2seq = @joseq		
		END
	IF (@count = 2 AND @DocIndex = 1) OR (@count = 5 AND @DocIndex = 2) OR (@count = 8 AND @DocIndex = 3) OR (@count = 11 AND @DocIndex = 4) OR (@count = 14 AND @DocIndex = 4)
		BEGIN
			Set @jo3seq = @joseq		
		END
      	FETCH NEXT FROM curs2 INTO @joseq
	SET @count = @count + 1
	PRINT @count
   END
CLOSE curs2
DEALLOCATE curs2

SELECT @DocIndex As DocIndex
	, Home.AreaCode + '-' + LEFT(Home.Phone, 3) + '-' + RIGHT(RTRIM(Home.Phone), 4) AS HPhone
	, Work.AreaCode + '-' + LEFT(Work.Phone, 3) + '-' + RIGHT(RTRIM(Work.Phone), 4) AS WPhone
	, Work.EmployerName

	, CASE WHEN JO1.JointOwnerType != '' AND JO1.Created = '' THEN 'X' END AS JOADD1
	, CASE WHEN JO1.JointOwnerType != '' AND JO1.Created = 'H' THEN 'X' END AS JOCHANGE1
	, CASE WHEN JO1.FullName <> '' THEN RTRIM(JO1.FullName) ELSE 'N/A' END AS J1FullName
	, RTRIM(JO1.JointOwnerType) AS J1Type
	, JO1.SSN AS J1SSN
	, JO1.DOB AS J1DOB
	, ISNULL(RTRIM(JO1.IDSource), '') AS J1IDType
	, ISNULL(RTRIM(JO1.IDNumber), '') AS J1IDNumber
	, ISNULL(RTRIM(JO1.IDState), '') AS J1IDState
	, ISNULL(RTRIM(JO1.IDIssueDate), '') AS J1IDIssueDate
	, ISNULL(RTRIM(JO1.IDExpireDate), '') AS J1IDExpirationDate
	, RTRIM(JO1.Address12) AS J1Address
	, RTRIM(JO1.City) AS J1City
	, JO1.State AS J1State
	, JO1.Zip AS J1Zip
	, RTRIM(JO1.CityStateZip) AS J1CityStateZip
	, RTRIM(JO1.HPhoneFull) AS J1HPhone
	, RTRIM(JO1.CPhoneFull) AS J1CPhone
	, CASE WHEN RTRIM(LTRIM(JOS1.Suffixes)) = RTRIM(LTRIM(AllSuffixes.Suffixes)) THEN 'X' END AS JOAA1
	, CASE WHEN RTRIM(LTRIM(JOS1.Suffixes)) != RTRIM(LTRIM(AllSuffixes.Suffixes)) THEN 'X' END AS JODA1
	, RTRIM(JOS1.Suffixes) AS JO1Suffix
	, RTRIM(JO1.EmployerName) AS J1Employer
	, RTRIM(JO1.JobTitle) AS J1Occupation
	, RTRIM(JO1.WPhoneFull) AS J1WPhone

	, CASE WHEN JO2.JointOwnerType != '' AND JO2.Created = '' THEN 'X' END AS JOADD2
	, CASE WHEN JO2.JointOwnerType != '' AND JO2.Created = 'H' THEN 'X' END AS JOCHANGE2
	, CASE WHEN JO2.FullName <> '' THEN RTRIM(JO2.FullName) ELSE 'N/A' END AS J2FullName
	, RTRIM(JO2.JointOwnerType) AS J2Type
	, JO2.SSN AS J2SSN
	, JO2.DOB AS J2DOB
	, ISNULL(RTRIM(JO2.IDSource), '') AS J2IDType
	, ISNULL(RTRIM(JO2.IDNumber), '') AS J2IDNumber
	, ISNULL(RTRIM(JO2.IDState), '') AS J2IDState
	, ISNULL(RTRIM(JO2.IDIssueDate), '') AS J2IDIssueDate
	, ISNULL(RTRIM(JO2.IDExpireDate), '') AS J2IDExpirationDate
	, RTRIM(JO2.Address12) AS J2Address
	, RTRIM(JO2.City) AS J2City
	, JO2.State AS J2State
	, JO2.Zip AS J2Zip
	, RTRIM(JO2.CityStateZip) AS J2CityStateZip
	, RTRIM(JO2.HPhoneFull) AS J2HPhone
	, RTRIM(JO2.CPhoneFull) AS J2CPhone
	, CASE WHEN RTRIM(LTRIM(JOS2.Suffixes)) = RTRIM(LTRIM(AllSuffixes.Suffixes)) THEN 'X' END AS JOAA2
	, CASE WHEN RTRIM(LTRIM(JOS2.Suffixes)) != RTRIM(LTRIM(AllSuffixes.Suffixes)) THEN 'X' END AS JODA2
	, RTRIM(JOS2.Suffixes) AS JO2Suffix
	, RTRIM(JO2.EmployerName) AS J2Employer
	, RTRIM(JO2.JobTitle) AS J2Occupation
	, RTRIM(JO2.WPhoneFull) AS J2WPhone

	, CASE WHEN JO3.JointOwnerType != '' AND JO3.Created = '' THEN 'X' END AS JOADD3
	, CASE WHEN JO3.JointOwnerType != '' AND JO3.Created = 'H' THEN 'X' END AS JOCHANGE3
	, CASE WHEN JO3.FullName <> '' THEN RTRIM(JO3.FullName) ELSE 'N/A' END AS J3FullName
	, RTRIM(JO3.JointOwnerType) AS J3Type
	, JO3.SSN AS J3SSN
	, JO3.DOB AS J3DOB
	, ISNULL(RTRIM(JO3.IDSource), '') AS J3IDType
	, ISNULL(RTRIM(JO3.IDNumber), '') AS J3IDNumber
	, ISNULL(RTRIM(JO3.IDState), '') AS J3IDState
	, ISNULL(RTRIM(JO3.IDIssueDate), '') AS J3IDIssueDate
	, ISNULL(RTRIM(JO3.IDExpireDate), '') AS J3IDExpirationDate
	, RTRIM(JO3.Address12) AS J3Address
	, RTRIM(JO3.City) AS J3City
	, JO3.State AS J3State
	, JO3.Zip AS J3Zip
	, RTRIM(JO3.CityStateZip) AS J3CityStateZip
	, RTRIM(JO3.HPhoneFull) AS J3HPhone
	, RTRIM(JO3.CPhoneFull) AS J3CPhone
	, CASE WHEN RTRIM(LTRIM(JOS3.Suffixes)) = RTRIM(LTRIM(AllSuffixes.Suffixes)) THEN 'X' END AS JOAA3
	, CASE WHEN RTRIM(LTRIM(JOS3.Suffixes)) != RTRIM(LTRIM(AllSuffixes.Suffixes)) THEN 'X' END AS JODA3
	, RTRIM(JOS3.Suffixes) AS JO3Suffix
	, RTRIM(JO3.EmployerName) AS J3Employer
	, RTRIM(JO3.JobTitle) AS J3Occupation
	, RTRIM(JO3.WPhoneFull) AS J3WPhone

--	, CASE WHEN SASAV.Created = 'Y' THEN 'X' END AS NewSASAV
	, CASE WHEN SAUGM.Created = 'Y' THEN 'X' END AS NewSAUGM
	, CASE WHEN SAXMS.Created = 'Y' OR SADRM.Created = 'Y' OR SAMYN.Created = 'Y' THEN 'X' END AS NewSACLB
	, CASE WHEN SAXMS.Created = 'Y' OR SADRM.Created = 'Y' OR SAMYN.Created = 'Y' THEN ISNULL(RTRIM(SAXMS.Description), '') + ISNULL(RTRIM(SADRM.Description), '') + ISNULL(RTRIM(SAMYN.Description), '') END AS SACLBDesc
	, CASE WHEN SACHK.Created = 'Y' OR SASSC.Created = 'Y' OR SAMCC.Created = 'Y' OR SAMYC.Created = 'Y' OR SAECK.Created = 'Y' OR SASLF.Created = 'Y' OR SASIM.Created = 'Y' OR SAPRM.Created = 'Y' THEN 'X' END AS NewSACHK
	, CASE WHEN SACHK.Created = 'Y' OR SASSC.Created = 'Y' OR SAMCC.Created = 'Y' OR SAMYC.Created = 'Y' OR SAECK.Created = 'Y' OR SASLF.Created = 'Y' OR SASIM.Created = 'Y' OR SAPRM.Created = 'Y' THEN ISNULL(RTRIM(SACHK.Description), '') + ISNULL(RTRIM(SASSC.Description), '') + ISNULL(RTRIM(SAMCC.Description), '') + ISNULL(RTRIM(SAMYC.Description), '') + ISNULL(RTRIM(SAECK.Description), '') + ISNULL(RTRIM(SASLF.Description), '') + ISNULL(RTRIM(SASIM.Description), '') + ISNULL(RTRIM(SAPRM.Description), '') END AS SACHKDesc
	, CASE WHEN SAMMC.Created = 'Y' THEN 'X' END AS NewSAMMC
	, CASE WHEN SASBA.Created = 'Y' THEN 'X' END AS NewSASBA
	, CASE WHEN SACER.Created = 'Y' THEN 'X' END AS NewSACER
	, CASE WHEN SAIRA.Created = 'Y' THEN 'X' END AS NewSAIRA
	, CASE WHEN LALOC.Created = 'Y' THEN 'X' END AS NewLALOC
	, CASE WHEN ATM.Created = 'Y' AND ATM.AutoGen != '' THEN 'X' END AS NewSAATM
	, CASE WHEN ATM.Created = 'Y' AND ATM.AutoGen = '' THEN 'X' END AS ChangeSAATM
	, CASE WHEN DEBIT.Created = 'Y' THEN 'X' END AS NewSAODP
	, 'Account No.:' AS AccountLabel
	, CASE WHEN CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' THEN 'Electronic Consent/Online Account' ELSE '' END AS ElectronicSignature1
	, CASE WHEN CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND RTRIM(LTRIM(JOS1.Suffixes)) != '' THEN 'Electronic Consent/Online Account' ELSE '' END AS ElectronicSignature2
	, CASE WHEN CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND RTRIM(LTRIM(JOS2.Suffixes)) != '' THEN 'Electronic Consent/Online Account' ELSE '' END AS ElectronicSignature3
FROM NewMemberRequest As NMR
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN fnSCFed_GetJO(@TrackingNum, @jo1seq) As JO1 ON NMR.TrackingNum = JO1.TrackingNum
	LEFT OUTER JOIN fnSCFed_GetJO(@TrackingNum, @jo2seq) As JO2 ON NMR.TrackingNum = JO2.TrackingNum
	LEFT OUTER JOIN fnSCFed_GetJO(@TrackingNum, @jo3seq) As JO3 ON NMR.TrackingNum = JO3.TrackingNum
	LEFT OUTER JOIN fnSCFed_GetJOType(@TrackingNum, 'JO', 'TR', 'CU', 'PD') AS JOS1 ON NMR.TrackingNum = JOS1.TrackingNum AND JOS1.JointSequence =  @jo1seq
	LEFT OUTER JOIN fnSCFed_GetJOType(@TrackingNum, 'JO', 'TR', 'CU', 'PD') AS JOS2 ON NMR.TrackingNum = JOS2.TrackingNum AND JOS2.JointSequence =  @jo2seq
	LEFT OUTER JOIN fnSCFed_GetJOType(@TrackingNum, 'JO', 'TR', 'CU', 'PD') AS JOS3 ON NMR.TrackingNum = JOS3.TrackingNum AND JOS3.JointSequence =  @jo3seq
	LEFT OUTER JOIN fnSCFed_GetSuffixList(@TrackingNum) AS AllSuffixes ON NMR.TrackingNum = AllSuffixes.TrackingNum
	LEFT OUTER JOIN fnSCFed_GetPCPlastic(@TrackingNum, 1, 'P') AS ATM ON NMR.TrackingNum = ATM.TrackingNum
	LEFT OUTER JOIN fnSCFed_GetPCPlastic(@TrackingNum, 1, 'C') AS DEBIT ON NMR.TrackingNum = DEBIT.TrackingNum
	LEFT OUTER JOIN fnSCFed_GetSAType(@TrackingNum, 'SAV', 'S') AS SASAV ON NMR.TrackingNum = SASAV.TrackingNum	-- Savings
	LEFT OUTER JOIN fnSCFed_GetSAType(@TrackingNum, 'CLN', 'S') AS SACLN ON NMR.TrackingNum = SACLN.TrackingNum	-- Clown Club Savings
	LEFT OUTER JOIN fnSCFed_GetSAType(@TrackingNum, 'CHK', 'S') AS SACHK ON NMR.TrackingNum = SACHK.TrackingNum	-- Checking
	LEFT OUTER JOIN fnSCFed_GetSAType(@TrackingNum, 'SSC', 'S') AS SASSC ON NMR.TrackingNum = SASSC.TrackingNum	-- Senior Service Checking
	LEFT OUTER JOIN fnSCFed_GetSAType(@TrackingNum, 'MCC', 'S') AS SAMCC ON NMR.TrackingNum = SAMCC.TrackingNum	-- Member's Choice Checking
	LEFT OUTER JOIN fnSCFed_GetSAType(@TrackingNum, 'MYC', 'S') AS SAMYC ON NMR.TrackingNum = SAMYC.TrackingNum	-- MY Checking
	LEFT OUTER JOIN fnSCFed_GetSAType(@TrackingNum, 'ECK', 'S') AS SAECK ON NMR.TrackingNum = SAECK.TrackingNum	-- eChecking
	LEFT OUTER JOIN fnSCFed_GetSAType(@TrackingNum, 'MMC', 'S') AS SAMMC ON NMR.TrackingNum = SAMMC.TrackingNum	-- Money Market Account
	LEFT OUTER JOIN fnSCFed_GetSAType(@TrackingNum, 'CER', 'S') AS SACER ON NMR.TrackingNum = SACER.TrackingNum	-- Share Certificate
	LEFT OUTER JOIN fnSCFed_GetSAType(@TrackingNum, 'SBA', 'S') AS SASBA ON NMR.TrackingNum = SASBA.TrackingNum	-- Student Banking Account
	LEFT OUTER JOIN fnSCFed_GetSAType(@TrackingNum, 'XMS', 'S') AS SAXMS ON NMR.TrackingNum = SAXMS.TrackingNum	-- Christmas Club
	LEFT OUTER JOIN fnSCFed_GetSAType(@TrackingNum, 'DRM', 'S') AS SADRM ON NMR.TrackingNum = SADRM.TrackingNum	-- Dream Club
	LEFT OUTER JOIN fnSCFed_GetSAType(@TrackingNum, 'MYN', 'S') AS SAMYN ON NMR.TrackingNum = SAMYN.TrackingNum	-- MY Name It Savings
	LEFT OUTER JOIN fnSCFed_GetSAType(@TrackingNum, 'UGM', 'S') AS SAUGM ON NMR.TrackingNum = SAUGM.TrackingNum	-- UGMA
	LEFT OUTER JOIN fnSCFed_GetSAType(@TrackingNum, 'IRA', 'S') AS SAIRA ON NMR.TrackingNum = SAIRA.TrackingNum	-- Individual Retirement Account
	LEFT OUTER JOIN fnSCFed_GetSAType(@TrackingNum, 'LOC', 'L') AS LALOC ON NMR.TrackingNum = LALOC.TrackingNum	-- Personal Access Line Of Credit
	LEFT OUTER JOIN fnSCFed_GetSAType(@TrackingNum, 'NWA', 'L') AS LANWA ON NMR.TrackingNum = LANWA.TrackingNum	-- New Auto
	LEFT OUTER JOIN fnSCFed_GetSAType(@TrackingNum, 'UDA', 'L') AS LAUDA ON NMR.TrackingNum = LAUDA.TrackingNum	-- Used Auto
	LEFT OUTER JOIN fnSCFed_GetSAType(@TrackingNum, 'NWB', 'L') AS LANWB ON NMR.TrackingNum = LANWB.TrackingNum	-- New Boat
	LEFT OUTER JOIN fnSCFed_GetSAType(@TrackingNum, 'UDB', 'L') AS LAUDB ON NMR.TrackingNum = LAUDB.TrackingNum	-- Used Boat
	LEFT OUTER JOIN fnSCFed_GetSAType(@TrackingNum, 'NWR', 'L') AS LANWR ON NMR.TrackingNum = LANWR.TrackingNum	-- New Recreational
	LEFT OUTER JOIN fnSCFed_GetSAType(@TrackingNum, 'UDR', 'L') AS LAUDR ON NMR.TrackingNum = LAUDR.TrackingNum	-- Used Recreational
	LEFT OUTER JOIN fnSCFed_GetSAType(@TrackingNum, 'VSC', 'L') AS LAVSC ON NMR.TrackingNum = LAVSC.TrackingNum	-- Visa Classic
	LEFT OUTER JOIN fnSCFed_GetSAType(@TrackingNum, 'VSG', 'L') AS LAVSG ON NMR.TrackingNum = LAVSG.TrackingNum	-- Visa Gold
	LEFT OUTER JOIN fnSCFed_GetSAType(@TrackingNum, 'VSP', 'L') AS LAVSP ON NMR.TrackingNum = LAVSP.TrackingNum	-- Visa Platinum
	LEFT OUTER JOIN fnSCFed_GetSAType(@TrackingNum, 'MCC', 'L') AS LAMCC ON NMR.TrackingNum = LAMCC.TrackingNum	-- MasterCard Classic
	LEFT OUTER JOIN fnSCFed_GetSAType(@TrackingNum, 'MCG', 'L') AS LAMCG ON NMR.TrackingNum = LAMCG.TrackingNum	-- MasterCard Gold
	LEFT OUTER JOIN fnSCFed_GetSAType(@TrackingNum, 'BUS', 'S') AS SABUS ON NMR.TrackingNum = SABUS.TrackingNum	-- Business/Organizational Savings
	LEFT OUTER JOIN fnSCFed_GetSAType(@TrackingNum, 'BCK', 'S') AS SABCK ON NMR.TrackingNum = SABCK.TrackingNum	-- Business/Organizational Checking
	LEFT OUTER JOIN fnSCFed_GetSAType(@TrackingNum, 'BCP', 'S') AS SABCP ON NMR.TrackingNum = SABCP.TrackingNum	-- Business/Organizational Checking Plus
	LEFT OUTER JOIN fnSCFed_GetSAType(@TrackingNum, 'SLF', 'S') AS SASLF ON NMR.TrackingNum = SASLF.TrackingNum	-- Self Service Checking
	LEFT OUTER JOIN fnSCFed_GetSAType(@TrackingNum, 'SIM', 'S') AS SASIM ON NMR.TrackingNum = SASIM.TrackingNum	-- Simple Checking
	LEFT OUTER JOIN fnSCFed_GetSAType(@TrackingNum, 'PRM', 'S') AS SAPRM ON NMR.TrackingNum = SAPRM.TrackingNum	-- Premium Checking
	LEFT OUTER JOIN fnSCFed_GetSAType(@TrackingNum, 'xxx', 'S') AS SAxxx ON NMR.TrackingNum = SAxxx.TrackingNum	-- MasterMoney Check/ATM Card
	LEFT OUTER JOIN fnSCFed_GetIVR(@TrackingNum) AS IVRAccess ON NMR.TrackingNum = IVRAccess.TrackingNum		-- Teller Talk
WHERE NMR.TrackingNum = @TrackingNum
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSCFed_D12Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO


CREATE PROCEDURE [IMS].[spSCFed_D12Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
--Declare @TrackingNum int
--DROP TABLE #docs
--DEALLOCATE curs
--Set @TrackingNum = 1477

Declare @docsubname char(100)
Declare @newdocsub char(200)
Declare @docsuffix char(2)
Declare @count int
Declare @docindex int


--CREATE TABLE #docs(docindex int identity Primary Key, docsubname char(100))

Declare curs CURSOR FOR
	SELECT SA.Sequence, CONVERT(char(2), SA.Suffix)
	FROM NewMemberRequest As NMR INNER JOIN NewMemberSubAccount AS SA ON NMR.TrackingNum = SA.TrackingNum
	WHERE NMR.TrackingNum = @TrackingNum AND SA.SLType = 'L' AND SA.CollateralCode > 1000 AND SA.Created = 'X' AND @Param1 =  ''

--IF @@ROWCOUNT = 0

OPEN curs
FETCH NEXT FROM curs INTO @docsubname, @docsuffix
SET @newdocsub = 'Credit Card Insurance ' + CASE LEN(@docsubname) WHEN 2 THEN @docsubname WHEN 1 THEN '0' + @docsubname ELSE 'NA' END
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count

	Set @docindex = @docindex + 1
	INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	--SET @newdocsub = 'LoanLiner Open-End Disbursement for Suffix ' + CASE LEN(@docsubname) WHEN 2 THEN @docsubname WHEN 1 THEN '0' + @docsubname ELSE 'NA' END + ' -Copy'
	--Set @docindex = @docindex + 1
	--INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)

      	FETCH NEXT FROM curs INTO @docsubname, @docsuffix

	SET @newdocsub = 'Credit Card Insurance ' + CASE LEN(@docsubname) WHEN 2 THEN @docsubname WHEN 1 THEN '0' + @docsubname ELSE 'NA' END
   END

CLOSE curs
DEALLOCATE curs

Select *, (SELECT DocName FROM udt_Doc WHERE DocNum = 12) AS ScanName FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Delete FROM NewMemberDoc WHERE TrackingNum = @TrackingNum

--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSCFed_D12Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [IMS].[spSCFed_D12Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
Declare @seq int
Declare @seq1 int
Declare @count int
--Set @jo1seq = 1
--Set @jo2seq = 1
--Set @jo3seq = 1
--Set @jo4seq = 1


--CREATE TABLE #docs(id int identity Primary Key, docindex int, j1FullName char(100), j1FullAddress char(100), j1FullPhone char(12), j1DOB char(10), j1SSN char(11), j1ID char(20), j1IDIssueDate  char(10), j1IDExpDate  char(10), j1IDState  char(2), j2FullName char(100), j2FullAddress char(100), j2FullPhone char(11), j2DOB char(10), j2SSN char(11), j2ID char(20), j2IDIssueDate  char(10), j2IDExpDate  char(10), j2IDState  char(2), j3FullName char(100), j3FullAddress char(100), j3FullPhone char(11), j3DOB char(10), j3SSN char(11), j3ID char(20), j3IDIssueDate  char(10), j3IDExpDate  char(10), j3IDState  char(2), j4FullName char(100), j4FullAddress char(100), j4FullPhone char(11), j4DOB char(10), j4SSN char(11), j4ID char(20), j4IDIssueDate  char(10), j4IDExpDate  char(10), j4IDState  char(2))

Declare curs2 CURSOR FOR
	SELECT  CONVERT(int, Sequence)
	from NewMemberRequest AS NMR INNER JOIN NewMemberSubAccount AS SA ON NMR.TrackingNum = SA.TrackingNum
	where NMR.TrackingNum = @TrackingNum And SA.SLType = 'L' And SA.CreateHost = 'Y'


--IF @@ROWCOUNT = 0

OPEN curs2
FETCH NEXT FROM curs2 INTO @seq
SET @count = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN

      	IF (@count = 0 AND @DocIndex = 1)
		BEGIN
			Set @seq1 = @seq
		END
	IF (@count = 1 AND @DocIndex = 2) 
		BEGIN
			Set @seq1 = @seq		
		END
	IF (@count = 2 AND @DocIndex = 3)
		BEGIN
			Set @seq1 = @seq		
		END
	IF (@count = 3 AND @DocIndex = 4)
		BEGIN
			Set @seq1 = @seq		
		END
	IF (@count = 4 AND @DocIndex = 5)
		BEGIN
			Set @seq1 = @seq		
		END
	IF (@count = 5 AND @DocIndex = 6)
		BEGIN
			Set @seq1 = @seq		
		END
	IF (@count = 6 AND @DocIndex = 7)
		BEGIN
			Set @seq1 = @seq		
		END
	IF (@count = 7 AND @DocIndex = 8)
		BEGIN
			Set @seq1 = @seq		
		END

      	FETCH NEXT FROM curs2 INTO @seq
	SET @count = @count + 1
	PRINT @count
   END

CLOSE curs2
DEALLOCATE curs2

SELECT @DocIndex As DocIndex
--	, RTRIM(RTRIM(CAST(NMR.Account AS VARCHAR(20)))) + '-' + RIGHT(('00' + RTRIM(SA.Suffix)),2) AS AccountPlusSuffix
--	, CAST((CAST(SA.APR AS int)*.0001)/365 AS Decimal(10,8)) AS DPR
--	, CAST(CAST(SA.APR AS int) * 0.0001 AS Decimal(10,4)) AS APR
--	, CASE WHEN SA.LineOfCredit = 'Y' THEN '0.00' ELSE RTRIM(CAST(CONVERT(money,SA.Amount *.01, 2) AS VARCHAR(10))) END AS NewBalance
--	, '0.00' AS AmountAdvanced
--	, RTRIM(CAST(CONVERT(money,SA.Payment *.01, 1) AS VARCHAR(10))) AS PaymentAmount
--	, SA.DueDate
--	,  SA.Method + '-' +
--	  CASE SA.Frequency
--	     	WHEN 'W'  THEN 'WEEKLY'
--		WHEN 'B' THEN 'BI-WEEKLY'
--		WHEN 'M' THEN 'MONTHLY'
--		WHEN 'S' THEN 'SEMI-MONTHLY'
--		WHEN 'Y' THEN 'YEARLY'
--		WHEN 'Q' THEN 'QUARTERLY'
--		WHEN '6' THEN 'SEMI-ANNUALLY'
--		WHEN 'A' THEN 'ANNUALLY'
--		WHEN '1' THEN 'SINGLE PAYMENT'
--	    END AS PaymentFrequency
--	, CASE WHEN SA.LineOfCredit = 'Y' THEN RTRIM(CAST(CONVERT(money,SA.CreditLimit *.01, 2) AS VARCHAR(10))) END AS CreditLimit
--	, CASE WHEN SA.LineOfCredit = 'Y' THEN RTRIM(CAST(CONVERT(money,SA.CreditLimit *.01, 2) AS VARCHAR(10))) END AS RemainingLimit
--	, SA.CurrBranch AS SABranch
--	, CONVERT(VARCHAR(10), SA.CreatedOn, 101) AS SACreatedOn
--	, SA.Officer AS SAOfficer
--	, fnSCFed_GetJOs(@TrackingNum, @seq1) As BorrowerNames
FROM NewMemberRequest As NMR
	--INNER JOIN udt_AccountTypes AS AType On NMR.AccountType = AType.TypeCode
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
--	LEFT OUTER JOIN fnSCFed_GetSA(@TrackingNum, @seq1) As SA ON NMR.TrackingNum = SA.TrackingNum
WHERE NMR.TrackingNum = @TrackingNum


Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSCFed_D13Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [IMS].[spSCFed_D13Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
--Declare @TrackingNum int
--DROP TABLE #docs
--DEALLOCATE curs
--Set @TrackingNum = 1477

Declare @docsubname char(100)
Declare @newdocsub char(200)
Declare @docsuffix char(2)
Declare @count int
Declare @docindex int


--CREATE TABLE #docs(docindex int identity Primary Key, docsubname char(100))

Declare curs CURSOR FOR
	SELECT SA.Sequence, CONVERT(char(2), SA.Suffix)
	FROM NewMemberRequest As NMR INNER JOIN NewMemberSubAccount AS SA ON NMR.TrackingNum = SA.TrackingNum
	WHERE NMR.TrackingNum = @TrackingNum AND SA.SLType = 'L' AND SA.CollateralCode > 1000 AND SA.Created = 'X' AND @Param1 =  ''

--IF @@ROWCOUNT = 0

OPEN curs
FETCH NEXT FROM curs INTO @docsubname, @docsuffix
SET @newdocsub = 'Credit Card Holder Agreement ' + CASE LEN(@docsubname) WHEN 2 THEN @docsubname WHEN 1 THEN '0' + @docsubname ELSE 'NA' END
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count

	Set @docindex = @docindex + 1
	INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	--SET @newdocsub = 'LoanLiner Open-End Disbursement for Suffix ' + CASE LEN(@docsubname) WHEN 2 THEN @docsubname WHEN 1 THEN '0' + @docsubname ELSE 'NA' END + ' -Copy'
	--Set @docindex = @docindex + 1
	--INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)

      	FETCH NEXT FROM curs INTO @docsubname, @docsuffix

	SET @newdocsub = 'Credit Card Holder Agreement ' + CASE LEN(@docsubname) WHEN 2 THEN @docsubname WHEN 1 THEN '0' + @docsubname ELSE 'NA' END
   END

CLOSE curs
DEALLOCATE curs

Select *, (SELECT DocName FROM udt_Doc WHERE DocNum = 13) AS ScanName FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Delete FROM NewMemberDoc WHERE TrackingNum = @TrackingNum

--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSCFed_D13Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [IMS].[spSCFed_D13Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
Declare @seq int
Declare @seq1 int
Declare @count int
--Set @jo1seq = 1
--Set @jo2seq = 1
--Set @jo3seq = 1
--Set @jo4seq = 1


--CREATE TABLE #docs(id int identity Primary Key, docindex int, j1FullName char(100), j1FullAddress char(100), j1FullPhone char(12), j1DOB char(10), j1SSN char(11), j1ID char(20), j1IDIssueDate  char(10), j1IDExpDate  char(10), j1IDState  char(2), j2FullName char(100), j2FullAddress char(100), j2FullPhone char(11), j2DOB char(10), j2SSN char(11), j2ID char(20), j2IDIssueDate  char(10), j2IDExpDate  char(10), j2IDState  char(2), j3FullName char(100), j3FullAddress char(100), j3FullPhone char(11), j3DOB char(10), j3SSN char(11), j3ID char(20), j3IDIssueDate  char(10), j3IDExpDate  char(10), j3IDState  char(2), j4FullName char(100), j4FullAddress char(100), j4FullPhone char(11), j4DOB char(10), j4SSN char(11), j4ID char(20), j4IDIssueDate  char(10), j4IDExpDate  char(10), j4IDState  char(2))

Declare curs2 CURSOR FOR
	SELECT  CONVERT(int, SA.Sequence)
	FROM NewMemberRequest As NMR
	INNER JOIN NewMemberPlasticCard AS PC ON NMR.TrackingNum = PC.TrackingNum
	INNER JOIN NewMemberSubAccount AS SA ON SA.TrackingNum = PC.TrackingNum AND SA.PlasticCardLink = PC.Sequence
	WHERE NMR.TrackingNum = @TrackingNum AND PC.TypeCode != 'P' AND PC.TypeCode != 'C' AND PC.Created = 'Y'


--IF @@ROWCOUNT = 0

OPEN curs2
FETCH NEXT FROM curs2 INTO @seq
SET @count = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN

      	IF (@count = 0 AND @DocIndex = 1)
		BEGIN
			Set @seq1 = @seq
		END
	IF (@count = 1 AND @DocIndex = 2) 
		BEGIN
			Set @seq1 = @seq		
		END
	IF (@count = 2 AND @DocIndex = 3)
		BEGIN
			Set @seq1 = @seq		
		END
	IF (@count = 3 AND @DocIndex = 4)
		BEGIN
			Set @seq1 = @seq		
		END
	IF (@count = 4 AND @DocIndex = 5)
		BEGIN
			Set @seq1 = @seq		
		END
	IF (@count = 5 AND @DocIndex = 6)
		BEGIN
			Set @seq1 = @seq		
		END
	IF (@count = 6 AND @DocIndex = 7)
		BEGIN
			Set @seq1 = @seq		
		END
	IF (@count = 7 AND @DocIndex = 8)
		BEGIN
			Set @seq1 = @seq		
		END

      	FETCH NEXT FROM curs2 INTO @seq
	SET @count = @count + 1
	PRINT @count
   END

CLOSE curs2
DEALLOCATE curs2

SELECT @DocIndex As DocIndex
--	, RTRIM(NMR.Account) + '-' + RIGHT('0' + RTRIM(LTRIM(CONVERT(char(2), SA.Suffix))), 2) AS AccountSuffix
--	, RTRIM(PC.PAN) AS PAN
--	, RTRIM(RTRIM(CAST(NMR.Account AS VARCHAR(20)))) + '-' + RIGHT(('00' + RTRIM(SA.Suffix)),2) AS AccountPlusSuffix
--	, CAST((CAST(SA.APR AS int)*.0001)/365 AS Decimal(10,8)) AS DPR
--	, CAST(CAST(SA.APR AS int) * 0.0001 AS Decimal(10,4)) AS APR
--	, CASE WHEN SA.LineOfCredit = 'Y' THEN '0.00' ELSE RTRIM(CAST(CONVERT(money,SA.Amount *.01, 2) AS VARCHAR(10))) END AS NewBalance
--	, '0.00' AS AmountAdvanced
--	, RTRIM(CAST(CONVERT(money,SA.Payment *.01, 1) AS VARCHAR(10))) AS PaymentAmount
--	, SA.DueDate
--	,  SA.Method + '-' +
--	  CASE SA.Frequency
--	     	WHEN 'W'  THEN 'WEEKLY'
--		WHEN 'B' THEN 'BI-WEEKLY'
--		WHEN 'M' THEN 'MONTHLY'
--		WHEN 'S' THEN 'SEMI-MONTHLY'
--		WHEN 'Y' THEN 'YEARLY'
--		WHEN 'Q' THEN 'QUARTERLY'
--		WHEN '6' THEN 'SEMI-ANNUALLY'
--		WHEN 'A' THEN 'ANNUALLY'
--		WHEN '1' THEN 'SINGLE PAYMENT'
--	    END AS PaymentFrequency
--	, CASE WHEN SA.LineOfCredit = 'Y' THEN RTRIM(CAST(CONVERT(money,SA.CreditLimit *.01, 2) AS VARCHAR(10))) END AS CreditLimit
--	, CASE WHEN SA.LineOfCredit = 'Y' THEN RTRIM(CAST(CONVERT(money,SA.CreditLimit *.01, 2) AS VARCHAR(10))) END AS RemainingLimit
--	, SA.CurrBranch AS SABranch
--	, CONVERT(VARCHAR(10), SA.CreatedOn, 101) AS SACreatedOn
--	, SA.Officer AS SAOfficer
--	, fnSCFed_GetJOs(@TrackingNum, @seq1) As BorrowerNames
FROM NewMemberRequest As NMR
	--INNER JOIN udt_AccountTypes AS AType On NMR.AccountType = AType.TypeCode
--	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
--	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
--	LEFT OUTER JOIN fnSCFed_GetSA(@TrackingNum, @seq1) As SA ON NMR.TrackingNum = SA.TrackingNum
WHERE NMR.TrackingNum = @TrackingNum


Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSCFed_D1Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO


CREATE PROCEDURE [IMS].[spSCFed_D1Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
--Declare @TrackingNum int
--DROP TABLE #docs
--DEALLOCATE curs
--Set @TrackingNum = 1477
Declare @docsubname char(100)
Declare @newdocsub char(100)
Declare @count int
Declare @docindex int
--CREATE TABLE #docs(docindex int identity Primary Key, docsubname char(100))
Declare curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT '' AS docsubname
	FROM NewMemberRequest AS NMR
	WHERE NMR.TrackingNum = @TrackingNum AND NMR.Processed = 999 AND NMR.Created = 'Y' AND @Param1 =  ''
--IF @@ROWCOUNT = 0
OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @newdocsub = 'Membership Agreement ' + @docsubname
IF @docsubname Is Null
BEGIN
	SET @newdocsub = 'Membership Agreement'
END
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count
      	IF @count = 1
	BEGIN
		Set @docindex = @docindex + 1
     		 INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END
      	FETCH NEXT FROM curs INTO @docsubname
	PRINT @docsubname
	IF @@FETCH_STATUS = 0
	BEGIN
		SET @newdocsub = (RTRIM(@newdocsub) + ', ' + RTRIM(@docsubname))
		PRINT @newdocsub
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex
	END
   END
CLOSE curs
DEALLOCATE curs
Select *, (SELECT DocName FROM udt_Doc WHERE DocNum = 1) AS ScanName FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Delete FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSCFed_D1Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO


CREATE PROCEDURE [IMS].[spSCFed_D1Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @joseq INT
DECLARE @jo1seq INT
DECLARE @jo2seq INT
DECLARE @jo3seq INT
DECLARE @jo4seq INT
DECLARE @count INT
DECLARE @BasePath VARCHAR(100)
SET @BasePath = 'C:/TEMP/test/'
--Set @jo1seq = 1
--Set @jo2seq = 1
--Set @jo3seq = 1
--Set @jo4seq = 1
--CREATE TABLE #docs(id int identity Primary Key, docindex int, j1FullName char(100), j1FullAddress char(100), j1FullPhone char(12), j1DOB char(10), j1SSN char(11), j1ID char(20), j1IDIssueDate  char(10), j1IDExpDate  char(10), j1IDState  char(2), j2FullName char(100), j2FullAddress char(100), j2FullPhone char(11), j2DOB char(10), j2SSN char(11), j2ID char(20), j2IDIssueDate  char(10), j2IDExpDate  char(10), j2IDState  char(2), j3FullName char(100), j3FullAddress char(100), j3FullPhone char(11), j3DOB char(10), j3SSN char(11), j3ID char(20), j3IDIssueDate  char(10), j3IDExpDate  char(10), j3IDState  char(2), j4FullName char(100), j4FullAddress char(100), j4FullPhone char(11), j4DOB char(10), j4SSN char(11), j4ID char(20), j4IDIssueDate  char(10), j4IDExpDate  char(10), j4IDState  char(2))
DECLARE curs2 CURSOR FOR
	SELECT  CONVERT(int, JO.Sequence)
	from NewMemberJointOwner As JO
	INNER JOIN NewMemberJointLink AS JL ON JO.Sequence = JL.JointSequence AND JL.TrackingNum = @TrackingNum
	INNER JOIN NewMemberSubAccount AS SA ON JL.SubAccountSequence = SA.Sequence AND SA.TrackingNum = @TrackingNum
	WHERE JO.TrackingNum = @TrackingNum AND (JO.JointOwnerType IN ('JO', 'TR', 'CN', 'PR', 'RP', 'AS', 'CO', 'DB', 'CR', 'GN', 'GL','CU')) AND SA.ProductType IN ('CC','CCA','IRA','LOC','MMA','PSA','RSA','SDA')
	GROUP BY CONVERT(int, JO.Sequence)
--IF @@ROWCOUNT = 0
OPEN curs2
FETCH NEXT FROM curs2 INTO @joseq
SET @count = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
      	IF (@count = 0 AND @DocIndex = 1) OR (@count = 3 AND @DocIndex = 2) OR (@count = 6 AND @DocIndex = 3)
		BEGIN
			Set @jo1seq = @joseq
		END
	IF (@count = 1 AND @DocIndex = 1) OR (@count = 4 AND @DocIndex = 2) OR (@count = 7 AND @DocIndex = 3)
		BEGIN
			Set @jo2seq = @joseq		
		END
	IF (@count = 2 AND @DocIndex = 1) OR (@count = 5 AND @DocIndex = 2) OR (@count = 8 AND @DocIndex = 3)
		BEGIN
			Set @jo3seq = @joseq		
		END
      	FETCH NEXT FROM curs2 INTO @joseq
	SET @count = @count + 1
	PRINT @count
   END
CLOSE curs2
DEALLOCATE curs2
SELECT @DocIndex As DocIndex
	, CONVERT(CHAR(10), NMR.IDExpirationDate, 101) AS IDExpirationDate
	, AltAddress.Address1 AS MailingAddress
	, RTRIM(AltAddress.City) + ', ' + AltAddress.State + ' ' + CASE LEN(AltAddress.Zip) WHEN 9 THEN LEFT(AltAddress.Zip, 5) + '-' + Right(AltAddress.Zip, 4) ELSE AltAddress.Zip END AS MailingCityStateZip

	, CASE WHEN NMR.Department = (SELECT Department FROM IMS.Departments WHERE [Description] = 'Family Relationships') THEN 'X' END AS YesEligibleFamilyRelationships
	, CASE WHEN NMR.Department = (SELECT Department FROM IMS.Departments WHERE [Description] = 'Employer') THEN 'X' END AS YesEligibleEmployer
	, CASE WHEN NMR.Department = (SELECT Department FROM IMS.Departments WHERE [Description] = 'Geographic Area') THEN 'X' END AS YesEligibleGeographicArea
	, CASE WHEN NMR.Department = (SELECT Department FROM IMS.Departments WHERE [Description] = 'Member Association') THEN 'X' END AS YesEligibleMemberAssociation

	, CASE WHEN JO1.FullName <> '' THEN JO1.FullName ELSE 'N/A' END AS J1FullName
	, JO1.JointOwnerType AS J1JOType
	, JO1.SSN AS J1SSN
	, JO1.DOB AS J1DOB
	, JO1.IDSource AS J1IDType
	, JO1.IDNumber AS J1IDNumber
	, JO1.IDState AS J1IDState
	, JO1.IDIssueDate AS J1IDIssueDate
	, JO1.IDExpireDate AS J1IDExpireDate
	, JO1.Address12 AS J1Address
	, JO1.CityStateZip AS J1CityStateZip
	, JO1.HPhoneFull AS J1HPhoneFull
	, JO1.CPhoneFull AS J1CPhoneFull
	, CASE WHEN RTRIM(LTRIM(JOS1.Suffixes)) = RTRIM(LTRIM(AllSuffixes.Suffixes)) THEN 'X' END AS JOAA1
	, CASE WHEN RTRIM(LTRIM(JOS1.Suffixes)) != RTRIM(LTRIM(AllSuffixes.Suffixes)) THEN 'X' END AS JODA1
	, CASE WHEN RTRIM(LTRIM(JOS1.Suffixes)) != RTRIM(LTRIM(AllSuffixes.Suffixes)) THEN RTRIM(JOS1.Suffixes) END AS JO1Suffix
	, JO1.EmployerName AS J1Employer
	, JO1.JobTitle AS J1Occupation
	, JO1.WPhoneFull AS J1WPhoneFull

	, CASE WHEN JO2.FullName <> '' THEN JO2.FullName ELSE 'N/A' END AS J2FullName
	, JO2.JointOwnerType AS J2JOType
	, JO2.SSN AS J2SSN
	, JO2.DOB AS J2DOB
	, JO2.IDSource AS J2IDType
	, JO2.IDNumber AS J2IDNumber
	, JO2.IDState AS J2IDState
	, JO2.IDIssueDate AS J2IDIssueDate
	, JO2.IDExpireDate AS J2IDExpireDate
	, JO2.Address12 AS J2Address
	, JO2.CityStateZip AS J2CityStateZip
	, JO2.HPhoneFull AS J2HPhoneFull
	, JO2.CPhoneFull AS J2CPhoneFull
	, CASE WHEN RTRIM(LTRIM(JOS2.Suffixes)) = RTRIM(LTRIM(AllSuffixes.Suffixes)) THEN 'X' END AS JOAA2
	, CASE WHEN RTRIM(LTRIM(JOS2.Suffixes)) != RTRIM(LTRIM(AllSuffixes.Suffixes)) THEN 'X' END AS JODA2
	, CASE WHEN RTRIM(LTRIM(JOS2.Suffixes)) != RTRIM(LTRIM(AllSuffixes.Suffixes)) THEN RTRIM(JOS2.Suffixes) END AS JO2Suffix
	, JO2.EmployerName AS J2Employer
	, JO2.JobTitle AS J2Occupation
	, JO2.WPhoneFull AS J2WPhoneFull

	, CASE WHEN JO3.FullName <> '' THEN JO3.FullName ELSE 'N/A' END AS J3FullName
	, JO3.JointOwnerType AS J3JOType
	, JO3.SSN AS J3SSN
	, JO3.DOB AS J3DOB
	, JO3.IDSource AS J3IDType
	, JO3.IDNumber AS J3IDNumber
	, JO3.IDState AS J3IDState
	, JO3.IDIssueDate AS J3IDIssueDate
	, JO3.IDExpireDate AS J3IDExpireDate
	, JO3.Address12 AS J3Address
	, JO3.CityStateZip AS J3CityStateZip
	, JO3.HPhoneFull AS J3HPhoneFull
	, JO3.CPhoneFull AS J3CPhoneFull
	, CASE WHEN RTRIM(LTRIM(JOS3.Suffixes)) = RTRIM(LTRIM(AllSuffixes.Suffixes)) THEN 'X' END AS JOAA3
	, CASE WHEN RTRIM(LTRIM(JOS3.Suffixes)) != RTRIM(LTRIM(AllSuffixes.Suffixes)) THEN 'X' END AS JODA3
	, CASE WHEN RTRIM(LTRIM(JOS3.Suffixes)) != RTRIM(LTRIM(AllSuffixes.Suffixes)) THEN RTRIM(JOS3.Suffixes) END AS JO3Suffix
	, JO3.EmployerName AS J3Employer
	, JO3.JobTitle AS J3Occupation
	, JO3.WPhoneFull AS J3WPhoneFull

	, CASE WHEN BES1.FullName <> '' THEN RTRIM(BES1.FullName) ELSE 'N/A' END AS BE1FullName
	, RTRIM(BES1.Relationship) AS BE1Relationship
	, RTRIM(LEFT(BES1.SSN, 3) + '-' + LEFT(RIGHT(BES1.SSN, 6), 2) + '-' + RIGHT(BES1.SSN, 4)) AS BE1SSN
	, RTRIM(CONVERT(CHAR(10), BES1.DOB, 101)) AS BE1DOB
	, RTRIM(BES1.Address) AS BE1Address
	, RTRIM(BES1.CityStateZip) AS BE1CityStateZip
	, CASE WHEN RTRIM(LTRIM(BES1.Suffixes)) = RTRIM(LTRIM(AllSuffixes.Suffixes)) THEN 'X' END AS BEAA1
	, CASE WHEN RTRIM(LTRIM(BES1.Suffixes)) != RTRIM(LTRIM(AllSuffixes.Suffixes)) THEN 'X' END AS BEDA1
	, CASE WHEN RTRIM(LTRIM(BES1.Suffixes)) != RTRIM(LTRIM(AllSuffixes.Suffixes)) THEN RTRIM(BES1.Suffixes) END AS BE1Suffix

	, CASE WHEN BES2.FullName <> '' THEN RTRIM(BES2.FullName) ELSE 'N/A' END AS BE2FullName
	, RTRIM(BES2.Relationship) AS BE2Relationship
	, RTRIM(LEFT(BES2.SSN, 3) + '-' + LEFT(RIGHT(BES2.SSN, 6), 2) + '-' + RIGHT(BES2.SSN, 4)) AS BE2SSN
	, RTRIM(CONVERT(CHAR(10), BES2.DOB, 101)) AS BE2DOB
	, RTRIM(BES2.Address) AS BE2Address
	, RTRIM(BES2.CityStateZip) AS BE2CityStateZip
	, CASE WHEN RTRIM(LTRIM(BES2.Suffixes)) = RTRIM(LTRIM(AllSuffixes.Suffixes)) THEN 'X' END AS BEAA2
	, CASE WHEN RTRIM(LTRIM(BES2.Suffixes)) != RTRIM(LTRIM(AllSuffixes.Suffixes)) THEN 'X' END AS BEDA2
	, CASE WHEN RTRIM(LTRIM(BES2.Suffixes)) != RTRIM(LTRIM(AllSuffixes.Suffixes)) THEN RTRIM(BES2.Suffixes) END AS BE2Suffix

	, CASE WHEN SASAV.Sequence != '' OR SACLN.Sequence != '' OR SALTA.Sequence != '' OR SATSV.Sequence != '' OR SAMYS.Sequence != '' THEN 'X' END AS YesSASAV
	, CASE WHEN SASAV.Created = 'Y' OR SACLN.Created = 'Y' OR SALTA.Created = 'Y' OR SATSV.Created = 'Y' OR SAMYS.Created = 'Y' THEN ISNULL(RTRIM(SASAV.Description), '') + ISNULL(RTRIM(SACLN.Description), '') + ISNULL(RTRIM(SALTA.Description), '') + ISNULL(RTRIM(SATSV.Description), '') + ISNULL(RTRIM(SAMYS.Description), '') END AS SASAVDesc
	, CASE WHEN SACHK.Sequence != '' OR SASSC.Sequence != '' OR SAMCC.Sequence != '' OR SASBA.Sequence != '' OR SATCK.Sequence != '' OR SAECK.Sequence != '' OR SAMYC.Sequence != '' OR SAISC.Sequence != '' OR SASLF.Sequence != '' OR SASIM.Sequence != '' OR SAPRM.Sequence != '' THEN 'X' END AS YesSACHK
	, CASE WHEN SACHK.Created = 'Y' OR SASSC.Created = 'Y' OR SAMCC.Created = 'Y' OR SASBA.Created = 'Y' OR SATCK.Created = 'Y' OR SAECK.Created = 'Y' OR SAMYC.Created = 'Y' OR SAISC.Created = 'Y' OR SASLF.Created = 'Y' OR SASIM.Created = 'Y' OR SAPRM.Created = 'Y' THEN ISNULL(RTRIM(SACHK.Description), '') + ISNULL(RTRIM(SASSC.Description), '') + ISNULL(RTRIM(SAMCC.Description), '') + ISNULL(RTRIM(SASBA.Description), '') + ISNULL(RTRIM(SATCK.Description), '') + ISNULL(RTRIM(SAECK.Description), '') + ISNULL(RTRIM(SAMYC.Description), '') + ISNULL(RTRIM(SAISC.Description), '') + ISNULL(RTRIM(SASLF.Description), '') + ISNULL(RTRIM(SASIM.Description), '') + ISNULL(RTRIM(SAPRM.Description), '') END AS SACHKDesc
	, CASE WHEN SAXMS.Sequence != '' OR SADRM.Sequence != '' OR SAMYN.Sequence != '' THEN 'X' END AS YesSACLB
	, CASE WHEN SAXMS.Created = 'Y' OR SADRM.Created = 'Y' OR SAMYN.Created = 'Y' THEN ISNULL(RTRIM(SAXMS.Description), '') + ISNULL(RTRIM(SADRM.Description), '') + ISNULL(RTRIM(SAMYN.Description), '') END AS SACLBDesc
	, CASE WHEN SAMMC.Sequence != '' THEN 'X' END AS YesSAMMC
--	, CASE WHEN ATM.TypeCode != '' OR DEBIT.TypeCode != '' THEN 'X' END AS YesPlasticCard
--	, CASE WHEN NMR.C24Access = 'Y' OR NMR.PIN = '1' THEN 'X' END AS YesC24Access
--	, CASE WHEN NMR.DirectDeposit = 'Y' THEN 'X' END AS YesDirectDeposit
--	, CASE WHEN NMR.AccountType = 'P' or NMR.AccountType = 'PN' THEN 'X' END AS YesLoanLiner
--	, CASE WHEN SACLN.Sequence != '' THEN 'X' END AS YesSACLN
--	, CASE WHEN SAUGM.Sequence != '' THEN 'X' END AS YesSAUGM
--	, CASE WHEN SAXMS.Sequence != '' THEN 'X' END AS YesSAXMS
--	, CASE WHEN SADRM.Sequence != '' THEN 'X' END AS YesSADRM
--	, CASE WHEN SASSC.Sequence != '' THEN 'X' END AS YesSASSC
--	, CASE WHEN SAMCC.Sequence != '' THEN 'X' END AS YesSAMCC
--	, CASE WHEN SACER.Sequence != '' THEN 'X' END AS YesSACER
--	, CASE WHEN SASBA.Sequence != '' THEN 'X' END AS YesSASBA
--	, CASE WHEN SAIRA.Sequence != '' THEN 'X' END AS YesSAIRA
--	, CASE WHEN LALOC.Sequence != '' THEN 'X' END AS YesLALOC
--	, CASE WHEN LANWA.Sequence != '' OR LAUDA.Sequence != '' OR LANWB.Sequence != '' OR LAUDB.Sequence != '' OR LANWR.Sequence != '' OR LAUDR.Sequence != '' THEN 'X' END AS YesLAVEH
--	, CASE WHEN LAVSC.Sequence != '' OR LAVSG.Sequence != '' OR LAVSP.Sequence != '' THEN 'X' END AS YesLAVISA
--	, CASE WHEN LAMCC.Sequence != '' OR LAMCG.Sequence != '' THEN 'X' END AS YesLAMC
--	, CASE WHEN ATM.Sequence != '' THEN 'X' END AS YesSAATM
--	, CASE WHEN DEBIT.Sequence != '' THEN 'X' END AS YesSAODP
--	, CASE WHEN IVRAccess.Sequence != '' THEN 'X' END AS YesIVR
--	, CASE WHEN LoanPlan.Sequence != '' THEN 'X' END AS YesLP
--	, CASE WHEN LoanPlan.JointName = '' AND LoanPlan.JointSSN = '' THEN 'X' END AS YesLPIndividual
--	, CASE WHEN LoanPlan.JointName != '' OR LoanPlan.JointSSN != '' THEN 'X' END AS YesLPJoint
--	, CASE WHEN LoanPlan.InsuranceCode = '2' OR LoanPlan.InsuranceCode = '3' OR LoanPlan.InsuranceCode = '5' OR LoanPlan.InsuranceCode = '11' THEN 'X' END AS YesCD1
--	, CASE WHEN LoanPlan.InsuranceCode != '2' AND LoanPlan.InsuranceCode != '3' AND LoanPlan.InsuranceCode != '5' AND LoanPlan.InsuranceCode != '11' THEN 'X' END AS NoCD1
--	, CASE WHEN LoanPlan.InsuranceCode = '6' OR LoanPlan.InsuranceCode = '8' OR LoanPlan.InsuranceCode = '9' OR LoanPlan.InsuranceCode = '10' THEN 'X' END AS YesCD2
--	, CASE WHEN LoanPlan.InsuranceCode != '6' AND LoanPlan.InsuranceCode != '8' AND LoanPlan.InsuranceCode != '9' AND LoanPlan.InsuranceCode != '10' THEN 'X' END AS NoCD2
--	, CASE WHEN LoanPlan.InsuranceCode = '1' OR LoanPlan.InsuranceCode = '3' OR LoanPlan.InsuranceCode = '4' OR LoanPlan.InsuranceCode = '5' OR LoanPlan.InsuranceCode = '8' OR LoanPlan.InsuranceCode = '9' THEN 'X' END AS YesCL1
--	, CASE WHEN LoanPlan.InsuranceCode != '1' AND LoanPlan.InsuranceCode != '3' AND LoanPlan.InsuranceCode != '4' AND LoanPlan.InsuranceCode != '5' AND LoanPlan.InsuranceCode != '8' AND LoanPlan.InsuranceCode != '9' THEN 'X' END AS NoCL1
--	, CASE WHEN LoanPlan.InsuranceCode = '4' OR LoanPlan.InsuranceCode = '5' OR LoanPlan.InsuranceCode = '7' OR LoanPlan.InsuranceCode = '8' OR LoanPlan.InsuranceCode = '10' OR LoanPlan.InsuranceCode = '11' THEN 'X' END AS YesCL2
--	, CASE WHEN LoanPlan.InsuranceCode != '4' AND LoanPlan.InsuranceCode != '5' AND LoanPlan.InsuranceCode != '7' AND LoanPlan.InsuranceCode != '8' AND LoanPlan.InsuranceCode != '10' AND LoanPlan.InsuranceCode != '11' THEN 'X' END AS NoCL2
--	, CASE WHEN SAODSAV.Sequence != '' THEN 'X' END AS YesODSAV
	, CASE WHEN SAODSAV.Sequence != '' THEN SAODSAV.OverdraftSequence END AS ODSAV
--	, CASE WHEN SAODMMA.Sequence != '' THEN 'X' END AS YesODMMA
	, CASE WHEN SAODMMA.Sequence != '' THEN SAODMMA.OverdraftSequence END AS ODMMA
--	, CASE WHEN SAODPAL.Sequence != '' THEN 'X' END AS YesODLOC
	, CASE WHEN SAODPAL.Sequence != '' THEN SAODPAL.OverdraftSequence END AS ODLOC
--	, CASE WHEN SAODHEQ.Sequence != '' THEN 'X' END AS YesODHEQ
	, CASE WHEN SAODHEQ.Sequence != '' THEN SAODHEQ.OverdraftSequence END AS ODHEQ
--	, CASE WHEN LAVSP.Sequence != '' THEN Work.EmployerName END AS CCEmployerName
--	, CASE WHEN LAVSP.Sequence != '' THEN Work.JobTitle END AS CCJobTitle
--	, CASE WHEN LAVSP.Sequence != '' THEN Work.ProfessionYears + ' years' END AS CCProfessionYears
--	, CASE WHEN LAVSP.Sequence != '' THEN Work.GrossIncome END AS CCGrossIncome
--	, CASE WHEN LoanPlan.Sequence != '' THEN 'X' END AS YesLoanPlan
--	, CASE WHEN LoanPlan.Sequence != '' AND LoanPlan.JointName = '' THEN 'X' END AS IndividualLoanPlan
--	, CASE WHEN LoanPlan.Sequence != '' AND LoanPlan.JointName != '' THEN 'X' END AS JointLoanPlan
--	, RTRIM(LoanPlan.JointName) AS LPJointName
--	, LEFT(LoanPlan.JointSSN, 3) + '-' + LEFT(RIGHT(LoanPlan.JointSSN, 6), 2) + '-' + RIGHT(LoanPlan.JointSSN, 4) AS LPJointSSN
--	, NMR.Qualification3 AS SEGQualifier
	, CASE WHEN CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (@Param2 IS NULL OR @Param2 <> 'SEG') THEN 'Electronic Consent/Online Account' ELSE '' END AS ElectronicSignature1
	, CASE WHEN CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND RTRIM(LTRIM(JOS1.Suffixes)) != '' AND (@Param2 IS NULL OR @Param2 <> 'SEG') THEN 'Electronic Consent/Online Account' ELSE '' END AS ElectronicSignature2
	, CASE WHEN CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND RTRIM(LTRIM(JOS2.Suffixes)) != '' AND (@Param2 IS NULL OR @Param2 <> 'SEG') THEN 'Electronic Consent/Online Account' ELSE '' END AS ElectronicSignature3
--	, @BasePath + CAST(@TrackingNum AS VARCHAR(16)) + '_Signature.gif' AS imgSignature
--	, @BasePath + CAST(@TrackingNum AS VARCHAR(16)) + '_Date.gif' AS imgDate
FROM NewMemberRequest As NMR
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN NewMemberAddress As AltAddress On NMR.TrackingNum = AltAddress.TrackingNum
	LEFT OUTER JOIN fnSCFed_GetJO(@TrackingNum, @jo1seq) As JO1 ON NMR.TrackingNum = JO1.TrackingNum
	LEFT OUTER JOIN fnSCFed_GetJO(@TrackingNum, @jo2seq) As JO2 ON NMR.TrackingNum = JO2.TrackingNum
	LEFT OUTER JOIN fnSCFed_GetJO(@TrackingNum, @jo3seq) As JO3 ON NMR.TrackingNum = JO3.TrackingNum
	LEFT OUTER JOIN fnSCFed_GetJOType(@TrackingNum, 'JO', 'TR', 'CU', '') AS JOS1 ON NMR.TrackingNum = JOS1.TrackingNum AND JOS1.JointSequence = 1
	LEFT OUTER JOIN fnSCFed_GetJOType(@TrackingNum, 'JO', 'TR', 'CU', '') AS JOS2 ON NMR.TrackingNum = JOS2.TrackingNum AND JOS2.JointSequence = 2
	LEFT OUTER JOIN fnSCFed_GetJOType(@TrackingNum, 'JO', 'TR', 'CU', '') AS JOS3 ON NMR.TrackingNum = JOS3.TrackingNum AND JOS3.JointSequence = 3
	LEFT OUTER JOIN fnSCFed_GetJOType(@TrackingNum, 'PD', '', '', '') AS BES1 ON NMR.TrackingNum = BES1.TrackingNum AND BES1.JointSequence = 1
	LEFT OUTER JOIN fnSCFed_GetJOType(@TrackingNum, 'PD', '', '', '') AS BES2 ON NMR.TrackingNum = BES2.TrackingNum AND BES2.JointSequence = 2
	LEFT OUTER JOIN fnSCFed_GetSuffixList(@TrackingNum) AS AllSuffixes ON NMR.TrackingNum = AllSuffixes.TrackingNum
	LEFT OUTER JOIN fnSCFed_GetPCPlastic(@TrackingNum, 1, 'P') AS ATM ON NMR.TrackingNum = ATM.TrackingNum
	LEFT OUTER JOIN fnSCFed_GetPCPlastic(@TrackingNum, 1, 'C') AS DEBIT ON NMR.TrackingNum = DEBIT.TrackingNum
	LEFT OUTER JOIN fnSCFed_GetSAType(@TrackingNum, 'SAV', 'S') AS SASAV ON NMR.TrackingNum = SASAV.TrackingNum	-- Savings
	LEFT OUTER JOIN fnSCFed_GetSAType(@TrackingNum, 'LTA', 'S') AS SALTA ON NMR.TrackingNum = SALTA.TrackingNum	-- Living Trust
	LEFT OUTER JOIN fnSCFed_GetSAType(@TrackingNum, 'CLN', 'S') AS SACLN ON NMR.TrackingNum = SACLN.TrackingNum	-- Clown Club Savings
	LEFT OUTER JOIN fnSCFed_GetSAType(@TrackingNum, 'TSV', 'S') AS SATSV ON NMR.TrackingNum = SATSV.TrackingNum	-- Teen Savings
	LEFT OUTER JOIN fnSCFed_GetSAType(@TrackingNum, 'MYS', 'S') AS SAMYS ON NMR.TrackingNum = SAMYS.TrackingNum	-- MY Savings
	LEFT OUTER JOIN fnSCFed_GetSAType(@TrackingNum, 'CHK', 'S') AS SACHK ON NMR.TrackingNum = SACHK.TrackingNum	-- Zilch! Checking
	LEFT OUTER JOIN fnSCFed_GetSAType(@TrackingNum, 'SSC', 'S') AS SASSC ON NMR.TrackingNum = SASSC.TrackingNum	-- Senior Service Checking
	LEFT OUTER JOIN fnSCFed_GetSAType(@TrackingNum, 'MCC', 'S') AS SAMCC ON NMR.TrackingNum = SAMCC.TrackingNum	-- Member's Choice Checking
	LEFT OUTER JOIN fnSCFed_GetSAType(@TrackingNum, 'MYC', 'S') AS SAMYC ON NMR.TrackingNum = SAMYC.TrackingNum	-- MY Checking
	LEFT OUTER JOIN fnSCFed_GetSAType(@TrackingNum, 'ISC', 'S') AS SAISC ON NMR.TrackingNum = SAISC.TrackingNum	-- InStep Checking
	LEFT OUTER JOIN fnSCFed_GetSAType(@TrackingNum, 'MMC', 'S') AS SAMMC ON NMR.TrackingNum = SAMMC.TrackingNum	-- Money Market Account
	LEFT OUTER JOIN fnSCFed_GetSAType(@TrackingNum, 'CER', 'S') AS SACER ON NMR.TrackingNum = SACER.TrackingNum	-- Share Certificate
	LEFT OUTER JOIN fnSCFed_GetSAType(@TrackingNum, 'SBA', 'S') AS SASBA ON NMR.TrackingNum = SASBA.TrackingNum	-- Student Banking Account
	LEFT OUTER JOIN fnSCFed_GetSAType(@TrackingNum, 'TCK', 'S') AS SATCK ON NMR.TrackingNum = SATCK.TrackingNum	-- Teen Checking Account
	LEFT OUTER JOIN fnSCFed_GetSAType(@TrackingNum, 'ECK', 'S') AS SAECK ON NMR.TrackingNum = SAECK.TrackingNum	-- eChecking Account
	LEFT OUTER JOIN fnSCFed_GetSAType(@TrackingNum, 'XMS', 'S') AS SAXMS ON NMR.TrackingNum = SAXMS.TrackingNum	-- Christmas Club
	LEFT OUTER JOIN fnSCFed_GetSAType(@TrackingNum, 'DRM', 'S') AS SADRM ON NMR.TrackingNum = SADRM.TrackingNum	-- Dream Club
	LEFT OUTER JOIN fnSCFed_GetSAType(@TrackingNum, 'MYN', 'S') AS SAMYN ON NMR.TrackingNum = SAMYN.TrackingNum	-- MY Whatever Savings
	LEFT OUTER JOIN fnSCFed_GetSAType(@TrackingNum, 'UGM', 'S') AS SAUGM ON NMR.TrackingNum = SAUGM.TrackingNum	-- UGMA
	LEFT OUTER JOIN fnSCFed_GetSAType(@TrackingNum, 'IRA', 'S') AS SAIRA ON NMR.TrackingNum = SAIRA.TrackingNum	-- Individual Retirement Account
	LEFT OUTER JOIN fnSCFed_GetSAType(@TrackingNum, 'LOC', 'L') AS LALOC ON NMR.TrackingNum = LALOC.TrackingNum	-- Personal Access Line Of Credit
	LEFT OUTER JOIN fnSCFed_GetSAType(@TrackingNum, 'NWA', 'L') AS LANWA ON NMR.TrackingNum = LANWA.TrackingNum	-- New Auto
	LEFT OUTER JOIN fnSCFed_GetSAType(@TrackingNum, 'UDA', 'L') AS LAUDA ON NMR.TrackingNum = LAUDA.TrackingNum	-- Used Auto
	LEFT OUTER JOIN fnSCFed_GetSAType(@TrackingNum, 'NWB', 'L') AS LANWB ON NMR.TrackingNum = LANWB.TrackingNum	-- New Boat
	LEFT OUTER JOIN fnSCFed_GetSAType(@TrackingNum, 'UDB', 'L') AS LAUDB ON NMR.TrackingNum = LAUDB.TrackingNum	-- Used Boat
	LEFT OUTER JOIN fnSCFed_GetSAType(@TrackingNum, 'NWR', 'L') AS LANWR ON NMR.TrackingNum = LANWR.TrackingNum	-- New Recreational
	LEFT OUTER JOIN fnSCFed_GetSAType(@TrackingNum, 'UDR', 'L') AS LAUDR ON NMR.TrackingNum = LAUDR.TrackingNum	-- Used Recreational
	LEFT OUTER JOIN fnSCFed_GetSAType(@TrackingNum, 'VSC', 'L') AS LAVSC ON NMR.TrackingNum = LAVSC.TrackingNum	-- Visa Classic
	LEFT OUTER JOIN fnSCFed_GetSAType(@TrackingNum, 'VSG', 'L') AS LAVSG ON NMR.TrackingNum = LAVSG.TrackingNum	-- Visa Gold
	LEFT OUTER JOIN fnSCFed_GetSAType(@TrackingNum, 'VSP', 'L') AS LAVSP ON NMR.TrackingNum = LAVSP.TrackingNum	-- Visa Platinum
	LEFT OUTER JOIN fnSCFed_GetSAType(@TrackingNum, 'MCC', 'L') AS LAMCC ON NMR.TrackingNum = LAMCC.TrackingNum	-- MasterCard Classic
	LEFT OUTER JOIN fnSCFed_GetSAType(@TrackingNum, 'MCG', 'L') AS LAMCG ON NMR.TrackingNum = LAMCG.TrackingNum	-- MasterCard Gold
	LEFT OUTER JOIN fnSCFed_GetSAType(@TrackingNum, 'BUS', 'S') AS SABUS ON NMR.TrackingNum = SABUS.TrackingNum	-- Business/Organizational Savings
	LEFT OUTER JOIN fnSCFed_GetSAType(@TrackingNum, 'BCK', 'S') AS SABCK ON NMR.TrackingNum = SABCK.TrackingNum	-- Business/Organizational Checking
	LEFT OUTER JOIN fnSCFed_GetSAType(@TrackingNum, 'BCP', 'S') AS SABCP ON NMR.TrackingNum = SABCP.TrackingNum	-- Business/Organizational Checking Plus
	LEFT OUTER JOIN fnSCFed_GetSAType(@TrackingNum, 'xxx', 'S') AS SAxxx ON NMR.TrackingNum = SAxxx.TrackingNum	-- MasterMoney Check/ATM Card
	LEFT OUTER JOIN fnSCFed_GetSAType(@TrackingNum, 'SLF', 'S') AS SASLF ON NMR.TrackingNum = SASLF.TrackingNum	-- Self Service Checking
	LEFT OUTER JOIN fnSCFed_GetSAType(@TrackingNum, 'SIM', 'S') AS SASIM ON NMR.TrackingNum = SASIM.TrackingNum	-- Simple Checking
	LEFT OUTER JOIN fnSCFed_GetSAType(@TrackingNum, 'PRM', 'S') AS SAPRM ON NMR.TrackingNum = SAPRM.TrackingNum	-- Premium Checking
	LEFT OUTER JOIN fnSCFed_GetIVR(@TrackingNum) AS IVRAccess ON NMR.TrackingNum = IVRAccess.TrackingNum		-- Teller Talk
	LEFT OUTER JOIN fnSCFed_GetLP(@TrackingNum) AS LoanPlan ON NMR.TrackingNum = LoanPlan.TrackingNum		-- Loan Plans
	LEFT OUTER JOIN fnSCFed_GetSAODP(@TrackingNum, '', '', '') AS SAODP ON NMR.TrackingNum = SAODP.TrackingNum
	LEFT OUTER JOIN fnSCFed_GetSAODP(@TrackingNum, 'PSA', '', 'S') AS SAODSAV ON NMR.TrackingNum = SAODSAV.TrackingNum
	LEFT OUTER JOIN fnSCFed_GetSAODP(@TrackingNum, 'RSA', '', 'S') AS SAODMMA ON NMR.TrackingNum = SAODMMA.TrackingNum
	LEFT OUTER JOIN fnSCFed_GetSAODP(@TrackingNum, 'LOC', '', 'L') AS SAODPAL ON NMR.TrackingNum = SAODPAL.TrackingNum
	LEFT OUTER JOIN fnSCFed_GetSAODP(@TrackingNum, 'HE', '', 'L') AS SAODHEQ ON NMR.TrackingNum = SAODHEQ.TrackingNum
WHERE NMR.TrackingNum = @TrackingNum
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSCFed_D20Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spSCFed_D20Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
--Declare @TrackingNum int
--DROP TABLE #docs
--DEALLOCATE curs
--Set @TrackingNum = 1477
Declare @docsubname char(100)
Declare @newdocsub char(100)
Declare @count int
Declare @docindex int
--CREATE TABLE #docs(docindex int identity Primary Key, docsubname char(100))
Declare curs CURSOR FOR
	SELECT '' AS docsubname
	FROM NewMemberRequest AS NMR INNER JOIN NewMemberSubAccount AS SA ON NMR.TrackingNum = SA.TrackingNum
	WHERE NMR.TrackingNum = @TrackingNum AND NMR.Processed = 999 AND NMR.AccountType IN ('I','Y','JA') AND NMR.Preapproval NOT LIKE '%CHK%' AND SA.ProductType = 'SDA' AND SA.Created = 'Y' AND 'TRUE' = 'FALSE' AND @Param1 =  ''
--IF @@ROWCOUNT = 0
OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @newdocsub = 'Courtesy Pay Denial (Checking Approved) ' + @docsubname
IF @docsubname Is Null
BEGIN
	SET @newdocsub = 'Courtesy Pay Denial (Checking Approved)'
END
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count
      	IF @count = 1
	BEGIN
		Set @docindex = @docindex + 1
     		 INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END
      	FETCH NEXT FROM curs INTO @docsubname
	PRINT @docsubname
	IF @@FETCH_STATUS = 0
	BEGIN
		SET @newdocsub = (RTRIM(@newdocsub) + ', ' + RTRIM(@docsubname))
		PRINT @newdocsub
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex
	END
   END
CLOSE curs
DEALLOCATE curs
Select *, (SELECT DocName FROM udt_Doc WHERE DocNum = 20) AS ScanName FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Delete FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSCFed_D20Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [IMS].[spSCFed_D20Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

SELECT @DocIndex As DocIndex
	--, BE1.fullname AS BE1fullname, BE1.fulladdress AS BE1fulladdress, BE1.DOB AS BE1DOB, BE1.Relationship AS BE1Relationship, CASE LEN(BE1.Suffix) WHEN 2 THEN BE1.Suffix WHEN 1 THEN '0' + BE1.Suffix ELSE 'NA' END AS BE1Suffix
	--, BE2.fullname AS BE2fullname, BE2.fulladdress AS BE2fulladdress, BE2.DOB AS BE2DOB, BE2.Relationship AS BE2Relationship, CASE LEN(BE2.Suffix) WHEN 2 THEN BE2.Suffix WHEN 1 THEN '0' + BE2.Suffix ELSE 'NA' END AS BE2Suffix
	--, BE3.fullname AS BE3fullname, BE3.fulladdress AS BE3fulladdress, BE3.DOB AS BE3DOB, BE3.Relationship AS BE3Relationship, CASE LEN(BE3.Suffix) WHEN 2 THEN BE3.Suffix WHEN 1 THEN '0' + BE3.Suffix ELSE 'NA' END AS BE3Suffix
FROM NewMemberRequest As NMR
	--INNER JOIN udt_AccountTypes AS AType On NMR.AccountType = AType.TypeCode
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
	--LEFT OUTER JOIN fnSCFed_GetJOType(@TrackingNum, 'PD', '') AS BE1 ON NMR.TrackingNum = BE1.TrackingNum AND BE1.JointSequence = 1
	--LEFT OUTER JOIN fnSCFed_GetJOType(@TrackingNum, 'PD', '') AS BE2 ON NMR.TrackingNum = BE2.TrackingNum AND BE2.JointSequence = 2
	--LEFT OUTER JOIN fnSCFed_GetJOType(@TrackingNum, 'PD', '') AS BE3 ON NMR.TrackingNum = BE3.TrackingNum AND BE3.JointSequence = 3
WHERE NMR.TrackingNum = @TrackingNum


Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSCFed_D21Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spSCFed_D21Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
--Declare @TrackingNum int
--DROP TABLE #docs
--DEALLOCATE curs
--Set @TrackingNum = 1477
Declare @docsubname char(100)
Declare @newdocsub char(100)
Declare @count int
Declare @docindex int
--CREATE TABLE #docs(docindex int identity Primary Key, docsubname char(100))
Declare curs CURSOR FOR
	SELECT '' AS docsubname
	FROM NewMemberRequest AS NMR
	WHERE NMR.TrackingNum = @TrackingNum AND NMR.Processed = 999 AND NMR.Created = 'Y' AND NMR.AccountType IN ('I','Y','JA') AND NMR.Preapproval NOT LIKE '%CHK%' AND NMR.Preapproval NOT LIKE '%ISC%' AND 'TRUE' = 'FALSE' AND @Param1 =  ''
--IF @@ROWCOUNT = 0
OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @newdocsub = 'Courtesy Pay Denial (Checking Denied) ' + @docsubname
IF @docsubname Is Null
BEGIN
	SET @newdocsub = 'Courtesy Pay Denial (Checking Denied)'
END
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count
      	IF @count = 1
	BEGIN
		Set @docindex = @docindex + 1
     		 INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END
      	FETCH NEXT FROM curs INTO @docsubname
	PRINT @docsubname
	IF @@FETCH_STATUS = 0
	BEGIN
		SET @newdocsub = (RTRIM(@newdocsub) + ', ' + RTRIM(@docsubname))
		PRINT @newdocsub
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex
	END
   END
CLOSE curs
DEALLOCATE curs
Select *, (SELECT DocName FROM udt_Doc WHERE DocNum = 21) AS ScanName FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Delete FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSCFed_D21Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [IMS].[spSCFed_D21Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

SELECT @DocIndex As DocIndex
	--, BE1.fullname AS BE1fullname, BE1.fulladdress AS BE1fulladdress, BE1.DOB AS BE1DOB, BE1.Relationship AS BE1Relationship, CASE LEN(BE1.Suffix) WHEN 2 THEN BE1.Suffix WHEN 1 THEN '0' + BE1.Suffix ELSE 'NA' END AS BE1Suffix
	--, BE2.fullname AS BE2fullname, BE2.fulladdress AS BE2fulladdress, BE2.DOB AS BE2DOB, BE2.Relationship AS BE2Relationship, CASE LEN(BE2.Suffix) WHEN 2 THEN BE2.Suffix WHEN 1 THEN '0' + BE2.Suffix ELSE 'NA' END AS BE2Suffix
	--, BE3.fullname AS BE3fullname, BE3.fulladdress AS BE3fulladdress, BE3.DOB AS BE3DOB, BE3.Relationship AS BE3Relationship, CASE LEN(BE3.Suffix) WHEN 2 THEN BE3.Suffix WHEN 1 THEN '0' + BE3.Suffix ELSE 'NA' END AS BE3Suffix
FROM NewMemberRequest As NMR
	--INNER JOIN udt_AccountTypes AS AType On NMR.AccountType = AType.TypeCode
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
	--LEFT OUTER JOIN fnSCFed_GetJOType(@TrackingNum, 'PD', '') AS BE1 ON NMR.TrackingNum = BE1.TrackingNum AND BE1.JointSequence = 1
	--LEFT OUTER JOIN fnSCFed_GetJOType(@TrackingNum, 'PD', '') AS BE2 ON NMR.TrackingNum = BE2.TrackingNum AND BE2.JointSequence = 2
	--LEFT OUTER JOIN fnSCFed_GetJOType(@TrackingNum, 'PD', '') AS BE3 ON NMR.TrackingNum = BE3.TrackingNum AND BE3.JointSequence = 3
WHERE NMR.TrackingNum = @TrackingNum


Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSCFed_D22Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [IMS].[spSCFed_D22Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
--Declare @TrackingNum int
--DROP TABLE #docs
--DEALLOCATE curs
--Set @TrackingNum = 1477
Declare @docsubname char(100)
Declare @newdocsub char(100)
Declare @count int
Declare @docindex int
--CREATE TABLE #docs(docindex int identity Primary Key, docsubname char(100))
Declare curs CURSOR FOR
	SELECT '' AS docsubname
	FROM NewMemberRequest AS NMR
	WHERE NMR.TrackingNum = @TrackingNum AND NMR.Processed = 999 AND NMR.Created = 'Y' AND NMR.AccountType IN ('I','E','T','S', 'Y','TC') AND NMR.Preapproval LIKE '%ISC%' AND 'TRUE' = 'FALSE' AND @Param1 =  ''
--IF @@ROWCOUNT = 0
OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @newdocsub = 'Adverse Action InStep Checking Letter ' + @docsubname
IF @docsubname Is Null
BEGIN
	SET @newdocsub = 'Adverse Action InStep Checking Letter'
END
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count
      	IF @count = 1
	BEGIN
		Set @docindex = @docindex + 1
     		 INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END
      	FETCH NEXT FROM curs INTO @docsubname
	PRINT @docsubname
	IF @@FETCH_STATUS = 0
	BEGIN
		SET @newdocsub = (RTRIM(@newdocsub) + ', ' + RTRIM(@docsubname))
		PRINT @newdocsub
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex
	END
   END
CLOSE curs
DEALLOCATE curs
Select *, (SELECT DocName FROM udt_Doc WHERE DocNum = 22) AS ScanName FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Delete FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSCFed_D22Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spSCFed_D22Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

SELECT @DocIndex As DocIndex
	--, BE1.fullname AS BE1fullname, BE1.fulladdress AS BE1fulladdress, BE1.DOB AS BE1DOB, BE1.Relationship AS BE1Relationship, CASE LEN(BE1.Suffix) WHEN 2 THEN BE1.Suffix WHEN 1 THEN '0' + BE1.Suffix ELSE 'NA' END AS BE1Suffix
	--, BE2.fullname AS BE2fullname, BE2.fulladdress AS BE2fulladdress, BE2.DOB AS BE2DOB, BE2.Relationship AS BE2Relationship, CASE LEN(BE2.Suffix) WHEN 2 THEN BE2.Suffix WHEN 1 THEN '0' + BE2.Suffix ELSE 'NA' END AS BE2Suffix
	--, BE3.fullname AS BE3fullname, BE3.fulladdress AS BE3fulladdress, BE3.DOB AS BE3DOB, BE3.Relationship AS BE3Relationship, CASE LEN(BE3.Suffix) WHEN 2 THEN BE3.Suffix WHEN 1 THEN '0' + BE3.Suffix ELSE 'NA' END AS BE3Suffix
FROM NewMemberRequest As NMR
	--INNER JOIN udt_AccountTypes AS AType On NMR.AccountType = AType.TypeCode
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
	--LEFT OUTER JOIN fnSCFed_GetJOType(@TrackingNum, 'PD', '') AS BE1 ON NMR.TrackingNum = BE1.TrackingNum AND BE1.JointSequence = 1
	--LEFT OUTER JOIN fnSCFed_GetJOType(@TrackingNum, 'PD', '') AS BE2 ON NMR.TrackingNum = BE2.TrackingNum AND BE2.JointSequence = 2
	--LEFT OUTER JOIN fnSCFed_GetJOType(@TrackingNum, 'PD', '') AS BE3 ON NMR.TrackingNum = BE3.TrackingNum AND BE3.JointSequence = 3
WHERE NMR.TrackingNum = @TrackingNum


Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSCFed_D23Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [IMS].[spSCFed_D23Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @docsubname CHAR(100)
DECLARE @newdocsub CHAR(100)
DECLARE @count INT
DECLARE @docindex INT
DECLARE @JOSeq INT

DECLARE curs CURSOR FOR
	SELECT 0 AS JOSeq, RTRIM(RTRIM(NMR.FName) + ' ' + RTRIM(NMR.LName) + RTRIM(NMR.OrganizationName)) AS docsubname
	FROM IMS.NewMemberRequest AS NMR LEFT JOIN
		IMS.NewMemberCreditReport CR ON NMR.TrackingNum = CR.TrackingNum AND CR.JointSequence = 0
	WHERE NMR.TrackingNum = @TrackingNum AND @Param1 = '23' AND ((PATINDEX('%SAV,%',CR.CBDecision) = 0 OR PATINDEX('%CHK,%',CR.CBDecision) = 0)
		OR (@ApplicationMode = 'EXTERNAL' AND (SELECT COUNT(*) FROM NewMemberSubAccount SA WHERE SA.TrackingNum = @TrackingNum AND SA.Approval = 'D') > 0))

	UNION

	SELECT JO.Sequence AS JOSeq, RTRIM(RTRIM(JO.FName) + ' ' + RTRIM(JO.LName)) AS docsubname
	FROM IMS.NewMemberJointOwner AS JO INNER JOIN
		IMS.NewMemberCreditReport CR ON JO.TrackingNum = CR.TrackingNum AND JO.Sequence = CR.JointSequence
	LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = JO.TrackingNum
	WHERE JO.Trackingnum = @TrackingNum AND @Param1 = '23' AND (PATINDEX('%SAV,%',CR.CBDecision) = 0 OR PATINDEX('%CHK,%',CR.CBDecision) = 0 OR JO.CreateHost = 'N') AND @ApplicationMode = ''

OPEN curs
FETCH NEXT FROM curs INTO @JOSeq, @docsubname
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count
--	IF @count = 1
--	BEGIN
		SET @docindex = @docindex + 1
		SET @newdocsub = 'Adverse Action Letter for ' + @docsubname
		INSERT INTO IMS.NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
--	END
      	FETCH NEXT FROM curs INTO @JOSeq, @docsubname

	IF @docsubname != NULL
	BEGIN
		SET @newdocsub = @newdocsub + ', ' + @docsubname
		UPDATE IMS.NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex AND TrackingNum = @TrackingNum
	END
   END
CLOSE curs
DEALLOCATE curs
SELECT *, (SELECT DocName FROM udt_Doc WHERE DocNum = 23) AS ScanName FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
DELETE FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSCFed_D23Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [IMS].[spSCFed_D23Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @DisplayNameTemp VARCHAR(30)
DECLARE @DisplayName VARCHAR(30)
DECLARE @JOSeqTemp INTEGER
DECLARE @JOSeq INTEGER
DECLARE @count INT

DECLARE curs2 CURSOR FOR
	SELECT 0 AS JOSeq, RTRIM(RTRIM(NMR.FName) + ' ' + RTRIM(NMR.LName) + RTRIM(NMR.OrganizationName)) AS DisplayName
	FROM IMS.NewMemberRequest AS NMR LEFT JOIN
		IMS.NewMemberCreditReport CR ON NMR.TrackingNum = CR.TrackingNum AND CR.JointSequence = 0
	WHERE NMR.TrackingNum = @TrackingNum AND @Param1 = '23' AND ((PATINDEX('%SAV,%',CR.CBDecision) = 0 OR PATINDEX('%CHK,%',CR.CBDecision) = 0)
		OR (@ApplicationMode = 'EXTERNAL' AND (SELECT COUNT(*) FROM NewMemberSubAccount SA WHERE SA.TrackingNum = @TrackingNum AND SA.Approval = 'D') > 0))

	UNION

	SELECT JO.Sequence AS JOSeq, RTRIM(RTRIM(JO.FName) + ' ' + RTRIM(JO.LName)) AS DisplayName
	FROM IMS.NewMemberJointOwner AS JO INNER JOIN
		IMS.NewMemberCreditReport CR ON JO.TrackingNum = CR.TrackingNum AND JO.Sequence = CR.JointSequence
	LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = JO.TrackingNum
	WHERE JO.Trackingnum = @TrackingNum AND @Param1 = '23' AND (PATINDEX('%SAV,%',CR.CBDecision) = 0 OR PATINDEX('%CHK,%',CR.CBDecision) = 0 OR JO.CreateHost = 'N') AND @ApplicationMode = ''

OPEN curs2
FETCH NEXT FROM curs2 INTO @JOSeqTemp, @DisplayNameTemp
SET @count = 1
PRINT @@FETCH_STATUS
	WHILE @@FETCH_STATUS = 0
	BEGIN
		IF (@count = @DocIndex)
		BEGIN
			SET @JOSeq = @JOSeqTemp
			SET @DisplayName = @DisplayNameTemp
		END
		FETCH NEXT FROM curs2 INTO @JOSeqTemp, @DisplayNameTemp
	SET @count = @count + 1
	PRINT @count
	END
CLOSE curs2
DEALLOCATE curs2

IF (@JOSeq = 0)
BEGIN
	SELECT @DocIndex AS DocIndex
		, @JOSeq AS JOSeq
		, @DisplayName AS DisplayName
		, CR.JointSequence

		, CASE NMR.AccountClass WHEN 'P' THEN UPPER(RTRIM(RTRIM(NMR.FName) + ' ' + RTRIM(NMR.LName) + ' ' + NMR.MECHTag)) ELSE UPPER(RTRIM(NMR.OrganizationName)) END AS FullName
--		NMR ADDRESS LINE FILLED IN FROM sp_DP1Fields
--		NMR CITYSTATEZIP LINE FILLED IN FROM sp_DP1Fields
		, CASE NMR.AccountClass WHEN 'P' THEN 'Dear ' + RTRIM(RTRIM(NMR.FName) + ' ' + RTRIM(NMR.LName) + ' ' + NMR.MECHTag) + ':' ELSE 'Dear ' + RTRIM(NMR.OrganizationName) + ':' END AS DearName
		, DATENAME(MM, CR.DatePulled) + ' ' + CAST(DAY(CR.DatePulled) AS VARCHAR(2)) + ', ' + CAST(YEAR(CR.DatePulled) AS VARCHAR(4)) AS CreatedOn
		, CR.CBScore AS CreditScore
		, LTrim(Str(Month(CR.DatePulled))) + '/' + LTrim(Str(Day(CR.DatePulled))) + '/' + LTrim(Str(Year(CR.DatePulled))) AS CreditDate
--		, '300' AS ScoreRangeLow
		, BEACON.ScoreRangeLow AS ScoreRangeLow
--		, '850' AS ScoreRangeHigh
		, BEACON.ScoreRangeHigh AS ScoreRangeHigh
		, CASE WHEN REASON1.Description <> '' THEN CHAR(149) + ' ' +  RTRIM(REASON1.Description) ELSE '' END AS KeyFactor1
		, CASE WHEN REASON2.Description <> '' THEN CHAR(149) + ' ' +  RTRIM(REASON2.Description) ELSE '' END AS KeyFactor2
		, CASE WHEN REASON3.Description <> '' THEN CHAR(149) + ' ' +  RTRIM(REASON3.Description) ELSE '' END AS KeyFactor3
		, CASE WHEN REASON4.Description <> '' THEN CHAR(149) + ' ' +  RTRIM(REASON4.Description) ELSE '' END AS KeyFactor4
		, CASE WHEN BEACON.InquiriesKeyFactor = 'Y' THEN CHAR(149) + ' The number of inquiries were a key factor in determining the credit score.' ELSE '' END AS KeyFactor5
		, CASE WHEN ISNULL(CR.CBScore, '') = '' THEN 'If the above information is blank, no credit score is available.' END AS BlankMessage
	FROM IMS.NewMemberRequest AS NMR
		LEFT OUTER JOIN IMS.NewMemberCreditReport AS CR ON CR.TrackingNum = NMR.TrackingNum AND CR.JointSequence = 0
		LEFT OUTER JOIN IMS.EquifaxBeacon AS BEACON ON BEACON.TrackingNum = CR.CBTracking
		LEFT OUTER JOIN IMS.EquifaxDictionary AS REASON1 ON REASON1.Category = 'BeaconReason' AND REASON1.Code = BEACON.ReasonCode1
		LEFT OUTER JOIN IMS.EquifaxDictionary AS REASON2 ON REASON2.Category = 'BeaconReason' AND REASON2.Code = BEACON.ReasonCode2
		LEFT OUTER JOIN IMS.EquifaxDictionary AS REASON3 ON REASON3.Category = 'BeaconReason' AND REASON3.Code = BEACON.ReasonCode3
		LEFT OUTER JOIN IMS.EquifaxDictionary AS REASON4 ON REASON4.Category = 'BeaconReason' AND REASON4.Code = BEACON.ReasonCode4
	WHERE NMR.TrackingNum = @TrackingNum
END
ELSE
BEGIN
	SELECT @DocIndex AS DocIndex
		, @JOSeq AS JOSeq
		, @DisplayName AS DisplayName
		, CR.JointSequence

		, UPPER(RTRIM(RTRIM(JO.FName) + ' ' + RTRIM(JO.LName))) AS FullName
		, UPPER(RTRIM(RTRIM(JO.Address1) + CASE ISNULL(JO.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(JO.Address2) END + CASE ISNULL(JO.Address3, '') WHEN '' THEN ' ' ELSE ', ' + RTRIM(JO.Address3) END)) AS Address
		, UPPER(RTRIM(JO.City) + ', ' + JO.State + ' ' + CASE LEN(JO.Zip) WHEN 9 THEN LEFT(JO.Zip, 5) + '-' + Right(JO.Zip, 4) ELSE JO.Zip END) AS CityStateZip
		, 'Dear ' + RTRIM(RTRIM(JO.FName) + ' ' + RTRIM(JO.LName)) + ':' AS DearName
		, DATENAME(MM, CR.DatePulled) + ' ' + CAST(DAY(CR.DatePulled) AS VARCHAR(2)) + ', ' + CAST(YEAR(CR.DatePulled) AS VARCHAR(4)) AS CreatedOn
		, CR.CBScore AS CreditScore
		, LTrim(Str(Month(CR.DatePulled))) + '/' + LTrim(Str(Day(CR.DatePulled))) + '/' + LTrim(Str(Year(CR.DatePulled))) AS CreditDate
--		, '300' AS ScoreRangeLow
		, BEACON.ScoreRangeLow AS ScoreRangeLow
--		, '850' AS ScoreRangeHigh
		, BEACON.ScoreRangeHigh AS ScoreRangeHigh
		, CASE WHEN REASON1.Description <> '' THEN CHAR(149) + ' ' +  RTRIM(REASON1.Description) ELSE '' END AS KeyFactor1
		, CASE WHEN REASON2.Description <> '' THEN CHAR(149) + ' ' +  RTRIM(REASON2.Description) ELSE '' END AS KeyFactor2
		, CASE WHEN REASON3.Description <> '' THEN CHAR(149) + ' ' +  RTRIM(REASON3.Description) ELSE '' END AS KeyFactor3
		, CASE WHEN REASON4.Description <> '' THEN CHAR(149) + ' ' +  RTRIM(REASON4.Description) ELSE '' END AS KeyFactor4
		, CASE WHEN BEACON.InquiriesKeyFactor = 'Y' THEN CHAR(149) + ' The number of inquiries were a key factor in determining the credit score.' ELSE '' END AS KeyFactor5
		, CASE WHEN ISNULL(CR.CBScore, '') = '' THEN 'If the above information is blank, no credit score is available.' END AS BlankMessage
	FROM IMS.NewMemberJointOwner AS JO
		LEFT OUTER JOIN IMS.NewMemberCreditReport AS CR ON CR.TrackingNum = JO.TrackingNum AND CR.JointSequence = JO.Sequence
		LEFT OUTER JOIN IMS.EquifaxBeacon AS BEACON ON BEACON.TrackingNum = CR.CBTracking
		LEFT OUTER JOIN IMS.EquifaxDictionary AS REASON1 ON REASON1.Category = 'BeaconReason' AND REASON1.Code = BEACON.ReasonCode1
		LEFT OUTER JOIN IMS.EquifaxDictionary AS REASON2 ON REASON2.Category = 'BeaconReason' AND REASON2.Code = BEACON.ReasonCode2
		LEFT OUTER JOIN IMS.EquifaxDictionary AS REASON3 ON REASON3.Category = 'BeaconReason' AND REASON3.Code = BEACON.ReasonCode3
		LEFT OUTER JOIN IMS.EquifaxDictionary AS REASON4 ON REASON4.Category = 'BeaconReason' AND REASON4.Code = BEACON.ReasonCode4
	WHERE JO.TrackingNum = @TrackingNum AND JO.Sequence = @JOSeq
END

Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSCFed_D2Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO


CREATE PROCEDURE [IMS].[spSCFed_D2Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
--Declare @TrackingNum int
--DROP TABLE #docs
--DEALLOCATE curs
--Set @TrackingNum = 0	-- TEMPORARILY REMOVED FROM DOCUMENT LIST

Declare @docsubname char(100)
Declare @newdocsub char(200)
Declare @count int
Declare @docindex int


--CREATE TABLE #docs(docindex int identity Primary Key, docsubname char(100))

Declare curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT '' AS docsubname
	FROM NewMemberRequest AS NMR
	WHERE NMR.TrackingNum = @TrackingNum AND NMR.Processed = 999 AND @Param1 =  ''

--IF @@ROWCOUNT = 0

OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @newdocsub = 'Rate And Fee Schedule'-- for Suffix(s) ' + CASE LEN(@docsubname) WHEN 2 THEN @docsubname WHEN 1 THEN '0' + @docsubname ELSE 'NA' END
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count

      	IF @count = 1
	BEGIN
		Set @docindex = @docindex + 1
     		 INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END

      	FETCH NEXT FROM curs INTO @docsubname

	IF @docsubname != NULL
	BEGIN
		SET @newdocsub = @newdocsub + ', ' + @docsubname
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex AND TrackingNum = @TrackingNum
	END
   END

CLOSE curs
DEALLOCATE curs

Select *, (SELECT DocName FROM udt_Doc WHERE DocNum = 2) AS ScanName FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Delete FROM NewMemberDoc WHERE TrackingNum = @TrackingNum

--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSCFed_D2Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [IMS].[spSCFed_D2Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

SELECT @DocIndex As DocIndex
	--, BE1.fullname AS BE1fullname, BE1.fulladdress AS BE1fulladdress, BE1.DOB AS BE1DOB, BE1.Relationship AS BE1Relationship, CASE LEN(BE1.Suffix) WHEN 2 THEN BE1.Suffix WHEN 1 THEN '0' + BE1.Suffix ELSE 'NA' END AS BE1Suffix
	--, BE2.fullname AS BE2fullname, BE2.fulladdress AS BE2fulladdress, BE2.DOB AS BE2DOB, BE2.Relationship AS BE2Relationship, CASE LEN(BE2.Suffix) WHEN 2 THEN BE2.Suffix WHEN 1 THEN '0' + BE2.Suffix ELSE 'NA' END AS BE2Suffix
	--, BE3.fullname AS BE3fullname, BE3.fulladdress AS BE3fulladdress, BE3.DOB AS BE3DOB, BE3.Relationship AS BE3Relationship, CASE LEN(BE3.Suffix) WHEN 2 THEN BE3.Suffix WHEN 1 THEN '0' + BE3.Suffix ELSE 'NA' END AS BE3Suffix
FROM NewMemberRequest As NMR
	--INNER JOIN udt_AccountTypes AS AType On NMR.AccountType = AType.TypeCode
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
	--LEFT OUTER JOIN fnSCFed_GetJOType(@TrackingNum, 'PD', '') AS BE1 ON NMR.TrackingNum = BE1.TrackingNum AND BE1.JointSequence = 1
	--LEFT OUTER JOIN fnSCFed_GetJOType(@TrackingNum, 'PD', '') AS BE2 ON NMR.TrackingNum = BE2.TrackingNum AND BE2.JointSequence = 2
	--LEFT OUTER JOIN fnSCFed_GetJOType(@TrackingNum, 'PD', '') AS BE3 ON NMR.TrackingNum = BE3.TrackingNum AND BE3.JointSequence = 3
WHERE NMR.TrackingNum = @TrackingNum


Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSCFed_D30Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spSCFed_D30Enable] @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @docsubname CHAR(100)
DECLARE @newdocsub CHAR(100)
DECLARE @count INT
DECLARE @docindex INT

DECLARE curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT '' AS docsubname
	FROM NewMemberJointOwner AS JO
	RIGHT OUTER JOIN NewMemberRequest AS NMR ON JO.TrackingNum = NMR.TrackingNum
	LEFT JOIN NewMemberSubAccount AS SA ON SA.TrackingNum = NMR.TrackingNum
	WHERE NMR.TrackingNum = @TrackingNum AND NMR.Processed = 999
		AND (
			JO.JointOwnerType = 'BE'
			OR (NMR.Created = 'I' AND ((SA.Created = 'Y' AND SA.ProductType <> 'CERT') OR JO.CreateHost = ''))
			OR (NMR.AccountType = 'MU' AND SA.ProductType = 'SDA')
			)
		AND 1=0

OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @newdocsub = 'Account Change Form ' + @docsubname
IF @docsubname Is Null
BEGIN
	SET @newdocsub = 'Account Change Form'
END
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
WHILE @@FETCH_STATUS = 0
BEGIN
	SET @count = @count + 1
	PRINT @count
		IF @count = 1
	BEGIN
		SET @docindex = @docindex + 1
		INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END
		FETCH NEXT FROM curs INTO @docsubname
	PRINT @docsubname
	IF @@FETCH_STATUS = 0
	BEGIN
		SET @newdocsub = (RTRIM(@newdocsub) + '' + RTRIM(@docsubname))
		PRINT @newdocsub
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex
	END
END
CLOSE curs
DEALLOCATE curs
SELECT * FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
DELETE FROM NewMemberDoc WHERE TrackingNum = @TrackingNum

Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSCFed_D30Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spSCFed_D30Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
Declare @seq int
Declare @seq1 int
Declare @count int
--Set @jo1seq = 1
--Set @jo2seq = 1
--Set @jo3seq = 1
--Set @jo4seq = 1


--CREATE TABLE #docs(id int identity Primary Key, docindex int, j1FullName char(100), j1FullAddress char(100), j1FullPhone char(12), j1DOB char(10), j1SSN char(11), j1ID char(20), j1IDIssueDate  char(10), j1IDExpDate  char(10), j1IDState  char(2), j2FullName char(100), j2FullAddress char(100), j2FullPhone char(11), j2DOB char(10), j2SSN char(11), j2ID char(20), j2IDIssueDate  char(10), j2IDExpDate  char(10), j2IDState  char(2), j3FullName char(100), j3FullAddress char(100), j3FullPhone char(11), j3DOB char(10), j3SSN char(11), j3ID char(20), j3IDIssueDate  char(10), j3IDExpDate  char(10), j3IDState  char(2), j4FullName char(100), j4FullAddress char(100), j4FullPhone char(11), j4DOB char(10), j4SSN char(11), j4ID char(20), j4IDIssueDate  char(10), j4IDExpDate  char(10), j4IDState  char(2))

Declare curs2 CURSOR FOR
	SELECT  CONVERT(int, SA.Sequence)
	FROM NewMemberRequest AS NMR
	INNER JOIN NewMemberPlasticCard AS PC ON NMR.TrackingNum = PC.TrackingNum
	INNER JOIN NewMemberSubAccount AS SA ON PC.TrackingNum = SA.TrackingNum AND PC.Sequence =  SA.PlasticCardLink
	WHERE NMR.TrackingNum = @TrackingNum AND PC.TypeCode != 'P' AND PC.TypeCode != 'C' AND PC.Created = 'Y'


--IF @@ROWCOUNT = 0

OPEN curs2
FETCH NEXT FROM curs2 INTO @seq
SET @count = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN

      	IF (@count = 0 AND @DocIndex = 1)
		BEGIN
			Set @seq1 = @seq
		END
	IF (@count = 1 AND @DocIndex = 2) 
		BEGIN
			Set @seq1 = @seq		
		END
	IF (@count = 2 AND @DocIndex = 3)
		BEGIN
			Set @seq1 = @seq		
		END
	IF (@count = 3 AND @DocIndex = 4)
		BEGIN
			Set @seq1 = @seq		
		END
	IF (@count = 4 AND @DocIndex = 5)
		BEGIN
			Set @seq1 = @seq		
		END
	IF (@count = 5 AND @DocIndex = 6)
		BEGIN
			Set @seq1 = @seq		
		END
	IF (@count = 6 AND @DocIndex = 7)
		BEGIN
			Set @seq1 = @seq		
		END
	IF (@count = 7 AND @DocIndex = 8)
		BEGIN
			Set @seq1 = @seq		
		END

      	FETCH NEXT FROM curs2 INTO @seq
	SET @count = @count + 1
	PRINT @count
   END

CLOSE curs2
DEALLOCATE curs2

SELECT @DocIndex As DocIndex
	, RTRIM(NMR.Account) + '-' + RIGHT('0' + RTRIM(LTRIM(CONVERT(char(2), SA.Suffix))), 2) AS AccountSuffix
	, RTRIM(PC.PAN) AS PAN
	, CAST(CAST(LEFT(SA.APR, 4) AS int) * 0.01 AS Decimal(10,2)) AS APR
	, CAST((CAST(LEFT(SA.APR, 4) AS int)* 0.01)/12 AS Decimal(10,4)) AS MPR
--	, RTRIM(RTRIM(CAST(NMR.Account AS VARCHAR(20)))) + '-' + RIGHT(('00' + RTRIM(SA.Suffix)),2) AS AccountPlusSuffix
--	, CAST((CAST(SA.APR AS int)*.0001)/365 AS Decimal(10,8)) AS DPR
--	, CAST(CAST(SA.APR AS int) * 0.0001 AS Decimal(10,4)) AS APR
--	, CASE WHEN SA.LineOfCredit = 'Y' THEN '0.00' ELSE RTRIM(CAST(CONVERT(money,SA.Amount *.01, 2) AS VARCHAR(10))) END AS NewBalance
--	, '0.00' AS AmountAdvanced
--	, RTRIM(CAST(CONVERT(money,SA.Payment *.01, 1) AS VARCHAR(10))) AS PaymentAmount
--	, SA.DueDate
--	,  SA.Method + '-' +
--	  CASE SA.Frequency
--	     	WHEN 'W'  THEN 'WEEKLY'
--		WHEN 'B' THEN 'BI-WEEKLY'
--		WHEN 'M' THEN 'MONTHLY'
--		WHEN 'S' THEN 'SEMI-MONTHLY'
--		WHEN 'Y' THEN 'YEARLY'
--		WHEN 'Q' THEN 'QUARTERLY'
--		WHEN '6' THEN 'SEMI-ANNUALLY'
--		WHEN 'A' THEN 'ANNUALLY'
--		WHEN '1' THEN 'SINGLE PAYMENT'
--	    END AS PaymentFrequency
--	, CASE WHEN SA.LineOfCredit = 'Y' THEN RTRIM(CAST(CONVERT(money,SA.CreditLimit *.01, 2) AS VARCHAR(10))) END AS CreditLimit
--	, CASE WHEN SA.LineOfCredit = 'Y' THEN RTRIM(CAST(CONVERT(money,SA.CreditLimit *.01, 2) AS VARCHAR(10))) END AS RemainingLimit
--	, SA.CurrBranch AS SABranch
--	, CONVERT(VARCHAR(10), SA.CreatedOn, 101) AS SACreatedOn
--	, SA.Officer AS SAOfficer
--	, fnSCFed_GetJOs(@TrackingNum, @seq1) As BorrowerNames
FROM NewMemberRequest As NMR
	--INNER JOIN udt_AccountTypes AS AType On NMR.AccountType = AType.TypeCode
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN NewMemberPlasticCard AS PC ON NMR.TrackingNum = PC.TrackingNum
	LEFT OUTER JOIN NewMemberSubAccount AS SA ON PC.TrackingNum = SA.TrackingNum AND PC.Sequence =  SA.PlasticCardLink
--	LEFT OUTER JOIN fnSCFed_GetSA(@TrackingNum, @seq1) As SA ON NMR.TrackingNum = SA.TrackingNum
WHERE NMR.TrackingNum = @TrackingNum AND PC.TypeCode != 'P' AND PC.TypeCode != 'C' AND PC.Created = 'Y'


Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSCFed_D31Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spSCFed_D31Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
--Declare @TrackingNum int
--DROP TABLE #docs
--DEALLOCATE curs
--Set @TrackingNum = 1477

Declare @docsubname char(100)
Declare @newdocsub char(200)
Declare @docsuffix char(2)
Declare @count int
Declare @docindex int


--CREATE TABLE #docs(docindex int identity Primary Key, docsubname char(100))

Declare curs CURSOR FOR
	SELECT SA.Sequence, CONVERT(char(2), SA.Suffix)
	FROM NewMemberRequest AS NMR INNER JOIN NewMemberSubAccount AS SA ON NMR.TrackingNum = SA.TrackingNum
	WHERE NMR.TrackingNum = @TrackingNum AND SA.SLType = 'L' AND SA.CollateralCode > 1000 AND SA.ProductType = 'CC' AND SA.Created != 'H' AND @Param1 =  ''

--IF @@ROWCOUNT = 0

OPEN curs
FETCH NEXT FROM curs INTO @docsubname, @docsuffix
SET @newdocsub = 'Credit Card Insurance (Member Copy)'-- for Suffix(s) ' + CASE LEN(@docsubname) WHEN 2 THEN @docsubname WHEN 1 THEN '0' + @docsubname ELSE 'NA' END
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count

      	IF @count = 1-- or @count = 4 or @count = 7
	BEGIN
		Set @docindex = @docindex + 1
     		 INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
		SET @newdocsub = 'Credit Card Insurance (Credit Union Copy)'-- for Suffix(s) ' + CASE LEN(@docsubname) WHEN 2 THEN @docsubname WHEN 1 THEN '0' + @docsubname ELSE 'NA' END
		Set @docindex = @docindex + 1
     		 INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END

      	FETCH NEXT FROM curs INTO @docsubname, @docsuffix

	IF @docsubname != NULL
	BEGIN
		SET @newdocsub = @newdocsub + ', ' + @docsubname
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex AND TrackingNum = @TrackingNum
	END
   END

CLOSE curs
DEALLOCATE curs

Select *, (SELECT DocName FROM udt_Doc WHERE DocNum = 31) AS ScanName FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Delete FROM NewMemberDoc WHERE TrackingNum = @TrackingNum

--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSCFed_D31Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spSCFed_D31Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
Declare @seq int
Declare @seq1 int
Declare @count int
--Set @jo1seq = 1
--Set @jo2seq = 1
--Set @jo3seq = 1
--Set @jo4seq = 1


--CREATE TABLE #docs(id int identity Primary Key, docindex int, j1FullName char(100), j1FullAddress char(100), j1FullPhone char(12), j1DOB char(10), j1SSN char(11), j1ID char(20), j1IDIssueDate  char(10), j1IDExpDate  char(10), j1IDState  char(2), j2FullName char(100), j2FullAddress char(100), j2FullPhone char(11), j2DOB char(10), j2SSN char(11), j2ID char(20), j2IDIssueDate  char(10), j2IDExpDate  char(10), j2IDState  char(2), j3FullName char(100), j3FullAddress char(100), j3FullPhone char(11), j3DOB char(10), j3SSN char(11), j3ID char(20), j3IDIssueDate  char(10), j3IDExpDate  char(10), j3IDState  char(2), j4FullName char(100), j4FullAddress char(100), j4FullPhone char(11), j4DOB char(10), j4SSN char(11), j4ID char(20), j4IDIssueDate  char(10), j4IDExpDate  char(10), j4IDState  char(2))

Declare curs2 CURSOR FOR
	SELECT  CONVERT(int, SA.Sequence)
	FROM NewMemberRequest AS NMR
	INNER JOIN NewMemberPlasticCard AS PC ON NMR.TrackingNum = PC.TrackingNum
	INNER JOIN NewMemberSubAccount AS SA ON PC.TrackingNum = SA.TrackingNum AND PC.Sequence =  SA.PlasticCardLink
	WHERE NMR.TrackingNum = @TrackingNum AND PC.TypeCode != 'P' AND PC.TypeCode != 'C' AND PC.Created = 'Y'


--IF @@ROWCOUNT = 0

OPEN curs2
FETCH NEXT FROM curs2 INTO @seq
SET @count = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN

      	IF (@count = 0 AND @DocIndex = 1)
		BEGIN
			Set @seq1 = @seq
		END
	IF (@count = 1 AND @DocIndex = 2) 
		BEGIN
			Set @seq1 = @seq		
		END
	IF (@count = 2 AND @DocIndex = 3)
		BEGIN
			Set @seq1 = @seq		
		END
	IF (@count = 3 AND @DocIndex = 4)
		BEGIN
			Set @seq1 = @seq		
		END
	IF (@count = 4 AND @DocIndex = 5)
		BEGIN
			Set @seq1 = @seq		
		END
	IF (@count = 5 AND @DocIndex = 6)
		BEGIN
			Set @seq1 = @seq		
		END
	IF (@count = 6 AND @DocIndex = 7)
		BEGIN
			Set @seq1 = @seq		
		END
	IF (@count = 7 AND @DocIndex = 8)
		BEGIN
			Set @seq1 = @seq		
		END

      	FETCH NEXT FROM curs2 INTO @seq
	SET @count = @count + 1
	PRINT @count
   END

CLOSE curs2
DEALLOCATE curs2

SELECT @DocIndex As DocIndex
	, RTRIM(NMR.Account) + '-' + RIGHT('0' + RTRIM(LTRIM(CONVERT(char(2), SA.Suffix))), 2) AS AccountSuffix
	, RTRIM(PC.PAN) AS PAN
	, CASE @DocIndex WHEN 1 THEN 'MEMBER COPY' WHEN 2 THEN 'CREDIT UNION COPY' END AS Copy
--	, RTRIM(RTRIM(CAST(NMR.Account AS VARCHAR(20)))) + '-' + RIGHT(('00' + RTRIM(SA.Suffix)),2) AS AccountPlusSuffix
--	, CAST((CAST(SA.APR AS int)*.0001)/365 AS Decimal(10,8)) AS DPR
--	, CAST(CAST(SA.APR AS int) * 0.0001 AS Decimal(10,4)) AS APR
--	, CASE WHEN SA.LineOfCredit = 'Y' THEN '0.00' ELSE RTRIM(CAST(CONVERT(money,SA.Amount *.01, 2) AS VARCHAR(10))) END AS NewBalance
--	, '0.00' AS AmountAdvanced
--	, RTRIM(CAST(CONVERT(money,SA.Payment *.01, 1) AS VARCHAR(10))) AS PaymentAmount
--	, SA.DueDate
--	,  SA.Method + '-' +
--	  CASE SA.Frequency
--	     	WHEN 'W'  THEN 'WEEKLY'
--		WHEN 'B' THEN 'BI-WEEKLY'
--		WHEN 'M' THEN 'MONTHLY'
--		WHEN 'S' THEN 'SEMI-MONTHLY'
--		WHEN 'Y' THEN 'YEARLY'
--		WHEN 'Q' THEN 'QUARTERLY'
--		WHEN '6' THEN 'SEMI-ANNUALLY'
--		WHEN 'A' THEN 'ANNUALLY'
--		WHEN '1' THEN 'SINGLE PAYMENT'
--	    END AS PaymentFrequency
--	, CASE WHEN SA.LineOfCredit = 'Y' THEN RTRIM(CAST(CONVERT(money,SA.CreditLimit *.01, 2) AS VARCHAR(10))) END AS CreditLimit
--	, CASE WHEN SA.LineOfCredit = 'Y' THEN RTRIM(CAST(CONVERT(money,SA.CreditLimit *.01, 2) AS VARCHAR(10))) END AS RemainingLimit
--	, SA.CurrBranch AS SABranch
--	, CONVERT(VARCHAR(10), SA.CreatedOn, 101) AS SACreatedOn
--	, SA.Officer AS SAOfficer
--	, fnSCFed_GetJOs(@TrackingNum, @seq1) As BorrowerNames
FROM NewMemberRequest As NMR
	--INNER JOIN udt_AccountTypes AS AType On NMR.AccountType = AType.TypeCode
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN NewMemberPlasticCard AS PC ON NMR.TrackingNum = PC.TrackingNum
	LEFT OUTER JOIN NewMemberSubAccount AS SA ON PC.TrackingNum = SA.TrackingNum AND PC.Sequence =  SA.PlasticCardLink
--	LEFT OUTER JOIN fnSCFed_GetSA(@TrackingNum, @seq1) As SA ON NMR.TrackingNum = SA.TrackingNum
WHERE NMR.TrackingNum = @TrackingNum AND PC.TypeCode != 'P' AND PC.TypeCode != 'C' AND PC.Created = 'Y'


Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSCFed_D32Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spSCFed_D32Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
--Declare @TrackingNum int
--DROP TABLE #docs
--DEALLOCATE curs
--Set @TrackingNum = 1477

Declare @docsubname char(100)
Declare @newdocsub char(200)
Declare @docsuffix char(2)
Declare @count int
Declare @docindex int


--CREATE TABLE #docs(docindex int identity Primary Key, docsubname char(100))

Declare curs CURSOR FOR
	SELECT SA.Sequence, CONVERT(char(2), SA.Suffix)
	FROM NewMemberRequest AS NMR INNER JOIN NewMemberSubAccount AS SA ON NMR.TrackingNum = SA.TrackingNum
	WHERE NMR.TrackingNum = @TrackingNum AND SA.SLType = 'L' AND SA.CollateralCode > 1000 AND SA.ProductType = 'CC' AND SA.Created != 'H' AND @Param1 =  ''

--IF @@ROWCOUNT = 0

OPEN curs
FETCH NEXT FROM curs INTO @docsubname, @docsuffix
SET @newdocsub = 'Credit Card Change Form'-- for Suffix(s) ' + CASE LEN(@docsubname) WHEN 2 THEN @docsubname WHEN 1 THEN '0' + @docsubname ELSE 'NA' END
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count

      	IF @count = 1-- or @count = 4 or @count = 7
	BEGIN
		Set @docindex = @docindex + 1
     		 INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END

      	FETCH NEXT FROM curs INTO @docsubname, @docsuffix

	IF @docsubname != NULL
	BEGIN
		SET @newdocsub = @newdocsub + ', ' + @docsubname
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex AND TrackingNum = @TrackingNum
	END
   END

CLOSE curs
DEALLOCATE curs

Select *, (SELECT DocName FROM udt_Doc WHERE DocNum = 32) AS ScanName FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Delete FROM NewMemberDoc WHERE TrackingNum = @TrackingNum

--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSCFed_D32Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spSCFed_D32Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
Declare @seq int
Declare @seq1 int
Declare @count int
--Set @jo1seq = 1
--Set @jo2seq = 1
--Set @jo3seq = 1
--Set @jo4seq = 1


--CREATE TABLE #docs(id int identity Primary Key, docindex int, j1FullName char(100), j1FullAddress char(100), j1FullPhone char(12), j1DOB char(10), j1SSN char(11), j1ID char(20), j1IDIssueDate  char(10), j1IDExpDate  char(10), j1IDState  char(2), j2FullName char(100), j2FullAddress char(100), j2FullPhone char(11), j2DOB char(10), j2SSN char(11), j2ID char(20), j2IDIssueDate  char(10), j2IDExpDate  char(10), j2IDState  char(2), j3FullName char(100), j3FullAddress char(100), j3FullPhone char(11), j3DOB char(10), j3SSN char(11), j3ID char(20), j3IDIssueDate  char(10), j3IDExpDate  char(10), j3IDState  char(2), j4FullName char(100), j4FullAddress char(100), j4FullPhone char(11), j4DOB char(10), j4SSN char(11), j4ID char(20), j4IDIssueDate  char(10), j4IDExpDate  char(10), j4IDState  char(2))

Declare curs2 CURSOR FOR
	SELECT  CONVERT(int, SA.Sequence)
	FROM NewMemberRequest AS NMR
	INNER JOIN NewMemberPlasticCard AS PC ON NMR.TrackingNum = PC.TrackingNum
	INNER JOIN NewMemberSubAccount AS SA ON PC.TrackingNum = SA.TrackingNum AND PC.Sequence =  SA.PlasticCardLink
	WHERE NMR.TrackingNum = @TrackingNum AND PC.TypeCode != 'P' AND PC.TypeCode != 'C' AND PC.Created = 'Y'


--IF @@ROWCOUNT = 0

OPEN curs2
FETCH NEXT FROM curs2 INTO @seq
SET @count = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN

      	IF (@count = 0 AND @DocIndex = 1)
		BEGIN
			Set @seq1 = @seq
		END
	IF (@count = 1 AND @DocIndex = 2) 
		BEGIN
			Set @seq1 = @seq		
		END
	IF (@count = 2 AND @DocIndex = 3)
		BEGIN
			Set @seq1 = @seq		
		END
	IF (@count = 3 AND @DocIndex = 4)
		BEGIN
			Set @seq1 = @seq		
		END
	IF (@count = 4 AND @DocIndex = 5)
		BEGIN
			Set @seq1 = @seq		
		END
	IF (@count = 5 AND @DocIndex = 6)
		BEGIN
			Set @seq1 = @seq		
		END
	IF (@count = 6 AND @DocIndex = 7)
		BEGIN
			Set @seq1 = @seq		
		END
	IF (@count = 7 AND @DocIndex = 8)
		BEGIN
			Set @seq1 = @seq		
		END

      	FETCH NEXT FROM curs2 INTO @seq
	SET @count = @count + 1
	PRINT @count
   END

CLOSE curs2
DEALLOCATE curs2

SELECT @DocIndex As DocIndex
	, RTRIM(NMR.Account) + '-' + RIGHT('0' + RTRIM(LTRIM(CONVERT(char(2), SA.Suffix))), 2) AS AccountSuffix
	, RTRIM(PC.PAN) AS PAN
--	, RTRIM(RTRIM(CAST(NMR.Account AS VARCHAR(20)))) + '-' + RIGHT(('00' + RTRIM(SA.Suffix)),2) AS AccountPlusSuffix
--	, CAST((CAST(SA.APR AS int)*.0001)/365 AS Decimal(10,8)) AS DPR
--	, CAST(CAST(SA.APR AS int) * 0.0001 AS Decimal(10,4)) AS APR
--	, CASE WHEN SA.LineOfCredit = 'Y' THEN '0.00' ELSE RTRIM(CAST(CONVERT(money,SA.Amount *.01, 2) AS VARCHAR(10))) END AS NewBalance
--	, '0.00' AS AmountAdvanced
--	, RTRIM(CAST(CONVERT(money,SA.Payment *.01, 1) AS VARCHAR(10))) AS PaymentAmount
--	, SA.DueDate
--	,  SA.Method + '-' +
--	  CASE SA.Frequency
--	     	WHEN 'W'  THEN 'WEEKLY'
--		WHEN 'B' THEN 'BI-WEEKLY'
--		WHEN 'M' THEN 'MONTHLY'
--		WHEN 'S' THEN 'SEMI-MONTHLY'
--		WHEN 'Y' THEN 'YEARLY'
--		WHEN 'Q' THEN 'QUARTERLY'
--		WHEN '6' THEN 'SEMI-ANNUALLY'
--		WHEN 'A' THEN 'ANNUALLY'
--		WHEN '1' THEN 'SINGLE PAYMENT'
--	    END AS PaymentFrequency
--	, CASE WHEN SA.LineOfCredit = 'Y' THEN RTRIM(CAST(CONVERT(money,SA.CreditLimit *.01, 2) AS VARCHAR(10))) END AS CreditLimit
--	, CASE WHEN SA.LineOfCredit = 'Y' THEN RTRIM(CAST(CONVERT(money,SA.CreditLimit *.01, 2) AS VARCHAR(10))) END AS RemainingLimit
--	, SA.CurrBranch AS SABranch
--	, CONVERT(VARCHAR(10), SA.CreatedOn, 101) AS SACreatedOn
--	, SA.Officer AS SAOfficer
--	, fnSCFed_GetJOs(@TrackingNum, @seq1) As BorrowerNames
FROM NewMemberRequest As NMR
	--INNER JOIN udt_AccountTypes AS AType On NMR.AccountType = AType.TypeCode
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN NewMemberPlasticCard AS PC ON NMR.TrackingNum = PC.TrackingNum
	LEFT OUTER JOIN NewMemberSubAccount AS SA ON PC.TrackingNum = SA.TrackingNum AND PC.Sequence =  SA.PlasticCardLink
--	LEFT OUTER JOIN fnSCFed_GetSA(@TrackingNum, @seq1) As SA ON NMR.TrackingNum = SA.TrackingNum
WHERE NMR.TrackingNum = @TrackingNum AND PC.TypeCode != 'P' AND PC.TypeCode != 'C' AND PC.Created = 'Y'


Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSCFed_D3Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [IMS].[spSCFed_D3Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
--Declare @TrackingNum int
--DROP TABLE #docs
--DEALLOCATE curs
--Set @TrackingNum = 1477

Declare @docsubname char(100)
Declare @newdocsub char(200)
Declare @count int
Declare @docindex int


--CREATE TABLE #docs(docindex int identity Primary Key, docsubname char(100))

Declare curs CURSOR FOR
	SELECT '' AS docsubname
	FROM NewMemberRequest AS NMR
	WHERE NMR.TrackingNum = @TrackingNum AND NMR.Processed = 999 AND EXISTS(SELECT TrackingNum FROM NewMemberLoanPlan LP WHERE TrackingNum = @TrackingNum AND LP.Created = 'Y') AND @Param1 =  ''

--IF @@ROWCOUNT = 0

OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @newdocsub = 'LoanLiner Addendum'-- for Suffix(s) ' + CASE LEN(@docsubname) WHEN 2 THEN @docsubname WHEN 1 THEN '0' + @docsubname ELSE 'NA' END
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count

      	IF @count = 1-- or @count = 4 or @count = 7
	BEGIN
		Set @docindex = @docindex + 1
     		 INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END

      	FETCH NEXT FROM curs INTO @docsubname

	IF @docsubname != NULL
	BEGIN
		SET @newdocsub = @newdocsub + ', ' + @docsubname
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex AND TrackingNum = @TrackingNum
	END
   END

CLOSE curs
DEALLOCATE curs

Select *, (SELECT DocName FROM udt_Doc WHERE DocNum = 3) AS ScanName FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Delete FROM NewMemberDoc WHERE TrackingNum = @TrackingNum

--DROP TABLE #docs
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSCFed_D3Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO


CREATE PROCEDURE [IMS].[spSCFed_D3Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

SELECT @DocIndex As DocIndex
	--, BE1.fullname AS BE1fullname, BE1.fulladdress AS BE1fulladdress, BE1.DOB AS BE1DOB, BE1.Relationship AS BE1Relationship, CASE LEN(BE1.Suffix) WHEN 2 THEN BE1.Suffix WHEN 1 THEN '0' + BE1.Suffix ELSE 'NA' END AS BE1Suffix
	--, BE2.fullname AS BE2fullname, BE2.fulladdress AS BE2fulladdress, BE2.DOB AS BE2DOB, BE2.Relationship AS BE2Relationship, CASE LEN(BE2.Suffix) WHEN 2 THEN BE2.Suffix WHEN 1 THEN '0' + BE2.Suffix ELSE 'NA' END AS BE2Suffix
	--, BE3.fullname AS BE3fullname, BE3.fulladdress AS BE3fulladdress, BE3.DOB AS BE3DOB, BE3.Relationship AS BE3Relationship, CASE LEN(BE3.Suffix) WHEN 2 THEN BE3.Suffix WHEN 1 THEN '0' + BE3.Suffix ELSE 'NA' END AS BE3Suffix
FROM NewMemberRequest As NMR
	--INNER JOIN udt_AccountTypes AS AType On NMR.AccountType = AType.TypeCode
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
	--LEFT OUTER JOIN fnSCFed_GetJOType(@TrackingNum, 'PD', '') AS BE1 ON NMR.TrackingNum = BE1.TrackingNum AND BE1.JointSequence = 1
	--LEFT OUTER JOIN fnSCFed_GetJOType(@TrackingNum, 'PD', '') AS BE2 ON NMR.TrackingNum = BE2.TrackingNum AND BE2.JointSequence = 2
	--LEFT OUTER JOIN fnSCFed_GetJOType(@TrackingNum, 'PD', '') AS BE3 ON NMR.TrackingNum = BE3.TrackingNum AND BE3.JointSequence = 3
WHERE NMR.TrackingNum = @TrackingNum


Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSCFed_D50Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spSCFed_D50Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @docsubname CHAR(100)
DECLARE @newdocsub CHAR(100)
DECLARE @count INT
DECLARE @docindex INT

DECLARE curs CURSOR FOR
	SELECT '' AS docsubname
	FROM NewMemberRequest AS NMR
	WHERE NMR.TrackingNum = @TrackingNum AND NMR.Processed = 999 AND NMR.Created = 'Y' AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND @Param1 =  ''

OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @newdocsub = 'Account Card ' + @docsubname
IF @docsubname Is Null
BEGIN
	SET @newdocsub = 'Account Card'
END
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS

WHILE @@FETCH_STATUS = 0
BEGIN
	SET @count = @count + 1
	PRINT @count
		IF @count = 1
	BEGIN
		SET @docindex = @docindex + 1
		 INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END
		FETCH NEXT FROM curs INTO @docsubname
	PRINT @docsubname
	IF @@FETCH_STATUS = 0
	BEGIN
		SET @newdocsub = (RTRIM(@newdocsub) + ', ' + RTRIM(@docsubname))
		PRINT @newdocsub
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex
	END
END

CLOSE curs
DEALLOCATE curs
SELECT *, (SELECT DocName FROM udt_Doc WHERE DocNum = 50) AS ScanName FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
DELETE FROM NewMemberDoc WHERE TrackingNum = @TrackingNum

Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSCFed_D50Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [IMS].[spSCFed_D50Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

SELECT @DocIndex As DocIndex
	, DATENAME(MM, NMR.CreatedOn) + ' ' + CAST(DAY(NMR.CreatedOn) AS VARCHAR(2)) + ', ' + CAST(YEAR(NMR.CreatedOn) AS VARCHAR(4)) AS CreatedOn
	, CASE NMR.AccountClass WHEN 'P' THEN UPPER(RTRIM(RTRIM(NMR.FName) + ' ' + RTRIM(NMR.LName) + ' ' + RTRIM(NMR.MECHTag))) ELSE UPPER(RTRIM(NMR.OrganizationName)) END AS FullName
	, UPPER(RTRIM(JO1.FullName)) AS JointName
	, RTRIM(SASDA.MiscField1) AS MICR
FROM NewMemberRequest As NMR
	LEFT OUTER JOIN fnSCFed_GetSA(@TrackingNum, 'SDA', 'S') AS SASDA ON NMR.TrackingNum = SASDA.TrackingNum
	LEFT OUTER JOIN fnSCFed_GetJOType(@TrackingNum, 'JO', 'TR', 'CU', '') AS JO1 ON NMR.TrackingNum = JO1.TrackingNum AND JO1.JointSequence = 1
WHERE NMR.TrackingNum = @TrackingNum
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSCFed_D51Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spSCFed_D51Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @docsubname CHAR(100)
DECLARE @newdocsub CHAR(100)
DECLARE @docsuffix CHAR(2)
DECLARE @count INT
DECLARE @docindex INT

DECLARE curs CURSOR FOR
	SELECT SA.Sequence, CONVERT(char(2), SA.Suffix)
	FROM NewMemberRequest As NMR INNER JOIN NewMemberSubAccount AS SA ON NMR.TrackingNum = SA.TrackingNum
	WHERE NMR.TrackingNum = @TrackingNum AND SA.ProductType IN ('SDA') AND SA.Created = 'Y' AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND @Param1 =  ''

OPEN curs
FETCH NEXT FROM curs INTO @docsubname, @docsuffix
SET @newdocsub = 'A9 Courtesy Pay '
IF @docsubname Is Null
BEGIN
	SET @newdocsub = 'A9 Courtesy Pay'
END
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS

WHILE @@FETCH_STATUS = 0
BEGIN
	SET @count = @count + 1
	PRINT @count
		IF @count = 1
	BEGIN
		SET @docindex = @docindex + 1
		 INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END
		FETCH NEXT FROM curs INTO @docsubname, @docsuffix
	PRINT @docsubname
	IF @@FETCH_STATUS = 0
	BEGIN
		SET @newdocsub = (RTRIM(@newdocsub) + ', ' + RTRIM(@docsubname))
		PRINT @newdocsub
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex
	END
END

CLOSE curs
DEALLOCATE curs
SELECT *, (SELECT DocName FROM udt_Doc WHERE DocNum = 51) AS ScanName FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
DELETE FROM NewMemberDoc WHERE TrackingNum = @TrackingNum

Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSCFed_D51Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spSCFed_D51Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

SELECT @DocIndex AS DocIndex
--	, DATENAME(MM, NMR.CreatedOn) + ' ' + CAST(DAY(NMR.CreatedOn) AS VARCHAR(2)) + ', ' + CAST(YEAR(NMR.CreatedOn) AS VARCHAR(4)) AS CreatedOn
--	, CASE NMR.AccountClass WHEN 'P' THEN UPPER(RTRIM(RTRIM(NMR.FName) + ' ' + RTRIM(NMR.LName) + ' ' + RTRIM(NMR.MECHTag))) ELSE UPPER(RTRIM(NMR.OrganizationName)) END AS FullName
FROM IMS.NewMemberRequest As NMR
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
WHERE NMR.TrackingNum = @TrackingNum

Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSCFed_D52Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spSCFed_D52Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @docsubname CHAR(100)
DECLARE @newdocsub CHAR(100)
DECLARE @docsuffix CHAR(2)
DECLARE @count INT
DECLARE @docindex INT

DECLARE curs CURSOR FOR
	SELECT SA.Sequence, CONVERT(char(2), SA.Suffix)
	FROM NewMemberRequest As NMR INNER JOIN NewMemberSubAccount AS SA ON NMR.TrackingNum = SA.TrackingNum
	WHERE NMR.TrackingNum = @TrackingNum AND SA.DescAbrv IN ('SLF') AND SA.Created = 'Y' AND @Param1 =  ''

OPEN curs
FETCH NEXT FROM curs INTO @docsubname, @docsuffix
SET @newdocsub = 'Self-Service Checking Agreement '
IF @docsubname Is Null
BEGIN
	SET @newdocsub = 'Self-Service Checking Agreement'
END
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS

WHILE @@FETCH_STATUS = 0
BEGIN
	SET @count = @count + 1
	PRINT @count
		IF @count = 1
	BEGIN
		SET @docindex = @docindex + 1
		 INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END
		FETCH NEXT FROM curs INTO @docsubname, @docsuffix
	PRINT @docsubname
	IF @@FETCH_STATUS = 0
	BEGIN
		SET @newdocsub = (RTRIM(@newdocsub) + ', ' + RTRIM(@docsubname))
		PRINT @newdocsub
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex
	END
END

CLOSE curs
DEALLOCATE curs
SELECT *, (SELECT DocName FROM udt_Doc WHERE DocNum = 51) AS ScanName FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
DELETE FROM NewMemberDoc WHERE TrackingNum = @TrackingNum

Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSCFed_D52Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spSCFed_D52Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

SELECT @DocIndex AS DocIndex
--	, DATENAME(MM, NMR.CreatedOn) + ' ' + CAST(DAY(NMR.CreatedOn) AS VARCHAR(2)) + ', ' + CAST(YEAR(NMR.CreatedOn) AS VARCHAR(4)) AS CreatedOn
--	, CASE NMR.AccountClass WHEN 'P' THEN UPPER(RTRIM(RTRIM(NMR.FName) + ' ' + RTRIM(NMR.LName) + ' ' + RTRIM(NMR.MECHTag))) ELSE UPPER(RTRIM(NMR.OrganizationName)) END AS FullName
FROM IMS.NewMemberRequest As NMR
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
WHERE NMR.TrackingNum = @TrackingNum

Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSCFed_D53Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spSCFed_D53Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @docsubname CHAR(100)
DECLARE @newdocsub CHAR(100)
DECLARE @docsuffix CHAR(2)
DECLARE @count INT
DECLARE @docindex INT

DECLARE curs CURSOR FOR
	SELECT TOP 1 ''
	FROM NewMemberRequest AS NMR LEFT JOIN NewMemberJointOwner AS JO ON NMR.TrackingNum = JO.TrackingNum
	WHERE NMR.TrackingNum = @TrackingNum AND NMR.Processed = '999' AND (NMR.Citizenship = 'NC' OR JO.Citizenship = 'NC') AND @Param1 =  '' AND 1=0

OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @newdocsub = 'W8 Beneficiary Form '
IF @docsubname Is Null
BEGIN
	SET @newdocsub = 'W8 Beneficiary Form'
END
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS

WHILE @@FETCH_STATUS = 0
BEGIN
	SET @count = @count + 1
	PRINT @count

	IF @count = 1
	BEGIN
		SET @docindex = @docindex + 1
		 INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END

	FETCH NEXT FROM curs INTO @docsubname
	PRINT @docsubname
	IF @@FETCH_STATUS = 0
	BEGIN
		SET @newdocsub = (RTRIM(@newdocsub) + ', ' + RTRIM(@docsubname))
		PRINT @newdocsub
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex
	END
END

CLOSE curs
DEALLOCATE curs
SELECT *, (SELECT DocName FROM udt_Doc WHERE DocNum = 53) AS ScanName FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
DELETE FROM NewMemberDoc WHERE TrackingNum = @TrackingNum

Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSCFed_D53Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spSCFed_D53Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

SELECT @DocIndex AS DocIndex
--	, DATENAME(MM, NMR.CreatedOn) + ' ' + CAST(DAY(NMR.CreatedOn) AS VARCHAR(2)) + ', ' + CAST(YEAR(NMR.CreatedOn) AS VARCHAR(4)) AS CreatedOn
--	, CASE NMR.AccountClass WHEN 'P' THEN UPPER(RTRIM(RTRIM(NMR.FName) + ' ' + RTRIM(NMR.LName) + ' ' + RTRIM(NMR.MECHTag))) ELSE UPPER(RTRIM(NMR.OrganizationName)) END AS FullName
FROM IMS.NewMemberRequest As NMR
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
WHERE NMR.TrackingNum = @TrackingNum

Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSCFed_DG1Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [IMS].[spSCFed_DG1Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSCFed_DG1Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [IMS].[spSCFed_DG1Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

Select 'Applications' AS GroupName From NewMemberRequest where trackingnum = @TrackingNum
GO
/****** Object:  StoredProcedure [IMS].[spSCFed_DP1Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [IMS].[spSCFed_DP1Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSCFed_DP1Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spSCFed_DP1Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

SELECT NMR.TrackingNum AS TrackingNumber
	, AltAddress.Address1 AS MailingAddress
	, NMR.CurrBranch As Branch
	, Branches.Description AS BranchName
	, CONVERT(char(10), GetDate(), 101) As TodayDate
	, DATENAME(MM, GetDate()) + RIGHT(CONVERT(char(12), GetDate(), 107), 9) As TodayDateFull
	, CONVERT(char(10), NMR.CreatedOn, 101) As CreatedOn
	, NMR.Account As Account
--	, CONVERT(char(2), Home.ResidenceYears, 101) + ' yrs  ' + CONVERT(char(2), Home.ResidenceMonths, 101) + ' mos' AS HowLong
	, NMR.FName, NMR.LName, NMR.MInitial
	, CASE NMR.AccountClass WHEN 'P' THEN UPPER(RTRIM(NMR.LName) + ', ' + RTRIM(RTRIM(NMR.FName) + ' ' + RTRIM(NMR.MInitial))) ELSE RTRIM(NMR.OrganizationName) END AS RevFullName
	, CASE NMR.AccountClass WHEN 'P' THEN UPPER(RTRIM(RTRIM(NMR.FName) + ' ' + RTRIM(NMR.LName) + ' ' + NMR.MECHTag)) ELSE UPPER(RTRIM(NMR.OrganizationName)) END AS FullName
	, CASE NMR.AccountClass WHEN 'P' THEN 'Dear ' + RTRIM(RTRIM(NMR.FName) + ' ' + RTRIM(NMR.LName) + ' ' + NMR.MECHTag) + ':' ELSE 'Dear ' + RTRIM(NMR.OrganizationName) + ':' END AS DearName
	, Home.Areacode + '-' + LEFT(Home.Phone, 3) + '-' + RIGHT(RTRIM(Home.Phone), 4) AS HPhoneFull
	, Home.CellPhoneAC + '-' + LEFT(Home.CellPhone, 3) + '-' + RIGHT(RTRIM(Home.CellPhone), 4) AS CPhoneFull
	, CASE NMR.UseTodayForDOB WHEN 'Y' THEN CONVERT(char(10), NMR.CreatedOn, 101) ELSE CONVERT(char(10), NMR.DOB, 101) END AS DOB
	, CASE NMR.AccountClass WHEN 'P' THEN Left(NMR.SSN, 3) + '-' + LEFT(RIGHT(NMR.SSN, 6), 2) + '-' + RIGHT(NMR.SSN, 4) ELSE LEFT(NMR.SSN, 2) + '-' + RIGHT(NMR.SSN, 7) END AS SSN
	, RTRIM(NMR.DriversLicenseNum) + '/' + NMR.DriversLicenseState AS DL
	, CASE WHEN NMR.IDType = 'D' AND NMR.DriversLicenseState <> '' AND NMR.DriversLicenseNum <> '' THEN 'Drivers License' ELSE NMR.IDSource END AS IDType
	, CASE NMR.IDType WHEN 'D' THEN RTRIM(NMR.DriversLicenseNum) ELSE RTRIM(NMR.IDNumber) END AS IDNumber
	, CONVERT(char(10), NMR.IDIssueDate, 101) AS IDIssueDate
	, CONVERT(char(10), NMR.IDExpirationDate, 101) AS IDExpDate
	, NMR.DriversLicenseState AS IDState
	, NMR.MaidenName AS MaidenName
	, NMR.Password AS Password
	, NMR.CreatedBy AS Seller
	, NMR.Department AS Department
	, CASE WHEN NMR.Created = 'F' Or NMR.Created = 'H' Or NMR.Created = 'I' THEN '' ELSE 'X' END AS YesNewAccount
	, CASE WHEN NMR.Created = 'F' Or NMR.Created = 'H' Or NMR.Created = 'I' THEN 'X' END AS YesChangeAccount
--	, CASE WHEN NMR.Created = 'F' Or NMR.Created = 'H' Or NMR.Created = 'I' THEN NMR.Account END AS ChangeAccount
	, CASE NMR.AccountClass
		WHEN 'O' THEN RTRIM(RTRIM(Work.Address1) + CASE ISNULL(Work.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Work.Address2) END + CASE ISNULL(Work.Address3, '') WHEN '' THEN ' ' ELSE ', ' + RTRIM(Work.Address3) END)
		ELSE RTRIM(RTRIM(Home.Address1) + CASE ISNULL(Home.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Home.Address2) END + CASE ISNULL(Home.Address3, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Home.Address3) END)
	  END AS Address
	, CASE NMR.AccountClass
		WHEN 'O' THEN RTRIM(RTRIM(Work.Address1) + CASE ISNULL(Work.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Work.Address2) END + CASE ISNULL(Work.Address3, '') WHEN '' THEN ' ' ELSE ', ' + RTRIM(Work.Address3) END) + ', ' + RTRIM(Work.City) + ', ' + Work.State + ' ' + CASE LEN(Work.Zip) WHEN 9 THEN LEFT(Work.Zip, 5) + '-' + Right(Work.Zip, 4) ELSE Work.Zip END
		ELSE RTRIM(RTRIM(Home.Address1) + CASE ISNULL(Home.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Home.Address2) END + CASE ISNULL(Home.Address3, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Home.Address3) END) + ', ' + RTRIM(Home.City) + ', ' + Home.State + ' ' + CASE LEN(Home.Zip) WHEN 9 THEN LEFT(Home.Zip, 5) + '-' + Right(Home.Zip, 4) ELSE Home.Zip END
	  END AS FullAddress
	, CASE NMR.AccountClass
		WHEN 'O' THEN RTRIM(Work.city) + ', ' + Work.state + ' ' + CASE LEN(Work.Zip) WHEN 9 THEN LEFT(Work.zip, 5) + '-' + Right(Work.Zip, 4) ELSE Work.Zip END
		ELSE RTRIM(Home.city) + ', ' + Home.state + ' ' + CASE LEN(Home.Zip) WHEN 9 THEN LEFT(Home.zip, 5) + '-' + Right(Home.Zip, 4) ELSE Home.Zip END
	  END AS CityStateZip
	, CASE NMR.AccountClass
		WHEN 'O' THEN Work.City
		ELSE Home.City
	  END AS City
	, CASE NMR.AccountClass
		WHEN 'O' THEN Work.State
		ELSE Home.State
	  END AS State
	, CASE NMR.AccountClass
		WHEN 'O' THEN CASE LEN(Work.Zip) WHEN 9 THEN LEFT(Work.zip, 5) + '-' + Right(Work.Zip, 4) ELSE Work.Zip END
		ELSE CASE LEN(Home.Zip) WHEN 9 THEN LEFT(Home.zip, 5) + '-' + Right(Home.Zip, 4) ELSE Home.Zip END
	  END AS Zip		
	, RTRIM(NMR.Email1) AS Email
	, CASE NMR.AccountClass
		WHEN 'O' THEN Work.AreaCode
		ELSE Home.AreaCode
	  END AS AC
	, CASE NMR.AccountClass
		WHEN 'O' THEN LEFT(Work.Phone, 3) + '-' + RIGHT(RTRIM(Work.Phone), 4)
		ELSE LEFT(Home.Phone, 3) + '-' + RIGHT(RTRIM(Home.Phone), 4)
	  END AS Phone
	, CASE NMR.AccountClass WHEN 'P' THEN Work.EmployerName ELSE '' END AS WorkName
	, CASE NMR.AccountClass WHEN 'P' THEN Work.EmployerName ELSE '' END AS Employer
	, CASE NMR.AccountClass WHEN 'P' THEN RTRIM(Work.address1 + CASE Work.address2 WHEN '' THEN ''ELSE', ' END + Work.address2 + CASE Work.address3 WHEN '' THEN ''ELSE', ' END + Work.address3) ELSE '' END AS WorkAddress
	, CASE NMR.AccountClass WHEN 'P' THEN Work.City ELSE '' END AS WorkCity
	, CASE NMR.AccountClass WHEN 'P' THEN Work.State ELSE '' END AS WorkState
	, CASE NMR.AccountClass WHEN 'P' THEN CASE LEN(Work.Zip) WHEN 9 THEN LEFT(Work.zip, 5) + '-' + RIGHT(Work.Zip, 4) ELSE Work.Zip END ELSE '' END AS WorkZip
	, Work.AreaCode AS WorkAC, LEFT(Work.Phone, 3) + '-' + RIGHT(RTRIM(Work.Phone), 4)  AS WorkPhone
	, Work.AreaCode + '-' + LEFT(Work.Phone, 3) + '-' + RIGHT(RTRIM(Work.Phone), 4)  AS WPhoneFull
	, Work.JobTitle AS Position
	, Work.JobTitle AS Occupation
	, Work.ProfessionYears As WorkNumYears
	,  RTRIM(Work.EmployerName) + ' ' + RTRIM(Work.address1 + CASE Work.address2 WHEN '' THEN ''ELSE', ' END + Work.address2 + CASE Work.address3 WHEN '' THEN ''ELSE', ' END + Work.address3) + ', ' + RTRIM(Work.City) + ', ' + RTRIM(Work.State) + ' ' + CASE LEN(Work.Zip) WHEN 9 THEN LEFT(Work.zip, 5) + '-' + Right(Work.Zip, 4) ELSE Work.Zip END AS WorkNameAddress
	, Work.HireDate
	,   CASE Work.IncomeFrequency
	     	WHEN 'W'  THEN 'Week'
		WHEN 'B' THEN 'Bi-Week'
		WHEN 'M' THEN 'Month'
		WHEN 'S' THEN 'Semi-Month'
		WHEN 'Y' THEN 'Year'
	      END AS IncomeFrequency
	,   CASE Work.IncomeFrequency
	     	WHEN 'W'  THEN (Work.GrossIncome * 52)/100
		WHEN 'B' THEN (Work.GrossIncome * 26)/100
		WHEN 'M' THEN (Work.GrossIncome * 12)/100
		WHEN 'S' THEN (Work.GrossIncome * 24)/100
		WHEN 'Y' THEN (Work.GrossIncome)/100
	      END AS GrossIncome
	, Home.ResidenceYears AS NumYears
	, CASE NMR.AccountClass
		WHEN 'O' THEN 'Yes'
		ELSE CASE WHEN NMR.Citizenship = 'US' Or NMR.Citizenship = 'RA' THEN 'Yes' END
	  END AS YesNoUSCitizen
	, CASE NMR.AccountClass
		WHEN 'O' THEN 'X'
		ELSE CASE WHEN NMR.Citizenship = 'US' Or NMR.Citizenship = 'RA' THEN 'X' END
	  END AS YesUSCitizen
	, CASE NMR.AccountClass
		WHEN 'O' THEN ''
		ELSE CASE WHEN NMR.Citizenship != 'US' And NMR.Citizenship != 'RA' THEN 'X' END
	  END AS NoUSCitizen
--	, 'X' AS YesEligible00
	, CASE WHEN NMR.Qualification1 = 'Household' THEN 'X' END AS YesEligible01
	, CASE WHEN NMR.Qualification1 = 'Relative' OR NMR.Qualification1 = 'Household' THEN NMR.Qualification2 END AS MemberName
	, CASE WHEN NMR.Qualification1 = 'Relative' THEN NMR.Relationship END AS Relationship
	, CASE WHEN NMR.Qualification1 = 'Location' THEN 'X' END AS YesEligible10
	, CASE WHEN NMR.Qualification1 = 'Location' AND NMR.Qualification2 = 'BCOUNTY' THEN 'X' END AS YesEligible11
	, CASE WHEN NMR.Qualification1 = 'Location' AND NMR.Qualification2 = 'CLARENDON' THEN 'X' END AS YesEligible12
	, CASE WHEN NMR.Qualification1 = 'Location' AND NMR.Qualification2 = 'ORANGE' THEN 'X' END AS YesEligible13
	, CASE WHEN NMR.Qualification1 = 'Location' AND NMR.Qualification2 = 'CALHOUN' THEN 'X' END AS YesEligible14
	, CASE WHEN NMR.Qualification1 = 'Location' AND NMR.Qualification2 = 'DCOUNTY' THEN 'X' END AS YesEligible15
	, CASE WHEN NMR.Qualification1 = 'Location' AND NMR.Qualification2 = 'UNDER' THEN 'X' END AS YesEligible16
	, CASE WHEN NMR.Qualification1 = 'Location' AND NMR.Qualification2 = 'CCOUNTY' THEN 'X' END AS YesEligible17
	, CASE WHEN NMR.Qualification1 = 'Location' AND NMR.Qualification2 = 'GEO COMM' THEN 'X' END AS YesEligible18
	, RTRIM(NMR.LName) + '/' + RTRIM(RTRIM(NMR.FName) + ' ' + NMR.MInitial) AS SlashName
	, '(' + RTRIM(LTRIM(CAST(NMR.CurrBranch AS VARCHAR(2)))) + ' - ' + RTRIM(Branches.[Description]) + ')' AS SellerBranch
	, 'SOUTH CAROLINA FEDERAL CREDIT UNION' AS HCCUName
	, 'P.O. BOX 190012' AS HCCUAddress
	, 'NORTH CHARLESTON, SC  29419-9012' AS HCCUCityStateZip
	, '(800)845-0432' AS HCCUPhone
FROM NewMemberRequest As NMR
	--INNER JOIN udt_AccountTypes AS AType On NMR.AccountType = AType.TypeCode
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN NewMemberAddress As AltAddress On NMR.TrackingNum = AltAddress.TrackingNum
	LEFT OUTER JOIN Branches On NMR.CurrBranch = Branches.BranchCode
	LEFT OUTER JOIN Departments ON NMR.Department = Departments.Department
WHERE NMR.TrackingNum = @TrackingNum
GO
/****** Object:  StoredProcedure [IMS].[spSCFed_Eligibility_Select]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_Eligibility_Select
CREATE PROCEDURE [IMS].[spSCFed_Eligibility_Select]
	@ZipCode varchar(5),
	@CensusTract varchar(10)
AS

IF IsNull(@CensusTract, '') = '' AND IsNull(@ZipCode, '') <> ''
BEGIN
	SELECT Department
	FROM udt_EligibilityByZip
	WHERE IsNull(ZipCode, '') = @ZipCode
END

IF IsNull(@CensusTract, '') <> '' AND IsNull(@ZipCode, '') <> ''
BEGIN
	SELECT Department
	FROM udt_EligibilityByZip
	WHERE IsNull(ZipCode, '') = @ZipCode AND IsNull(CensusTract, '') = @CensusTract
END
GO
/****** Object:  StoredProcedure [IMS].[spSCFed_FedReservePendingTransaction_Select]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Jonathan Eagar
-- Create date: 8/25/2011
-- Description:	Returns all FedReserve Pending Transactions
-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_FedReservePendingTransaction_Select
-- =============================================
CREATE PROCEDURE [IMS].[spSCFed_FedReservePendingTransaction_Select] 
	-- Add the parameters for the stored procedure here
	@NMRAccountNumber bigint
AS
BEGIN	
	SET @NMRAccountNumber = ISNULL(@NMRAccountNumber, 0)
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	-- Insert statements for procedure here
	
	DECLARE @TransactionSummary TABLE
	(		
		FundingBankID INT,
		TransferAmountTotal DECIMAL(18,2)		
	)
		
	IF @NMRAccountNumber = 0  
	BEGIN
	
	INSERT INTO @TransactionSummary(FundingBankID, TransferAmountTotal)	
	SELECT
		   FB.ID as FundingBankID,			  
		   SUM(FT.Amount) as TransferAmountTotal			   
	FROM IMS.NMRFundingBank FB INNER JOIN IMS.NMRFundingTransaction FT ON FB.ID = FT.FundingBankID						
	WHERE FT.DateTimeLastTransaction IS NULL AND FT.FundingType = 'B'
	GROUP BY FB.ID	
	
	SELECT  FRPT.* FROM
	( 
		(
		SELECT F.ID as FundingID,
			   F.AccountNumber as NMRAccountNumber,
			   FB.TrackingNum as NMRTrackingNumber,
			   NMR.LName + ', ' + NMR.FName as NMRMemberName,
			   FB.ID as FundingBankID,
			   0 as FundingTransactionID,
			   FB.RoutingNumber as FundingBankRouting,
			   FB.AccountNumberEncrypted as FundingBankAccountNumberEncrypted,
			   FB.AccountNumberLast4 as FundingBankAccountAccountLast4,
			   FB.BankName as FundingBankName,
			   FB.AccountType as FundingBankAccountType,
			   FB.Amount1 as VerificationAmount1,
			   FB.Amount2 as VerificationAmount2,
			   0 as TransferAmount,
			   0 as TransferAmountTotal,			   	
			   0 as TargetSubAccountSuffix,
			   0 as TargetSubAccountSeq,
			   FB.DateTimeCreated as DateTimeCreated
		FROM IMS.NMRFunding F INNER JOIN IMS.NMRFundingBank FB ON F.ID = FB.FundingID
								INNER JOIN IMS.NewMemberRequest NMR ON FB.TrackingNum = NMR.TrackingNum
		WHERE FB.VerificationStatus = 'P'	
		)
		UNION ALL
		(	
		SELECT F.ID as FundingID,
			   F.AccountNumber as NMRAccountNumber,
			   FB.TrackingNum as NMRTrackingNumber,			   
			   NMR.LName + ', ' + NMR.FName as NMRMemberName,
			   FB.ID as FundingBankID,
			   FT.ID as FundingTransactionID,
			   FB.RoutingNumber as FundingBankRouting,
			   FB.AccountNumberEncrypted as FundingBankAccountNumberEncrypted,
			   FB.AccountNumberLast4 as FundingBankAccountAccountLast4,
			   FB.BankName as FundingBankName,
			   FB.AccountType as FundingBankAccountType,
				0 as VerificationAmount1,
				0 as VerificationAmount2,
			   FT.Amount as TransferAmount,
			   TS.TransferAmountTotal as TransferAmountTotal,			
			   FT.TargetSubAccountSuffix as TargetSubAccountSuffix,
			   FT.TargetSubAccountSeq as TargetSubAccountSeq,
			   FT.DateTimeCreated as DateTimeCreated 
		FROM IMS.NMRFunding F INNER JOIN IMS.NMRFundingBank FB ON F.ID = FB.FundingID
								INNER JOIN IMS.NMRFundingTransaction FT ON FB.ID = FT.FundingBankID
									INNER JOIN IMS.NewMemberRequest NMR ON FB.TrackingNum = NMR.TrackingNum
										INNER JOIN @TransactionSummary TS ON FB.ID = TS.FundingBankID
		WHERE FT.DateTimeLastTransaction IS NULL AND FT.FundingType = 'B'
		)
	)  FRPT ORDER BY FRPT.NMRTrackingNumber, FRPT.FundingID, FRPT.FundingBankID, FRPT.FundingTransactionID	
	END	
	ELSE
	BEGIN
	
	INSERT INTO @TransactionSummary(FundingBankID, TransferAmountTotal)	
	SELECT	   		   
		   FB.ID as FundingBankID,			  
		   SUM(FT.Amount) as TransferAmountTotal			   
	FROM IMS.NMRFunding F INNER JOIN IMS.NMRFundingBank FB ON F.ID = FB.FundingID 
							INNER JOIN IMS.NMRFundingTransaction FT ON FB.ID = FT.FundingBankID						
	WHERE FT.DateTimeLastTransaction IS NULL AND 
		FT.FundingType = 'B' AND
		F.AccountNumber = @NMRAccountNumber	 
	GROUP BY FB.ID	
	  
	SELECT  FRPT.* FROM
	(   
		(
		SELECT F.ID as FundingID,
			   F.AccountNumber as NMRAccountNumber,
			   FB.TrackingNum as NMRTrackingNumber,
			   NMR.LName + ', ' + NMR.FName as NMRMemberName,
			   FB.ID as FundingBankID,
			   0 as FundingTransactionID,
			   FB.RoutingNumber as FundingBankRouting,
			   FB.AccountNumberEncrypted as FundingBankAccountNumberEncrypted,
			   FB.AccountNumberLast4 as FundingBankAccountAccountLast4,
			   FB.BankName as FundingBankName,
			   FB.AccountType as FundingBankAccountType,
			   FB.Amount1 as VerificationAmount1,
			   FB.Amount2 as VerificationAmount2,
			   0 as TransferAmount,
			   0 as TransferAmountTotal,
			   0 as TargetSubAccountSuffix,
			   0 as TargetSubAccountSeq,
			   FB.DateTimeCreated as DateTimeCreated
		FROM IMS.NMRFunding F INNER JOIN IMS.NMRFundingBank FB ON F.ID = FB.FundingID
								INNER JOIN IMS.NewMemberRequest NMR ON FB.TrackingNum = NMR.TrackingNum
		WHERE	FB.VerificationStatus = 'P' AND 
				F.AccountNumber = @NMRAccountNumber	
		)	
		UNION ALL
		(		
		SELECT F.ID as FundingID,
			   F.AccountNumber as NMRAccountNumber,
			   FB.TrackingNum as NMRTrackingNumber,
			   NMR.LName + ', ' + NMR.FName as NMRMemberName,
			   FB.ID as FundingBankID,
			   FT.ID as FundingTransactionID,
			   FB.RoutingNumber as FundingBankRouting,
			   FB.AccountNumberEncrypted as FundingBankAccountNumberEncrypted,
			   FB.AccountNumberLast4 as FundingBankAccountAccountLast4,
			   FB.BankName as FundingBankName,
			   FB.AccountType as FundingBankAccountType,
				0 as VerificationAmount1,
				0 as VerificationAmount2,
			   FT.Amount as TransferAmount,
			   TS.TransferAmountTotal as TransferAmountTotal,
			   FT.TargetSubAccountSuffix as TargetSubAccountSuffix,
			   FT.TargetSubAccountSeq as TargetSubAccountSeq,
			   FT.DateTimeCreated as DateTimeCreated
		FROM IMS.NMRFunding F 
				INNER JOIN IMS.NMRFundingBank FB ON F.ID = FB.FundingID
					INNER JOIN IMS.NMRFundingTransaction FT ON FB.ID = FT.FundingBankID
						INNER JOIN IMS.NewMemberRequest NMR ON FB.TrackingNum = NMR.TrackingNum
							INNER JOIN @TransactionSummary TS ON FB.ID = TS.FundingBankID
		WHERE	FT.DateTimeLastTransaction IS NULL AND 
				FT.FundingType = 'B' AND 
				F.AccountNumber = @NMRAccountNumber
		)
	)  FRPT	ORDER BY FRPT.NMRTrackingNumber, FRPT.FundingID, FRPT.FundingBankID, FRPT.FundingTransactionID
	END		
END

GO
/****** Object:  StoredProcedure [IMS].[spSCFed_ILAApplicationSearch_Select]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_ILAApplicationSearch_Select
CREATE Procedure [IMS].[spSCFed_ILAApplicationSearch_Select]
	@TrackingNum varchar(9),
	@SSN varchar(9),
	@Account varchar(9),
	@AppNumber varchar(9)
AS

DECLARE @SQL varchar(1000)
SET @SQL = 'SELECT AI.*, A.UserSessionXML FROM ILA_ApplicationInfo AI INNER JOIN ILA_Application A ON A.TrackingNum = AI.TrackingNum WHERE 1=1'
IF @TrackingNum <> '*'
BEGIN
	SET @SQL = @SQL + ' AND AI.TrackingNum = ''' + @TrackingNum + ''''
END
IF @SSN <> '*'
BEGIN
	SET @SQL = @SQL + ' AND AI.PrimarySSN = ''' + @SSN + ''''
END
IF @Account <> '*'
BEGIN
	SET @SQL = @SQL + ' AND AI.Account = ''' + @Account + ''''
END
IF @AppNumber <> '*'
BEGIN
	SET @SQL = @SQL + ' AND AI.AppNumber = ''' + @AppNumber + ''''
END

EXEC(@SQL)
GO
/****** Object:  StoredProcedure [IMS].[spSCFed_OAOReport_ApplicationStatusReport]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_OAOReport_ApplicationStatusReport
CREATE Procedure [IMS].[spSCFed_OAOReport_ApplicationStatusReport]
	@StartDate datetime,
	@StopDate datetime
AS

SELECT
	NMR.TrackingNum
	, UPPER(RTRIM(LEFT(NMR.FName, 1)) + ' ' + RTRIM(NMR.LName)) AS MemberName
	, NMR.ApplyDate AS [Date_Time]
	, NMR.CurrBranch AS Branch
	, CASE
		WHEN NMR.Processed = '1' THEN 'In-Process'
		WHEN NMR.Processed = '999' THEN 'Created'
		ELSE 'Denied'
		END AS Status
	, CASE
		WHEN (SELECT COUNT(*) FROM NMRFundingBank AS NMRFB WHERE NMRFB.TrackingNum = NMR.TrackingNum AND NMRFB.VerificationStatus <> 'X' AND NMRFB.VerificationStatus <> 'E') > 0 THEN 'ACH'
		WHEN (SELECT COUNT(*) FROM NMRFundingCard AS NMRFC WHERE NMRFC.TrackingNum = NMR.TrackingNum) > 0 THEN 'Credit Card'
		WHEN (SELECT COUNT(*) FROM NMRFundingTransaction AS NMRFT WHERE NMRFT.TrackingNum = NMR.TrackingNum AND NMRFT.SourceSubAccountSeq <> '') > 0 THEN 'Transfer'
		WHEN (SELECT FundingType FROM NMRFundingTransaction AS NMRFT WHERE NMRFT.TrackingNum = NMR.TrackingNum) = NULL THEN 'Skipped'
		ELSE 'None'
		END AS PaymentMethod
	, (SELECT SUM(Amount) FROM NMRFundingTransaction AS NMRFT WHERE NMRFT.TrackingNum = NMR.TrackingNum GROUP BY NMRFT.TrackingNum) AS InitialAmountFunded
	, NMR.Account AS AccountNumber
FROM IMS.NewMemberRequest NMR
WHERE
	NMR.Processed > 0
	AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> ''
	AND (NMR.ApplyDate >= @StartDate AND NMR.ApplyDate <= @StopDate)
GO
/****** Object:  StoredProcedure [IMS].[spSCFed_OAOReport_FundingDetailReport]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_OAOReport_FundingDetailReport
CREATE Procedure [IMS].[spSCFed_OAOReport_FundingDetailReport]
	@StartDate datetime,
	@StopDate datetime
AS

SELECT Bank, Card, Existing, Skipped FROM
(
	(SELECT COUNT(DISTINCT NMRFT.TrackingNum) AS Bank
	FROM IMS.NMRFundingTransaction NMRFT
	LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	INNER JOIN IMS.NMRFundingBank NMRFB ON NMRFB.ID = NMRFT.FundingBankID
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND NMRFT.FundingBankID <> '' AND NMR.Processed = 999 AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate) AND (NMRFB.VerificationStatus <> 'E') AND (NMRFB.VerificationStatus <> 'X')) a	-- AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> ''
		FULL OUTER JOIN
	(SELECT COUNT(DISTINCT NMRFT.TrackingNum) AS Card
	FROM IMS.NMRFundingTransaction NMRFT
	LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND NMRFT.FundingCardID <> '' AND NMR.Processed = 999 AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate)) b ON 1=1	-- AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> ''
		FULL OUTER JOIN
	(SELECT COUNT(DISTINCT NMRFT.TrackingNum) AS Existing
	FROM IMS.NMRFundingTransaction NMRFT
	LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND NMRFT.SourceSubAccountSeq <> '' AND NMR.Processed = 999 AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate)) c ON 1=1	-- AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> ''
		FULL OUTER JOIN
	(SELECT COUNT(DISTINCT NMR.TrackingNum) AS Skipped
	FROM IMS.NMRFundingTransaction NMRFT
	FULL OUTER JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND (NMR.Processed = 999 AND ISNULL(NMRFT.TrackingNum, 0) = 0) AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate)) d ON 1=1	-- AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> ''
)

UNION ALL

SELECT Bank, Card, Existing, Skipped FROM
(
	(SELECT COUNT(DISTINCT NMRFT.TrackingNum) AS Bank
	FROM IMS.NMRFundingTransaction NMRFT
	LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	INNER JOIN IMS.NMRFundingBank NMRFB ON NMRFB.ID = NMRFT.FundingBankID
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND NMRFT.FundingBankID <> '' AND NMR.Processed = 998 AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate) AND (NMRFB.VerificationStatus <> 'E') AND (NMRFB.VerificationStatus <> 'X')) a	-- AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> ''
		FULL OUTER JOIN
	(SELECT COUNT(DISTINCT NMRFT.TrackingNum) AS Card
	FROM IMS.NMRFundingTransaction NMRFT
	LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND NMRFT.FundingCardID <> '' AND NMR.Processed = 998 AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate)) b ON 1=1	-- AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> ''
		FULL OUTER JOIN
	(SELECT COUNT(DISTINCT NMRFT.TrackingNum) AS Existing
	FROM IMS.NMRFundingTransaction NMRFT
	LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND NMRFT.SourceSubAccountSeq <> '' AND NMR.Processed = 998 AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate)) c ON 1=1	-- AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> ''
		FULL OUTER JOIN
	(SELECT COUNT(DISTINCT NMR.TrackingNum) AS Skipped
	FROM IMS.NMRFundingTransaction NMRFT
	FULL OUTER JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND (NMR.Processed = 998 AND ISNULL(NMRFT.TrackingNum, 0) = 0) AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate)) d ON 1=1	-- AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> ''
)
GO
/****** Object:  StoredProcedure [IMS].[spSCFed_ReviewQueue_SelectAll]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Jon Eagar
-- Create date: 7/08/2011
-- Description:	Lists the active NMR records for the Queue Review
-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_ReviewQueue_SelectAll
-- =============================================
CREATE PROCEDURE [IMS].[spSCFed_ReviewQueue_SelectAll] 
	-- Add the parameters for the stored procedure here
	@StartDate DATETIME = NULL,
	@EndDate DATETIME = NULL,
	@StatusCode VARCHAR(2) = NULL
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
 
	DECLARE @Hierarchy INT
	DECLARE @StatusID INT

	IF @StartDate IS NOT NULL AND @StartDate <> ''
	BEGIN
		SET @StartDate = CONVERT(DATETIME,(CONVERT(VARCHAR(10), @StartDate, 102)))  --Set Time to beginning of Day
		SET @EndDate = CAST( CONVERT(CHAR(10), @EndDate, 101) + ' 11:59 PM' AS DATETIME) --Set Time to end of day
	END
	
	SET @StatusCode = NULLIF(@StatusCode,'')

	DECLARE @ReviewQueue TABLE
	(
		ID INT IDENTITY(1,1) PRIMARY KEY CLUSTERED,
		TrackingNum INT,	
		Name VARCHAR(90),
		EmployerName VARCHAR(250),
		Email VARCHAR(200),
		Account VARCHAR(50),
		StatusName VARCHAR(50),
		StatusID INT,
		FundingComplete VARCHAR(50), 
		ApplyDate DATETIME,
		Teller VARCHAR(50),
		LastPage VARCHAR(50),
		Misc VARCHAR(1000),
		TNExpireDate DATETIME
	)

	IF (@StatusCode IS NOT NULL)
	BEGIN
		SELECT @Hierarchy=RQC.Hierarchy, @StatusID=RQC.ID FROM IMS.ReviewQueueConfig RQC WHERE RQC.StatusCode = @StatusCode
	END

	IF (@Hierarchy > 0 OR @StatusCode IS NULL)
	BEGIN
		--IDV DECLINE
		INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Email, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, Misc, TNExpireDate)
		SELECT	DISTINCT NMR.TrackingNum, 
				LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
				--RTRIM(LTRIM(NMRW.EmployerName)) AS EmployerName,
				'Chks: ' + CASE WHEN (SELECT COUNT(CS.TrackingNum) FROM NewMemberCheckOrderSimple CS WHERE CS.TrackingNum = NMR.TrackingNum) > 0 THEN 'Check Order: YES' ELSE 'NO' END
				+ '<br>Sign: '
				+ COALESCE((SELECT TOP 1 [status] FROM IMS.DocuSignEnvelope WHERE DocuSignEnvelope.trackingNum = NMR.TrackingNum), '')
				+ ' - ' + COALESCE((SELECT TOP 1 [statusSetBy] FROM IMS.DocuSignEnvelope WHERE DocuSignEnvelope.trackingNum = NMR.TrackingNum), '')
				AS EmployerName,
				RTRIM(LTRIM(NMR.Email1)) AS Email,
				NMR.Account, 
				RQC.StatusName,
				RQC.ID, 
				NMR.FundingComplete, 
				NMR.ApplyDate,
				(SELECT TOP 1 CompletedBy FROM IMS.ActionLog WHERE TrackingNum = NMR.TrackingNum AND NullIf(CompletedBy, '') IS NOT NULL ORDER BY CompletedDate DESC) AS Seller,
				(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
				RTRIM(RTRIM(NMRH.Address1) + CASE ISNULL(NMRH.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(NMRH.Address2) END + CASE ISNULL(NMRH.Address3, '') WHEN '' THEN '' ELSE ', ' + RTRIM(NMRH.Address3) END) + '<br>' + RTRIM(NMRH.city) + ', ' + NMRH.state + ' ' + CASE LEN(NMRH.Zip) WHEN 9 THEN LEFT(NMRH.zip, 5) + '-' + Right(NMRH.Zip, 4) ELSE NMRH.Zip END AS Misc,
				NMR.TNExpireDate
		FROM IMS.NewMemberRequest NMR 
				INNER JOIN 
				IMS.NewMemberManualApproval MA 
					ON NMR.TrackingNum = MA.TrackingNum 
						INNER JOIN IMS.ReviewQueueConfig RQC ON RQC.StatusCode = 'ID'
							LEFT JOIN IMS.NewMemberHome NMRH
								ON NMR.TrackingNum = NMRH.TrackingNum
							LEFT JOIN IMS.NewMemberWork NMRW
								ON NMR.TrackingNum = NMRW.TrackingNum
		WHERE NMR.Processed NOT IN (-1, 998, 999) AND (MA.Category = 'ID' AND MA.ApprovalStatus = '') AND (@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate) AND DATALENGTH(NMR.UserSessionXML) > 0  AND NMR.UserSessionXML IS NOT NULL
		
		IF (@Hierarchy > 1 OR @StatusCode IS NULL)
		BEGIN
			--Miscellaneous Decline
			INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Email, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, Misc, TNExpireDate)
			SELECT	DISTINCT NMR.TrackingNum, 
					LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
					--RTRIM(LTRIM(NMRW.EmployerName)) AS EmployerName,
					'Chks: ' + CASE WHEN (SELECT COUNT(CS.TrackingNum) FROM NewMemberCheckOrderSimple CS WHERE CS.TrackingNum = NMR.TrackingNum) > 0 THEN 'Check Order: YES' ELSE 'NO' END
					+ '<br>Sign: '
					+ COALESCE((SELECT TOP 1 [status] FROM IMS.DocuSignEnvelope WHERE DocuSignEnvelope.trackingNum = NMR.TrackingNum), '')
					+ ' - ' + COALESCE((SELECT TOP 1 [statusSetBy] FROM IMS.DocuSignEnvelope WHERE DocuSignEnvelope.trackingNum = NMR.TrackingNum), '')
					 AS EmployerName,
					RTRIM(LTRIM(NMR.Email1)) AS Email,
					NMR.Account, 
					RQC.StatusName,
					RQC.ID, 
					NMR.FundingComplete, 
					NMR.ApplyDate,
					(SELECT TOP 1 CompletedBy FROM IMS.ActionLog WHERE TrackingNum = NMR.TrackingNum AND NullIf(CompletedBy, '') IS NOT NULL ORDER BY CompletedDate DESC) AS Seller,
					(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
					RTRIM(RTRIM(NMRH.Address1) + CASE ISNULL(NMRH.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(NMRH.Address2) END + CASE ISNULL(NMRH.Address3, '') WHEN '' THEN '' ELSE ', ' + RTRIM(NMRH.Address3) END) + '<br>' + RTRIM(NMRH.city) + ', ' + NMRH.state + ' ' + CASE LEN(NMRH.Zip) WHEN 9 THEN LEFT(NMRH.zip, 5) + '-' + Right(NMRH.Zip, 4) ELSE NMRH.Zip END AS Misc,
					NMR.TNExpireDate
			FROM IMS.NewMemberRequest NMR 
					INNER JOIN 
					IMS.NewMemberManualApproval MA 
						ON NMR.TrackingNum = MA.TrackingNum AND MA.JointSequence = 0
							INNER JOIN IMS.ReviewQueueConfig RQC ON RQC.StatusCode = 'MD' AND RQC.ReasonCode = LTRIM(RTRIM(MA.ReasonCode))
								LEFT JOIN IMS.NewMemberHome NMRH
									ON NMR.TrackingNum = NMRH.TrackingNum
								LEFT JOIN IMS.NewMemberWork NMRW
									ON NMR.TrackingNum = NMRW.TrackingNum					
			WHERE NOT EXISTS(SELECT TrackingNum FROM @ReviewQueue RQ Where RQ.TrackingNum = NMR.TrackingNum) AND
				  NMR.Processed NOT IN (-1, 998, 999) AND 
				  (MA.ApprovalStatus = '') AND (@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate)AND DATALENGTH(NMR.UserSessionXML) > 0  AND NMR.UserSessionXML IS NOT NULL
					AND GETDATE() < TNExpireDate

			IF (@Hierarchy > 2 OR @StatusCode IS NULL)
			BEGIN
				--Joint Decline
				INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Email, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, Misc, TNExpireDate)
				SELECT	DISTINCT NMR.TrackingNum, 
						LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
						--RTRIM(LTRIM(NMRW.EmployerName)) AS EmployerName,
						'Chks: ' + CASE WHEN (SELECT COUNT(CS.TrackingNum) FROM NewMemberCheckOrderSimple CS WHERE CS.TrackingNum = NMR.TrackingNum) > 0 THEN 'YES' ELSE 'NO' END
						+ '<br>Sign: '
						+ COALESCE((SELECT TOP 1 [status] FROM IMS.DocuSignEnvelope WHERE DocuSignEnvelope.trackingNum = NMR.TrackingNum), '')
						+ ' - ' + COALESCE((SELECT TOP 1 [statusSetBy] FROM IMS.DocuSignEnvelope WHERE DocuSignEnvelope.trackingNum = NMR.TrackingNum), '')
						AS EmployerName,
						RTRIM(LTRIM(NMR.Email1)) AS Email,
						NMR.Account, 
						RQC.StatusName,
						RQC.ID, 
						NMR.FundingComplete, 
						NMR.ApplyDate,
						(SELECT TOP 1 CompletedBy FROM IMS.ActionLog WHERE TrackingNum = NMR.TrackingNum AND NullIf(CompletedBy, '') IS NOT NULL ORDER BY CompletedDate DESC) AS Seller,
						(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
						RTRIM(RTRIM(NMRH.Address1) + CASE ISNULL(NMRH.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(NMRH.Address2) END + CASE ISNULL(NMRH.Address3, '') WHEN '' THEN '' ELSE ', ' + RTRIM(NMRH.Address3) END) + '<br>' + RTRIM(NMRH.city) + ', ' + NMRH.state + ' ' + CASE LEN(NMRH.Zip) WHEN 9 THEN LEFT(NMRH.zip, 5) + '-' + Right(NMRH.Zip, 4) ELSE NMRH.Zip END AS Misc,
						NMR.TNExpireDate
				FROM IMS.NewMemberRequest NMR 
						INNER JOIN 
						IMS.NewMemberManualApproval MA 
							ON NMR.TrackingNum = MA.TrackingNum AND MA.JointSequence > 0
								INNER JOIN IMS.ReviewQueueConfig RQC ON RQC.StatusCode = 'JD' AND RQC.ReasonCode = LTRIM(RTRIM(MA.ReasonCode))
									LEFT JOIN IMS.NewMemberHome NMRH
										ON NMR.TrackingNum = NMRH.TrackingNum
									LEFT JOIN IMS.NewMemberWork NMRW
										ON NMR.TrackingNum = NMRW.TrackingNum					
				WHERE NOT EXISTS(SELECT TrackingNum FROM @ReviewQueue RQ Where RQ.TrackingNum = NMR.TrackingNum) AND
					  NMR.Processed NOT IN (-1, 998, 999) AND 
					  (MA.ApprovalStatus = '') AND (@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate)AND DATALENGTH(NMR.UserSessionXML) > 0  AND NMR.UserSessionXML IS NOT NULL
						AND GETDATE() < TNExpireDate

				IF (@Hierarchy > 3 OR @StatusCode IS NULL)
				BEGIN
					--Manual Review
					INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Email, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, Misc, TNExpireDate)
					SELECT	DISTINCT NMR.TrackingNum, 
							LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
							--RTRIM(LTRIM(NMRW.EmployerName)) AS EmployerName,
							'Chks: ' + CASE WHEN (SELECT COUNT(CS.TrackingNum) FROM NewMemberCheckOrderSimple CS WHERE CS.TrackingNum = NMR.TrackingNum) > 0 THEN 'YES' ELSE 'NO' END
							+ '<br>Sign: '
							+ COALESCE((SELECT TOP 1 [status] FROM IMS.DocuSignEnvelope WHERE DocuSignEnvelope.trackingNum = NMR.TrackingNum), '')
							+ ' - ' + COALESCE((SELECT TOP 1 [statusSetBy] FROM IMS.DocuSignEnvelope WHERE DocuSignEnvelope.trackingNum = NMR.TrackingNum), '')
							AS EmployerName,
							RTRIM(LTRIM(NMR.Email1)) AS Email,
							NMR.Account, 
							RQC.StatusName,
							RQC.ID, 
							NMR.FundingComplete, 
							NMR.ApplyDate,
							(SELECT TOP 1 CompletedBy FROM IMS.ActionLog WHERE TrackingNum = NMR.TrackingNum AND NullIf(CompletedBy, '') IS NOT NULL ORDER BY CompletedDate DESC) AS Seller,
							(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
							RTRIM(RTRIM(NMRH.Address1) + CASE ISNULL(NMRH.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(NMRH.Address2) END + CASE ISNULL(NMRH.Address3, '') WHEN '' THEN '' ELSE ', ' + RTRIM(NMRH.Address3) END) + '<br>' + RTRIM(NMRH.city) + ', ' + NMRH.state + ' ' + CASE LEN(NMRH.Zip) WHEN 9 THEN LEFT(NMRH.zip, 5) + '-' + Right(NMRH.Zip, 4) ELSE NMRH.Zip END AS Misc,
							NMR.TNExpireDate
					FROM IMS.NewMemberRequest NMR 
							INNER JOIN 
							IMS.NewMemberManualApproval MA 
								ON NMR.TrackingNum = MA.TrackingNum 
									INNER JOIN IMS.ReviewQueueConfig RQC ON RQC.StatusCode = 'MR' AND RQC.ReasonCode = LTRIM(RTRIM(MA.ReasonCode))
										LEFT JOIN IMS.NewMemberHome NMRH
											ON NMR.TrackingNum = NMRH.TrackingNum
										LEFT JOIN IMS.NewMemberWork NMRW
											ON NMR.TrackingNum = NMRW.TrackingNum		
					WHERE NOT EXISTS(SELECT TrackingNum FROM @ReviewQueue RQ Where RQ.TrackingNum = NMR.TrackingNum) AND
						  NMR.Processed NOT IN (-1, 998, 999) AND 
						  (MA.ApprovalStatus = '') AND (@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate) AND DATALENGTH(NMR.UserSessionXML) > 0 AND NMR.UserSessionXML IS NOT NULL
							AND GETDATE() < TNExpireDate

					IF (@Hierarchy > 4 OR @StatusCode IS NULL)
					BEGIN
						--Need Decision/Pending
						INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Email, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, Misc, TNExpireDate)
						SELECT	DISTINCT NMR.TrackingNum, 
								LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
								--RTRIM(LTRIM(NMRW.EmployerName)) AS EmployerName,
								'Chks: ' + CASE WHEN (SELECT COUNT(CS.TrackingNum) FROM NewMemberCheckOrderSimple CS WHERE CS.TrackingNum = NMR.TrackingNum) > 0 THEN 'YES' ELSE 'NO' END
								+ '<br>Sign: '
								+ COALESCE((SELECT TOP 1 [status] FROM IMS.DocuSignEnvelope WHERE DocuSignEnvelope.trackingNum = NMR.TrackingNum), '')
								+ ' - ' + COALESCE((SELECT TOP 1 [statusSetBy] FROM IMS.DocuSignEnvelope WHERE DocuSignEnvelope.trackingNum = NMR.TrackingNum), '')
								AS EmployerName,
								RTRIM(LTRIM(NMR.Email1)) AS Email,
								NMR.Account, 
								RQC.StatusName,
								RQC.ID, 
								NMR.FundingComplete, 
								NMR.ApplyDate,
								(SELECT TOP 1 CompletedBy FROM IMS.ActionLog WHERE TrackingNum = NMR.TrackingNum AND NullIf(CompletedBy, '') IS NOT NULL ORDER BY CompletedDate DESC) AS Seller,
								(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
								RTRIM(RTRIM(NMRH.Address1) + CASE ISNULL(NMRH.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(NMRH.Address2) END + CASE ISNULL(NMRH.Address3, '') WHEN '' THEN '' ELSE ', ' + RTRIM(NMRH.Address3) END) + '<br>' + RTRIM(NMRH.city) + ', ' + NMRH.state + ' ' + CASE LEN(NMRH.Zip) WHEN 9 THEN LEFT(NMRH.zip, 5) + '-' + Right(NMRH.Zip, 4) ELSE NMRH.Zip END AS Misc,
								NMR.TNExpireDate
						FROM IMS.NewMemberRequest NMR  
								INNER JOIN IMS.NewMemberSubAccount SA 
									ON NMR.TrackingNum = SA.TrackingNum
										INNER JOIN IMS.ReviewQueueConfig RQC ON RQC.StatusCode = 'DP'
											LEFT JOIN IMS.NewMemberHome NMRH
												ON NMR.TrackingNum = NMRH.TrackingNum
											LEFT JOIN IMS.NewMemberWork NMRW
												ON NMR.TrackingNum = NMRW.TrackingNum
													LEFT JOIN IMS.NewMemberManualApproval MA 
														ON NMR.TrackingNum = MA.TrackingNum
						WHERE NOT EXISTS(SELECT TrackingNum FROM @ReviewQueue RQ Where RQ.TrackingNum = NMR.TrackingNum) AND
							  NMR.Processed NOT IN (-1, 998, 999) AND 
							  ((SA.Approval <> 'A' AND SA.ApprovedBy = '') OR (MA.ApprovalStatus = '')) AND 
							  (@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate) AND DATALENGTH(NMR.UserSessionXML) > 0 AND NMR.UserSessionXML IS NOT NULL
								AND GETDATE() < TNExpireDate

						IF (@Hierarchy > 5 OR @StatusCode IS NULL)
						BEGIN
							--In Progress
							INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Email, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, Misc, TNExpireDate)
							SELECT	DISTINCT NMR.TrackingNum, 
									LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
									--RTRIM(LTRIM(NMRW.EmployerName)) AS EmployerName,
									'Chks: ' + CASE WHEN (SELECT COUNT(CS.TrackingNum) FROM NewMemberCheckOrderSimple CS WHERE CS.TrackingNum = NMR.TrackingNum) > 0 THEN 'YES' ELSE 'NO' END
									+ '<br>Sign: '
									+ COALESCE((SELECT TOP 1 [status] FROM IMS.DocuSignEnvelope WHERE DocuSignEnvelope.trackingNum = NMR.TrackingNum), '')
									+ ' - ' + COALESCE((SELECT TOP 1 [statusSetBy] FROM IMS.DocuSignEnvelope WHERE DocuSignEnvelope.trackingNum = NMR.TrackingNum), '')
									AS EmployerName,
									RTRIM(LTRIM(NMR.Email1)) AS Email,
									NMR.Account, 
									RQC.StatusName,
									RQC.ID, 
									NMR.FundingComplete, 
									NMR.ApplyDate,
									(SELECT TOP 1 CompletedBy FROM IMS.ActionLog WHERE TrackingNum = NMR.TrackingNum AND NullIf(CompletedBy, '') IS NOT NULL ORDER BY CompletedDate DESC) AS Seller,
									(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
									RTRIM(RTRIM(NMRH.Address1) + CASE ISNULL(NMRH.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(NMRH.Address2) END + CASE ISNULL(NMRH.Address3, '') WHEN '' THEN '' ELSE ', ' + RTRIM(NMRH.Address3) END) + '<br>' + RTRIM(NMRH.city) + ', ' + NMRH.state + ' ' + CASE LEN(NMRH.Zip) WHEN 9 THEN LEFT(NMRH.zip, 5) + '-' + Right(NMRH.Zip, 4) ELSE NMRH.Zip END AS Misc,
									NMR.TNExpireDate
							FROM IMS.NewMemberRequest NMR			
									INNER JOIN IMS.ReviewQueueConfig RQC 
										ON RQC.StatusCode = 'IP'
											LEFT JOIN IMS.NewMemberHome NMRH
												ON NMR.TrackingNum = NMRH.TrackingNum
											LEFT JOIN IMS.NewMemberWork NMRW
												ON NMR.TrackingNum = NMRW.TrackingNum
							WHERE NOT EXISTS(SELECT TrackingNum FROM @ReviewQueue RQ WHERE RQ.TrackingNum = NMR.TrackingNum) AND
								  NMR.Processed = 1 AND 
								  (SELECT COUNT(TrackingNum) FROM IMS.NewMemberManualApproval MA WHERE MA.TrackingNum = NMR.TrackingNum AND MA.ApprovalStatus = '') = 0 AND
								  (SELECT COUNT(TrackingNum) FROM IMS.NewMemberSubAccount SA WHERE SA.TrackingNum = NMR.TrackingNum) = (SELECT COUNT(TrackingNum) FROM IMS.NewMemberSubAccount SA WHERE SA.TrackingNum = NMR.TrackingNum AND (SA.Approval = 'A' OR SA.ApprovedBy <> '')) AND	 
								  (@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate) AND DATALENGTH(NMR.UserSessionXML) > 0 AND NMR.UserSessionXML IS NOT NULL
									AND GETDATE() < TNExpireDate

							IF (@Hierarchy > 6 OR @StatusCode IS NULL)
							BEGIN
								--Not Funded
								INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Email, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, Misc, TNExpireDate)
								SELECT	DISTINCT NMR.TrackingNum, 
										LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
										--RTRIM(LTRIM(NMRW.EmployerName)) AS EmployerName,
										'Chks: ' + CASE WHEN (SELECT COUNT(CS.TrackingNum) FROM NewMemberCheckOrderSimple CS WHERE CS.TrackingNum = NMR.TrackingNum) > 0 THEN 'YES' ELSE 'NO' END
										+ '<br>Sign: '
										+ COALESCE((SELECT TOP 1 [status] FROM IMS.DocuSignEnvelope WHERE DocuSignEnvelope.trackingNum = NMR.TrackingNum), '')
										+ ' - ' + COALESCE((SELECT TOP 1 [statusSetBy] FROM IMS.DocuSignEnvelope WHERE DocuSignEnvelope.trackingNum = NMR.TrackingNum), '')
										AS EmployerName,
										RTRIM(LTRIM(NMR.Email1)) AS Email,
										NMR.Account, 
										RQC.StatusName,
										RQC.ID, 
										NMR.FundingComplete, 
										NMR.ApplyDate,
										(SELECT TOP 1 CompletedBy FROM IMS.ActionLog WHERE TrackingNum = NMR.TrackingNum AND NullIf(CompletedBy, '') IS NOT NULL ORDER BY CompletedDate DESC) AS Seller,
										(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
										RTRIM(RTRIM(NMRH.Address1) + CASE ISNULL(NMRH.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(NMRH.Address2) END + CASE ISNULL(NMRH.Address3, '') WHEN '' THEN '' ELSE ', ' + RTRIM(NMRH.Address3) END) + '<br>' + RTRIM(NMRH.city) + ', ' + NMRH.state + ' ' + CASE LEN(NMRH.Zip) WHEN 9 THEN LEFT(NMRH.zip, 5) + '-' + Right(NMRH.Zip, 4) ELSE NMRH.Zip END AS Misc,
										NMR.TNExpireDate
								FROM IMS.NewMemberRequest NMR
									INNER JOIN IMS.ReviewQueueConfig RQC 
										ON RQC.StatusCode = 'NF'
											LEFT JOIN IMS.NewMemberHome NMRH
												ON NMR.TrackingNum = NMRH.TrackingNum
											LEFT JOIN IMS.NewMemberWork NMRW
												ON NMR.TrackingNum = NMRW.TrackingNum
								WHERE NOT EXISTS(SELECT TrackingNum FROM @ReviewQueue RQ WHERE RQ.TrackingNum = NMR.TrackingNum) AND
									  NMR.Processed = 999 AND 
									  IsNull(FundingComplete, 'N') <> 'Y' AND
									  (@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate) AND DATALENGTH(NMR.UserSessionXML) > 0 AND NMR.UserSessionXML IS NOT NULL
									  AND GETDATE() < TNExpireDate

							END
						END
					END	  
				END
			END
		END
		SELECT 
		TrackingNum AS TrackingNumber,
		--Name AS Name,
		--EmployerName AS EmployerName,
		--LOWER(Email) AS Email,
		--Account AS Account,
		--StatusName AS StatusName,
		--ApplyDate AS ApplyDate,
		--CASE WHEN FundingComplete <> 'Y' THEN 'N' ELSE 'Y' END AS FundingComplete,
		--Teller AS Teller,
		--LastPage AS LastPage,
		--Misc AS Misc,
		--TNExpireDate AS TNExpireDate,

		-- Normal font size is 12px.
		--'<span style="font-size:11px;">' + CONVERT(VARCHAR, TrackingNum) + '</span>' AS TrackingNumber,
		'<span style="font-size:11px;">' + Name + '</span>' AS Name,
		'<span style="font-size:11px;">' + EmployerName + '</span>' AS EmployerName,
		'<span style="font-size:11px;">' + LOWER(Email) + '</span>' AS Email,
		'<span style="font-size:11px;">' + Account + '</span>' AS Account,
		'<span style="font-size:11px;">' + StatusName + '</span>' AS StatusName,
		'<span style="font-size:11px;">' + CONVERT(VARCHAR, ApplyDate, 101) + '</span>' AS ApplyDate,
		'<span style="font-size:11px;">' + CASE WHEN FundingComplete <> 'Y' THEN 'N' ELSE 'Y' END + '</span>' AS FundingComplete,
		'<span style="font-size:11px;">' + Teller + '</span>' AS Teller,
		'<span style="font-size:11px;">' + LastPage + '</span>' AS LastPage,
		'<div style="font-size:11px; line-height:1.0;">' + Misc + '</div>' AS Misc,
		'<span style="font-size:11px;">' + CONVERT(VARCHAR, TNExpireDate) + '</span>' AS TNExpireDate,
		(
			SELECT COUNT(*)
			FROM IMS.SecureMailThread SMT
			LEFT JOIN IMS.SecureMailAttachment SMA ON SMA.ThreadId = SMT.ThreadId
			WHERE SMT.TrackingNum = RQ.TrackingNum AND SMA.Status = 'U'
		) AS AttachU,
		(
			SELECT COUNT(*)
			FROM IMS.SecureMailThread SMT
			LEFT JOIN IMS.SecureMailAttachment SMA ON SMA.ThreadId = SMT.ThreadId
			WHERE SMT.TrackingNum = RQ.TrackingNum AND SMA.Status = 'V'
		) AS AttachV,
		(
			SELECT COUNT(*)
			FROM IMS.SecureMailThread SMT
			LEFT JOIN IMS.SecureMailAttachment SMA ON SMA.ThreadId = SMT.ThreadId
			WHERE SMT.TrackingNum = RQ.TrackingNum AND SMA.Status = 'Q'
		) AS AttachQU,
		(
			SELECT COUNT(*)
			FROM IMS.SecureMailThread SMT
			LEFT JOIN IMS.SecureMailAttachment SMA ON SMA.ThreadId = SMT.ThreadId
			WHERE SMT.TrackingNum = RQ.TrackingNum AND SMA.Status = 'QV'
		) AS AttachQV
		FROM @ReviewQueue RQ 
		WHERE RQ.StatusID = @StatusID OR @StatusID IS NULL 
			AND TNExpireDate >= GETDATE()
		ORDER BY ApplyDate DESC, TrackingNum DESC
	END
END
GO
/****** Object:  StoredProcedure [IMS].[spSCFed_SignOnOAO]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.SignOnOAO 
CREATE Procedure [IMS].[spSCFed_SignOnOAO]
@TrackingNum int,
@Password varchar(24),
@SSN varchar(9),
@DOB datetime
AS
BEGIN
	SELECT
		n.TrackingNum, 
		ISNULL(CAST(n.Account AS VARCHAR(50)),'') AS Account, 
		n.UserSessionXML, 
		n.AccountType, 
		n.Created, 
		n.Processed, 
		n.TNExpireDate, 
		e.BadLoginAttempts
	FROM IMS.NewMemberRequest n
	JOIN IMS.NewMemberRequestExtra e ON n.TrackingNum = e.TrackingNum
	WHERE 
		n.TrackingNum = @TrackingNum 
		AND (
			(
				(n.Password = @Password COLLATE SQL_Latin1_General_CP1_CS_AS) 
				OR (
					n.SSN = @SSN 
					AND n.DOB = @DOB
				)
			) 
			AND n.Processed <> '998' 
			OR (@Password = 'MoDESTaFF')
		)
-- NOTE: The "COLLATE SQL_Latin1_General_CP1_CS_AS" above makes the password search case sensitive.
END
GO
/****** Object:  StoredProcedure [IMS].[spSCFed_SyncCarts]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_SyncCarts
CREATE PROCEDURE [IMS].[spSCFed_SyncCarts]
@TrackingNum int,
@SyncMode varchar(1)
AS

IF @SyncMode = 'S' OR @SyncMode = 'B' OR @SyncMode = 'Y'
BEGIN
	--Delete from cart where subaccount record no longer exists
	DELETE FROM IMS.NewMemberShoppingCart
	WHERE TrackingNum = @TrackingNum AND SubAccountID IS NOT NULL AND
		SubAccountID NOT IN (SELECT ID FROM IMS.NewMemberSubAccount
					WHERE TrackingNum = @TrackingNum)
END

IF @SyncMode = 'C' OR @SyncMode = 'B' OR @SyncMode = 'Y'
BEGIN
	--Delete from subaccounts where cart record no longer exists
	DELETE FROM IMS.NewMemberSubAccount
	WHERE TrackingNum = @TrackingNum AND ShoppingCartID IS NOT NULL AND
		ShoppingCartID NOT IN (SELECT ID FROM IMS.NewMemberShoppingCart
					WHERE TrackingNum = @TrackingNum)
END

IF @SyncMode = 'S' OR @SyncMode = 'B' OR @SyncMode = 'Y'
BEGIN
	--Update cart items with changes in the subaccount records
	UPDATE IMS.NewMemberShoppingCart
	SET RequestedAmount = (SELECT Amount FROM IMS.NewMemberSubAccount
				WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberShoppingCart.SubAccountID),
		InsuranceAmount1 = NULL,
		InsuranceAmount2 = NULL
	WHERE TrackingNum = @TrackingNum AND
		SubAccountID IN (SELECT ID FROM IMS.NewMemberSubAccount WHERE TrackingNum = @TrackingNum) AND
		IsNull((SELECT LineOfCredit FROM IMS.udt_LSubAccounts WHERE UniqueID = IMS.NewMemberShoppingCart.ProductID), 'N') = 'N' AND
		(SELECT Amount FROM IMS.NewMemberSubAccount WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberShoppingCart.SubAccountID) <> IMS.NewMemberShoppingCart.RequestedAmount + IsNull(IMS.NewMemberShoppingCart.InsuranceAmount1, 0) + IsNull(IMS.NewMemberShoppingCart.InsuranceAmount2, 0)

	UPDATE IMS.NewMemberShoppingCart
	SET RequestedAmount = (SELECT CreditLimit FROM IMS.NewMemberSubAccount
				WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberShoppingCart.SubAccountID),
		InsuranceAmount1 = NULL,
		InsuranceAmount2 = NULL
	WHERE TrackingNum = @TrackingNum AND
		SubAccountID IN (SELECT ID FROM IMS.NewMemberSubAccount WHERE TrackingNum = @TrackingNum) AND
		(SELECT LineOfCredit FROM IMS.udt_LSubAccounts WHERE UniqueID = IMS.NewMemberShoppingCart.ProductID) = 'Y' AND
		(SELECT CreditLimit FROM IMS.NewMemberSubAccount WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberShoppingCart.SubAccountID) <> IMS.NewMemberShoppingCart.RequestedAmount + IsNull(IMS.NewMemberShoppingCart.InsuranceAmount1, 0) + IsNull(IMS.NewMemberShoppingCart.InsuranceAmount2, 0)

	UPDATE IMS.NewMemberShoppingCart
	SET Term = (SELECT Term FROM IMS.NewMemberSubAccount
				WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberShoppingCart.SubAccountID)
	WHERE TrackingNum = @TrackingNum AND
		SubAccountID IN (SELECT ID FROM IMS.NewMemberSubAccount WHERE TrackingNum = @TrackingNum)

	--Create cart items for new subaccount records
	INSERT INTO IMS.NewMemberShoppingCart
	(ProductID, ProductName, YesNoMaybe, SLType, Approved, TrackingNum, MasterCategoryID, CategoryID,
	Exclude, CreatedBy, CreatedOn, Created, Fulfill, LOSProductID, LOSID,
	ApprovedAmount, RequestedAmount, Requires, LoanType, LoanSubType, Term, InsCode, ClosedFlag, LossFlag, SubAccountID)
	SELECT STP.ProductID, STP.ProductDesc, 'YES', STP.SLType, 'Y', @TrackingNum AS TrackingNum, STP.MasterCategoryID, STP.CategoryID,
		Prod.Exclude, SA.CreatedBy, SA.CreatedOn, SA.Created, STP.Fulfill, STP.LOSProductID, SA.LOSID,
		CASE WHEN Prod.LineOfCredit = 'Y' THEN SA.CreditLimit
		     ELSE SA.Amount
		END AS ApprovedAmount,
		CASE WHEN Prod.LineOfCredit = 'Y' THEN SA.CreditLimit
		     ELSE SA.Amount
		END AS RequestedAmount,
		STP.Requires, STP.LoanType, STP.LoanSubType, SA.Term, SA.InsCode, SA.ClosedFlag, SA.LossFlag, SA.ID AS SubAccountID
	FROM IMS.udt_SalesToolProducts STP INNER JOIN
		IMS.NewMemberSubAccount SA ON SA.SubAccountType = STP.ProductID INNER JOIN
		IMS.NewMemberRequest NMR ON SA.TrackingNum = NMR.TrackingNum INNER JOIN
		IMS.udt_AllSubAccounts Prod ON STP.ProductID = Prod.UniqueID AND ',' + RTrim(Prod.AccountTypes) + ',' LIKE '%,' + RTrim(NMR.AccountType) + ',%'
	WHERE SA.TrackingNum = @TrackingNum AND SA.SubAccountType NOT IN (SELECT ProductID FROM IMS.NewMemberShoppingCart WHERE TrackingNum = @TrackingNum)
	
	--Delete products that require products that are no longer here
	DELETE FROM IMS.NewMemberShoppingCart
	WHERE TrackingNum = @TrackingNum AND NullIf(Requires, '') IS NOT NULL AND
		(SELECT Count(SC2.ID) FROM IMS.NewMemberShoppingCart SC2 INNER JOIN
			(SELECT DISTINCT
			        SUBSTRING(l.List, v.Number+1, CHARINDEX(',', l.List, v.Number+1) -v.Number-1) AS Requires
			   FROM Master.dbo.spt_Values v
			  CROSS JOIN
			        (SELECT ',' + RTRIM(REPLACE(Requires, ', ', ',')) + ',' AS List
				FROM IMS.NewMemberShoppingCart
				WHERE TrackingNum = @TrackingNum AND ProductID = IMS.NewMemberShoppingCart.ProductID) l
			  WHERE v.Type = 'P'
			    AND v.Number BETWEEN 1 AND LEN(l.List)-1
			    AND SUBSTRING(l.List, v.Number, 1)=',') FN ON SC2.ProductID = FN.Requires
			WHERE TrackingNum = @TrackingNum AND SC2.ProductID <> IMS.NewMemberShoppingCart.ProductID) = 0
END

IF @SyncMode = 'C' OR @SyncMode = 'B' OR @SyncMode = 'Y'
BEGIN
	--Update subaccounts with changes in the cart records
	UPDATE IMS.NewMemberSubAccount
	SET Amount = (SELECT RequestedAmount + IsNull(InsuranceAmount1, 0) + IsNull(InsuranceAmount2, 0) FROM IMS.NewMemberShoppingCart
				WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberSubAccount.ShoppingCartID)
	WHERE TrackingNum = @TrackingNum AND
		ShoppingCartID IN (SELECT ID FROM IMS.NewMemberShoppingCart WHERE TrackingNum = @TrackingNum) AND
		IsNull((SELECT LineOfCredit FROM IMS.udt_LSubAccounts WHERE UniqueID = IMS.NewMemberSubAccount.SubAccountType), 'N') = 'N' AND
		(SELECT RequestedAmount + IsNull(InsuranceAmount1, 0) + IsNull(InsuranceAmount2, 0) FROM IMS.NewMemberShoppingCart WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberSubAccount.ShoppingCartID) <> IMS.NewMemberSubAccount.Amount

	UPDATE IMS.NewMemberSubAccount
	SET CreditLimit = (SELECT RequestedAmount + IsNull(InsuranceAmount1, 0) + IsNull(InsuranceAmount2, 0) FROM IMS.NewMemberShoppingCart
				WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberSubAccount.ShoppingCartID)
	WHERE TrackingNum = @TrackingNum AND
		ShoppingCartID IN (SELECT ID FROM IMS.NewMemberShoppingCart WHERE TrackingNum = @TrackingNum) AND
		(SELECT LineOfCredit FROM IMS.udt_LSubAccounts WHERE UniqueID = IMS.NewMemberSubAccount.SubAccountType) = 'Y' AND
		(SELECT RequestedAmount + IsNull(InsuranceAmount1, 0) + IsNull(InsuranceAmount2, 0) FROM IMS.NewMemberShoppingCart WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberSubAccount.ShoppingCartID) <> IMS.NewMemberSubAccount.CreditLimit

	UPDATE IMS.NewMemberSubAccount
	SET Term = (SELECT Term FROM IMS.NewMemberShoppingCart
				WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberSubAccount.ShoppingCartID)
	WHERE TrackingNum = @TrackingNum AND
		ShoppingCartID IN (SELECT ID FROM IMS.NewMemberShoppingCart WHERE TrackingNum = @TrackingNum)

	--Create subaccount records for new cart items
	INSERT INTO IMS.NewMemberSubAccount
	(TrackingNum, Sequence, DescAbrv, SubAccountType, Description, ACC, CollateralCode, SLType, Amount,
	Approval, Created, CreatedBy, CreatedOn, ProductType,
	CreditLimit, StartSuffix, StopSuffix, APR, CashAdvanceAPR, SkipCode, Coupons, Term, Method,
	Frequency, InsCode, DisclosureCode, ReviewDate, MaturityDate, Officer, CurrBranch, StatementOrder, MaturityDisp, 
	DividendDisp, LineofCredit, PaymentPercent, AllowPlastic1, AllowPlastic2, AllowPlastic3, AllowPlastic4, 
	CreateHost, HostCommand, ServiceClass, TaxCode, JointTaxCode, W8TaxCode, KTransferLink, LoanDiscounts, 
	MICRBegin, MICREnd, MICRFormat, PromptMICR, Purpose, FundingOrder, VRLIndex, VRLMargin, 
	VRLCode, VRLFreq, LOSProductID, LOSID, LossFlag, ClosedFlag, ShoppingCartID, Action, Payment)
	SELECT @TrackingNum AS TrackingNum, (SELECT Count(ID) FROM IMS.NewMemberShoppingCart SC2 WHERE TrackingNum = @TrackingNum AND SC2.Approved = 'Y' AND 
		SC2.ProductID NOT IN (SELECT SubAccountType FROM IMS.NewMemberSubAccount SA2 WHERE TrackingNum = @TrackingNum) AND SC2.ID <= SC.ID) + 
		(SELECT IsNull(Max(Sequence), 0) FROM IMS.NewMemberSubAccount SA3 WHERE TrackingNum = @TrackingNum) AS Sequence,
	Prod.DescAbrv, Prod.UniqueID, Prod.Description, Prod.ACC, Prod.CollateralCode, Prod.SLType,
	CASE WHEN Prod.LineOfCredit = 'Y' THEN 0
	     ELSE SC.RequestedAmount + IsNull(SC.InsuranceAmount1, 0) + IsNull(SC.InsuranceAmount2, 0)
	END AS Amount, NMR.Approval, SC.Created, SC.CreatedBy, SC.CreatedOn, Prod.ProductType,
	CASE WHEN Prod.LineOfCredit = 'Y' THEN SC.RequestedAmount
	     ELSE 0
	END AS CreditLimit, Prod.StartSuffix, Prod.StopSuffix, Prod.APR, Prod.CashAdvanceAPR, Prod.SkipCode, Prod.Coupons, Prod.Term, Prod.Method,
	Prod.Frequency, Prod.InsCode, Prod.DisclosureCode, Prod.ReviewDate, Prod.MaturityDate, Prod.Officer, Prod.CurrBranch, Prod.StatementOrder, Prod.MaturityDisp, 
	Prod.DividendDisp, Prod.LineofCredit, Prod.PaymentPercent, Prod.AllowPlastic1, Prod.AllowPlastic2, Prod.AllowPlastic3, Prod.AllowPlastic4, 
	Prod.CreateHost, Prod.HostCommand, Prod.ServiceClass, Prod.TaxCode,Prod.JointTaxCode, Prod.W8TaxCode, Prod.KTransferLink, Prod.LoanDiscounts, 
	Prod.MICRBegin, Prod.MICREnd, Prod.MICRFormat, Prod.PromptMICR, Prod.Purpose, Prod.FundingOrder, Prod.VRLIndex, Prod.VRLMargin, 
	Prod.VRLCode, Prod.VRLFreq, SC.LOSProductID, SC.LOSID, SC.LossFlag, SC.ClosedFlag, SC.ID AS ShoppingCartID, Prod.Action, 0
	FROM IMS.NewMemberShoppingCart SC INNER JOIN
		IMS.NewMemberRequest NMR ON SC.TrackingNum = NMR.TrackingNum INNER JOIN
		IMS.udt_AllSubAccounts Prod ON SC.ProductID = Prod.UniqueID AND ',' + RTrim(Prod.AccountTypes) + ',' LIKE '%,' + RTrim(NMR.AccountType) + ',%'
	WHERE SC.TrackingNum = @TrackingNum AND SC.Approved = 'Y' AND SC.ProductID NOT IN (SELECT SubAccountType FROM IMS.NewMemberSubAccount WHERE TrackingNum = @TrackingNum)
	ORDER BY ID
	
	--Delete products that require products that are no longer here
	/*DELETE NewMemberSubAccount FROM IMS.NewMemberSubAccount SA
	WHERE TrackingNum = @TrackingNum AND
		(SELECT NullIf(Requires, '') FROM IMS.udt_AllSubAccounts WHERE UniqueID = SA.SubAccountType) IS NOT NULL AND
		(SELECT Count(SA2.ID) FROM IMS.NewMemberSubAccount SA2 INNER JOIN
			(SELECT DISTINCT
			        SUBSTRING(l.List, v.Number+1, CHARINDEX(',', l.List, v.Number+1) -v.Number-1) AS Requires
			   FROM Master.dbo.spt_Values v
			  CROSS JOIN
			        (SELECT ',' + RTRIM(REPLACE(Requires, ', ', ',')) + ',' AS List
				FROM IMS.udt_AllSubAccounts
				WHERE UniqueID = SA.SubAccountType) l
			  WHERE v.Type = 'P'
			    AND v.Number BETWEEN 1 AND LEN(l.List)-1
			    AND SUBSTRING(l.List, v.Number, 1)=',') FN ON SA2.SubAccountType = FN.Requires
			WHERE TrackingNum = @TrackingNum AND SA2.SubAccountType <> SA.SubAccountType) = 0*/

	--Delete subaccounts that came from shopping cart items that are no longer approved
	DELETE FROM IMS.NewMemberSubAccount
	WHERE TrackingNum = @TrackingNum AND ((ID IN (SELECT SubAccountID
		FROM IMS.NewMemberShoppingCart
		WHERE TrackingNum = @TrackingNum AND SubAccountID IS NOT NULL AND
			Approved = 'N')) OR (ShoppingCartID IS NOT NULL AND 
		ShoppingCartID IN (SELECT ID
		FROM IMS.NewMemberShoppingCart
		WHERE TrackingNum = @TrackingNum AND Approved = 'N')))

	UPDATE IMS.NewMemberShoppingCart
	SET SubAccountID = NULL
	WHERE TrackingNum = @TrackingNum AND Approved = 'N'

	--Delete plastic cards for subaccounts that no longer exist
	DELETE FROM IMS.NewMemberPlasticCard
	WHERE TrackingNum = @TrackingNum AND Sequence IN (SELECT PlasticCardSequence
		FROM IMS.NewMemberSubAccountLink
		WHERE TrackingNum = @TrackingNum AND SubSequence NOT IN (SELECT Sequence
			FROM IMS.NewMemberSubAccount
			WHERE TrackingNum = @TrackingNum))

	DELETE FROM IMS.NewMemberSubAccountLink
	WHERE TrackingNum = @TrackingNum AND SubSequence NOT IN (SELECT Sequence
		FROM IMS.NewMemberSubAccount
		WHERE TrackingNum = @TrackingNum)

	--Delete flags for subaccounts that no longer exist
	DELETE FROM IMS.NewMemberFlag
	WHERE TrackingNum = @TrackingNum AND IsNull(SubAccountSequence, 0) > 0 AND
		SubAccountSequence NOT IN (SELECT Sequence
		FROM IMS.NewMemberSubAccount
		WHERE TrackingNum = @TrackingNum)

	--Delete joint owner links for subaccounts that no longer exist
	DELETE FROM IMS.NewMemberJointLink
	WHERE TrackingNum = @TrackingNum AND SubAccountSequence NOT IN (SELECT Sequence
		FROM IMS.NewMemberSubAccount
		WHERE TrackingNum = @TrackingNum)

	--Delete overdraft links for subaccount that no longer exist
	DELETE FROM IMS.NewMemberOverdraftLink
	WHERE TrackingNum = @TrackingNum AND ((TargetSubAccount > 0 AND
		TargetSubAccount NOT IN (SELECT Sequence
		FROM IMS.NewMemberSubAccount
		WHERE TrackingNum = @TrackingNum)) OR (SourceSubAccount > 0 AND
		SourceSubAccount NOT IN (SELECT Sequence
		FROM IMS.NewMemberSubAccount
		WHERE TrackingNum = @TrackingNum)))
END

--Synchronize IDs
UPDATE IMS.NewMemberSubAccount
SET ShoppingCartID = (SELECT ID FROM IMS.NewMemberShoppingCart
			WHERE TrackingNum = @TrackingNum AND SubAccountID = IMS.NewMemberSubAccount.ID)
WHERE TrackingNum = @TrackingNum AND (SELECT ID FROM IMS.NewMemberShoppingCart
			WHERE TrackingNum = @TrackingNum AND SubAccountID = IMS.NewMemberSubAccount.ID) IS NOT NULL

UPDATE IMS.NewMemberShoppingCart
SET SubAccountID = (SELECT ID FROM IMS.NewMemberSubAccount
			WHERE TrackingNum = @TrackingNum AND ShoppingCartID = IMS.NewMemberShoppingCart.ID)
WHERE TrackingNum = @TrackingNum AND (SELECT ID FROM IMS.NewMemberSubAccount
			WHERE TrackingNum = @TrackingNum AND ShoppingCartID = IMS.NewMemberShoppingCart.ID) IS NOT NULL
GO
/****** Object:  StoredProcedure [IMS].[spSCFed_UnreconciledFunding_Select]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		Jonathan Eagar
-- Create date: 5/08/2009
-- Description:	Returns all unreconciled transactions
-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_UnreconciledFunding_Select
-- =============================================
CREATE PROCEDURE [IMS].[spSCFed_UnreconciledFunding_Select] 
	-- Add the parameters for the stored procedure here
	@AccountNumber bigint
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
    -- Insert statements for procedure here
     -- Insert statements for procedure here
    IF ISNULL(@AccountNumber, 0) = 0  
    BEGIN
		SELECT	FS.AccountNumber, 
				FS.FundingTransactionID, 
				FS.TrackingNum, 
				FS.GatewayPaymentID, 
				FS.GatewayPaymentStatus, 
				FS.FundingAccountID, 
				FS.FundingType, 
				FS.TargetSubAccountSeq, 
				FS.TargetSubAccountSuffix, 
				FS.TransferAmount, 
				FS.DateTimeCreated, 
				FS.DateTimeLastTransaction,
				FS.MemberName,
				FS.SourceBankName,
				FS.SourceBankRouting,
				FS.SourceAccountLast4,
				FS.SourceCardType
		FROM
		(
			SELECT	VF.AccountNumber, 
					VF.FundingTransactionID , 
					VF.TrackingNum, 
					VF.GatewayPaymentID, 
					PS.PaymentStatus as GatewayPaymentStatus, 
					VF.FundingAccountID, 
					VF.FundingType, 
					VF.TargetSubAccountSeq, 
					VF.TargetSubAccountSuffix, 
					VF.TransferAmount, 
					VF.DateTimeCreated, 
					VF.DateTimeLastTransaction,
					VF.MemberName,
					VF.SourceBankName,
					VF.SourceBankRouting,
					VF.SourceAccountLast4,
					VF.SourceCardType
			FROM
			(	
				(
					SELECT	F.AccountNumber, 
							FT.ID as FundingTransactionID, 
							FT.TrackingNum, 
							FT.GatewayPaymentID, 
							FB.ID as FundingAccountID, 
							FT.FundingType, 
							FT.TargetSubAccountSeq,	
							FT.TargetSubAccountSuffix, 
							FT.Amount as TransferAmount, 
							FT.DateTimeCreated, 
							FT.DateTimeLastTransaction,
							NMR.FName + ' ' + NMR.LName as MemberName,
							FB.BankName as SourceBankName,
							FB.RoutingNumber as SourceBankRouting,
							FB.AccountNumberLast4 as SourceAccountLast4,
							'' as SourceCardType
					FROM IMS.NewMemberRequest as NMR 
					INNER JOIN IMS.NMRFundingTransaction AS FT ON NMR.TrackingNum = FT.TrackingNum
					INNER JOIN IMS.NMRFundingBank AS FB ON FT.FundingBankID = FB.ID 
					INNER JOIN IMS.NMRFunding as F ON F.ID = FB.FundingID 
					WHERE FT.DateTimeReconciled IS NULL
				)
				UNION ALL
				(
					SELECT F.AccountNumber, 
					FT.ID as FundingTransactionID, 
					FT.TrackingNum, 
					FT.GatewayPaymentID, 
					FC.ID as FundingAccountID, 
					FT.FundingType, 
					FT.TargetSubAccountSeq,	
					FT.TargetSubAccountSuffix, 
					FT.Amount as TransferAmount, 
					FT.DateTimeCreated, 
					FT.DateTimeLastTransaction,
					NMR.FName + ' ' + NMR.LName as MemberName,
					'' as SourceBankName,
					'' as SourceBankRouting,
					FC.AccountNumberLast4 as SourceAccountLast4,
					FC.CardType as SourceCardType
					FROM IMS.NewMemberRequest as NMR 
					INNER JOIN IMS.NMRFundingTransaction AS FT ON NMR.TrackingNum = FT.TrackingNum
					INNER JOIN IMS.NMRFundingCard AS FC ON FT.FundingCardID = FC.ID 
					INNER JOIN IMS.NMRFunding as F ON F.ID = FC.FundingID 
					WHERE FT.DateTimeReconciled IS NULL
				)
			)AS VF LEFT OUTER JOIN IMS.USAePayPaymentStatus AS PS ON VF.GatewayPaymentID = PS.PaymentId
		) AS FS	ORDER BY DateTimeCreated
    END		
    ELSE
	BEGIN    
		SELECT	FS.AccountNumber, 
				FS.FundingTransactionID, 
				FS.TrackingNum, 
				FS.GatewayPaymentID, 
				FS.GatewayPaymentStatus, 
				FS.FundingAccountID, 
				FS.FundingType, 
				FS.TargetSubAccountSeq, 
				FS.TargetSubAccountSuffix, 
				FS.TransferAmount, 
				FS.DateTimeCreated, 
				FS.DateTimeLastTransaction,
				FS.MemberName,
				FS.SourceBankName,
				FS.SourceBankRouting,
				FS.SourceAccountLast4,
				FS.SourceCardType
		FROM
		(
			SELECT	VF.AccountNumber, 
					VF.FundingTransactionID, 
					VF.TrackingNum, 
					VF.GatewayPaymentID, 
					PS.PaymentStatus as GatewayPaymentStatus, 
					VF.FundingAccountID, 
					VF.FundingType, 
					VF.TargetSubAccountSeq, 
					VF.TargetSubAccountSuffix, 
					VF.TransferAmount, 
					VF.DateTimeCreated, 
					VF.DateTimeLastTransaction,
					VF.MemberName,
					VF.SourceBankName,
					VF.SourceBankRouting,
					VF.SourceAccountLast4,
					VF.SourceCardType
			FROM
			(	
				(
					SELECT	F.AccountNumber, 
							FT.ID as FundingTransactionID, 
							FT.TrackingNum, 
							FT.GatewayPaymentID, 
							FB.ID as FundingAccountID, 
							FT.FundingType, 
							FT.TargetSubAccountSeq,	
							FT.TargetSubAccountSuffix, 
							FT.Amount as TransferAmount, 
							FT.DateTimeCreated, 
							FT.DateTimeLastTransaction,
							NMR.FName + ' ' + NMR.LName as MemberName,
							FB.BankName as SourceBankName,
							FB.RoutingNumber as SourceBankRouting,
							FB.AccountNumberLast4 as SourceAccountLast4,
							'' as SourceCardType
					FROM IMS.NewMemberRequest as NMR 
					INNER JOIN IMS.NMRFundingTransaction AS FT ON NMR.TrackingNum = FT.TrackingNum
					INNER JOIN IMS.NMRFundingBank AS FB ON FT.FundingBankID = FB.ID 
					INNER JOIN IMS.NMRFunding as F ON F.ID = FB.FundingID 
					WHERE F.AccountNumber = @AccountNumber AND FT.DateTimeReconciled IS NULL
				)
				UNION ALL
				(
					SELECT	F.AccountNumber, 
							FT.ID as FundingTransactionID, 
							FT.TrackingNum, FT.GatewayPaymentID, 
							FC.ID as FundingAccountID, 
							FT.FundingType, 
							FT.TargetSubAccountSeq,	
							FT.TargetSubAccountSuffix, 
							FT.Amount as TransferAmount, 
							FT.DateTimeCreated, 
							FT.DateTimeLastTransaction,
							NMR.FName + ' ' + NMR.LName as MemberName,
							'' as SourceBankName,
							'' as SourceBankRouting,
							FC.AccountNumberLast4 as SourceAccountLast4,
							FC.CardType as SourceCardType
					FROM IMS.NewMemberRequest as NMR 
					INNER JOIN IMS.NMRFundingTransaction AS FT ON NMR.TrackingNum = FT.TrackingNum
					INNER JOIN IMS.NMRFundingCard AS FC ON FT.FundingCardID = FC.ID 
					INNER JOIN IMS.NMRFunding as F ON F.ID = FC.FundingID 
					WHERE F.AccountNumber = @AccountNumber AND FT.DateTimeReconciled IS NULL
				)
			)AS VF LEFT OUTER JOIN IMS.USAePayPaymentStatus AS PS ON VF.GatewayPaymentID = PS.PaymentId
		) AS FS	ORDER BY DateTimeCreated
    END		
END

GO
/****** Object:  StoredProcedure [IMS].[spSCFed_UnreconciledVerification_Select]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_UnreconciledVerification_Select
CREATE PROCEDURE [IMS].[spSCFed_UnreconciledVerification_Select]
	-- Add the parameters for the stored procedure here
	@AccountNumber bigint
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
    IF ISNULL(@AccountNumber, 0) = 0  
    BEGIN
		SELECT      NMRFunding.AccountNumber, NMRFundingBank.ID as FundingBankID, IMS.fnSCFed_GetUSAePayPaymentStatus(NMRFundingBank.GatewayPaymentID1) as GatewayPaymentStatus1, IMS.fnSCFed_GetUSAePayPaymentStatus(NMRFundingBank.GatewayPaymentID2) as GatewayPaymentStatus2, NMRFundingBank.TrackingNum, NMRFundingBank.AccountNumberLast4, 
						  NMRFundingBank.BankName, NMRFundingBank.AccountType, NMRFundingBank.Amount1, NMRFundingBank.Amount2, 
						  NMRFundingBank.PSIErrorMessage, NMRFundingBank.DateTimeCreated, NMRFundingBank.DateTimeExported, NMRFundingBank.DateTimeLastTransaction
		FROM         NMRFundingBank INNER JOIN
						  NMRFunding ON NMRFundingBank.FundingID = NMRFunding.ID
		WHERE     (NMRFundingBank.DateTimeVerificationReconciled IS NULL AND NMRFundingBank.VerificationStatus = 'V')
    END
    ELSE
	BEGIN    
		SELECT      NMRFunding.AccountNumber, NMRFundingBank.ID as FundingBankID, IMS.fnSCFed_GetUSAePayPaymentStatus(NMRFundingBank.GatewayPaymentID1) as GatewayPaymentStatus1, IMS.fnSCFed_GetUSAePayPaymentStatus(NMRFundingBank.GatewayPaymentID2) as GatewayPaymentStatus2, NMRFundingBank.TrackingNum, NMRFundingBank.AccountNumberLast4, 
						  NMRFundingBank.BankName, NMRFundingBank.AccountType, NMRFundingBank.Amount1, NMRFundingBank.Amount2, 
						  NMRFundingBank.PSIErrorMessage, NMRFundingBank.DateTimeCreated, NMRFundingBank.DateTimeExported, NMRFundingBank.DateTimeLastTransaction
		FROM         NMRFundingBank INNER JOIN
						  NMRFunding ON NMRFundingBank.FundingID = NMRFunding.ID
		WHERE     (NMRFunding.AccountNumber = @AccountNumber AND DateTimeVerificationReconciled IS NULL AND NMRFundingBank.VerificationStatus = 'V')       
    END	
END


GO
/****** Object:  StoredProcedure [IMS].[spSSCU_D01Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spSSCU_D01Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @docsubname CHAR(100)
DECLARE @newdocsub CHAR(100)
DECLARE @count INT
DECLARE @docindex INT

DECLARE curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT '' AS docsubname
	FROM NewMemberRequest AS NMR
	WHERE NMR.TrackingNum = @TrackingNum AND NMR.Processed = 999 AND NMR.Created = 'Y'

OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @newdocsub = 'Membership Application ' + @docsubname
IF @docsubname Is Null
BEGIN
	SET @newdocsub = 'Membership Application'
END
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count
      	IF @count = 1
	BEGIN
		Set @docindex = @docindex + 1
     		 INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END
      	FETCH NEXT FROM curs INTO @docsubname
	PRINT @docsubname
	IF @@FETCH_STATUS = 0
	BEGIN
		SET @newdocsub = (RTRIM(@newdocsub) + ', ' + RTRIM(@docsubname))
		PRINT @newdocsub
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex
	END
   END
CLOSE curs
DEALLOCATE curs
SELECT *, (SELECT DocName FROM udt_Doc WHERE DocNum = 1) AS ScanName FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
DELETE FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSSCU_D01Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [IMS].[spSSCU_D01Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @joseq INT
DECLARE @jo1seq INT
DECLARE @jo2seq INT
DECLARE @jo3seq INT
DECLARE @count INT

DECLARE curs2 CURSOR FOR
	SELECT  CONVERT(int, JO.Sequence)
	FROM NewMemberJointOwner AS JO
	INNER JOIN NewMemberJointLink AS JL ON JO.Sequence = JL.JointSequence AND JL.TrackingNum = @TrackingNum
	INNER JOIN NewMemberSubAccount AS SA ON JL.SubAccountSequence = SA.Sequence AND SA.TrackingNum = @TrackingNum
	WHERE JO.TrackingNum = @TrackingNum AND (JO.JointOwnerType IN ('JO', 'BE'))
	GROUP BY CONVERT(int, JO.Sequence)

OPEN curs2
FETCH NEXT FROM curs2 INTO @joseq
SET @count = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
      	IF (@count = 0 AND @DocIndex = 1) OR (@count = 3 AND @DocIndex = 2) OR (@count = 6 AND @DocIndex = 3)
			BEGIN
				Set @jo1seq = @joseq
			END
		IF (@count = 1 AND @DocIndex = 1) OR (@count = 4 AND @DocIndex = 2) OR (@count = 7 AND @DocIndex = 3)
			BEGIN
				Set @jo2seq = @joseq		
			END
		IF (@count = 2 AND @DocIndex = 1) OR (@count = 5 AND @DocIndex = 2) OR (@count = 8 AND @DocIndex = 3)
			BEGIN
				Set @jo3seq = @joseq		
			END
      	FETCH NEXT FROM curs2 INTO @joseq
	SET @count = @count + 1
	PRINT @count
   END
CLOSE curs2
DEALLOCATE curs2
PRINT 'Start Select'
SELECT @DocIndex AS DocIndex
	, RTRIM(RTRIM(NMR.FName) + ' ' + RTRIM(NMR.MInitial)) + ' ' + RTRIM(NMR.LName) AS MemberName
	, NMR.Account AS MemberNumber

	, RTRIM(NMR.DriversLicenseNum) AS DLNumber
	, NMR.DriversLicenseState AS DLState
	, NMR.IDIssueDate AS DLIssueDate
	, NMR.IDExpirationDate AS DLExpirationDate
	, CASE NMR.UseTodayForDOB WHEN 'Y' THEN CONVERT(CHAR(10), NMR.CreatedOn, 101) ELSE CONVERT(CHAR(10), NMR.DOB, 101) END AS DOB
	, CASE NMR.AccountClass WHEN 'P' THEN Left(NMR.SSN, 3) + '-' + LEFT(RIGHT(NMR.SSN, 6), 2) + '-' + RIGHT(NMR.SSN, 4) ELSE LEFT(NMR.SSN, 2) + '-' + RIGHT(NMR.SSN, 7) END AS SSN
	, Home.Areacode + '-' + LEFT(Home.Phone, 3) + '-' + RIGHT(RTRIM(Home.Phone), 4) AS HPhone
	, Home.CellPhoneAC + '-' + LEFT(Home.CellPhone, 3) + '-' + RIGHT(RTRIM(Home.CellPhone), 4) AS CPhone
	, RTRIM(REPLACE(REPLACE(REPLACE(NMR.Qualification3, 'School', 'Attend School'), 'Family', 'Family Member'), 'Live', 'Live,Work,Worship,School')) AS Eligibility
	, CASE NMR.Qualification3
		WHEN 'Family' THEN 'ASSOC'
		ELSE RTRIM(NMR.Qualification1) END AS Department
	, CASE NMR.Qualification3
		WHEN 'Family' THEN RTRIM(NMR.Qualification2)
		ELSE '' END AS AssocNameAccount
	, 'Opened Online' AS OtherID
	, CASE NMR.AccountClass WHEN 'P' THEN Work.EmployerName ELSE '' END AS Employer

	, RTRIM(Home.Address1) AS Address1
	, RTRIM(Home.Address2) AS Address2
	, RTRIM(Home.City) AS City
	, Home.State AS State
	, CASE LEN(Home.Zip) WHEN 9 THEN LEFT(Home.Zip, 5) + '-' + RIGHT(Home.Zip, 4) ELSE Home.Zip END AS Zip
	, CASE WHEN ISNULL(Alt.Address1, '') <> '' THEN 'X' END AS Check_POBox_Yes
	, CASE WHEN ISNULL(Alt.Address1, '') = '' THEN 'X' END AS Check_POBox_No
	, RTRIM(NMR.EMail1) AS Email
	, '' AS Check_MinorDeclined
	, CASE WHEN ISNULL(NMR.PIN, '') <> '' THEN 'X' END AS Check_PIN_Yes
	, CASE WHEN ISNULL(NMR.PIN, '') = '' THEN 'X' END AS Check_PIN_No

	, CASE WHEN ISNULL(SDA.Sequence, '') != '' THEN 'X' END AS Check_Checking_Yes
	, CASE WHEN ISNULL(SDA.Sequence, '') = '' THEN 'X' END AS Check_Checking_No
	, CASE WHEN ISNULL(SDA.Sequence, '') != '' THEN SDA.DescAbrv END AS Checking_DescAbrv
	, CASE WHEN ISNULL(EZS.Sequence, '') != '' OR ISNULL(XMA.Sequence, '') != '' OR ISNULL(HYM.Sequence, '') != '' OR ISNULL(RMM.Sequence, '') != '' THEN 'X' END AS Check_Other_Yes
	, CASE WHEN ISNULL(EZS.Sequence, '') = '' AND ISNULL(XMA.Sequence, '') = '' AND ISNULL(HYM.Sequence, '') = '' AND ISNULL(RMM.Sequence, '') = '' THEN 'X' END AS Check_Other_No
	, CASE WHEN ISNULL(EZS.Sequence, '') != '' THEN EZS.DescAbrv ELSE '' END +
	  CASE WHEN ISNULL(XMA.Sequence, '') != '' THEN CASE WHEN ISNULL(EZS.Sequence, '') != '' THEN ', ' ELSE '' END + XMA.DescAbrv ELSE '' END +
	  CASE WHEN ISNULL(HYM.Sequence, '') != '' THEN CASE WHEN ISNULL(EZS.Sequence, '') != '' OR ISNULL(XMA.Sequence, '') != '' THEN ', ' ELSE '' END + HYM.DescAbrv ELSE '' END +
	  CASE WHEN ISNULL(RMM.Sequence, '') != '' THEN CASE WHEN ISNULL(EZS.Sequence, '') != '' OR ISNULL(XMA.Sequence, '') != '' OR ISNULL(XMA.Sequence, '') != '' THEN ', ' ELSE '' END + RMM.DescAbrv ELSE '' END
		AS Other_DescAbrv
	, '' AS Check_Savings_BenPlus
	, CASE WHEN ISNULL(Flag.Sequence, '') != '' THEN 'X' END AS Check_Checking_BenPlus
	, CASE WHEN ISNULL(ODP1.DescAbrv, '') != '' OR ISNULL(ODP2.DescAbrv, '') != '' OR ISNULL(ODP3.DescAbrv, '') != '' OR ISNULL(ODP4.DescAbrv, '') != '' OR ISNULL(ODP5.DescAbrv, '') != '' THEN 'X' END AS Check_ODP_Yes
	, CASE WHEN ISNULL(ODP1.DescAbrv, '') = '' AND ISNULL(ODP2.DescAbrv, '') = '' AND ISNULL(ODP3.DescAbrv, '') = '' AND ISNULL(ODP4.DescAbrv, '') = '' AND ISNULL(ODP5.DescAbrv, '') = '' THEN 'X' END AS Check_ODP_No
	, ISNULL(ODP1.Suffix, '') AS ODP1
	, ISNULL(ODP2.Suffix, '') AS ODP2
	, ISNULL(ODP3.Suffix, '') AS ODP3
	, ISNULL(ODP4.Suffix, '') AS ODP4
	, ISNULL(ODP5.Suffix, '') AS ODP5

	, CASE JO1.JointOwnerType
		WHEN 'JO' THEN 'Joint'
		WHEN 'BE' THEN 'POD'
		END AS JO1Type
	, RTRIM(JO1.FullName) AS JO1FullName
	, CASE WHEN JO1.SSN != ''
		THEN LEFT(JO1.SSN, 3) + '-' + LEFT(RIGHT(JO1.SSN, 6), 2) + '-' + RIGHT(JO1.SSN, 4)
		ELSE ''
		END AS JO1SSN
	, RTRIM(JO1.Relationship) AS JO1Relationship
	, JO1.DOB AS JO1DOB
	, CASE WHEN ISNULL(JO1.JointOwnerType, '') != '' THEN RTRIM(AllSuffixes.Suffixes) END AS JO1Suffixes
--	, CASE WHEN ISNULL(JO1.JointOwnerType, '') != '' THEN 'All opened on this card' END AS JO1Suffixes
--	, RTRIM(JO1.Suffixes) AS JO1Suffixes
--	, RTRIM(JO1.DriversLicenseNum) AS JO1DLNumber
	, CASE JO1.JointOwnerType
		WHEN 'JO' THEN RTRIM(JO1.DriversLicenseNum)
		END AS JO1DLNumber
--	, JO1.DriversLicenseState AS JO1DLState
	, CASE JO1.JointOwnerType
		WHEN 'JO' THEN JO1.DriversLicenseState
		END AS JO1DLState
--	, JO1.IDIssueDate AS JO1DLIssueDate
	, CASE JO1.JointOwnerType
		WHEN 'JO' THEN JO1.IDIssueDate
		END AS JO1DLIssueDate
--	, JO1.IDExpirationDate AS JO1DLExpirationDate
	, CASE JO1.JointOwnerType
		WHEN 'JO' THEN JO1.IDExpirationDate
		END AS JO1DLExpirationDate
	, CASE WHEN ISNULL(JO1.JointOwnerType, '') != '' THEN 'Opened Online' END AS JO1OtherID
	, '' AS JO1AccountNumber
	, CASE WHEN Home.Address1 = JO1.Address THEN 'X' END AS Check_JO1SameAs
	, CASE WHEN Home.Address1 <> JO1.Address THEN RTRIM(JO1.Fulladdress) END AS JO1FullAddress

	, CASE JO2.JointOwnerType
		WHEN 'JO' THEN 'Joint'
		WHEN 'BE' THEN 'POD'
		END AS JO2Type
	, RTRIM(JO2.FullName) AS JO2FullName
	, CASE WHEN JO2.SSN != ''
		THEN LEFT(JO2.SSN, 3) + '-' + LEFT(RIGHT(JO2.SSN, 6), 2) + '-' + RIGHT(JO2.SSN, 4)
		ELSE ''
		END AS JO2SSN
	, RTRIM(JO2.Relationship) AS JO2Relationship
	, JO2.DOB AS JO2DOB
	, CASE WHEN ISNULL(JO2.JointOwnerType, '') != '' THEN RTRIM(AllSuffixes.Suffixes) END AS JO2Suffixes
--	, CASE WHEN ISNULL(JO2.JointOwnerType, '') != '' THEN 'All opened on this card' END AS JO2Suffixes
--	, RTRIM(JO2.Suffixes) AS JO2Suffixes
--	, RTRIM(JO2.DriversLicenseNum) AS JO2DLNumber
	, CASE JO2.JointOwnerType
		WHEN 'JO' THEN RTRIM(JO2.DriversLicenseNum)
		END AS JO2DLNumber
--	, JO2.DriversLicenseState AS JO2DLState
	, CASE JO2.JointOwnerType
		WHEN 'JO' THEN JO2.DriversLicenseState
		END AS JO2DLState
--	, JO2.IDIssueDate AS JO2DLIssueDate
	, CASE JO2.JointOwnerType
		WHEN 'JO' THEN JO2.IDIssueDate
		END AS JO2DLIssueDate
--	, JO2.IDExpirationDate AS JO2DLExpirationDate
	, CASE JO2.JointOwnerType
		WHEN 'JO' THEN JO2.IDExpirationDate
		END AS JO2DLExpirationDate
	, CASE WHEN ISNULL(JO2.JointOwnerType, '') != '' THEN 'Opened Online' END AS JO2OtherID
	, '' AS JO2AccountNumber
	, CASE WHEN Home.Address1 = JO2.Address THEN 'X' END AS Check_JO2SameAs
	, CASE WHEN Home.Address1 <> JO2.Address THEN RTRIM(JO2.Fulladdress) END AS JO2FullAddress

	, CASE JO3.JointOwnerType
		WHEN 'JO' THEN 'Joint'
		WHEN 'BE' THEN 'POD'
		END AS JO3Type
	, RTRIM(JO3.FullName) AS JO3FullName
	, CASE WHEN JO3.SSN != ''
		THEN LEFT(JO3.SSN, 3) + '-' + LEFT(RIGHT(JO3.SSN, 6), 2) + '-' + RIGHT(JO3.SSN, 4)
		ELSE ''
		END AS JO3SSN
	, RTRIM(JO3.Relationship) AS JO3Relationship
	, JO3.DOB AS JO3DOB
	, CASE WHEN ISNULL(JO3.JointOwnerType, '') != '' THEN RTRIM(AllSuffixes.Suffixes) END AS JO3Suffixes
--	, CASE WHEN ISNULL(JO3.JointOwnerType, '') != '' THEN 'All opened on this card' END AS JO3Suffixes
--	, RTRIM(JO3.Suffixes) AS JO3Suffixes
--	, RTRIM(JO3.DriversLicenseNum) AS JO3DLNumber
	, CASE JO3.JointOwnerType
		WHEN 'JO' THEN RTRIM(JO3.DriversLicenseNum)
		END AS JO3DLNumber
--	, JO3.DriversLicenseState AS JO3DLState
	, CASE JO3.JointOwnerType
		WHEN 'JO' THEN JO3.DriversLicenseState
		END AS JO3DLState
--	, JO3.IDIssueDate AS JO3DLIssueDate
	, CASE JO3.JointOwnerType
		WHEN 'JO' THEN JO3.IDIssueDate
		END AS JO3DLIssueDate
--	, JO3.IDExpirationDate AS JO3DLExpirationDate
	, CASE JO3.JointOwnerType
		WHEN 'JO' THEN JO3.IDExpirationDate
		END AS JO3DLExpirationDate
	, CASE WHEN ISNULL(JO3.JointOwnerType, '') != '' THEN 'Opened Online' END AS JO3OtherID
	, '' AS JO3AccountNumber
	, CASE WHEN Home.Address1 = JO3.Address THEN 'X' END AS Check_JO3SameAs
	, CASE WHEN Home.Address1 <> JO3.Address THEN RTRIM(JO3.Fulladdress) END AS JO3FullAddress

	, 'Opened Online' AS Signature1
	, CONVERT(CHAR(10), NMR.CreatedOn, 101) AS SignatureDate1
	, CASE WHEN ISNULL(JO1.JointOwnerType, '') = 'JO' THEN 'Opened Online' END AS Signature2
	, CASE WHEN ISNULL(JO1.JointOwnerType, '') = 'JO' THEN CONVERT(CHAR(10), NMR.CreatedOn, 101) END AS SignatureDate2
	, CASE WHEN ISNULL(JO2.JointOwnerType, '') = 'JO' THEN 'Opened Online' END AS Signature3
	, CASE WHEN ISNULL(JO2.JointOwnerType, '') = 'JO' THEN CONVERT(CHAR(10), NMR.CreatedOn, 101) END AS SignatureDate3
	, CASE WHEN ISNULL(JO3.JointOwnerType, '') = 'JO' THEN 'Opened Online' END AS Signature4
	, CASE WHEN ISNULL(JO3.JointOwnerType, '') = 'JO' THEN CONVERT(CHAR(10), NMR.CreatedOn, 101) END AS SignatureDate4

	, 'YES' AS Efunds
	, CASE WHEN ISNULL(SDA.Sequence, '') != '' THEN CASE WHEN SDA.OptInOptOutOptionID = 5 THEN 'X' END END AS Check_OptIn_Yes
	, CASE WHEN ISNULL(SDA.Sequence, '') != '' THEN CASE WHEN SDA.OptInOptOutOptionID = 6 THEN 'X' END END AS Check_OptIn_No
	, CASE WHEN ISNULL(SDA.Sequence, '') = '' THEN 'X' END AS Check_OptIn_NoChecking
	, '' AS Check_CBAlerts_Yes
	, 'X' AS Check_CBAlerts_No
	, '' AS Check_CBAlerts_NoCB

	, CASE WHEN ISNULL(Alt.Address1, '') <> '' THEN
		RTRIM(Alt.Address1) + ' ' + RTRIM(Alt.City) + ' ' + Alt.State + ' ' + RTRIM(Alt.Zip) + CHAR(10) + CHAR(13)
	  END
	  + '' AS CUUseOnly

FROM NewMemberRequest AS NMR
	JOIN NewMemberRequestExtra AS Extra ON NMR.TrackingNum = Extra.TrackingNum
	LEFT OUTER JOIN NewMemberHome AS Home ON NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork AS Work ON NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN NewMemberAddress AS Alt ON NMR.TrackingNum = Alt.TrackingNum
	LEFT OUTER JOIN NewMemberFlag AS Flag ON NMR.TrackingNum = Flag.TrackingNum AND Flag.FlagNumber = 55 AND Flag.FlagSource LIKE 'PRDOP%'
	LEFT OUTER JOIN Departments AS Department ON Department.Department = NMR.Qualification1
	LEFT OUTER JOIN fnSSCU_GetSuffixList(@TrackingNum) AS AllSuffixes ON NMR.TrackingNum = AllSuffixes.TrackingNum
	LEFT OUTER JOIN fnSSCU_GetJOType(@TrackingNum, 'JO', 'BE', '', '') AS JO1 ON NMR.TrackingNum = JO1.TrackingNum AND JO1.JointSequence = 1
	LEFT OUTER JOIN fnSSCU_GetJOType(@TrackingNum, 'JO', 'BE', '', '') AS JO2 ON NMR.TrackingNum = JO2.TrackingNum AND JO2.JointSequence = 2
	LEFT OUTER JOIN fnSSCU_GetJOType(@TrackingNum, 'JO', 'BE', '', '') AS JO3 ON NMR.TrackingNum = JO3.TrackingNum AND JO3.JointSequence = 3
	LEFT OUTER JOIN fnSSCU_GetPCPlastic(@TrackingNum, 1, 'P') AS ATM ON NMR.TrackingNum = ATM.TrackingNum
	LEFT OUTER JOIN fnSSCU_GetPCPlastic(@TrackingNum, 1, 'D') AS DEBIT ON NMR.TrackingNum = DEBIT.TrackingNum
	LEFT OUTER JOIN fnSSCU_GetSAType2nd(@TrackingNum, 'PSA', 'S') AS PSA ON NMR.TrackingNum = PSA.TrackingNum	-- Primary Share
	LEFT OUTER JOIN fnSSCU_GetSAType2nd(@TrackingNum, 'SDA', 'S') AS SDA ON NMR.TrackingNum = SDA.TrackingNum	-- Share Draft
	LEFT OUTER JOIN fnSSCU_GetSAType(@TrackingNum, 'EZS', 'S') AS EZS ON NMR.TrackingNum = EZS.TrackingNum	-- Other Share
	LEFT OUTER JOIN fnSSCU_GetSAType(@TrackingNum, 'XMA', 'S') AS XMA ON NMR.TrackingNum = XMA.TrackingNum	-- Other Share
	LEFT OUTER JOIN fnSSCU_GetSAType(@TrackingNum, 'HYM', 'S') AS HYM ON NMR.TrackingNum = HYM.TrackingNum	-- Other Share
	LEFT OUTER JOIN fnSSCU_GetSAType(@TrackingNum, 'RMM', 'S') AS RMM ON NMR.TrackingNum = RMM.TrackingNum	-- Other Share
	LEFT OUTER JOIN fnSSCU_GetSAODPSeq(@TrackingNum, 1) AS ODP1 ON NMR.TrackingNum = ODP1.TrackingNum
	LEFT OUTER JOIN fnSSCU_GetSAODPSeq(@TrackingNum, 2) AS ODP2 ON NMR.TrackingNum = ODP2.TrackingNum
	LEFT OUTER JOIN fnSSCU_GetSAODPSeq(@TrackingNum, 3) AS ODP3 ON NMR.TrackingNum = ODP3.TrackingNum
	LEFT OUTER JOIN fnSSCU_GetSAODPSeq(@TrackingNum, 4) AS ODP4 ON NMR.TrackingNum = ODP4.TrackingNum
	LEFT OUTER JOIN fnSSCU_GetSAODPSeq(@TrackingNum, 5) AS ODP5 ON NMR.TrackingNum = ODP5.TrackingNum
WHERE NMR.TrackingNum = @TrackingNum
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSSCU_D02Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [IMS].[spSSCU_D02Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @docsubname CHAR(100)
DECLARE @newdocsub CHAR(100)
DECLARE @count INT
DECLARE @docindex INT

DECLARE curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT '' AS docsubname
	FROM NewMemberRequest AS NMR
	WHERE NMR.TrackingNum = @TrackingNum AND NMR.Processed = 999 AND NMR.Created = 'I'

OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @newdocsub = 'Membership Changes ' + @docsubname
IF @docsubname Is Null
BEGIN
	SET @newdocsub = 'Membership Changes'
END
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count
      	IF @count = 1
	BEGIN
		Set @docindex = @docindex + 1
     		 INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END
      	FETCH NEXT FROM curs INTO @docsubname
	PRINT @docsubname
	IF @@FETCH_STATUS = 0
	BEGIN
		SET @newdocsub = (RTRIM(@newdocsub) + ', ' + RTRIM(@docsubname))
		PRINT @newdocsub
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex
	END
   END
CLOSE curs
DEALLOCATE curs
SELECT *, (SELECT DocName FROM udt_Doc WHERE DocNum = 1) AS ScanName FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
DELETE FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSSCU_D02Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [IMS].[spSSCU_D02Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @joseq INT
DECLARE @jo1seq INT
DECLARE @jo2seq INT
DECLARE @jo3seq INT
DECLARE @count INT

DECLARE curs2 CURSOR FOR
	SELECT  CONVERT(int, JO.Sequence)
	FROM NewMemberJointOwner AS JO
	INNER JOIN NewMemberJointLink AS JL ON JO.Sequence = JL.JointSequence AND JL.TrackingNum = @TrackingNum
	INNER JOIN NewMemberSubAccount AS SA ON JL.SubAccountSequence = SA.Sequence AND SA.TrackingNum = @TrackingNum
	WHERE JO.TrackingNum = @TrackingNum AND (JO.JointOwnerType IN ('JO', 'BE'))
	GROUP BY CONVERT(int, JO.Sequence)

OPEN curs2
FETCH NEXT FROM curs2 INTO @joseq
SET @count = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
      	IF (@count = 0 AND @DocIndex = 1) OR (@count = 3 AND @DocIndex = 2) OR (@count = 6 AND @DocIndex = 3)
			BEGIN
				Set @jo1seq = @joseq
			END
		IF (@count = 1 AND @DocIndex = 1) OR (@count = 4 AND @DocIndex = 2) OR (@count = 7 AND @DocIndex = 3)
			BEGIN
				Set @jo2seq = @joseq		
			END
		IF (@count = 2 AND @DocIndex = 1) OR (@count = 5 AND @DocIndex = 2) OR (@count = 8 AND @DocIndex = 3)
			BEGIN
				Set @jo3seq = @joseq		
			END
      	FETCH NEXT FROM curs2 INTO @joseq
	SET @count = @count + 1
	PRINT @count
   END
CLOSE curs2
DEALLOCATE curs2
PRINT 'Start Select'
SELECT @DocIndex AS DocIndex
	, RTRIM(RTRIM(NMR.FName) + ' ' + RTRIM(NMR.MInitial)) + ' ' + RTRIM(NMR.LName) AS MemberName
	, NMR.Account AS MemberNumber

	, RTRIM(Home.Address1) AS Address1
	, RTRIM(Home.Address2) AS Address2
	, RTRIM(Home.City) AS City
	, Home.State AS State
	, CASE LEN(Home.Zip) WHEN 9 THEN LEFT(Home.Zip, 5) + '-' + RIGHT(Home.Zip, 4) ELSE Home.Zip END AS Zip
	, '' AS Check_NewAddress
	, CASE NMR.UseTodayForDOB WHEN 'Y' THEN CONVERT(CHAR(10), NMR.CreatedOn, 101) ELSE CONVERT(CHAR(10), NMR.DOB, 101) END AS DOB
	, CASE NMR.AccountClass WHEN 'P' THEN LEFT(NMR.SSN, 3) + '-' + LEFT(RIGHT(NMR.SSN, 6), 2) + '-' + RIGHT(NMR.SSN, 4) ELSE LEFT(NMR.SSN, 2) + '-' + RIGHT(NMR.SSN, 7) END AS SSN
	, Home.Areacode + '-' + LEFT(Home.Phone, 3) + '-' + RIGHT(RTRIM(Home.Phone), 4) AS HPhone
	, Home.CellPhoneAC + '-' + LEFT(Home.CellPhone, 3) + '-' + RIGHT(RTRIM(Home.CellPhone), 4) AS CPhone
	, '' AS Check_ODPChange_Yes
	, '' AS Check_ODPChange_No
	, '' AS Check_NameChange
	, '' AS Check_Member
	, '' AS Check_JointOwner
	, '' AS [PreviousName]
	, '' AS [NewName]
	, '' AS Check_ATMDebit
	, '' AS Check_VISA
	, '' AS Check_AddJO
	, '' AS Check_ChangePOD
	, '' AS Check_UpdateEmail
	, '' AS Email
	, '' AS Check_SeeCUUseOnly
	, 'X' AS Check_AddSA
	, SAP1.DescAbrv AS NewDescAbrv1
	, SAP1.Suffix AS NewSuffix1
	, SAP2.DescAbrv AS NewDescAbrv2
	, SAP2.Suffix AS NewSuffix2
	, CASE WHEN ISNULL(ODP1.DescAbrv, '') != '' OR ISNULL(ODP2.DescAbrv, '') != '' OR ISNULL(ODP3.DescAbrv, '') != '' OR ISNULL(ODP4.DescAbrv, '') != '' OR ISNULL(ODP5.DescAbrv, '') != '' THEN 'X' END AS Check_Overdraft
	, ISNULL(ODP1.TargetSuffix, '') AS ODPTargetSuffix
	, ISNULL(ODP1.Suffix, '') AS ODP1
	, ISNULL(ODP2.Suffix, '') AS ODP2
	, ISNULL(ODP3.Suffix, '') AS ODP3
	, ISNULL(ODP4.Suffix, '') AS ODP4
	, ISNULL(ODP5.Suffix, '') AS ODP5
	, '' AS Check_ConvertSuffix
	, '' AS ConvertSuffix
	, '' AS Check_SSNCorrection
	, '' AS Check_SSNCorrection_Member
	, '' AS Check_SSNCorrection_JO

	, CASE JO1.JointOwnerType
		WHEN 'JO' THEN 'Joint'
		WHEN 'BE' THEN 'POD'
		END AS JO1Type
	, RTRIM(JO1.FullName) AS JO1FullName
	, CASE WHEN JO1.SSN != ''
		THEN LEFT(JO1.SSN, 3) + '-' + LEFT(RIGHT(JO1.SSN, 6), 2) + '-' + RIGHT(JO1.SSN, 4)
		ELSE ''
		END AS JO1SSN
	, RTRIM(JO1.Relationship) AS JO1Relationship
	, JO1.DOB AS JO1DOB
	, CASE WHEN ISNULL(JO1.JointOwnerType, '') != '' THEN RTRIM(AllSuffixes.Suffixes) END AS JO1Suffixes
--	, CASE WHEN ISNULL(JO1.JointOwnerType, '') != '' THEN 'All opened on this card' END AS JO1Suffixes
--	, RTRIM(JO1.Suffixes) AS JO1Suffixes
--	, RTRIM(JO1.DriversLicenseNum) AS JO1DLNumber
	, CASE JO1.JointOwnerType
		WHEN 'JO' THEN RTRIM(JO1.DriversLicenseNum)
		END AS JO1DLNumber
--	, JO1.DriversLicenseState AS JO1DLState
	, CASE JO1.JointOwnerType
		WHEN 'JO' THEN JO1.DriversLicenseState
		END AS JO1DLState
--	, JO1.IDIssueDate AS JO1DLIssueDate
	, CASE JO1.JointOwnerType
		WHEN 'JO' THEN JO1.IDIssueDate
		END AS JO1DLIssueDate
--	, JO1.IDExpirationDate AS JO1DLExpirationDate
	, CASE JO1.JointOwnerType
		WHEN 'JO' THEN JO1.IDExpirationDate
		END AS JO1DLExpirationDate
	, CASE WHEN ISNULL(JO1.JointOwnerType, '') != '' THEN 'Opened Online' END AS JO1OtherID
	, '' AS JO1AccountNumber
	, CASE WHEN Home.Address1 = JO1.Address THEN 'X' END AS Check_JO1SameAs
	, CASE WHEN Home.Address1 <> JO1.Address THEN RTRIM(JO1.Fulladdress) END AS JO1FullAddress

	, CASE JO2.JointOwnerType
		WHEN 'JO' THEN 'Joint'
		WHEN 'BE' THEN 'POD'
		END AS JO2Type
	, RTRIM(JO2.FullName) AS JO2FullName
	, CASE WHEN JO2.SSN != ''
		THEN LEFT(JO2.SSN, 3) + '-' + LEFT(RIGHT(JO2.SSN, 6), 2) + '-' + RIGHT(JO2.SSN, 4)
		ELSE ''
		END AS JO2SSN
	, RTRIM(JO2.Relationship) AS JO2Relationship
	, JO2.DOB AS JO2DOB
	, CASE WHEN ISNULL(JO2.JointOwnerType, '') != '' THEN RTRIM(AllSuffixes.Suffixes) END AS JO2Suffixes
--	, CASE WHEN ISNULL(JO2.JointOwnerType, '') != '' THEN 'All opened on this card' END AS JO2Suffixes
--	, RTRIM(JO2.Suffixes) AS JO2Suffixes
--	, RTRIM(JO2.DriversLicenseNum) AS JO2DLNumber
	, CASE JO2.JointOwnerType
		WHEN 'JO' THEN RTRIM(JO2.DriversLicenseNum)
		END AS JO2DLNumber
--	, JO2.DriversLicenseState AS JO2DLState
	, CASE JO2.JointOwnerType
		WHEN 'JO' THEN JO2.DriversLicenseState
		END AS JO2DLState
--	, JO2.IDIssueDate AS JO2DLIssueDate
	, CASE JO2.JointOwnerType
		WHEN 'JO' THEN JO2.IDIssueDate
		END AS JO2DLIssueDate
--	, JO2.IDExpirationDate AS JO2DLExpirationDate
	, CASE JO2.JointOwnerType
		WHEN 'JO' THEN JO2.IDExpirationDate
		END AS JO2DLExpirationDate
	, CASE WHEN ISNULL(JO2.JointOwnerType, '') != '' THEN 'Opened Online' END AS JO2OtherID
	, '' AS JO2AccountNumber
	, CASE WHEN Home.Address1 = JO2.Address THEN 'X' END AS Check_JO2SameAs
	, CASE WHEN Home.Address1 <> JO2.Address THEN RTRIM(JO2.Fulladdress) END AS JO2FullAddress

	, CASE JO3.JointOwnerType
		WHEN 'JO' THEN 'Joint'
		WHEN 'BE' THEN 'POD'
		END AS JO3Type
	, RTRIM(JO3.FullName) AS JO3FullName
	, CASE WHEN JO3.SSN != ''
		THEN LEFT(JO3.SSN, 3) + '-' + LEFT(RIGHT(JO3.SSN, 6), 2) + '-' + RIGHT(JO3.SSN, 4)
		ELSE ''
		END AS JO3SSN
	, RTRIM(JO3.Relationship) AS JO3Relationship
	, JO3.DOB AS JO3DOB
	, CASE WHEN ISNULL(JO3.JointOwnerType, '') != '' THEN RTRIM(AllSuffixes.Suffixes) END AS JO3Suffixes
--	, CASE WHEN ISNULL(JO3.JointOwnerType, '') != '' THEN 'All opened on this card' END AS JO3Suffixes
--	, RTRIM(JO3.Suffixes) AS JO3Suffixes
--	, RTRIM(JO3.DriversLicenseNum) AS JO3DLNumber
	, CASE JO3.JointOwnerType
		WHEN 'JO' THEN RTRIM(JO3.DriversLicenseNum)
		END AS JO3DLNumber
--	, JO3.DriversLicenseState AS JO3DLState
	, CASE JO3.JointOwnerType
		WHEN 'JO' THEN JO3.DriversLicenseState
		END AS JO3DLState
--	, JO3.IDIssueDate AS JO3DLIssueDate
	, CASE JO3.JointOwnerType
		WHEN 'JO' THEN JO3.IDIssueDate
		END AS JO3DLIssueDate
--	, JO3.IDExpirationDate AS JO3DLExpirationDate
	, CASE JO3.JointOwnerType
		WHEN 'JO' THEN JO3.IDExpirationDate
		END AS JO3DLExpirationDate
	, CASE WHEN ISNULL(JO3.JointOwnerType, '') != '' THEN 'Opened Online' END AS JO3OtherID
	, '' AS JO3AccountNumber
	, CASE WHEN Home.Address1 = JO3.Address THEN 'X' END AS Check_JO3SameAs
	, CASE WHEN Home.Address1 <> JO3.Address THEN RTRIM(JO3.Fulladdress) END AS JO3FullAddress

	, 'Opened Online' AS Signature1
	, CONVERT(CHAR(10), NMR.CreatedOn, 101) AS SignatureDate1
	, CASE WHEN ISNULL(JO1.JointOwnerType, '') = 'JO' THEN 'Opened Online' END AS Signature2
	, CASE WHEN ISNULL(JO1.JointOwnerType, '') = 'JO' THEN CONVERT(CHAR(10), NMR.CreatedOn, 101) END AS SignatureDate2
	, CASE WHEN ISNULL(JO2.JointOwnerType, '') = 'JO' THEN 'Opened Online' END AS Signature3
	, CASE WHEN ISNULL(JO2.JointOwnerType, '') = 'JO' THEN CONVERT(CHAR(10), NMR.CreatedOn, 101) END AS SignatureDate3
	, CASE WHEN ISNULL(JO3.JointOwnerType, '') = 'JO' THEN 'Opened Online' END AS Signature4
	, CASE WHEN ISNULL(JO3.JointOwnerType, '') = 'JO' THEN CONVERT(CHAR(10), NMR.CreatedOn, 101) END AS SignatureDate4

	, 'YES' AS Efunds
	, CASE WHEN ISNULL(SDA.Sequence, '') != '' THEN CASE WHEN SDA.OptInOptOutOptionID = 5 THEN 'X' END END AS Check_OptIn_Yes
	, CASE WHEN ISNULL(SDA.Sequence, '') != '' THEN CASE WHEN SDA.OptInOptOutOptionID = 6 THEN 'X' END END AS Check_OptIn_No
	, CASE WHEN ISNULL(SDA.Sequence, '') = '' THEN 'X' END AS Check_OptIn_NoChecking
	, '' AS Check_CBAlerts_Yes
	, 'X' AS Check_CBAlerts_No
	, '' AS Check_CBAlerts_NoCB
	, '' AS PrintedDate
	, '' AS Check_HardCopy

	, '' AS CUUseOnly

FROM NewMemberRequest As NMR
	JOIN NewMemberRequestExtra As Extra on NMR.TrackingNum = Extra.TrackingNum
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN NewMemberAddress As Alt On NMR.TrackingNum = Alt.TrackingNum
	LEFT OUTER JOIN Departments AS Department ON Department.Department = NMR.Qualification1
	LEFT OUTER JOIN fnSSCU_GetSuffixList(@TrackingNum) AS AllSuffixes ON NMR.TrackingNum = AllSuffixes.TrackingNum
	LEFT OUTER JOIN fnSSCU_GetJOType(@TrackingNum, 'JO', 'BE', '', '') AS JO1 ON NMR.TrackingNum = JO1.TrackingNum AND JO1.JointSequence = 1
	LEFT OUTER JOIN fnSSCU_GetJOType(@TrackingNum, 'JO', 'BE', '', '') AS JO2 ON NMR.TrackingNum = JO2.TrackingNum AND JO2.JointSequence = 2
	LEFT OUTER JOIN fnSSCU_GetJOType(@TrackingNum, 'JO', 'BE', '', '') AS JO3 ON NMR.TrackingNum = JO3.TrackingNum AND JO3.JointSequence = 3
	LEFT OUTER JOIN fnSSCU_GetPCPlastic(@TrackingNum, 1, 'P') AS ATM ON NMR.TrackingNum = ATM.TrackingNum
	LEFT OUTER JOIN fnSSCU_GetPCPlastic(@TrackingNum, 1, 'D') AS DEBIT ON NMR.TrackingNum = DEBIT.TrackingNum
	LEFT OUTER JOIN fnSSCU_GetSAType2nd(@TrackingNum, 'PSA', 'S') AS PSA ON NMR.TrackingNum = PSA.TrackingNum	-- Primary Share
	LEFT OUTER JOIN fnSSCU_GetSAType2nd(@TrackingNum, 'SDA', 'S') AS SDA ON NMR.TrackingNum = SDA.TrackingNum	-- Share Draft
	LEFT OUTER JOIN fnSSCU_GetSAType(@TrackingNum, 'EZS', 'S') AS EZS ON NMR.TrackingNum = EZS.TrackingNum	-- Other Share
	LEFT OUTER JOIN fnSSCU_GetSAType(@TrackingNum, 'XMA', 'S') AS XMA ON NMR.TrackingNum = XMA.TrackingNum	-- Other Share
	LEFT OUTER JOIN fnSSCU_GetSAType(@TrackingNum, 'HYM', 'S') AS HYM ON NMR.TrackingNum = HYM.TrackingNum	-- Other Share
	LEFT OUTER JOIN fnSSCU_GetSAType(@TrackingNum, 'RMM', 'S') AS RMM ON NMR.TrackingNum = RMM.TrackingNum	-- Other Share
	LEFT OUTER JOIN fnSSCU_GetSAODPSeq(@TrackingNum, 1) AS ODP1 ON NMR.TrackingNum = ODP1.TrackingNum
	LEFT OUTER JOIN fnSSCU_GetSAODPSeq(@TrackingNum, 2) AS ODP2 ON NMR.TrackingNum = ODP2.TrackingNum
	LEFT OUTER JOIN fnSSCU_GetSAODPSeq(@TrackingNum, 3) AS ODP3 ON NMR.TrackingNum = ODP3.TrackingNum
	LEFT OUTER JOIN fnSSCU_GetSAODPSeq(@TrackingNum, 4) AS ODP4 ON NMR.TrackingNum = ODP4.TrackingNum
	LEFT OUTER JOIN fnSSCU_GetSAODPSeq(@TrackingNum, 5) AS ODP5 ON NMR.TrackingNum = ODP5.TrackingNum
	LEFT OUTER JOIN fnSSCU_GetSAProduct(@TrackingNum) AS SAP1 ON NMR.TrackingNum = SAP1.TrackingNum AND SAP1.SAID = 1
	LEFT OUTER JOIN fnSSCU_GetSAProduct(@TrackingNum) AS SAP2 ON NMR.TrackingNum = SAP2.TrackingNum AND SAP2.SAID = 2
WHERE NMR.TrackingNum = @TrackingNum
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSSCU_D10Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spSSCU_D10Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @docsubname CHAR(100)
DECLARE @newdocsub CHAR(100)
DECLARE @count INT
DECLARE @docindex INT

DECLARE curs CURSOR LOCAL FAST_FORWARD FOR
	SELECT '' AS docsubname
	FROM NewMemberRequest AS NMR
	LEFT JOIN NewMemberSubAccount SA ON SA.TrackingNum = NMR.TrackingNum
	WHERE NMR.TrackingNum = @TrackingNum AND NMR.Processed = 999 AND NMR.Created = 'Y' AND SA.ProductType = 'CERT' AND 1 = 0

OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @newdocsub = 'CD Disclosure ' + @docsubname
IF @docsubname Is Null
BEGIN
	SET @newdocsub = 'CD Disclosure'
END
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
	SET @count = @count + 1
	PRINT @count
      	IF @count = 1
	BEGIN
		Set @docindex = @docindex + 1
     		 INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
	END
      	FETCH NEXT FROM curs INTO @docsubname
	PRINT @docsubname
	IF @@FETCH_STATUS = 0
	BEGIN
		SET @newdocsub = (RTRIM(@newdocsub) + ', ' + RTRIM(@docsubname))
		PRINT @newdocsub
		UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex
	END
   END
CLOSE curs
DEALLOCATE curs
SELECT *, (SELECT DocName FROM udt_Doc WHERE DocNum = 1) AS ScanName FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
DELETE FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSSCU_D10Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spSSCU_D10Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @joseq INT
DECLARE @jo1seq INT
DECLARE @jo2seq INT
DECLARE @jo3seq INT
DECLARE @count INT

DECLARE curs2 CURSOR FOR
	SELECT  CONVERT(int, JO.Sequence)
	FROM NewMemberJointOwner AS JO
	INNER JOIN NewMemberJointLink AS JL ON JO.Sequence = JL.JointSequence AND JL.TrackingNum = @TrackingNum
	INNER JOIN NewMemberSubAccount AS SA ON JL.SubAccountSequence = SA.Sequence AND SA.TrackingNum = @TrackingNum
	WHERE JO.TrackingNum = @TrackingNum AND (JO.JointOwnerType IN ('JO', 'PD'))
	GROUP BY CONVERT(int, JO.Sequence)

OPEN curs2
FETCH NEXT FROM curs2 INTO @joseq
SET @count = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
      	IF (@count = 0 AND @DocIndex = 1) OR (@count = 3 AND @DocIndex = 2) OR (@count = 6 AND @DocIndex = 3)
			BEGIN
				Set @jo1seq = @joseq
			END
		IF (@count = 1 AND @DocIndex = 1) OR (@count = 4 AND @DocIndex = 2) OR (@count = 7 AND @DocIndex = 3)
			BEGIN
				Set @jo2seq = @joseq		
			END
		IF (@count = 2 AND @DocIndex = 1) OR (@count = 5 AND @DocIndex = 2) OR (@count = 8 AND @DocIndex = 3)
			BEGIN
				Set @jo3seq = @joseq		
			END
      	FETCH NEXT FROM curs2 INTO @joseq
	SET @count = @count + 1
	PRINT @count
   END
CLOSE curs2
DEALLOCATE curs2
PRINT 'Start Select'
SELECT @DocIndex AS DocIndex
	, RTRIM(RTRIM(NMR.FName) + ' ' + RTRIM(NMR.MInitial)) + ' ' + RTRIM(NMR.LName) AS MemberName
	, NMR.Account AS MemberNumber

	, RTRIM(Home.Address1) AS Address1
	, RTRIM(Home.Address2) AS Address2
	, RTRIM(Home.City) AS City
	, Home.State AS State
	, CASE LEN(Home.Zip) WHEN 9 THEN LEFT(Home.Zip, 5) + '-' + RIGHT(Home.Zip, 4) ELSE Home.Zip END AS Zip
	, '' AS Check_NewAddress
	, CASE NMR.UseTodayForDOB WHEN 'Y' THEN CONVERT(CHAR(10), NMR.CreatedOn, 101) ELSE CONVERT(CHAR(10), NMR.DOB, 101) END AS DOB
	, CASE NMR.AccountClass WHEN 'P' THEN Left(NMR.SSN, 3) + '-' + LEFT(RIGHT(NMR.SSN, 6), 2) + '-' + RIGHT(NMR.SSN, 4) ELSE LEFT(NMR.SSN, 2) + '-' + RIGHT(NMR.SSN, 7) END AS SSN
	, Home.Areacode + '-' + LEFT(Home.Phone, 3) + '-' + RIGHT(RTRIM(Home.Phone), 4) AS HPhone
	, Home.CellPhoneAC + '-' + LEFT(Home.CellPhone, 3) + '-' + RIGHT(RTRIM(Home.CellPhone), 4) AS CPhone
	, '' AS Check_ODPChange_Yes
	, '' AS Check_ODPChange_No
	, '' AS Check_NameChange
	, '' AS Check_Member
	, '' AS Check_JointOwner
	, '' AS [PreviousName]
	, '' AS [NewName]
	, '' AS Check_ATMDebit
	, '' AS Check_VISA
	, '' AS Check_AddJO
	, '' AS Check_ChangePOD
	, '' AS Check_UpdateEmail
	, '' AS Email
	, '' AS Check_SeeCUUseOnly
	, '' AS Check_AddSA
	, '' AS NewSuffix1
	, '' AS NewSuffix2
	, '' AS Check_Overdraft
	, '' AS ODP1
	, '' AS ODP2
	, '' AS ODP3
	, '' AS ODP4
	, '' AS ODP5
	, '' AS Check_ConvertSuffix
	, '' AS ConvertSuffix
	, '' AS Check_SSNCorrection
	, '' AS Check_SSNCorrection_Member
	, '' AS Check_SSNCorrection_JO

	, '' AS JO1Type	-- JO1.JointOwnerType
	, RTRIM(JO1.FullName) AS JO1FullName
	, JO1.SSN AS JO1SSN
	, RTRIM(JO1.Relationship) AS JO1Relationship
	, JO1.DOB AS JO1DOB
	, RTRIM(JO1.Suffixes) AS JO1Suffixes
	, RTRIM(JO1.DriversLicenseNum) AS JO1DLNumber
	, JO1.DriversLicenseState AS JO1DLState
	, JO1.IDIssueDate AS JO1DLIssueDate
	, JO1.IDExpirationDate AS JO1DLExpirationDate
	, '' AS JO1OtherID
	, '' AS JO1AccountNumber
	, CASE WHEN Home.Address1 = JO1.Address Then 'X' END AS Check_JO1SameAs
	, CASE WHEN Home.Address1 <> JO1.Address Then JO1.Fulladdress END AS JO1FullAddress

	, '' AS JO2Type	-- JO2.JointOwnerType
	, RTRIM(JO2.FullName) AS JO2FullName
	, JO2.SSN AS JO2SSN
	, RTRIM(JO2.Relationship) AS JO2Relationship
	, JO2.DOB AS JO2DOB
	, RTRIM(JO2.Suffixes) AS JO2Suffixes
	, RTRIM(JO2.DriversLicenseNum) AS JO2DLNumber
	, JO2.DriversLicenseState AS JO2DLState
	, JO2.IDIssueDate AS JO2DLIssueDate
	, JO2.IDExpirationDate AS JO2DLExpirationDate
	, '' AS JO2OtherID
	, '' AS JO2AccountNumber
	, CASE WHEN Home.Address1 = JO2.Address Then 'X' END AS Check_JO2SameAs
	, CASE WHEN Home.Address1 <> JO2.Address Then JO2.Fulladdress END AS JO2FullAddress

	, '' AS JO3Type	-- JO1.JointOwnerType
	, RTRIM(JO3.FullName) AS JO3FullName
	, JO3.SSN AS JO3SSN
	, RTRIM(JO3.Relationship) AS JO3Relationship
	, JO3.DOB AS JO3DOB
	, RTRIM(JO3.Suffixes) AS JO3Suffixes
	, RTRIM(JO3.DriversLicenseNum) AS JO3DLNumber
	, JO3.DriversLicenseState AS JO3DLState
	, JO3.IDIssueDate AS JO3DLIssueDate
	, JO3.IDExpirationDate AS JO3DLExpirationDate
	, '' AS JO3OtherID
	, '' AS JO3AccountNumber
	, CASE WHEN Home.Address1 = JO3.Address Then 'X' END AS Check_JO3SameAs
	, CASE WHEN Home.Address1 <> JO3.Address Then JO3.Fulladdress END AS JO3FullAddress

	, '' AS Check_OptIn_Yes
	, '' AS Check_OptIn_No
	, '' AS Check_OptIn_NoChecking
	, '' AS Check_CBAlerts_Yes
	, '' AS Check_CBAlerts_No
	, '' AS Check_CBAlerts_NoCB
	, '' AS PrintedDate
	, '' AS Check_HardCopy

	, '' AS CUUseOnly

FROM NewMemberRequest As NMR
	JOIN NewMemberRequestExtra As Extra on NMR.TrackingNum = Extra.TrackingNum
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN NewMemberAddress As Alt On NMR.TrackingNum = Alt.TrackingNum
	LEFT OUTER JOIN fnSSCU_GetJOType(@TrackingNum, 'JO', 'PD', '', '') AS JO1 ON NMR.TrackingNum = JO1.TrackingNum AND JO1.JointSequence = 1
	LEFT OUTER JOIN fnSSCU_GetJOType(@TrackingNum, 'JO', 'PD', '', '') AS JO2 ON NMR.TrackingNum = JO2.TrackingNum AND JO2.JointSequence = 2
	LEFT OUTER JOIN fnSSCU_GetJOType(@TrackingNum, 'JO', 'PD', '', '') AS JO3 ON NMR.TrackingNum = JO3.TrackingNum AND JO3.JointSequence = 3
	LEFT OUTER JOIN fnSSCU_GetPCPlastic(@TrackingNum, 1, 'P') AS ATM ON NMR.TrackingNum = ATM.TrackingNum
	LEFT OUTER JOIN fnSSCU_GetPCPlastic(@TrackingNum, 1, 'D') AS DEBIT ON NMR.TrackingNum = DEBIT.TrackingNum
	LEFT OUTER JOIN fnSSCU_GetSAType(@TrackingNum, 'PSA', 'S') AS RSA ON NMR.TrackingNum = RSA.TrackingNum	-- Regular Share
	LEFT OUTER JOIN fnSSCU_GetSAType(@TrackingNum, 'SDA', 'S') AS SDA ON NMR.TrackingNum = SDA.TrackingNum	-- Share Draft
WHERE NMR.TrackingNum = @TrackingNum
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSSCU_D11Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spSSCU_D11Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS
DECLARE @docsubname CHAR(100)
DECLARE @newdocsub CHAR(100)
DECLARE @count INT
DECLARE @docindex INT

DECLARE curs CURSOR LOCAL FAST_FORWARD FOR
       SELECT TOP 1 '' AS docsubname
       FROM NewMemberQuestion AS NMRQ
       LEFT JOIN NewMemberRequest NMR ON NMR.TrackingNum = NMRQ.TrackingNum
       WHERE NMRQ.TrackingNum = @TrackingNum --AND NMR.Processed = 999 AND NMR.Created = 'Y' AND 1 = 0

OPEN curs
FETCH NEXT FROM curs INTO @docsubname
SET @newdocsub = 'Due Diligence Questionaire ' + @docsubname
IF @docsubname Is Null
BEGIN
       SET @newdocsub = 'Due Diligence Questionaire'
END
SET @count = 0
SET @docindex = 0
PRINT @@FETCH_STATUS
   WHILE @@FETCH_STATUS = 0
   BEGIN
       SET @count = @count + 1
       PRINT @count
      IF @count = 1
       BEGIN
              Set @docindex = @docindex + 1
               INSERT INTO NewMemberDoc  (docindex, docsubname, TrackingNum) VALUES(@docindex, @newdocsub, @TrackingNum)
       END
      FETCH NEXT FROM curs INTO @docsubname
       PRINT @docsubname
       IF @@FETCH_STATUS = 0
       BEGIN
              SET @newdocsub = (RTRIM(@newdocsub) + ', ' + RTRIM(@docsubname))
              PRINT @newdocsub
              UPDATE NewMemberDoc SET docsubname = @newdocsub WHERE docindex = @docindex
       END
   END
CLOSE curs
DEALLOCATE curs
SELECT *, (SELECT DocName FROM udt_Doc WHERE DocNum = 1) AS ScanName FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
DELETE FROM NewMemberDoc WHERE TrackingNum = @TrackingNum
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSSCU_D11Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [IMS].[spSSCU_D11Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

SELECT @DocIndex AS DocIndex
       , RTRIM(RTRIM(NMR.FName) + ' ' + RTRIM(NMR.MInitial)) + ' ' + RTRIM(NMR.LName) AS MemberName
       , CASE NMR.AccountClass WHEN 'P' THEN Left(NMR.SSN, 3) + '-' + LEFT(RIGHT(NMR.SSN, 6), 2) + '-' + RIGHT(NMR.SSN, 4) ELSE LEFT(NMR.SSN, 2) + '-' + RIGHT(NMR.SSN, 7) END AS MemberSSN

       , [IMS].fnSSCU_GetQuestion(@TrackingNum, 'DDQ1') AS Q_1
       , CASE [IMS].fnSSCU_GetQuestion(@TrackingNum, 'DDQ1')
                     WHEN 'EMPLOYED' THEN [IMS].fnSSCU_GetQuestion(@TrackingNum, 'DDQ1-1')
                     WHEN 'UNEMPLOYED' THEN [IMS].fnSSCU_GetQuestion(@TrackingNum, 'DDQ1-1')
                     WHEN 'RETIRED' THEN [IMS].fnSSCU_GetQuestion(@TrackingNum, 'DDQ1-1')
                     WHEN 'DISABLED' THEN [IMS].fnSSCU_GetQuestion(@TrackingNum, 'DDQ1-1')
              END AS Q_1_1

       , [IMS].fnSSCU_GetQuestion(@TrackingNum, 'DDQ2') AS Q_2
       , CASE [IMS].fnSSCU_GetQuestion(@TrackingNum, 'DDQ2')
                     WHEN 'EMPLOYED' THEN [IMS].fnSSCU_GetQuestion(@TrackingNum, 'DDQ2-1')
                     WHEN 'UNEMPLOYED' THEN [IMS].fnSSCU_GetQuestion(@TrackingNum, 'DDQ2-1')
                     WHEN 'RETIRED' THEN [IMS].fnSSCU_GetQuestion(@TrackingNum, 'DDQ2-1')
                     WHEN 'DISABLED' THEN [IMS].fnSSCU_GetQuestion(@TrackingNum, 'DDQ2-1')
              END AS Q_2_1

       , CASE WHEN [IMS].fnSSCU_GetQuestion(@TrackingNum, 'DDQ3') = 'NO' THEN 'X' END AS Q_3N
       , CASE WHEN [IMS].fnSSCU_GetQuestion(@TrackingNum, 'DDQ3') = 'YES' THEN 'X' END AS Q_3Y
       , CASE WHEN [IMS].fnSSCU_GetQuestion(@TrackingNum, 'DDQ3-1') = 'NO' THEN 'X' END AS Q_3Y_1N
       , CASE WHEN [IMS].fnSSCU_GetQuestion(@TrackingNum, 'DDQ3-1') = 'YES' THEN 'X' END AS Q_3Y_1Y
       , [IMS].fnSSCU_GetQuestion(@TrackingNum, 'DDQ3-1-1') AS Q_3Y_1Y_1

       , CASE WHEN [IMS].fnSSCU_GetQuestion(@TrackingNum, 'DDQ4') = 'YES' THEN 'X' END AS Q_4Y
       , CASE WHEN [IMS].fnSSCU_GetQuestion(@TrackingNum, 'DDQ4') = 'NO' THEN 'X' END AS Q_4N

       , CASE WHEN [IMS].fnSSCU_GetQuestion(@TrackingNum, 'DDQ5') = 'NO' THEN 'X' END AS Q_5N
       , CASE WHEN [IMS].fnSSCU_GetQuestion(@TrackingNum, 'DDQ5') = 'YES' THEN 'X' END AS Q_5Y
       , [IMS].fnSSCU_GetQuestion(@TrackingNum, 'DDQ5-1') AS Q_5Y_1

       , CASE WHEN [IMS].fnSSCU_GetQuestion(@TrackingNum, 'DDQ6') = 'NO' THEN 'X' END AS Q_6N
       , CASE WHEN [IMS].fnSSCU_GetQuestion(@TrackingNum, 'DDQ6') = 'YES' THEN 'X' END AS Q_6Y
       , CASE WHEN [IMS].fnSSCU_GetQuestion(@TrackingNum, 'DDQ6-1') = 'YES' THEN 'X' END AS Q_6Y_1Y
       , CASE WHEN [IMS].fnSSCU_GetQuestion(@TrackingNum, 'DDQ6-1') = 'NO' THEN 'X' END AS Q_6Y_1N

       , CASE WHEN [IMS].fnSSCU_GetQuestion(@TrackingNum, 'DDQ7') = 'NO' THEN 'X' END AS Q_7N
       , CASE WHEN [IMS].fnSSCU_GetQuestion(@TrackingNum, 'DDQ7') = 'YES' THEN 'X' END AS Q_7Y
       , '$' + [IMS].fnSSCU_GetQuestion(@TrackingNum, 'DDQ7-1') AS Q_7Y_1
       , '$' + [IMS].fnSSCU_GetQuestion(@TrackingNum, 'DDQ7-2') AS Q_7Y_2

       , CASE WHEN [IMS].fnSSCU_GetQuestion(@TrackingNum, 'DDQ8') = 'NO' THEN 'X' END AS Q_8N
       , CASE WHEN [IMS].fnSSCU_GetQuestion(@TrackingNum, 'DDQ8') = 'YES' THEN 'X' END AS Q_8Y
       , '$' + [IMS].fnSSCU_GetQuestion(@TrackingNum, 'DDQ8-1') AS Q_8Y_1
       , '$' + [IMS].fnSSCU_GetQuestion(@TrackingNum, 'DDQ8-2') AS Q_8Y_2
       , CASE WHEN [IMS].fnSSCU_GetQuestion(@TrackingNum, 'DDQ8-3') = 'NO' THEN 'X' END AS Q_8Y_3N
       , CASE WHEN [IMS].fnSSCU_GetQuestion(@TrackingNum, 'DDQ8-3') = 'YES' THEN 'X' END AS Q_8Y_3Y
       , [IMS].fnSSCU_GetQuestion(@TrackingNum, 'DDQ8-3-1') AS Q_8Y_3Y_1

       , CASE WHEN [IMS].fnSSCU_GetQuestion(@TrackingNum, 'DDQ9') = 'NO' THEN 'X' END AS Q_9N
       , CASE WHEN [IMS].fnSSCU_GetQuestion(@TrackingNum, 'DDQ9') = 'YES' THEN 'X' END AS Q_9Y
       , '$' + [IMS].fnSSCU_GetQuestion(@TrackingNum, 'DDQ9-1') AS Q_9Y_1
       , '$' + [IMS].fnSSCU_GetQuestion(@TrackingNum, 'DDQ9-2') AS Q_9Y_2
       , CASE WHEN [IMS].fnSSCU_GetQuestion(@TrackingNum, 'DDQ9-3') = 'NO' THEN 'X' END AS Q_9Y_3N
       , CASE WHEN [IMS].fnSSCU_GetQuestion(@TrackingNum, 'DDQ9-3') = 'YES' THEN 'X' END AS Q_9Y_3Y
       , [IMS].fnSSCU_GetQuestion(@TrackingNum, 'DDQ9-3-1') AS Q_9Y_3Y_1

       , CASE WHEN [IMS].fnSSCU_GetQuestion(@TrackingNum, 'DDQ10') = 'YES' THEN 'X' END AS Q_10Y
       , CASE WHEN [IMS].fnSSCU_GetQuestion(@TrackingNum, 'DDQ10') = 'NO' THEN 'X' END AS Q_10N
       , [IMS].fnSSCU_GetQuestion(@TrackingNum, 'DDQ10-1') AS Q_10N_1
       , CASE WHEN [IMS].fnSSCU_GetQuestion(@TrackingNum, 'DDQ10-2') = 'YES' THEN 'X' END AS Q_10N_2Y
       , [IMS].fnSSCU_GetQuestion(@TrackingNum, 'DDQ10-2-1') AS Q_10N_2Y_1
       , CASE WHEN [IMS].fnSSCU_GetQuestion(@TrackingNum, 'DDQ10-2') = 'NO' THEN 'X' END AS Q_10N_2N
       , CASE WHEN [IMS].fnSSCU_GetQuestion(@TrackingNum, 'DDQ10-2-2') = 'YES' THEN 'X' END AS Q_10N_2N_1Y
       , [IMS].fnSSCU_GetQuestion(@TrackingNum, 'DDQ10-2-2-1') AS Q_10N_2N_1
       , CASE WHEN [IMS].fnSSCU_GetQuestion(@TrackingNum, 'DDQ10-2-2') = 'NO' THEN 'X' END AS Q_10N_2N_1N

       , CASE WHEN [IMS].fnSSCU_GetQuestion(@TrackingNum, 'DDQ11') = 'NO' THEN 'X' END AS Q_11N
       , CASE WHEN [IMS].fnSSCU_GetQuestion(@TrackingNum, 'DDQ11') = 'YES' THEN 'X' END AS Q_11Y
       , [IMS].fnSSCU_GetQuestion(@TrackingNum, 'DDQ11-1') AS Q_11Y_1

       , CASE WHEN [IMS].fnSSCU_GetQuestion(@TrackingNum, 'DDQ12') = 'NO' THEN 'X' END AS Q_12N
       , CASE WHEN [IMS].fnSSCU_GetQuestion(@TrackingNum, 'DDQ12') = 'YES' THEN 'X' END AS Q_12Y
       , [IMS].fnSSCU_GetQuestion(@TrackingNum, 'DDQ12-1') AS Q_12Y_1

       , CASE WHEN [IMS].fnSSCU_GetQuestion(@TrackingNum, 'DDQ13') = 'NO' THEN 'X' END AS Q_13N
       , CASE WHEN [IMS].fnSSCU_GetQuestion(@TrackingNum, 'DDQ13') = 'YES' THEN 'X' END AS Q_13Y
       , [IMS].fnSSCU_GetQuestion(@TrackingNum, 'DDQ13-1') AS Q_13Y_1

       , CASE WHEN [IMS].fnSSCU_GetQuestion(@TrackingNum, 'DDQ14') = 'NO' THEN 'X' END AS Q_14N
       , CASE WHEN [IMS].fnSSCU_GetQuestion(@TrackingNum, 'DDQ14') = 'YES' THEN 'X' END AS Q_14Y
       , [IMS].fnSSCU_GetQuestion(@TrackingNum, 'DDQ14-1') AS Q_14Y_1
       , [IMS].fnSSCU_GetQuestion(@TrackingNum, 'DDQ14-2') AS Q_14Y_2

       , CASE WHEN [IMS].fnSSCU_GetQuestion(@TrackingNum, 'DDQ15') = 'NO' THEN 'X' END AS Q_15N
       , CASE WHEN [IMS].fnSSCU_GetQuestion(@TrackingNum, 'DDQ15') = 'YES' THEN 'X' END AS Q_15Y
       , [IMS].fnSSCU_GetQuestion(@TrackingNum, 'DDQ15-1') AS Q_15Y_1
       , [IMS].fnSSCU_GetQuestion(@TrackingNum, 'DDQ15-2') AS Q_15Y_2

FROM NewMemberRequest As NMR
       JOIN NewMemberRequestExtra As Extra on NMR.TrackingNum = Extra.TrackingNum
       LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
       LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
       LEFT OUTER JOIN NewMemberAddress As Alt On NMR.TrackingNum = Alt.TrackingNum
WHERE NMR.TrackingNum = @TrackingNum
Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSSCU_DG1Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spSSCU_DG1Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSSCU_DG1Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spSSCU_DG1Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

Select 'Applications' AS GroupName From NewMemberRequest where trackingnum = @TrackingNum
GO
/****** Object:  StoredProcedure [IMS].[spSSCU_DP1Enable]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [IMS].[spSSCU_DP1Enable]  @TrackingNum INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

Return 1
GO
/****** Object:  StoredProcedure [IMS].[spSSCU_DP1Fields]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [IMS].[spSSCU_DP1Fields]  @TrackingNum INTEGER, @DocIndex INTEGER, @ApplicationMode VARCHAR(50) = NULL, @Param1 VARCHAR(50) = NULL, @Param2 VARCHAR(50) = NULL AS

SELECT NMR.TrackingNum AS TrackingNumber
	, AltAddress.Address1 AS MailingAddress
	, NMR.CurrBranch As Branch
	, Branches.Description AS BranchName
	, CONVERT(char(10), GetDate(), 101) As TodayDate
	, DATENAME(MM, GetDate()) + RIGHT(CONVERT(char(12), GetDate(), 107), 9) As TodayDateFull
	, CONVERT(char(10), NMR.CreatedOn, 101) As CreatedOn
	, NMR.Account As Account
--	, CONVERT(char(2), Home.ResidenceYears, 101) + ' yrs  ' + CONVERT(char(2), Home.ResidenceMonths, 101) + ' mos' AS HowLong
	, NMR.FName, NMR.LName, NMR.MInitial
	, CASE NMR.AccountClass WHEN 'P' THEN UPPER(RTRIM(NMR.LName) + ', ' + RTRIM(RTRIM(NMR.FName) + ' ' + RTRIM(NMR.MInitial))) ELSE RTRIM(NMR.OrganizationName) END AS RevFullName
	, CASE NMR.AccountClass WHEN 'P' THEN UPPER(RTRIM(RTRIM(NMR.FName) + ' ' + RTRIM(NMR.LName) + ' ' + NMR.MECHTag)) ELSE UPPER(RTRIM(NMR.OrganizationName)) END AS FullName
	, CASE NMR.AccountClass WHEN 'P' THEN 'Dear ' + RTRIM(RTRIM(NMR.FName) + ' ' + RTRIM(NMR.LName) + ' ' + NMR.MECHTag) + ':' ELSE 'Dear ' + RTRIM(NMR.OrganizationName) + ':' END AS DearName
	, Home.Areacode + '-' + LEFT(Home.Phone, 3) + '-' + RIGHT(RTRIM(Home.Phone), 4) AS HPhoneFull
	, Home.CellPhoneAC + '-' + LEFT(Home.CellPhone, 3) + '-' + RIGHT(RTRIM(Home.CellPhone), 4) AS CPhoneFull
	, CASE NMR.UseTodayForDOB WHEN 'Y' THEN CONVERT(char(10), NMR.CreatedOn, 101) ELSE CONVERT(char(10), NMR.DOB, 101) END AS DOB
	, CASE NMR.AccountClass WHEN 'P' THEN Left(NMR.SSN, 3) + '-' + LEFT(RIGHT(NMR.SSN, 6), 2) + '-' + RIGHT(NMR.SSN, 4) ELSE LEFT(NMR.SSN, 2) + '-' + RIGHT(NMR.SSN, 7) END AS SSN
	, RTRIM(NMR.DriversLicenseNum) + '/' + NMR.DriversLicenseState AS DL
	, CASE WHEN NMR.IDType = 'D' AND NMR.DriversLicenseState <> '' AND NMR.DriversLicenseNum <> '' THEN 'Drivers License' ELSE NMR.IDSource END AS IDType
	, CASE NMR.IDType WHEN 'D' THEN RTRIM(NMR.DriversLicenseNum) ELSE RTRIM(NMR.IDNumber) END AS ID
	, CONVERT(char(10), NMR.IDIssueDate, 101) AS IDIssueDate
	, CONVERT(char(10), NMR.IDExpirationDate, 101) AS IDExpDate
	, NMR.DriversLicenseState AS IDState
	, NMR.MaidenName AS MaidenName
	, NMR.Password AS Password
	, NMR.CreatedBy AS Seller
--	, NMR.Department AS Department
	, CASE WHEN NMR.Created = 'F' Or NMR.Created = 'H' Or NMR.Created = 'I' THEN '' ELSE 'X' END AS YesNewAccount
	, CASE WHEN NMR.Created = 'F' Or NMR.Created = 'H' Or NMR.Created = 'I' THEN 'X' END AS YesChangeAccount
--	, CASE WHEN NMR.Created = 'F' Or NMR.Created = 'H' Or NMR.Created = 'I' THEN NMR.Account END AS ChangeAccount
	, CASE NMR.AccountClass
		WHEN 'O' THEN RTRIM(RTRIM(Work.Address1) + CASE ISNULL(Work.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Work.Address2) END + CASE ISNULL(Work.Address3, '') WHEN '' THEN ' ' ELSE ', ' + RTRIM(Work.Address3) END)
		ELSE RTRIM(RTRIM(Home.Address1) + CASE ISNULL(Home.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Home.Address2) END + CASE ISNULL(Home.Address3, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Home.Address3) END)
	  END AS Address
	, CASE NMR.AccountClass
		WHEN 'O' THEN RTRIM(RTRIM(Work.Address1) + CASE ISNULL(Work.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Work.Address2) END + CASE ISNULL(Work.Address3, '') WHEN '' THEN ' ' ELSE ', ' + RTRIM(Work.Address3) END) + ', ' + RTRIM(Work.City) + ', ' + Work.State + ' ' + CASE LEN(Work.Zip) WHEN 9 THEN LEFT(Work.Zip, 5) + '-' + Right(Work.Zip, 4) ELSE Work.Zip END
		ELSE RTRIM(RTRIM(Home.Address1) + CASE ISNULL(Home.Address2, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Home.Address2) END + CASE ISNULL(Home.Address3, '') WHEN '' THEN '' ELSE ', ' + RTRIM(Home.Address3) END) + ', ' + RTRIM(Home.City) + ', ' + Home.State + ' ' + CASE LEN(Home.Zip) WHEN 9 THEN LEFT(Home.Zip, 5) + '-' + Right(Home.Zip, 4) ELSE Home.Zip END
	  END AS FullAddress
	, CASE NMR.AccountClass
		WHEN 'O' THEN RTRIM(Work.city) + ', ' + Work.state + ' ' + CASE LEN(Work.Zip) WHEN 9 THEN LEFT(Work.zip, 5) + '-' + Right(Work.Zip, 4) ELSE Work.Zip END
		ELSE RTRIM(Home.city) + ', ' + Home.state + ' ' + CASE LEN(Home.Zip) WHEN 9 THEN LEFT(Home.zip, 5) + '-' + Right(Home.Zip, 4) ELSE Home.Zip END
	  END AS CityStateZip
	, CASE NMR.AccountClass
		WHEN 'O' THEN RTRIM(Work.City)
		ELSE RTRIM(Home.City)
	  END AS City
	, CASE NMR.AccountClass
		WHEN 'O' THEN Work.State
		ELSE Home.State
	  END AS State
	, CASE NMR.AccountClass
		WHEN 'O' THEN CASE LEN(Work.Zip) WHEN 9 THEN LEFT(Work.zip, 5) + '-' + Right(Work.Zip, 4) ELSE Work.Zip END
		ELSE CASE LEN(Home.Zip) WHEN 9 THEN LEFT(Home.zip, 5) + '-' + Right(Home.Zip, 4) ELSE Home.Zip END
	  END AS Zip		
	, RTRIM(NMR.Email1) AS Email
	, CASE NMR.AccountClass
		WHEN 'O' THEN Work.AreaCode
		ELSE Home.AreaCode
	  END AS AC
	, CASE NMR.AccountClass
		WHEN 'O' THEN LEFT(Work.Phone, 3) + '-' + RIGHT(RTRIM(Work.Phone), 4)
		ELSE LEFT(Home.Phone, 3) + '-' + RIGHT(RTRIM(Home.Phone), 4)
	  END AS Phone
	, CASE NMR.AccountClass WHEN 'P' THEN Work.EmployerName ELSE '' END AS WorkName
	, CASE NMR.AccountClass WHEN 'P' THEN Work.EmployerName ELSE '' END AS Employer
	, CASE NMR.AccountClass WHEN 'P' THEN RTRIM(Work.address1 + CASE Work.address2 WHEN '' THEN ''ELSE', ' END + Work.address2 + CASE Work.address3 WHEN '' THEN ''ELSE', ' END + Work.address3) ELSE '' END AS WorkAddress
	, CASE NMR.AccountClass WHEN 'P' THEN Work.City ELSE '' END AS WorkCity
	, CASE NMR.AccountClass WHEN 'P' THEN Work.State ELSE '' END AS WorkState
	, CASE NMR.AccountClass WHEN 'P' THEN CASE LEN(Work.Zip) WHEN 9 THEN LEFT(Work.zip, 5) + '-' + RIGHT(Work.Zip, 4) ELSE Work.Zip END ELSE '' END AS WorkZip
	, Work.AreaCode AS WorkAC, LEFT(Work.Phone, 3) + '-' + RIGHT(RTRIM(Work.Phone), 4)  AS WorkPhone
	, Work.AreaCode + '-' + LEFT(Work.Phone, 3) + '-' + RIGHT(RTRIM(Work.Phone), 4)  AS WPhoneFull
	, Work.JobTitle AS Position
	, Work.JobTitle AS Occupation
	, Work.ProfessionYears As WorkNumYears
	,  RTRIM(Work.EmployerName) + ' ' + RTRIM(Work.address1 + CASE Work.address2 WHEN '' THEN ''ELSE', ' END + Work.address2 + CASE Work.address3 WHEN '' THEN ''ELSE', ' END + Work.address3) + ', ' + RTRIM(Work.City) + ', ' + RTRIM(Work.State) + ' ' + CASE LEN(Work.Zip) WHEN 9 THEN LEFT(Work.zip, 5) + '-' + Right(Work.Zip, 4) ELSE Work.Zip END AS WorkNameAddress
	, Work.HireDate
	,   CASE Work.IncomeFrequency
	     	WHEN 'W'  THEN 'Week'
		WHEN 'B' THEN 'Bi-Week'
		WHEN 'M' THEN 'Month'
		WHEN 'S' THEN 'Semi-Month'
		WHEN 'Y' THEN 'Year'
	      END AS IncomeFrequency
	,   CASE Work.IncomeFrequency
	     	WHEN 'W'  THEN (Work.GrossIncome * 52)/100
		WHEN 'B' THEN (Work.GrossIncome * 26)/100
		WHEN 'M' THEN (Work.GrossIncome * 12)/100
		WHEN 'S' THEN (Work.GrossIncome * 24)/100
		WHEN 'Y' THEN (Work.GrossIncome)/100
	      END AS GrossIncome
	, Home.ResidenceYears AS NumYears
	, CASE NMR.AccountClass
		WHEN 'O' THEN 'Yes'
		ELSE CASE WHEN NMR.Citizenship = 'US' Or NMR.Citizenship = 'RA' THEN 'Yes' END
	  END AS YesNoUSCitizen
	, CASE NMR.AccountClass
		WHEN 'O' THEN 'X'
		ELSE CASE WHEN NMR.Citizenship = 'US' Or NMR.Citizenship = 'RA' THEN 'X' END
	  END AS YesUSCitizen
	, CASE NMR.AccountClass
		WHEN 'O' THEN ''
		ELSE CASE WHEN NMR.Citizenship != 'US' And NMR.Citizenship != 'RA' THEN 'X' END
	  END AS NoUSCitizen
	, 'X' AS YesEligible00
--	, CASE WHEN NMR.Qualification1 = 'Household' THEN 'X' END AS YesEligible01
--	, CASE WHEN NMR.Qualification1 = 'Relative' OR NMR.Qualification1 = 'Household' THEN NMR.Qualification2 END AS MemberName
--	, CASE WHEN NMR.Qualification1 = 'Relative' THEN NMR.Relationship END AS Relationship
--	, CASE WHEN NMR.Qualification1 = 'Location' THEN 'X' END AS YesEligible10
--	, CASE WHEN NMR.Qualification1 = 'Location' AND NMR.Qualification2 = 'BCOUNTY' THEN 'X' END AS YesEligible11
--	, CASE WHEN NMR.Qualification1 = 'Location' AND NMR.Qualification2 = 'CLARENDON' THEN 'X' END AS YesEligible12
--	, CASE WHEN NMR.Qualification1 = 'Location' AND NMR.Qualification2 = 'ORANGE' THEN 'X' END AS YesEligible13
--	, CASE WHEN NMR.Qualification1 = 'Location' AND NMR.Qualification2 = 'CALHOUN' THEN 'X' END AS YesEligible14
--	, CASE WHEN NMR.Qualification1 = 'Location' AND NMR.Qualification2 = 'DCOUNTY' THEN 'X' END AS YesEligible15
--	, CASE WHEN NMR.Qualification1 = 'Location' AND NMR.Qualification2 = 'UNDER' THEN 'X' END AS YesEligible16
--	, CASE WHEN NMR.Qualification1 = 'Location' AND NMR.Qualification2 = 'CCOUNTY' THEN 'X' END AS YesEligible17
--	, CASE WHEN NMR.Qualification1 = 'Location' AND NMR.Qualification2 = 'GEO COMM' THEN 'X' END AS YesEligible18
	, RTRIM(NMR.LName) + '/' + RTRIM(RTRIM(NMR.FName) + ' ' + NMR.MInitial) AS SlashName
	, '(' + RTRIM(LTRIM(CAST(NMR.CurrBranch AS VARCHAR(2)))) + ' - ' + RTRIM(Branches.[Description]) + ')' AS SellerBranch
	, 'SOUTH CAROLINA FEDERAL CREDIT UNION' AS HCCUName
	, 'P.O. BOX 190012' AS HCCUAddress
	, 'NORTH CHARLESTON, SC  29419-9012' AS HCCUCityStateZip
	, '(800)845-0432' AS HCCUPhone
FROM NewMemberRequest As NMR
	--INNER JOIN udt_AccountTypes AS AType On NMR.AccountType = AType.TypeCode
	LEFT OUTER JOIN NewMemberHome As Home On NMR.TrackingNum = Home.TrackingNum
	LEFT OUTER JOIN NewMemberWork As Work On NMR.TrackingNum = Work.TrackingNum
	LEFT OUTER JOIN NewMemberAddress As AltAddress On NMR.TrackingNum = AltAddress.TrackingNum
	LEFT OUTER JOIN Branches On NMR.CurrBranch = Branches.BranchCode
	LEFT OUTER JOIN Departments ON NMR.Department = Departments.Department
WHERE NMR.TrackingNum = @TrackingNum
GO
/****** Object:  StoredProcedure [IMS].[spSSCU_Eligibility_Select]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_Eligibility_Select
CREATE PROCEDURE [IMS].[spSSCU_Eligibility_Select]
	@ZipCode varchar(5),
	@CensusTract varchar(10)
AS

IF IsNull(@CensusTract, '') = '' AND IsNull(@ZipCode, '') <> ''
BEGIN
	SELECT Department
	FROM udt_EligibilityByZip
	WHERE IsNull(ZipCode, '') = @ZipCode
END

IF IsNull(@CensusTract, '') <> '' AND IsNull(@ZipCode, '') <> ''
BEGIN
	SELECT Department
	FROM udt_EligibilityByZip
	WHERE IsNull(ZipCode, '') = @ZipCode AND IsNull(CensusTract, '') = @CensusTract
END

IF IsNull(@CensusTract, '') = '' AND IsNull(@ZipCode, '') = ''
BEGIN
	SELECT *
	FROM udt_EligibilityByZip
END
GO
/****** Object:  StoredProcedure [IMS].[spSSCU_FedReservePendingTransaction_Select]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Jonathan Eagar
-- Create date: 8/25/2011
-- Description:	Returns all FedReserve Pending Transactions
-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_FedReservePendingTransaction_Select
-- =============================================
CREATE PROCEDURE [IMS].[spSSCU_FedReservePendingTransaction_Select] 
	-- Add the parameters for the stored procedure here
	@NMRAccountNumber bigint
AS
BEGIN	
	SET @NMRAccountNumber = ISNULL(@NMRAccountNumber, 0)
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	-- Insert statements for procedure here
	
	DECLARE @TransactionSummary TABLE
	(		
		FundingBankID INT,
		TransferAmountTotal DECIMAL(18,2)		
	)
		
	IF @NMRAccountNumber = 0  
	BEGIN
	
	INSERT INTO @TransactionSummary(FundingBankID, TransferAmountTotal)	
	SELECT
		   FB.ID as FundingBankID,			  
		   SUM(FT.Amount) as TransferAmountTotal			   
	FROM IMS.NMRFundingBank FB INNER JOIN IMS.NMRFundingTransaction FT ON FB.ID = FT.FundingBankID						
	WHERE FT.DateTimeLastTransaction IS NULL AND FT.FundingType = 'B'
	GROUP BY FB.ID	
	
	SELECT  FRPT.* FROM
	( 
		(
		SELECT F.ID as FundingID,
			   F.AccountNumber as NMRAccountNumber,
			   FB.TrackingNum as NMRTrackingNumber,
			   NMR.LName + ', ' + NMR.FName as NMRMemberName,
			   FB.ID as FundingBankID,
			   0 as FundingTransactionID,
			   FB.RoutingNumber as FundingBankRouting,
			   FB.AccountNumberEncrypted as FundingBankAccountNumberEncrypted,
			   FB.AccountNumberLast4 as FundingBankAccountAccountLast4,
			   FB.BankName as FundingBankName,
			   FB.AccountType as FundingBankAccountType,
			   FB.Amount1 as VerificationAmount1,
			   FB.Amount2 as VerificationAmount2,
			   0 as TransferAmount,
			   0 as TransferAmountTotal,			   	
			   0 as TargetSubAccountSuffix,
			   0 as TargetSubAccountSeq,
			   FB.DateTimeCreated as DateTimeCreated
		FROM IMS.NMRFunding F INNER JOIN IMS.NMRFundingBank FB ON F.ID = FB.FundingID
								INNER JOIN IMS.NewMemberRequest NMR ON FB.TrackingNum = NMR.TrackingNum
		WHERE FB.VerificationStatus = 'P'	
		)
		UNION ALL
		(	
		SELECT F.ID as FundingID,
			   F.AccountNumber as NMRAccountNumber,
			   FB.TrackingNum as NMRTrackingNumber,			   
			   NMR.LName + ', ' + NMR.FName as NMRMemberName,
			   FB.ID as FundingBankID,
			   FT.ID as FundingTransactionID,
			   FB.RoutingNumber as FundingBankRouting,
			   FB.AccountNumberEncrypted as FundingBankAccountNumberEncrypted,
			   FB.AccountNumberLast4 as FundingBankAccountAccountLast4,
			   FB.BankName as FundingBankName,
			   FB.AccountType as FundingBankAccountType,
				0 as VerificationAmount1,
				0 as VerificationAmount2,
			   FT.Amount as TransferAmount,
			   TS.TransferAmountTotal as TransferAmountTotal,			
			   FT.TargetSubAccountSuffix as TargetSubAccountSuffix,
			   FT.TargetSubAccountSeq as TargetSubAccountSeq,
			   FT.DateTimeCreated as DateTimeCreated 
		FROM IMS.NMRFunding F INNER JOIN IMS.NMRFundingBank FB ON F.ID = FB.FundingID
								INNER JOIN IMS.NMRFundingTransaction FT ON FB.ID = FT.FundingBankID
									INNER JOIN IMS.NewMemberRequest NMR ON FB.TrackingNum = NMR.TrackingNum
										INNER JOIN @TransactionSummary TS ON FB.ID = TS.FundingBankID
		WHERE FT.DateTimeLastTransaction IS NULL AND FT.FundingType = 'B'
		)
	)  FRPT ORDER BY FRPT.NMRTrackingNumber, FRPT.FundingID, FRPT.FundingBankID, FRPT.FundingTransactionID	
	END	
	ELSE
	BEGIN
	
	INSERT INTO @TransactionSummary(FundingBankID, TransferAmountTotal)	
	SELECT	   		   
		   FB.ID as FundingBankID,			  
		   SUM(FT.Amount) as TransferAmountTotal			   
	FROM IMS.NMRFunding F INNER JOIN IMS.NMRFundingBank FB ON F.ID = FB.FundingID 
							INNER JOIN IMS.NMRFundingTransaction FT ON FB.ID = FT.FundingBankID						
	WHERE FT.DateTimeLastTransaction IS NULL AND 
		FT.FundingType = 'B' AND
		F.AccountNumber = @NMRAccountNumber	 
	GROUP BY FB.ID	
	  
	SELECT  FRPT.* FROM
	(   
		(
		SELECT F.ID as FundingID,
			   F.AccountNumber as NMRAccountNumber,
			   FB.TrackingNum as NMRTrackingNumber,
			   NMR.LName + ', ' + NMR.FName as NMRMemberName,
			   FB.ID as FundingBankID,
			   0 as FundingTransactionID,
			   FB.RoutingNumber as FundingBankRouting,
			   FB.AccountNumberEncrypted as FundingBankAccountNumberEncrypted,
			   FB.AccountNumberLast4 as FundingBankAccountAccountLast4,
			   FB.BankName as FundingBankName,
			   FB.AccountType as FundingBankAccountType,
			   FB.Amount1 as VerificationAmount1,
			   FB.Amount2 as VerificationAmount2,
			   0 as TransferAmount,
			   0 as TransferAmountTotal,
			   0 as TargetSubAccountSuffix,
			   0 as TargetSubAccountSeq,
			   FB.DateTimeCreated as DateTimeCreated
		FROM IMS.NMRFunding F INNER JOIN IMS.NMRFundingBank FB ON F.ID = FB.FundingID
								INNER JOIN IMS.NewMemberRequest NMR ON FB.TrackingNum = NMR.TrackingNum
		WHERE	FB.VerificationStatus = 'P' AND 
				F.AccountNumber = @NMRAccountNumber	
		)	
		UNION ALL
		(		
		SELECT F.ID as FundingID,
			   F.AccountNumber as NMRAccountNumber,
			   FB.TrackingNum as NMRTrackingNumber,
			   NMR.LName + ', ' + NMR.FName as NMRMemberName,
			   FB.ID as FundingBankID,
			   FT.ID as FundingTransactionID,
			   FB.RoutingNumber as FundingBankRouting,
			   FB.AccountNumberEncrypted as FundingBankAccountNumberEncrypted,
			   FB.AccountNumberLast4 as FundingBankAccountAccountLast4,
			   FB.BankName as FundingBankName,
			   FB.AccountType as FundingBankAccountType,
				0 as VerificationAmount1,
				0 as VerificationAmount2,
			   FT.Amount as TransferAmount,
			   TS.TransferAmountTotal as TransferAmountTotal,
			   FT.TargetSubAccountSuffix as TargetSubAccountSuffix,
			   FT.TargetSubAccountSeq as TargetSubAccountSeq,
			   FT.DateTimeCreated as DateTimeCreated
		FROM IMS.NMRFunding F 
				INNER JOIN IMS.NMRFundingBank FB ON F.ID = FB.FundingID
					INNER JOIN IMS.NMRFundingTransaction FT ON FB.ID = FT.FundingBankID
						INNER JOIN IMS.NewMemberRequest NMR ON FB.TrackingNum = NMR.TrackingNum
							INNER JOIN @TransactionSummary TS ON FB.ID = TS.FundingBankID
		WHERE	FT.DateTimeLastTransaction IS NULL AND 
				FT.FundingType = 'B' AND 
				F.AccountNumber = @NMRAccountNumber
		)
	)  FRPT	ORDER BY FRPT.NMRTrackingNumber, FRPT.FundingID, FRPT.FundingBankID, FRPT.FundingTransactionID
	END		
END

GO
/****** Object:  StoredProcedure [IMS].[spSSCU_ILAApplicationSearch_Select]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_ILAApplicationSearch_Select
CREATE Procedure [IMS].[spSSCU_ILAApplicationSearch_Select]
	@TrackingNum varchar(9),
	@SSN varchar(9),
	@Account varchar(9),
	@AppNumber varchar(9)
AS

DECLARE @SQL varchar(1000)
SET @SQL = 'SELECT AI.*, A.UserSessionXML FROM ILA_ApplicationInfo AI INNER JOIN ILA_Application A ON A.TrackingNum = AI.TrackingNum WHERE 1=1'
IF @TrackingNum <> '*'
BEGIN
	SET @SQL = @SQL + ' AND AI.TrackingNum = ''' + @TrackingNum + ''''
END
IF @SSN <> '*'
BEGIN
	SET @SQL = @SQL + ' AND AI.PrimarySSN = ''' + @SSN + ''''
END
IF @Account <> '*'
BEGIN
	SET @SQL = @SQL + ' AND AI.Account = ''' + @Account + ''''
END
IF @AppNumber <> '*'
BEGIN
	SET @SQL = @SQL + ' AND AI.AppNumber = ''' + @AppNumber + ''''
END

EXEC(@SQL)
GO
/****** Object:  StoredProcedure [IMS].[spSSCU_OAOReport_ApplicationStatusReport]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_OAOReport_ApplicationStatusReport
CREATE Procedure [IMS].[spSSCU_OAOReport_ApplicationStatusReport]
	@StartDate datetime,
	@StopDate datetime
AS

SELECT
	NMR.TrackingNum
	, UPPER(RTRIM(LEFT(NMR.FName, 1)) + ' ' + RTRIM(NMR.LName)) AS MemberName
	, NMR.ApplyDate AS [Date_Time]
	, NMR.CurrBranch AS Branch
	, CASE
		WHEN NMR.Processed = '1' THEN 'In-Process'
		WHEN NMR.Processed = '999' THEN 'Created'
		WHEN NMR.Processed = '998' THEN 'Cancelled'
		WHEN NMR.Processed = '997' THEN 'Denied'
		ELSE '(Invalid Status)'
		END AS Status
	, CASE
		WHEN (SELECT COUNT(*) FROM NMRFundingBank AS NMRFB WHERE NMRFB.TrackingNum = NMR.TrackingNum AND NMRFB.VerificationStatus <> 'X' AND NMRFB.VerificationStatus <> 'E') > 0 THEN 'ACH'
		WHEN (SELECT COUNT(*) FROM NMRFundingCard AS NMRFC WHERE NMRFC.TrackingNum = NMR.TrackingNum) > 0 THEN 'Credit Card'
		WHEN (SELECT COUNT(*) FROM NMRFundingTransaction AS NMRFT WHERE NMRFT.TrackingNum = NMR.TrackingNum AND NMRFT.SourceSubAccountSeq <> '') > 0 THEN 'Transfer'
		WHEN (SELECT FundingType FROM NMRFundingTransaction AS NMRFT WHERE NMRFT.TrackingNum = NMR.TrackingNum) = NULL THEN ''
		ELSE 'None'
		END AS PaymentMethod
	, CONVERT(VARCHAR(10),	(
								SELECT TOP 1 NMRFT.DateTimeLastTransaction
								FROM NMRFundingTransaction AS NMRFT
								LEFT JOIN NMRFundingCard NMRFC ON NMRFC.ID = NMRFT.FundingCardID
								WHERE
									NMRFT.TrackingNum = NMR.TrackingNum AND
									(
										ISNULL(NMRFT.DateTimeExported, '') <> ''
										OR
										(ISNULL(NMRFC.GatewayAccountID, 0) <> 0 OR ISNULL(NMRFC.AuthenticationCode, '') <> '' OR ISNULL(NMRFC.DateTimeLastTransaction, '') <> '')
									)
							), 101) AS FundingDate
	, (
		SELECT IMS.fnSSCU_GetFundingAmount(NMR.TrackingNum)
		FROM NMRFundingTransaction AS FT
		WHERE FT.TrackingNum = NMR.TrackingNum GROUP BY FT.TrackingNum
	  ) AS InitialAmountFunded
	, NMR.Account AS AccountNumber
FROM IMS.NewMemberRequest NMR
WHERE
	NMR.Processed > 0 
	AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> ''
	AND (NMR.ApplyDate >= @StartDate AND NMR.ApplyDate <= @StopDate)
GO
/****** Object:  StoredProcedure [IMS].[spSSCU_OAOReport_FundingDetailReport]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_OAOReport_FundingDetailReport
CREATE Procedure [IMS].[spSSCU_OAOReport_FundingDetailReport]
	@StartDate datetime,
	@StopDate datetime
AS

SELECT Bank, Card, Existing, Skipped FROM
(
	(SELECT COUNT(DISTINCT NMRFT.TrackingNum) AS Bank
	FROM IMS.NMRFundingTransaction NMRFT
	LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	INNER JOIN IMS.NMRFundingBank NMRFB ON NMRFB.ID = NMRFT.FundingBankID
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND NMRFT.FundingBankID <> '' AND NMR.Processed = 999 AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate) AND (NMRFB.VerificationStatus <> 'E') AND (NMRFB.VerificationStatus <> 'X')) a
		FULL OUTER JOIN
	(SELECT COUNT(DISTINCT NMRFT.TrackingNum) AS Card
	FROM IMS.NMRFundingTransaction NMRFT
	LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND NMRFT.FundingCardID <> '' AND NMR.Processed = 999 AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate)) b ON 1=1
		FULL OUTER JOIN
	(SELECT COUNT(DISTINCT NMRFT.TrackingNum) AS Existing
	FROM IMS.NMRFundingTransaction NMRFT
	LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND NMRFT.SourceSubAccountSeq <> '' AND NMR.Processed = 999 AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate)) c ON 1=1
		FULL OUTER JOIN
	(SELECT COUNT(DISTINCT NMR.TrackingNum) AS Skipped
	FROM IMS.NMRFundingTransaction NMRFT
	FULL OUTER JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND (NMR.Processed = 999 AND ISNULL(NMRFT.TrackingNum, 0) = 0) AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate)) d ON 1=1
)

UNION ALL

SELECT Bank, Card, Existing, Skipped FROM
(
	(SELECT COUNT(DISTINCT NMRFT.TrackingNum) AS Bank
	FROM IMS.NMRFundingTransaction NMRFT
	LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	INNER JOIN IMS.NMRFundingBank NMRFB ON NMRFB.ID = NMRFT.FundingBankID
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND NMRFT.FundingBankID <> '' AND NMR.Processed = 998 AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate) AND (NMRFB.VerificationStatus <> 'E') AND (NMRFB.VerificationStatus <> 'X')) a
		FULL OUTER JOIN
	(SELECT COUNT(DISTINCT NMRFT.TrackingNum) AS Card
	FROM IMS.NMRFundingTransaction NMRFT
	LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND NMRFT.FundingCardID <> '' AND NMR.Processed = 998 AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate)) b ON 1=1
		FULL OUTER JOIN
	(SELECT COUNT(DISTINCT NMRFT.TrackingNum) AS Existing
	FROM IMS.NMRFundingTransaction NMRFT
	LEFT JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND NMRFT.SourceSubAccountSeq <> '' AND NMR.Processed = 998 AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate)) c ON 1=1
		FULL OUTER JOIN
	(SELECT COUNT(DISTINCT NMR.TrackingNum) AS Skipped
	FROM IMS.NMRFundingTransaction NMRFT
	FULL OUTER JOIN IMS.NewMemberRequest NMR ON NMR.TrackingNum = NMRFT.TrackingNum
	WHERE (NMR.Created = 'Y' OR NMR.Created = 'I') AND (NMR.Processed = 998 AND ISNULL(NMRFT.TrackingNum, 0) = 0) AND CAST(NMR.UserSessionXML AS VARCHAR(100)) <> '' AND (NMR.CreatedOn >= @StartDate AND NMR.CreatedOn <= @StopDate)) d ON 1=1
)
GO
/****** Object:  StoredProcedure [IMS].[spSSCU_ReviewQueue_SelectAll]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Jon Eagar
-- Create date: 7/08/2011
-- Description:	Lists the active NMR records for the Queue Review
-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_ReviewQueue_SelectAll
-- =============================================
CREATE PROCEDURE [IMS].[spSSCU_ReviewQueue_SelectAll] 
	-- Add the parameters for the stored procedure here
	@StartDate DATETIME = NULL,
	@EndDate DATETIME = NULL,
	@StatusCode VARCHAR(2) = NULL
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
 
	DECLARE @Hierarchy INT
	DECLARE @StatusID INT

	IF @StartDate IS NOT NULL AND @StartDate <> ''
	BEGIN
		SET @StartDate = CONVERT(DATETIME,(CONVERT(VARCHAR(10), @StartDate, 102)))  --Set Time to beginning of Day
		SET @EndDate = CAST( CONVERT(CHAR(10), @EndDate, 101) + ' 11:59 PM' AS DATETIME) --Set Time to end of day
	END
	
	SET @StatusCode = NULLIF(@StatusCode,'')

	DECLARE @ReviewQueue TABLE
	(
		ID INT IDENTITY(1,1) PRIMARY KEY CLUSTERED,
		TrackingNum INT,	
		Name VARCHAR(90),
		EmployerName VARCHAR(50),
		Account INT,
		StatusName VARCHAR(250),
		StatusID INT,
		FundingComplete CHAR(20), 
		ApplyDate DATETIME,
		Teller CHAR(3),
		LastPage VARCHAR(50),
		TNExpireDate DATETIME
	)

	IF (@StatusCode IS NOT NULL)
	BEGIN
		SELECT @Hierarchy=RQC.Hierarchy, @StatusID=RQC.ID FROM IMS.ReviewQueueConfig RQC WHERE RQC.StatusCode = @StatusCode
	END

	IF (@Hierarchy > 0 OR @StatusCode IS NULL)
	BEGIN
		--Existing Loss
		INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, TNExpireDate)
		SELECT	DISTINCT NMR.TrackingNum, 
				LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
				--RTRIM(LTRIM(NMRW.EmployerName)) AS EmployerName,
				'Chks: ' + CASE WHEN (SELECT COUNT(CS.TrackingNum) FROM NewMemberCheckOrderSimple CS WHERE CS.TrackingNum = NMR.TrackingNum) > 0 THEN 'YES' ELSE 'NO' END
				+ '<br>Card: '
				+ REPLACE(REPLACE(COALESCE((SELECT TOP 1 [TypeCode] FROM IMS.NewMemberPlasticCard PC WHERE PC.TrackingNum = NMR.TrackingNum), 'None'), 'D', 'Visa Debit Card'), 'P', 'ATM Card')
				AS EmployerName,
				NMR.Account, 
				RTRIM(RQC.StatusName),-- + '<br>(' + RTRIM(MA.Description) + ')',
				RQC.ID, 
				--NMR.FundingComplete,
				CASE WHEN ISNULL(EXTRA.AuditCompletedBy, '') <> '' THEN EXTRA.AuditCompletedBy ELSE '' END AS FundingComplete,
				NMR.ApplyDate,
--						(SELECT TOP 1 CompletedBy FROM IMS.ActionLog WHERE TrackingNum = NMR.TrackingNum AND NullIf(CompletedBy, '') IS NOT NULL ORDER BY CompletedDate DESC) AS Seller,
				NMR.Seller AS Seller,
				(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
				NMR.TNExpireDate
		FROM IMS.NewMemberRequest NMR 
				INNER JOIN IMS.NewMemberManualApproval MA 
					ON NMR.TrackingNum = MA.TrackingNum AND MA.JointSequence >= 0
				INNER JOIN IMS.ReviewQueueConfig RQC
					ON RQC.StatusCode = 'EL' AND RQC.ReasonCode = LTRIM(RTRIM(MA.ReasonCode))
				LEFT JOIN IMS.NewMemberWork NMRW
					ON NMR.TrackingNum = NMRW.TrackingNum					
				LEFT JOIN IMS.NewMemberRequestExtra EXTRA
					ON NMR.TrackingNum = EXTRA.TrackingNum
		WHERE NOT EXISTS(SELECT TrackingNum FROM @ReviewQueue RQ Where RQ.TrackingNum = NMR.TrackingNum) AND
				NMR.Processed NOT IN (-1, 998, 999) AND 
				((MA.ApprovalStatus = '') OR (MA.ApprovalStatus = 'D')) AND (@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate)AND DATALENGTH(NMR.UserSessionXML) > 0  AND NMR.UserSessionXML IS NOT NULL
		
		IF (@Hierarchy > 1 OR @StatusCode IS NULL)
		BEGIN
			--DENIED
			INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, TNExpireDate)
			SELECT	DISTINCT NMR.TrackingNum, 
					LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
					--RTRIM(LTRIM(NMRW.EmployerName)) AS EmployerName,
					'Chks: ' + CASE WHEN (SELECT COUNT(CS.TrackingNum) FROM NewMemberCheckOrderSimple CS WHERE CS.TrackingNum = NMR.TrackingNum) > 0 THEN 'YES' ELSE 'NO' END
					+ '<br>Card: '
					+ REPLACE(REPLACE(COALESCE((SELECT TOP 1 [TypeCode] FROM IMS.NewMemberPlasticCard PC WHERE PC.TrackingNum = NMR.TrackingNum), 'None'), 'D', 'Visa Debit Card'), 'P', 'ATM Card')
					AS EmployerName,
					NMR.Account, 
					RQC.StatusName,
					RQC.ID, 
					--NMR.FundingComplete,
					CASE WHEN ISNULL(EXTRA.AuditCompletedBy, '') <> '' THEN EXTRA.AuditCompletedBy ELSE '' END AS FundingComplete,
					NMR.ApplyDate,
	--				(SELECT TOP 1 CompletedBy FROM IMS.ActionLog WHERE TrackingNum = NMR.TrackingNum AND NullIf(CompletedBy, '') IS NOT NULL ORDER BY CompletedDate DESC) AS Seller,
					NMR.Seller AS Seller,
					(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
					NMR.TNExpireDate
			FROM IMS.NewMemberRequest NMR 
					INNER JOIN 
					IMS.NewMemberManualApproval MA 
						ON NMR.TrackingNum = MA.TrackingNum 
					INNER JOIN IMS.ReviewQueueConfig RQC
						ON RQC.StatusCode = 'DN'
					LEFT JOIN IMS.NewMemberWork NMRW
						ON NMR.TrackingNum = NMRW.TrackingNum
					LEFT JOIN IMS.NewMemberRequestExtra EXTRA
						ON NMR.TrackingNum = EXTRA.TrackingNum
			WHERE NOT EXISTS(SELECT TrackingNum FROM @ReviewQueue RQ Where RQ.TrackingNum = NMR.TrackingNum) AND
					NMR.Processed = 997 AND (@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate) AND DATALENGTH(NMR.UserSessionXML) > 0  AND NMR.UserSessionXML IS NOT NULL
		
			IF (@Hierarchy > 2 OR @StatusCode IS NULL)
			BEGIN
				--[[REMOVED]] EFUNDS DECLINE
				INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, TNExpireDate)
				SELECT	DISTINCT NMR.TrackingNum, 
						LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
						--RTRIM(LTRIM(NMRW.EmployerName)) AS EmployerName,
						'Chks: ' + CASE WHEN (SELECT COUNT(CS.TrackingNum) FROM NewMemberCheckOrderSimple CS WHERE CS.TrackingNum = NMR.TrackingNum) > 0 THEN 'YES' ELSE 'NO' END
						+ '<br>Card: '
						+ REPLACE(REPLACE(COALESCE((SELECT TOP 1 [TypeCode] FROM IMS.NewMemberPlasticCard PC WHERE PC.TrackingNum = NMR.TrackingNum), 'None'), 'D', 'Visa Debit Card'), 'P', 'ATM Card')
						AS EmployerName,
						NMR.Account, 
						RQC.StatusName,
						RQC.ID, 
						--NMR.FundingComplete,
						CASE WHEN ISNULL(EXTRA.AuditCompletedBy, '') <> '' THEN EXTRA.AuditCompletedBy ELSE '' END AS FundingComplete,
						NMR.ApplyDate,
	--					(SELECT TOP 1 CompletedBy FROM IMS.ActionLog WHERE TrackingNum = NMR.TrackingNum AND NullIf(CompletedBy, '') IS NOT NULL ORDER BY CompletedDate DESC) AS Seller,
						NMR.Seller AS Seller,
						(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
						NMR.TNExpireDate
				FROM IMS.NewMemberRequest NMR 
						INNER JOIN IMS.NewMemberManualApproval MA 
							ON NMR.TrackingNum = MA.TrackingNum AND MA.JointSequence = 0
						INNER JOIN IMS.ReviewQueueConfig RQC
							ON RQC.StatusCode = 'ED' AND RQC.ReasonCode = LTRIM(RTRIM(MA.ReasonCode))
						LEFT JOIN IMS.NewMemberWork NMRW
							ON NMR.TrackingNum = NMRW.TrackingNum					
						LEFT JOIN IMS.NewMemberRequestExtra EXTRA
							ON NMR.TrackingNum = EXTRA.TrackingNum
				WHERE 1=0 AND NOT EXISTS(SELECT TrackingNum FROM @ReviewQueue RQ Where RQ.TrackingNum = NMR.TrackingNum) AND
						NMR.Processed NOT IN (-1, 998, 999) AND 
						(MA.ApprovalStatus = '') AND (@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate)AND DATALENGTH(NMR.UserSessionXML) > 0  AND NMR.UserSessionXML IS NOT NULL

				IF (@Hierarchy > 3 OR @StatusCode IS NULL)
				BEGIN
					--ID/TU DECLINE
					INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, TNExpireDate)
					SELECT	DISTINCT NMR.TrackingNum, 
							LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
							--RTRIM(LTRIM(NMRW.EmployerName)) AS EmployerName,
							'Chks: ' + CASE WHEN (SELECT COUNT(CS.TrackingNum) FROM NewMemberCheckOrderSimple CS WHERE CS.TrackingNum = NMR.TrackingNum) > 0 THEN 'YES' ELSE 'NO' END
							+ '<br>Card: '
							+ REPLACE(REPLACE(COALESCE((SELECT TOP 1 [TypeCode] FROM IMS.NewMemberPlasticCard PC WHERE PC.TrackingNum = NMR.TrackingNum), 'None'), 'D', 'Visa Debit Card'), 'P', 'ATM Card')
							AS EmployerName,
							NMR.Account, 
							RQC.StatusName,
							RQC.ID, 
							--NMR.FundingComplete,
							CASE WHEN ISNULL(EXTRA.AuditCompletedBy, '') <> '' THEN EXTRA.AuditCompletedBy ELSE '' END AS FundingComplete,
							NMR.ApplyDate,
			--				(SELECT TOP 1 CompletedBy FROM IMS.ActionLog WHERE TrackingNum = NMR.TrackingNum AND NullIf(CompletedBy, '') IS NOT NULL ORDER BY CompletedDate DESC) AS Seller,
							NMR.Seller AS Seller,
							(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
							NMR.TNExpireDate
					FROM IMS.NewMemberRequest NMR 
							INNER JOIN IMS.NewMemberSubAccount SA 
								ON NMR.TrackingNum = SA.TrackingNum
							INNER JOIN IMS.ReviewQueueConfig RQC
								ON RQC.StatusCode = 'ID'
							LEFT JOIN IMS.NewMemberWork NMRW
								ON NMR.TrackingNum = NMRW.TrackingNum
							LEFT JOIN IMS.NewMemberManualApproval MA 
								ON NMR.TrackingNum = MA.TrackingNum
							LEFT JOIN IMS.NewMemberRequestExtra EXTRA
								ON NMR.TrackingNum = EXTRA.TrackingNum
					WHERE NOT EXISTS(SELECT TrackingNum FROM @ReviewQueue RQ Where RQ.TrackingNum = NMR.TrackingNum) AND
							NMR.Processed NOT IN (-1, 998, 999) AND 
							(((SA.Approval <> 'A' AND SA.ApprovedBy = '') OR (MA.ApprovalStatus = '')) AND MA.ApproveCode <> 'I') AND 
							(@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate) AND DATALENGTH(NMR.UserSessionXML) > 0 AND NMR.UserSessionXML IS NOT NULL

					IF (@Hierarchy > 4 OR @StatusCode IS NULL)
					BEGIN
						--[[REMOVED]] Manual Review
						INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, TNExpireDate)
						SELECT	DISTINCT NMR.TrackingNum, 
								LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
								--RTRIM(LTRIM(NMRW.EmployerName)) AS EmployerName,
								'Chks: ' + CASE WHEN (SELECT COUNT(CS.TrackingNum) FROM NewMemberCheckOrderSimple CS WHERE CS.TrackingNum = NMR.TrackingNum) > 0 THEN 'YES' ELSE 'NO' END
								+ '<br>Card: '
								+ REPLACE(REPLACE(COALESCE((SELECT TOP 1 [TypeCode] FROM IMS.NewMemberPlasticCard PC WHERE PC.TrackingNum = NMR.TrackingNum), 'None'), 'D', 'Visa Debit Card'), 'P', 'ATM Card')
								AS EmployerName,
								NMR.Account, 
								RQC.StatusName,
								RQC.ID, 
								--NMR.FundingComplete,
								CASE WHEN ISNULL(EXTRA.AuditCompletedBy, '') <> '' THEN EXTRA.AuditCompletedBy ELSE '' END AS FundingComplete,
								NMR.ApplyDate,
	--							(SELECT TOP 1 CompletedBy FROM IMS.ActionLog WHERE TrackingNum = NMR.TrackingNum AND NullIf(CompletedBy, '') IS NOT NULL ORDER BY CompletedDate DESC) AS Seller,
								NMR.Seller AS Seller,
								(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
								NMR.TNExpireDate
						FROM IMS.NewMemberRequest NMR 
								INNER JOIN 
								IMS.NewMemberManualApproval MA 
									ON NMR.TrackingNum = MA.TrackingNum 
								INNER JOIN IMS.ReviewQueueConfig RQC
									ON RQC.StatusCode = 'MR' AND RQC.ReasonCode = LTRIM(RTRIM(MA.ReasonCode))
								LEFT JOIN IMS.NewMemberWork NMRW
									ON NMR.TrackingNum = NMRW.TrackingNum		
								LEFT JOIN IMS.NewMemberRequestExtra EXTRA
									ON NMR.TrackingNum = EXTRA.TrackingNum
						WHERE 1=0 AND NOT EXISTS(SELECT TrackingNum FROM @ReviewQueue RQ Where RQ.TrackingNum = NMR.TrackingNum) AND
							  NMR.Processed NOT IN (-1, 998, 999) AND 
							  (MA.ApprovalStatus = '') AND (@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate) AND DATALENGTH(NMR.UserSessionXML) > 0 AND NMR.UserSessionXML IS NOT NULL

						IF (@Hierarchy > 5 OR @StatusCode IS NULL)
						BEGIN
							--[[REMOVED]] Need Decision/Pending
							INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, TNExpireDate)
							SELECT	DISTINCT NMR.TrackingNum, 
									LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
									--RTRIM(LTRIM(NMRW.EmployerName)) AS EmployerName,
									'Chks: ' + CASE WHEN (SELECT COUNT(CS.TrackingNum) FROM NewMemberCheckOrderSimple CS WHERE CS.TrackingNum = NMR.TrackingNum) > 0 THEN 'YES' ELSE 'NO' END
									+ '<br>Card: '
									+ REPLACE(REPLACE(COALESCE((SELECT TOP 1 [TypeCode] FROM IMS.NewMemberPlasticCard PC WHERE PC.TrackingNum = NMR.TrackingNum), 'None'), 'D', 'Visa Debit Card'), 'P', 'ATM Card')
									AS EmployerName,
									NMR.Account, 
									RQC.StatusName,
									RQC.ID, 
									--NMR.FundingComplete,
									CASE WHEN ISNULL(EXTRA.AuditCompletedBy, '') <> '' THEN EXTRA.AuditCompletedBy ELSE '' END AS FundingComplete,
									NMR.ApplyDate,
	--								(SELECT TOP 1 CompletedBy FROM IMS.ActionLog WHERE TrackingNum = NMR.TrackingNum AND NullIf(CompletedBy, '') IS NOT NULL ORDER BY CompletedDate DESC) AS Seller,
									NMR.Seller AS Seller,
									(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
									NMR.TNExpireDate
							FROM IMS.NewMemberRequest NMR  
									INNER JOIN IMS.NewMemberSubAccount SA 
										ON NMR.TrackingNum = SA.TrackingNum
									INNER JOIN IMS.ReviewQueueConfig RQC
										ON RQC.StatusCode = 'DP'
									LEFT JOIN IMS.NewMemberWork NMRW
										ON NMR.TrackingNum = NMRW.TrackingNum
									LEFT JOIN IMS.NewMemberManualApproval MA 
										ON NMR.TrackingNum = MA.TrackingNum
									LEFT JOIN IMS.NewMemberRequestExtra EXTRA
										ON NMR.TrackingNum = EXTRA.TrackingNum
							WHERE 1=0 AND NOT EXISTS(SELECT TrackingNum FROM @ReviewQueue RQ Where RQ.TrackingNum = NMR.TrackingNum) AND
								  NMR.Processed NOT IN (-1, 998, 999) AND 
								  ((SA.Approval <> 'A' AND SA.ApprovedBy = '') OR (MA.ApprovalStatus = '')) AND 
								  (@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate) AND DATALENGTH(NMR.UserSessionXML) > 0 AND NMR.UserSessionXML IS NOT NULL

							IF (@Hierarchy > 6 OR @StatusCode IS NULL)
							BEGIN
								--Account Created
								INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, TNExpireDate)
								SELECT	DISTINCT NMR.TrackingNum, 
										LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
										--RTRIM(LTRIM(NMRW.EmployerName)) AS EmployerName,
										'Chks: ' + CASE WHEN (SELECT COUNT(CS.TrackingNum) FROM NewMemberCheckOrderSimple CS WHERE CS.TrackingNum = NMR.TrackingNum) > 0 THEN 'YES' ELSE 'NO' END
										+ '<br>Card: '
										+ REPLACE(REPLACE(COALESCE((SELECT TOP 1 [TypeCode] FROM IMS.NewMemberPlasticCard PC WHERE PC.TrackingNum = NMR.TrackingNum), 'None'), 'D', 'Visa Debit Card'), 'P', 'ATM Card')
										AS EmployerName,
										NMR.Account, 
										RQC.StatusName,
										RQC.ID, 
										--NMR.FundingComplete,
										CASE WHEN ISNULL(EXTRA.AuditCompletedBy, '') <> '' THEN EXTRA.AuditCompletedBy ELSE '' END AS FundingComplete,
										NMR.ApplyDate,
	--									(SELECT TOP 1 CompletedBy FROM IMS.ActionLog WHERE TrackingNum = NMR.TrackingNum AND NullIf(CompletedBy, '') IS NOT NULL ORDER BY CompletedDate DESC) AS Seller,
										NMR.Seller AS Seller,
										(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
										NMR.TNExpireDate
								FROM IMS.NewMemberRequest NMR
									INNER JOIN IMS.ReviewQueueConfig RQC 
										ON RQC.StatusCode = 'AC'
									LEFT JOIN IMS.NewMemberWork NMRW
										ON NMR.TrackingNum = NMRW.TrackingNum
									LEFT JOIN IMS.NewMemberRequestExtra EXTRA
										ON NMR.TrackingNum = EXTRA.TrackingNum
								WHERE NOT EXISTS(SELECT TrackingNum FROM @ReviewQueue RQ WHERE RQ.TrackingNum = NMR.TrackingNum) AND
										NMR.Processed = 999 AND 
										IsNull(FundingComplete, 'N') <> 'Y' AND
										(@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate) AND DATALENGTH(NMR.UserSessionXML) > 0 AND NMR.UserSessionXML IS NOT NULL

								IF (@Hierarchy > 7 OR @StatusCode IS NULL)
								BEGIN
									--Completed
									INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, TNExpireDate)
									SELECT	DISTINCT NMR.TrackingNum, 
											LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
											--RTRIM(LTRIM(NMRW.EmployerName)) AS EmployerName,
											'Chks: ' + CASE WHEN (SELECT COUNT(CS.TrackingNum) FROM NewMemberCheckOrderSimple CS WHERE CS.TrackingNum = NMR.TrackingNum) > 0 THEN 'YES' ELSE 'NO' END
											+ '<br>Card: '
											+ REPLACE(REPLACE(COALESCE((SELECT TOP 1 [TypeCode] FROM IMS.NewMemberPlasticCard PC WHERE PC.TrackingNum = NMR.TrackingNum), 'None'), 'D', 'Visa Debit Card'), 'P', 'ATM Card')
											AS EmployerName,
											NMR.Account, 
											RQC.StatusName,
											RQC.ID, 
											--NMR.FundingComplete,
											CASE WHEN ISNULL(EXTRA.AuditCompletedBy, '') <> '' THEN EXTRA.AuditCompletedBy ELSE '' END AS FundingComplete,
											NMR.ApplyDate,
	--										(SELECT TOP 1 CompletedBy FROM IMS.ActionLog WHERE TrackingNum = NMR.TrackingNum AND NullIf(CompletedBy, '') IS NOT NULL ORDER BY CompletedDate DESC) AS Seller,
											NMR.Seller AS Seller,
											(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
											NMR.TNExpireDate
									FROM IMS.NewMemberRequest NMR
										INNER JOIN IMS.ReviewQueueConfig RQC 
											ON RQC.StatusCode = 'XX'
										LEFT JOIN IMS.NewMemberWork NMRW
											ON NMR.TrackingNum = NMRW.TrackingNum
										LEFT JOIN IMS.NewMemberRequestExtra EXTRA
											ON NMR.TrackingNum = EXTRA.TrackingNum
									WHERE NOT EXISTS(SELECT TrackingNum FROM @ReviewQueue RQ WHERE RQ.TrackingNum = NMR.TrackingNum) AND
											NMR.Processed = 999 AND 
											IsNull(FundingComplete, 'N') = 'Y' AND
											(@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate) AND DATALENGTH(NMR.UserSessionXML) > 0 AND NMR.UserSessionXML IS NOT NULL

									IF (@Hierarchy > 8 OR @StatusCode IS NULL)
									BEGIN
										--In Progress
										INSERT INTO @ReviewQueue(TrackingNum, Name, EmployerName, Account, StatusName, StatusID, FundingComplete, ApplyDate, Teller, LastPage, TNExpireDate)
										SELECT	DISTINCT NMR.TrackingNum, 
												LTRIM(RTRIM(NMR.FName)) + ' ' + LTRIM(RTRIM(NMR.MInitial)) + ' ' + LTRIM(RTRIM(NMR.LName)) as Name,
												--RTRIM(LTRIM(NMRW.EmployerName)) AS EmployerName,
												'Chks: ' + CASE WHEN (SELECT COUNT(CS.TrackingNum) FROM NewMemberCheckOrderSimple CS WHERE CS.TrackingNum = NMR.TrackingNum) > 0 THEN 'YES' ELSE 'NO' END
												+ '<br>Card: '
												+ REPLACE(REPLACE(COALESCE((SELECT TOP 1 [TypeCode] FROM IMS.NewMemberPlasticCard PC WHERE PC.TrackingNum = NMR.TrackingNum), 'None'), 'D', 'Visa Debit Card'), 'P', 'ATM Card')
												AS EmployerName,
												NMR.Account, 
												RQC.StatusName,
												RQC.ID, 
												--NMR.FundingComplete,
												CASE WHEN ISNULL(EXTRA.AuditCompletedBy, '') <> '' THEN EXTRA.AuditCompletedBy ELSE '' END AS FundingComplete,
												NMR.ApplyDate,
	--											(SELECT TOP 1 CompletedBy FROM IMS.ActionLog WHERE TrackingNum = NMR.TrackingNum AND NullIf(CompletedBy, '') IS NOT NULL ORDER BY CompletedDate DESC) AS Seller,
												NMR.Seller AS Seller,
												(SELECT TOP 1 PageName FROM IMS.NewMemberRequestTracking WHERE TrackingNum = NMR.TrackingNum ORDER BY StatusDateTime DESC) AS LastPage,
												NMR.TNExpireDate
										FROM IMS.NewMemberRequest NMR			
												INNER JOIN IMS.ReviewQueueConfig RQC 
													ON RQC.StatusCode = 'IP'
												LEFT JOIN IMS.NewMemberWork NMRW
													ON NMR.TrackingNum = NMRW.TrackingNum
												LEFT JOIN IMS.NewMemberRequestExtra EXTRA
													ON NMR.TrackingNum = EXTRA.TrackingNum
										WHERE NOT EXISTS(SELECT TrackingNum FROM @ReviewQueue RQ WHERE RQ.TrackingNum = NMR.TrackingNum) AND
												NMR.Processed = 1 AND NMR.Created <> '' AND 
												(SELECT COUNT(TrackingNum) FROM IMS.NewMemberManualApproval MA WHERE MA.TrackingNum = NMR.TrackingNum AND MA.ApprovalStatus = '' AND MA.ApproveCode <> 'I') = 0 AND
												(SELECT COUNT(TrackingNum) FROM IMS.NewMemberSubAccount SA WHERE SA.TrackingNum = NMR.TrackingNum) = (SELECT COUNT(TrackingNum) FROM IMS.NewMemberSubAccount SA WHERE SA.TrackingNum = NMR.TrackingNum AND (SA.Approval = 'A' OR SA.ApprovedBy <> '')) AND
												(@StartDate IS NULL OR NMR.ApplyDate BETWEEN @StartDate AND @EndDate) --AND DATALENGTH(NMR.UserSessionXML) > 0 AND NMR.UserSessionXML IS NOT NULL

									END
								END
							END
						END	  
					END
				END
			END
		END
		SELECT 
		TrackingNum as TrackingNumber,		 
		Name,
		EmployerName,
		Account,
		StatusName,
		--CASE WHEN FundingComplete <> 'Y' THEN 'N' ELSE 'Y' END as FundingComplete,
		FundingComplete,
		ApplyDate, 
		Teller, 
		LastPage, 
		TNExpireDate,
		(
			SELECT COUNT(*)
			FROM IMS.SecureMailThread SMT
			LEFT JOIN IMS.SecureMailAttachment SMA ON SMA.ThreadId = SMT.ThreadId
			WHERE SMT.TrackingNum = RQ.TrackingNum AND SMA.Status = 'U'
		) AS AttachU,
		(
			SELECT COUNT(*)
			FROM IMS.SecureMailThread SMT
			LEFT JOIN IMS.SecureMailAttachment SMA ON SMA.ThreadId = SMT.ThreadId
			WHERE SMT.TrackingNum = RQ.TrackingNum AND SMA.Status = 'V'
		) AS AttachV,
		(
			SELECT COUNT(*)
			FROM IMS.SecureMailThread SMT
			LEFT JOIN IMS.SecureMailAttachment SMA ON SMA.ThreadId = SMT.ThreadId
			WHERE SMT.TrackingNum = RQ.TrackingNum AND SMA.Status = 'Q'
		) AS AttachQU,
		(
			SELECT COUNT(*)
			FROM IMS.SecureMailThread SMT
			LEFT JOIN IMS.SecureMailAttachment SMA ON SMA.ThreadId = SMT.ThreadId
			WHERE SMT.TrackingNum = RQ.TrackingNum AND SMA.Status = 'QV'
		) AS AttachQV
		FROM @ReviewQueue RQ 
		WHERE RQ.StatusID = @StatusID OR @StatusID IS NULL ORDER BY TrackingNum	DESC
	END
END
GO
/****** Object:  StoredProcedure [IMS].[spSSCU_SignOnOAO]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.SignOnOAO 
CREATE Procedure [IMS].[spSSCU_SignOnOAO]
@TrackingNum int,
@Password varchar(24),
@SSN varchar(9),
@DOB datetime
AS
BEGIN
	SELECT
		n.TrackingNum, 
		ISNULL(CAST(n.Account AS VARCHAR(50)),'') AS Account, 
		n.UserSessionXML, 
		n.AccountType, 
		n.Created, 
		n.Processed, 
		n.TNExpireDate, 
		e.BadLoginAttempts
	FROM IMS.NewMemberRequest n
	JOIN IMS.NewMemberRequestExtra e ON n.TrackingNum = e.TrackingNum
	WHERE 
		n.TrackingNum = @TrackingNum 
		AND (
			(
				(n.Password = @Password COLLATE SQL_Latin1_General_CP1_CS_AS) 
				OR (
					n.SSN = @SSN 
					AND n.DOB = @DOB
				)
			) 
			AND n.Processed <> '998' 
			OR (@Password = 'MoDESTaFF')
		)
-- NOTE: The "COLLATE SQL_Latin1_General_CP1_CS_AS" above makes the password search case sensitive.
END
GO
/****** Object:  StoredProcedure [IMS].[spSSCU_SyncCarts]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_SyncCarts
CREATE PROCEDURE [IMS].[spSSCU_SyncCarts]
@TrackingNum int,
@SyncMode varchar(1)
AS

IF @SyncMode = 'S' OR @SyncMode = 'B' OR @SyncMode = 'Y'
BEGIN
	--Delete from cart where subaccount record no longer exists
	DELETE FROM IMS.NewMemberShoppingCart
	WHERE TrackingNum = @TrackingNum AND SubAccountID IS NOT NULL AND
		SubAccountID NOT IN (SELECT ID FROM IMS.NewMemberSubAccount
					WHERE TrackingNum = @TrackingNum)
END

IF @SyncMode = 'C' OR @SyncMode = 'B' OR @SyncMode = 'Y'
BEGIN
	--Delete from subaccounts where cart record no longer exists
	DELETE FROM IMS.NewMemberSubAccount
	WHERE TrackingNum = @TrackingNum AND ShoppingCartID IS NOT NULL AND
		ShoppingCartID NOT IN (SELECT ID FROM IMS.NewMemberShoppingCart
					WHERE TrackingNum = @TrackingNum)
END

IF @SyncMode = 'S' OR @SyncMode = 'B' OR @SyncMode = 'Y'
BEGIN
	--Update cart items with changes in the subaccount records
	UPDATE IMS.NewMemberShoppingCart
	SET RequestedAmount = (SELECT Amount FROM IMS.NewMemberSubAccount
				WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberShoppingCart.SubAccountID),
		InsuranceAmount1 = NULL,
		InsuranceAmount2 = NULL
	WHERE TrackingNum = @TrackingNum AND
		SubAccountID IN (SELECT ID FROM IMS.NewMemberSubAccount WHERE TrackingNum = @TrackingNum) AND
		IsNull((SELECT LineOfCredit FROM IMS.udt_LSubAccounts WHERE UniqueID = IMS.NewMemberShoppingCart.ProductID), 'N') = 'N' AND
		(SELECT Amount FROM IMS.NewMemberSubAccount WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberShoppingCart.SubAccountID) <> IMS.NewMemberShoppingCart.RequestedAmount + IsNull(IMS.NewMemberShoppingCart.InsuranceAmount1, 0) + IsNull(IMS.NewMemberShoppingCart.InsuranceAmount2, 0)

	UPDATE IMS.NewMemberShoppingCart
	SET RequestedAmount = (SELECT CreditLimit FROM IMS.NewMemberSubAccount
				WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberShoppingCart.SubAccountID),
		InsuranceAmount1 = NULL,
		InsuranceAmount2 = NULL
	WHERE TrackingNum = @TrackingNum AND
		SubAccountID IN (SELECT ID FROM IMS.NewMemberSubAccount WHERE TrackingNum = @TrackingNum) AND
		(SELECT LineOfCredit FROM IMS.udt_LSubAccounts WHERE UniqueID = IMS.NewMemberShoppingCart.ProductID) = 'Y' AND
		(SELECT CreditLimit FROM IMS.NewMemberSubAccount WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberShoppingCart.SubAccountID) <> IMS.NewMemberShoppingCart.RequestedAmount + IsNull(IMS.NewMemberShoppingCart.InsuranceAmount1, 0) + IsNull(IMS.NewMemberShoppingCart.InsuranceAmount2, 0)

	UPDATE IMS.NewMemberShoppingCart
	SET Term = (SELECT Term FROM IMS.NewMemberSubAccount
				WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberShoppingCart.SubAccountID)
	WHERE TrackingNum = @TrackingNum AND
		SubAccountID IN (SELECT ID FROM IMS.NewMemberSubAccount WHERE TrackingNum = @TrackingNum)

	--Create cart items for new subaccount records
	INSERT INTO IMS.NewMemberShoppingCart
	(ProductID, ProductName, YesNoMaybe, SLType, Approved, TrackingNum, MasterCategoryID, CategoryID,
	Exclude, CreatedBy, CreatedOn, Created, Fulfill, LOSProductID, LOSID,
	ApprovedAmount, RequestedAmount, Requires, LoanType, LoanSubType, Term, InsCode, ClosedFlag, LossFlag, SubAccountID)
	SELECT STP.ProductID, STP.ProductDesc, 'YES', STP.SLType, 'Y', @TrackingNum AS TrackingNum, STP.MasterCategoryID, STP.CategoryID,
		Prod.Exclude, SA.CreatedBy, SA.CreatedOn, SA.Created, STP.Fulfill, STP.LOSProductID, SA.LOSID,
		CASE WHEN Prod.LineOfCredit = 'Y' THEN SA.CreditLimit
		     ELSE SA.Amount
		END AS ApprovedAmount,
		CASE WHEN Prod.LineOfCredit = 'Y' THEN SA.CreditLimit
		     ELSE SA.Amount
		END AS RequestedAmount,
		STP.Requires, STP.LoanType, STP.LoanSubType, SA.Term, SA.InsCode, SA.ClosedFlag, SA.LossFlag, SA.ID AS SubAccountID
	FROM IMS.udt_SalesToolProducts STP INNER JOIN
		IMS.NewMemberSubAccount SA ON SA.SubAccountType = STP.ProductID INNER JOIN
		IMS.NewMemberRequest NMR ON SA.TrackingNum = NMR.TrackingNum INNER JOIN
		IMS.udt_AllSubAccounts Prod ON STP.ProductID = Prod.UniqueID AND ',' + RTrim(Prod.AccountTypes) + ',' LIKE '%,' + RTrim(NMR.AccountType) + ',%'
	WHERE SA.TrackingNum = @TrackingNum AND SA.SubAccountType NOT IN (SELECT ProductID FROM IMS.NewMemberShoppingCart WHERE TrackingNum = @TrackingNum)
	
	--Delete products that require products that are no longer here
	DELETE FROM IMS.NewMemberShoppingCart
	WHERE TrackingNum = @TrackingNum AND NullIf(Requires, '') IS NOT NULL AND
		(SELECT Count(SC2.ID) FROM IMS.NewMemberShoppingCart SC2 INNER JOIN
			(SELECT DISTINCT
			        SUBSTRING(l.List, v.Number+1, CHARINDEX(',', l.List, v.Number+1) -v.Number-1) AS Requires
			   FROM Master.dbo.spt_Values v
			  CROSS JOIN
			        (SELECT ',' + RTRIM(REPLACE(Requires, ', ', ',')) + ',' AS List
				FROM IMS.NewMemberShoppingCart
				WHERE TrackingNum = @TrackingNum AND ProductID = IMS.NewMemberShoppingCart.ProductID) l
			  WHERE v.Type = 'P'
			    AND v.Number BETWEEN 1 AND LEN(l.List)-1
			    AND SUBSTRING(l.List, v.Number, 1)=',') FN ON SC2.ProductID = FN.Requires
			WHERE TrackingNum = @TrackingNum AND SC2.ProductID <> IMS.NewMemberShoppingCart.ProductID) = 0
END

IF @SyncMode = 'C' OR @SyncMode = 'B' OR @SyncMode = 'Y'
BEGIN
	--Update subaccounts with changes in the cart records
	UPDATE IMS.NewMemberSubAccount
	SET Amount = (SELECT RequestedAmount + IsNull(InsuranceAmount1, 0) + IsNull(InsuranceAmount2, 0) FROM IMS.NewMemberShoppingCart
				WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberSubAccount.ShoppingCartID)
	WHERE TrackingNum = @TrackingNum AND
		ShoppingCartID IN (SELECT ID FROM IMS.NewMemberShoppingCart WHERE TrackingNum = @TrackingNum) AND
		IsNull((SELECT LineOfCredit FROM IMS.udt_LSubAccounts WHERE UniqueID = IMS.NewMemberSubAccount.SubAccountType), 'N') = 'N' AND
		(SELECT RequestedAmount + IsNull(InsuranceAmount1, 0) + IsNull(InsuranceAmount2, 0) FROM IMS.NewMemberShoppingCart WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberSubAccount.ShoppingCartID) <> IMS.NewMemberSubAccount.Amount

	UPDATE IMS.NewMemberSubAccount
	SET CreditLimit = (SELECT RequestedAmount + IsNull(InsuranceAmount1, 0) + IsNull(InsuranceAmount2, 0) FROM IMS.NewMemberShoppingCart
				WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberSubAccount.ShoppingCartID)
	WHERE TrackingNum = @TrackingNum AND
		ShoppingCartID IN (SELECT ID FROM IMS.NewMemberShoppingCart WHERE TrackingNum = @TrackingNum) AND
		(SELECT LineOfCredit FROM IMS.udt_LSubAccounts WHERE UniqueID = IMS.NewMemberSubAccount.SubAccountType) = 'Y' AND
		(SELECT RequestedAmount + IsNull(InsuranceAmount1, 0) + IsNull(InsuranceAmount2, 0) FROM IMS.NewMemberShoppingCart WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberSubAccount.ShoppingCartID) <> IMS.NewMemberSubAccount.CreditLimit

	UPDATE IMS.NewMemberSubAccount
	SET Term = (SELECT Term FROM IMS.NewMemberShoppingCart
				WHERE TrackingNum = @TrackingNum AND ID = IMS.NewMemberSubAccount.ShoppingCartID)
	WHERE TrackingNum = @TrackingNum AND
		ShoppingCartID IN (SELECT ID FROM IMS.NewMemberShoppingCart WHERE TrackingNum = @TrackingNum)

	--Create subaccount records for new cart items
	INSERT INTO IMS.NewMemberSubAccount
	(TrackingNum, Sequence, DescAbrv, SubAccountType, Description, ACC, CollateralCode, SLType, Amount,
	Approval, Created, CreatedBy, CreatedOn, ProductType,
	CreditLimit, StartSuffix, StopSuffix, APR, CashAdvanceAPR, SkipCode, Coupons, Term, Method,
	Frequency, InsCode, DisclosureCode, ReviewDate, MaturityDate, Officer, CurrBranch, StatementOrder, MaturityDisp, 
	DividendDisp, LineofCredit, PaymentPercent, AllowPlastic1, AllowPlastic2, AllowPlastic3, AllowPlastic4, 
	CreateHost, HostCommand, ServiceClass, TaxCode, JointTaxCode, W8TaxCode, KTransferLink, LoanDiscounts, 
	MICRBegin, MICREnd, MICRFormat, PromptMICR, Purpose, FundingOrder, VRLIndex, VRLMargin, 
	VRLCode, VRLFreq, LOSProductID, LOSID, LossFlag, ClosedFlag, ShoppingCartID, Action, Payment)
	SELECT @TrackingNum AS TrackingNum, (SELECT Count(ID) FROM IMS.NewMemberShoppingCart SC2 WHERE TrackingNum = @TrackingNum AND SC2.Approved = 'Y' AND 
		SC2.ProductID NOT IN (SELECT SubAccountType FROM IMS.NewMemberSubAccount SA2 WHERE TrackingNum = @TrackingNum) AND SC2.ID <= SC.ID) + 
		(SELECT IsNull(Max(Sequence), 0) FROM IMS.NewMemberSubAccount SA3 WHERE TrackingNum = @TrackingNum) AS Sequence,
	Prod.DescAbrv, Prod.UniqueID, Prod.Description, Prod.ACC, Prod.CollateralCode, Prod.SLType,
	CASE WHEN Prod.LineOfCredit = 'Y' THEN 0
	     ELSE SC.RequestedAmount + IsNull(SC.InsuranceAmount1, 0) + IsNull(SC.InsuranceAmount2, 0)
	END AS Amount, NMR.Approval, SC.Created, SC.CreatedBy, SC.CreatedOn, Prod.ProductType,
	CASE WHEN Prod.LineOfCredit = 'Y' THEN SC.RequestedAmount
	     ELSE 0
	END AS CreditLimit, Prod.StartSuffix, Prod.StopSuffix, Prod.APR, Prod.CashAdvanceAPR, Prod.SkipCode, Prod.Coupons, Prod.Term, Prod.Method,
	Prod.Frequency, Prod.InsCode, Prod.DisclosureCode, Prod.ReviewDate, Prod.MaturityDate, Prod.Officer, Prod.CurrBranch, Prod.StatementOrder, Prod.MaturityDisp, 
	Prod.DividendDisp, Prod.LineofCredit, Prod.PaymentPercent, Prod.AllowPlastic1, Prod.AllowPlastic2, Prod.AllowPlastic3, Prod.AllowPlastic4, 
	Prod.CreateHost, Prod.HostCommand, Prod.ServiceClass, Prod.TaxCode,Prod.JointTaxCode, Prod.W8TaxCode, Prod.KTransferLink, Prod.LoanDiscounts, 
	Prod.MICRBegin, Prod.MICREnd, Prod.MICRFormat, Prod.PromptMICR, Prod.Purpose, Prod.FundingOrder, Prod.VRLIndex, Prod.VRLMargin, 
	Prod.VRLCode, Prod.VRLFreq, SC.LOSProductID, SC.LOSID, SC.LossFlag, SC.ClosedFlag, SC.ID AS ShoppingCartID, Prod.Action, 0
	FROM IMS.NewMemberShoppingCart SC INNER JOIN
		IMS.NewMemberRequest NMR ON SC.TrackingNum = NMR.TrackingNum INNER JOIN
		IMS.udt_AllSubAccounts Prod ON SC.ProductID = Prod.UniqueID AND ',' + RTrim(Prod.AccountTypes) + ',' LIKE '%,' + RTrim(NMR.AccountType) + ',%'
	WHERE SC.TrackingNum = @TrackingNum AND SC.Approved = 'Y' AND SC.ProductID NOT IN (SELECT SubAccountType FROM IMS.NewMemberSubAccount WHERE TrackingNum = @TrackingNum)
	ORDER BY ID
	
	--Delete products that require products that are no longer here
	/*DELETE NewMemberSubAccount FROM IMS.NewMemberSubAccount SA
	WHERE TrackingNum = @TrackingNum AND
		(SELECT NullIf(Requires, '') FROM IMS.udt_AllSubAccounts WHERE UniqueID = SA.SubAccountType) IS NOT NULL AND
		(SELECT Count(SA2.ID) FROM IMS.NewMemberSubAccount SA2 INNER JOIN
			(SELECT DISTINCT
			        SUBSTRING(l.List, v.Number+1, CHARINDEX(',', l.List, v.Number+1) -v.Number-1) AS Requires
			   FROM Master.dbo.spt_Values v
			  CROSS JOIN
			        (SELECT ',' + RTRIM(REPLACE(Requires, ', ', ',')) + ',' AS List
				FROM IMS.udt_AllSubAccounts
				WHERE UniqueID = SA.SubAccountType) l
			  WHERE v.Type = 'P'
			    AND v.Number BETWEEN 1 AND LEN(l.List)-1
			    AND SUBSTRING(l.List, v.Number, 1)=',') FN ON SA2.SubAccountType = FN.Requires
			WHERE TrackingNum = @TrackingNum AND SA2.SubAccountType <> SA.SubAccountType) = 0*/

	--Delete subaccounts that came from shopping cart items that are no longer approved
	DELETE FROM IMS.NewMemberSubAccount
	WHERE TrackingNum = @TrackingNum AND ((ID IN (SELECT SubAccountID
		FROM IMS.NewMemberShoppingCart
		WHERE TrackingNum = @TrackingNum AND SubAccountID IS NOT NULL AND
			Approved = 'N')) OR (ShoppingCartID IS NOT NULL AND 
		ShoppingCartID IN (SELECT ID
		FROM IMS.NewMemberShoppingCart
		WHERE TrackingNum = @TrackingNum AND Approved = 'N')))

	UPDATE IMS.NewMemberShoppingCart
	SET SubAccountID = NULL
	WHERE TrackingNum = @TrackingNum AND Approved = 'N'

	--Delete plastic cards for subaccounts that no longer exist
	DELETE FROM IMS.NewMemberPlasticCard
	WHERE TrackingNum = @TrackingNum AND Sequence IN (SELECT PlasticCardSequence
		FROM IMS.NewMemberSubAccountLink
		WHERE TrackingNum = @TrackingNum AND SubSequence NOT IN (SELECT Sequence
			FROM IMS.NewMemberSubAccount
			WHERE TrackingNum = @TrackingNum))

	DELETE FROM IMS.NewMemberSubAccountLink
	WHERE TrackingNum = @TrackingNum AND SubSequence NOT IN (SELECT Sequence
		FROM IMS.NewMemberSubAccount
		WHERE TrackingNum = @TrackingNum)

	--Delete flags for subaccounts that no longer exist
	DELETE FROM IMS.NewMemberFlag
	WHERE TrackingNum = @TrackingNum AND IsNull(SubAccountSequence, 0) > 0 AND
		SubAccountSequence NOT IN (SELECT Sequence
		FROM IMS.NewMemberSubAccount
		WHERE TrackingNum = @TrackingNum)

	--Delete joint owner links for subaccounts that no longer exist
	DELETE FROM IMS.NewMemberJointLink
	WHERE TrackingNum = @TrackingNum AND SubAccountSequence NOT IN (SELECT Sequence
		FROM IMS.NewMemberSubAccount
		WHERE TrackingNum = @TrackingNum)

	--Delete overdraft links for subaccount that no longer exist
	DELETE FROM IMS.NewMemberOverdraftLink
	WHERE TrackingNum = @TrackingNum AND ((TargetSubAccount > 0 AND
		TargetSubAccount NOT IN (SELECT Sequence
		FROM IMS.NewMemberSubAccount
		WHERE TrackingNum = @TrackingNum)) OR (SourceSubAccount > 0 AND
		SourceSubAccount NOT IN (SELECT Sequence
		FROM IMS.NewMemberSubAccount
		WHERE TrackingNum = @TrackingNum)))
END

--Synchronize IDs
UPDATE IMS.NewMemberSubAccount
SET ShoppingCartID = (SELECT ID FROM IMS.NewMemberShoppingCart
			WHERE TrackingNum = @TrackingNum AND SubAccountID = IMS.NewMemberSubAccount.ID)
WHERE TrackingNum = @TrackingNum AND (SELECT ID FROM IMS.NewMemberShoppingCart
			WHERE TrackingNum = @TrackingNum AND SubAccountID = IMS.NewMemberSubAccount.ID) IS NOT NULL

UPDATE IMS.NewMemberShoppingCart
SET SubAccountID = (SELECT ID FROM IMS.NewMemberSubAccount
			WHERE TrackingNum = @TrackingNum AND ShoppingCartID = IMS.NewMemberShoppingCart.ID)
WHERE TrackingNum = @TrackingNum AND (SELECT ID FROM IMS.NewMemberSubAccount
			WHERE TrackingNum = @TrackingNum AND ShoppingCartID = IMS.NewMemberShoppingCart.ID) IS NOT NULL
GO
/****** Object:  StoredProcedure [IMS].[spSSCU_UnreconciledFunding_Select]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		Jonathan Eagar
-- Create date: 5/08/2009
-- Description:	Returns all unreconciled transactions
-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_UnreconciledFunding_Select
-- =============================================
CREATE PROCEDURE [IMS].[spSSCU_UnreconciledFunding_Select] 
	-- Add the parameters for the stored procedure here
	@AccountNumber bigint
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
    -- Insert statements for procedure here
     -- Insert statements for procedure here
    IF ISNULL(@AccountNumber, 0) = 0  
    BEGIN
		SELECT	FS.AccountNumber, 
				FS.FundingTransactionID, 
				FS.TrackingNum, 
				FS.GatewayPaymentID, 
				FS.GatewayPaymentStatus, 
				FS.FundingAccountID, 
				FS.FundingType, 
				FS.TargetSubAccountSeq, 
				FS.TargetSubAccountSuffix, 
				FS.TransferAmount, 
				FS.DateTimeCreated, 
				FS.DateTimeLastTransaction,
				FS.MemberName,
				FS.SourceBankName,
				FS.SourceBankRouting,
				FS.SourceAccountLast4,
				FS.SourceCardType
		FROM
		(
			SELECT	VF.AccountNumber, 
					VF.FundingTransactionID , 
					VF.TrackingNum, 
					VF.GatewayPaymentID, 
					PS.PaymentStatus as GatewayPaymentStatus, 
					VF.FundingAccountID, 
					VF.FundingType, 
					VF.TargetSubAccountSeq, 
					VF.TargetSubAccountSuffix, 
					VF.TransferAmount, 
					VF.DateTimeCreated, 
					VF.DateTimeLastTransaction,
					VF.MemberName,
					VF.SourceBankName,
					VF.SourceBankRouting,
					VF.SourceAccountLast4,
					VF.SourceCardType
			FROM
			(	
				(
					SELECT	F.AccountNumber, 
							FT.ID as FundingTransactionID, 
							FT.TrackingNum, 
							FT.GatewayPaymentID, 
							FB.ID as FundingAccountID, 
							FT.FundingType, 
							FT.TargetSubAccountSeq,	
							FT.TargetSubAccountSuffix, 
							FT.Amount as TransferAmount, 
							FT.DateTimeCreated, 
							FT.DateTimeLastTransaction,
							NMR.FName + ' ' + NMR.LName as MemberName,
							FB.BankName as SourceBankName,
							FB.RoutingNumber as SourceBankRouting,
							FB.AccountNumberLast4 as SourceAccountLast4,
							'' as SourceCardType
					FROM IMS.NewMemberRequest as NMR 
					INNER JOIN IMS.NMRFundingTransaction AS FT ON NMR.TrackingNum = FT.TrackingNum
					INNER JOIN IMS.NMRFundingBank AS FB ON FT.FundingBankID = FB.ID 
					INNER JOIN IMS.NMRFunding as F ON F.ID = FB.FundingID 
					WHERE FT.DateTimeReconciled IS NULL
				)
				UNION ALL
				(
					SELECT F.AccountNumber, 
					FT.ID as FundingTransactionID, 
					FT.TrackingNum, 
					FT.GatewayPaymentID, 
					FC.ID as FundingAccountID, 
					FT.FundingType, 
					FT.TargetSubAccountSeq,	
					FT.TargetSubAccountSuffix, 
					FT.Amount as TransferAmount, 
					FT.DateTimeCreated, 
					FT.DateTimeLastTransaction,
					NMR.FName + ' ' + NMR.LName as MemberName,
					'' as SourceBankName,
					'' as SourceBankRouting,
					FC.AccountNumberLast4 as SourceAccountLast4,
					FC.CardType as SourceCardType
					FROM IMS.NewMemberRequest as NMR 
					INNER JOIN IMS.NMRFundingTransaction AS FT ON NMR.TrackingNum = FT.TrackingNum
					INNER JOIN IMS.NMRFundingCard AS FC ON FT.FundingCardID = FC.ID 
					INNER JOIN IMS.NMRFunding as F ON F.ID = FC.FundingID 
					WHERE FT.DateTimeReconciled IS NULL AND UPPER(ISNULL(FC.AuthenticationCode, '')) NOT IN ('DECLINED', 'FAILED', 'FRAUD', 'ERROR', '')
				)
			)AS VF LEFT OUTER JOIN IMS.USAePayPaymentStatus AS PS ON VF.GatewayPaymentID = PS.PaymentId
		) AS FS	ORDER BY DateTimeCreated
    END		
    ELSE
	BEGIN    
		SELECT	FS.AccountNumber, 
				FS.FundingTransactionID, 
				FS.TrackingNum, 
				FS.GatewayPaymentID, 
				FS.GatewayPaymentStatus, 
				FS.FundingAccountID, 
				FS.FundingType, 
				FS.TargetSubAccountSeq, 
				FS.TargetSubAccountSuffix, 
				FS.TransferAmount, 
				FS.DateTimeCreated, 
				FS.DateTimeLastTransaction,
				FS.MemberName,
				FS.SourceBankName,
				FS.SourceBankRouting,
				FS.SourceAccountLast4,
				FS.SourceCardType
		FROM
		(
			SELECT	VF.AccountNumber, 
					VF.FundingTransactionID, 
					VF.TrackingNum, 
					VF.GatewayPaymentID, 
					PS.PaymentStatus as GatewayPaymentStatus, 
					VF.FundingAccountID, 
					VF.FundingType, 
					VF.TargetSubAccountSeq, 
					VF.TargetSubAccountSuffix, 
					VF.TransferAmount, 
					VF.DateTimeCreated, 
					VF.DateTimeLastTransaction,
					VF.MemberName,
					VF.SourceBankName,
					VF.SourceBankRouting,
					VF.SourceAccountLast4,
					VF.SourceCardType
			FROM
			(	
				(
					SELECT	F.AccountNumber, 
							FT.ID as FundingTransactionID, 
							FT.TrackingNum, 
							FT.GatewayPaymentID, 
							FB.ID as FundingAccountID, 
							FT.FundingType, 
							FT.TargetSubAccountSeq,	
							FT.TargetSubAccountSuffix, 
							FT.Amount as TransferAmount, 
							FT.DateTimeCreated, 
							FT.DateTimeLastTransaction,
							NMR.FName + ' ' + NMR.LName as MemberName,
							FB.BankName as SourceBankName,
							FB.RoutingNumber as SourceBankRouting,
							FB.AccountNumberLast4 as SourceAccountLast4,
							'' as SourceCardType
					FROM IMS.NewMemberRequest as NMR 
					INNER JOIN IMS.NMRFundingTransaction AS FT ON NMR.TrackingNum = FT.TrackingNum
					INNER JOIN IMS.NMRFundingBank AS FB ON FT.FundingBankID = FB.ID 
					INNER JOIN IMS.NMRFunding as F ON F.ID = FB.FundingID 
					WHERE F.AccountNumber = @AccountNumber AND FT.DateTimeReconciled IS NULL
				)
				UNION ALL
				(
					SELECT	F.AccountNumber, 
							FT.ID as FundingTransactionID, 
							FT.TrackingNum, FT.GatewayPaymentID, 
							FC.ID as FundingAccountID, 
							FT.FundingType, 
							FT.TargetSubAccountSeq,	
							FT.TargetSubAccountSuffix, 
							FT.Amount as TransferAmount, 
							FT.DateTimeCreated, 
							FT.DateTimeLastTransaction,
							NMR.FName + ' ' + NMR.LName as MemberName,
							'' as SourceBankName,
							'' as SourceBankRouting,
							FC.AccountNumberLast4 as SourceAccountLast4,
							FC.CardType as SourceCardType
					FROM IMS.NewMemberRequest as NMR 
					INNER JOIN IMS.NMRFundingTransaction AS FT ON NMR.TrackingNum = FT.TrackingNum
					INNER JOIN IMS.NMRFundingCard AS FC ON FT.FundingCardID = FC.ID 
					INNER JOIN IMS.NMRFunding as F ON F.ID = FC.FundingID 
					WHERE F.AccountNumber = @AccountNumber AND FT.DateTimeReconciled IS NULL AND UPPER(ISNULL(FC.AuthenticationCode, '')) NOT IN ('DECLINED', 'FAILED', 'FRAUD', 'ERROR', '')
				)
			)AS VF LEFT OUTER JOIN IMS.USAePayPaymentStatus AS PS ON VF.GatewayPaymentID = PS.PaymentId
		) AS FS	ORDER BY DateTimeCreated
    END		
END

GO
/****** Object:  StoredProcedure [IMS].[spSSCU_UnreconciledVerification_Select]    Script Date: 1/4/2025 10:20:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- It is important to be able to identify how your data is consumed. 
-- Because this is called by a parent SP through dynamic name generation, it is not found anywhere in the data layer or code layer. 
-- I am making sure that it can be searched back to its parent by including the following comment: 
-- Called dynamically by: IMS.sp_UnreconciledVerification_Select
CREATE PROCEDURE [IMS].[spSSCU_UnreconciledVerification_Select]
	-- Add the parameters for the stored procedure here
	@AccountNumber bigint
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
    IF ISNULL(@AccountNumber, 0) = 0  
    BEGIN
		SELECT      NMRFunding.AccountNumber, NMRFundingBank.ID as FundingBankID, IMS.fnSSCU_GetUSAePayPaymentStatus(NMRFundingBank.GatewayPaymentID1) as GatewayPaymentStatus1, IMS.fnSSCU_GetUSAePayPaymentStatus(NMRFundingBank.GatewayPaymentID2) as GatewayPaymentStatus2, NMRFundingBank.TrackingNum, NMRFundingBank.AccountNumberLast4, 
						  NMRFundingBank.BankName, NMRFundingBank.AccountType, NMRFundingBank.Amount1, NMRFundingBank.Amount2, 
						  NMRFundingBank.PSIErrorMessage, NMRFundingBank.DateTimeCreated, NMRFundingBank.DateTimeExported, NMRFundingBank.DateTimeLastTransaction
		FROM         NMRFundingBank INNER JOIN
						  NMRFunding ON NMRFundingBank.FundingID = NMRFunding.ID
		WHERE     (NMRFundingBank.DateTimeVerificationReconciled IS NULL AND NMRFundingBank.VerificationStatus = 'V')
    END
    ELSE
	BEGIN    
		SELECT      NMRFunding.AccountNumber, NMRFundingBank.ID as FundingBankID, IMS.fnSSCU_GetUSAePayPaymentStatus(NMRFundingBank.GatewayPaymentID1) as GatewayPaymentStatus1, IMS.fnSSCU_GetUSAePayPaymentStatus(NMRFundingBank.GatewayPaymentID2) as GatewayPaymentStatus2, NMRFundingBank.TrackingNum, NMRFundingBank.AccountNumberLast4, 
						  NMRFundingBank.BankName, NMRFundingBank.AccountType, NMRFundingBank.Amount1, NMRFundingBank.Amount2, 
						  NMRFundingBank.PSIErrorMessage, NMRFundingBank.DateTimeCreated, NMRFundingBank.DateTimeExported, NMRFundingBank.DateTimeLastTransaction
		FROM         NMRFundingBank INNER JOIN
						  NMRFunding ON NMRFundingBank.FundingID = NMRFunding.ID
		WHERE     (NMRFunding.AccountNumber = @AccountNumber AND DateTimeVerificationReconciled IS NULL AND NMRFundingBank.VerificationStatus = 'V')       
    END	
END


GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Unique id for each row in this table' , @level0type=N'SCHEMA',@level0name=N'IMS', @level1type=N'TABLE',@level1name=N'udt_DocuSignTab', @level2type=N'COLUMN',@level2name=N'id'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Document Group number, referencing udt_Doc (apparently we have no single field unique id for document)' , @level0type=N'SCHEMA',@level0name=N'IMS', @level1type=N'TABLE',@level1name=N'udt_DocuSignTab', @level2type=N'COLUMN',@level2name=N'docGroupNum'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Document number, referencing udt_Doc (apparently we have no single field unique id for document so we need docGroupNum as well)' , @level0type=N'SCHEMA',@level0name=N'IMS', @level1type=N'TABLE',@level1name=N'udt_DocuSignTab', @level2type=N'COLUMN',@level2name=N'docNum'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Which page of the document does this tab go on?  Start with page 1 (not zero)' , @level0type=N'SCHEMA',@level0name=N'IMS', @level1type=N'TABLE',@level1name=N'udt_DocuSignTab', @level2type=N'COLUMN',@level2name=N'pageNumber'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Can be SignHere, InitialHere, or DateSigned' , @level0type=N'SCHEMA',@level0name=N'IMS', @level1type=N'TABLE',@level1name=N'udt_DocuSignTab', @level2type=N'COLUMN',@level2name=N'tabType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Start with 1.  If applies to main signer, leave null.' , @level0type=N'SCHEMA',@level0name=N'IMS', @level1type=N'TABLE',@level1name=N'udt_DocuSignTab', @level2type=N'COLUMN',@level2name=N'jointNumber'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The "tool tip text" (hover text) for the tab.  Optional.' , @level0type=N'SCHEMA',@level0name=N'IMS', @level1type=N'TABLE',@level1name=N'udt_DocuSignTab', @level2type=N'COLUMN',@level2name=N'name'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'If true, can complete the envelope without completing this tab.' , @level0type=N'SCHEMA',@level0name=N'IMS', @level1type=N'TABLE',@level1name=N'udt_DocuSignTab', @level2type=N'COLUMN',@level2name=N'optional'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Defaults to the tab type (e.g. "Sign Here") but can be configured with this field.' , @level0type=N'SCHEMA',@level0name=N'IMS', @level1type=N'TABLE',@level1name=N'udt_DocuSignTab', @level2type=N'COLUMN',@level2name=N'tabLabel'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'With 0 being all the way to the left, this is how far we want the tab to be to the right using 72 DPI.  (Ignored if we''re using anchors to place tab.)' , @level0type=N'SCHEMA',@level0name=N'IMS', @level1type=N'TABLE',@level1name=N'udt_DocuSignTab', @level2type=N'COLUMN',@level2name=N'xPosition'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'With 0 being all the way to the top, this is how far down we want the tab to be using 72 DPI.  (Ignored if we''re using anchors to place tab.)' , @level0type=N'SCHEMA',@level0name=N'IMS', @level1type=N'TABLE',@level1name=N'udt_DocuSignTab', @level2type=N'COLUMN',@level2name=N'yPosition'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Valid values 0 to 100.  100 is normal size.  50 is 50% of normal size, shrinking to the upper left.' , @level0type=N'SCHEMA',@level0name=N'IMS', @level1type=N'TABLE',@level1name=N'udt_DocuSignTab', @level2type=N'COLUMN',@level2name=N'scaleValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Used for DateSigned tabs.  Leaving null might default to today''s date?' , @level0type=N'SCHEMA',@level0name=N'IMS', @level1type=N'TABLE',@level1name=N'udt_DocuSignTab', @level2type=N'COLUMN',@level2name=N'value'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Use this field if you''re going to place the tab relative to some specific text found in the document instead of an absolute position.  This is the text that you''re going to anchor to.' , @level0type=N'SCHEMA',@level0name=N'IMS', @level1type=N'TABLE',@level1name=N'udt_DocuSignTab', @level2type=N'COLUMN',@level2name=N'anchorString'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'How far to the right of the anchorText (using anchorUnits) to place the tab.' , @level0type=N'SCHEMA',@level0name=N'IMS', @level1type=N'TABLE',@level1name=N'udt_DocuSignTab', @level2type=N'COLUMN',@level2name=N'anchorXOffset'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'How far down from the anchorText (using anchorUnits) to place the tab.' , @level0type=N'SCHEMA',@level0name=N'IMS', @level1type=N'TABLE',@level1name=N'udt_DocuSignTab', @level2type=N'COLUMN',@level2name=N'anchorYOffset'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'If using anchors to position the tab, these are the units to use.  Valid values are pixels, mms, cms, or inches.' , @level0type=N'SCHEMA',@level0name=N'IMS', @level1type=N'TABLE',@level1name=N'udt_DocuSignTab', @level2type=N'COLUMN',@level2name=N'anchorUnits'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'By default, if the anchor text isn''t found then it will produce an error.  Put a "1" in here to avoid the error.' , @level0type=N'SCHEMA',@level0name=N'IMS', @level1type=N'TABLE',@level1name=N'udt_DocuSignTab', @level2type=N'COLUMN',@level2name=N'anchorIgnoreIfNotPresent'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Only used when this is a DateSigned tab.' , @level0type=N'SCHEMA',@level0name=N'IMS', @level1type=N'TABLE',@level1name=N'udt_DocuSignTab', @level2type=N'COLUMN',@level2name=N'fontColor'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Only used when this is a DateSigned tab.' , @level0type=N'SCHEMA',@level0name=N'IMS', @level1type=N'TABLE',@level1name=N'udt_DocuSignTab', @level2type=N'COLUMN',@level2name=N'fontSize'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Only used when this is a DateSigned tab.' , @level0type=N'SCHEMA',@level0name=N'IMS', @level1type=N'TABLE',@level1name=N'udt_DocuSignTab', @level2type=N'COLUMN',@level2name=N'font'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Only used when this is a DateSigned tab.' , @level0type=N'SCHEMA',@level0name=N'IMS', @level1type=N'TABLE',@level1name=N'udt_DocuSignTab', @level2type=N'COLUMN',@level2name=N'bold'
GO
USE [master]
GO
ALTER DATABASE [NAO] SET  READ_WRITE 
GO
