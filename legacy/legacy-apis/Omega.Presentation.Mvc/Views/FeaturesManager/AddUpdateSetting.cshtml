@model Omega.Presentation.Mvc.Models.FeaturesManager.AddUpdateSettingModel

@{
    ViewBag.Title = "Add/Edit Settings";
    ViewBag.Subtitle = "Manage Settings for a Feature";
    ViewBag.ActiveMenu = "features-manager";
    ViewBag.BaseModel = Model;
}

<div>
    <div class="panel-body">
        <div class="form-group">
            @Html.LabelFor(m => m.Setting.Id, new { @class = "col-md-3 control-label" })
            <div class="col-md-8">
                @Html.TextBoxFor(m => m.Setting.Id, new { @class = "form-control", @readonly = true, id = "settingId" })
            </div>
        </div>
        <br />
        <div class="form-group">
            @Html.LabelFor(m => m.Setting.Name, new { @class = "col-md-3 control-label" })
            <div class="col-md-8">
                @Html.TextBoxFor(m => m.Setting.Name, new { @class = "form-control", id = "settingName", onblur = "FeaturesManager.GetSettingDescription($('#settingName').val());" })
                <select id="SettingNameSelect" style="display:none; margin-bottom:10px;" class="form-control"><!-- this will be populated dynamically --></select>
            </div>
        </div>
        <br />
        <div class="form-group">
            @Html.LabelFor(m => m.Setting.Description, new { @class = "col-md-3 control-label" })
            <div class="col-md-8">
                @Html.TextBoxFor(m => m.Setting.Description, new { @class = "form-control", id = "settingDescription" })
            </div>
        </div>
        <br />
        <div class="form-group">
            @Html.LabelFor(m => m.Setting.FeatureId, new { @class = "col-md-3 control-label" })
            <div class="col-md-8">
                @Html.TextBoxFor(m => m.Setting.FeatureId, new { @class = "form-control", @readonly = true, id = "settingFeatureId" })
            </div>
        </div>
        <br />
        <div class="form-group">
            @Html.LabelFor(m => m.Setting.GroupId, new { @class = "col-md-3 control-label" })
            <div class="col-md-8">
                @Html.TextBoxFor(m => m.Setting.GroupId, new { @class = "form-control", @readonly = true, id = "settingGroupId" })
            </div>
        </div>
        <br />
        <div class="form-group">
            @Html.LabelFor(m => m.Setting.IsInternalOnly, new { @class = "col-md-3 control-label" })
            <div class="col-md-8">
                @Html.CheckBoxFor(m => m.Setting.IsInternalOnly, new { @class = "form-control", id = "settingIsInternalOnly" })
            </div>
        </div>
        <br />

        <button onclick="FeaturesManager.AddUpdateSetting(this);">Submit</button>
    </div>
</div>

<script>
    $(document).ready(function () {
        var addUpdateSettingModel = @Html.Raw(Json.Encode(Model.ApplicationConfigurationNames));    // a namespace would add 1 var to global also, so why bother?
        document.getElementById('SettingNameSelect').size = 8;

        for (var i=0; i<addUpdateSettingModel.length; i++) {
            var selectItem = document.createElement('option');
            selectItem.value = addUpdateSettingModel[i];
            selectItem.innerHTML = addUpdateSettingModel[i];
            $("#SettingNameSelect").append(selectItem);
        }
 
        $("#settingName").keyup(function () {
            if(! $("#SettingNameSelect").is(":visible")) {
                $("#SettingNameSelect").slideToggle();
            }

            for (var i=0; i<document.getElementById("SettingNameSelect").length; i++) {     // jquery returns a length of 1
                if(document.getElementById("SettingNameSelect")[i].innerHTML.toLowerCase().indexOf($("#settingName").val().toLowerCase()) > -1) {
                    document.getElementById("SettingNameSelect").selectedIndex = i;
                    break;
                };  
            }
        });

        $("#SettingNameSelect").click(function() {      // change doesn't recognize the click because it's 'already selected'
            $("#settingName").val(this.options[this.selectedIndex].innerHTML);

            if($("#SettingNameSelect").is(":visible")) {
                $("#SettingNameSelect").slideToggle();
            }
        })
    });
</script>
