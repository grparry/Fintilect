@using Omega.Presentation.Mvc.Business
@using PSI.Models.ClientConfigurationModels.Agatha
@model Omega.Presentation.Mvc.Models.AppConfig.AppConfigModel

@{
    ViewBag.Title = "X App Config";
    ViewBag.Subtitle = "(deprecated for new settings)";
    ViewBag.ActiveMenu = "x-app-config";
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.BaseModel = Model;
}

@if (!SettingsManager.Settings.OmegaConfiguration.Features.XAppConfigEnabled)
{
    <div class="alert alert-info">
        We are sorry to enform you that this feature is not enable. 
    </div>
}
else
{
    <script>
        var AppConfigManager = {
            SearchRows: null,
            Search: function(sender) {
                var x = sender.value.toLowerCase();
                var rows = AppConfigManager.SearchRows;
                if (rows === null) {
                    AppConfigManager.SearchRows = $('[search-row-app-config]');
                    rows = AppConfigManager.SearchRows;
                }
                var rCount = rows.length;
                for (var i = 0; i < rCount; i++) {
                    var row = $(rows[i]);
                    if (row.attr('search-text').toLowerCase().indexOf(x) !== -1) {
                        if (row.hasClass('hide')) row.removeClass('hide');
                    } else {
                        if (!row.hasClass('hide')) row.addClass('hide');
                    }
                }
            },
            LoadConfigForEdit: function(sender) {
                var $sender = $(sender);
                var name = $sender.attr('resource-name');
                var application = $sender.attr('resource-application');
                $("#manageAppConfigManagerModal").modal();
                Util.ShowLoadingInInnerHtml('#manageApplicationConfigBody');

                var callback = function(data, status) {
                    Util.HideLoading();
                    if (status == 'success') {
                        $('#manageApplicationConfigBody').html(data);
                        $('#resourceSetLabel').html(name);
                    } else {
                        Util.ShowErrorInInnerHtml('#manageApplicationConfigBody', status);
                    }
                };

                $.get('./AppConfig/GetConfigSetting?name=' + name + '&application=' + application, callback);
            },
            SaveConfigValue: function(sender) {
                var $sender = $(sender);
                var name = $sender.attr('resource-name');
                var application = $sender.attr('resource-application');
                var valueIsNull = $('#ValueIsNull').prop('checked');
                var value = $('#configValueInput').val();
                var callback = function(data, status) {
                    Util.HideLoading();
                    if (status == 'success') {
                        $('#manageApplicationConfigBody').html(data);
                        $('#resourceSetLabel').html(name);
                        AppConfigManager.SearchRows = null;

                        if (valueIsNull) value = '';
                        var displayValue = value;
                        if (displayValue.length > 200)
                            displayValue = displayValue.substring(0, 197) + "...";
						$('[data-display-setting-key="' + application + '_' + name + '"]').text(displayValue);

                    } else {
                        Util.ShowErrorInInnerHtml('#manageApplicationConfigBody', status);
                    }
                };

                $.post('./AppConfig/SaveConfigSetting',
                    { Name: name, Value: value, Application: application, ValueIsNull: valueIsNull },
                    callback);
            },
            ManageDefaultConfig: function (sender, application, name) {
                var $sender = $(sender);

                $("#manageAppConfigManagerModal").modal();
                Util.ShowLoadingInInnerHtml('#manageApplicationConfigBody');

                var callback = function(data, status) {
                    Util.HideLoading();
                    if (status == 'success') {
                        $('#manageApplicationConfigBody').html(data);
                        $('#resourceSetLabel').html(name);
                    } else {
                        Util.ShowErrorInInnerHtml('#manageApplicationConfigBody', status);
                    }
                };

                $.get('./AppConfig/GetConfigDetail?name=' + name+'&application='+application, callback);
            },
            SaveDefaultConfig: function(sender) {
                var $sender = $(sender);

                var data = $('#manageDefaultConfigForm').serializeObject();
                if (data.ValueIsNull) data.ValueIsNull = 'True';

                Util.ShowLoadingInInnerHtml('#manageApplicationConfigBody');

                var callback = function(data, status) {
                    Util.HideLoading();
                    if (status == 'success') {
                        $('#manageApplicationConfigBody').html(data);
                        $('#resourceSetLabel').html(name);
                    } else {
                        Util.ShowErrorInInnerHtml('#manageApplicationConfigBody', status);
                    }
                };
                $.post('./AppConfig/SaveConfigDetail', data, callback);
            }
        };

    </script>

    <div class="form-horizontal">
        <div class="form-group">
            <div class="col-sm-6">
                <input type="text" class="form-control" id="applicationSearchTextbox" placeholder="search by name or value" onchange="AppConfigManager.Search(this);" onkeyup="AppConfigManager.Search(this);"/>
            </div>
            <div class="col-sm-6 text-right">
                @if (Model.User.PermissionLevel.CanView(PermissionLevel.Dev))
                {
                    <button type="button" class="btn btn-sm btn-default" onclick="AppConfigManager.ManageDefaultConfig(this, '');"><span class="glyphicon glyphicon-plus"></span> &nbsp; Add Setting</button>
                }
            </div>
        </div>
        <div class="row">
            <div class="col-sm-12 app-config-body">
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th></th>
                            <th></th>
                            <th></th>
                            <th>Application</th>
                            <th>Key/Name</th>
                            <th>Value</th>
                        </tr>
                    </thead>
                    @foreach (var resource in Model.Configs.OrderBy(x => x.Name))
                    {
                        <tr search-row-app-config search-text="@resource.Name.UrlEscape()|@resource.Value.First(200).UrlEscape()">
                            <td></td>
                            <td>
                                <span style="font-size: larger; cursor: pointer;" class="text-primary" title="Edit config value" onclick="
AppConfigManager.LoadConfigForEdit(this);" resource-name="@resource.Name" resource-application="@resource.Application"><span class="glyphicon glyphicon-edit"></span></span>
                            </td>
                            <td>
                                @if (Model.User.PermissionLevel.CanView(PermissionLevel.Dev))
                                {
                                    <span style="font-size: larger; cursor: pointer;" class="text-success" title="Edit default config" onclick="AppConfigManager.AppConfigManager(this, '@resource.Application','@resource.Name');"><span class="glyphicon glyphicon-cog"></span></span>
                                }
                            </td>
                            <td>@resource.Application</td>
                            <td>@resource.Name</td>
                            <td data-display-setting-key="@Html.Raw($"{resource.Application}_{resource.Name}")">@resource.Value.First(200)</td>
                        </tr>
                    }
                </table>
            </div>
        </div>
    </div>


    <div class="modal fade" role="dialog" id="manageAppConfigManagerModal">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h3 class="modal-title">Edit Application Configuration</h3>
                </div>
                <div class="modal-body" id="manageApplicationConfigBody">

                </div>
            </div>
        </div>
    </div>
}